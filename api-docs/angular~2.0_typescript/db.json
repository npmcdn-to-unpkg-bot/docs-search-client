{"index":"<h1 class=\"hero-title text-display-1 is-standard-case\">API 2.0 Preview</h1>\n  <h3 class=\"ng-binding\">@angular/common</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/APP_BASE_HREF-let.html\" class=\"ng-binding\" href=\"api/common/index/app_base_href-let\">APP_BASE_HREF</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/AbstractControl-class.html\" class=\"ng-binding\" href=\"api/common/index/abstractcontrol-class\">AbstractControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/AbstractControlDirective-class.html\" class=\"ng-binding\" href=\"api/common/index/abstractcontroldirective-class\">AbstractControlDirective</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/AsyncPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/asyncpipe-class\">AsyncPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/COMMON_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/common/index/common_directives-let\">COMMON_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/COMMON_PIPES-let.html\" class=\"ng-binding\" href=\"api/common/index/common_pipes-let\">COMMON_PIPES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/CORE_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/common/index/core_directives-let\">CORE_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/CheckboxControlValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/common/index/checkboxcontrolvalueaccessor-directive\">CheckboxControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/CommonModule-class.html\" class=\"ng-binding\" href=\"api/common/index/commonmodule-class\">CommonModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/Control-class.html\" class=\"ng-binding\" href=\"api/common/index/control-class\">Control</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/ControlArray-class.html\" class=\"ng-binding\" href=\"api/common/index/controlarray-class\">ControlArray</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/ControlContainer-class.html\" class=\"ng-binding\" href=\"api/common/index/controlcontainer-class\">ControlContainer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/ControlGroup-class.html\" class=\"ng-binding\" href=\"api/common/index/controlgroup-class\">ControlGroup</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/ControlValueAccessor-interface.html\" class=\"ng-binding\" href=\"api/common/index/controlvalueaccessor-interface\">ControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/CurrencyPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/currencypipe-class\">CurrencyPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/DatePipe-class.html\" class=\"ng-binding\" href=\"api/common/index/datepipe-class\">DatePipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/DecimalPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/decimalpipe-class\">DecimalPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/DefaultValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/common/index/defaultvalueaccessor-directive\">DefaultValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/DeprecatedFormsModule-class.html\" class=\"ng-binding\" href=\"api/common/index/deprecatedformsmodule-class\">DeprecatedFormsModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/FORM_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/common/index/form_directives-let\">FORM_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/FORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/common/index/form_providers-let\">FORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/Form-interface.html\" class=\"ng-binding\" href=\"api/common/index/form-interface\">Form</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/FormBuilder-class.html\" class=\"ng-binding\" href=\"api/common/index/formbuilder-class\">FormBuilder</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/HashLocationStrategy-class.html\" class=\"ng-binding\" href=\"api/common/index/hashlocationstrategy-class\">HashLocationStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/I18nPluralPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/i18npluralpipe-class\">I18nPluralPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/I18nSelectPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/i18nselectpipe-class\">I18nSelectPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/JsonPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/jsonpipe-class\">JsonPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/Location-class.html\" class=\"ng-binding\" href=\"api/common/index/location-class\">Location</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/LocationStrategy-class.html\" class=\"ng-binding\" href=\"api/common/index/locationstrategy-class\">LocationStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/LowerCasePipe-class.html\" class=\"ng-binding\" href=\"api/common/index/lowercasepipe-class\">LowerCasePipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/MaxLengthValidator-directive.html\" class=\"ng-binding\" href=\"api/common/index/maxlengthvalidator-directive\">MaxLengthValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/MinLengthValidator-directive.html\" class=\"ng-binding\" href=\"api/common/index/minlengthvalidator-directive\">MinLengthValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NG_ASYNC_VALIDATORS-let.html\" class=\"ng-binding\" href=\"api/common/index/ng_async_validators-let\">NG_ASYNC_VALIDATORS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NG_VALIDATORS-let.html\" class=\"ng-binding\" href=\"api/common/index/ng_validators-let\">NG_VALIDATORS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NG_VALUE_ACCESSOR-let.html\" class=\"ng-binding\" href=\"api/common/index/ng_value_accessor-let\">NG_VALUE_ACCESSOR</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgClass-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngclass-directive\">NgClass</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgControl-class.html\" class=\"ng-binding\" href=\"api/common/index/ngcontrol-class\">NgControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgControlGroup-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngcontrolgroup-directive\">NgControlGroup</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgControlName-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngcontrolname-directive\">NgControlName</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgControlStatus-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngcontrolstatus-directive\">NgControlStatus</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgFor-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngfor-directive\">NgFor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgForm-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngform-directive\">NgForm</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgFormControl-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngformcontrol-directive\">NgFormControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgFormModel-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngformmodel-directive\">NgFormModel</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgIf-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngif-directive\">NgIf</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgLocalization-class.html\" class=\"ng-binding\" href=\"api/common/index/nglocalization-class\">NgLocalization</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgModel-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngmodel-directive\">NgModel</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgPlural-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngplural-directive\">NgPlural</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgPluralCase-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngpluralcase-directive\">NgPluralCase</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgSelectOption-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngselectoption-directive\">NgSelectOption</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgStyle-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngstyle-directive\">NgStyle</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgSwitch-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngswitch-directive\">NgSwitch</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgSwitchCase-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngswitchcase-directive\">NgSwitchCase</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgSwitchDefault-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngswitchdefault-directive\">NgSwitchDefault</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/NgTemplateOutlet-directive.html\" class=\"ng-binding\" href=\"api/common/index/ngtemplateoutlet-directive\">NgTemplateOutlet</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/PathLocationStrategy-class.html\" class=\"ng-binding\" href=\"api/common/index/pathlocationstrategy-class\">PathLocationStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/PatternValidator-directive.html\" class=\"ng-binding\" href=\"api/common/index/patternvalidator-directive\">PatternValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/PercentPipe-class.html\" class=\"ng-binding\" href=\"api/common/index/percentpipe-class\">PercentPipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/PlatformLocation-class.html\" class=\"ng-binding\" href=\"api/common/index/platformlocation-class\">PlatformLocation</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/RadioButtonState-class.html\" class=\"ng-binding\" href=\"api/common/index/radiobuttonstate-class\">RadioButtonState</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/ReplacePipe-class.html\" class=\"ng-binding\" href=\"api/common/index/replacepipe-class\">ReplacePipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/RequiredValidator-directive.html\" class=\"ng-binding\" href=\"api/common/index/requiredvalidator-directive\">RequiredValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/SelectControlValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/common/index/selectcontrolvalueaccessor-directive\">SelectControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/SlicePipe-class.html\" class=\"ng-binding\" href=\"api/common/index/slicepipe-class\">SlicePipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/UpperCasePipe-class.html\" class=\"ng-binding\" href=\"api/common/index/uppercasepipe-class\">UpperCasePipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/UrlChangeEvent-interface.html\" class=\"ng-binding\" href=\"api/common/index/urlchangeevent-interface\">UrlChangeEvent</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/UrlChangeListener-interface.html\" class=\"ng-binding\" href=\"api/common/index/urlchangelistener-interface\">UrlChangeListener</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/Validator-interface.html\" class=\"ng-binding\" href=\"api/common/index/validator-interface\">Validator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/index/Validators-class.html\" class=\"ng-binding\" href=\"api/common/index/validators-class\">Validators</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/common/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/testing/MockLocationStrategy-class.html\" class=\"ng-binding\" href=\"api/common/testing/mocklocationstrategy-class\">MockLocationStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"common/testing/SpyLocation-class.html\" class=\"ng-binding\" href=\"api/common/testing/spylocation-class\">SpyLocation</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/core</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ANALYZE_FOR_ENTRY_COMPONENTS-let.html\" class=\"ng-binding\" href=\"api/core/index/analyze_for_entry_components-let\">ANALYZE_FOR_ENTRY_COMPONENTS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/APPLICATION_COMMON_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/core/index/application_common_providers-let\">APPLICATION_COMMON_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/APP_BOOTSTRAP_LISTENER-let.html\" class=\"ng-binding\" href=\"api/core/index/app_bootstrap_listener-let\">APP_BOOTSTRAP_LISTENER</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/APP_ID-let.html\" class=\"ng-binding\" href=\"api/core/index/app_id-let\">APP_ID</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/APP_INITIALIZER-let.html\" class=\"ng-binding\" href=\"api/core/index/app_initializer-let\">APP_INITIALIZER</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AUTO_STYLE-let.html\" class=\"ng-binding\" href=\"api/core/index/auto_style-let\">AUTO_STYLE</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AbstractProviderError-class.html\" class=\"ng-binding\" href=\"api/core/index/abstractprovidererror-class\">AbstractProviderError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AfterContentChecked-class.html\" class=\"ng-binding\" href=\"api/core/index/aftercontentchecked-class\">AfterContentChecked</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AfterContentInit-class.html\" class=\"ng-binding\" href=\"api/core/index/aftercontentinit-class\">AfterContentInit</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AfterViewChecked-class.html\" class=\"ng-binding\" href=\"api/core/index/afterviewchecked-class\">AfterViewChecked</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AfterViewInit-class.html\" class=\"ng-binding\" href=\"api/core/index/afterviewinit-class\">AfterViewInit</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationAnimateMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationanimatemetadata-class\">AnimationAnimateMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationEntryMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationentrymetadata-class\">AnimationEntryMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationGroupMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationgroupmetadata-class\">AnimationGroupMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationKeyframesSequenceMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationkeyframessequencemetadata-class\">AnimationKeyframesSequenceMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationmetadata-class\">AnimationMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationPlayer-class.html\" class=\"ng-binding\" href=\"api/core/index/animationplayer-class\">AnimationPlayer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationSequenceMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationsequencemetadata-class\">AnimationSequenceMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationStateDeclarationMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationstatedeclarationmetadata-class\">AnimationStateDeclarationMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationStateMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationstatemetadata-class\">AnimationStateMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationStateTransitionMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationstatetransitionmetadata-class\">AnimationStateTransitionMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationStyleMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationstylemetadata-class\">AnimationStyleMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AnimationWithStepsMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/animationwithstepsmetadata-class\">AnimationWithStepsMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ApplicationInitStatus-class.html\" class=\"ng-binding\" href=\"api/core/index/applicationinitstatus-class\">ApplicationInitStatus</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ApplicationModule-class.html\" class=\"ng-binding\" href=\"api/core/index/applicationmodule-class\">ApplicationModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ApplicationRef-class.html\" class=\"ng-binding\" href=\"api/core/index/applicationref-class\">ApplicationRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Attribute-var.html\" class=\"ng-binding\" href=\"api/core/index/attribute-var\">Attribute</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AttributeMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/attributemetadata-class\">AttributeMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/AttributeMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/attributemetadatafactory-interface\">AttributeMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/BaseException-class.html\" class=\"ng-binding\" href=\"api/core/index/baseexception-class\">BaseException</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Binding-class.html\" class=\"ng-binding\" href=\"api/core/index/binding-class\">Binding</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/COMPILER_OPTIONS-let.html\" class=\"ng-binding\" href=\"api/core/index/compiler_options-let\">COMPILER_OPTIONS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/CUSTOM_ELEMENTS_SCHEMA-let.html\" class=\"ng-binding\" href=\"api/core/index/custom_elements_schema-let\">CUSTOM_ELEMENTS_SCHEMA</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ChangeDetectionStrategy-enum.html\" class=\"ng-binding\" href=\"api/core/index/changedetectionstrategy-enum\">ChangeDetectionStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ChangeDetectorRef-class.html\" class=\"ng-binding\" href=\"api/core/index/changedetectorref-class\">ChangeDetectorRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Class-function.html\" class=\"ng-binding\" href=\"api/core/index/class-function\">Class</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ClassDefinition-interface.html\" class=\"ng-binding\" href=\"api/core/index/classdefinition-interface\">ClassDefinition</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/CollectionChangeRecord-class.html\" class=\"ng-binding\" href=\"api/core/index/collectionchangerecord-class\">CollectionChangeRecord</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Compiler-class.html\" class=\"ng-binding\" href=\"api/core/index/compiler-class\">Compiler</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/CompilerFactory-class.html\" class=\"ng-binding\" href=\"api/core/index/compilerfactory-class\">CompilerFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/CompilerOptions-type-alias.html\" class=\"ng-binding\" href=\"api/core/index/compileroptions-type-alias\">CompilerOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Component-decorator.html\" class=\"ng-binding\" href=\"api/core/index/component-decorator\">Component</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentDecorator-interface.html\" class=\"ng-binding\" href=\"api/core/index/componentdecorator-interface\">ComponentDecorator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentFactory-class.html\" class=\"ng-binding\" href=\"api/core/index/componentfactory-class\">ComponentFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentFactoryResolver-class.html\" class=\"ng-binding\" href=\"api/core/index/componentfactoryresolver-class\">ComponentFactoryResolver</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/componentmetadata-class\">ComponentMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/componentmetadatafactory-interface\">ComponentMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentMetadataType-interface.html\" class=\"ng-binding\" href=\"api/core/index/componentmetadatatype-interface\">ComponentMetadataType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentRef-class.html\" class=\"ng-binding\" href=\"api/core/index/componentref-class\">ComponentRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentResolver-class.html\" class=\"ng-binding\" href=\"api/core/index/componentresolver-class\">ComponentResolver</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ComponentStillLoadingError-class.html\" class=\"ng-binding\" href=\"api/core/index/componentstillloadingerror-class\">ComponentStillLoadingError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChild-var.html\" class=\"ng-binding\" href=\"api/core/index/contentchild-var\">ContentChild</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChildMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/contentchildmetadata-class\">ContentChildMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChildMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/contentchildmetadatafactory-interface\">ContentChildMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChildren-var.html\" class=\"ng-binding\" href=\"api/core/index/contentchildren-var\">ContentChildren</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChildrenMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/contentchildrenmetadata-class\">ContentChildrenMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ContentChildrenMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/contentchildrenmetadatafactory-interface\">ContentChildrenMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/CyclicDependencyError-class.html\" class=\"ng-binding\" href=\"api/core/index/cyclicdependencyerror-class\">CyclicDependencyError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DebugElement-class.html\" class=\"ng-binding\" href=\"api/core/index/debugelement-class\">DebugElement</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DebugNode-class.html\" class=\"ng-binding\" href=\"api/core/index/debugnode-class\">DebugNode</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DefaultIterableDiffer-class.html\" class=\"ng-binding\" href=\"api/core/index/defaultiterablediffer-class\">DefaultIterableDiffer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Directive-decorator.html\" class=\"ng-binding\" href=\"api/core/index/directive-decorator\">Directive</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DirectiveDecorator-interface.html\" class=\"ng-binding\" href=\"api/core/index/directivedecorator-interface\">DirectiveDecorator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DirectiveMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/directivemetadata-class\">DirectiveMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DirectiveMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/directivemetadatafactory-interface\">DirectiveMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DirectiveMetadataType-interface.html\" class=\"ng-binding\" href=\"api/core/index/directivemetadatatype-interface\">DirectiveMetadataType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DoCheck-class.html\" class=\"ng-binding\" href=\"api/core/index/docheck-class\">DoCheck</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/DynamicComponentLoader-class.html\" class=\"ng-binding\" href=\"api/core/index/dynamiccomponentloader-class\">DynamicComponentLoader</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ElementRef-class.html\" class=\"ng-binding\" href=\"api/core/index/elementref-class\">ElementRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/EmbeddedViewRef-class.html\" class=\"ng-binding\" href=\"api/core/index/embeddedviewref-class\">EmbeddedViewRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/EventEmitter-class.html\" class=\"ng-binding\" href=\"api/core/index/eventemitter-class\">EventEmitter</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ExceptionHandler-class.html\" class=\"ng-binding\" href=\"api/core/index/exceptionhandler-class\">ExceptionHandler</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ExpressionChangedAfterItHasBeenCheckedException-class.html\" class=\"ng-binding\" href=\"api/core/index/expressionchangedafterithasbeencheckedexception-class\">ExpressionChangedAfterItHasBeenCheckedException</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ForwardRefFn-interface.html\" class=\"ng-binding\" href=\"api/core/index/forwardreffn-interface\">ForwardRefFn</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/GetTestability-interface.html\" class=\"ng-binding\" href=\"api/core/index/gettestability-interface\">GetTestability</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Host-var.html\" class=\"ng-binding\" href=\"api/core/index/host-var\">Host</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostBinding-var.html\" class=\"ng-binding\" href=\"api/core/index/hostbinding-var\">HostBinding</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostBindingMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/hostbindingmetadata-class\">HostBindingMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostBindingMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/hostbindingmetadatafactory-interface\">HostBindingMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostListener-var.html\" class=\"ng-binding\" href=\"api/core/index/hostlistener-var\">HostListener</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostListenerMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/hostlistenermetadata-class\">HostListenerMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostListenerMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/hostlistenermetadatafactory-interface\">HostListenerMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/hostmetadata-class\">HostMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/HostMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/hostmetadatafactory-interface\">HostMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Inject-var.html\" class=\"ng-binding\" href=\"api/core/index/inject-var\">Inject</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InjectMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/injectmetadata-class\">InjectMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InjectMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/injectmetadatafactory-interface\">InjectMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Injectable-decorator.html\" class=\"ng-binding\" href=\"api/core/index/injectable-decorator\">Injectable</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InjectableMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/injectablemetadata-class\">InjectableMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InjectableMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/injectablemetadatafactory-interface\">InjectableMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Injector-class.html\" class=\"ng-binding\" href=\"api/core/index/injector-class\">Injector</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Input-var.html\" class=\"ng-binding\" href=\"api/core/index/input-var\">Input</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InputMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/inputmetadata-class\">InputMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InputMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/inputmetadatafactory-interface\">InputMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InstantiationError-class.html\" class=\"ng-binding\" href=\"api/core/index/instantiationerror-class\">InstantiationError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/InvalidProviderError-class.html\" class=\"ng-binding\" href=\"api/core/index/invalidprovidererror-class\">InvalidProviderError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/IterableDiffer-interface.html\" class=\"ng-binding\" href=\"api/core/index/iterablediffer-interface\">IterableDiffer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/IterableDifferFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/iterabledifferfactory-interface\">IterableDifferFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/IterableDiffers-class.html\" class=\"ng-binding\" href=\"api/core/index/iterablediffers-class\">IterableDiffers</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/KeyValueChangeRecord-class.html\" class=\"ng-binding\" href=\"api/core/index/keyvaluechangerecord-class\">KeyValueChangeRecord</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/KeyValueDiffer-interface.html\" class=\"ng-binding\" href=\"api/core/index/keyvaluediffer-interface\">KeyValueDiffer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/KeyValueDifferFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/keyvaluedifferfactory-interface\">KeyValueDifferFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/KeyValueDiffers-class.html\" class=\"ng-binding\" href=\"api/core/index/keyvaluediffers-class\">KeyValueDiffers</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ModuleWithComponentFactories-class.html\" class=\"ng-binding\" href=\"api/core/index/modulewithcomponentfactories-class\">ModuleWithComponentFactories</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ModuleWithProviders-interface.html\" class=\"ng-binding\" href=\"api/core/index/modulewithproviders-interface\">ModuleWithProviders</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModule-decorator.html\" class=\"ng-binding\" href=\"api/core/index/ngmodule-decorator\">NgModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleDecorator-interface.html\" class=\"ng-binding\" href=\"api/core/index/ngmoduledecorator-interface\">NgModuleDecorator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleFactory-class.html\" class=\"ng-binding\" href=\"api/core/index/ngmodulefactory-class\">NgModuleFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleFactoryLoader-class.html\" class=\"ng-binding\" href=\"api/core/index/ngmodulefactoryloader-class\">NgModuleFactoryLoader</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/ngmodulemetadata-class\">NgModuleMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/ngmodulemetadatafactory-interface\">NgModuleMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleMetadataType-interface.html\" class=\"ng-binding\" href=\"api/core/index/ngmodulemetadatatype-interface\">NgModuleMetadataType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgModuleRef-class.html\" class=\"ng-binding\" href=\"api/core/index/ngmoduleref-class\">NgModuleRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgZone-class.html\" class=\"ng-binding\" href=\"api/core/index/ngzone-class\">NgZone</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NgZoneError-class.html\" class=\"ng-binding\" href=\"api/core/index/ngzoneerror-class\">NgZoneError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NoAnnotationError-class.html\" class=\"ng-binding\" href=\"api/core/index/noannotationerror-class\">NoAnnotationError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NoComponentFactoryError-class.html\" class=\"ng-binding\" href=\"api/core/index/nocomponentfactoryerror-class\">NoComponentFactoryError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/NoProviderError-class.html\" class=\"ng-binding\" href=\"api/core/index/noprovidererror-class\">NoProviderError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OnChanges-class.html\" class=\"ng-binding\" href=\"api/core/index/onchanges-class\">OnChanges</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OnDestroy-class.html\" class=\"ng-binding\" href=\"api/core/index/ondestroy-class\">OnDestroy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OnInit-class.html\" class=\"ng-binding\" href=\"api/core/index/oninit-class\">OnInit</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OpaqueToken-class.html\" class=\"ng-binding\" href=\"api/core/index/opaquetoken-class\">OpaqueToken</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Optional-var.html\" class=\"ng-binding\" href=\"api/core/index/optional-var\">Optional</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OptionalMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/optionalmetadata-class\">OptionalMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OptionalMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/optionalmetadatafactory-interface\">OptionalMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OutOfBoundsError-class.html\" class=\"ng-binding\" href=\"api/core/index/outofboundserror-class\">OutOfBoundsError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Output-var.html\" class=\"ng-binding\" href=\"api/core/index/output-var\">Output</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OutputMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/outputmetadata-class\">OutputMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/OutputMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/outputmetadatafactory-interface\">OutputMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PACKAGE_ROOT_URL-let.html\" class=\"ng-binding\" href=\"api/core/index/package_root_url-let\">PACKAGE_ROOT_URL</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PLATFORM_COMMON_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/core/index/platform_common_providers-let\">PLATFORM_COMMON_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PLATFORM_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/core/index/platform_directives-let\">PLATFORM_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PLATFORM_INITIALIZER-let.html\" class=\"ng-binding\" href=\"api/core/index/platform_initializer-let\">PLATFORM_INITIALIZER</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PLATFORM_PIPES-let.html\" class=\"ng-binding\" href=\"api/core/index/platform_pipes-let\">PLATFORM_PIPES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Pipe-decorator.html\" class=\"ng-binding\" href=\"api/core/index/pipe-decorator\">Pipe</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PipeMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/pipemetadata-class\">PipeMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PipeMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/pipemetadatafactory-interface\">PipeMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PipeMetadataType-interface.html\" class=\"ng-binding\" href=\"api/core/index/pipemetadatatype-interface\">PipeMetadataType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PipeTransform-interface.html\" class=\"ng-binding\" href=\"api/core/index/pipetransform-interface\">PipeTransform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/PlatformRef-class.html\" class=\"ng-binding\" href=\"api/core/index/platformref-class\">PlatformRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Provider-class.html\" class=\"ng-binding\" href=\"api/core/index/provider-class\">Provider</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ProviderBuilder-class.html\" class=\"ng-binding\" href=\"api/core/index/providerbuilder-class\">ProviderBuilder</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Query-var.html\" class=\"ng-binding\" href=\"api/core/index/query-var\">Query</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/QueryList-class.html\" class=\"ng-binding\" href=\"api/core/index/querylist-class\">QueryList</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/QueryMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/querymetadata-class\">QueryMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/QueryMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/querymetadatafactory-interface\">QueryMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ReflectiveInjector-class.html\" class=\"ng-binding\" href=\"api/core/index/reflectiveinjector-class\">ReflectiveInjector</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ReflectiveKey-class.html\" class=\"ng-binding\" href=\"api/core/index/reflectivekey-class\">ReflectiveKey</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/RenderComponentType-class.html\" class=\"ng-binding\" href=\"api/core/index/rendercomponenttype-class\">RenderComponentType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Renderer-class.html\" class=\"ng-binding\" href=\"api/core/index/renderer-class\">Renderer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ResolvedReflectiveBinding-interface.html\" class=\"ng-binding\" href=\"api/core/index/resolvedreflectivebinding-interface\">ResolvedReflectiveBinding</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ResolvedReflectiveFactory-class.html\" class=\"ng-binding\" href=\"api/core/index/resolvedreflectivefactory-class\">ResolvedReflectiveFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ResolvedReflectiveProvider-interface.html\" class=\"ng-binding\" href=\"api/core/index/resolvedreflectiveprovider-interface\">ResolvedReflectiveProvider</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/RootRenderer-class.html\" class=\"ng-binding\" href=\"api/core/index/rootrenderer-class\">RootRenderer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SanitizationService-class.html\" class=\"ng-binding\" href=\"api/core/index/sanitizationservice-class\">SanitizationService</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SchemaMetadata-interface.html\" class=\"ng-binding\" href=\"api/core/index/schemametadata-interface\">SchemaMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SecurityContext-enum.html\" class=\"ng-binding\" href=\"api/core/index/securitycontext-enum\">SecurityContext</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Self-var.html\" class=\"ng-binding\" href=\"api/core/index/self-var\">Self</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SelfMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/selfmetadata-class\">SelfMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SelfMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/selfmetadatafactory-interface\">SelfMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SimpleChange-class.html\" class=\"ng-binding\" href=\"api/core/index/simplechange-class\">SimpleChange</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SimpleChanges-interface.html\" class=\"ng-binding\" href=\"api/core/index/simplechanges-interface\">SimpleChanges</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SkipSelf-var.html\" class=\"ng-binding\" href=\"api/core/index/skipself-var\">SkipSelf</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SkipSelfMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/skipselfmetadata-class\">SkipSelfMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SkipSelfMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/skipselfmetadatafactory-interface\">SkipSelfMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SystemJsCmpFactoryResolver-class.html\" class=\"ng-binding\" href=\"api/core/index/systemjscmpfactoryresolver-class\">SystemJsCmpFactoryResolver</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SystemJsComponentResolver-class.html\" class=\"ng-binding\" href=\"api/core/index/systemjscomponentresolver-class\">SystemJsComponentResolver</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/SystemJsNgModuleLoader-class.html\" class=\"ng-binding\" href=\"api/core/index/systemjsngmoduleloader-class\">SystemJsNgModuleLoader</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/TemplateRef-class.html\" class=\"ng-binding\" href=\"api/core/index/templateref-class\">TemplateRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Testability-class.html\" class=\"ng-binding\" href=\"api/core/index/testability-class\">Testability</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/TestabilityRegistry-class.html\" class=\"ng-binding\" href=\"api/core/index/testabilityregistry-class\">TestabilityRegistry</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/TrackByFn-interface.html\" class=\"ng-binding\" href=\"api/core/index/trackbyfn-interface\">TrackByFn</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/Type-interface.html\" class=\"ng-binding\" href=\"api/core/index/type-interface\">Type</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/TypeDecorator-interface.html\" class=\"ng-binding\" href=\"api/core/index/typedecorator-interface\">TypeDecorator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChild-var.html\" class=\"ng-binding\" href=\"api/core/index/viewchild-var\">ViewChild</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChildMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/viewchildmetadata-class\">ViewChildMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChildMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/viewchildmetadatafactory-interface\">ViewChildMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChildren-var.html\" class=\"ng-binding\" href=\"api/core/index/viewchildren-var\">ViewChildren</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChildrenMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/viewchildrenmetadata-class\">ViewChildrenMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewChildrenMetadataFactory-interface.html\" class=\"ng-binding\" href=\"api/core/index/viewchildrenmetadatafactory-interface\">ViewChildrenMetadataFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewContainerRef-class.html\" class=\"ng-binding\" href=\"api/core/index/viewcontainerref-class\">ViewContainerRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewEncapsulation-enum.html\" class=\"ng-binding\" href=\"api/core/index/viewencapsulation-enum\">ViewEncapsulation</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/viewmetadata-class\">ViewMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewQuery-var.html\" class=\"ng-binding\" href=\"api/core/index/viewquery-var\">ViewQuery</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewQueryMetadata-class.html\" class=\"ng-binding\" href=\"api/core/index/viewquerymetadata-class\">ViewQueryMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/ViewRef-class.html\" class=\"ng-binding\" href=\"api/core/index/viewref-class\">ViewRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/WrappedException-class.html\" class=\"ng-binding\" href=\"api/core/index/wrappedexception-class\">WrappedException</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/WrappedValue-class.html\" class=\"ng-binding\" href=\"api/core/index/wrappedvalue-class\">WrappedValue</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/WtfScopeFn-interface.html\" class=\"ng-binding\" href=\"api/core/index/wtfscopefn-interface\">WtfScopeFn</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/animate-function.html\" class=\"ng-binding\" href=\"api/core/index/animate-function\">animate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/asNativeElements-function.html\" class=\"ng-binding\" href=\"api/core/index/asnativeelements-function\">asNativeElements</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/assertPlatform-function.html\" class=\"ng-binding\" href=\"api/core/index/assertplatform-function\">assertPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/bind-function.html\" class=\"ng-binding\" href=\"api/core/index/bind-function\">bind</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/coreBootstrap-function.html\" class=\"ng-binding\" href=\"api/core/index/corebootstrap-function\">coreBootstrap</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/coreLoadAndBootstrap-function.html\" class=\"ng-binding\" href=\"api/core/index/coreloadandbootstrap-function\">coreLoadAndBootstrap</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/createPlatform-function.html\" class=\"ng-binding\" href=\"api/core/index/createplatform-function\">createPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/createPlatformFactory-function.html\" class=\"ng-binding\" href=\"api/core/index/createplatformfactory-function\">createPlatformFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/disposePlatform-function.html\" class=\"ng-binding\" href=\"api/core/index/disposeplatform-function\">disposePlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/enableProdMode-function.html\" class=\"ng-binding\" href=\"api/core/index/enableprodmode-function\">enableProdMode</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/forwardRef-function.html\" class=\"ng-binding\" href=\"api/core/index/forwardref-function\">forwardRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/getDebugNode-function.html\" class=\"ng-binding\" href=\"api/core/index/getdebugnode-function\">getDebugNode</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/getPlatform-function.html\" class=\"ng-binding\" href=\"api/core/index/getplatform-function\">getPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/group-function.html\" class=\"ng-binding\" href=\"api/core/index/group-function\">group</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/isDevMode-function.html\" class=\"ng-binding\" href=\"api/core/index/isdevmode-function\">isDevMode</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/keyframes-function.html\" class=\"ng-binding\" href=\"api/core/index/keyframes-function\">keyframes</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/lockRunMode-function.html\" class=\"ng-binding\" href=\"api/core/index/lockrunmode-function\">lockRunMode</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/platformCore-let.html\" class=\"ng-binding\" href=\"api/core/index/platformcore-let\">platformCore</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/provide-function.html\" class=\"ng-binding\" href=\"api/core/index/provide-function\">provide</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/resolveForwardRef-function.html\" class=\"ng-binding\" href=\"api/core/index/resolveforwardref-function\">resolveForwardRef</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/sequence-function.html\" class=\"ng-binding\" href=\"api/core/index/sequence-function\">sequence</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/setTestabilityGetter-function.html\" class=\"ng-binding\" href=\"api/core/index/settestabilitygetter-function\">setTestabilityGetter</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/state-function.html\" class=\"ng-binding\" href=\"api/core/index/state-function\">state</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/style-function.html\" class=\"ng-binding\" href=\"api/core/index/style-function\">style</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/transition-function.html\" class=\"ng-binding\" href=\"api/core/index/transition-function\">transition</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/trigger-function.html\" class=\"ng-binding\" href=\"api/core/index/trigger-function\">trigger</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/wtfCreateScope-var.html\" class=\"ng-binding\" href=\"api/core/index/wtfcreatescope-var\">wtfCreateScope</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/wtfEndTimeRange-var.html\" class=\"ng-binding\" href=\"api/core/index/wtfendtimerange-var\">wtfEndTimeRange</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/wtfLeave-var.html\" class=\"ng-binding\" href=\"api/core/index/wtfleave-var\">wtfLeave</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/index/wtfStartTimeRange-var.html\" class=\"ng-binding\" href=\"api/core/index/wtfstarttimerange-var\">wtfStartTimeRange</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/core/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/ComponentFixture-class.html\" class=\"ng-binding\" href=\"api/core/testing/componentfixture-class\">ComponentFixture</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/ComponentFixtureAutoDetect-var.html\" class=\"ng-binding\" href=\"api/core/testing/componentfixtureautodetect-var\">ComponentFixtureAutoDetect</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/ComponentFixtureNoNgZone-var.html\" class=\"ng-binding\" href=\"api/core/testing/componentfixturenongzone-var\">ComponentFixtureNoNgZone</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/InjectSetupWrapper-class.html\" class=\"ng-binding\" href=\"api/core/testing/injectsetupwrapper-class\">InjectSetupWrapper</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/MetadataOverride-type-alias.html\" class=\"ng-binding\" href=\"api/core/testing/metadataoverride-type-alias\">MetadataOverride</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/TestBed-class.html\" class=\"ng-binding\" href=\"api/core/testing/testbed-class\">TestBed</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/TestComponentBuilder-class.html\" class=\"ng-binding\" href=\"api/core/testing/testcomponentbuilder-class\">TestComponentBuilder</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/TestComponentRenderer-class.html\" class=\"ng-binding\" href=\"api/core/testing/testcomponentrenderer-class\">TestComponentRenderer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/TestModuleMetadata-type-alias.html\" class=\"ng-binding\" href=\"api/core/testing/testmodulemetadata-type-alias\">TestModuleMetadata</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/___core_private_testing__-var.html\" class=\"ng-binding\" href=\"api/core/testing/___core_private_testing__-var\">___core_private_testing__</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/addProviders-function.html\" class=\"ng-binding\" href=\"api/core/testing/addproviders-function\">addProviders</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/async-function.html\" class=\"ng-binding\" href=\"api/core/testing/async-function\">async</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/discardPeriodicTasks-function.html\" class=\"ng-binding\" href=\"api/core/testing/discardperiodictasks-function\">discardPeriodicTasks</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/fakeAsync-function.html\" class=\"ng-binding\" href=\"api/core/testing/fakeasync-function\">fakeAsync</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/flushMicrotasks-function.html\" class=\"ng-binding\" href=\"api/core/testing/flushmicrotasks-function\">flushMicrotasks</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/getTestBed-function.html\" class=\"ng-binding\" href=\"api/core/testing/gettestbed-function\">getTestBed</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/inject-function.html\" class=\"ng-binding\" href=\"api/core/testing/inject-function\">inject</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/resetFakeAsyncZone-function.html\" class=\"ng-binding\" href=\"api/core/testing/resetfakeasynczone-function\">resetFakeAsyncZone</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/tick-function.html\" class=\"ng-binding\" href=\"api/core/testing/tick-function\">tick</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/withModule-function.html\" class=\"ng-binding\" href=\"api/core/testing/withmodule-function\">withModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"core/testing/withProviders-function.html\" class=\"ng-binding\" href=\"api/core/testing/withproviders-function\">withProviders</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/forms</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/AbstractControl-class.html\" class=\"ng-binding\" href=\"api/forms/index/abstractcontrol-class\">AbstractControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/AbstractControlDirective-class.html\" class=\"ng-binding\" href=\"api/forms/index/abstractcontroldirective-class\">AbstractControlDirective</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/AbstractFormGroupDirective-class.html\" class=\"ng-binding\" href=\"api/forms/index/abstractformgroupdirective-class\">AbstractFormGroupDirective</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/AsyncValidatorFn-interface.html\" class=\"ng-binding\" href=\"api/forms/index/asyncvalidatorfn-interface\">AsyncValidatorFn</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/CheckboxControlValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/forms/index/checkboxcontrolvalueaccessor-directive\">CheckboxControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/ControlContainer-class.html\" class=\"ng-binding\" href=\"api/forms/index/controlcontainer-class\">ControlContainer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/ControlValueAccessor-interface.html\" class=\"ng-binding\" href=\"api/forms/index/controlvalueaccessor-interface\">ControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/DefaultValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/forms/index/defaultvalueaccessor-directive\">DefaultValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FORM_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/forms/index/form_directives-let\">FORM_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/forms/index/form_providers-let\">FORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/Form-interface.html\" class=\"ng-binding\" href=\"api/forms/index/form-interface\">Form</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormArray-class.html\" class=\"ng-binding\" href=\"api/forms/index/formarray-class\">FormArray</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormArrayName-directive.html\" class=\"ng-binding\" href=\"api/forms/index/formarrayname-directive\">FormArrayName</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormBuilder-class.html\" class=\"ng-binding\" href=\"api/forms/index/formbuilder-class\">FormBuilder</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormControl-class.html\" class=\"ng-binding\" href=\"api/forms/index/formcontrol-class\">FormControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormControlDirective-directive.html\" class=\"ng-binding\" href=\"api/forms/index/formcontroldirective-directive\">FormControlDirective</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormControlName-directive.html\" class=\"ng-binding\" href=\"api/forms/index/formcontrolname-directive\">FormControlName</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormGroup-class.html\" class=\"ng-binding\" href=\"api/forms/index/formgroup-class\">FormGroup</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormGroupDirective-directive.html\" class=\"ng-binding\" href=\"api/forms/index/formgroupdirective-directive\">FormGroupDirective</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormGroupName-directive.html\" class=\"ng-binding\" href=\"api/forms/index/formgroupname-directive\">FormGroupName</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/FormsModule-class.html\" class=\"ng-binding\" href=\"api/forms/index/formsmodule-class\">FormsModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/MaxLengthValidator-directive.html\" class=\"ng-binding\" href=\"api/forms/index/maxlengthvalidator-directive\">MaxLengthValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/MinLengthValidator-directive.html\" class=\"ng-binding\" href=\"api/forms/index/minlengthvalidator-directive\">MinLengthValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NG_ASYNC_VALIDATORS-let.html\" class=\"ng-binding\" href=\"api/forms/index/ng_async_validators-let\">NG_ASYNC_VALIDATORS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NG_VALIDATORS-let.html\" class=\"ng-binding\" href=\"api/forms/index/ng_validators-let\">NG_VALIDATORS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NG_VALUE_ACCESSOR-let.html\" class=\"ng-binding\" href=\"api/forms/index/ng_value_accessor-let\">NG_VALUE_ACCESSOR</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgControl-class.html\" class=\"ng-binding\" href=\"api/forms/index/ngcontrol-class\">NgControl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgControlStatus-directive.html\" class=\"ng-binding\" href=\"api/forms/index/ngcontrolstatus-directive\">NgControlStatus</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgForm-directive.html\" class=\"ng-binding\" href=\"api/forms/index/ngform-directive\">NgForm</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgModel-directive.html\" class=\"ng-binding\" href=\"api/forms/index/ngmodel-directive\">NgModel</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgModelGroup-directive.html\" class=\"ng-binding\" href=\"api/forms/index/ngmodelgroup-directive\">NgModelGroup</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/NgSelectOption-directive.html\" class=\"ng-binding\" href=\"api/forms/index/ngselectoption-directive\">NgSelectOption</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/PatternValidator-directive.html\" class=\"ng-binding\" href=\"api/forms/index/patternvalidator-directive\">PatternValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/REACTIVE_FORM_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/forms/index/reactive_form_directives-let\">REACTIVE_FORM_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/REACTIVE_FORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/forms/index/reactive_form_providers-let\">REACTIVE_FORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/ReactiveFormsModule-class.html\" class=\"ng-binding\" href=\"api/forms/index/reactiveformsmodule-class\">ReactiveFormsModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/RequiredValidator-directive.html\" class=\"ng-binding\" href=\"api/forms/index/requiredvalidator-directive\">RequiredValidator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/SelectControlValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/forms/index/selectcontrolvalueaccessor-directive\">SelectControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/SelectMultipleControlValueAccessor-directive.html\" class=\"ng-binding\" href=\"api/forms/index/selectmultiplecontrolvalueaccessor-directive\">SelectMultipleControlValueAccessor</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/Validator-interface.html\" class=\"ng-binding\" href=\"api/forms/index/validator-interface\">Validator</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/ValidatorFn-interface.html\" class=\"ng-binding\" href=\"api/forms/index/validatorfn-interface\">ValidatorFn</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/Validators-class.html\" class=\"ng-binding\" href=\"api/forms/index/validators-class\">Validators</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/disableDeprecatedForms-function.html\" class=\"ng-binding\" href=\"api/forms/index/disabledeprecatedforms-function\">disableDeprecatedForms</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"forms/index/provideForms-function.html\" class=\"ng-binding\" href=\"api/forms/index/provideforms-function\">provideForms</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/http</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/BaseRequestOptions-class.html\" class=\"ng-binding\" href=\"api/http/index/baserequestoptions-class\">BaseRequestOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/BaseResponseOptions-class.html\" class=\"ng-binding\" href=\"api/http/index/baseresponseoptions-class\">BaseResponseOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/BrowserXhr-class.html\" class=\"ng-binding\" href=\"api/http/index/browserxhr-class\">BrowserXhr</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Connection-class.html\" class=\"ng-binding\" href=\"api/http/index/connection-class\">Connection</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ConnectionBackend-class.html\" class=\"ng-binding\" href=\"api/http/index/connectionbackend-class\">ConnectionBackend</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/CookieXSRFStrategy-class.html\" class=\"ng-binding\" href=\"api/http/index/cookiexsrfstrategy-class\">CookieXSRFStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/HTTP_BINDINGS-let.html\" class=\"ng-binding\" href=\"api/http/index/http_bindings-let\">HTTP_BINDINGS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/HTTP_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/http/index/http_providers-let\">HTTP_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Headers-class.html\" class=\"ng-binding\" href=\"api/http/index/headers-class\">Headers</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Http-class.html\" class=\"ng-binding\" href=\"api/http/index/http-class\">Http</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/HttpModule-class.html\" class=\"ng-binding\" href=\"api/http/index/httpmodule-class\">HttpModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/JSONPBackend-class.html\" class=\"ng-binding\" href=\"api/http/index/jsonpbackend-class\">JSONPBackend</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/JSONPConnection-class.html\" class=\"ng-binding\" href=\"api/http/index/jsonpconnection-class\">JSONPConnection</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/JSONP_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/http/index/jsonp_providers-let\">JSONP_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/JSON_BINDINGS-let.html\" class=\"ng-binding\" href=\"api/http/index/json_bindings-let\">JSON_BINDINGS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Jsonp-class.html\" class=\"ng-binding\" href=\"api/http/index/jsonp-class\">Jsonp</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/JsonpModule-class.html\" class=\"ng-binding\" href=\"api/http/index/jsonpmodule-class\">JsonpModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/QueryEncoder-class.html\" class=\"ng-binding\" href=\"api/http/index/queryencoder-class\">QueryEncoder</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ReadyState-enum.html\" class=\"ng-binding\" href=\"api/http/index/readystate-enum\">ReadyState</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Request-class.html\" class=\"ng-binding\" href=\"api/http/index/request-class\">Request</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/RequestMethod-enum.html\" class=\"ng-binding\" href=\"api/http/index/requestmethod-enum\">RequestMethod</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/RequestOptions-class.html\" class=\"ng-binding\" href=\"api/http/index/requestoptions-class\">RequestOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/RequestOptionsArgs-interface.html\" class=\"ng-binding\" href=\"api/http/index/requestoptionsargs-interface\">RequestOptionsArgs</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/Response-class.html\" class=\"ng-binding\" href=\"api/http/index/response-class\">Response</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ResponseContentType-enum.html\" class=\"ng-binding\" href=\"api/http/index/responsecontenttype-enum\">ResponseContentType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ResponseOptions-class.html\" class=\"ng-binding\" href=\"api/http/index/responseoptions-class\">ResponseOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ResponseOptionsArgs-type-alias.html\" class=\"ng-binding\" href=\"api/http/index/responseoptionsargs-type-alias\">ResponseOptionsArgs</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/ResponseType-enum.html\" class=\"ng-binding\" href=\"api/http/index/responsetype-enum\">ResponseType</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/URLSearchParams-class.html\" class=\"ng-binding\" href=\"api/http/index/urlsearchparams-class\">URLSearchParams</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/XHRBackend-class.html\" class=\"ng-binding\" href=\"api/http/index/xhrbackend-class\">XHRBackend</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/XHRConnection-class.html\" class=\"ng-binding\" href=\"api/http/index/xhrconnection-class\">XHRConnection</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/XSRFStrategy-class.html\" class=\"ng-binding\" href=\"api/http/index/xsrfstrategy-class\">XSRFStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/_createDefaultCookieXSRFStrategy-function.html\" class=\"ng-binding\" href=\"api/http/index/_createdefaultcookiexsrfstrategy-function\">_createDefaultCookieXSRFStrategy</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/index/httpFactory-function.html\" class=\"ng-binding\" href=\"api/http/index/httpfactory-function\">httpFactory</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/http/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/testing/MockBackend-class.html\" class=\"ng-binding\" href=\"api/http/testing/mockbackend-class\">MockBackend</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"http/testing/MockConnection-class.html\" class=\"ng-binding\" href=\"api/http/testing/mockconnection-class\">MockConnection</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-browser</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/AnimationDriver-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/animationdriver-class\">AnimationDriver</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/BROWSER_APP_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browser_app_providers-let\">BROWSER_APP_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/BROWSER_PLATFORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browser_platform_providers-let\">BROWSER_PLATFORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/BROWSER_SANITIZATION_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browser_sanitization_providers-let\">BROWSER_SANITIZATION_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/BrowserModule-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browsermodule-class\">BrowserModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/BrowserPlatformLocation-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browserplatformlocation-class\">BrowserPlatformLocation</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/By-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/by-class\">By</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/ClientMessageBroker-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/clientmessagebroker-class\">ClientMessageBroker</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/ClientMessageBrokerFactory-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/clientmessagebrokerfactory-class\">ClientMessageBrokerFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/DOCUMENT-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/document-let\">DOCUMENT</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/DomSanitizationService-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/domsanitizationservice-class\">DomSanitizationService</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/EVENT_MANAGER_PLUGINS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/event_manager_plugins-let\">EVENT_MANAGER_PLUGINS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/EventManager-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/eventmanager-class\">EventManager</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/FnArg-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/fnarg-class\">FnArg</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/HAMMER_GESTURE_CONFIG-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/hammer_gesture_config-let\">HAMMER_GESTURE_CONFIG</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/HammerGestureConfig-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/hammergestureconfig-class\">HammerGestureConfig</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/MessageBus-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/messagebus-class\">MessageBus</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/MessageBusSink-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/messagebussink-interface\">MessageBusSink</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/MessageBusSource-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/messagebussource-interface\">MessageBusSource</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/PRIMITIVE-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/primitive-let\">PRIMITIVE</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/ReceivedMessage-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/receivedmessage-class\">ReceivedMessage</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/SafeHtml-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/safehtml-interface\">SafeHtml</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/SafeResourceUrl-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/saferesourceurl-interface\">SafeResourceUrl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/SafeScript-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/safescript-interface\">SafeScript</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/SafeStyle-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/safestyle-interface\">SafeStyle</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/SafeUrl-interface.html\" class=\"ng-binding\" href=\"api/platform-browser/index/safeurl-interface\">SafeUrl</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/ServiceMessageBroker-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/servicemessagebroker-class\">ServiceMessageBroker</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/ServiceMessageBrokerFactory-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/servicemessagebrokerfactory-class\">ServiceMessageBrokerFactory</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/Title-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/title-class\">Title</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/UiArguments-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/uiarguments-class\">UiArguments</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_APP_APPLICATION_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_app_application_providers-let\">WORKER_APP_APPLICATION_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_APP_LOCATION_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_app_location_providers-let\">WORKER_APP_LOCATION_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_APP_PLATFORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_app_platform_providers-let\">WORKER_APP_PLATFORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_SCRIPT-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_script-let\">WORKER_SCRIPT</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_UI_APPLICATION_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_ui_application_providers-let\">WORKER_UI_APPLICATION_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_UI_LOCATION_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_ui_location_providers-let\">WORKER_UI_LOCATION_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_UI_PLATFORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_ui_platform_providers-let\">WORKER_UI_PLATFORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WORKER_UI_STARTABLE_MESSAGING_SERVICE-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/worker_ui_startable_messaging_service-let\">WORKER_UI_STARTABLE_MESSAGING_SERVICE</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WebWorkerInstance-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/webworkerinstance-class\">WebWorkerInstance</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/WorkerAppModule-class.html\" class=\"ng-binding\" href=\"api/platform-browser/index/workerappmodule-class\">WorkerAppModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/_WORKER_UI_PLATFORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/_worker_ui_platform_providers-let\">_WORKER_UI_PLATFORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/browserPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/browserplatform-let\">browserPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/disableDebugTools-function.html\" class=\"ng-binding\" href=\"api/platform-browser/index/disabledebugtools-function\">disableDebugTools</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/enableDebugTools-function.html\" class=\"ng-binding\" href=\"api/platform-browser/index/enabledebugtools-function\">enableDebugTools</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/platformBrowser-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/platformbrowser-let\">platformBrowser</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/platformWorkerApp-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/platformworkerapp-let\">platformWorkerApp</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/platformWorkerUi-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/platformworkerui-let\">platformWorkerUi</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/workerAppPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/workerappplatform-let\">workerAppPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/index/workerUiPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-browser/index/workeruiplatform-let\">workerUiPlatform</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-browser/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/testing/BrowserTestingModule-class.html\" class=\"ng-binding\" href=\"api/platform-browser/testing/browsertestingmodule-class\">BrowserTestingModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser/testing/platformBrowserTesting-let.html\" class=\"ng-binding\" href=\"api/platform-browser/testing/platformbrowsertesting-let\">platformBrowserTesting</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-browser-dynamic</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/BROWSER_APP_COMPILER_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/browser_app_compiler_providers-let\">BROWSER_APP_COMPILER_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/CACHED_TEMPLATE_PROVIDER-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/cached_template_provider-let\">CACHED_TEMPLATE_PROVIDER</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/bootstrap-function.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/bootstrap-function\">bootstrap</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/bootstrapWorkerApp-function.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/bootstrapworkerapp-function\">bootstrapWorkerApp</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/bootstrapWorkerUi-function.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/bootstrapworkerui-function\">bootstrapWorkerUi</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/browserDynamicPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/browserdynamicplatform-let\">browserDynamicPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/platformBrowserDynamic-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/platformbrowserdynamic-let\">platformBrowserDynamic</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/platformWorkerAppDynamic-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/platformworkerappdynamic-let\">platformWorkerAppDynamic</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/index/workerAppDynamicPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/index/workerappdynamicplatform-let\">workerAppDynamicPlatform</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-browser-dynamic/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/testing/BrowserDynamicTestingModule-class.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/testing/browserdynamictestingmodule-class\">BrowserDynamicTestingModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-browser-dynamic/testing/platformBrowserDynamicTesting-let.html\" class=\"ng-binding\" href=\"api/platform-browser-dynamic/testing/platformbrowserdynamictesting-let\">platformBrowserDynamicTesting</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-server</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/SERVER_PLATFORM_PROVIDERS-let.html\" class=\"ng-binding\" href=\"api/platform-server/index/server_platform_providers-let\">SERVER_PLATFORM_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/platformDynamicServer-let.html\" class=\"ng-binding\" href=\"api/platform-server/index/platformdynamicserver-let\">platformDynamicServer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/platformServer-let.html\" class=\"ng-binding\" href=\"api/platform-server/index/platformserver-let\">platformServer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/serverBootstrap-function.html\" class=\"ng-binding\" href=\"api/platform-server/index/serverbootstrap-function\">serverBootstrap</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/serverDynamicPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-server/index/serverdynamicplatform-let\">serverDynamicPlatform</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/index/serverPlatform-let.html\" class=\"ng-binding\" href=\"api/platform-server/index/serverplatform-let\">serverPlatform</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/platform-server/testing</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/testing/ServerTestingModule-class.html\" class=\"ng-binding\" href=\"api/platform-server/testing/servertestingmodule-class\">ServerTestingModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"platform-server/testing/platformServerTesting-let.html\" class=\"ng-binding\" href=\"api/platform-server/testing/platformservertesting-let\">platformServerTesting</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/router</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/ActivatedRoute-interface.html\" class=\"ng-binding\" href=\"api/router/index/activatedroute-interface\">ActivatedRoute</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/ActivatedRouteSnapshot-interface.html\" class=\"ng-binding\" href=\"api/router/index/activatedroutesnapshot-interface\">ActivatedRouteSnapshot</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/CanActivate-interface.html\" class=\"ng-binding\" href=\"api/router/index/canactivate-interface\">CanActivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/CanActivateChild-interface.html\" class=\"ng-binding\" href=\"api/router/index/canactivatechild-interface\">CanActivateChild</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/CanDeactivate-interface.html\" class=\"ng-binding\" href=\"api/router/index/candeactivate-interface\">CanDeactivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/CanLoad-interface.html\" class=\"ng-binding\" href=\"api/router/index/canload-interface\">CanLoad</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Data-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/data-type-alias\">Data</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/DefaultUrlSerializer-class.html\" class=\"ng-binding\" href=\"api/router/index/defaulturlserializer-class\">DefaultUrlSerializer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Event-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/event-type-alias\">Event</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/ExtraOptions-interface.html\" class=\"ng-binding\" href=\"api/router/index/extraoptions-interface\">ExtraOptions</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/NavigationCancel-class.html\" class=\"ng-binding\" href=\"api/router/index/navigationcancel-class\">NavigationCancel</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/NavigationEnd-class.html\" class=\"ng-binding\" href=\"api/router/index/navigationend-class\">NavigationEnd</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/NavigationError-class.html\" class=\"ng-binding\" href=\"api/router/index/navigationerror-class\">NavigationError</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/NavigationExtras-interface.html\" class=\"ng-binding\" href=\"api/router/index/navigationextras-interface\">NavigationExtras</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/NavigationStart-class.html\" class=\"ng-binding\" href=\"api/router/index/navigationstart-class\">NavigationStart</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/PRIMARY_OUTLET-let.html\" class=\"ng-binding\" href=\"api/router/index/primary_outlet-let\">PRIMARY_OUTLET</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Params-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/params-type-alias\">Params</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/ROUTER_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"api/router/index/router_directives-let\">ROUTER_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Resolve-interface.html\" class=\"ng-binding\" href=\"api/router/index/resolve-interface\">Resolve</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/ResolveData-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/resolvedata-type-alias\">ResolveData</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Route-interface.html\" class=\"ng-binding\" href=\"api/router/index/route-interface\">Route</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Router-class.html\" class=\"ng-binding\" href=\"api/router/index/router-class\">Router</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterConfig-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/routerconfig-type-alias\">RouterConfig</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterLink-directive.html\" class=\"ng-binding\" href=\"api/router/index/routerlink-directive\">RouterLink</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterLinkActive-directive.html\" class=\"ng-binding\" href=\"api/router/index/routerlinkactive-directive\">RouterLinkActive</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterLinkWithHref-directive.html\" class=\"ng-binding\" href=\"api/router/index/routerlinkwithhref-directive\">RouterLinkWithHref</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterModule-class.html\" class=\"ng-binding\" href=\"api/router/index/routermodule-class\">RouterModule</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterOutlet-directive.html\" class=\"ng-binding\" href=\"api/router/index/routeroutlet-directive\">RouterOutlet</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterOutletMap-class.html\" class=\"ng-binding\" href=\"api/router/index/routeroutletmap-class\">RouterOutletMap</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterState-interface.html\" class=\"ng-binding\" href=\"api/router/index/routerstate-interface\">RouterState</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RouterStateSnapshot-interface.html\" class=\"ng-binding\" href=\"api/router/index/routerstatesnapshot-interface\">RouterStateSnapshot</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/Routes-type-alias.html\" class=\"ng-binding\" href=\"api/router/index/routes-type-alias\">Routes</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/RoutesRecognized-class.html\" class=\"ng-binding\" href=\"api/router/index/routesrecognized-class\">RoutesRecognized</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/UrlSegment-class.html\" class=\"ng-binding\" href=\"api/router/index/urlsegment-class\">UrlSegment</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/UrlSerializer-class.html\" class=\"ng-binding\" href=\"api/router/index/urlserializer-class\">UrlSerializer</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/UrlTree-interface.html\" class=\"ng-binding\" href=\"api/router/index/urltree-interface\">UrlTree</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/provideRouter-function.html\" class=\"ng-binding\" href=\"api/router/index/providerouter-function\">provideRouter</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/provideRouterConfig-function.html\" class=\"ng-binding\" href=\"api/router/index/providerouterconfig-function\">provideRouterConfig</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router/index/provideRoutes-function.html\" class=\"ng-binding\" href=\"api/router/index/provideroutes-function\">provideRoutes</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/router-deprecated</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/AsyncRoute-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/AsyncRoute-class.html\">AsyncRoute</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/AuxRoute-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/AuxRoute-class.html\">AuxRoute</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/CanActivate-decorator.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/CanActivate-decorator.html\">CanActivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/CanDeactivate-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/CanDeactivate-interface.html\">CanDeactivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/CanReuse-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/CanReuse-interface.html\">CanReuse</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ComponentDefinition-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ComponentDefinition-interface.html\">ComponentDefinition</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ComponentInstruction-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ComponentInstruction-interface.html\">ComponentInstruction</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/Instruction-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/Instruction-class.html\">Instruction</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/OnActivate-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/OnActivate-interface.html\">OnActivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/OnDeactivate-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/OnDeactivate-interface.html\">OnDeactivate</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/OnReuse-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/OnReuse-interface.html\">OnReuse</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ROUTER_BINDINGS-let.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_BINDINGS-let.html\">ROUTER_BINDINGS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ROUTER_DIRECTIVES-let.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_DIRECTIVES-let.html\">ROUTER_DIRECTIVES</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ROUTER_PRIMARY_COMPONENT-let.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_PRIMARY_COMPONENT-let.html\">ROUTER_PRIMARY_COMPONENT</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ROUTER_PROVIDERS-let.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_PROVIDERS-let.html\">ROUTER_PROVIDERS</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/ROUTER_PROVIDERS_COMMON-let.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_PROVIDERS_COMMON-let.html\">ROUTER_PROVIDERS_COMMON</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/Redirect-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/Redirect-class.html\">Redirect</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RootRouter-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RootRouter-class.html\">RootRouter</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/Route-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/Route-class.html\">Route</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouteConfig-decorator.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouteConfig-decorator.html\">RouteConfig</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouteData-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouteData-class.html\">RouteData</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouteDefinition-interface.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouteDefinition-interface.html\">RouteDefinition</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouteParams-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouteParams-class.html\">RouteParams</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouteRegistry-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouteRegistry-class.html\">RouteRegistry</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/Router-class.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/Router-class.html\">Router</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouterLink-directive.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouterLink-directive.html\">RouterLink</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"router-deprecated/index/RouterOutlet-directive.html\" class=\"ng-binding\" href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/RouterOutlet-directive.html\">RouterOutlet</a> </li> </ul>  <h3 class=\"ng-binding\">@angular/upgrade</h3> <ul class=\"api-list\"> <li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"upgrade/index/UpgradeAdapter-class.html\" class=\"ng-binding\" href=\"api/upgrade/index/upgradeadapter-class\">UpgradeAdapter</a> </li>\n<li ng-repeat=\"item in section.items\" ng-show=\"item.show\" class=\"api-item ng-scope\" aria-hidden=\"false\"> <a ng-href=\"upgrade/index/UpgradeAdapterRef-class.html\" class=\"ng-binding\" href=\"api/upgrade/index/upgradeadapterref-class\">UpgradeAdapterRef</a> </li> </ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/</a>\n  </p>\n</div>\n","tutorial/index":"<h1 class=\"hero-title text-display-1 \">Tutorial: Tour of Heroes</h1>\n\n<div class=\"banner\"><p class=\"text-body\">The Tour of Heroes tutorial takes us through the steps of creating an Angular application in TypeScript.</p></div>\n<h1 id=\"tour-of-heroes-the-vision\">Tour of Heroes: the vision</h1> <p>Our grand plan is to build an app to help a staffing agency manage its stable of heroes. Even heroes need to find work.</p> <p>Of course we'll only make a little progress in this tutorial. What we do build will have many of the features we expect to find in a full-blown, data-driven application: acquiring and displaying a list of heroes, editing a selected hero's detail, and navigating among different views of heroic data.</p> <p>The Tour of Heroes covers the core fundamentals of Angular. We’ll use built-in directives to show/hide elements and display lists of hero data. We’ll create a component to display hero details and another to show an array of heroes. We'll use one-way data binding for read-only data. We'll add editable fields to update a model with two-way data binding. We'll bind component methods to user events like key strokes and clicks. We’ll learn to select a hero from a master list and edit that hero in the details view. We'll format data with pipes. We'll create a shared service to assemble our heroes. And we'll use routing to navigate among different views and their components.</p> <p>We’ll learn enough core Angular to get started and gain confidence that Angular can do whatever we need it to do. We'll be covering a lot of ground at an introductory level but we’ll find plenty of links to chapters with greater depth.</p> <p>Run the <live-example name=\"toh-6\"></live-example>.</p> <h2 id=\"the-end-game\">The End Game</h2> <p>Here's a visual idea of where we're going in this tour, beginning with the \"Dashboard\" view and our most heroic heroes:</p> <img src=\"https://angular.io/resources/images/devguide/toh/heroes-dashboard-1.png\" alt=\"Output of heroes dashboard\"><p>Above the dashboard are two links (\"Dashboard\" and \"Heroes\"). We could click them to navigate between this Dashboard and a Heroes view.</p> <p>Instead we click the dashboard hero named \"Magneta\" and the router takes us to a \"Hero Details\" view of that hero where we can change the hero's name.</p> <img src=\"https://angular.io/resources/images/devguide/toh/hero-details-1.png\" alt=\"Details of hero in app\"><p>Clicking the \"Back\" button would return us to the \"Dashboard\". Links at the top can take us to either of the main views. We'll click \"Heroes\". The app takes to the \"Heroes\" master list view.</p> <img src=\"https://angular.io/resources/images/devguide/toh/heroes-list-2.png\" alt=\"Output of heroes list app\"><p>We click a different hero and the readonly mini-detail beneath the list reflects our new choice.</p> <p>We click the \"View Details\" button to drill into the editable details of our selected hero.</p> <p>The following diagram captures all of our navigation options.</p> <img src=\"https://angular.io/resources/images/devguide/toh/nav-diagram.png\" alt=\"View navigations\"><p>Here's our app in action</p> <img src=\"https://angular.io/resources/images/devguide/toh/toh-anim.gif\" alt=\"Tour of Heroes in Action\"><h2 id=\"up-next\">Up Next</h2> <p>We’ll build this Tour of Heroes together, step by step. We'll motivate each step with a requirement that we've met in countless applications. Everything has a reason.</p> <p>And we’ll meet many of the core fundamentals of Angular along the way.</p> <p><a href=\"toh-pt1\">Let's get started!</a></p> <div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt1\">The Hero Editor</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/</a>\n  </p>\n</div>\n","tutorial/toh-pt1":"<h1 class=\"hero-title text-display-1 \">The Hero Editor</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We build a simple hero editor</p></div>\n<h1 id=\"once-upon-a-time\">Once Upon a Time</h1> <p>Every story starts somewhere. Our story starts where the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> ends.</p> <p>Run the <live-example></live-example> for this part.</p> <p>Create a folder called <code>angular2-tour-of-heroes</code> and follow the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> steps which provide the prerequisites, the folder structure, and the core files for our Tour of Heroes.</p> <div class=\"l-sub-section\">\n<p>Alternatively, begin with a <a href=\"https://github.com/angular/quickstart/blob/master/README.md\">download of the QuickStart source</a>.</p> </div>\n<p>We should have the following structure:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h2 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h2> <p>We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>This command runs the compiler in watch mode, starts the server, launches the app in a browser, and keeps the app running while we continue to build the Tour of Heroes.</p> <h2 id=\"show-our-hero\">Show our Hero</h2> <p>We want to display Hero data in our app</p> <p>Let's add two properties to our <code>AppComponent</code>, a <code>title</code> property for the application name and a <code>hero</code> property for a hero named \"Windstorm\".</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (AppComponent class)\">// app.component.ts (AppComponent class)\n\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero = 'Windstorm';\n}\n</pre>\n<p>Now we update the template in the <code>@Component</code> decoration with data bindings to these new properties.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: '&lt;h1&gt;{{title}}&lt;/h1&gt;&lt;h2&gt;{{hero}} details!&lt;/h2&gt;'\n</pre>\n<p>The browser should refresh and display our title and hero.</p> <p>The double curly braces tell our app to read the <code>title</code> and <code>hero</code> properties from the component and render them. This is the \"interpolation\" form of one-way data binding.</p> <div class=\"l-sub-section\">\n<p>Learn more about interpolation in the <a href=\"../guide/displaying-data\">Displaying Data chapter</a>.</p> </div>\n<h3 id=\"hero-object\">Hero object</h3> <p>At the moment, our hero is just a name. Our hero needs more properties. Let's convert the <code>hero</code> from a literal string to a class.</p> <p>Create a <code>Hero</code> class with <code>id</code> and <code>name</code> properties. For now put this near the top of the <code>app.component.ts</code> file, just below the import statement.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (Hero class)\">// app.component.ts (Hero class)\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n</pre>\n<p>Now that we have a <code>Hero</code> class, let’s refactor our component’s <code>hero</code> property to be of type <code>Hero</code>. Then initialize it with an id of <code>1</code> and the name, \"Windstorm\".</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (hero property)\">// app.component.ts (hero property)\n\nhero: Hero = {\n  id: 1,\n  name: 'Windstorm'\n};\n</pre>\n<p>Because we changed the hero from a string to an object, we update the binding in the template to refer to the hero’s <code>name</code> property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: '&lt;h1&gt;{{title}}&lt;/h1&gt;&lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;'\n</pre>\n<p>The browser refreshes and continues to display our hero’s name.</p> <h3 id=\"adding-more-html\">Adding more HTML</h3> <p>Displaying a name is good, but we want to see all of our hero’s properties. We’ll add a <code>&lt;div&gt;</code> for our hero’s <code>id</code> property and another <code>&lt;div&gt;</code> for our hero’s <code>name</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: '&lt;h1&gt;{{title}}&lt;/h1&gt;&lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;&lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;&lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;'\n</pre>\n<p>Uh oh, our template string is getting long. We better take care of that to avoid the risk of making a typo in the template.</p> <h3 id=\"multi-line-template-strings\">Multi-line template strings</h3> <p>We could make a more readable template with string concatenation but that gets ugly fast, it is harder to read, and it is easy to make a spelling error. Instead, let’s take advantage of the template strings feature in ES2015 and TypeScript to maintain our sanity.</p> <p>Change the quotes around the template to back-ticks and put the <code>&lt;h1&gt;</code>, <code>&lt;h2&gt;</code> and <code>&lt;div&gt;</code> elements on their own lines.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (AppComponent's template)\">// app.component.ts (AppComponent's template)\n\ntemplate:`\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;&lt;label&gt;name: &lt;/label&gt;{{hero.name}}&lt;/div&gt;\n  `\n</pre>\n<h2 id=\"editing-our-hero\">Editing Our Hero</h2> <p>We want to be able to edit the hero name in a textbox.</p> <p>Refactor the hero name <code>&lt;label&gt;</code> with <code>&lt;label&gt;</code> and <code>&lt;input&gt;</code> elements as shown below:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (input element)\">// app.component.ts (input element)\n\ntemplate:`\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name: &lt;/label&gt;\n    &lt;input value=\"{{hero.name}}\" placeholder=\"name\"&gt;\n  &lt;/div&gt;\n  `\n</pre>\n<p>We see in the browser that the hero’s name does appear in the <code>&lt;input&gt;</code> textbox. But something doesn’t feel right. When we change the name, we notice that our change is not reflected in the <code>&lt;h2&gt;</code>. We won't get the desired behavior with a one-way binding to <code>&lt;input&gt;</code>.</p> <h3 id=\"two-way-binding\">Two-Way Binding</h3> <p>We intend to display the name of the hero in the <code>&lt;input&gt;</code>, change it, and see those changes wherever we bind to the hero’s name. In short, we want two-way data binding.</p> <p>Before we can use two-way data binding for <strong>form inputs</strong>, we need to import the <code>FormsModule</code> package in our Angular module. We add it to the <code>NgModule</code> decorator's <code>imports</code> array. This array contains the list of external modules used by our application. Now we have included the forms package which includes <code>ngModel</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (FormsModule import)\">// app.module.ts (FormsModule import)\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn more about the <code>FormsModule</code> and <code>ngModel</code> in the <a href=\"../guide/forms#ngModel\">Forms</a> and <a href=\"../guide/template-syntax#ngModel\">Template Syntax</a> chapters.</p> </div>\n<p>Let’s update the template to use the <strong><code>ngModel</code></strong> built-in directive for two-way binding.</p> <p>Replace the <code>&lt;input&gt;</code> with the following HTML</p> <pre language=\"html\" data-language=\"html\">&lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"&gt;\n</pre>\n<p>The browser refreshes. We see our hero again. We can edit the hero’s name and see the changes reflected immediately in the <code>&lt;h2&gt;</code>.</p> <h2 id=\"the-road-we-ve-travelled\">The Road We’ve Travelled</h2> <p>Let’s take stock of what we’ve built.</p> <ul> <li>Our Tour of Heroes uses the double curly braces of interpolation (a kind of one-way data binding) to display the application title and properties of a <code>Hero</code> object.</li> <li>We wrote a multi-line template using ES2015’s template strings to make our template readable.</li> <li>We can both display and change the hero’s name after adding a two-way data binding to the <code>&lt;input&gt;</code> element using the built-in <code>ngModel</code> directive.</li> <li>The <code>ngModel</code> directive also propagates changes to every other binding of the <code>hero.name</code>.</li> </ul> <p>Run the <live-example></live-example> for this part.</p> <p>Here's the complete <code>app.component.ts</code> as it stands now:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;name: &lt;/label&gt;\n      &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"&gt;\n    &lt;/div&gt;\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  hero: Hero = {\n    id: 1,\n    name: 'Windstorm'\n  };\n}\n</pre>\n<h2 id=\"the-road-ahead\">The Road Ahead</h2> <p>Our Tour of Heroes only displays one hero and we really want to display a list of heroes. We also want to allow the user to select a hero and display their details. We’ll learn more about how to retrieve lists, bind them to the template, and allow a user to select a hero in the <a href=\"toh-pt2\">next tutorial chapter</a>.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt2\">Master/Detail</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt1.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt1.html</a>\n  </p>\n</div>\n","tutorial/toh-pt3":"<h1 class=\"hero-title text-display-1 \">Multiple Components</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We refactor the master/detail view into separate components</p></div>\n<p>Our app is growing. Use cases are flowing in for reusing components, passing data to components, and creating more reusable assets. Let's separate the heroes list from the hero details and make the details component reusable.</p> <p>Run the <live-example></live-example> for this part.</p> <h2 id=\"where-we-left-off\">Where We Left Off</h2> <p>Before we continue with our Tour of Heroes, let’s verify we have the following structure. If not, we’ll need to go back and follow the previous chapters.</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ... </div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h3 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h3> <p>We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>This will keep the application running while we continue to build the Tour of Heroes.</p> <h2 id=\"making-a-hero-detail-component\">Making a Hero Detail Component</h2> <p>Our heroes list and our hero details are in the same component in the same file. They're small now but each could grow. We are sure to receive new requirements for one and not the other. Yet every change puts both components at risk and doubles the testing burden without benefit. If we had to reuse the hero details elsewhere in our app, the heroes list would tag along for the ride. </p> <p>Our current component violates the <a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\">Single Responsibility Principle</a>. It's only a tutorial but we can still do things right — especially if doing them right is easy and we learn how to build Angular apps in the process.</p> <p>Let’s break the hero details out into its own component.</p> <h3 id=\"separating-the-hero-detail-component\">Separating the Hero Detail Component</h3> <p>Add a new file named <code>hero-detail.component.ts</code> to the <code>app</code> folder and create <code>HeroDetailComponent</code> as follows.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (initial version)\">// app/hero-detail.component.ts (initial version)\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'my-hero-detail',\n})\nexport class HeroDetailComponent {\n}\n</pre>\n<div class=\"l-sub-section\">\n<h3 id=\"naming-conventions\">Naming conventions</h3> <p>We like to identify at a glance which classes are components and which files contain components. </p> <p>Notice that we have an <code>AppComponent</code> in a file named <code>app.component.ts</code> and our new <code>HeroDetailComponent</code> is in a file named <code>hero-detail.component.ts</code>. </p> <p>All of our component names end in \"Component\". All of our component file names end in \".component\".</p> <p>We spell our file names in lower <strong><a href=\"#\">dash case</a></strong> (AKA <strong><a href=\"#\">kebab-case</a></strong>) so we don't worry about case sensitivity on the server or in source control.</p> </div>\n<p>We begin by importing the <code>Component</code> and <code>Input</code> decorators from Angular because we're going to need them soon.</p> <p>We create metadata with the <code>@Component</code> decorator where we specify the selector name that identifies this component's element. Then we export the class to make it available to other components.</p> <p>When we finish here, we'll import it into <code>AppComponent</code> and create a corresponding <code>&lt;my-hero-detail&gt;</code> element.</p> <h4 id=\"hero-detail-template\">Hero Detail Template</h4> <p>At the moment, the <em>Heroes</em> and <em>Hero Detail</em> views are combined in one template in <code>AppComponent</code>. Let’s <strong>cut</strong> the <em>Hero Detail</em> content from <code>AppComponent</code> and <strong>paste</strong> it into the new template property of <code>HeroDetailComponent</code>.</p> <p>We previously bound to the <code>selectedHero.name</code> property of the <code>AppComponent</code>. Our <code>HeroDetailComponent</code> will have a <code>hero</code> property, not a <code>selectedHero</code> property. So we replace <code>selectedHero</code> with <code>hero</code> everywhere in our new template. That's our only change. The result looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (template)\">// app/hero-detail.component.ts (template)\n\ntemplate: `\n  &lt;div *ngIf=\"hero\"&gt;\n    &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;name: &lt;/label&gt;\n      &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n`\n</pre>\n<p>Now our hero detail layout exists only in the <code>HeroDetailComponent</code>.</p> <h4 id=\"add-the-hero-property\">Add the <em>hero</em> property</h4> <p>Let’s add that <code>hero</code> property we were talking about to the component class.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">hero: Hero;\n</pre>\n<p>Uh oh. We declared the <code>hero</code> property as type <code>Hero</code> but our <code>Hero</code> class is over in the <code>app.component.ts</code> file. We have two components, each in their own file, that need to reference the <code>Hero</code> class. </p> <p>We solve the problem by relocating the <code>Hero</code> class from <code>app.component.ts</code> to its own <code>hero.ts</code> file.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.ts\">// app/hero.ts\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n</pre>\n<p>We export the <code>Hero</code> class from <code>hero.ts</code> because we'll need to reference it in both component files. Add the following import statement near the top of <strong>both <code>app.component.ts</code> and <code>hero-detail.component.ts</code></strong>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Hero } from './hero';\n</pre>\n<h4 id=\"the-hero-property-is-an-input-\">The <em>hero</em> property is an <strong><em>input</em></strong>\n</h4> <p>The <code>HeroDetailComponent</code> must be told what hero to display. Who will tell it? The parent <code>AppComponent</code>! </p> <p>The <code>AppComponent</code> knows which hero to show: the hero that the user selected from the list. The user's selection is in its <code>selectedHero</code> property.</p> <p>We will soon update the <code>AppComponent</code> template so that it binds its <code>selectedHero</code> property to the <code>hero</code> property of our <code>HeroDetailComponent</code>. The binding <em>might</em> look like this:</p> <pre format=\".\">&lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;</pre>\n<p>Notice that the <code>hero</code> property is the <strong><em>target</em></strong> of a property binding — it's in square brackets to the left of the (=).</p> <p>Angular insists that we declare a <strong><em>target</em></strong> property to be an <strong><em>input</em></strong> property. If we don't, Angular rejects the binding and throws an error.</p> <div class=\"l-sub-section\">\n<p>We explain input properties in more detail <a href=\"../guide/attribute-directives#why-input\">here</a> where we also explain why <em>target</em> properties require this special treatment and <em>source</em> properties do not.</p> </div>\n<p>There are a couple of ways we can declare that <code>hero</code> is an <em>input</em>. We'll do it the way we <em>prefer</em>, by annotating the <code>hero</code> property with the <code>@Input</code> decorator that we imported earlier.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  @Input()\n  hero: Hero;\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn more about the <code>@Input()</code> decorator in the <a href=\"../guide/attribute-directives#input\">Attribute Directives</a> chapter.</p> </div>\n<h2 id=\"refresh-the-appmodule\">Refresh the AppModule</h2> <p>We return to the <code>AppModule</code>, the application's root module, and teach it to use the <code>HeroDetailComponent</code>.</p> <p>We begin by importing the <code>HeroDetailComponent</code> so we can refer to it.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HeroDetailComponent } from './hero-detail.component';\n</pre>\n<p>Then we add <code>HeroDetailComponent</code> to the <code>NgModule</code> decorator's <code>declarations</code> array. This array contains the list of all components, pipes, and directives that we created and that belong in our application's module.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<h2 id=\"refresh-the-appcomponent\">Refresh the AppComponent</h2> <p>Now that the application knows about our <code>HeroDetailComponent</code>, find the location in the <code>AppComponent</code> template where we removed the <em>Hero Detail</em> content and add an element tag that represents the <code>HeroDetailComponent</code>.</p> <pre format=\".\">&lt;my-hero-detail&gt;&lt;/my-hero-detail&gt;</pre>\n<div class=\"l-sub-section\">\n<p><em>my-hero-detail</em> is the name we set as the <code>selector</code> in the <code>HeroDetailComponent</code> metadata.</p> </div>\n<p>The two components won't coordinate until we bind the <code>selectedHero</code> property of the <code>AppComponent</code> to the <code>HeroDetailComponent</code> element's <code>hero</code> property like this:</p> <pre format=\".\">&lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;</pre>\n<p>The <code>AppComponent</code>’s template should now look like this</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (template)\">// app.component.ts (template)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"hero === selectedHero\"\n      (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;\n`,\n</pre>\n<p>Thanks to the binding, the <code>HeroDetailComponent</code> should receive the hero from the <code>AppComponent</code> and display that hero's detail beneath the list. The detail should update every time the user picks a new hero.</p> <h3 id=\"it-works-\">It works!</h3> <p>When we view our app in the browser we see the list of heroes. When we select a hero we can see the selected hero’s details. </p> <p>What's fundamentally new is that we can use this <code>HeroDetailComponent</code> to show hero details anywhere in the app.</p> <p>We’ve created our first reusable component!</p> <h3 id=\"reviewing-the-app-structure\">Reviewing the App Structure</h3> <p>Let’s verify that we have the following structure after all of our good refactoring in this chapter:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<p>Here are the code files we discussed in this chapter.</p> <pre language=\"ts\" name=\"app/hero-detail.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/hero-detail.component.ts\n\nimport { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'my-hero-detail',\n  template: `\n    &lt;div *ngIf=\"hero\"&gt;\n      &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;name: &lt;/label&gt;\n        &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @Input()\n  hero: Hero;\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { Hero } from './hero';\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My Heroes&lt;/h2&gt;\n    &lt;ul class=\"heroes\"&gt;\n      &lt;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero) { this.selectedHero = hero; }\n}\n</pre>\n<pre language=\"ts\" name=\"app/hero.ts\" format=\"linenums\" data-language=\"typescript\">// app/hero.ts\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroDetailComponent } from './hero-detail.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroDetailComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"\" name=\"\" format=\"linenums\" data-language=\"\">// \n\nBAD FILENAME: ../../../_fragments/..md   Current path: docs,ts,latest,tutorial,toh-pt3 PathToDocs: ../../../</pre>\n<h2 id=\"the-road-we-ve-travelled\">The Road We’ve Travelled</h2> <p>Let’s take stock of what we’ve built.</p> <ul> <li>We created a reusable component</li> <li>We learned how to make a component accept input</li> <li>We learned to declare the application directives we need in an Angular module. We list the directives in the <code>NgModule</code> decorator's <code>declarations</code> array.</li> <li>We learned to bind a parent component to a child component.</li> </ul> <p>Run the <live-example></live-example> for this part.</p> <h2 id=\"the-road-ahead\">The Road Ahead</h2> <p>Our Tour of Heroes has become more reusable with shared components. </p> <p>We're still getting our (mock) data within the <code>AppComponent</code>. That's not sustainable. We should refactor data access to a separate service and share it among the components that need data. </p> <p>We’ll learn to create services in the <a href=\"toh-pt4\">next tutorial</a> chapter.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt4\">Services</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt3.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt3.html</a>\n  </p>\n</div>\n","tutorial/toh-pt2":"<h1 class=\"hero-title text-display-1 \">Master/Detail</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We build a master/detail page with a list of heroes</p></div>\n<h1 id=\"it-takes-many-heroes\">It Takes Many Heroes</h1> <p>Our story needs more heroes. We’ll expand our Tour of Heroes app to display a list of heroes, allow the user to select a hero, and display the hero’s details.</p> <p>Run the <live-example></live-example> for this part.</p> <p>Let’s take stock of what we’ll need to display a list of heroes. First, we need a list of heroes. We want to display those heroes in the view’s template, so we’ll need a way to do that.</p> <h2 id=\"where-we-left-off\">Where We Left Off</h2> <p>Before we continue with Part 2 of the Tour of Heroes, let’s verify we have the following structure after <a href=\"toh-pt1\">Part 1</a>. If not, we’ll need to go back to Part 1 and figure out what we missed.</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ... </div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h3 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h3> <p>We want to start the TypeScript compiler, have it watch for changes, and start our server. We'll do this by typing</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>This will keep the application running while we continue to build the Tour of Heroes.</p> <h2 id=\"displaying-our-heroes\">Displaying Our Heroes</h2> <h3 id=\"creating-heroes\">Creating heroes</h3> <p>Let’s create an array of ten heroes at the bottom of <code>app.component.ts</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (hero array)\">// app.component.ts (hero array)\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n</pre>\n<p>The <code>HEROES</code> array is of type <code>Hero</code>, the class defined in part one, to create an array of heroes. We aspire to fetch this list of heroes from a web service, but let’s take small steps first and display mock heroes.</p> <h3 id=\"exposing-heroes\">Exposing heroes</h3> <p>Let’s create a public property in <code>AppComponent</code> that exposes the heroes for binding.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (hero array property)\">// app.component.ts (hero array property)\n\npublic heroes = HEROES;\n</pre>\n<p>We did not have to define the <code>heroes</code> type. TypeScript can infer it from the <code>HEROES</code> array.</p> <div class=\"l-sub-section\">\n<p>We could have defined the heroes list here in this component class. But we know that ultimately we’ll get the heroes from a data service. Because we know where we are heading, it makes sense to separate the hero data from the class implementation from the start.</p> </div>\n<h3 id=\"displaying-heroes-in-a-template\">Displaying heroes in a template</h3> <p>Our component has <code>heroes</code>. Let’s create an unordered list in our template to display them. We’ll insert the following chunk of HTML below the title and above the hero details.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (heroes template)\">// app.component.ts (heroes template)\n\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li&gt;\n    &lt;!-- each hero goes here --&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Now we have a template that we can fill with our heroes.</p> <h3 id=\"listing-heroes-with-ngfor\">Listing heroes with ngFor</h3> <p>We want to bind the array of <code>heroes</code> in our component to our template, iterate over them, and display them individually. We’ll need some help from Angular to do this. Let’s do this step by step.</p> <p>First modify the <code>&lt;li&gt;</code> tag by adding the built-in directive <code>*ngFor</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (ngFor)\">// app.component.ts (ngFor)\n\n&lt;li *ngFor=\"let hero of heroes\"&gt;\n</pre>\n<div class=\"alert is-critical\">\n<p>The leading asterisk (<code>*</code>) in front of <code>ngFor</code> is a critical part of this syntax.</p> </div>\n<div class=\"l-sub-section\">\n<p>The (<code>*</code>) prefix to <code>ngFor</code> indicates that the <code>&lt;li&gt;</code> element and its children constitute a master template.</p> <p>The <code>ngFor</code> directive iterates over the <code>heroes</code> array returned by the <code>AppComponent.heroes</code> property and stamps out instances of this template.</p> <p>The quoted text assigned to <code>ngFor</code> means “<em>take each hero in the <code>heroes</code> array, store it in the local <code>hero</code> variable, and make it available to the corresponding template instance</em>”.</p> <p>The <code>let</code> keyword before \"hero\" identifies <code>hero</code> as a template input variable. We can reference this variable within the template to access a hero’s properties.</p> <p>Learn more about <code>ngFor</code> and template input variables in the <a href=\"../guide/displaying-data#ngFor\">Displaying Data</a> and <a href=\"../guide/template-syntax#ngFor\">Template Syntax</a> chapters.</p> </div>\n<p>Now we insert some content between the <code>&lt;li&gt;</code> tags that uses the <code>hero</code> template variable to display the hero’s properties.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (ngFor template)\">// app.component.ts (ngFor template)\n\n&lt;li *ngFor=\"let hero of heroes\"&gt;\n  &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n&lt;/li&gt;\n</pre>\n<p>When the browser refreshes, we see a list of heroes!</p> <h3 id=\"styling-our-heroes\">Styling our heroes</h3> <p>Our list of heroes looks pretty bland. We want to make it visually obvious to a user which hero we are hovering over and which hero is selected.</p> <p>Let’s add some styles to our component by setting the <code>styles</code> property on the <code>@Component</code> decorator to the following CSS classes:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (styles)\">// app.component.ts (styles)\n\nstyles: [`\n  .selected {\n    background-color: #CFD8DC !important;\n    color: white;\n  }\n  .heroes {\n    margin: 0 0 2em 0;\n    list-style-type: none;\n    padding: 0;\n    width: 15em;\n  }\n  .heroes li {\n    cursor: pointer;\n    position: relative;\n    left: 0;\n    background-color: #EEE;\n    margin: .5em;\n    padding: .3em 0;\n    height: 1.6em;\n    border-radius: 4px;\n  }\n  .heroes li.selected:hover {\n    background-color: #BBD8DC !important;\n    color: white;\n  }\n  .heroes li:hover {\n    color: #607D8B;\n    background-color: #DDD;\n    left: .1em;\n  }\n  .heroes .text {\n    position: relative;\n    top: -3px;\n  }\n  .heroes .badge {\n    display: inline-block;\n    font-size: small;\n    color: white;\n    padding: 0.8em 0.7em 0 0.7em;\n    background-color: #607D8B;\n    line-height: 1em;\n    position: relative;\n    left: -1px;\n    top: -4px;\n    height: 1.8em;\n    margin-right: .8em;\n    border-radius: 4px 0 0 4px;\n  }\n`]\n</pre>\n<p>Notice that we again use the back-tick notation for multi-line strings.</p> <p>That's a lot of styles! We can put them inline as shown here, or we can move them out to their own file which will make it easier to code our component. We'll do this in a later chapter. For now let's keep rolling.</p> <p>When we assign styles to a component they are scoped to that specific component. Our styles will only apply to our <code>AppComponent</code> and won't \"leak\" to the outer HTML.</p> <p>Our template for displaying the heroes should now look like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (styled heroes)\">// app.component.ts (styled heroes)\n\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *ngFor=\"let hero of heroes\"&gt;\n    &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<h2 id=\"selecting-a-hero\">Selecting a Hero</h2> <p>We have a list of heroes and we have a single hero displayed in our app. The list and the single hero are not connected in any way. We want the user to select a hero from our list, and have the selected hero appear in the details view. This UI pattern is widely known as \"master-detail\". In our case, the master is the heroes list and the detail is the selected hero.</p> <p>Let’s connect the master to the detail through a <code>selectedHero</code> component property bound to a click event.</p> <h3 id=\"click-event\">Click event</h3> <p>We modify the <code>&lt;li&gt;</code> by inserting an Angular event binding to its click event.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (template excerpt)\">// app.component.ts (template excerpt)\n\n&lt;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\"&gt;\n  &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n&lt;/li&gt;\n</pre>\n<p>Focus on the event binding</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">(click)=\"onSelect(hero)\"</pre>\n<p>The parenthesis identify the <code>&lt;li&gt;</code> element’s <code>click</code> event as the target. The expression to the right of the equal sign calls the <code>AppComponent</code> method, <code>onSelect()</code>, passing the template input variable <code>hero</code> as an argument. That’s the same <code>hero</code> variable we defined previously in the <code>ngFor</code>.</p> <div class=\"l-sub-section\">\n<p>Learn more about Event Binding in the <a href=\"../guide/user-input\">User Input</a> and <a href=\"../guide/template-syntax#event-binding\">Templating Syntax</a> chapters.</p> </div>\n<h3 id=\"add-the-click-handler\">Add the click handler</h3> <p>Our event binding refers to an <code>onSelect</code> method that doesn’t exist yet. We’ll add that method to our component now.</p> <p>What should that method do? It should set the component’s selected hero to the hero that the user clicked.</p> <p>Our component doesn’t have a “selected hero” yet either. We’ll start there.</p> <h3 id=\"expose-the-selected-hero\">Expose the selected hero</h3> <p>We no longer need the static <code>hero</code> property of the <code>AppComponent</code>. <strong>Replace</strong> it with this simple <code>selectedHero</code> property:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (selectedHero)\">// app.component.ts (selectedHero)\n\nselectedHero: Hero;\n</pre>\n<p>We’ve decided that none of the heroes should be selected before the user picks a hero so we won’t initialize the <code>selectedHero</code> as we were doing with <code>hero</code>.</p> <p>Now <strong>add an <code>onSelect</code> method</strong> that sets the <code>selectedHero</code> property to the <code>hero</code> the user clicked.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (onSelect)\">// app.component.ts (onSelect)\n\nonSelect(hero: Hero) { this.selectedHero = hero; }\n</pre>\n<p>We will be showing the selected hero's details in our template. At the moment, it is still referring to the old <code>hero</code> property. Let’s fix the template to bind to the new <code>selectedHero</code> property.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (template excerpt)\">// app.component.ts (template excerpt)\n\n&lt;h2&gt;{{selectedHero.name}} details!&lt;/h2&gt;\n&lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{selectedHero.id}}&lt;/div&gt;\n&lt;div&gt;\n    &lt;label&gt;name: &lt;/label&gt;\n    &lt;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/&gt;\n&lt;/div&gt;\n</pre>\n<h3 id=\"hide-the-empty-detail-with-ngif\">Hide the empty detail with ngIf</h3> <p>When our app loads we see a list of heroes, but a hero is not selected. The <code>selectedHero</code> is <code>undefined</code>. That’s why we'll see the following error in the browser’s console:</p> <pre language=\"html\" data-language=\"html\">EXCEPTION: TypeError: Cannot read property 'name' of undefined in [null]\n</pre>\n<p>Remember that we are displaying <code>selectedHero.name</code> in the template. This name property does not exist because <code>selectedHero</code> itself is undefined.</p> <p>We'll address this problem by keeping the hero detail out of the DOM until there is a selected hero.</p> <p>We wrap the HTML hero detail content of our template with a <code>&lt;div&gt;</code>. Then we add the <code>ngIf</code> built-in directive and set it to the <code>selectedHero</code> property of our component.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts (ngIf)\">// app.component.ts (ngIf)\n\n&lt;div *ngIf=\"selectedHero\"&gt;\n  &lt;h2&gt;{{selectedHero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{selectedHero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name: &lt;/label&gt;\n    &lt;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<div class=\"alert is-critical\">\n<p>Remember that the leading asterisk (<code>*</code>) in front of <code>ngIf</code> is a critical part of this syntax.</p> </div>\n<p>When there is no <code>selectedHero</code>, the <code>ngIf</code> directive removes the hero detail HTML from the DOM. There will be no hero detail elements and no bindings to worry about.</p> <p>When the user picks a hero, <code>selectedHero</code> becomes \"truthy\" and <code>ngIf</code> puts the hero detail content into the DOM and evaluates the nested bindings.</p> <div class=\"l-sub-section\">\n<p><code>ngIf</code> and <code>ngFor</code> are called “structural directives” because they can change the structure of portions of the DOM. In other words, they give structure to the way Angular displays content in the DOM.</p> <p>Learn more about <code>ngIf</code>, <code>ngFor</code> and other structural directives in the <a href=\"../guide/structural-directives\">Structural Directives</a> and <a href=\"../guide/template-syntax#directives\">Template Syntax</a> chapters.</p> </div>\n<p>The browser refreshes and we see the list of heroes but not the selected hero detail. The <code>ngIf</code> keeps it out of the DOM as long as the <code>selectedHero</code> is undefined. When we click on a hero in the list, the selected hero displays in the hero details. Everything is working as we expect.</p> <h3 id=\"styling-the-selection\">Styling the selection</h3> <p>We see the selected hero in the details area below but we can’t quickly locate that hero in the list above. We can fix that by applying the <code>selected</code> CSS class to the appropriate <code>&lt;li&gt;</code> in the master list. For example, when we select Magneta from the heroes list, we can make it pop out visually by giving it a subtle background color as shown here.</p> <img src=\"https://angular.io/resources/images/devguide/toh/heroes-list-selected.png\" alt=\"Selected hero\"><p>We’ll add a property binding on <code>class</code> for the <code>selected</code> class to the template. We'll set this to an expression that compares the current <code>selectedHero</code> to the <code>hero</code>.</p> <p>The key is the name of the CSS class (<code>selected</code>). The value is <code>true</code> if the two heroes match and <code>false</code> otherwise. We’re saying “<em>apply the <code>selected</code> class if the heroes match, remove it if they don’t</em>”.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (setting the CSS class)\">// app.component.ts (setting the CSS class)\n\n[class.selected]=\"hero === selectedHero\"\n</pre>\n<p>Notice in the template that the <code>class.selected</code> is surrounded in square brackets (<code>[]</code>). This is the syntax for a <strong>property binding</strong>, a binding in which data flows one way from the data source (the expression <code>hero === selectedHero</code>) to a property of <code>class</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.component.ts (styling each hero)\">// app.component.ts (styling each hero)\n\n&lt;li *ngFor=\"let hero of heroes\"\n  [class.selected]=\"hero === selectedHero\"\n  (click)=\"onSelect(hero)\"&gt;\n  &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n&lt;/li&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn more about <a href=\"../guide/template-syntax#property-binding\">property bindings</a> in the Template Syntax chapter.</p> </div>\n<p>The browser reloads our app. We select the hero Magneta and the selection is clearly identified by the background color.</p> <img src=\"https://angular.io/resources/images/devguide/toh/heroes-list-1.png\" alt=\"Output of heroes list app\"><p>We select a different hero and the tell-tale color switches to that hero.</p> <p>Here's the complete <code>app.component.ts</code> as it stands now:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\nexport class Hero {\n  id: number;\n  name: string;\n}\n\nconst HEROES: Hero[] = [\n  { id: 11, name: 'Mr. Nice' },\n  { id: 12, name: 'Narco' },\n  { id: 13, name: 'Bombasto' },\n  { id: 14, name: 'Celeritas' },\n  { id: 15, name: 'Magneta' },\n  { id: 16, name: 'RubberMan' },\n  { id: 17, name: 'Dynama' },\n  { id: 18, name: 'Dr IQ' },\n  { id: 19, name: 'Magma' },\n  { id: 20, name: 'Tornado' }\n];\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My Heroes&lt;/h2&gt;\n    &lt;ul class=\"heroes\"&gt;\n      &lt;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;div *ngIf=\"selectedHero\"&gt;\n      &lt;h2&gt;{{selectedHero.name}} details!&lt;/h2&gt;\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{selectedHero.id}}&lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;name: &lt;/label&gt;\n        &lt;input [(ngModel)]=\"selectedHero.name\" placeholder=\"name\"/&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `]\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = HEROES;\n  selectedHero: Hero;\n\n  onSelect(hero: Hero) { this.selectedHero = hero; }\n}\n</pre>\n<h2 id=\"the-road-we-ve-travelled\">The Road We’ve Travelled</h2> <p>Here’s what we achieved in this chapter:</p> <ul> <li>Our Tour of Heroes now displays a list of selectable heroes</li> <li>We added the ability to select a hero and show the hero’s details</li> <li>We learned how to use the built-in directives <code>ngIf</code> and <code>ngFor</code> in a component’s template</li> </ul> <p>Run the <live-example></live-example> for this part.</p> <h3 id=\"the-road-ahead\">The Road Ahead</h3> <p>Our Tour of Heroes has grown, but it’s far from complete. We can't put the entire app into a single component. We need to break it up into sub-components and teach them to work together as we learn in the <a href=\"toh-pt3\">next chapter</a>.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt3\">Multiple Components</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt2.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt2.html</a>\n  </p>\n</div>\n","guide/user-input":"<h1 class=\"hero-title text-display-1 \">User Input</h1>\n\n<div class=\"banner\"><p class=\"text-body\">User input triggers DOM events. We listen to those events with event bindings that funnel updated values back into our components and models.</p></div>\n<p>When the user clicks a link, pushes a button, or enters text we want to know about it. These user actions all raise DOM events. In this chapter we learn to bind to those events using the Angular event binding syntax.</p> <p><live-example>Run the live example</live-example></p> <h2 id=\"binding-to-user-input-events\">Binding to user input events</h2> <p>We can use <a href=\"template-syntax#event-binding\">Angular event bindings</a> to respond to <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">any DOM event</a>.</p> <p>The syntax is simple. We surround the DOM event name in parentheses and assign a quoted template statement to it. As an example, here's an event binding that implements a click handler:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n</pre>\n<p id=\"click\">The <code>(click)</code> to the left of the equal sign identifies the button's click event as the <strong>target of the binding</strong>. The text within quotes on the right is the <strong>template statement</strong> in which we respond to the click event by calling the component's <code>onClickMe</code> method. A <a href=\"template-syntax#template-statements\">template statement</a> is a subset of JavaScript with restrictions and a few added tricks.</p> <p>When writing a binding we must be aware of a template statement's <strong>execution context</strong>. The identifiers appearing within a statement belong to a specific context object. That object is usually the Angular component that controls the template ... which it definitely is in this case because that snippet of HTML belongs to the following component:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/click-me.component.ts\">// app/click-me.component.ts\n\n@Component({\n  selector: 'click-me',\n  template: `\n    &lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n</pre>\n<p>When the user clicks the button, Angular calls the component's <code>onClickMe</code> method.</p> <h2 id=\"get-user-input-from-the-event-object\">Get user input from the $event object</h2> <p>We can bind to all kinds of events. Let's bind to the keyup event of an input box and replay what the user types back onto the screen.</p> <p>This time we'll (1) listen to an event and (2) grab the user's input.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (template v.1)\">// app/keyup.components.ts (template v.1)\n\ntemplate: `\n  &lt;input (keyup)=\"onKey($event)\"&gt;\n  &lt;p&gt;{{values}}&lt;/p&gt;\n`\n</pre>\n<p>Angular makes an event object available in the <strong><code>$event</code></strong> variable, which we pass to the component's <code>onKey()</code> method. The user data we want is in that variable somewhere.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (class v.1)\">// app/keyup.components.ts (class v.1)\n\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  // without strong typing\n  onKey(event:any) {\n    this.values += event.target.value + ' | ';\n  }\n}\n</pre>\n<p>The shape of the <code>$event</code> object is determined by whatever raises the event. The <code>keyup</code> event comes from the DOM, so <code>$event</code> must be a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Event\">standard DOM event object</a>. The <code>$event.target</code> gives us an <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement\"><code>HTMLInputElement</code></a>, which has a <code>value</code> property that contains our user input data.</p> <p>The <code>onKey()</code> component method is where we extract the user's input from the event object, adding that input to the list of user data that we're accumulating in the component's <code>values</code> property. We then use <a href=\"template-syntax#interpolation\">interpolation</a> to display the accumulating <code>values</code> property back on screen.</p> <p>Enter the letters \"abc\", and then backspace to remove them. Here's what the UI displays:</p> <pre>a | ab | abc | ab | a | |</pre>\n<img src=\"https://angular.io/resources/images/devguide/user-input/keyup1-anim.gif\" alt=\"key up 1\"><div class=\"l-sub-section\" id=\"keyup1\">\n<p>We cast the <code>$event</code> as an <code>any</code> type, which means we've abandoned strong typing to simplify our code. We generally prefer the strong typing that TypeScript affords. We can rewrite the method, casting to HTML DOM objects like this.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (class v.1 - strongly typed )\">// app/keyup.components.ts (class v.1 - strongly typed )\n\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  // with strong typing\n  onKey(event: KeyboardEvent) {\n    this.values += (&lt;HTMLInputElement&gt;event.target).value + ' | ';\n  }\n}\n</pre>\n<p><br>Strong typing reveals a serious problem with passing a DOM event into the method: too much awareness of template details, too little separation of concerns.</p> <p>We'll address this problem in our next try at processing user keystrokes.</p> </div>\n<h2 id=\"get-user-input-from-a-template-reference-variable\">Get user input from a template reference variable</h2> <p>There's another way to get the user data without the <code>$event</code> variable.</p> <p>Angular has a syntax feature called <a href=\"template-syntax#ref-vars\"><strong>template reference variables</strong></a>. These variables grant us direct access to an element. We declare a template reference variable by preceding an identifier with a hash/pound character (#).</p> <p>Here's an example of using a template reference variable to implement a clever keystroke loopback in an ultra-simple template.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/loop-back.component.ts\">// app/loop-back.component.ts\n\n@Component({\n  selector: 'loop-back',\n  template: `\n    &lt;input #box (keyup)=\"0\"&gt;\n    &lt;p&gt;{{box.value}}&lt;/p&gt;\n  `\n})\nexport class LoopbackComponent { }\n</pre>\n<p>We've declared a template reference variable named <code>box</code> on the <code>&lt;input&gt;</code> element. The <code>box</code> variable is a reference to the <code>&lt;input&gt;</code> element itself, which means we can grab the input element's <code>value</code> and display it with interpolation between <code>&lt;p&gt;</code> tags.</p> <p>The template is completely self contained. It doesn't bind to the component, and the component does nothing.</p> <p>Type in the input box, and watch the display update with each keystroke. <em>Voila!</em></p> <img src=\"https://angular.io/resources/images/devguide/user-input/keyup-loop-back-anim.gif\" alt=\"loop back\"><div class=\"l-sub-section\">\n<p><strong>This won't work at all unless we bind to an event</strong>.</p> <p>Angular only updates the bindings (and therefore the screen) if we do something in response to asynchronous events such as keystrokes.</p> <p>That's why we bind the <code>keyup</code> event to a statement that does ... well, nothing. We're binding to the number 0, the shortest statement we can think of. That is all it takes to keep Angular happy. We said it would be clever!</p> </div>\n<p>That template reference variable is intriguing. It's clearly easier to get to the textbox with that variable than to go through the <code>$event</code> object. Maybe we can rewrite our previous keyup example so that it uses the variable to get the user's input. Let's give it a try.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (v2)\">// app/keyup.components.ts (v2)\n\n@Component({\n  selector: 'key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n</pre>\n<p>That sure seems easier. An especially nice aspect of this approach is that our component code gets clean data values from the view. It no longer requires knowledge of the <code>$event</code> and its structure.</p> <h2 id=\"key-event\">Key event filtering (with <code>key.enter</code>)</h2> <p>Perhaps we don't care about every keystroke. Maybe we're only interested in the input box value when the user presses Enter, and we'd like to ignore all other keys. When we bind to the <code>(keyup)</code> event, our event handling statement hears <em>every keystroke</em>. We could filter the keys first, examining every <code>$event.keyCode</code>, and update the <code>values</code> property only if the key is Enter.</p> <p>Angular can filter the key events for us. Angular has a special syntax for keyboard events. We can listen for just the Enter key by binding to Angular's <code>keyup.enter</code> pseudo-event.</p> <p>Only then do we update the component's <code>values</code> property. (In this example, the update happens inside the event binding statement. A better practice would be to put the update code in the component.)</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (v3)\">// app/keyup.components.ts (v3)\n\n@Component({\n  selector: 'key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"values=box.value\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v3 {\n  values = '';\n}\n</pre>\n<p>Here's how it works.</p> <img src=\"https://angular.io/resources/images/devguide/user-input/keyup3-anim.gif\" alt=\"key up 3\"><h2 id=\"on-blur\">On blur</h2> <p>Our previous example won't transfer the current state of the input box if the user mouses away and clicks elsewhere on the page. We update the component's <code>values</code> property only when the user presses Enter while the focus is inside the input box.</p> <p>Let's fix that by listening to the input box's blur event as well.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/keyup.components.ts (v4)\">// app/keyup.components.ts (v4)\n\n@Component({\n  selector: 'key-up4',\n  template: `\n    &lt;input #box\n      (keyup.enter)=\"values=box.value\"\n      (blur)=\"values=box.value\"&gt;\n\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v4 {\n  values = '';\n}\n</pre>\n<h2 id=\"put-it-all-together\">Put it all together</h2> <p>We learned how to <a href=\"displaying-data\">display data</a> in the previous chapter. We've acquired a small arsenal of event binding techniques in this chapter.</p> <p>Let's put it all together in a micro-app that can display a list of heroes and add new heroes to that list. The user can add a hero by first typing in the input box and then pressing Enter, clicking the Add button, or clicking elsewhere on the page.</p> <img src=\"https://angular.io/resources/images/devguide/user-input/little-tour-anim.gif\" alt=\"Little Tour of Heroes\"><p>Below is the \"Little Tour of Heroes\" component. We'll call out the highlights after we bask briefly in its minimalist glory.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/little-tour.component.ts\">// app/little-tour.component.ts\n\n@Component({\n  selector: 'little-tour',\n  template: `\n    &lt;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \"&gt;\n\n    &lt;button (click)=addHero(newHero.value)&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;&lt;li *ngFor=\"let hero of heroes\"&gt;{{hero}}&lt;/li&gt;&lt;/ul&gt;\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n</pre>\n<p>We've seen almost everything here before. A few things are new or bear repeating.</p> <h3 id=\"use-template-variables-to-refer-to-elements\">Use template variables to refer to elements</h3> <p>The <code>newHero</code> template variable refers to the <code>&lt;input&gt;</code> element. We can use <code>newHero</code> from any sibling or child of the <code>&lt;input&gt;</code> element.</p> <p>Getting the element from a template variable makes the button click handler simpler. Without the variable, we'd have to use a fancy CSS selector to find the input element.</p> <h3 id=\"pass-values-not-elements\">Pass values, not elements</h3> <p>We could have passed the <code>newHero</code> into the component's <code>addHero</code> method.</p> <p>But that would require <code>addHero</code> to pick its way through the <code>&lt;input&gt;</code> DOM element, something we learned to dislike in our first try at a <a href=\"#keyup1\">keyup component</a>.</p> <p>Instead, we grab the input box <em>value</em> and pass <em>that</em> to <code>addHero</code>. The component knows nothing about HTML or the DOM, which is the way we like it.</p> <h3 id=\"keep-template-statements-simple\">Keep template statements simple</h3> <p>We bound <code>(blur)</code> to <em>two</em> JavaScript statements.</p> <p>We like the first one, which calls <code>addHero</code>. We do not like the second one, which assigns an empty string to the input box value.</p> <p>The second statement exists for a good reason. We have to clear the input box after adding the new hero to the list. The component has no way to do that itself because it has no access to the input box (our design choice).</p> <p>Although the example <em>works</em>, we are rightly wary of JavaScript in HTML. Template statements are powerful. We're supposed to use them responsibly. Complex JavaScript in HTML is irresponsible.</p> <p>Should we reconsider our reluctance to pass the input box into the component?</p> <p>There should be a better third way. And there is, as we'll see when we learn about <code>NgModel</code> in the <a href=\"forms\">Forms</a> chapter.</p> <h2 id=\"source-code\">Source code</h2> <p>Here is all the code we talked about in this chapter.</p> <pre language=\"ts\" name=\"click-me.component.ts\" format=\"linenums\" data-language=\"typescript\">// click-me.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'click-me',\n  template: `\n    &lt;button (click)=\"onClickMe()\"&gt;Click me!&lt;/button&gt;\n    {{clickMessage}}`\n})\nexport class ClickMeComponent {\n  clickMessage = '';\n\n  onClickMe() {\n    this.clickMessage = 'You are my hero!';\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"keyup.components.ts\" format=\"linenums\" data-language=\"typescript\">// keyup.components.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'key-up1',\n  template: `\n    &lt;input (keyup)=\"onKey($event)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v1 {\n  values = '';\n\n  /*\n  // without strong typing\n  onKey(event:any) {\n    this.values += event.target.value + ' | ';\n  }\n  */\n  // with strong typing\n  onKey(event: KeyboardEvent) {\n    this.values += (&lt;HTMLInputElement&gt;event.target).value + ' | ';\n  }\n}\n\n//////////////////////////////////////////\n\n@Component({\n  selector: 'key-up2',\n  template: `\n    &lt;input #box (keyup)=\"onKey(box.value)\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v2 {\n  values = '';\n  onKey(value: string) {\n    this.values += value + ' | ';\n  }\n}\n\n\n//////////////////////////////////////////\n\n@Component({\n  selector: 'key-up3',\n  template: `\n    &lt;input #box (keyup.enter)=\"values=box.value\"&gt;\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v3 {\n  values = '';\n}\n\n\n//////////////////////////////////////////\n\n@Component({\n  selector: 'key-up4',\n  template: `\n    &lt;input #box\n      (keyup.enter)=\"values=box.value\"\n      (blur)=\"values=box.value\"&gt;\n\n    &lt;p&gt;{{values}}&lt;/p&gt;\n  `\n})\nexport class KeyUpComponent_v4 {\n  values = '';\n}\n</pre>\n<pre language=\"ts\" name=\"loop-back.component.ts\" format=\"linenums\" data-language=\"typescript\">// loop-back.component.ts\n\nimport { Component } from '@angular/core';\n@Component({\n  selector: 'loop-back',\n  template: `\n    &lt;input #box (keyup)=\"0\"&gt;\n    &lt;p&gt;{{box.value}}&lt;/p&gt;\n  `\n})\nexport class LoopbackComponent { }\n</pre>\n<pre language=\"ts\n  \" name=\"little-tour.component.ts\" format=\"linenums\" data-language=\"typescript\">// little-tour.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'little-tour',\n  template: `\n    &lt;input #newHero\n      (keyup.enter)=\"addHero(newHero.value)\"\n      (blur)=\"addHero(newHero.value); newHero.value='' \"&gt;\n\n    &lt;button (click)=addHero(newHero.value)&gt;Add&lt;/button&gt;\n\n    &lt;ul&gt;&lt;li *ngFor=\"let hero of heroes\"&gt;{{hero}}&lt;/li&gt;&lt;/ul&gt;\n  `\n})\nexport class LittleTourComponent {\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  addHero(newHero: string) {\n    if (newHero) {\n      this.heroes.push(newHero);\n    }\n  }\n}\n</pre>\n<h2 id=\"summary\">Summary</h2> <p>We've mastered the basic primitives for responding to user input and gestures. As powerful as these primitives are, they are a bit clumsy for handling large amounts of user input. We're operating down at the low level of events when we should be writing two-way bindings between data entry fields and model properties.</p> <p>Angular has a two-way binding called <code>NgModel</code>, which we'll learn about in the <code>Forms</code> chapter.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"forms\">Forms</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/user-input.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/user-input.html</a>\n  </p>\n</div>\n","tutorial/toh-pt4":"<h1 class=\"hero-title text-display-1 \">Services</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We create a reusable service to manage our hero data calls</p></div>\n<h1 id=\"services\">Services</h1> <p>The Tour of Heroes is evolving and we anticipate adding more components in the near future.</p> <p>Multiple components will need access to hero data and we don't want to copy and paste the same code over and over. Instead, we'll create a single reusable data service and learn to inject it in the components that need it.</p> <p>Refactoring data access to a separate service keeps the component lean and focused on supporting the view. It also makes it easier to unit test the component with a mock service.</p> <p>Because data services are invariably asynchronous, we'll finish the chapter with a <strong>Promise</strong>-based version of the data service.</p> <p>Run the <live-example></live-example> for this part.</p> <h2 id=\"where-we-left-off\">Where We Left Off</h2> <p>Before we continue with our Tour of Heroes, let’s verify we have the following structure. If not, we’ll need to go back and follow the previous chapters.</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h3 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h3> <p>Open a terminal/console window. Start the TypeScript compiler, watch for changes, and start our server by entering the command:</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>The application runs and updates automatically as we continue to build the Tour of Heroes.</p> <h2 id=\"creating-a-hero-service\">Creating a Hero Service</h2> <p>Our stakeholders have shared their larger vision for our app. They tell us they want to show the heroes in various ways on different pages. We already can select a hero from a list. Soon we'll add a dashboard with the top performing heroes and create a separate view for editing hero details. All three views need hero data. </p> <p>At the moment the <code>AppComponent</code> defines mock heroes for display. We have at least two objections. First, defining heroes is not the component's job. Second, we can't easily share that list of heroes with other components and views. </p> <p>We can refactor this hero data acquisition business to a single service that provides heroes, and share that service with all components that need heroes.</p> <h3 id=\"create-the-heroservice\">Create the HeroService</h3> <p>Create a file in the <code>app</code> folder called <code>hero.service.ts</code>. </p> <div class=\"l-sub-section\">\n<p>We've adopted a convention in which we spell the name of a service in lowercase followed by <code>.service</code>. If the service name were multi-word, we'd spell the base filename in lower <a href=\"#\">dash-case</a>. The <code>SpecialSuperHeroService</code> would be defined in the <code>special-super-hero.service.ts</code> file.</p> </div>\n<p>We name the class <code>HeroService</code> and export it for others to import.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (starting point)\">// app/hero.service.ts (starting point)\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class HeroService {\n}\n</pre>\n<h3 id=\"injectable-services\">Injectable Services</h3> <p>Notice that we imported the Angular <code>Injectable</code> function and applied that function as an <code>@Injectable()</code> decorator.</p> <div class=\"callout is-helpful\">\n<p><strong>Don't forget the parentheses!</strong> Neglecting them leads to an error that's difficult to diagnose.</p> </div>\n<p>TypeScript sees the <code>@Injectable()</code> decorator and emits metadata about our service, metadata that Angular may need to inject other dependencies into this service.</p> <p>The <code>HeroService</code> doesn't have any dependencies <em>at the moment</em>. Add the decorator anyway. It is a \"best practice\" to apply the <code>@Injectable()</code> decorator ​<em>from the start</em>​ both for consistency and for future-proofing.</p> <h3 id=\"getting-heroes\">Getting Heroes</h3> <p>Add a <code>getHeroes</code> method stub.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (getHeroes stub)\">// app/hero.service.ts (getHeroes stub)\n\n@Injectable()\nexport class HeroService {\n  getHeroes() {\n  }\n}\n</pre>\n<p>We're holding back on the implementation for a moment to make an important point.</p> <p>The consumer of our service doesn't know how the service gets the data. Our <code>HeroService</code> could get <code>Hero</code> data from anywhere. It could get the data from a web service or local storage or from a mock data source.</p> <p>That's the beauty of removing data access from the component. We can change our minds about the implementation as often as we like, for whatever reason, without touching any of the components that need heroes.</p> <h3 id=\"mock-heroes\">Mock Heroes</h3> <p>We already have mock <code>Hero</code> data sitting in the <code>AppComponent</code>. It doesn't belong there. It doesn't belong <em>here</em> either. We'll move the mock data to its own file.</p> <p>Cut the <code>HEROES</code> array from <code>app.component.ts</code> and paste it to a new file in the <code>app</code> folder named <code>mock-heroes.ts</code>. We copy the <code>import {Hero} ...</code> statement as well because the heroes array uses the <code>Hero</code> class.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/mock-heroes.ts\">// app/mock-heroes.ts\n\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  {id: 11, name: 'Mr. Nice'},\n  {id: 12, name: 'Narco'},\n  {id: 13, name: 'Bombasto'},\n  {id: 14, name: 'Celeritas'},\n  {id: 15, name: 'Magneta'},\n  {id: 16, name: 'RubberMan'},\n  {id: 17, name: 'Dynama'},\n  {id: 18, name: 'Dr IQ'},\n  {id: 19, name: 'Magma'},\n  {id: 20, name: 'Tornado'}\n];\n</pre>\n<p>We export the <code>HEROES</code> constant so we can import it elsewhere — such as our <code>HeroService</code>.</p> <p>Meanwhile, back in <code>app.component.ts</code> where we cut away the <code>HEROES</code> array, we leave behind an uninitialized <code>heroes</code> property:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (heroes property)\">// app/app.component.ts (heroes property)\n\nheroes: Hero[];\n</pre>\n<h3 id=\"return-mocked-heroes\">Return Mocked Heroes</h3> <p>Back in the <code>HeroService</code> we import the mock <code>HEROES</code> and return it from the <code>getHeroes</code> method. Our <code>HeroService</code> looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts\">// app/hero.service.ts\n\nimport { Injectable } from '@angular/core';\n\nimport { HEROES } from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes() {\n    return HEROES;\n  }\n}\n</pre>\n<h3 id=\"use-the-hero-service\">Use the Hero Service</h3> <p>We're ready to use the <code>HeroService</code> in other components starting with our <code>AppComponent</code>.</p> <p>We begin, as usual, by importing the thing we want to use, the <code>HeroService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HeroService } from './hero.service';\n</pre>\n<p>Importing the service allows us to <em>reference</em> it in our code. How should the <code>AppComponent</code> acquire a runtime concrete <code>HeroService</code> instance?</p> <h3 id=\"do-we-new-the-heroservice-no-way-\">Do we <em>new</em> the <em>HeroService</em>? No way!</h3> <p>We could create a new instance of the <code>HeroService</code> with <code>new</code> like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">heroService = new HeroService(); // don't do this\n</pre>\n<p>That's a bad idea for several reasons including</p> <ul> <li>\n<p>Our component has to know how to create a <code>HeroService</code>. If we ever change the <code>HeroService</code> constructor, we'll have to find every place we create the service and fix it. Running around patching code is error prone and adds to the test burden.</p> </li> <li>\n<p>We create a new service each time we use <code>new</code>. What if the service should cache heroes and share that cache with others? We couldn't do that.</p> </li> <li>\n<p>We're locking the <code>AppComponent</code> into a specific implementation of the <code>HeroService</code>. It will be hard to switch implementations for different scenarios. Can we operate offline? Will we need different mocked versions under test? Not easy.</p> </li> </ul> <p><em>What if ... what if ... Hey, we've got work to do!</em></p> <p>We get it. Really we do. But it is so ridiculously easy to avoid these problems that there is no excuse for doing it wrong.</p> <h3 id=\"inject-the-heroservice-\">Inject the <em>HeroService</em>\n</h3> <p>Two lines replace the one line that created with <em>new</em>:</p> <ol> <li>We add a constructor that also defines a private property.</li> <li>We add to the component's <code>providers</code> metadata.</li> </ol> <p>Here's the constructor:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (constructor)\">// app/app.component.ts (constructor)\n\nconstructor(private heroService: HeroService) { }\n</pre>\n<p>The constructor itself does nothing. The parameter simultaneously defines a private <code>heroService</code> property and identifies it as a <code>HeroService</code> injection site.</p> <p>Now Angular will know to supply an instance of the <code>HeroService</code> when it creates a new <code>AppComponent</code>. </p> <div class=\"l-sub-section\">\n<p>Learn more about Dependency Injection in the <a href=\"../guide/dependency-injection\">Dependency Injection</a> chapter.</p> </div>\n<p>The <em>injector</em> does not know yet how to create a <code>HeroService</code>. If we ran our code now, Angular would fail with an error:</p> <pre format=\"nocode\">EXCEPTION: No provider for HeroService! (AppComponent -&gt; HeroService)</pre>\n<p>We have to teach the <em>injector</em> how to make a <code>HeroService</code> by registering a <code>HeroService</code> <strong>provider</strong>. Do that by adding the following <code>providers</code> array property to the bottom of the component metadata in the <code>@Component</code> call.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [HeroService]\n</pre>\n<p>The <code>providers</code> array tells Angular to create a fresh instance of the <code>HeroService</code> when it creates a new <code>AppComponent</code>. The <code>AppComponent</code> can use that service to get heroes and so can every child component of its component tree.</p> <h3 id=\"child-component\">\n<em>getHeroes</em> in the <em>AppComponent</em>\n</h3> <p>We've got the service in a <code>heroService</code> private variable. Let's use it.</p> <p>We pause to think. We can call the service and get the data in one line.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">this.heroes = this.heroService.getHeroes();\n</pre>\n<p>We don't really need a dedicated method to wrap one line. We write it anyway:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  getHeroes() {\n    this.heroes = this.heroService.getHeroes();\n  }\n</pre>\n<h3 id=\"oninit\">The <em>ngOnInit</em> Lifecycle Hook</h3> <p><code>AppComponent</code> should fetch and display heroes without a fuss. Where do we call the <code>getHeroes</code> method? In a constructor? We do <em>not</em>!</p> <p>Years of experience and bitter tears have taught us to keep complex logic out of the constructor, especially anything that might call a server as a data access method is sure to do.</p> <p>The constructor is for simple initializations like wiring constructor parameters to properties. It's not for heavy lifting. We should be able to create a component in a test and not worry that it might do real work — like calling a server! — before we tell it to do so.</p> <p>If not the constructor, something has to call <code>getHeroes</code>.</p> <p>Angular will call it if we implement the Angular <strong>ngOnInit</strong> <em>Lifecycle Hook</em>. Angular offers a number of interfaces for tapping into critical moments in the component lifecycle: at creation, after each change, and at its eventual destruction.</p> <p>Each interface has a single method. When the component implements that method, Angular calls it at the appropriate time.</p> <div class=\"l-sub-section\">\n<p>Learn more about lifecycle hooks in the <a href=\"../guide/lifecycle-hooks\">Lifecycle Hooks</a> chapter.</p> </div>\n<p>Here's the essential outline for the <code>OnInit</code> interface:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (ngOnInit stub)\">// app/app.component.ts (ngOnInit stub)\n\nimport { OnInit } from '@angular/core';\n\nexport class AppComponent implements OnInit {\n  ngOnInit() {\n  }\n}\n</pre>\n<p>We write an <code>ngOnInit</code> method with our initialization logic inside and leave it to Angular to call it at the right time. In our case, we initialize by calling <code>getHeroes</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  ngOnInit() {\n    this.getHeroes();\n  }\n</pre>\n<p>Our application should be running as expected, showing a list of heroes and a hero detail view when we click on a hero name.</p> <p>We're getting closer. But something isn't quite right.</p>  <h2 id=\"async-services-and-_promise-s\">Async Services and Promises</h2> <p>Our <code>HeroService</code> returns a list of mock heroes immediately. Its <code>getHeroes</code> signature is synchronous</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">this.heroes = this.heroService.getHeroes();\n</pre>\n<p>Ask for heroes and they are there in the returned result.</p> <p>Someday we're going to get heroes from a remote server. We don’t call http yet, but we aspire to in later chapters.</p> <p>When we do, we'll have to wait for the server to respond and we won't be able to block the UI while we wait, even if we want to (which we shouldn't) because the browser won't block.</p> <p>We'll have to use some kind of asynchronous technique and that will change the signature of our <code>getHeroes</code> method.</p> <p>We'll use <em>Promises</em>.</p> <h3 id=\"the-hero-service-makes-a-_promise-\">The Hero Service makes a Promise</h3> <p>A <strong>Promise</strong> is ... well it's a promise to call us back later when the results are ready. We ask an asynchronous service to do some work and give it a callback function. It does that work (somewhere) and eventually it calls our function with the results of the work or an error.</p> <div class=\"l-sub-section\">\n<p>We are simplifying. Learn about ES2015 Promises <a href=\"http://exploringjs.com/es6/ch_promises.html\">here</a> and elsewhere on the web.</p> </div>\n<p>Update the <code>HeroService</code> with this Promise-returning <code>getHeroes</code> method:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (excerpt)\">// app/hero.service.ts (excerpt)\n\ngetHeroes() {\n  return Promise.resolve(HEROES);\n}\n</pre>\n<p>We're still mocking the data. We're simulating the behavior of an ultra-fast, zero-latency server, by returning an <strong>immediately resolved Promise</strong> with our mock heroes as the result.</p> <h3 id=\"act-on-the-_promise-\">Act on the Promise</h3> <p>Returning to the <code>AppComponent</code> and its <code>getHeroes</code> method, we see that it still looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (getHeroes - old)\">// app/app.component.ts (getHeroes - old)\n\n  getHeroes() {\n    this.heroes = this.heroService.getHeroes();\n  }\n</pre>\n<p>As a result of our change to <code>HeroService</code>, we're now setting <code>this.heroes</code> to a Promise rather than an array of heroes. </p> <p>We have to change our implementation to <em>act on the Promise when it resolves</em>. When the Promise resolves successfully, <em>then</em> we will have heroes to display.</p> <p>We pass our callback function as an argument to the Promise's <strong>then</strong> method:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (getHeroes - revised)\">// app/app.component.ts (getHeroes - revised)\n\ngetHeroes() {\n  this.heroService.getHeroes().then(heroes =&gt; this.heroes = heroes);\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">ES2015 arrow function</a> in the callback is more succinct than the equivalent function expression and gracefully handles <em>this</em>.</p> </div>\n<p>Our callback sets the component's <code>heroes</code> property to the array of heroes returned by the service. That's all there is to it!</p> <p>Our app should still be running, still showing a list of heroes, and still responding to a name selection with a detail view.</p> <div class=\"l-sub-section\">\n<p>Checkout the \"<a href=\"#slow\">Take it slow</a>\" appendix to see what the app might be like with a poor connection.</p> </div>\n<h3 id=\"review-the-app-structure\">Review the App Structure</h3> <p>Let’s verify that we have the following structure after all of our good refactoring in this chapter:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">main.ts </div>\n<div class=\"file\">mock-heroes.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ... </div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<p>Here are the code files we discussed in this chapter.</p> <pre language=\"ts\" name=\"app/hero.service.ts\" format=\"linenums\" data-language=\"typescript\">// app/hero.service.ts\n\nimport { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My Heroes&lt;/h2&gt;\n    &lt;ul class=\"heroes\"&gt;\n      &lt;li *ngFor=\"let hero of heroes\"\n        [class.selected]=\"hero === selectedHero\"\n        (click)=\"onSelect(hero)\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;\n  `,\n  styles: [`\n    .selected {\n      background-color: #CFD8DC !important;\n      color: white;\n    }\n    .heroes {\n      margin: 0 0 2em 0;\n      list-style-type: none;\n      padding: 0;\n      width: 15em;\n    }\n    .heroes li {\n      cursor: pointer;\n      position: relative;\n      left: 0;\n      background-color: #EEE;\n      margin: .5em;\n      padding: .3em 0;\n      height: 1.6em;\n      border-radius: 4px;\n    }\n    .heroes li.selected:hover {\n      background-color: #BBD8DC !important;\n      color: white;\n    }\n    .heroes li:hover {\n      color: #607D8B;\n      background-color: #DDD;\n      left: .1em;\n    }\n    .heroes .text {\n      position: relative;\n      top: -3px;\n    }\n    .heroes .badge {\n      display: inline-block;\n      font-size: small;\n      color: white;\n      padding: 0.8em 0.7em 0 0.7em;\n      background-color: #607D8B;\n      line-height: 1em;\n      position: relative;\n      left: -1px;\n      top: -4px;\n      height: 1.8em;\n      margin-right: .8em;\n      border-radius: 4px 0 0 4px;\n    }\n  `],\n  providers: [HeroService]\n})\nexport class AppComponent implements OnInit {\n  title = 'Tour of Heroes';\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private heroService: HeroService) { }\n\n  getHeroes() {\n    this.heroService.getHeroes().then(heroes =&gt; this.heroes = heroes);\n  }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero) { this.selectedHero = hero; }\n}\n</pre>\n<pre language=\"ts\n  \" name=\"app/mock-heroes.ts\" format=\"linenums\" data-language=\"typescript\">// app/mock-heroes.ts\n\nimport { Hero } from './hero';\n\nexport const HEROES: Hero[] = [\n  {id: 11, name: 'Mr. Nice'},\n  {id: 12, name: 'Narco'},\n  {id: 13, name: 'Bombasto'},\n  {id: 14, name: 'Celeritas'},\n  {id: 15, name: 'Magneta'},\n  {id: 16, name: 'RubberMan'},\n  {id: 17, name: 'Dynama'},\n  {id: 18, name: 'Dr IQ'},\n  {id: 19, name: 'Magma'},\n  {id: 20, name: 'Tornado'}\n];\n</pre>\n<h2 id=\"the-road-we-ve-travelled\">The Road We’ve Travelled</h2> <p>Let’s take stock of what we’ve built.</p> <ul> <li>We created a service class that can be shared by many components.</li> <li>We used the <code>ngOnInit</code> Lifecycle Hook to get our heroes when our <code>AppComponent</code> activates.</li> <li>We defined our <code>HeroService</code> as a provider for our <code>AppComponent</code>.</li> <li>We created mock hero data and imported them into our service.</li> <li>We designed our service to return a Promise and our component to get our data from the Promise.</li> </ul> <p>Run the <live-example></live-example> for this part.</p> <h3 id=\"the-road-ahead\">The Road Ahead</h3> <p>Our Tour of Heroes has become more reusable using shared components and services. We want to create a dashboard, add menu links that route between the views, and format data in a template. As our app evolves, we’ll learn how to design it to make it easier to grow and maintain.</p> <p>We learn about Angular Component Router and navigation among the views in the <a href=\"toh-pt5\">next tutorial</a> chapter.</p> <h3 id=\"slow\">Appendix: Take it slow</h3> <p>We can simulate a slow connection.</p> <p>Import the <code>Hero</code> symbol and add the following <code>getHeroesSlowly</code> method to the <code>HeroService</code></p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (getHeroesSlowly)\">// app/hero.service.ts (getHeroesSlowly)\n\ngetHeroesSlowly() {\n  return new Promise&lt;Hero[]&gt;(resolve =&gt;\n    setTimeout(() =&gt; resolve(HEROES), 2000) // 2 seconds\n  );\n}\n</pre>\n<p>Like <code>getHeroes</code>, it also returns a Promise. But this Promise waits 2 seconds before resolving the Promise with mock heroes.</p> <p>Back in the <code>AppComponent</code>, replace <code>heroService.getHeroes</code> with <code>heroService.getHeroesSlowly</code> and see how the app behaves.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt5\">Routing</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt4.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt4.html</a>\n  </p>\n</div>\n","guide/component-styles":"<h1 class=\"hero-title text-display-1 \">Component Styles</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Learn how to apply CSS styles to components.</p></div>\n<p>Angular 2 applications are styled with regular CSS. That means we can apply everything we know about CSS stylesheets, selectors, rules, and media queries to our Angular applications directly.</p> <p>On top of this, Angular has the ability to bundle <em>component styles</em> with our components enabling a more modular design than regular stylesheets.</p> <p>In this chapter we learn how to load and apply these <em>component styles</em>.</p> <h1 id=\"table-of-contents\">Table Of Contents</h1> <ul> <li><a href=\"#using-component-styles\">Using Component Styles</a></li> <li><a href=\"#special-selectors\">Special selectors</a></li> <li><a href=\"#loading-styles\">Loading Styles into Components</a></li> <li><a href=\"#view-encapsulation\">Controlling View Encapsulation: Emulated, Native, and None</a></li> <li><a href=\"#inspect-generated-css\">Appendix 1: Inspecting the generated runtime component styles</a></li> <li><a href=\"#relative-urls\">Appendix 2: Loading Styles with Relative URLs</a></li> </ul> <p>Run the <live-example></live-example> of the code shown in this chapter.</p> <h2 id=\"using-component-styles\">Using Component Styles</h2> <p>For every Angular 2 component we write, we may define not only an HTML template, but also the CSS styles that go with that template, specifying any selectors, rules, and media queries that we need.</p> <p>One way to do this is to set the <code>styles</code> property in the component metadata. The <code>styles</code> property takes an array of strings that contain CSS code. Usually we give it one string as in this example:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'hero-app',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;hero-app-main [hero]=hero&gt;&lt;/hero-app-main&gt;`,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n</pre>\n<p>Component styles differ from traditional, global styles in a couple of ways.</p> <p>Firstly, the selectors we put into a component's styles <em>only apply within the template of that component</em>. The <code>h1</code> selector in the example above only applies to the <code>&lt;h1&gt;</code> tag in the template of <code>HeroAppComponent</code>. Any <code>&lt;h1&gt;</code> elements elsewhere in the application are unaffected.</p> <p>This is a big improvement in modularity compared to how CSS traditionally works:</p> <ol> <li>\n<p>We can use the CSS class names and selectors that make the most sense in the context of each component. </p> </li> <li>\n<p>Class names and selectors are local to the component and won't collide with classes and selectors used elsewhere in the application.</p> </li> <li>\n<p>Our component's styles <em>cannot</em> be changed by changes to styles elsewhere in the application.</p> </li> <li>\n<p>We can co-locate the CSS code of each component with the TypeScript and HTML code of the component, which leads to a neat and tidy project structure.</p> </li> <li>\n<p>We can change or remove component CSS code in the future without trawling through the whole application to see where else it may have been used. We just look at the component we're in.</p> </li> </ol> <h2 id=\"special-selectors\">Special selectors</h2> <p>Component styles have a few special <em>selectors</em> from the world of <a href=\"https://www.w3.org/TR/css-scoping-1\">shadow DOM style scoping</a>:</p> <h3 id=\"-host\">:host</h3> <p>Use the <code>:host</code> pseudo-class selector to target styles in the element that <em>hosts</em> the component (as opposed to targeting elements <em>inside</em> the component's template):</p> <pre language=\"css\" format=\"\" data-language=\"css\">:host {\n  display: block;\n  border: 1px solid black;\n}\n</pre>\n<p>This is the <em>only</em> way we can target the host element. We cannot reach it from inside the component with other selectors, because it is not part of the component's own template. It is in a parent component's template.</p> <p>Use the <em>function form</em> to apply host styles conditionally by including another selector inside parentheses after <code>:host</code>.</p> <p>In the next example we target the host element again, but only when it also has the <code>active</code> CSS class.</p> <pre language=\"css\" format=\"\" data-language=\"css\">:host(.active) {\n  border-width: 3px;\n}\n</pre>\n<h3 id=\"-host-context\">:host-context</h3> <p>Sometimes it is useful to apply styles based on some condition <em>outside</em> a component's view. For example, there may be a CSS theme class applied to the document <code>&lt;body&gt;</code> element, and we want to change how our component looks based on that.</p> <p>Use the <code>:host-context()</code> pseudo-class selector. It works just like the function form of <code>:host()</code>. It looks for a CSS class in <em>any ancestor</em> of the component host element, all the way up to the document root. It's useful when combined with another selector.</p> <p>In the following example, we apply a <code>background-color</code> style to all <code>&lt;h2&gt;</code> elements <em>inside</em> the component, only if some ancestor element has the CSS class <code>theme-light</code>.</p> <pre language=\"css\" format=\"\" data-language=\"css\">:host-context(.theme-light) h2 {\n  background-color: #eef;\n}\n</pre>\n<h3 id=\"-deep-\">/deep/</h3> <p>Component styles normally apply only to the HTML in the component's own template. </p> <p>We can use the <code>/deep/</code> selector to force a style down through the child component tree into all the child component views. The <code>/deep/</code> selector works to any depth of nested components, and it applies <em>both to the view children and the content children</em> of the component. </p> <p>In this example, we target all <code>&lt;h3&gt;</code> elements, from the host element down through this component to all of its child elements in the DOM: </p> <pre language=\"css\" format=\"\" data-language=\"css\">:host /deep/ h3 {\n  font-style: italic;\n}\n</pre>\n<p>The <code>/deep/</code> selector also has the alias <code>&gt;&gt;&gt;</code>. We can use either of the two interchangeably.</p> <div class=\"alert is-important\">\n<p>The <code>/deep/</code> and <code>&gt;&gt;&gt;</code> selectors should only be used with <strong>emulated</strong> view encapsulation. This is the default and it is what we use most of the time. See the <a href=\"#view-encapsulation\">Controlling View Encapsulation</a> section for more details.</p> </div>\n<h2 id=\"loading-styles\">Loading Styles into Components</h2> <p>We have several ways to add styles to a component: </p> <ul> <li>inline in the template HTML</li> <li>by setting <code>styles</code> or <code>styleUrls</code> metadata</li> <li>with CSS imports</li> </ul> <p>The scoping rules outlined above apply to each of these loading patterns.</p> <h3 id=\"styles-in-metadata\">Styles in Metadata</h3> <p>We can add a <code>styles</code> array property to the <code>@Component</code> decorator. Each string in the array (usually just one string) defines the CSS.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'hero-app',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;hero-app-main [hero]=hero&gt;&lt;/hero-app-main&gt;`,\n  styles: ['h1 { font-weight: normal; }']\n})\nexport class HeroAppComponent {\n/* . . . */\n}\n</pre>\n<h3 id=\"template-inline-styles\">Template Inline Styles</h3> <p>We can embed styles directly into the HTML template by putting them inside <code>&lt;style&gt;</code> tags.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'hero-controls',\n  template: `\n    &lt;style&gt;\n      button {\n        background-color: white;\n        border: 1px solid #777;\n      }\n    &lt;/style&gt;\n    &lt;h3&gt;Controls&lt;/h3&gt;\n    &lt;button (click)=\"activate()\"&gt;Activate&lt;/button&gt;\n  `\n})\n</pre>\n<h3 id=\"style-urls-in-metadata\">Style URLs in Metadata</h3> <p>We can load styles from external CSS files by adding a <code>styleUrls</code> attribute into a component's <code>@Component</code> decorator:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'hero-details',\n  template: `\n    &lt;h2&gt;{{hero.name}}&lt;/h2&gt;\n    &lt;hero-team [hero]=hero&gt;&lt;/hero-team&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  `,\n  styleUrls: ['app/hero-details.component.css']\n})\nexport class HeroDetailsComponent {\n/* . . . */\n}\n</pre>\n<div class=\"alert is-important\">\n<p>The URL is <strong><em>relative to the application root</em></strong> which is usually the location of the <code>index.html</code> web page that hosts the application. The style file URL is <em>not</em> relative to the component file. That's why the example URL begins <code>app/</code>. See <a href=\"#relative-urls\">Appendix 2</a> to specify a URL relative to the component file.</p> </div>\n<div class=\"l-sub-section\">\n<p>Users of module bundlers like Webpack may also use the <code>styles</code> attribute to load styles from external files at build time. They could write:</p> <p><code>styles: [require('my.component.css')]</code></p> <p>We set the <code>styles</code> property, <strong>not</strong> <code>styleUrls</code> property! The module bundler is loading the CSS strings, not Angular. Angular only sees the CSS strings <em>after</em> the bundler loads them. To Angular it is as if we wrote the <code>styles</code> array by hand. Refer to the module bundler's documentation for information on loading CSS in this manner.</p> </div>\n<h3 id=\"template-link-tags\">Template Link Tags</h3> <p>We can also embed <code>&lt;link&gt;</code> tags into the component's HTML template. </p> <p>As with <code>styleUrls</code>, the link tag's <code>href</code> URL is relative to the application root, not relative to the component file.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'hero-team',\n  template: `\n    &lt;link rel=\"stylesheet\" href=\"app/hero-team.component.css\"&gt;\n    &lt;h3&gt;Team&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let member of hero.team\"&gt;\n        {{member}}\n      &lt;/li&gt;\n    &lt;/ul&gt;`\n})\n</pre>\n<h3 id=\"css-imports\">CSS @imports</h3> <p>We can also import CSS files into our CSS files by using the standard CSS <a href=\"https://developer.mozilla.org/en/docs/Web/CSS/@import\"><code>@import</code> rule</a>.</p> <p>In <em>this</em> case the URL is relative to the CSS file into which we are importing.</p> <pre language=\"css\" format=\"\" data-language=\"css\" name=\"app/hero-details.component.css (excerpt)\">/* app/hero-details.component.css (excerpt) */\n\n@import 'hero-details-box.css';\n</pre>\n<h2 id=\"view-encapsulation\">Controlling View Encapsulation: Native, Emulated, and None</h2> <p>As discussed above, component CSS styles are <em>encapsulated</em> into the component's own view and do not affect the rest of the application.</p> <p>We can control how this encapsulation happens on a <em>per component</em> basis by setting the <em>view encapsulation mode</em> in the component metadata. There are three modes to choose from:</p> <ul> <li>\n<p><code>Native</code> view encapsulation uses the browser's native <a href=\"https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM\">Shadow DOM</a> implementation to attach a Shadow DOM to the component's host element, and then puts the component view inside that Shadow DOM. The component's styles are included within the Shadow DOM.</p> </li> <li>\n<p><code>Emulated</code> view encapsulation (<strong>the default</strong>) emulates the behavior of Shadow DOM by preprocessing (and renaming) the CSS code to effectively scope the CSS to the component's view. See <a href=\"#inspect-generated-css\">Appendix 1</a> for details.</p> </li> <li>\n<p><code>None</code> means that Angular does no view encapsulation. Angular adds the CSS to the global styles. The scoping rules, isolations, and protections discussed earlier do not apply. This is essentially the same as pasting the component's styles into the HTML.</p> </li> </ul> <p>Set the components encapsulation mode using the <code>encapsulation</code> property in the component metadata:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// warning: few browsers support shadow DOM encapsulation at this time\nencapsulation: ViewEncapsulation.Native\n</pre>\n<p><code>Native</code> view encapsulation only works on <a href=\"http://caniuse.com/#feat=shadowdom\">browsers that have native support for Shadow DOM</a>. The support is still limited, which is why <code>Emulated</code> view encapsulation is the default mode and recommended in most cases.</p> <h2 id=\"inspect-generated-css\">Appendix 1: Inspecting The CSS Generated in Emulated View Encapsulation</h2> <p>When using the default emulated view encapsulation, Angular preprocesses all component styles so that they approximate the standard Shadow CSS scoping rules.</p> <p>When we inspect the DOM of a running Angular application with emulated view encapsulation enabled, we see that each DOM element has some extra attributes attached to it:</p> <pre format=\"\">&lt;hero-details _nghost-pmm-5&gt;\n  &lt;h2 _ngcontent-pmm-5&gt;Mister Fantastic&lt;/h2&gt;\n  &lt;hero-team _ngcontent-pmm-5 _nghost-pmm-6&gt;\n    &lt;h3 _ngcontent-pmm-6&gt;Team&lt;/h3&gt;\n  &lt;/hero-team&gt;\n&lt;/hero-detail&gt;\n</pre>\n<p>We see two kinds of generated attributes:</p> <ul> <li>\n<p>An element that would be a Shadow DOM host in native encapsulation has a generated <code>_nghost</code> attribute. This is typically the case for component host elements.</p> </li> <li>\n<p>An element within a component's view has a <code>_ngcontent</code> attribute that identifies to which host's emulated Shadow DOM this element belongs.</p> </li> </ul> <p>The exact values of these attributes are not important. They are automatically generated and we never refer to them in application code. But they are targeted by the generated component styles, which we'll find in the <code>&lt;head&gt;</code> section of the DOM:</p> <pre format=\"\">[_nghost-pmm-5] {\n  display: block;\n  border: 1px solid black;\n}\n\nh3[_ngcontent-pmm-6] {\n  background-color: white;\n  border: 1px solid #777;\n}\n</pre>\n<p>These are the styles we wrote, post-processed so that each selector is augmented with <code>_nghost</code> or <code>_ngcontent</code> attribute selectors. These extra selectors enable the scoping rules described in this guide.</p> <p>We'll likely live with <em>emulated</em> mode until shadow DOM gains traction.</p> <h2 id=\"relative-urls\">Appendix 2: Loading Styles with Relative URLs</h2> <p>It's common practice to split a component's code, HTML, and CSS into three separate files in the same directory:</p> <pre format=\"\">quest-summary.component.ts\nquest-summary.component.html\nquest-summary.component.css\n</pre>\n<p>We include the template and CSS files by setting the <code>templateUrl</code> and <code>styleUrls</code> metadata properties respectively. Because these files are co-located with the component, it would be nice to refer to them by name without also having to specify a path back to the root of the application.</p> <p>We can change the way Angular calculates the full URL be setting the component metadata's <code>moduleId</code> property to <code>module.id</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/quest-summary.component.ts\">// app/quest-summary.component.ts\n\n@Component({\n  moduleId: module.id,\n  selector: 'quest-summary',\n  templateUrl: 'quest-summary.component.html',\n  styleUrls:  ['quest-summary.component.css']\n})\nexport class QuestSummaryComponent { }\n</pre>\n<p>Learn more about <code>moduleId</code> in the <a href=\"../cookbook/component-relative-paths\">Component-Relative Paths</a> chapter.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/component-styles.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/component-styles.html</a>\n  </p>\n</div>\n","guide/hierarchical-dependency-injection":"<h1 class=\"hero-title text-display-1 \">Hierarchical Dependency Injectors</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Angular's hierarchical dependency injection system supports nested injectors in parallel with the component tree.</p></div>\n<p>We learned the basics of Angular Dependency injection in the <a href=\"dependency-injection\">Dependency Injection</a> chapter.</p> <p>Angular has a Hierarchical Dependency Injection system. There is actually a tree of injectors that parallel an application's component tree. We can re-configure the injectors at any level of that component tree with interesting and useful results.</p> <p>In this chapter we explore these points and write some code.</p> <p>Try the <live-example></live-example>.</p> <h2 id=\"the-injector-tree\">The Injector Tree</h2> <p>In the <a href=\"dependency-injection\">Dependency Injection</a> chapter we learned how to configure a dependency injector and how to retrieve dependencies where we need them.</p> <p>We oversimplified. In fact, there is no such thing as <strong><em>the</em></strong> injector! An application may have multiple injectors!</p> <p>An Angular application is a tree of components. Each component instance has its own injector! The tree of components parallels the tree of injectors.</p> <div class=\"l-sub-section\">\n<p>Angular doesn't <em>literally</em> create a separate injector for each component. Every component doesn't need its own injector and it would be horribly inefficient to create masses of injectors for no good purpose.</p> <p>But it is true that every component <strong><em>has an injector</em></strong> (even if it shares that injector with another component) and there may be many different injector instances operating at different levels of the component tree.</p> <p>It is useful to pretend that every component has its own injector.</p> </div>\n<p>Consider a simple variation on the Tour of Heroes application consisting of three different components: <code>HeroesApp</code>, <code>HeroesListComponent</code> and <code>HeroesCardComponent</code>. The <code>HeroesApp</code> holds a single instance of <code>HeroesListComponent</code>. The new twist is that the <code>HeroesListComponent</code> may hold and manage multiple instances of the <code>HeroesCardComponent</code>.</p> <p>The following diagram represents the state of the component tree when there are three instances of <code>HeroesCardComponent</code> open simultaneously.</p> <img src=\"https://angular.io/resources/images/devguide/dependency-injection/component-hierarchy.png\" alt=\"injector tree\" width=\"500\"><p>Each component instance gets its own injector and an injector at one level is a child injector of the injector above it in the tree.</p> <p>When a component at the bottom requests a dependency, Angular tries to satisfy that dependency with a provider registered in that component's own injector. If the component's injector lacks the provider, it passes the request up to its parent component's injector. If that injector can't satisfy the request, it passes it along to <em>its</em> parent component's injector. The requests keep bubbling up until we find an injector that can handle the request or run out of component ancestors. If we run out of ancestors, Angular throws an error.</p> <div class=\"l-sub-section\">\n<p>There's a third possibility. An intermediate component can declare that it is the \"host\" component. The hunt for providers will climb no higher than the injector for this host component. We'll reserve discussion of this option for another day.</p> </div>\n<p>Such a proliferation of injectors makes little sense until we consider the possibility that injectors at different levels can be configured with different providers. We don't <em>have</em> to re-configure providers at every level. But we <em>can</em>.</p> <p>If we don't re-configure, the tree of injectors appears to be flat. All requests bubble up to the root NgModule injector that we configured with the <code>bootstrapModule</code> method.</p> <p>The ability to configure one or more providers at different levels opens up interesting and useful possibilities.</p> <p>Let’s return to our Car example. Suppose we configured the root injector (marked as A) with providers for <code>Car</code>, <code>Engine</code> and <code>Tires</code>. We create a child component (B) that defines its own providers for <code>Car</code> and <code>Engine</code> This child is the parent of another component (C) that defines its own provider for <code>Car</code>.</p> <p>Behind the scenes each component sets up its own injector with one or more providers defined for that component itself.</p> <p>When we resolve an instance of <code>Car</code> at the deepest component (C), its injector produces an instance of <code>Car</code> resolved by injector (C) with an <code>Engine</code> resolved by injector (B) and <code>Tires</code> resolved by the root injector (A).</p> <img src=\"https://angular.io/resources/images/devguide/dependency-injection/injector-tree.png\" alt=\"injector tree\" width=\"600\"><h2 id=\"component-injectors\">Component Injectors</h2> <p>In the previous section, we talked about injectors and how they are organized like a tree. Lookups follow the injector tree upwards until they find the requested thing to inject. But when do we actually want to provide providers on the root injector and when do we want to provide them on a child injector?</p> <p>Consider you are building a component to show a list of super heroes that displays each super hero in a card with its name and superpower. There should also be an edit button that opens up an editor to change the name and superpower of our hero.</p> <p>One important aspect of the editing functionality is that we want to allow multiple heroes to be in edit mode at the same time and that one can always either commit or cancel the proposed changes.</p> <p>Let’s take a look at the <code>HeroesListComponent</code> which is the root component for this example.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/heroes-list.component.ts\">// app/heroes-list.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { EditItem } from './edit-item';\nimport { HeroesService } from './heroes.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'heroes-list',\n  template: `\n    &lt;div&gt;\n      &lt;ul&gt;\n        &lt;li *ngFor=\"let editItem of heroes\"&gt;\n          &lt;hero-card\n            [hidden]=\"editItem.editing\"\n            [hero]=\"editItem.item\"&gt;\n          &lt;/hero-card&gt;\n          &lt;button\n            [hidden]=\"editItem.editing\"\n            (click)=\"editItem.editing = true\"&gt;\n              edit\n          &lt;/button&gt;\n          &lt;hero-editor\n            (saved)=\"onSaved(editItem, $event)\"\n            (canceled)=\"onCanceled(editItem)\"\n            [hidden]=\"!editItem.editing\"\n            [hero]=\"editItem.item\"&gt;\n          &lt;/hero-editor&gt;\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;`\n})\nexport class HeroesListComponent {\n  heroes: Array&lt;EditItem&lt;Hero&gt;&gt;;\n  constructor(heroesService: HeroesService) {\n    this.heroes = heroesService.getHeroes()\n                               .map(item =&gt; new EditItem(item));\n  }\n\n  onSaved (editItem: EditItem&lt;Hero&gt;, updatedHero: Hero) {\n    editItem.item = updatedHero;\n    editItem.editing = false;\n  }\n\n  onCanceled (editItem: EditItem&lt;Hero&gt;) {\n    editItem.editing = false;\n  }\n}\n</pre>\n<p>Notice that it imports the <code>HeroService</code> that we’ve used before so we can skip its declaration. The only difference is that we’ve used a more formal approach for our <code>Hero</code>model and defined it upfront as such.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.ts\">// app/hero.ts\n\nexport class Hero {\n  name: string;\n  power: string;\n}\n</pre>\n<p>Our <code>HeroesListComponent</code> defines a template that creates a list of <code>HeroCardComponent</code>s and <code>HeroEditorComponent</code>s, each bound to an instance of hero that is returned from the <code>HeroService</code>. Ok, that’s not entirely true. It actually binds to an <code>EditItem&lt;Hero&gt;</code> which is a simple generic datatype that can wrap any type and indicate if the item being wrapped is currently being edited or not.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/edit-item.ts\">// app/edit-item.ts\n\nexport class EditItem&lt;T&gt; {\n  editing: boolean;\n  constructor (public item: T) {}\n}\n</pre>\n<p>But how is <code>HeroCardComponent</code> implemented? Let’s take a look.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-card.component.ts\">// app/hero-card.component.ts\n\nimport { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-card',\n  template: `\n    &lt;div&gt;\n      &lt;span&gt;Name:&lt;/span&gt;\n      &lt;span&gt;{{hero.name}}&lt;/span&gt;\n    &lt;/div&gt;`\n})\nexport class HeroCardComponent {\n  @Input() hero: Hero;\n}\n</pre>\n<p>The <code>HeroCardComponent</code> is basically a component that defines a template to render a hero. Nothing more.</p> <p>Let’s get to the interesting part and take a look at the <code>HeroEditorComponent</code></p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-editor.component.ts\">// app/hero-editor.component.ts\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\n\nimport { RestoreService } from './restore.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-editor',\n  providers: [RestoreService],\n  template: `\n    &lt;div&gt;\n      &lt;span&gt;Name:&lt;/span&gt;\n      &lt;input [(ngModel)]=\"hero.name\"/&gt;\n      &lt;div&gt;\n        &lt;button (click)=\"onSaved()\"&gt;save&lt;/button&gt;\n        &lt;button (click)=\"onCanceled()\"&gt;cancel&lt;/button&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;`\n})\n\nexport class HeroEditorComponent {\n  @Output() canceled = new EventEmitter();\n  @Output() saved = new EventEmitter();\n\n  constructor(private restoreService: RestoreService&lt;Hero&gt;) {}\n\n  @Input()\n  set hero (hero: Hero) {\n    this.restoreService.setItem(hero);\n  }\n\n  get hero () {\n    return this.restoreService.getItem();\n  }\n\n  onSaved () {\n    this.saved.next(this.restoreService.getItem());\n  }\n\n  onCanceled () {\n    this.hero = this.restoreService.restoreItem();\n    this.canceled.next(this.hero);\n  }\n}\n</pre>\n<p>Now here it’s getting interesting. The <code>HeroEditorComponent</code>defines a template with an input to change the name of the hero and a <code>cancel</code> and a <code>save</code> button. Remember that we said we want to have the flexibility to cancel our editing and restore the old value? This means we need to maintain two copies of our <code>Hero</code> that we want to edit. Thinking ahead, this is a perfect use case to abstract it into its own generic service since we have probably more cases like this in our app.</p> <p>And this is where the <code>RestoreService</code> enters the stage.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/restore.service.ts\">// app/restore.service.ts\n\nexport class RestoreService&lt;T&gt; {\n  originalItem: T;\n  currentItem: T;\n\n  setItem (item: T) {\n    this.originalItem = item;\n    this.currentItem = this.clone(item);\n  }\n\n  getItem (): T {\n    return this.currentItem;\n  }\n\n  restoreItem (): T {\n    this.currentItem = this.originalItem;\n    return this.getItem();\n  }\n\n  clone (item: T): T {\n    // super poor clone implementation\n    return JSON.parse(JSON.stringify(item));\n  }\n}\n</pre>\n<p>All this tiny service does is define an API to set a value of any type which can be altered, retrieved or set back to its initial value. That’s exactly what we need to implement the desired functionality.</p> <p>Our <code>HeroEditComponent</code> uses this services under the hood for its <code>hero</code> property. It intercepts the <code>get</code> and <code>set</code> method to delegate the actual work to our <code>RestoreService</code> which in turn makes sure that we won’t work on the original item but on a copy instead.</p> <p>At this point we may be scratching our heads asking what this has to do with component injectors? Look closely at the metadata for our <code>HeroEditComponent</code>. Notice the <code>providers</code> property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [RestoreService],\n</pre>\n<p>This adds a <code>RestoreService</code> provider to the injector of the <code>HeroEditComponent</code>. Couldn’t we simply alter our root NgModule to include this provider?</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// Don't do this!\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  providers: [ HeroesService, RestoreService ],\n  declarations: [ HeroesListComponent ],\n  bootstrap: [\n    HeroesListComponent,\n    HeroCardComponent,\n    HeroEditorComponent\n  ]\n})\n</pre>\n<p>Technically we could, but our component wouldn’t quite behave the way it is supposed to. Remember that each injector treats the services that it provides as singletons. However, in order to be able to have multiple instances of <code>HeroEditComponent</code> edit multiple heroes at the same time we need to have multiple instances of the <code>RestoreService</code>. More specifically, each instance of <code>HeroEditComponent</code> needs to be bound to its own instance of the <code>RestoreService</code>.</p> <p>By configuring a provider for the <code>RestoreService</code> on the <code>HeroEditComponent</code>, we get exactly one new instance of the <code>RestoreService</code>per <code>HeroEditComponent</code>.</p> <p>Does that mean that services aren’t singletons anymore in Angular 2? Yes and no. There can be only one instance of a service type in a particular injector. But we've learned that we can have multiple injectors operating at different levels of the application's component tree. Any of those injectors could have its own instance of the service.</p> <p>If we defined a <code>RestoreService</code> provider only on the root component, we would have exactly one instance of that service and it would be shared across the entire application.</p> <p>That’s clearly not what we want in this scenario. We want each component to have its own instance of the <code>RestoreService</code>. Defining (or re-defining) a provider at the component level creates a new instance of the service for each new instance of that component. We've made the <code>RestoreService</code> a kind of \"private\" singleton for each <code>HeroEditComponent</code>, scoped to that component instance and its child components.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/hierarchical-dependency-injection.html</a>\n  </p>\n</div>\n","guide/forms":"<h1 class=\"hero-title text-display-1 \">Forms</h1>\n\n<div class=\"banner\"><p class=\"text-body\">A form creates a cohesive, effective, and compelling data entry experience. An Angular form coordinates a set of data-bound user controls, tracks changes, validates input, and presents errors.</p></div>\n<p>We’ve all used a form to log in, submit a help request, place an order, book a flight, schedule a meeting and perform countless other data entry tasks. Forms are the mainstay of business applications.</p> <p>Any seasoned web developer can slap together an HTML form with all the right tags. It's more challenging to create a cohesive data entry experience that guides the user efficiently and effectively through the workflow behind the form.</p> <p><em>That</em> takes design skills that are, to be frank, well out of scope for this chapter.</p> <p>It also takes framework support for <strong>two-way data binding, change tracking, validation, and error handling</strong> ... which we shall cover in this chapter on Angular forms.</p> <p>We will build a simple form from scratch, one step at a time. Along the way we'll learn how to</p> <ul> <li>\n<p>build an Angular form with a component and template</p> </li> <li>\n<p>two-way data bind with <code>[(ngModel)]</code> syntax for reading and writing values to input controls</p> </li> <li>\n<p>track the change state and validity of form controls using <code>ngModel</code> in combination with a form </p> </li> <li>\n<p>provide strong visual feedback using special CSS classes that track the state of the controls</p> </li> <li>\n<p>display validation errors to users and enable/disable form controls</p> </li> <li>\n<p>use <a href=\"template-syntax#ref-vars\">template reference variables</a> for sharing information among HTML elements</p> </li> </ul> <p><live-example>Live Example</live-example></p> <h2 id=\"template-driven-forms\">Template-Driven Forms</h2> <p>Many of us will build forms by writing templates in the Angular <a href=\"template-syntax\">template syntax</a> with the form-specific directives and techniques described in this chapter.</p> <div class=\"l-sub-section\">\n<p>That's not the only way to create a form but it's the way we'll cover in this chapter.</p> </div>\n<p>We can build almost any form we need with an Angular template — login forms, contact forms ... pretty much any business forms. We can lay out the controls creatively, bind them to data, specify validation rules and display validation errors, conditionally enable or disable specific controls, trigger built-in visual feedback, and much more.</p> <p>It will be pretty easy because Angular handles many of the repetitive, boiler plate tasks we'd otherwise wrestle with ourselves.</p> <p>We'll discuss and learn to build the following template-driven form:</p> <img src=\"https://angular.io/resources/images/devguide/forms/hero-form-1.png\" width=\"400px\" alt=\"Clean Form\"><p>Here at the <em>Hero Employment Agency</em> we use this form to maintain personal information about the heroes in our stable. Every hero needs a job. It's our company mission to match the right hero with the right crisis!</p> <p>Two of the three fields on this form are required. Required fields have a green bar on the left to make them easy to spot.</p> <p>If we delete the hero name, the form displays a validation error in an attention grabbing style:</p> <img src=\"https://angular.io/resources/images/devguide/forms/hero-form-2.png\" width=\"400px\" alt=\"Invalid, Name Required\"><p>Note that the submit button is disabled and the \"required\" bar to the left of the input control changed from green to red.</p> <div class=\"l-sub-section\"><p>We'll customize the colors and location of the \"required\" bar with standard CSS.</p></div>\n<p>We will build this form in the following sequence of small steps</p> <ol> <li>Create the <code>Hero</code> model class</li> <li>Create the component that controls the form</li> <li>Create a template with the initial form layout</li> <li>Bind data properties to each form input control with the <code>ngModel</code> two-way data binding syntax</li> <li>Add the <code>name</code> attribute to each form input control</li> <li>Add custom CSS to provide visual feedback</li> <li>Show and hide validation error messages</li> <li>Handle form submission with <strong>ngSubmit</strong>\n</li> <li>Disable the form’s submit button until the form is valid</li> </ol> <h2 id=\"setup\">Setup</h2> <p>Create a new project folder (<code>angular2-forms</code>) and follow the steps in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>.</p> <div class=\"l-sub-section\">\n<p>Alternatively, begin with a <a href=\"https://github.com/angular/quickstart/blob/master/README.md\">download of the QuickStart source</a>.</p> </div>\n<h2 id=\"create-the-hero-model-class\">Create the Hero Model Class</h2> <p>As users enter form data, we capture their changes and update an instance of a model. We can't layout the form until we know what the model looks like.</p> <p>A model can be as simple as a \"property bag\" that holds facts about a thing of application importance. That describes well our <code>Hero</code> class with its three required fields (<code>id</code>, <code>name</code>, <code>power</code>) and one optional field (<code>alterEgo</code>).</p> <p>Create a new file in the app folder called <code>hero.ts</code> and give it the following class definition:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero.ts\">// app/hero.ts\n\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n</pre>\n<p>It's an anemic model with few requirements and no behavior. Perfect for our demo.</p> <p>The TypeScript compiler generates a public field for each <code>public</code> constructor parameter and assigns the parameter’s value to that field automatically when we create new heroes.</p> <p>The <code>alterEgo</code> is optional and the constructor lets us omit it; note the (?) in <code>alterEgo?</code>.</p> <p>We can create a new hero like this:</p> <pre format=\"\">let myHero =  new Hero(42, 'SkyDog', \n                       'Fetch any object at any distance', \n                       'Leslie Rollover');\nconsole.log('My hero is called ' + myHero.name); // \"My hero is called SkyDog\"</pre>\n<h2 id=\"create-a-form-component\">Create a Form component</h2> <p>An Angular form has two parts: an HTML-based template and a code-based Component to handle data and user interactions.</p> <p>We begin with the Component because it states, in brief, what the Hero editor can do.</p> <p>Create a new file called <code>hero-form.component.ts</code> and give it the following definition:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-form.component.ts\">// app/hero-form.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { Hero }    from './hero';\n\n@Component({\n  selector: 'hero-form',\n  templateUrl: 'app/hero-form.component.html'\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  // TODO: Remove this when we're done\n  get diagnostic() { return JSON.stringify(this.model); }\n}\n</pre>\n<p>There’s nothing special about this component, nothing form-specific, nothing to distinguish it from any component we've written before.</p> <p>Understanding this component requires only the Angular concepts we’ve learned in previous chapters</p> <ol> <li>\n<p>We import the <code>Component</code> decorator from the Angular library as we usually do.</p> </li> <li>\n<p>We import the <code>Hero</code> model we just created.</p> </li> <li>\n<p>The <code>@Component</code> selector value of \"hero-form\" means we can drop this form in a parent template with a <code>&lt;hero-form&gt;</code> tag.</p> </li> <li>\n<p>The <code>templateUrl</code> property points to a separate file for the template HTML called <code>hero-form.component.html</code>.</p> </li> <li>\n<p>We defined dummy data for <code>model</code> and <code>powers</code> as befits a demo. Down the road, we can inject a data service to get and save real data or perhaps expose these properties as <a href=\"template-syntax#inputs-outputs\">inputs and outputs</a> for binding to a parent component. None of this concerns us now and these future changes won't affect our form.</p> </li> <li>\n<p>We threw in a <code>diagnostic</code> property at the end to return a JSON representation of our model. It'll help us see what we're doing during our development; we've left ourselves a cleanup note to discard it later.</p> </li> </ol> <p>Why don't we write the template inline in the component file as we often do elsewhere in the Developer Guide?</p> <p>There is no “right” answer for all occasions. We like inline templates when they are short. Most form templates won't be short. TypeScript and JavaScript files generally aren't the best place to write (or read) large stretches of HTML and few editors are much help with files that have a mix of HTML and code. We also like short files with a clear and obvious purpose like this one.</p> <p>We made a good choice to put the HTML template elsewhere. We'll write that template in a moment. Before we do, we'll take a step back and revise the <code>app.module.ts</code> and <code>app.component.ts</code> to make use of our new <code>HeroFormComponent</code>.</p> <h2 id=\"revise-the-app-module-ts-\">Revise the <em>app.module.ts</em>\n</h2> <p><code>app.module.ts</code> defines the application's root module. In it we identify the external modules we'll use in our application and declare the components that belong to this module, such as our <code>HeroFormComponent</code>.</p> <p>Because template-driven forms are in their own module, we need to add the <code>FormsModule</code> to the array of <code>imports</code> for our application module before we can use forms.</p> <p>Replace the contents of the \"QuickStart\" version with the following:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<div class=\"l-sub-section\">\n<p>There are three changes:</p> <ol> <li>\n<p>We import <code>FormsModule</code> and our new <code>HeroFormComponent</code>.</p> </li> <li>\n<p>We add the <code>FormsModule</code> to the list of <code>imports</code> defined in the <code>ngModule</code> decorator. This gives our application access to all of the template-driven forms features, including <code>ngModel</code>.</p> </li> <li>\n<p>We add the <code>HeroFormComponent</code> to the list of <code>declarations</code> defined in the <code>ngModule</code> decorator. This makes the <code>HeroFormComponent</code> component visible throughout this module.</p> </li> </ol> </div>\n<div class=\"alert is-important\">\n<p>If a component, directive, or pipe belongs to a module in the <code>imports</code> array, ​<em>DON'T</em>​ declare it in the <code>declarations</code> array. If you wrote it and it should belong to this module, ​<em>DO</em>​ declare it in the <code>declarations</code> array.</p> </div>\n<h2 id=\"revise-the-app-component-ts-\">Revise the <em>app.component.ts</em>\n</h2> <p><code>app.component.ts</code> is the application's root component. It will host our new <code>HeroFormComponent</code>.</p> <p>Replace the contents of the \"QuickStart\" version with the following:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&lt;hero-form&gt;&lt;/hero-form&gt;'\n})\nexport class AppComponent { }\n</pre>\n<div class=\"l-sub-section\">\n<p>There is only one changes:</p> <ol> <li>The <code>template</code> is simply the new element tag identified by the component's <code>selector</code> property. This will display the hero form when the application component is loaded.</li> </ol> </div>\n<h2 id=\"create-an-initial-html-form-template\">Create an initial HTML Form Template</h2> <p>Create a new template file called <code>hero-form.component.html</code> and give it the following definition:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-form.component.html\">&lt;!-- app/hero-form.component.html --&gt;\n\n&lt;div class=\"container\"&gt;\n    &lt;h1&gt;Hero Form&lt;/h1&gt;\n    &lt;form&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\" required&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-default\"&gt;Submit&lt;/button&gt;\n\n    &lt;/form&gt;\n&lt;/div&gt;\n</pre>\n<p>That is plain old HTML 5. We're presenting two of the <code>Hero</code> fields, <code>name</code> and <code>alterEgo</code>, and opening them up for user input in input boxes.</p> <p>The <em>Name</em> <code>&lt;input&gt;</code> control has the HTML5 <code>required</code> attribute; the <em>Alter Ego</em> <code>&lt;input&gt;</code> control does not because <code>alterEgo</code> is optional.</p> <p>We've got a <em>Submit</em> button at the bottom with some classes on it for styling.</p> <p><strong>We are not using Angular yet</strong>. There are no bindings. No extra directives. Just layout.</p> <p>The <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes come from <a href=\"http://getbootstrap.com/css/\">Twitter Bootstrap</a>. Purely cosmetic. We're using Bootstrap to gussy up our form. Hey, what's a form without a little style!</p> <div class=\"callout is-important\">\n<header>Angular Forms Do Not Require A Style Library</header><p>Angular makes no use of the <code>container</code>, <code>form-group</code>, <code>form-control</code>, and <code>btn</code> classes or the styles of any external library. Angular apps can use any CSS library ... or none at all.</p> </div>\n<p>Let's add the stylesheet.</p> <ol>\n<li>Open a terminal window in the application root folder and enter the command:<pre language=\"html\" escape=\"html\" data-language=\"html\">npm install bootstrap --save</pre>\n</li>\n<li>Open <code>index.html</code> and add the following link to the <code>&lt;head&gt;</code>.<pre language=\"html\" format=\"\" data-language=\"html\">&lt;link rel=\"stylesheet\" \n      href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\"&gt;\n</pre>\n</li>\n</ol>\n<h2 id=\"add-powers-with-ngfor-\">Add Powers with <strong>*ngFor</strong>\n</h2> <p>Our hero may choose one super power from a fixed list of Agency-approved powers. We maintain that list internally (in <code>HeroFormComponent</code>).</p> <p>We'll add a <code>select</code> to our form and bind the options to the <code>powers</code> list using <code>ngFor</code>, a technique we might have seen before in the <a href=\"displaying-data\">Displaying Data</a> chapter.</p> <p>Add the following HTML <em>immediately below</em> the <em>Alter Ego</em> group.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\" id=\"power\" required&gt;\n    &lt;option *ngFor=\"let p of powers\" [value]=\"p\"&gt;{{p}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n</pre>\n<p>We are repeating the <code>&lt;options&gt;</code> tag for each power in the list of Powers. The <code>p</code> template input variable is a different power in each iteration; we display its name using the interpolation syntax with the double-curly-braces.</p> <h2 id=\"ngModel\">Two-way data binding with <strong>ngModel</strong>\n</h2> <p>Running the app right now would be disappointing.</p> <img src=\"https://angular.io/resources/images/devguide/forms/hero-form-3.png\" width=\"400px\" alt=\"Early form with no binding\"><p>We don't see hero data because we are not binding to the <code>Hero</code> yet. We know how to do that from earlier chapters. <a href=\"displaying-data\">Displaying Data</a> taught us Property Binding. <a href=\"user-input\">User Input</a> showed us how to listen for DOM events with an Event Binding and how to update a component property with the displayed value.</p> <p>Now we need to display, listen, and extract at the same time.</p> <p>We could use those techniques again in our form. Instead we'll introduce something new, the <code>[(ngModel)]</code> syntax, that makes binding our form to the model super-easy.</p> <p>Find the <code>&lt;input&gt;</code> tag for the \"Name\" and update it like this</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;input type=\"text\"  class=\"form-control\" id=\"name\"\n       required\n       [(ngModel)]=\"model.name\" name=\"name\"&gt;\n  TODO: remove this: {{model.name}}\n</pre>\n<div class=\"l-sub-section\">\n<p>We appended a diagnostic interpolation after the input tag so we can see what we're doing. We left ourselves a note to throw it away when we're done.</p> </div>\n<p>Focus on the binding syntax: <code>[(ngModel)]=\"...\"</code>.</p> <p>If we ran the app right now and started typing in the <em>Name</em> input box, adding and deleting characters, we'd see them appearing and disappearing from the interpolated text. At some point it might look like this.</p> <img src=\"https://angular.io/resources/images/devguide/forms/ng-model-in-action.png\" width=\"400px\" alt=\"ngModel in action\"><p>The diagnostic is evidence that we really are flowing values from the input box to the model and back again. <strong>That's two-way data binding!</strong></p> <p>Notice that we also added a <code>name</code> attribute to our <code>&lt;input&gt;</code> tag and set it to \"name\" which makes sense for the hero's name. Any unique value will do, but using a descriptive name is helpful. Defining a <code>name</code> attribute is a requirement when using <code>[(ngModel)]</code> in combination with a form.</p> <div class=\"l-sub-section\">\n<p>Internally Angular creates <code>FormControls</code> and registers them with an <code>NgForm</code> directive that Angular attached to the <code>&lt;form&gt;</code> tag. Each <code>FormControl</code> is registered under the name we assigned to the <code>name</code> attribute. We'll talk about <code>NgForm</code> <a href=\"#ngForm\">later in this chapter</a>.</p> </div>\n<p>Let's add similar <code>[(ngModel)]</code> bindings and <code>name</code> attributes to <em>Alter Ego</em> and <em>Hero Power</em>. We'll ditch the input box binding message and add a new binding at the top to the component's <code>diagnostic</code> property. Then we can confirm that two-way data binding works <em>for the entire Hero model</em>.</p> <p>After revision the core of our form should have three <code>[(ngModel)]</code> bindings and <code>name</code> attributes that look much like this:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n{{diagnostic}}\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n  &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n         required\n         [(ngModel)]=\"model.name\" name=\"name\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n  &lt;input type=\"text\"  class=\"form-control\" id=\"alterEgo\"\n         [(ngModel)]=\"model.alterEgo\" name=\"alterEgo\"&gt;\n&lt;/div&gt;\n\n&lt;div class=\"form-group\"&gt;\n  &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n  &lt;select class=\"form-control\"  id=\"power\"\n          required\n          [(ngModel)]=\"model.power\" name=\"power\"&gt;\n    &lt;option *ngFor=\"let p of powers\" [value]=\"p\"&gt;{{p}}&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n</pre>\n<div class=\"l-sub-section\">\n<ul> <li>Each input element has an <code>id</code> property that is used by the <code>label</code> element's <code>for</code> attribute to match the label to it's input control.</li> <li>Each input element has a <code>name</code> property that is required by Angular Forms to register the control with the form.</li> </ul> </div>\n<p>If we ran the app right now and changed every Hero model property, the form might display like this:</p> <img src=\"https://angular.io/resources/images/devguide/forms/ng-model-in-action-2.png\" width=\"400px\" alt=\"ngModel in super action\"><p>The diagnostic near the top of the form confirms that all of our changes are reflected in the model.</p> <p><strong>Delete</strong> the <code>{{diagnostic}}</code> binding at the top as it has served its purpose.</p> <div class=\"l-sub-section\">\n<h3 id=\"inside-ngmodel-\">Inside [(ngModel)]</h3> <p><em>This section is an optional deep dive into [(ngModel)]. Not interested? Skip ahead!</em></p> <p>The punctuation in the binding syntax, <span style=\"font-family:courier\"><b>[()]</b></span>, is a good clue to what's going on.</p> <p>In a Property Binding, a value flows from the model to a target property on screen. We identify that target property by surrounding its name in brackets, <span style=\"font-family:courier\"><b>[]</b></span>. This is a one-way data binding <strong>from the model to the view</strong>.</p> <p>In an Event Binding, we flow the value from the target property on screen to the model. We identify that target property by surrounding its name in parentheses, <span style=\"font-family:courier\"><b>()</b></span>. This is a one-way data binding in the opposite direction <strong>from the view to the model</strong>.</p> <p>No wonder Angular chose to combine the punctuation as <span style=\"font-family:courier\"><b>[()]</b></span> to signify a two-way data binding and a <strong>flow of data in both directions</strong>.</p> <p>In fact, we can break the <code>NgModel</code> binding into its two separate modes as we do in this re-write of the \"Name\" <code>&lt;input&gt;</code> binding:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n       required\n       [ngModel]=\"model.name\" name=\"name\"\n       (ngModelChange)=\"model.name = $event\" &gt;\n  TODO: remove this: {{model.name}}\n</pre>\n<p><br>The Property Binding should feel familiar. The Event Binding might seem strange.</p> <p>The <code>ngModelChange</code> is not an <code>&lt;input&gt;</code> element event. It is actually an event property of the <code>NgModel</code> directive. When Angular sees a binding target in the form <span style=\"font-family:courier\">[(x)]</span>, it expects the <code>x</code> directive to have an <code>x</code> input property and an <code>xChange</code> output property.</p> <p>The other oddity is the template expression, <code>model.name = $event</code>. We're used to seeing an <code>$event</code> object coming from a DOM event. The <code>ngModelChange</code> property doesn't produce a DOM event; it's an Angular <code>EventEmitter</code> property that returns the input box value when it fires — which is precisely what we should assign to the model's <code>name</code> property.</p> <p>Nice to know but is it practical? We almost always prefer <code>[(ngModel)]</code>. We might split the binding if we had to do something special in the event handling such as debounce or throttle the key strokes.</p> <p>Learn more about <code>NgModel</code> and other template syntax in the <a href=\"template-syntax\">Template Syntax</a> chapter.</p> </div>\n<h2 id=\"track-change-state-and-validity-with-ngmodel-\">Track change-state and validity with <strong>ngModel</strong>\n</h2> <p>A form isn't just about data binding. We'd also like to know the state of the controls on our form.</p> <p>Using <code>ngModel</code> in a form gives us more than just two way data binding. It also tells us if the user touched the control, if the value changed, or if the value became invalid.</p> <p>The <em>NgModel</em> directive doesn't just track state; it updates the control with special Angular CSS classes that reflect the state. We can leverage those class names to change the appearance of the control and make messages appear or disappear.</p> <table>\n<tr>\n<th>State</th>\n<th>Class if true</th>\n<th>Class if false</th>\n</tr>\n<tr>\n<td>Control has been visited</td>\n<td><code>ng-touched</code></td>\n<td><code>ng-untouched</code></td>\n</tr>\n<tr>\n<td>Control's value has changed</td>\n<td><code>ng-dirty</code></td>\n<td><code>ng-pristine</code></td>\n</tr>\n<tr>\n<td>Control's value is valid</td>\n<td><code>ng-valid</code></td>\n<td><code>ng-invalid</code></td>\n</tr>\n</table>\n<p>Let's add a temporary <a href=\"template-syntax#ref-vars\">template reference variable</a> named <strong>spy</strong> to the \"Name\" <code>&lt;input&gt;</code> tag and use the spy to display those classes.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;input type=\"text\" class=\"form-control\" id=\"name\"\n  required\n  [(ngModel)]=\"model.name\" name=\"name\"\n  #spy &gt;\n&lt;br&gt;TODO: remove this: {{spy.className}}\n</pre>\n<p>Now run the app and focus on the <em>Name</em> input box. Follow the next four steps <em>precisely</em></p> <ol> <li>Look but don't touch</li> <li>Click in the input box, then click outside the text input box</li> <li>Add slashes to the end of the name</li> <li>Erase the name</li> </ol> <p>The actions and effects are as follows:</p> <img src=\"https://angular.io/resources/images/devguide/forms/control-state-transitions-anim.gif\" alt=\"Control State Transition\"><p>We should be able to see the following four sets of class names and their transitions:</p> <img src=\"https://angular.io/resources/images/devguide/forms/ng-control-class-changes.png\" width=\"400px\" alt=\"Control State Transitions\"><p>The (<code>ng-valid</code> | <code>ng-invalid</code>) pair are most interesting to us. We want to send a strong visual signal when the data are invalid and we want to mark required fields. So we add custom CSS for visual feedback.</p> <p><strong>Delete</strong> the <code>#spy</code> template reference variable and <code>TODO</code> as they have served their purpose.</p> <h2 id=\"add-custom-css-for-visual-feedback\">Add Custom CSS for Visual Feedback</h2> <p>We realize we can mark required fields and invalid data at the same time with a colored bar on the left of the input box:</p> <img src=\"https://angular.io/resources/images/devguide/forms/validity-required-indicator.png\" width=\"400px\" alt=\"Invalid Form\"><p>We achieve this effect by adding two styles to a new <code>forms.css</code> file that we add to our project as a sibling to <code>index.html</code>.</p> <pre language=\"css\" format=\"\" data-language=\"css\" name=\"forms.css\">/* forms.css */\n\n.ng-valid[required] {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid {\n  border-left: 5px solid #a94442; /* red */\n}\n</pre>\n<p>These styles select for the two Angular validity classes and the HTML 5 \"required\" attribute.</p> <p>We update the <code>&lt;head&gt;</code> of the <code>index.html</code> to include this style sheet.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (excerpt)\">&lt;!-- index.html (excerpt) --&gt;\n\n&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n&lt;link rel=\"stylesheet\" href=\"forms.css\"&gt;\n</pre>\n<h2 id=\"show-and-hide-validation-error-messages\">Show and Hide Validation Error messages</h2> <p>We can do better.</p> <p>The \"Name\" input box is required. Clearing it turns the bar red. That says <em>something</em> is wrong but we don't know <em>what</em> is wrong or what to do about it. We can leverage the <code>ng-invalid</code> class to reveal a helpful message.</p> <p>Here's the way it should look when the user deletes the name:</p> <img src=\"https://angular.io/resources/images/devguide/forms/name-required-error.png\" width=\"400px\" alt=\"Name required\"><p>To achieve this effect we extend the <code>&lt;input&gt;</code> tag with</p> <ol> <li>a <a href=\"template-syntax#ref-vars\">template reference variable</a>\n</li> <li>the \"<em>is required</em>\" message in a nearby <code>&lt;div&gt;</code> which we'll display only if the control is invalid.</li> </ol> <p>Here's how we do it for the <em>name</em> input box:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(ngModel)]=\"model.name\" name=\"name\"\n               #name=\"ngModel\" &gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\" \n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n</pre>\n<p>We need a template reference variable to access the input box's Angular control from within the template. Here we created a variable called <code>name</code> and gave it the value \"ngModel\".</p> <div class=\"l-sub-section\">\n<p>Why \"ngModel\"? A directive's <a href=\"#\">exportAs</a> property tells Angular how to link the reference variable to the directive. We set <code>name</code> to <code>ngModel</code> because the <code>ngModel</code> directive's <code>exportAs</code> property happens to be \"ngModel\".</p> <p>Now we can control visibility of the \"name\" error message by binding properties of the <code>name</code> control to the message <code>&lt;div&gt;</code> element's <code>hidden</code> property.</p> </div>\n<pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;div [hidden]=\"name.valid || name.pristine\" \n     class=\"alert alert-danger\"&gt;\n</pre>\n<p>In this example, we hide the message when the control is valid or pristine; pristine means the user hasn't changed the value since it was displayed in this form. </p> <p>This user experience is the developer's choice. Some folks want to see the message at all times. If we ignore the <code>pristine</code> state, we would hide the message only when the value is valid. If we arrive in this component with a new (blank) hero or an invalid hero, we'll see the error message immediately, before we've done anything.</p> <p>Some folks find that behavior disconcerting. They only want to see the message when the user makes an invalid change. Hiding the message while the control is \"pristine\" achieves that goal. We'll see the significance of this choice when we <a href=\"#new-hero\">add a new hero</a> to the form.</p> <p>The Hero <em>Alter Ego</em> is optional so we can leave that be.</p> <p>Hero <em>Power</em> selection is required. We can add the same kind of error handling to the <code>&lt;select&gt;</code> if we want but it's not imperative because the selection box already constrains the power to valid value.</p>   <h2 id=\"new-hero\">Add a hero and reset the form</h2> <p>We'd like to add a new hero in this form. We place a \"New Hero\" button at the bottom of the form and bind its click event to a component method.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (New Hero button)\">&lt;!-- app/hero-form.component.html (New Hero button) --&gt;\n\n&lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-form.component.ts (New Hero method - v1)\">// app/hero-form.component.ts (New Hero method - v1)\n\nnewHero() {\n  this.model = new Hero(42, '', '');\n}\n</pre>\n<p>Run the application again, click the <em>New Hero</em> button, and the form clears. The <em>required</em> bars to the left of the input box are red, indicating invalid <code>name</code> and <code>power</code> properties. That's understandable as these are required fields. The error messages are hidden because the form is pristine; we haven't changed anything yet.</p> <p>Enter a name and click <em>New Hero</em> again. This time we see an error message! Why? We don't want that when we display a new (empty) hero.</p> <p>Inspecting the element in the browser tools reveals that the <em>name</em> input box is no longer pristine. Replacing the hero <em>did not restore the pristine state</em> of the control.</p> <div class=\"l-sub-section\">\n<p>Upon reflection, we realize that Angular cannot distinguish between replacing the entire hero and clearing the <code>name</code> property programmatically. Angular makes no assumptions and leaves the control in its current, dirty state.</p> </div>\n<p>We'll have to reset the form controls manually with a small trick. We add an <code>active</code> flag to the component, initialized to <code>true</code>. When we add a new hero, we toggle <code>active</code> false and then immediately back to true with a quick <code>setTimeout</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-form.component.ts (New Hero method - final)\">// app/hero-form.component.ts (New Hero method - final)\n\n  active = true;\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n    this.active = false;\n    setTimeout(() =&gt; this.active = true, 0);\n  }\n</pre>\n<p>Then we bind the form element to this <code>active</code> flag.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (Form tag)\">&lt;!-- app/hero-form.component.html (Form tag) --&gt;\n\n&lt;form *ngIf=\"active\"&gt;\n</pre>\n<p>With <code>NgIf</code> bound to the <code>active</code> flag, clicking \"New Hero\" removes the form from the DOM and recreates it in a blink of an eye. The re-created form is in a pristine state. The error message is hidden.</p> <div class=\"l-sub-section\">\n<p>This is a temporary workaround while we await a proper form reset feature.</p> </div>\n<h2 id=\"submit-the-form-with-ngsubmit-\">Submit the form with <strong>ngSubmit</strong>\n</h2> <p>The user should be able to submit this form after filling it in. The Submit button at the bottom of the form does nothing on its own but it will trigger a form submit because of its type (<code>type=\"submit\"</code>).</p> <p>A \"form submit\" is useless at the moment. To make it useful, we'll update the <code>&lt;form&gt;</code> tag with another Angular directive, <code>NgSubmit</code>, and bind it to the <code>HeroFormComponent.submit()</code> method with an event binding</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;form *ngIf=\"active\" (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\"&gt;\n</pre>\n<p>We slipped in something extra there at the end! We defined a template reference variable, <strong><code>#heroForm</code></strong>, and initialized it with the value, \"ngForm\".</p> <p>The variable <code>heroForm</code> is now a reference to the <code>NgForm</code> directive that governs the form as a whole.</p> <div class=\"l-sub-section\" id=\"ngForm\">\n<h3 id=\"the-ngform-directive\">The NgForm directive</h3> <p>What <code>NgForm</code> directive? We didn't add an <a href=\"../api/common/index/ngform-directive\">NgForm</a> directive!</p> <p>Angular did. Angular creates and attaches an <code>NgForm</code> directive to the <code>&lt;form&gt;</code> tag automatically.</p> <p>The <code>NgForm</code> directive supplements the <code>form</code> element with additional features. It holds the controls we created for the elements with <code>ngModel</code> directive and <code>name</code> attribute and monitors their properties including their validity. It also has its own <code>valid</code> property which is true only <em>if every contained control</em> is valid.</p> </div>\n<p>Later in the template we bind the button's <code>disabled</code> property to the form's over-all validity via the <code>heroForm</code> variable. Here's that bit of markup:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button type=\"submit\" class=\"btn btn-default\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n</pre>\n<p>Re-run the application. The form opens in a valid state and the button is enabled.</p> <p>Now delete the <em>Name</em>. We violate the \"name required\" rule which is duly noted in our error message as before. And now the Submit button is also disabled.</p> <p>Not impressed? Think about it for a moment. What would we have to do to wire the button's enable/disabled state to the form's validity without Angular's help?</p> <p>For us, it was as simple as</p> <ol> <li>Define a template reference variable on the (enhanced) form element</li> <li>Reference that variable in a button some 50 lines away.</li> </ol> <h2 id=\"toggle-two-form-regions-extra-credit-\">Toggle two form regions (extra credit)</h2> <p>Submitting the form isn't terribly dramatic at the moment.</p> <div class=\"l-sub-section\">\n<p>An unsurprising observation for a demo. To be honest, jazzing it up won't teach us anything new about forms. But this is an opportunity to exercise some of our newly won binding skills. If you're not interested, you can skip to the chapter's conclusion and not miss a thing.</p> </div>\n<p>Let's do something more strikingly visual. Let's hide the data entry area and display something else.</p> <p>Start by wrapping the form in a <code>&lt;div&gt;</code> and bind its <code>hidden</code> property to the <code>HeroFormComponent.submitted</code> property.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n  &lt;div  [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero Form&lt;/h1&gt;\n    &lt;form *ngIf=\"active\" (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\"&gt;\n\n       &lt;!-- ... all of the form ... --&gt;\n\n    &lt;/form&gt;\n  &lt;/div&gt;\n</pre>\n<p>The main form is visible from the start because the the <code>submitted</code> property is false until we submit the form, as this fragment from the <code>HeroFormComponent</code> reminds us:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">submitted = false;\n\nonSubmit() { this.submitted = true; }\n</pre>\n<p>When we click the Submit button, the <code>submitted</code> flag becomes true and the form disappears as planned.</p> <p>Now we need to show something else while the form is in the submitted state. Add the following block of HTML below the <code>&lt;div&gt;</code> wrapper we just wrote:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-form.component.html (excerpt)\">&lt;!-- app/hero-form.component.html (excerpt) --&gt;\n\n&lt;div [hidden]=\"!submitted\"&gt;\n  &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n    &lt;div class=\"col-xs-9  pull-left\"&gt;{{ model.name }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n    &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"row\"&gt;\n    &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n    &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.power }}&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button class=\"btn btn-default\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n&lt;/div&gt;\n</pre>\n<p>There's our hero again, displayed read-only with interpolation bindings. This slug of HTML only appears while the component is in the submitted state.</p> <p>We added an Edit button whose click event is bound to an expression that clears the <code>submitted</code> flag.</p> <p>When we click it, this block disappears and the editable form reappears.</p> <p>That's as much drama as we can muster for now.</p> <h2 id=\"conclusion\">Conclusion</h2> <p>The Angular form techniques discussed in this chapter take advantage of the following framework features to provide support for data modification, validation and more:</p> <ul> <li>An Angular HTML form template.</li> <li>A form component class with a <code>Component</code> decorator.</li> <li>The <code>ngSubmit</code> directive for handling the form submission.</li> <li>Template reference variables such as <code>#heroForm</code>, <code>#name</code> and <code>#power</code>.</li> <li>The <code>[(ngModel)]</code> syntax and a <code>name</code> attribute for two-way data binding, validation and change tracking. </li> <li>The reference variable’s <code>valid</code> property on input controls to check if a control is valid and show/hide error messages.</li> <li>Controlling the submit button's enabled state by binding to <code>NgForm</code> validity.</li> <li>Custom CSS classes that provide visual feedback to users about invalid controls.</li> </ul> <p>Our final project folder structure should look like this:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-forms</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-form.component.html</div>\n<div class=\"file\">hero-form.component.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ... </div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<p>Here’s the final version of the source:</p> <pre language=\"ts\" name=\"hero-form.component.ts\" format=\"linenums\" data-language=\"typescript\">// hero-form.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { Hero }    from './hero';\n\n@Component({\n  selector: 'hero-form',\n  templateUrl: 'app/hero-form.component.html'\n})\nexport class HeroFormComponent {\n\n  powers = ['Really Smart', 'Super Flexible',\n            'Super Hot', 'Weather Changer'];\n\n  model = new Hero(18, 'Dr IQ', this.powers[0], 'Chuck Overstreet');\n\n  submitted = false;\n\n  onSubmit() { this.submitted = true; }\n\n  // Reset the form with a new hero AND restore 'pristine' class state\n  // by toggling 'active' flag which causes the form\n  // to be removed/re-added in a tick via NgIf\n  // TODO: Workaround until NgForm has a reset method (#6822)\n  active = true;\n\n  newHero() {\n    this.model = new Hero(42, '', '');\n    this.active = false;\n    setTimeout(() =&gt; this.active = true, 0);\n  }\n}\n</pre>\n<pre language=\"html\" name=\"hero-form.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- hero-form.component.html --&gt;\n\n&lt;div class=\"container\"&gt;\n  &lt;div  [hidden]=\"submitted\"&gt;\n    &lt;h1&gt;Hero Form&lt;/h1&gt;\n    &lt;form *ngIf=\"active\" (ngSubmit)=\"onSubmit()\" #heroForm=\"ngForm\"&gt;\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"name\"\n               required\n               [(ngModel)]=\"model.name\" name=\"name\"\n               #name=\"ngModel\" &gt;\n        &lt;div [hidden]=\"name.valid || name.pristine\" \n             class=\"alert alert-danger\"&gt;\n          Name is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"alterEgo\"&gt;Alter Ego&lt;/label&gt;\n        &lt;input type=\"text\" class=\"form-control\" id=\"alterEgo\"\n               [(ngModel)]=\"model.alterEgo\" name=\"alterEgo\" &gt;\n      &lt;/div&gt;\n\n      &lt;div class=\"form-group\"&gt;\n        &lt;label for=\"power\"&gt;Hero Power&lt;/label&gt;\n        &lt;select class=\"form-control\" id=\"power\"\n                required\n                [(ngModel)]=\"model.power\" name=\"power\" \n                #power=\"ngModel\" &gt;\n          &lt;option *ngFor=\"let p of powers\" [value]=\"p\"&gt;{{p}}&lt;/option&gt;\n        &lt;/select&gt;\n        &lt;div [hidden]=\"power.valid || power.pristine\" class=\"alert alert-danger\"&gt;\n          Power is required\n        &lt;/div&gt;\n      &lt;/div&gt;\n\n      &lt;button type=\"submit\" class=\"btn btn-default\" [disabled]=\"!heroForm.form.valid\"&gt;Submit&lt;/button&gt;\n\n      &lt;button type=\"button\" class=\"btn btn-default\" (click)=\"newHero()\"&gt;New Hero&lt;/button&gt;\n\n    &lt;/form&gt;\n  &lt;/div&gt;\n\n  &lt;div [hidden]=\"!submitted\"&gt;\n    &lt;h2&gt;You submitted the following:&lt;/h2&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Name&lt;/div&gt;\n      &lt;div class=\"col-xs-9  pull-left\"&gt;{{ model.name }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Alter Ego&lt;/div&gt;\n      &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.alterEgo }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div class=\"row\"&gt;\n      &lt;div class=\"col-xs-3\"&gt;Power&lt;/div&gt;\n      &lt;div class=\"col-xs-9 pull-left\"&gt;{{ model.power }}&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;br&gt;\n    &lt;button class=\"btn btn-default\" (click)=\"submitted=false\"&gt;Edit&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"ts\" name=\"hero.ts\" format=\"linenums\" data-language=\"typescript\">// hero.ts\n\nexport class Hero {\n\n  constructor(\n    public id: number,\n    public name: string,\n    public power: string,\n    public alterEgo?: string\n  ) {  }\n\n}\n</pre>\n<pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule }   from '@angular/forms';\n\nimport { AppComponent }  from './app.component';\nimport { HeroFormComponent } from './hero-form.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroFormComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&lt;hero-form&gt;&lt;/hero-form&gt;'\n})\nexport class AppComponent { }\n</pre>\n<pre language=\"ts\" name=\"main.ts\" format=\"linenums\" data-language=\"typescript\">// main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\n// Compiles the module (asynchronously) with the runtime compiler\n// which generates a compiled module factory in memory.\n// Then bootstraps with that factory, targeting the browser.\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<pre language=\"html\" name=\"index.html\" format=\"linenums\" data-language=\"html\">&lt;!-- index.html --&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Hero Form&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n\n    &lt;link rel=\"stylesheet\" \n          href=\"node_modules/bootstrap/dist/css/bootstrap.min.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"forms.css\"&gt;\n\n    &lt;!-- Polyfill(s) for older browsers --&gt;\n    &lt;script src=\"node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"systemjs.config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      System.import('app').catch(function(err){ console.error(err); });\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;my-app&gt;Loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<pre language=\"css\" name=\"forms.css\" format=\"linenums\" data-language=\"css\">/* forms.css */\n\n.ng-valid[required] {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid {\n  border-left: 5px solid #a94442; /* red */\n}\n</pre>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"dependency-injection\">Dependency Injection</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/forms.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/forms.html</a>\n  </p>\n</div>\n","guide/dependency-injection":"<h1 class=\"hero-title text-display-1 \">Dependency Injection</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Angular's dependency injection system creates and delivers dependent services \"just-in-time\".</p></div>\n<p><strong>Dependency injection</strong> is an important application design pattern. Angular has its own dependency injection framework, and we really can't build an Angular application without it. It's used so widely that almost everyone just calls it <em>DI</em>.</p> <p>In this chapter we'll learn what DI is and why we want it. Then we'll learn <a href=\"#angular-di\">how to use it</a> in an Angular app.</p> <ul> <li><a href=\"#why-dependency-injection\">Why dependency injection?</a></li> <li><a href=\"#angular-dependency-injection\">Angular dependency injection</a></li> <li><a href=\"#injector-providers\">Injector providers</a></li> <li><a href=\"#dependency-injection-tokens\">Dependency injection tokens</a></li> <li><a href=\"#summary\">Summary</a></li> </ul> <p>Run the <live-example></live-example>.</p> <h2 id=\"why-dependency-injection-\">Why dependency injection?</h2> <p>Let's start with the following code.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/car/car.ts (without DI)\">// app/car/car.ts (without DI)\n\nexport class Car {\n\n  public engine: Engine;\n  public tires: Tires;\n  public description = 'No DI';\n\n  constructor() {\n    this.engine = new Engine();\n    this.tires = new Tires();\n  }\n\n  // Method using the engine and tires\n  drive() {\n    return `${this.description} car with ` +\n      `${this.engine.cylinders} cylinders and ${this.tires.make} tires.`;\n  }\n}\n</pre>\n<p>Our <code>Car</code> creates everything it needs inside its constructor. What's the problem? The problem is that our <code>Car</code> class is brittle, inflexible, and hard to test.</p> <p>Our <code>Car</code> needs an engine and tires. Instead of asking for them, the <code>Car</code> constructor instantiates its own copies from the very specific classes <code>Engine</code> and <code>Tires</code>.</p> <p>What if the <code>Engine</code> class evolves and its constructor requires a parameter? Our <code>Car</code> is broken and stays broken until we rewrite it along the lines of <code>this.engine = new Engine(theNewParameter)</code>. We didn't care about <code>Engine</code> constructor parameters when we first wrote <code>Car</code>. We don't really care about them now. But we'll <em>have</em> to start caring because when the definition of <code>Engine</code> changes, our <code>Car</code> class must change. That makes <code>Car</code> brittle.</p> <p>What if we want to put a different brand of tires on our <code>Car</code>? Too bad. We're locked into whatever brand the <code>Tires</code> class creates. That makes our <code>Car</code> inflexible.</p> <p>Right now each new car gets its own engine. It can't share an engine with other cars. While that makes sense for an automobile engine, we can think of other dependencies that should be shared, such as the onboard wireless connection to the manufacturer's service center. Our <code>Car</code> lacks the flexibility to share services that have been created previously for other consumers.</p> <p>When we write tests for our <code>Car</code> we're at the mercy of its hidden dependencies. Is it even possible to create a new <code>Engine</code> in a test environment? What does <code>Engine</code>itself depend upon? What does that dependency depend on? Will a new instance of <code>Engine</code> make an asynchronous call to the server? We certainly don't want that going on during our tests.</p> <p>What if our <code>Car</code> should flash a warning signal when tire pressure is low? How do we confirm that it actually does flash a warning if we can't swap in low-pressure tires during the test?</p> <p>We have no control over the car's hidden dependencies. When we can't control the dependencies, a class becomes difficult to test.</p> <p>How can we make <code>Car</code> more robust, flexible, and testable?</p> <p> That's super easy. We change our <code id=\"ctor-injection\">Car</code> constructor to a version with DI:</p> <pre language=\"ts\" name=\"app/car/car.ts (excerpt with DI)\" format=\".\" data-language=\"typescript\">// app/car/car.ts (excerpt with DI)\n\npublic description = 'DI';\n\nconstructor(public engine: Engine, public tires: Tires) { }\n</pre>\n<pre language=\"ts\" name=\"app/car/car.ts (excerpt without DI)\" format=\".\" data-language=\"typescript\">// app/car/car.ts (excerpt without DI)\n\npublic engine: Engine;\npublic tires: Tires;\npublic description = 'No DI';\n\nconstructor() {\n  this.engine = new Engine();\n  this.tires = new Tires();\n}\n</pre>\n<p>See what happened? We moved the definition of the dependencies to the constructor. Our <code>Car</code> class no longer creates an engine or tires. It just consumes them.</p> <div class=\"l-sub-section\">\n<p>We also leveraged TypeScript's constructor syntax for declaring parameters and properties simultaneously.</p> </div>\n<p>Now we create a car by passing the engine and tires to the constructor.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// Simple car with 4 cylinders and Flintstone tires.\nlet car = new Car(new Engine(), new Tires());\n</pre>\n<p>How cool is that? The definition of the engine and tire dependencies are decoupled from the <code>Car</code> class itself. We can pass in any kind of engine or tires we like, as long as they conform to the general API requirements of an engine or tires.</p> <p>If someone extends the <code>Engine</code> class, that is not <code>Car</code>'s problem.</p> <div class=\"l-sub-section\">\n<p>The <em>consumer</em> of <code>Car</code> has the problem. The consumer must update the car creation code to something like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">class Engine2 {\n  constructor(public cylinders: number) { }\n}\n// Super car with 12 cylinders and Flintstone tires.\nlet bigCylinders = 12;\nlet car = <span class=\"otl\">new Car(new Engine2(bigCylinders), new Tires());</span>\n</pre>\n<p>The critical point is this: <code>Car</code> itself did not have to change. We'll take care of the consumer's problem soon enough.</p> </div>\n<p>The <code>Car</code> class is much easier to test because we are in complete control of its dependencies. We can pass mocks to the constructor that do exactly what we want them to do during each test:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">class MockEngine extends Engine { cylinders = 8; }\nclass MockTires  extends Tires  { make = 'YokoGoodStone'; }\n\n// Test car with 8 cylinders and YokoGoodStone tires.\nlet car = <span class=\"otl\">new Car(new MockEngine(), new MockTires());</span>\n</pre>\n<p><strong>We just learned what dependency injection is</strong>.</p> <p>It's a coding pattern in which a class receives its dependencies from external sources rather than creating them itself.</p> <p>Cool! But what about that poor consumer? Anyone who wants a <code>Car</code> must now create all three parts: the <code>Car</code>, <code>Engine</code>, and <code>Tires</code>. The <code>Car</code> class shed its problems at the consumer's expense. We need something that takes care of assembling these parts for us.</p> <p>We could write a giant class to do that:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/car/car-factory.ts\">// app/car/car-factory.ts\n\nimport { Engine, Tires, Car } from './car';\n\n// BAD pattern!\nexport class CarFactory {\n  createCar() {\n    let car = new Car(this.createEngine(), this.createTires());\n    car.description = 'Factory';\n    return car;\n  }\n\n  createEngine() {\n    return new Engine();\n  }\n\n  createTires() {\n    return new Tires();\n  }\n}\n</pre>\n<p>It's not so bad now with only three creation methods. But maintaining it will be hairy as the application grows. This factory is going to become a huge spiderweb of interdependent factory methods!</p> <p>Wouldn't it be nice if we could simply list the things we want to build without having to define which dependency gets injected into what?</p> <p>This is where the dependency injection framework comes into play. Imagine the framework had something called an <em>injector</em>. We register some classes with this injector, and it figures out how to create them.</p> <p>When we need a <code>Car</code>, we simply ask the injector to get it for us and we're good to go.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">let car = injector.get(Car);\n</pre>\n<p>Everyone wins. The <code>Car</code> knows nothing about creating an <code>Engine</code> or <code>Tires</code>. The consumer knows nothing about creating a <code>Car</code>. We don't have a gigantic factory class to maintain. Both <code>Car</code> and consumer simply ask for what they need and the injector delivers.</p> <p>This is what a <strong>dependency injection framework</strong> is all about.</p> <p>Now that we know what dependency injection is and appreciate its benefits, let's see how it is implemented in Angular.</p> <h2 id=\"angular-dependency-injection\">Angular dependency injection</h2> <p>Angular ships with its own dependency injection framework. This framework can also be used as a standalone module by other applications and frameworks.</p> <p>That sounds nice. What does it do for us when building components in Angular? Let's see, one step at a time.</p> <p>We'll begin with a simplified version of the <code>HeroesComponent</code> that we built in the <a href=\"../tutorial/index\">The Tour of Heroes</a>.</p> <pre language=\"ts\" name=\"app/heroes/heroes.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/heroes/heroes.component.ts\n\nimport { Component }          from '@angular/core';\n\n@Component({\n  selector: 'my-heroes',\n  template: `\n  &lt;h2&gt;Heroes&lt;/h2&gt;\n  &lt;hero-list&gt;&lt;/hero-list&gt;\n  `\n})\nexport class HeroesComponent { }\n</pre>\n<pre language=\"ts\" name=\"app/heroes/hero-list.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero-list.component.ts\n\nimport { Component }   from '@angular/core';\n\nimport { HEROES }      from './mock-heroes';\n\n@Component({\n  selector: 'hero-list',\n  template: `\n  &lt;div *ngFor=\"let hero of heroes\"&gt;\n    {{hero.id}} - {{hero.name}}\n  &lt;/div&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes = HEROES;\n}\n</pre>\n<pre language=\"ts\" name=\"app/heroes/hero.ts\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero.ts\n\nexport class Hero {\n  id: number;\n  name: string;\n  isSecret = false;\n}\n</pre>\n<pre language=\"ts\" name=\"app/heroes/mock-heroes.ts\" format=\"linenums\" data-language=\"typescript\">// app/heroes/mock-heroes.ts\n\nimport { Hero } from './hero';\n\nexport var HEROES: Hero[] = [\n  { id: 11, isSecret: false, name: 'Mr. Nice' },\n  { id: 12, isSecret: false, name: 'Narco' },\n  { id: 13, isSecret: false, name: 'Bombasto' },\n  { id: 14, isSecret: false, name: 'Celeritas' },\n  { id: 15, isSecret: false, name: 'Magneta' },\n  { id: 16, isSecret: false, name: 'RubberMan' },\n  { id: 17, isSecret: false, name: 'Dynama' },\n  { id: 18, isSecret: true,  name: 'Dr IQ' },\n  { id: 19, isSecret: true,  name: 'Magma' },\n  { id: 20, isSecret: true,  name: 'Tornado' }\n];\n</pre>\n<p>The <code>HeroesComponent</code> is the root component of the <em>Heroes</em> feature area. It governs all the child components of this area. Our stripped down version has only one child, <code>HeroListComponent</code>, which displays a list of heroes.</p> <p>Right now <code>HeroListComponent</code> gets heroes from <code>HEROES</code>, an in-memory collection defined in another file. That may suffice in the early stages of development, but it's far from ideal. As soon as we try to test this component or want to get our heroes data from a remote server, we'll have to change the implementation of <code>heroes</code> and fix every other use of the <code>HEROES</code> mock data.</p> <p>Let's make a service that hides how we get hero data.</p> <div class=\"l-sub-section\">\n<p>Given that the service is a <a href=\"https://en.wikipedia.org/wiki/Separation_of_concerns\">separate concern</a>, we suggest that you write the service code in its own file.</p> <p>See <a href=\"#one-class-per-file\">this note</a> for details.</p> </div>\n<pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/heroes/hero.service.ts\">// app/heroes/hero.service.ts\n\nimport { Injectable } from '@angular/core';\n\nimport { HEROES }     from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes() { return HEROES;  }\n}\n</pre>\n<p>Our <code>HeroService</code> exposes a <code>getHeroes</code> method that returns the same mock data as before, but none of its consumers need to know that.</p> <div class=\"l-sub-section\">\n<p>Notice the <code>@Injectable()</code> decorator above the service class. We'll discuss its purpose <a href=\"#injectable\">shortly</a>.</p> </div>\n<div class=\"l-sub-section\">\n<p>We aren't even pretending this is a real service. If we were actually getting data from a remote server, the API would have to be asynchronous, perhaps returning a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>. We'd also have to rewrite the way components consume our service. This is important in general, but not to our current story.</p> </div>\n<p>A service is nothing more than a class in Angular 2. It remains nothing more than a class until we register it with an Angular injector.</p> <h3 id=\"configuring-the-injector\">Configuring the injector</h3> <p>We don't have to create an Angular injector. Angular creates an application-wide injector for us during the bootstrap process.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts (excerpt)\">// app/main.ts (excerpt)\n\nbrowserDynamicPlatform().bootstrapModule(AppModule);\n</pre>\n<p>We do have to configure the injector by registering the <strong>providers</strong> that create the services our application requires. We'll explain what <a href=\"#providers\">providers</a> are later in this chapter.</p> <p>We can either register a provider within an <a href=\"ngmodule\">NgModule</a> or in application components</p> <h3 id=\"registering-providers-in-an-ngmodule\">Registering providers in an NgModule</h3> <p>Here's our AppModule where we register a <code>Logger</code>, an <code>UserService</code>, and an <code>APP_CONFIG</code> provider.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent,\n    CarComponent,\n    HeroesComponent,\n    HeroListComponent,\n    InjectorComponent,\n    TestComponent\n  ],\n  providers: [\n    UserService,\n    { provide: APP_CONFIG, useValue: HERO_DI_CONFIG }\n  ],\n  bootstrap: [ AppComponent, ProvidersComponent ]\n})\nexport class AppModule { }\n</pre>\n<h3 id=\"registering-providers-in-a-component\">Registering providers in a component</h3> <p>Here's a revised <code>HeroesComponent</code> that registers the <code>HeroService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/heroes.component.ts\">// app/heroes/heroes.component.ts\n\nimport { Component }          from '@angular/core';\n\nimport { HeroService }        from './hero.service';\n\n@Component({\n  selector: 'my-heroes',\n  providers: [HeroService],\n  template: `\n  &lt;h2&gt;Heroes&lt;/h2&gt;\n  &lt;hero-list&gt;&lt;/hero-list&gt;\n  `\n})\nexport class HeroesComponent { }\n</pre>\n<h3 id=\"when-to-use-the-ngmodule-and-when-an-application-component-\">When to use the NgModule and when an application component?</h3> <p>On the one hand, a provider in an NgModule is registered in the root injector. That means that every provider registered within an NgModule will be accessible in the entire application.</p> <p>On the other hand, a provider registered in an application component is available only on that component and all its children.</p> <p>We want the <code>APP_CONFIG</code> service to be available all across the application, but a <code>HeroService</code> is only used within the <em>Heroes</em> feature area — and nowhere else. —</p> <div class=\"l-sub-section\">\n<p>Read also <strong>Should I add providers to the root AppModule or the root AppComponent?</strong> at the <a href=\"ngmodule#q-root-component-or-module\">NgModule</a> chapter.</p> </div>\n<h3 id=\"preparing-the-herolistcomponent-for-injection\">Preparing the HeroListComponent for injection</h3> <p>The <code>HeroListComponent</code> should get heroes from the injected <code>HeroService</code>. Per the dependency injection pattern, the component must ask for the service in its constructor, <a href=\"#ctor-injection\">as we explained earlier</a>. It's a small change:</p> <pre language=\"ts\" name=\"app/heroes/hero-list.component (with DI)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero-list.component (with DI)\n\nimport { Component }   from '@angular/core';\n\nimport { Hero }        from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'hero-list',\n  template: `\n  &lt;div *ngFor=\"let hero of heroes\"&gt;\n    {{hero.id}} - {{hero.name}}\n  &lt;/div&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes: Hero[];\n\n  constructor(heroService: HeroService) {\n    this.heroes = heroService.getHeroes();\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app/heroes/hero-list.component (without DI)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero-list.component (without DI)\n\nimport { Component }   from '@angular/core';\n\nimport { HEROES }      from './mock-heroes';\n\n@Component({\n  selector: 'hero-list',\n  template: `\n  &lt;div *ngFor=\"let hero of heroes\"&gt;\n    {{hero.id}} - {{hero.name}}\n  &lt;/div&gt;\n  `\n})\nexport class HeroListComponent {\n  heroes = HEROES;\n}\n</pre>\n<div class=\"l-sub-section\">\n<h4 id=\"focus-on-the-constructor\">Focus on the constructor</h4> <p>Adding a parameter to the constructor isn't all that's happening here.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(heroService: HeroService) {\n  this.heroes = heroService.getHeroes();\n}\n</pre>\n<p>Note that the constructor parameter has the type <code>HeroService</code>, and that the <code>HeroListComponent</code> class has an <code>@Component</code> decorator (scroll up to confirm that fact). Also recall that the parent component (<code>HeroesComponent</code>) has <code>providers</code> information for <code>HeroService</code>.</p> <p>The constructor parameter type, the <code>@Component</code> decorator, and the parent's <code>providers</code> information combine to tell the Angular injector to inject an instance of <code>HeroService</code> whenever it creates a new <code>HeroListComponent</code>.</p> </div>\n<h3 id=\"implicit-injector-creation\">Implicit injector creation</h3> <p>When we introduced the idea of an injector above, we showed how to use it to create a new <code>Car</code>. Here we also show how such an injector would be explicitly created:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  injector = ReflectiveInjector.resolveAndCreate([Car, Engine, Tires]);\n  let car = injector.get(Car);\n</pre>\n<p>We won't find code like that in the Tour of Heroes or any of our other samples. We <em>could</em> write code that <a href=\"#explicit-injector\">explicitly creates an injector</a> if we <em>had</em> to, but we rarely do. Angular takes care of creating and calling injectors when it creates components for us — whether through HTML markup, as in <code>&lt;hero-list&gt;&lt;/hero-list&gt;</code>, or after navigating to a component with the <a href=\"router\">router</a>. If we let Angular do its job, we'll enjoy the benefits of automated dependency injection.</p> <h3 id=\"singleton-services\">Singleton services</h3> <p>Dependencies are singletons within the scope of an injector. In our example, a single <code>HeroService</code> instance is shared among the <code>HeroesComponent</code> and its <code>HeroListComponent</code> children.</p> <p>However, Angular DI is an hierarchical injection system, which means that nested injectors can create their own service instances. Learn more about that in the <a href=\"hierarchical-dependency-injection\">Hierarchical Injectors</a> chapter.</p> <h3 id=\"testing-the-component\">Testing the component</h3> <p>We emphasized earlier that designing a class for dependency injection makes the class easier to test. Listing dependencies as constructor parameters may be all we need to test application parts effectively.</p> <p>For example, we can create a new <code>HeroListComponent</code> with a mock service that we can manipulate under test:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">let expectedHeroes = [{name: 'A'}, {name: 'B'}]\nlet mockService = &lt;HeroService&gt; {getHeroes: () =&gt; expectedHeroes }\n\nit('should have heroes when HeroListComponent created', () =&gt; {\n  let hlc = new HeroListComponent(mockService);\n  expect(hlc.heroes.length).toEqual(expectedHeroes.length);\n});\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn more in <a href=\"testing\">Testing</a>.</p> </div>\n<h3 id=\"when-the-service-needs-a-service\">When the service needs a service</h3> <p>Our <code>HeroService</code> is very simple. It doesn't have any dependencies of its own.</p> <p>What if it had a dependency? What if it reported its activities through a logging service? We'd apply the same <em>constructor injection</em> pattern, adding a constructor that takes a <code>Logger</code> parameter.</p> <p>Here is the revision compared to the original.</p> <pre language=\"ts\" name=\"app/heroes/hero.service (v2)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero.service (v2)\n\nimport { Injectable } from '@angular/core';\n\nimport { HEROES }     from './mock-heroes';\nimport { Logger }     from '../logger.service';\n\n@Injectable()\nexport class HeroService {\n\n  constructor(private logger: Logger) {  }\n\n  getHeroes() {\n    this.logger.log('Getting heroes ...');\n    return HEROES;\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app/heroes/hero.service (v1)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/hero.service (v1)\n\nimport { Injectable } from '@angular/core';\n\nimport { HEROES }     from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes() { return HEROES;  }\n}\n</pre>\n<p>The constructor now asks for an injected instance of a <code>Logger</code> and stores it in a private property called <code>logger</code>. We call that property within our <code>getHeroes</code> method when anyone asks for heroes.</p> <h3 id=\"injectable\">Why @Injectable()?</h3>\n<p><strong><a href=\"../api/core/index/injectablemetadata-class\">@Injectable()</a></strong> marks a class as available to an injector for instantiation. Generally speaking, an injector will report an error when trying to instantiate a class that is not marked as <code>@Injectable()</code>.</p> <div class=\"l-sub-section\">\n<p>As it happens, we could have omitted <code>@Injectable()</code> from our first version of <code>HeroService</code> because it had no injected parameters. But we must have it now that our service has an injected dependency. We need it because Angular requires constructor parameter metadata in order to inject a <code>Logger</code>.</p> </div>\n<div class=\"callout is-helpful\">\n<header>Suggestion: add @Injectable() to every service class</header><p>We recommend adding <code>@Injectable()</code> to every service class, even those that don't have dependencies and, therefore, do not technically require it. Here's why:</p> <ul style=\"font-size:inherit\">\n<li>\n<b>Future proofing:</b> No need to remember <code>@Injectable()</code> when we add a dependency later.</li>\n<li>\n<b>Consistency:</b> All services follow the same rules, and we don't have to wonder why a decorator is missing.</li>\n</ul>\n</div>\n<p>Injectors are also responsible for instantiating components like <code>HeroesComponent</code>. Why haven't we marked <code>HeroesComponent</code> as <code>@Injectable()</code>?</p> <p>We <em>can</em> add it if we really want to. It isn't necessary because the <code>HeroesComponent</code> is already marked with <code>@Component</code>, and this decorator class (like <code>@Directive</code> and <code>@Pipe</code>, which we'll learn about later) is a subtype of <a href=\"../api/core/index/injectablemetadata-class\">InjectableMetadata</a>. It is in fact <code>InjectableMetadata</code> decorators that identify a class as a target for instantiation by an injector.</p> <div class=\"l-sub-section\">\n<p>At runtime, injectors can read class metadata in the transpiled JavaScript code and use the constructor parameter type information to determine what things to inject. </p> <p>Not every JavaScript class has metadata. The TypeScript compiler discards metadata by default. If the <code>emitDecoratorMetadata</code> compiler option is true (as it should be in the <code>tsconfig.json</code>), the compiler adds the metadata to the generated JavaScript for <em>every class with at least one decorator</em>.</p> <p>While any decorator will trigger this effect, mark the service class with the <a href=\"../api/core/index/injectablemetadata-class\">InjectableMetadata</a> decorator to make the intent clear.</p> </div>\n<div class=\"callout is-critical\">\n<header>Always include the parentheses</header><p>Always write <code>@Injectable()</code>, not just <code>@Injectable</code>. Our application will fail mysteriously if we forget the parentheses.</p> </div>\n<h2 id=\"creating-and-registering-a-logger-service\">Creating and registering a logger service</h2> <p>We're injecting a logger into our <code>HeroService</code> in two steps:</p> <ol> <li>Create the logger service.</li> <li>Register it with the application.</li> </ol> <p>Our logger service is quite simple:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/logger.service.ts\">// app/logger.service.ts\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class Logger {\n  logs: string[] = []; // capture logs for testing\n\n  log(message: string) {\n    this.logs.push(message);\n    console.log(message);\n  }\n}\n</pre>\n<p>We're likely to need the same logger service everywhere in our application, so we put it in the project's <code>app</code> folder, and we register it in the <code>providers</code> array of the metadata for our application module, <code>AppModule</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (excerpt) (providers-logger)\">// app/app.module.ts (excerpt) (providers-logger)\n\nproviders: [Logger]\n</pre>\n<p>If we forget to register the logger, Angular throws an exception when it first looks for the logger:</p> <pre format=\"nocode\">EXCEPTION: No provider for Logger! (HeroListComponent -&gt; HeroService -&gt; Logger)\n</pre>\n<p>That's Angular telling us that the dependency injector couldn't find the <em>provider</em> for the logger. It needed that provider to create a <code>Logger</code> to inject into a new <code>HeroService</code>, which it needed to create and inject into a new <code>HeroListComponent</code>.</p> <p>The chain of creations started with the <code>Logger</code> provider. <em>Providers</em> are the subject of our next section.</p> <h2 id=\"injector-providers\">Injector providers</h2> <p>A provider <em>provides</em> the concrete, runtime version of a dependency value. The injector relies on <strong>providers</strong> to create instances of the services that the injector injects into components and other services.</p> <p>We must register a service <em>provider</em> with the injector, or it won't know how to create the service.</p> <p>Earlier we registered the <code>Logger</code> service in the <code>providers</code> array of the metadata for the <code>AppModule</code> like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [Logger]\n</pre>\n<p>There are many ways to <em>provide</em> something that looks and behaves like a <code>Logger</code>. The <code>Logger</code> class itself is an obvious and natural provider. But it's not the only way.</p> <p>We can configure the injector with alternative providers that can deliver an object that behaves like a <code>Logger</code>. We could provide a substitute class. We could provide a logger-like object. We could give it a provider that calls a logger factory function. Any of these approaches might be a good choice under the right circumstances.</p> <p>What matters is that the injector has a provider to go to when it needs a <code>Logger</code>.</p> <h3 id=\"the-provider-class-_andprovidefn-\">The <em>Provider</em> class and <i>provide</i> object literal</h3> <p>We wrote the <code>providers</code> array like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [Logger]\n</pre>\n<p>This is actually a short-hand expression for a provider registration <span if-docs=\"ts\"> using a <em>provider</em> object literal with two properties: </span> <span if-docs=\"dart\"> that creates a new instance of the <a href=\"../api/core/index/provider-class\">Provider</a> class: </span></p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[{ provide: Logger, useClass: Logger }]\n</pre>\n<p>The first is the <a href=\"#token\">token</a> that serves as the key for both locating a dependency value and registering the provider.</p> <p>The second is a provider definition object, which we can think of as a <em>recipe</em> for creating the dependency value. There are many ways to create dependency values ... and many ways to write a recipe.</p> <h3 id=\"alternative-class-providers\">Alternative class providers</h3> <p>Occasionally we'll ask a different class to provide the service. The following code tells the injector to return a <code>BetterLogger</code> when something asks for the <code>Logger</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[{ provide: Logger, useClass: BetterLogger }]\n</pre>\n<h3 id=\"class-provider-with-dependencies\">Class provider with dependencies</h3> <p>Maybe an <code>EvenBetterLogger</code> could display the user name in the log message. This logger gets the user from the injected <code>UserService</code>, which happens also to be injected at the application level.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Injectable()\nclass EvenBetterLogger extends Logger {\n  constructor(private userService: UserService) { super(); }\n\n  log(message: string) {\n    let name = this.userService.user.name;\n    super.log(`Message to ${name}: ${message}`);\n  }\n}\n</pre>\n<p>Configure it like we did <code>BetterLogger</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[ UserService,\n  { provide: Logger, useClass: EvenBetterLogger }]\n</pre>\n<h3 id=\"aliased-class-providers\">Aliased class providers</h3> <p>Suppose an old component depends upon an <code>OldLogger</code> class. <code>OldLogger</code> has the same interface as the <code>NewLogger</code>, but for some reason we can't update the old component to use it.</p> <p>When the <em>old</em> component logs a message with <code>OldLogger</code>, we want the singleton instance of <code>NewLogger</code> to handle it instead.</p> <p>The dependency injector should inject that singleton instance when a component asks for either the new or the old logger. The <code>OldLogger</code> should be an alias for <code>NewLogger</code>.</p> <p>We certainly do not want two different <code>NewLogger</code> instances in our app. Unfortunately, that's what we get if we try to alias <code>OldLogger</code> to <code>NewLogger</code> with <code>useClass</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[ NewLogger,\n  // Not aliased! Creates two instances of `NewLogger`\n  { provide: OldLogger, useClass: NewLogger}]\n</pre>\n<p>The solution: alias with the <code>useExisting</code> option.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[ NewLogger,\n  // Alias OldLogger w/ reference to NewLogger\n  { provide: OldLogger, <span class=\"otl\">useExisting: NewLogger</span>}]\n</pre>\n<h3 id=\"value-providers\">Value providers</h3> <p>Sometimes it's easier to provide a ready-made object rather than ask the injector to create it from a class.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// An object in the shape of the logger service\nlet silentLogger = {\n  logs: ['Silent logger says \"Shhhhh!\". Provided via \"useValue\"'],\n  log: () =&gt; {}\n};\n</pre>\n<p>Then we register a provider with the <code>useValue</code> option, which makes this object play the logger role.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">[{ provide: Logger, <span class=\"otl\">useValue: silentLogger</span> }]\n</pre>\n<p>See more <code>useValue</code> examples in the <a href=\"#non-class-dependencies\">Non-class dependencies</a> and <a href=\"#opaquetoken\">OpaqueToken</a> sections.</p> <h3 id=\"factory-providers\">Factory providers</h3> <p>Sometimes we need to create the dependent value dynamically, based on information we won't have until the last possible moment. Maybe the information changes repeatedly in the course of the browser session.</p> <p>Suppose also that the injectable service has no independent access to the source of this information.</p> <p>This situation calls for a <strong>factory provider</strong>.</p> <p>Let's illustrate by adding a new business requirement: the HeroService must hide <em>secret</em> heroes from normal users. Only authorized users should see secret heroes.</p> <p>Like the <code>EvenBetterLogger</code>, the <code>HeroService</code> needs a fact about the user. It needs to know if the user is authorized to see secret heroes. That authorization can change during the course of a single application session, as when we log in a different user.</p> <p>Unlike <code>EvenBetterLogger</code>, we can't inject the <code>UserService</code> into the <code>HeroService</code>. The <code>HeroService</code> won't have direct access to the user information to decide who is authorized and who is not.</p> <div class=\"l-sub-section\">\n<p>Why? We don't know either. Stuff like this happens.</p> </div>\n<p>Instead the <code>HeroService</code> constructor takes a boolean flag to control display of secret heroes.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/hero.service.ts (excerpt)\">// app/heroes/hero.service.ts (excerpt)\n\nconstructor(\n  private logger: Logger,\n  private isAuthorized: boolean) { }\n\ngetHeroes() {\n  let auth = this.isAuthorized ? 'authorized ' : 'unauthorized';\n  this.logger.log(`Getting heroes for ${auth} user.`);\n  return HEROES.filter(hero =&gt; this.isAuthorized || !hero.isSecret);\n}\n</pre>\n<p>We can inject the <code>Logger</code>, but we can't inject the boolean <code>isAuthorized</code>. We'll have to take over the creation of new instances of this <code>HeroService</code> with a factory provider.</p> <p>A factory provider needs a factory function:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/hero.service.provider.ts (excerpt)\">// app/heroes/hero.service.provider.ts (excerpt)\n\nlet heroServiceFactory = (logger: Logger, userService: UserService) =&gt; {\n  return new HeroService(logger, userService.user.isAuthorized);\n};\n</pre>\n<p>Although the <code>HeroService</code> has no access to the <code>UserService</code>, our factory function does.</p> <p>We inject both the <code>Logger</code> and the <code>UserService</code> into the factory provider and let the injector pass them along to the factory function:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/hero.service.provider.ts (excerpt)\">// app/heroes/hero.service.provider.ts (excerpt)\n\nexport let heroServiceProvider =\n  { provide: HeroService,\n    useFactory: heroServiceFactory,\n    deps: [Logger, UserService]\n  };\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>useFactory</code> field tells Angular that the provider is a factory function whose implementation is the <code>heroServiceFactory</code>.</p> <p>The <code>deps</code> property is an array of <a href=\"#token\">provider tokens</a>. The <code>Logger</code> and <code>UserService</code> classes serve as tokens for their own class providers. The injector resolves these tokens and injects the corresponding services into the matching factory function parameters.</p> </div>\n<p>Notice that we captured the factory provider in an exported variable, <code>heroServiceProvider</code>. This extra step makes the factory provider reusable. We can register our <code>HeroService</code> with this variable wherever we need it.</p> <p>In our sample, we need it only in the <code>HeroesComponent</code>, where it replaces the previous <code>HeroService</code> registration in the metadata <code>providers</code> array. Here we see the new and the old implementation side-by-side:</p> <pre language=\"ts\" name=\"app/heroes/heroes.component (v3)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/heroes.component (v3)\n\nimport { Component }          from '@angular/core';\n\nimport { heroServiceProvider } from './hero.service.provider';\n\n@Component({\n  selector: 'my-heroes',\n  template: `\n  &lt;h2&gt;Heroes&lt;/h2&gt;\n  &lt;hero-list&gt;&lt;/hero-list&gt;\n  `,\n  providers: [heroServiceProvider]\n})\nexport class HeroesComponent { }\n</pre>\n<pre language=\"ts\" name=\"app/heroes/heroes.component (v2)\" format=\"linenums\" data-language=\"typescript\">// app/heroes/heroes.component (v2)\n\nimport { Component }          from '@angular/core';\n\nimport { HeroService }        from './hero.service';\n\n@Component({\n  selector: 'my-heroes',\n  providers: [HeroService],\n  template: `\n  &lt;h2&gt;Heroes&lt;/h2&gt;\n  &lt;hero-list&gt;&lt;/hero-list&gt;\n  `\n})\nexport class HeroesComponent { }\n</pre>\n<h2 id=\"dependency-injection-tokens\">Dependency injection tokens</h2> <p>When we register a provider with an injector, we associate that provider with a dependency injection token. The injector maintains an internal <em>token-provider</em> map that it references when asked for a dependency. The token is the key to the map.</p> <p>In all previous examples, the dependency value has been a class <em>instance</em>, and the class <em>type</em> served as its own lookup key. Here we get a <code>HeroService</code> directly from the injector by supplying the <code>HeroService</code> type as the token:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">heroService: HeroService = this.injector.get(HeroService);\n</pre>\n<p>We have similar good fortune when we write a constructor that requires an injected class-based dependency. We define a constructor parameter with the <code>HeroService</code> class type, and Angular knows to inject the service associated with that <code>HeroService</code> class token:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(heroService: HeroService)\n</pre>\n<p>This is especially convenient when we consider that most dependency values are provided by classes.</p> <h3 id=\"non-class-dependencies\">Non-class dependencies</h3> <p>What if the dependency value isn't a class? Sometimes the thing we want to inject is a <span>string, function, or object.</span></p>\n<p>Applications often define configuration objects with lots of small facts (like the title of the application or the address of a web API endpoint) but these configuration objects aren't always instances of a class. They can be object literals such as this one:</p>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app-config.ts (excerpt)\">// app/app-config.ts (excerpt)\n\nexport interface AppConfig {\n  apiEndpoint: string;\n  title: string;\n}\n\nexport const HERO_DI_CONFIG: AppConfig = {\n  apiEndpoint: 'api.heroes.com',\n  title: 'Dependency Injection'\n};\n</pre>\n<p>We'd like to make this configuration object available for injection. We know we can register an object with a <a href=\"#value-provider\">value provider</a>.</p> <p>But what should we use as the token? We don't have a class to serve as a token. There is no <code>AppConfig</code> class.</p> <div id=\"interface\" class=\"l-sub-section\">\n<h3 id=\"typescript-interfaces-aren-t-valid-tokens\">TypeScript interfaces aren't valid tokens</h3> <p>The <code>HERO_DI_CONFIG</code> constant has an interface, <code>AppConfig</code>. Unfortunately, we cannot use a TypeScript interface as a token:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// FAIL!  Can't use interface as provider token\n[{ provide: AppConfig, useValue: HERO_DI_CONFIG })]\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\">// FAIL! Can't inject using the interface as the parameter type\nconstructor(private config: AppConfig){ }\n</pre>\n<p>That seems strange if we're used to dependency injection in strongly typed languages, where an interface is the preferred dependency lookup key.</p> <p>It's not Angular's fault. An interface is a TypeScript design-time artifact. JavaScript doesn't have interfaces. The TypeScript interface disappears from the generated JavaScript. There is no interface type information left for Angular to find at runtime.</p> </div>\n<h3 id=\"opaquetoken\">OpaqueToken</h3> <p>One solution to choosing a provider token for non-class dependencies is to define and use an <a href=\"../api/core/index/opaquetoken-class\"><b>OpaqueToken</b></a>. The definition looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { OpaqueToken } from '@angular/core';\n\nexport let APP_CONFIG = new OpaqueToken('app.config');\n</pre>\n<p>We register the dependency provider using the <code>OpaqueToken</code> object:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [{ provide: APP_CONFIG, useValue: HERO_DI_CONFIG }]\n</pre>\n<p>Now we can inject the configuration object into any constructor that needs it, with the help of an <code>@Inject</code> decorator:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(@Inject(APP_CONFIG) config: AppConfig) {\n  this.title = config.title;\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Although the <code>AppConfig</code> interface plays no role in dependency injection, it supports typing of the configuration object within the class.</p> </div>\n<p>Or we can provide and inject the configuration object in an ngModule like <code>AppModule</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (ngmodule-providers)\">// app/app.module.ts (ngmodule-providers)\n\nproviders: [\n  UserService,\n  { provide: APP_CONFIG, useValue: HERO_DI_CONFIG }\n],\n</pre>\n<h2 id=\"optional-dependencies\">Optional dependencies</h2> <p>Our <code>HeroService</code> <em>requires</em> a <code>Logger</code>, but what if it could get by without a logger? We can tell Angular that the dependency is optional by annotating the constructor argument with <code>@Optional()</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Optional } from '@angular/core';\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(@Optional() private logger: Logger) {\n  if (this.logger) {\n    this.logger.log(some_message);\n  }\n}\n</pre>\n<p>When using <code>@Optional()</code>, our code must be prepared for a null value. If we don't register a logger somewhere up the line, the injector will set the value of <code>logger</code> to null.</p> <h2 id=\"summary\">Summary</h2> <p>We learned the basics of Angular dependency injection in this chapter. We can register various kinds of providers, and we know how to ask for an injected object (such as a service) by adding a parameter to a constructor.</p> <p>Angular dependency injection is more capable than we've described. We can learn more about its advanced features, beginning with its support for nested injectors, in the <a href=\"hierarchical-dependency-injection\">Hierarchical Dependency Injection</a> chapter.</p> <h2 id=\"appendix-working-with-injectors-directly\">Appendix: Working with injectors directly</h2> <p>We rarely work directly with an injector, but here's an <code>InjectorComponent</code> that does.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/injector.component.ts\">// app/injector.component.ts\n\n@Component({\n  selector: 'my-injectors',\n  template: `\n  &lt;h2&gt;Other Injections&lt;/h2&gt;\n  &lt;div id=\"car\"&gt;{{car.drive()}}&lt;/div&gt;\n  &lt;div id=\"hero\"&gt;{{hero.name}}&lt;/div&gt;\n  &lt;div id=\"rodent\"&gt;{{rodent}}&lt;/div&gt;\n  `,\n  providers: [Car, Engine, Tires, heroServiceProvider, Logger]\n})\nexport class InjectorComponent {\n  car: Car = this.injector.get(Car);\n\n  heroService: HeroService = this.injector.get(HeroService);\n  hero: Hero = this.heroService.getHeroes()[0];\n\n  constructor(private injector: Injector) { }\n\n  get rodent() {\n    let rousDontExist = `R.O.U.S.'s? I don't think they exist!`;\n    return this.injector.get(ROUS, rousDontExist);\n  }\n}\n</pre>\n<p>An <code>Injector</code> is itself an injectable service.</p> <p>In this example, Angular injects the component's own <code>Injector</code> into the component's constructor. The component then asks the injected injector for the services it wants.</p> <p>Note that the services themselves are not injected into the component. They are retrieved by calling <code>injector.get</code>.</p> <p>The <code>get</code> method throws an error if it can't resolve the requested service. We can call <code>get</code> with a second parameter (the value to return if the service is not found) instead, which we do in one case to retrieve a service (<code>ROUS</code>) that isn't registered with this or any ancestor injector.</p> <div class=\"l-sub-section\">\n<p>The technique we just described is an example of the <a href=\"https://en.wikipedia.org/wiki/Service_locator_pattern\">service locator pattern</a>.</p> <p>We <strong>avoid</strong> this technique unless we genuinely need it. It encourages a careless grab-bag approach such as we see here. It's difficult to explain, understand, and test. We can't know by inspecting the constructor what this class requires or what it will do. It could acquire services from any ancestor component, not just its own. We're forced to spelunk the implementation to discover what it does.</p> <p>Framework developers may take this approach when they must acquire services generically and dynamically.</p> </div>\n<h2 id=\"appendix-why-we-recommend-one-class-per-file\">Appendix: Why we recommend one class per file</h2> <p>Having multiple classes in the same file is confusing and best avoided. Developers expect one class per file. Keep them happy.</p> <p>If we scorn this advice and, say, combine our <code>HeroService</code> class with the <code>HeroesComponent</code> in the same file, <strong>define the component last!</strong> If we define the component before the service, we'll get a runtime null reference error.</p> <div class=\"l-sub-section\">\n<p>We actually can define the component first with the help of the <code>forwardRef()</code> method as explained in this <a href=\"http://blog.thoughtram.io/angular/2015/09/03/forward-references-in-angular-2.html\">blog post</a>. But why flirt with trouble? Avoid the problem altogether by defining components and services in separate files.</p> </div>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"template-syntax\">Template Syntax</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/dependency-injection.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/dependency-injection.html</a>\n  </p>\n</div>\n","tutorial/toh-pt5":"<h1 class=\"hero-title text-display-1 \">Routing</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We add the Angular Component Router and learn to navigate among the views</p></div>\n<h1 id=\"routing-around-the-app\">Routing Around the App</h1> <p>We received new requirements for our Tour of Heroes application:</p> <ul> <li>Add a <em>Dashboard</em> view.</li> <li>Navigate between the <em>Heroes</em> and <em>Dashboard</em> views.</li> <li>Clicking on a hero in either view navigates to a detail view of the selected hero.</li> <li>Clicking a <em>deep link</em> in an email opens the detail view for a particular hero;</li> </ul> <p>When we’re done, users will be able to navigate the app like this:</p> <img src=\"https://angular.io/resources/images/devguide/toh/nav-diagram.png\" alt=\"View navigations\"><p>We'll add Angular’s <em>Component Router</em> to our app to satisfy these requirements.</p> <div class=\"l-sub-section\">\n<p>The <a href=\"../guide/router\">Routing and Navigation</a> chapter covers the router in more detail than we will in this tutorial.</p> </div>\n<p>Run the <live-example></live-example> for this part.</p> <div class=\"l-sub-section\">\n<img src=\"https://angular.io/resources/images/devguide/plunker-separate-window-button.png\" alt=\"pop out the window\" align=\"right\" style=\"\"><p>To see the URL changes in the browser address bar, pop out the preview window by clicking the blue 'X' button in the upper right corner:</p> </div>\n<h2 id=\"where-we-left-off\">Where We Left Off</h2> <p>Before we continue with our Tour of Heroes, let’s verify that we have the following structure after adding our hero service and hero detail component. If not, we’ll need to go back and follow the previous chapters.</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">main.ts</div>\n<div class=\"file\">mock-heroes.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.js</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h3 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h3> <p>Open a terminal/console window and enter the following command to start the TypeScript compiler, start the server, and watch for changes:</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>The application runs and updates automatically as we continue to build the Tour of Heroes.</p> <h2 id=\"action-plan\">Action plan</h2> <p>Here's our plan:</p> <ul> <li>Turn <code>AppComponent</code> into an application shell that only handles navigation</li> <li>Relocate the <em>Heroes</em> concerns within the current <code>AppComponent</code> to a separate <code>HeroesComponent</code>\n</li> <li>Add routing</li> <li>Create a new <code>DashboardComponent</code>\n</li> <li>Tie the <em>Dashboard</em> into the navigation structure</li> </ul> <div class=\"l-sub-section\">\n<p><em>Routing</em> is another name for <em>navigation</em>. The <em>router</em> is the mechanism for navigating from view to view.</p> </div>\n<h2 id=\"splitting-the-appcomponent-\">Splitting the <em>AppComponent</em>\n</h2> <p>Our current app loads <code>AppComponent</code> and immediately displays the list of heroes.</p> <p>Our revised app should present a shell with a choice of views (<em>Dashboard</em> and <em>Heroes</em>) and then default to one of them.</p> <p>The <code>AppComponent</code> should only handle navigation. Let's move the display of <em>Heroes</em> out of <code>AppComponent</code> and into its own <code>HeroesComponent</code>.</p> <h3 id=\"-heroescomponent-\"><em>HeroesComponent</em></h3> <p><code>AppComponent</code> is already dedicated to <em>Heroes</em>. Instead of moving anything out of <code>AppComponent</code>, we'll just rename it <code>HeroesComponent</code> and create a new <code>AppComponent</code> shell separately.</p> <p>The steps are to rename:</p> <ul> <li>\n<code>app.component.ts</code> file to <code>heroes.component.ts</code>\n</li> <li>\n<code>AppComponent</code> class to <code>HeroesComponent</code>\n</li> <li>Selector <code>my-app</code> to <code>my-heroes</code>\n</li> </ul> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes.component.ts (showing renamings only)\">// app/heroes.component.ts (showing renamings only)\n\n@Component({\n  selector: 'my-heroes',\n})\nexport class HeroesComponent implements OnInit {\n}\n</pre>\n<h2 id=\"create-appcomponent-\">Create <em>AppComponent</em>\n</h2> <p>The new <code>AppComponent</code> will be the application shell. It will have some navigation links at the top and a display area below for the pages we navigate to.</p> <p>The initial steps are:</p> <ul> <li>create a new file named <code>app.component.ts</code>.</li> <li>define an <code>AppComponent</code> class.</li> <li>\n<code>export</code> it so we can reference it during bootstrapping in <code>app.module.ts</code>.</li> <li>expose an application <code>title</code> property.</li> <li>add the <code>@Component</code> metadata decorator above the class with a <code>my-app</code> selector.</li> <li>add a template with <code>&lt;h1&gt;</code> tags surrounding a binding to the <code>title</code> property.</li> <li>add the <code>&lt;my-heroes&gt;</code> tags to the template so we still see the heroes.</li> <li>add the <code>HeroesComponent</code> to the root NgModule's <code>declarations</code> array so Angular recognizes the <code>&lt;my-heroes&gt;</code> tags.</li> <li>add the <code>HeroService</code> to the root NgModule's <code>providers</code> array because we'll need it in every other view.</li> <li>add the supporting <code>import</code> statements.</li> </ul> <p>Our first draft looks like this:</p> <pre language=\"ts\" name=\"app/app.component.ts (v1)\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts (v1)\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;my-heroes&gt;&lt;/my-heroes&gt;\n  `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.module.ts (v1)\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts (v1)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }   from './app.component';\n\nimport { HeroesComponent }  from './heroes.component';\n\nimport { HeroService }  from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<div class=\"callout is-critical\">\n<header>Remove <i>HeroService</i> from the <i>HeroesComponent</i> providers</header><p>Go back to the <code>HeroesComponent</code> and <strong>remove the <code>HeroService</code></strong> from its <code>providers</code> array. We are <em>promoting</em> this service from the <code>HeroesComponent</code> to the root <code>NgModule</code>. We <strong><em>do not want two copies</em></strong> of this service at two different levels of our app.</p> </div>\n<p>The app still runs and still displays heroes. Our refactoring of <code>AppComponent</code> into a new <code>AppComponent</code> and a <code>HeroesComponent</code> worked! We have done no harm.</p> <h2 id=\"add-routing\">Add Routing</h2> <p>We're ready to take the next step. Instead of displaying heroes automatically, we'd like to show them <em>after</em> the user clicks a button. In other words, we'd like to navigate to the list of heroes.</p> <p>We'll need the Angular <em>Component Router</em>.</p> <h3 id=\"set-the-base-tag\">Set the base tag</h3> <p>Open the <code>index.html</code> and add <code>&lt;base href=\"/\"&gt;</code> at the top of the <code>&lt;head&gt;</code> section.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (base href)\">&lt;!-- index.html (base href) --&gt;\n\n&lt;head&gt;\n  &lt;base href=\"/\"&gt;\n</pre>\n<div class=\"callout is-important\">\n<header>base href is essential</header><p>See the <em>base href</em> section of the <a href=\"#\">Router</a> chapter to learn why this matters.</p> </div>\n<p>The Angular router is a combination of multiple provided services (<code>RouterModule</code>), multiple directives (<code>RouterOutlet,\nRouterLink, RouterLinkActive</code>), and a configuration (<code>Routes</code>). We'll configure our routes first:</p> <h3 id=\"configure-the-routes\">Configure the routes</h3> <p>The <em>Component Router</em> is an external, optional Angular NgModule called <code>RouterModule</code>.</p> <p>Our application doesn't have any routes yet. Start by creating a configuration file for the application routes. <em>Routes</em> tell the router which views to display when a user clicks a link or pastes a URL into the browser address bar.</p> <p>Our first route goes to the <code>HeroesComponent</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (heroes route)\">// app/app.routing.ts (heroes route)\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HeroesComponent } from './heroes.component';\n\nconst appRoutes: Routes = [\n  {\n    path: 'heroes',\n    component: HeroesComponent\n  }\n];\n</pre>\n<p>The <code>Routes</code> are an array of <em>route definitions</em>. We have only one route definition at the moment but rest assured, we'll add more.</p> <p>This <em>route definition</em> has two parts:</p> <ul> <li>\n<p><strong>path</strong>: the router matches this route's path to the URL in the browser address bar (<code>/heroes</code>).</p> </li> <li>\n<p><strong>component</strong>: the component that the router should create when navigating to this route (<code>HeroesComponent</code>).</p> </li> </ul> <div class=\"l-sub-section\">\n<p>Learn more about defining routes with Routes in the <a href=\"../guide/router\">Routing</a> chapter.</p> </div>\n<p>We'll export the <code>routing</code> constant using the <strong>RouterModule.forRoot</strong> method with our array of routes. This returns a configured router module we'll add to our root NgModule, <code>AppModule</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (routing export)\">// app/app.routing.ts (routing export)\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<div class=\"l-sub-section\">\n<p>We call the <code>forRoot</code> method because we're providing a configured router at the <em>root</em> of the application. The <code>forRoot</code> method gives us the Router service providers and directives needed for routing.</p> </div>\n<h3 id=\"make-the-router-available-\">Make the router available.</h3> <p>We've setup our initial routes in our <code>app.routing.ts</code> file. Now we'll add it to our root NgModule.</p> <p>We'll import our <code>routing</code> constant from our <code>app.routing.ts</code> file and add it root NgModule's <code>imports</code> array.</p> <p>We'll also import our <code>HeroesComponent</code> and add it to our <code>declarations</code> array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }   from './app.component';\nimport { routing }        from './app.routing';\n\nimport { HeroesComponent }  from './heroes.component';\n\nimport { HeroService }  from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<h3 id=\"router-outlet\">Router Outlet</h3> <p>If we paste the path, <code>/heroes</code>, into the browser address bar, the router should match it to the <code>heroes</code> route and display the <code>HeroesComponent</code>. But where?</p> <p>We have to <strong><em>tell it where</em></strong> by adding <code>&lt;router-outlet&gt;</code> marker tags to the bottom of the template. <code>RouterOutlet</code> is one of the directives provided by the <code>RouterModule</code>. The router displays each component immediately below the <code>&lt;router-outlet&gt;</code> as we navigate through the application.</p> <h3 id=\"router-links\">Router Links</h3> <p>We don't really expect users to paste a route URL into the address bar. We add an anchor tag to the template which, when clicked, triggers navigation to the <code>HeroesComponent</code>.</p> <p>The revised template looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template v1)\">// app/app.component.ts (template v1)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;a routerLink=\"/heroes\"&gt;Heroes&lt;/a&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<p>Notice the <code>routerLink</code> binding in the anchor tag. We bind the <code>RouterLink</code> directive (another of the <code>RouterModule</code> directives) to a string that tells the router where to navigate when the user clicks the link.</p> <p>Since our link is not dynamic, we define a <em>routing instruction</em> with a <strong>one-time binding</strong> to our route <strong>path</strong>. Looking back at the route configuration, we confirm that <code>'/heroes'</code> is the path of the route to the <code>HeroesComponent</code>.</p> <div class=\"l-sub-section\">\n<p>For more dynamic router links, learn about the <em>link parameters array</em> in the <a href=\"../guide/router#link-parameters-array\">Routing</a> chapter.</p> </div>\n<p>Refresh the browser. We see only the app title. We don't see the heroes list.</p> <div class=\"l-sub-section\">\n<p>The browser's address bar shows <code>/</code>. The route path to <code>HeroesComponent</code> is <code>/heroes</code>, not <code>/</code>. We don't have a route that matches the path <code>/</code>, so there is nothing to show. That's something we'll want to fix.</p> </div>\n<p>We click the \"Heroes\" navigation link, the browser bar updates to <code>/heroes</code>, and now we see the list of heroes. We are navigating at last!</p> <p>At this stage, our <code>AppComponent</code> looks like this.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts (v2)\">// app/app.component.ts (v2)\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;a routerLink=\"/heroes\"&gt;Heroes&lt;/a&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n</pre>\n<p>The <em>AppComponent</em> is now attached to a router and displaying routed views. For this reason and to distinguish it from other kinds of components, we call this type of component a <em>Router Component</em>.</p> <h2 id=\"add-a-dashboard-\">Add a <em>Dashboard</em>\n</h2> <p>Routing only makes sense when we have multiple views. We need another view.</p> <p>Create a placeholder <code>DashboardComponent</code> that gives us something to navigate to and from.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (v1)\">// app/dashboard.component.ts (v1)\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-dashboard',\n  template: '&lt;h3&gt;My Dashboard&lt;/h3&gt;'\n})\nexport class DashboardComponent { }\n</pre>\n<p>We’ll come back and make it more useful later.</p> <h3 id=\"configure-the-dashboard-route\">Configure the dashboard route</h3> <p>Go back to <code>app.routing.ts</code> and teach it to navigate to the dashboard.</p> <p>Import the <code>DashboardComponent</code> so we can reference it in the dashboard route definition.</p> <p>Add the following <code>'Dashboard'</code> route definition to the <code>Routes</code> array of definitions.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (Dashboard route)\">// app/app.routing.ts (Dashboard route)\n\n{\n  path: 'dashboard',\n  component: DashboardComponent\n},\n</pre>\n<p>We also need to add the <code>DashboardComponent</code> to our root NgModule's <code>declarations</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (Dashboard declaration)\">// app/app.module.ts (Dashboard declaration)\n\nimport { DashboardComponent } from './dashboard.component';\n\n  declarations: [\n    DashboardComponent,\n  ],\n</pre>\n<div class=\"l-sub-section\">\n<p><strong>Redirect</strong></p> <p>We want the app to show the dashboard when it starts and we want to see a nice URL in the browser address bar that says <code>/dashboard</code>. Remember that the browser launches with <code>/</code> in the address bar. We can use a redirect route to make this happen.</p> </div>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (Redirect route)\">// app/app.routing.ts (Redirect route)\n\n{\n  path: '',\n  redirectTo: '/dashboard',\n  pathMatch: 'full'\n},\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn about the <em>redirects</em> in the <a href=\"#\">Routing</a> chapter.</p> </div>\n<p>Finally, add a dashboard navigation link to the template, just above the <em>Heroes</em> link.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template)\">// app/app.component.ts (template)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"/dashboard\"&gt;Dashboard&lt;/a&gt;\n    &lt;a routerLink=\"/heroes\"&gt;Heroes&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`,\n</pre>\n<div class=\"l-sub-section\">\n<p>We nestled the two links within <code>&lt;nav&gt;</code> tags. They don't do anything yet but they'll be convenient when we style the links a little later in the chapter.</p> </div>\n<p>Refresh the browser. The app displays the dashboard and we can navigate between the dashboard and the heroes.</p> <h2 id=\"dashboard-top-heroes\">Dashboard Top Heroes</h2> <p>Let’s spice up the dashboard by displaying the top four heroes at a glance.</p> <p>Replace the <code>template</code> metadata with a <code>templateUrl</code> property that points to a new template file.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (templateUrl)\">// app/dashboard.component.ts (templateUrl)\n\ntemplateUrl: 'app/dashboard.component.html',\n</pre>\n<div class=\"l-sub-section\">\n<p>We specify the path <em>all the way back to the application root</em> — <code>app/</code> in this case — because Angular doesn't support relative paths <em>by default</em>. We <em>can</em> switch to <a href=\"../cookbook/component-relative-paths\">component-relative paths</a> if we prefer.</p> </div>\n<p>Create that file with these contents:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/dashboard.component.html\">&lt;!-- app/dashboard.component.html --&gt;\n\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=\"grid grid-pad\"&gt;\n  &lt;div *ngFor=\"let hero of heroes\" (click)=\"gotoDetail(hero)\" class=\"col-1-4\"&gt;\n    &lt;div class=\"module hero\"&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>We use <code>*ngFor</code> once again to iterate over a list of heroes and display their names. We added extra <code>&lt;div&gt;</code> elements to help with styling later in this chapter.</p> <p>There's a <code>(click)</code> binding to a <code>gotoDetail</code> method we haven't written yet and we're displaying a list of heroes that we don't have. We have work to do, starting with those heroes.</p> <h3 id=\"share-the-heroservice-\">Share the <em>HeroService</em>\n</h3> <p>We'd like to re-use the <code>HeroService</code> to populate the component's <code>heroes</code> array.</p> <p>Recall earlier in the chapter that we removed the <code>HeroService</code> from the <code>providers</code> array of the <code>HeroesComponent</code> and added it to the <code>providers</code> array of the root <code>NgModule</code>.</p> <p>That move created a singleton <code>HeroService</code> instance, available to <em>all</em> components of the application. Angular will inject <code>HeroService</code> and we'll use it here in the <code>DashboardComponent</code>.</p> <h3 id=\"get-heroes\">Get heroes</h3> <p>Open the <code>dashboard.component.ts</code> and add the requisite <code>import</code> statements.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (imports)\">// app/dashboard.component.ts (imports)\n\nimport { Component, OnInit } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n</pre>\n<p>We need <code>OnInit</code> interface because we'll initialize the heroes in the <code>ngOnInit</code> method as we've done before. We need the <code>Hero</code> and <code>HeroService</code> symbols in order to reference those types.</p> <p>Now implement the <code>DashboardComponent</code> class like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/dashboard.component.ts (class)\">// app/dashboard.component.ts (class)\n\nexport class DashboardComponent implements OnInit {\n\n  heroes: Hero[] = [];\n\n  constructor(private heroService: HeroService) { }\n\n  ngOnInit() {\n    this.heroService.getHeroes()\n      .then(heroes =&gt; this.heroes = heroes.slice(1, 5));\n  }\n\n  gotoDetail() { /* not implemented yet */}\n}\n</pre>\n<p>We saw this kind of logic before in the <code>HeroesComponent</code>.</p> <ul> <li>create a <code>heroes</code> array property</li> <li>inject the <code>HeroService</code> in the constructor and hold it in a private <code>heroService</code> field.</li> <li>call the service to get heroes inside the Angular <code>ngOnInit</code> lifecycle hook.</li> </ul> <p>The noteworthy differences: we cherry-pick four heroes (2nd, 3rd, 4th, and 5th) with <em>slice</em> and stub the <code>gotoDetail</code> method until we're ready to implement it.</p> <p>Refresh the browser and see four heroes in the new dashboard.</p> <h2 id=\"navigate-to-hero-details\">Navigate to Hero Details</h2> <p>Although we display the details of a selected hero at the bottom of the <code>HeroesComponent</code>, we don't yet <em>navigate</em> to the <code>HeroDetailComponent</code> in the three ways specified in our requirements:</p> <ol> <li>from the <em>Dashboard</em> to a selected hero.</li> <li>from the <em>Heroes</em> list to a selected hero.</li> <li>from a \"deep link\" URL pasted into the browser address bar.</li> </ol> <p>Adding a <code>'HeroDetail'</code> route seem an obvious place to start.</p> <h3 id=\"routing-to-a-hero-detail\">Routing to a hero detail</h3> <p>We'll add a route to the <code>HeroDetailComponent</code> in the <code>app.routing.ts</code> where our other routes are configured.</p> <p>The new route is a bit unusual in that we must tell the <code>HeroDetailComponent</code> <em>which hero to show</em>. We didn't have to tell the <code>HeroesComponent</code> or the <code>DashboardComponent</code> anything.</p> <p>At the moment the parent <code>HeroesComponent</code> sets the component's <code>hero</code> property to a hero object with a binding like this.</p> <pre format=\"\">&lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;</pre>\n<p>That clearly won't work in any of our routing scenarios. Certainly not the last one; we can't embed an entire hero object in the URL! Nor would we want to.</p> <h3 id=\"parameterized-route\">Parameterized route</h3> <p>We <em>can</em> add the hero's <code>id</code> to the URL. When routing to the hero whose <code>id</code> is 11, we could expect to see an URL such as this:</p> <pre format=\"\">/detail/11</pre>\n<p>The <code>/detail/</code> part of that URL is constant. The trailing numeric <code>id</code> part changes from hero to hero. We need to represent that variable part of the route with a <em>parameter</em> (or <em>token</em>) that stands for the hero's <code>id</code>.</p> <h3 id=\"configure-a-route-with-a-parameter\">Configure a Route with a Parameter</h3> <p>Here's the <em>route definition</em> we'll use.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (route to HeroDetailComponent)\">// app/app.routing.ts (route to HeroDetailComponent)\n\n{\n  path: 'detail/:id',\n  component: HeroDetailComponent\n},\n</pre>\n<p>The colon (:) in the path indicates that <code>:id</code> is a placeholder to be filled with a specific hero <code>id</code> when navigating to the <code>HeroDetailComponent</code>.</p> <div class=\"l-sub-section\">\n<p>Of course we have to import the <code>HeroDetailComponent</code> before we create this route:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HeroDetailComponent } from './hero-detail.component';\n</pre>\n</div>\n<p>Add the <code>HeroDetailComponent</code> to our root NgModule's <code>declarations</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (Hero Detail declaration)\">// app/app.module.ts (Hero Detail declaration)\n\nimport { HeroDetailComponent } from './hero-detail.component';\n\n  declarations: [\n    HeroDetailComponent\n  ],\n</pre>\n<p>We're finished with the application routes.</p> <p>We won't add a <code>'Hero Detail'</code> link to the template because users don't click a navigation <em>link</em> to view a particular hero. They click a <em>hero</em> whether that hero is displayed on the dashboard or in the heroes list.</p> <p>We'll get to those <em>hero</em> clicks later in the chapter. There's no point in working on them until the <code>HeroDetailComponent</code> is ready to be navigated <em>to</em>.</p> <p>That will require an <code>HeroDetailComponent</code> overhaul.</p> <h2 id=\"revise-the-herodetailcomponent-\">Revise the <em>HeroDetailComponent</em>\n</h2> <p>Before we rewrite the <code>HeroDetailComponent</code>, let's review what it looks like now:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (current)\">// app/hero-detail.component.ts (current)\n\nimport { Component, Input } from '@angular/core';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'my-hero-detail',\n  template: `\n    &lt;div *ngIf=\"hero\"&gt;\n      &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n      &lt;div&gt;\n        &lt;label&gt;id: &lt;/label&gt;{{hero.id}}\n      &lt;/div&gt;\n      &lt;div&gt;\n        &lt;label&gt;name: &lt;/label&gt;\n        &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n</pre>\n<p>The template won't change. We'll display a hero the same way. The big changes are driven by how we get the hero.</p> <p>We will no longer receive the hero in a parent component property binding. The new <code>HeroDetailComponent</code> should take the <code>id</code> parameter from the <code>params</code> observable in the <code>ActivatedRoute</code> service and use the <code>HeroService</code> to fetch the hero with that <code>id</code>.</p> <p>We need an import statement to reference the <code>ActivatedRoute</code> and <code>Params</code> types.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { ActivatedRoute, Params } from '@angular/router';\n</pre>\n<p>We import the <code>HeroService</code>so we can fetch a hero.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HeroService } from './hero.service';\n</pre>\n<p>We import the <code>OnInit</code> interface because we'll call the <code>HeroService</code> inside the <code>ngOnInit</code> component lifecycle hook.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component, OnInit } from '@angular/core';\n</pre>\n<p>We inject the both the <code>ActivatedRoute</code> service and the <code>HeroService</code> into the constructor as we've done before, making private variables for both:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (constructor)\">// app/hero-detail.component.ts (constructor)\n\nconstructor(\n  private heroService: HeroService,\n  private route: ActivatedRoute) {\n}\n</pre>\n<p>We tell the class that we want to implement the <code>OnInit</code> interface.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export class HeroDetailComponent implements OnInit {\n</pre>\n<p>Inside the <code>ngOnInit</code> lifecycle hook, we use the <code>params</code> observable to extract the <code>id</code> parameter value from the <code>ActivateRoute</code> service and use the <code>HeroService</code> to fetch the hero with that <code>id</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (ngOnInit)\">// app/hero-detail.component.ts (ngOnInit)\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) =&gt; {\n      let id = +params['id'];\n      this.heroService.getHero(id)\n        .then(hero =&gt; this.hero = hero);\n    });\n  }\n</pre>\n<p>Notice how we extract the <code>id</code> by calling the <code>forEach</code> method which will deliver our array of route parameters.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">this.route.params.forEach((params: Params) =&gt; {\n  let id = +params['id'];\n  this.heroService.getHero(id)\n    .then(hero =&gt; this.hero = hero);\n});\n</pre>\n<p>The hero <code>id</code> is a number. Route parameters are <em>always strings</em>. So we convert the route parameter value to a number with the JavaScript (+) operator.</p> <h3 id=\"add-heroservice-gethero-\">Add <em>HeroService.getHero</em>\n</h3> <p>The problem with this bit of code is that <code>HeroService</code> doesn't have a <code>getHero</code> method! We better fix that quickly before someone notices that we broke the app.</p> <p>Open <code>HeroService</code> and add a <code>getHero</code> method that filters the heroes list from <code>getHeroes</code> by <code>id</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (getHero)\">// app/hero.service.ts (getHero)\n\ngetHero(id: number) {\n  return this.getHeroes()\n             .then(heroes =&gt; heroes.find(hero =&gt; hero.id === id));\n}\n</pre>\n<p>Return to the <code>HeroDetailComponent</code> to clean up loose ends.</p> <h3 id=\"find-our-way-back\">Find our way back</h3> <p>We can navigate <em>to</em> the <code>HeroDetailComponent</code> in several ways. How do we navigate somewhere else when we're done?</p> <p>The user could click one of the two links in the <code>AppComponent</code>. Or click the browser's back button. We'll add a third option, a <code>goBack</code> method that navigates backward one step in the browser's history stack</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (goBack)\">// app/hero-detail.component.ts (goBack)\n\ngoBack() {\n  window.history.back();\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Going back too far could take us out of the application. That's acceptable in a demo. We'd guard against it in a real application, perhaps with the <a href=\"../api/router/index/candeactivate-interface\"><em>CanDeactivate</em> guard</a>.</p> </div>\n<p>Then we wire this method with an event binding to a <em>Back</em> button that we add to the bottom of the component template.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"goBack()\"&gt;Back&lt;/button&gt;\n</pre>\n<p>Modifing the template to add this button spurs us to take one more incremental improvement and migrate the template to its own file called <code>hero-detail.component.html</code></p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-detail.component.html\">&lt;!-- app/hero-detail.component.html --&gt;\n\n&lt;div *ngIf=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;\n    &lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name: &lt;/label&gt;\n    &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\" /&gt;\n  &lt;/div&gt;\n  &lt;button (click)=\"goBack()\"&gt;Back&lt;/button&gt;\n&lt;/div&gt;\n</pre>\n<p>We update the component metadata with a <code>templateUrl</code> pointing to the template file that we just created.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (templateUrl)\">// app/hero-detail.component.ts (templateUrl)\n\ntemplateUrl: 'app/hero-detail.component.html',\n</pre>\n<p>Here's the (nearly) finished <code>HeroDetailComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (latest)\">// app/hero-detail.component.ts (latest)\n\nimport { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { Hero } from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'my-hero-detail',\n  templateUrl: 'app/hero-detail.component.html',\n})\nexport class HeroDetailComponent implements OnInit {\n  hero: Hero;\n\n  constructor(\n    private heroService: HeroService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) =&gt; {\n      let id = +params['id'];\n      this.heroService.getHero(id)\n        .then(hero =&gt; this.hero = hero);\n    });\n  }\n\n  goBack() {\n    window.history.back();\n  }\n}\n</pre>\n<h2 id=\"select-a-dashboard-hero\">Select a <em>Dashboard</em> Hero</h2> <p>When a user selects a hero in the dashboard, the app should navigate to the <code>HeroDetailComponent</code> to view and edit the selected hero.</p> <p>In the dashboard template we bound each hero's click event to the <code>gotoDetail</code> method, passing along the selected <code>hero</code> entity.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/dashboard.component.html (click binding)\">&lt;!-- app/dashboard.component.html (click binding) --&gt;\n\n&lt;div *ngFor=\"let hero of heroes\" (click)=\"gotoDetail(hero)\" class=\"col-1-4\"&gt;\n</pre>\n<p>We stubbed the <code>gotoDetail</code> method when we rewrote the <code>DashboardComponent</code>. Now we give it a real implementation.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (gotoDetail)\">// app/dashboard.component.ts (gotoDetail)\n\ngotoDetail(hero: Hero) {\n  let link = ['/detail', hero.id];\n  this.router.navigate(link);\n}\n</pre>\n<p>The <code>gotoDetail</code> method navigates in two steps:</p> <ol> <li>set a route <em>link parameters array</em>\n</li> <li>pass the array to the router's navigate method.</li> </ol> <p>We wrote <em>link parameters arrays</em> in the <code>AppComponent</code> for the navigation links. Those arrays had only one element, the path of the destination route.</p> <p>This array has two elements, the <strong><em>path</em></strong> of the destination route and a <strong><em>route parameter</em></strong> with an <code>id</code> field set to the value of the selected hero's <code>id</code>.</p> <p>The two array items align with the <strong><em>path</em></strong> and <strong><em>:id</em></strong> token in the parameterized <code>HeroDetail</code> route configuration we added to <code>app.routing.ts</code> earlier in the chapter.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (hero detail route)\">// app/app.routing.ts (hero detail route)\n\n{\n  path: 'detail/:id',\n  component: HeroDetailComponent\n},\n</pre>\n<p>The <code>DashboardComponent</code> doesn't have the router yet. We obtain it in the usual way: import the <code>router</code> reference and inject it in the constructor (along with the <code>HeroService</code>):</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (excerpts)\">// app/dashboard.component.ts (excerpts)\n\nimport { Router } from '@angular/router';\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(\n  private router: Router,\n  private heroService: HeroService) {\n}\n</pre>\n<p>Refresh the browser and select a hero from the dashboard; the app should navigate directly to that hero’s details.</p> <h2 id=\"select-a-hero-in-the-heroescomponent-\">Select a Hero in the <em>HeroesComponent</em>\n</h2> <p>We'll do something similar in the <code>HeroesComponent</code>.</p> <p>That component's current template exhibits a \"master/detail\" style with the list of heroes at the top and details of the selected hero below.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes.component.ts (current template)\">// app/heroes.component.ts (current template)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My Heroes&lt;/h2&gt;\n  &lt;ul class=\"heroes\"&gt;\n    &lt;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"hero === selectedHero\"\n      (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;my-hero-detail [hero]=\"selectedHero\"&gt;&lt;/my-hero-detail&gt;\n`,\n</pre>\n<p>Delete the last line of the template with the <code>&lt;my-hero-detail&gt;</code> tags.</p> <p>We'll no longer show the full <code>HeroDetailComponent</code> here. We're going to display the hero detail on its own page and route to it as we did in the dashboard.</p> <p>But we'll throw in a small twist for variety. When the user selects a hero from the list, we <em>won't</em> go to the detail page. We'll show a <em>mini-detail</em> on <em>this</em> page instead and make the user click a button to navigate to the <em>full detail </em>page.</p> <h3 id=\"add-the-mini-detail-\">Add the <em>mini-detail</em>\n</h3> <p>Add the following HTML fragment at the bottom of the template where the <code>&lt;my-hero-detail&gt;</code> used to be:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngIf=\"selectedHero\"&gt;\n  &lt;h2&gt;\n    {{selectedHero.name | uppercase}} is my hero\n  &lt;/h2&gt;\n  &lt;button (click)=\"gotoDetail()\"&gt;View Details&lt;/button&gt;\n&lt;/div&gt;\n</pre>\n<p>After clicking a hero, the user should see something like this below the hero list:</p> <img src=\"https://angular.io/resources/images/devguide/toh/mini-hero-detail.png\" alt=\"Mini Hero Detail\" height=\"70\"><h3 id=\"format-with-the-uppercasepipe-\">Format with the <em>UpperCasePipe</em>\n</h3> <p>Notice that the hero's name is displayed in CAPITAL LETTERS. That's the effect of the <code>UpperCasePipe</code> that we slipped into the interpolation binding. Look for it right after the pipe operator ( | ).</p> <pre language=\"html\" format=\"\" data-language=\"html\">{{selectedHero.name | uppercase}} is my hero\n</pre>\n<p>Pipes are a good way to format strings, currency amounts, dates and other display data. Angular ships with several pipes and we can write our own.</p> <div class=\"l-sub-section\">\n<p>Learn about pipes in the <a href=\"../guide/pipes\">Pipes</a> chapter.</p> </div>\n<h3 id=\"move-content-out-of-the-component-file\">Move content out of the component file</h3> <p>We are not done. We still have to update the component class to support navigation to the <code>HeroDetailComponent</code> when the user clicks the <em>View Details</em> button.</p> <p>This component file is really big. Most of it is either template or CSS styles. It's difficult to find the component logic amidst the noise of HTML and CSS.</p> <p>Let's migrate the template and the styles to their own files before we make any more changes:</p> <ol> <li>\n<em>Cut-and-paste</em> the template contents into a new <code>heroes.component.html</code> file.</li> <li>\n<em>Cut-and-paste</em> the styles contents into a new <code>heroes.component.css</code> file.</li> <li>\n<em>Set</em> the component metadata's <code>templateUrl</code> and <code>styleUrls</code> properties to refer to both files.</li> </ol> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes.component.ts (revised metadata)\">// app/heroes.component.ts (revised metadata)\n\n@Component({\n  selector: 'my-heroes',\n  templateUrl: 'app/heroes.component.html',\n  styleUrls:  ['app/heroes.component.css']\n})\n</pre>\n<p>Now we can see what's going on as we update the component class along the same lines as the dashboard:</p> <ol> <li>Import the <code>router</code>\n</li> <li>Inject the <code>router</code> in the constructor (along with the <code>HeroService</code>)</li> <li>Implement the <code>gotoDetail</code> method by calling the <code>router.navigate</code> method with a two-part <code>HeroDetail</code> <em>link parameters array</em>.</li> </ol> <p>Here's the revised component class:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/heroes.component.ts (class)\">// app/heroes.component.ts (class)\n\nexport class HeroesComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(\n    private router: Router,\n    private heroService: HeroService) { }\n\n  getHeroes() {\n    this.heroService.getHeroes().then(heroes =&gt; this.heroes = heroes);\n  }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero) { this.selectedHero = hero; }\n\n  gotoDetail() {\n    this.router.navigate(['/detail', this.selectedHero.id]);\n  }\n}\n</pre>\n<p>Refresh the browser and start clicking. We can navigate around the app, from the dashboard to hero details and back, for heroes list to the mini-detail to the hero details and back to the heroes again. We can jump back and forth between the dashboard and the heroes.</p> <p>We've met all of the navigational requirements that propelled this chapter.</p> <h2 id=\"styling-the-app\">Styling the App</h2> <p>The app is functional but pretty ugly. Our creative designer team provided some CSS files to make it look better.</p> <h3 id=\"a-dashboard-with-style\">A Dashboard with Style</h3> <p>The designers think we should display the dashboard heroes in a row of rectangles. They've given us ~60 lines of CSS for this purpose including some simple media queries for responsive design.</p> <p>If we paste these ~60 lines into the component <code>styles</code> metadata, they'll completely obscure the component logic. Let's not do that. It's easier to edit CSS in a separate <code>*.css</code> file anyway.</p> <p>Add a <code>dashboard.component.css</code> file to the <code>app</code> folder and reference that file in the component metadata's <code>styleUrls</code> array property like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/dashboard.component.ts (styleUrls)\">// app/dashboard.component.ts (styleUrls)\n\nstyleUrls: ['app/dashboard.component.css']\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>styleUrls</code> property is an array of style file names (with paths). We could list multiple style files from different locations if we needed them. As with <code>templateUrl</code>, we must specify the path <em>all the way back to the application root</em>.</p> </div>\n<h3 id=\"stylish-hero-details\">Stylish Hero Details</h3> <p>The designers also gave us CSS styles specifically for the <code>HeroDetailComponent</code>.</p> <p>Add a <code>hero-detail.component.css</code> to the <code>app</code> folder and refer to that file inside the <code>styleUrls</code> array as we did for <code>DashboardComponent</code>.</p> <p>Here's the content for the aforementioned component CSS files.</p> <pre language=\"css\" name=\"app/hero-detail.component.css\" format=\"linenums\" data-language=\"css\">/* app/hero-detail.component.css */\n\nlabel {\n  display: inline-block;\n  width: 3em;\n  margin: .5em 0;\n  color: #607D8B;\n  font-weight: bold;\n}\ninput {\n  height: 2em;\n  font-size: 1em;\n  padding-left: .4em;\n}\nbutton {\n  margin-top: 20px;\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer; cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\nbutton:disabled {\n  background-color: #eee;\n  color: #ccc; \n  cursor: auto;\n}\n</pre>\n<pre language=\"css\" name=\"app/dashboard.component.css\" format=\"linenums\" data-language=\"css\">/* app/dashboard.component.css */\n\n[class*='col-'] {\n  float: left;\n}\n*, *:after, *:before {\n    -webkit-box-sizing: border-box;\n    -moz-box-sizing: border-box;\n    box-sizing: border-box;\n}\nh3 {\n  text-align: center; margin-bottom: 0;\n}\n[class*='col-'] {\n  padding-right: 20px;\n  padding-bottom: 20px;\n}\n[class*='col-']:last-of-type {\n  padding-right: 0;\n}\n.grid {\n  margin: 0;\n}\n.col-1-4 {\n  width: 25%;\n}\n.module {\n    padding: 20px;\n    text-align: center;\n    color: #eee;\n    max-height: 120px;\n    min-width: 120px;\n    background-color: #607D8B;\n    border-radius: 2px;\n}\nh4 {\n  position: relative;\n}\n.module:hover {\n  background-color: #EEE;\n  cursor: pointer;\n  color: #607d8b;\n}\n.grid-pad {\n  padding: 10px 0;\n}\n.grid-pad &gt; [class*='col-']:last-of-type {\n  padding-right: 20px;\n}\n@media (max-width: 600px) {\n    .module {\n      font-size: 10px;\n      max-height: 75px; }\n}\n@media (max-width: 1024px) {\n    .grid {\n      margin: 0;\n    }\n    .module {\n      min-width: 60px;\n    }\n}\n</pre>\n<h3 id=\"style-the-navigation-links\">Style the Navigation Links</h3> <p>The designers gave us CSS to make the navigation links in our <code>AppComponent</code> look more like selectable buttons. We cooperated by surrounding those links in <code>&lt;nav&gt;</code> tags.</p> <p>Add a <code>app.component.css</code> file to the <code>app</code> folder with the following content.</p> <pre language=\"css\" format=\"linenums\" data-language=\"css\" name=\"app/app.component.css (navigation styles)\">/* app/app.component.css (navigation styles) */\n\nh1 {\n  font-size: 1.2em;\n  color: #999;\n  margin-bottom: 0;\n}\nh2 {\n  font-size: 2em;\n  margin-top: 0;\n  padding-top: 0;\n}\nnav a {\n  padding: 5px 10px;\n  text-decoration: none;\n  margin-top: 10px;\n  display: inline-block;\n  background-color: #eee;\n  border-radius: 4px;\n}\nnav a:visited, a:link {\n  color: #607D8B;\n}\nnav a:hover {\n  color: #039be5;\n  background-color: #CFD8DC;\n}\nnav a.active {\n  color: #039be5;\n}\n</pre>\n<div class=\"l-sub-section\">\n<p><strong>The <em>routerLinkActive</em> directive</strong></p> <p>The Angular Router provides a <code>routerLinkActive</code> directive we can use to add a class to the HTML navigation element whose route matches the active route. All we have to do is define the style for it. Sweet!</p> </div>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (active router links)\">// app/app.component.ts (active router links)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"/dashboard\" routerLinkActive=\"active\"&gt;Dashboard&lt;/a&gt;\n    &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`,\n</pre>\n<p>Set the <code>AppComponent</code>’s <code>styleUrls</code> property to this CSS file.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (styleUrls)\">// app/app.component.ts (styleUrls)\n\nstyleUrls: ['app/app.component.css'],\n</pre>\n<h3 id=\"global-application-styles\">Global application styles</h3> <p>When we add styles to a component, we're keeping everything a component needs — HTML, the CSS, the code — together in one convenient place. It's pretty easy to package it all up and re-use the component somewhere else.</p> <p>We can also create styles at the <em>application level</em> outside of any component.</p> <p>Our designers provided some basic styles to apply to elements across the entire app. These correspond to the full set of master styles that we introduced earlier (see <a href=\"#\">QuickStart, \"Add some style\"</a>). Here is an excerpt.</p> <pre language=\"css\" format=\"\" data-language=\"css\" name=\"styles.css (app styles excerpt)\">/* styles.css (app styles excerpt) */\n\n/* Master Styles */\nh1 {\n  color: #369; \n  font-family: Arial, Helvetica, sans-serif;   \n  font-size: 250%;\n}\nh2, h3 { \n  color: #444;\n  font-family: Arial, Helvetica, sans-serif;   \n  font-weight: lighter;\n}\nbody { \n  margin: 2em; \n}\nbody, input[text], button { \n  color: #888; \n  font-family: Cambria, Georgia; \n}\n/* . . . */\n/* everywhere else */\n* { \n  font-family: Arial, Helvetica, sans-serif; \n}\n</pre>\n<p>Add a new file named <code>styles.css</code> in the root folder, if there isn't one already. Ensure that it contains the <a href=\"https://raw.githubusercontent.com/angular/angular.io/master/public/docs/_examples/styles.css\">master styles given here</a>.</p> <p>If necessary, also edit <code>index.html</code> to refer to this stylesheet.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (link ref)\">&lt;!-- index.html (link ref) --&gt;\n\n&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</pre>\n<p>Look at the app now. Our dashboard, heroes, and navigation links are styling!</p> <img src=\"https://angular.io/resources/images/devguide/toh/dashboard-top-heroes.png\" alt=\"View navigations\"><h2 id=\"application-structure-and-code\">Application structure and code</h2> <p>Review the sample source code in the <live-example></live-example> for this chapter. Verify that we have the following structure:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.component.css</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">app.routing.ts</div>\n<div class=\"file\">dashboard.component.css</div>\n<div class=\"file\">dashboard.component.html</div>\n<div class=\"file\">dashboard.component.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.css</div>\n<div class=\"file\">hero-detail.component.html</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">heroes.component.css</div>\n<div class=\"file\">heroes.component.html</div>\n<div class=\"file\">heroes.component.ts</div>\n<div class=\"file\">main.ts</div>\n<div class=\"file\">mock-heroes.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.json</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h2 id=\"recap\">Recap</h2> <h3 id=\"the-road-behind\">The Road Behind</h3> <p>We travelled a great distance in this chapter.</p> <ul> <li>We added the Angular <em>Component Router</em> to navigate among different components.</li> <li>We learned how to create router links to represent navigation menu items.</li> <li>We used router parameters to navigate to the details of user selected hero.</li> <li>We shared the <code>HeroService</code> among multiple components.</li> <li>We moved HTML and CSS out of the component file and into their own files.</li> <li>We added the <code>uppercase</code> pipe to format data.</li> </ul> <h3 id=\"the-road-ahead\">The Road Ahead</h3> <p>We have much of the foundation we need to build an application. We're still missing a key piece: remote data access.</p> <p>In the next chapter, we’ll replace our mock data with data retrieved from a server using http.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"toh-pt6\">Http</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt5.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt5.html</a>\n  </p>\n</div>\n","tutorial/toh-pt6":"<h1 class=\"hero-title text-display-1 \">Http</h1>\n\n<div class=\"banner\"><p class=\"text-body\">We convert our service and components to use Http</p></div>\n<h1 id=\"getting-and-saving-data-with-http\">Getting and Saving Data with HTTP</h1> <p>Our stakeholders appreciate our progress. Now they want to get the hero data from a server, let users add, edit, and delete heroes, and save these changes back to the server.</p> <p>In this chapter we teach our application to make the corresponding HTTP calls to a remote server's web API.</p> <p>Run the <live-example></live-example> for this part.</p> <h2 id=\"where-we-left-off\">Where We Left Off</h2> <p>In the <a href=\"toh-pt5\">previous chapter</a>, we learned to navigate between the dashboard and the fixed heroes list, editing a selected hero along the way. That's our starting point for this chapter.</p> <h3 id=\"keep-the-app-transpiling-and-running\">Keep the app transpiling and running</h3> <p>Open a terminal/console window and enter the following command to start the TypeScript compiler, start the server, and watch for changes:</p> <pre language=\"bash\" data-language=\"bash\">npm start\n</pre>\n<p>The application runs and updates automatically as we continue to build the Tour of Heroes.</p> <h1>Providing HTTP Services</h1>\n<p><code>Http</code> is <strong><em>not</em></strong> a core Angular module. It's Angular's optional approach to web access and it exists as a separate add-on module called <code>@angular/http</code>, shipped in a separate script file as part of the Angular npm package.</p> <p>Fortunately we're ready to import from <code>@angular/http</code> because <code>systemjs.config</code> configured <em>SystemJS</em> to load that library when we need it.</p> <h3 id=\"register-provide-http-services\">Register (provide) <em>HTTP</em> services</h3> <p>Our app will depend upon the Angular <code>http</code> service which itself depends upon other supporting services. The <code>HttpModule</code> from <code>@angular/http</code> library holds providers for the complete set of http services.</p> <p>We should be able to access <code>Http</code> services from anywhere in the application. So we register them in the <code>imports</code> array of <span ngio-ex>app.module.ts</span> where we bootstrap the application and its root <code>AppComponent</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (v.1)\">// app.module.ts (v.1)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { HttpModule }     from '@angular/http';\n\nimport { AppComponent }   from './app.component';\nimport { routing }        from './app.routing';\n\nimport { HeroesComponent }      from './heroes.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroSearchComponent } from './hero-search.component';\n\nimport { HeroService }  from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HttpModule\n  ],\n\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroSearchComponent\n  ],\n  providers: [\n    HeroService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<p>Notice that we supply <code>HttpModule</code> as part of the <em>imports</em> array in root NgModule <code>AppModule</code>.</p> <h2 id=\"simulating-the-web-api\">Simulating the web API</h2> <p>We recommend registering application-wide services in the root <code>NgModule</code> <em>providers</em>.</p> <p>Our application is in the early stages of development and far from ready for production. We don't even have a web server that can handle requests for heroes. Until we do, <em>we'll have to fake it</em>.</p> <p>We're going to <em>trick</em> the HTTP client into fetching and saving data from a mock service, the <em>in-memory web API</em>.</p> <p>Here is a version of <code>app.module.ts</code> that performs this trick</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (final)\">// app.module.ts (final)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\n// Imports for loading &amp; configuring the in-memory web api\nimport { HttpModule, XHRBackend } from '@angular/http';\n\nimport { InMemoryBackendService, SEED_DATA } from 'angular2-in-memory-web-api';\nimport { InMemoryDataService }               from './in-memory-data.service';\n\nimport { AppComponent }   from './app.component';\nimport { routing }        from './app.routing';\n\nimport { HeroesComponent }      from './heroes.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService }  from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HttpModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    DashboardComponent,\n    HeroDetailComponent\n  ],\n  providers: [\n    HeroService,\n    { provide: XHRBackend, useClass: InMemoryBackendService }, // in-mem server\n    { provide: SEED_DATA,  useClass: InMemoryDataService }     // in-mem server data\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<p>We're replacing the default <code>XHRBackend</code>, the service that talks to the remote server, with the in-memory web API service after priming it as follows:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/in-memory-data.service.ts\">// app/in-memory-data.service.ts\n\nexport class InMemoryDataService {\n  createDb() {\n    let heroes = [\n      {id: 11, name: 'Mr. Nice'},\n      {id: 12, name: 'Narco'},\n      {id: 13, name: 'Bombasto'},\n      {id: 14, name: 'Celeritas'},\n      {id: 15, name: 'Magneta'},\n      {id: 16, name: 'RubberMan'},\n      {id: 17, name: 'Dynama'},\n      {id: 18, name: 'Dr IQ'},\n      {id: 19, name: 'Magma'},\n      {id: 20, name: 'Tornado'}\n    ];\n    return {heroes};\n  }\n}\n</pre>\n<p>This file replaces the <code>mock-heroes.ts</code> which is now safe to delete.</p>\n<div class=\"alert is-helpful\">\n<p>This chapter is an introduction to the Angular HTTP library. Please don't be distracted by the details of this backend substitution. Just follow along with the example.</p> <p>Learn more later about the in-memory web API in the <a href=\"#\">HTTP client chapter</a>. Remember, the in-memory web API is only useful in the early stages of development and for demonstrations such as this Tour of Heroes. Skip it when you have a real web API server.</p> </div>\n<h2 id=\"heroes-and-http\">Heroes and HTTP</h2> <p>Look at our current <code>HeroService</code> implementation</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">getHeroes() {\n  return Promise.resolve(HEROES);\n}\n</pre>\n<p>We returned a Promise resolved with mock heroes. It may have seemed like overkill at the time, but we were anticipating the day when we fetched heroes with an HTTP client and we knew that would have to be an asynchronous operation.</p> <p>That day has arrived! Let's convert <code>getHeroes()</code> to use HTTP:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (new constructor and revised getHeroes)\">// app/hero.service.ts (new constructor and revised getHeroes)\n\n  private heroesUrl = 'app/heroes';  // URL to web api\n\n  constructor(private http: Http) { }\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl)\n               .toPromise()\n               .then(response =&gt; response.json().data as Hero[])\n               .catch(this.handleError);\n  }\n</pre>\n<h3 id=\"http-_promise-\">HTTP Promise</h3> <p>We're still returning a Promise but we're creating it differently.</p> <p>The Angular <code>http.get</code> returns an RxJS <code>Observable</code>. <em>Observables</em> are a powerful way to manage asynchronous data flows. We'll learn about <a href=\"#observables\">Observables</a> later in this chapter.</p> <p>For <em>now</em> we get back on familiar ground by immediately by converting that <code>Observable</code> to a <code>Promise</code> using the <code>toPromise</code> operator.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">.toPromise()\n</pre>\n<p>Unfortunately, the Angular <code>Observable</code> doesn't have a <code>toPromise</code> operator ... not out of the box. The Angular <code>Observable</code> is a bare-bones implementation.</p> <p>There are scores of operators like <code>toPromise</code> that extend <code>Observable</code> with useful capabilities. If we want those capabilities, we have to add the operators ourselves. That's as easy as importing them from the RxJS library like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import 'rxjs/add/operator/toPromise';\n</pre>\n<h3 id=\"extracting-the-data-in-the-then-callback\">Extracting the data in the <em>then</em> callback</h3> <p>In the <em>promise</em>'s <code>then</code> callback we call the <code>json</code> method of the http <code>Response</code> to extract the data within the response.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">.then(response =&gt; response.json().data as Hero[])\n</pre>\n<p>That response JSON has a single <code>data</code> property. The <code>data</code> property holds the array of <em>heroes</em> that the caller really wants. So we grab that array and return it as the resolved Promise value.</p> <div class=\"alert is-important\">\n<p>Pay close attention to the shape of the data returned by the server. This particular <em>in-memory web API</em> example happens to return an object with a <code>data</code> property. Your API might return something else.</p> <p>Adjust the code to match <em>your web API</em>.</p> </div>\n<p>The caller is unaware of these machinations. It receives a Promise of <em>heroes</em> just as it did before. It has no idea that we fetched the heroes from the (mock) server. It knows nothing of the twists and turns required to convert the HTTP response into heroes. Such is the beauty and purpose of delegating data access to a service like this <code>HeroService</code>.</p> <h3 id=\"error-handling\">Error Handling</h3> <p>At the end of <code>getHeroes()</code> we <code>catch</code> server failures and pass them to an error handler:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">.catch(this.handleError);\n</pre>\n<p>This is a critical step! We must anticipate HTTP failures as they happen frequently for reasons beyond our control.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private handleError(error: any) {\n  console.error('An error occurred', error);\n  return Promise.reject(error.message || error);\n}\n</pre>\n<p>In this demo service we log the error to the console; we should do better in real life.</p> <p>We've also decided to return a user friendly form of the error to the caller in a rejected promise so that the caller can display a proper error message to the user.</p> <h3 id=\"-_promise-s-are-_promise-s\">Promises are Promises</h3> <p>Although we made significant <em>internal</em> changes to <code>getHeroes()</code>, the public signature did not change. We still return a Promise. We won't have to update any of the components that call <code>getHeroes()</code>.</p> <h2 id=\"add-edit-delete\">Add, Edit, Delete</h2> <p>Our stakeholders are incredibly pleased with the added flexibility from the API integration, but it doesn't stop there. Next we want to add the capability to add, edit and delete heroes.</p> <p>We'll complete <code>HeroService</code> by creating <code>post</code>, <code>put</code> and <code>delete</code> methods to meet our new requirements.</p> <h3 id=\"post\">Post</h3> <p>We will be using <code>post</code> to add new heroes. Post requests require a little bit more setup than Get requests:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (post)\">// app/hero.service.ts (post)\n\n// Add new Hero\nprivate post(hero: Hero): Promise&lt;Hero&gt; {\n  let headers = new Headers({\n    'Content-Type': 'application/json'});\n\n  return this.http\n             .post(this.heroesUrl, JSON.stringify(hero), {headers: headers})\n             .toPromise()\n             .then(res =&gt; res.json().data)\n             .catch(this.handleError);\n}\n</pre>\n<p>For Post requests we create a header and set the content type to <code>application/json</code>. We'll call <code>JSON.stringify</code> before we post to convert the hero object to a string.</p> <h3 id=\"put\">Put</h3> <p>Put will be used to update an individual hero. Its structure is very similar to Post requests. The only difference is that we have to change the URL slightly by appending the id of the hero we want to update.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (put)\">// app/hero.service.ts (put)\n\n// Update existing Hero\nprivate put(hero: Hero) {\n  let headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n\n  let url = `${this.heroesUrl}/${hero.id}`;\n\n  return this.http\n             .put(url, JSON.stringify(hero), {headers: headers})\n             .toPromise()\n             .then(() =&gt; hero)\n             .catch(this.handleError);\n}\n</pre>\n<h3 id=\"delete\">Delete</h3> <p>Delete will be used to delete heroes and its format is like <code>put</code> except for the function name.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (delete)\">// app/hero.service.ts (delete)\n\ndelete(hero: Hero) {\n  let headers = new Headers();\n  headers.append('Content-Type', 'application/json');\n\n  let url = `${this.heroesUrl}/${hero.id}`;\n\n  return this.http\n             .delete(url, {headers: headers})\n             .toPromise()\n             .catch(this.handleError);\n}\n</pre>\n<p>We add a <code>catch</code> to handle errors for all three methods.</p> <h3 id=\"save\">Save</h3> <p>We combine the call to the private <code>post</code> and <code>put</code> methods in a single <code>save</code> method. This simplifies the public API and makes the integration with <code>HeroDetailComponent</code> easier. <code>HeroService</code> determines which method to call based on the state of the <code>hero</code> object. If the hero already has an id we know it's an edit. Otherwise we know it's an add.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (save)\">// app/hero.service.ts (save)\n\nsave(hero: Hero): Promise&lt;Hero&gt;  {\n  if (hero.id) {\n    return this.put(hero);\n  }\n  return this.post(hero);\n}\n</pre>\n<p>After these additions our <code>HeroService</code> looks like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero.service.ts\">// app/hero.service.ts\n\nimport { Injectable }    from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { Hero } from './hero';\n\n@Injectable()\nexport class HeroService {\n\n  private heroesUrl = 'app/heroes';  // URL to web api\n\n  constructor(private http: Http) { }\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl)\n               .toPromise()\n               .then(response =&gt; response.json().data as Hero[])\n               .catch(this.handleError);\n  }\n\n  getHero(id: number) {\n    return this.getHeroes()\n               .then(heroes =&gt; heroes.find(hero =&gt; hero.id === id));\n  }\n\n  save(hero: Hero): Promise&lt;Hero&gt;  {\n    if (hero.id) {\n      return this.put(hero);\n    }\n    return this.post(hero);\n  }\n\n  delete(hero: Hero) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    let url = `${this.heroesUrl}/${hero.id}`;\n\n    return this.http\n               .delete(url, {headers: headers})\n               .toPromise()\n               .catch(this.handleError);\n  }\n\n  // Add new Hero\n  private post(hero: Hero): Promise&lt;Hero&gt; {\n    let headers = new Headers({\n      'Content-Type': 'application/json'});\n\n    return this.http\n               .post(this.heroesUrl, JSON.stringify(hero), {headers: headers})\n               .toPromise()\n               .then(res =&gt; res.json().data)\n               .catch(this.handleError);\n  }\n\n  // Update existing Hero\n  private put(hero: Hero) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    let url = `${this.heroesUrl}/${hero.id}`;\n\n    return this.http\n               .put(url, JSON.stringify(hero), {headers: headers})\n               .toPromise()\n               .then(() =&gt; hero)\n               .catch(this.handleError);\n  }\n\n  private handleError(error: any) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n</pre>\n<h2 id=\"updating-components\">Updating Components</h2> <p>Loading heroes using <code>Http</code> required no changes outside of <code>HeroService</code>, but we added a few new features as well. In the following section we will update our components to use our new methods to add, edit and delete heroes.</p> <p>Before we can add those methods, we need to initialize some variables with their respective imports.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (excerpt)\">// app/hero-detail.component.ts (excerpt)\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nexport class HeroDetailComponent implements OnInit {\n  @Input() hero: Hero;\n  @Output() close = new EventEmitter();\n  error: any;\n  navigated = false; // true if navigated here\n</pre>\n<h3 id=\"add-edit-in-the-herodetailcomponent-\">Add/Edit in the <em>HeroDetailComponent</em>\n</h3> <p>We already have <code>HeroDetailComponent</code> for viewing details about a specific hero. Add and Edit are natural extensions of the detail view, so we are able to reuse <code>HeroDetailComponent</code> with a few tweaks.</p> <p>The original component was created to render existing data, but to add new data we have to initialize the <code>hero</code> property to an empty <code>Hero</code> object.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (ngOnInit)\">// app/hero-detail.component.ts (ngOnInit)\n\nngOnInit() {\n  this.route.params.forEach((params: Params) =&gt; {\n    if (params['id'] !== undefined) {\n      let id = +params['id'];\n      this.navigated = true;\n      this.heroService.getHero(id)\n          .then(hero =&gt; this.hero = hero);\n    } else {\n      this.navigated = false;\n      this.hero = new Hero();\n    }\n  });\n}\n</pre>\n<p>In order to differentiate between add and edit we are adding a check to see if an id is passed in the URL. If the id is absent we bind <code>HeroDetailComponent</code> to an empty <code>Hero</code> object. In either case, any edits made through the UI will be bound back to the same <code>hero</code> property.</p> <p>Add a save method to <code>HeroDetailComponent</code> and call the corresponding save method in <code>HeroesService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (save)\">// app/hero-detail.component.ts (save)\n\nsave() {\n  this.heroService\n      .save(this.hero)\n      .then(hero =&gt; {\n        this.hero = hero; // saved hero, w/ id if new\n        this.goBack(hero);\n      })\n      .catch(error =&gt; this.error = error); // TODO: Display error message\n}\n</pre>\n<p>The same save method is used for both add and edit since <code>HeroService</code> will know when to call <code>post</code> vs <code>put</code> based on the state of the <code>Hero</code> object.</p> <p>After we save a hero, we redirect the browser back to the previous page using the <code>goBack()</code> method.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-detail.component.ts (goBack)\">// app/hero-detail.component.ts (goBack)\n\ngoBack(savedHero: Hero = null) {\n  this.close.emit(savedHero);\n  if (this.navigated) { window.history.back(); }\n}\n</pre>\n<p>Here we call <code>emit</code> to notify that we just added or modified a hero. <code>HeroesComponent</code> is listening for this notification and will automatically refresh the list of heroes to include our recent updates.</p> <div class=\"l-sub-section\">\n<p>The <code>emit</code> \"handshake\" between <code>HeroDetailComponent</code> and <code>HeroesComponent</code> is an example of component to component communication. This is a topic for another day, but we have detailed information in our <a href=\"#\">Component Interaction Cookbook</a></p> </div>\n<p>Here is <code>HeroDetailComponent</code> with its new save button and the corresponding HTML.</p> <img src=\"https://angular.io/resources/images/devguide/toh/hero-details-save-button.png\" alt=\"Hero Details With Save Button\"><pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-detail.component.html (save)\">&lt;!-- app/hero-detail.component.html (save) --&gt;\n\n&lt;button (click)=\"save()\"&gt;Save&lt;/button&gt;\n</pre>\n<h3 id=\"add-delete-in-the-heroescomponent-\">Add/Delete in the <em>HeroesComponent</em>\n</h3> <p>We'll be reporting propagated HTTP errors, let's start by adding the following field to the <code>HeroesComponent</code> class:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">error: any;\n</pre>\n<p>The user can <em>add</em> a new hero by clicking a button and entering a name.</p> <p>When the user clicks the <em>Add New Hero</em> button, we display the <code>HeroDetailComponent</code>. We aren't navigating to the component so it won't receive a hero <code>id</code>; as we noted above, that is the component's cue to create and present an empty hero.</p> <p>Add the following to the heroes component HTML, just below the hero list (<code>&lt;ul class=\"heroes\"&gt;...&lt;/ul&gt;</code>).</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/heroes.component.html (add-and-error)\">&lt;!-- app/heroes.component.html (add-and-error) --&gt;\n\n&lt;div class=\"error\" *ngIf=\"error\"&gt;{{error}}&lt;/div&gt;\n&lt;button (click)=\"addHero()\"&gt;Add New Hero&lt;/button&gt;\n&lt;div *ngIf=\"addingHero\"&gt;\n  &lt;my-hero-detail (close)=\"close($event)\"&gt;&lt;/my-hero-detail&gt;\n&lt;/div&gt;\n</pre>\n<p>The first line will display an error message if there is any. The remaining HTML is for adding heroes.</p> <p>The user can <em>delete</em> an existing hero by clicking a delete button next to the hero's name. Add the following to the heroes component HTML right after the hero name in the repeated <code>&lt;li&gt;</code> tag:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/heroes.component.html (delete)\">&lt;!-- app/heroes.component.html (delete) --&gt;\n\n&lt;button class=\"delete-button\" (click)=\"deleteHero(hero, $event)\"&gt;Delete&lt;/button&gt;\n</pre>\n<p>Add the following to the bottom of the <code>HeroesComponent</code> CSS file:</p> <pre language=\"css\" format=\"\" data-language=\"css\" name=\"app/heroes.component.css (additions)\">/* app/heroes.component.css (additions) */\n\n.error {color:red;}\nbutton.delete-button{\n  float:right;\n  background-color: gray !important;\n  color:white;\n}\n</pre>\n<p>Now let's fix-up the <code>HeroesComponent</code> to support the <em>add</em> and <em>delete</em> actions used in the template. Let's start with <em>add</em>.</p> <p>Implement the click handler for the <em>Add New Hero</em> button.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes.component.ts (addHero)\">// app/heroes.component.ts (addHero)\n\naddHero() {\n  this.addingHero = true;\n  this.selectedHero = null;\n}\n\nclose(savedHero: Hero) {\n  this.addingHero = false;\n  if (savedHero) { this.getHeroes(); }\n}\n</pre>\n<p>The <code>HeroDetailComponent</code> does most of the work. All we do is toggle an <code>*ngIf</code> flag that swaps it into the DOM when we add a hero and removes it from the DOM when the user is done.</p> <p>The <em>delete</em> logic is a bit trickier.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes.component.ts (deleteHero)\">// app/heroes.component.ts (deleteHero)\n\ndeleteHero(hero: Hero, event: any) {\n  event.stopPropagation();\n  this.heroService\n      .delete(hero)\n      .then(res =&gt; {\n        this.heroes = this.heroes.filter(h =&gt; h !== hero);\n        if (this.selectedHero === hero) { this.selectedHero = null; }\n      })\n      .catch(error =&gt; this.error = error);\n}\n</pre>\n<p>Of course we delegate the persistence of hero deletion to the <code>HeroService</code>. But the component is still responsible for updating the display. So the <em>delete</em> method removes the deleted hero from the list.</p> <h3 id=\"let-s-see-it\">Let's see it</h3> <p>Here are the fruits of labor in action:</p> <img src=\"https://angular.io/resources/images/devguide/toh/toh-http.anim.gif\" alt=\"Heroes List Editing w/ HTTP\"><h2 id=\"-_observable-s\">Observables</h2> <p>Each <code>Http</code> method returns an <code>Observable</code> of HTTP <code>Response</code> objects.</p> <p>Our <code>HeroService</code> converts that <code>Observable</code> into a <code>Promise</code> and returns the promise to the caller. In this section we learn to return the <code>Observable</code> directly and discuss when and why that might be a good thing to do.</p> <h3 id=\"background\">Background</h3> <p>An <em>observable</em> is a stream of events that we can process with array-like operators.</p> <p>Angular core has basic support for observables. We developers augment that support with operators and extensions from the <a href=\"http://reactivex.io/rxjs/\">RxJS Observables</a> library. We'll see how shortly.</p> <p>Recall that our <code>HeroService</code> quickly chained the <code>toPromise</code> operator to the <code>Observable</code> result of <code>http.get</code>. That operator converted the <code>Observable</code> into a <code>Promise</code> and we passed that promise back to the caller.</p> <p>Converting to a promise is often a good choice. We typically ask <code>http</code> to fetch a single chunk of data. When we receive the data, we're done. A single result in the form of a promise is easy for the calling component to consume and it helps that promises are widely understood by JavaScript programmers.</p> <p>But requests aren't always \"one and done\". We may start one request, then cancel it, and make a different request before the server has responded to the first request. Such a <em>request-cancel-new-request</em> sequence is difficult to implement with <em>Promises</em>. It's easy with <em>Observables</em> as we'll see.</p> <h3 id=\"search-by-name\">Search-by-name</h3> <p>We're going to add a <em>hero search</em> feature to the Tour of Heroes. As the user types a name into a search box, we'll make repeated HTTP requests for heroes filtered by that name.</p> <p>We start by creating <code>HeroSearchService</code> that sends search queries to our server's web api.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-search.service.ts\">// app/hero-search.service.ts\n\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\n\nimport { Hero }           from './hero';\n\n@Injectable()\nexport class HeroSearchService {\n\n  constructor(private http: Http) {}\n\n  search(term: string) {\n    return this.http\n               .get(`app/heroes/?name=${term}`)\n               .map((r: Response) =&gt; r.json().data as Hero[]);\n  }\n}\n</pre>\n<p>The <code>http.get()</code> call in <code>HeroSearchService</code> is similar to the one in the <code>HeroService</code>, although the URL now has a query string. <span if-docs=\"ts\">Another notable difference: we no longer call <code>toPromise</code>, we simply return the <em>observable</em> instead.</span></p> <h3 id=\"herosearchcomponent\">HeroSearchComponent</h3> <p>Let's create a new <code>HeroSearchComponent</code> that calls this new <code>HeroSearchService</code>.</p> <p>The component template is simple — just a text box and a list of matching search results.</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-search.component.html\">&lt;!-- app/hero-search.component.html --&gt;\n\n&lt;div id=\"search-component\"&gt;\n  &lt;h4&gt;Hero Search&lt;/h4&gt;\n  &lt;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" /&gt;\n  &lt;div&gt;\n    &lt;div *ngFor=\"let hero of heroes | async\"\n         (click)=\"gotoDetail(hero)\" class=\"search-result\" &gt;\n      {{hero.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>We'll also want to add styles for the new component.</p> <pre language=\"css\" format=\"linenums\" data-language=\"css\" name=\"app/hero-search.component.css\">/* app/hero-search.component.css */\n\n.search-result{\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 20px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n}\n\n#search-box{\n  width: 200px;\n  height: 20px;\n}\n</pre>\n<p>As the user types in the search box, a <em>keyup</em> event binding calls the component's <code>search</code> method with the new search box value.</p> <p>The <code>*ngFor</code> repeats <em>hero</em> objects from the component's <code>heroes</code> property. No surprise there.</p> <p>But, as we'll soon see, the <code>heroes</code> property is now an <em>Observable</em> of hero arrays, rather than just a hero array. The <code>*ngFor</code> can't do anything with an <code>Observable</code> until we flow it through the <code>async</code> pipe (<code>AsyncPipe</code>). The <code>async</code> pipe subscribes to the <code>Observable</code> and produces the array of heroes to <code>*ngFor</code>.</p> <p>Time to create the <code>HeroSearchComponent</code> class and metadata.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-search.component.ts\">// app/hero-search.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\nimport { Observable }        from 'rxjs/Observable';\nimport { Subject }           from 'rxjs/Subject';\n\nimport { HeroSearchService } from './hero-search.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-search',\n  templateUrl: 'app/hero-search.component.html',\n  styleUrls:  ['app/hero-search.component.css'],\n  providers: [HeroSearchService]\n})\nexport class HeroSearchComponent implements OnInit {\n  heroes: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(\n    private heroSearchService: HeroSearchService,\n    private router: Router) {}\n\n  // Push a search term into the observable stream.\n  search(term: string) { this.searchTerms.next(term); }\n\n  ngOnInit() {\n    this.heroes = this.searchTerms\n      .debounceTime(300)        // wait for 300ms pause in events\n      .distinctUntilChanged()   // ignore if next search term is same as previous\n      .switchMap(term =&gt; term   // switch to new observable each time\n        // return the http search observable\n        ? this.heroSearchService.search(term)\n        // or the observable of empty heroes if no search term\n        : Observable.of&lt;Hero[]&gt;([]))\n      .catch(error =&gt; {\n        // TODO: real error handling\n        console.log(error);\n        return Observable.of&lt;Hero[]&gt;([]);\n      });\n  }\n\n  gotoDetail(hero: Hero) {\n    let link = ['/detail', hero.id];\n    this.router.navigate(link);\n  }\n}\n</pre>\n<h4 id=\"search-terms\">Search terms</h4> <p>Let's focus on the <code>searchTerms</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private searchTerms = new Subject&lt;string&gt;();\n\n// Push a search term into the observable stream.\nsearch(term: string) { this.searchTerms.next(term); }\n</pre>\n<p>A <code>Subject</code> is a producer of an <em>observable</em> event stream; <code>searchTerms</code> produces an <code>Observable</code> of strings, the filter criteria for the name search.</p> <p>Each call to <code>search</code> puts a new string into this subject's <em>observable</em> stream by calling <code>next</code>.</p>  <h4 id=\"initialize-the-_-heroes-_-property-_-ngoninit-_-\">Initialize the <em><strong>heroes</strong></em> property (<em><strong>ngOnInit</strong></em>)</h4> <p><span if-docs=\"ts\">A <code>Subject</code> is also an <code>Observable</code>.</span> We're going to turn the stream of search terms into a stream of <code>Hero</code> arrays and assign the result to the <code>heroes</code> property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">heroes: Observable&lt;Hero[]&gt;;\n\nngOnInit() {\n  this.heroes = this.searchTerms\n    .debounceTime(300)        // wait for 300ms pause in events\n    .distinctUntilChanged()   // ignore if next search term is same as previous\n    .switchMap(term =&gt; term   // switch to new observable each time\n      // return the http search observable\n      ? this.heroSearchService.search(term)\n      // or the observable of empty heroes if no search term\n      : Observable.of&lt;Hero[]&gt;([]))\n    .catch(error =&gt; {\n      // TODO: real error handling\n      console.log(error);\n      return Observable.of&lt;Hero[]&gt;([]);\n    });\n}\n</pre>\n<p>If we passed every user keystroke directly to the <code>HeroSearchService</code>, we'd unleash a storm of HTTP requests. Bad idea. We don't want to tax our server resources and burn through our cellular network data plan.</p> <p>Fortunately, we can chain <code>Observable</code> operators to the string <code>Observable</code> that reduce the request flow. We'll make fewer calls to the <code>HeroSearchService</code> and still get timely results. Here's how:</p> <ul> <li>\n<p><code>debounceTime(300)</code> waits until the flow of new string events pauses for 300 milliseconds before passing along the latest string. We'll never make requests more frequently than 300ms.</p> </li> <li>\n<p><code>distinctUntilChanged</code> ensures that we only send a request if the filter text changed. There's no point in repeating a request for the same search term.</p> </li> <li>\n<p><code>switchMap</code> calls our search service for each search term that makes it through the <code>debounce</code> and <code>distinctUntilChanged</code> gauntlet. It cancels and discards previous search observables, returning only the latest search service observable.</p> </li> </ul> <div class=\"l-sub-section\">\n<p>The <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md\">switchMap operator</a> (formerly known as \"flatMapLatest\") is very clever.</p> <p>Every qualifying key event can trigger an http call. Even with a 300ms pause between requests, we could have multiple http requests in flight and they may not return in the order sent.</p> <p><code>switchMap</code> preserves the original request order while returning only the observable from the most recent http call. Results from prior calls are canceled and discarded.</p> <p>We also short-circuit the http call and return an observable containing an empty array if the search text is empty.</p> <p>Note that <em>canceling</em> the <code>HeroSearchService</code> observable won't actually abort a pending http request until the service supports that feature, a topic for another day. We are content for now to discard unwanted results.</p> </div>\n<ul> <li>\n<code>catch</code> intercepts a failed observable. Our simple example prints the error to the console; a real life application should do better. Then we return an observable containing an empty array to clear the search result.</li> </ul> <h3 id=\"import-rxjs-operators\">Import RxJS operators</h3> <p>The RxJS operators are not available in Angular's base <code>Observable</code> implementation. We have to extend <code>Observable</code> by <em>importing</em> them.</p> <p>We could extend <code>Observable</code> with just the operators we need here by including the pertinent <code>import</code> statements at the top of this file.</p> <div class=\"l-sub-section\">\n<p>Many authorities say we should do just that.</p> </div>\n<p>We take a different approach in this example. We combine all of the RxJS <code>Observable</code> extensions that <em>our entire app</em> requires into a single RxJS imports file.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/rxjs-extensions.ts\">// app/rxjs-extensions.ts\n\n// Observable class extensions\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/observable/throw';\n\n// Observable operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\n</pre>\n<p>We load them all at once by importing <code>rxjs-extensions</code> in <code>AppComponent</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (rxjs-extensions)\">// app/app.component.ts (rxjs-extensions)\n\nimport './rxjs-extensions';\n</pre>\n<h3 id=\"add-the-search-component-to-the-dashboard\">Add the search component to the dashboard</h3> <p>We add the hero search HTML element to the bottom of the <code>DashboardComponent</code> template.</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/dashboard.component.html\">&lt;!-- app/dashboard.component.html --&gt;\n\n&lt;h3&gt;Top Heroes&lt;/h3&gt;\n&lt;div class=\"grid grid-pad\"&gt;\n  &lt;div *ngFor=\"let hero of heroes\" (click)=\"gotoDetail(hero)\" class=\"col-1-4\"&gt;\n    &lt;div class=\"module hero\"&gt;\n      &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n&lt;hero-search&gt;&lt;/hero-search&gt;\n</pre>\n<p>And finally, we import the <code>HeroSearchComponent</code> and add it to the <code>declarations</code> array in <code>app.module.ts</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (hero-search-declaration)\">// app/app.module.ts (hero-search-declaration)\n\nimport { HeroSearchComponent } from './hero-search.component';\n\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroSearchComponent\n  ],\n</pre>\n<p>Run the app again, go to the <em>Dashboard</em>, and enter some text in the search box. At some point it might look like this.</p> <img src=\"https://angular.io/resources/images/devguide/toh/toh-hero-search.png\" alt=\"Hero Search Component\"><h2 id=\"application-structure-and-code\">Application structure and code</h2> <p>Review the sample source code in the <live-example></live-example> for this chapter. Verify that we have the following structure:</p> <div class=\"filetree\">\n<div class=\"file\">angular2-tour-of-heroes</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.component.css</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">app.routing.ts</div>\n<div class=\"file\">dashboard.component.css</div>\n<div class=\"file\">dashboard.component.html</div>\n<div class=\"file\">dashboard.component.ts</div>\n<div class=\"file\">hero.ts</div>\n<div class=\"file\">hero-detail.component.css</div>\n<div class=\"file\">hero-detail.component.html</div>\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero-search.component.html (new)</div>\n<div class=\"file\">hero-search.component.css (new)</div>\n<div class=\"file\">hero-search.component.ts (new)</div>\n<div class=\"file\">hero-search.service.ts (new)</div>\n<div class=\"file\">rxjs-operators.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">heroes.component.css</div>\n<div class=\"file\">heroes.component.html</div>\n<div class=\"file\">heroes.component.ts</div>\n<div class=\"file\">main.ts</div>\n<div class=\"file\">in-memory-data.service.ts (new)</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">systemjs.config.json</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<h2 id=\"home-stretch\">Home Stretch</h2> <p>We are at the end of our journey for now, but we have accomplished a lot.</p> <ul> <li>We added the necessary dependencies to use HTTP in our application.</li> <li>We refactored <code>HeroService</code> to load heroes from a web API.</li> <li>We extended <code>HeroService</code> to support post, put and delete methods.</li> <li>We updated our components to allow adding, editing and deleting of heroes.</li> <li>We configured an in-memory web API.</li> <li>We learned how to use Observables.</li> </ul> <p>Here are the files we added or changed in this chapter.</p> <pre language=\"ts\" name=\"app.comp...ts\" format=\"linenums\" data-language=\"typescript\">// app.comp...ts\n\nimport { Component }          from '@angular/core';\n\nimport './rxjs-extensions';\n\n@Component({\n  selector: 'my-app',\n\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a routerLink=\"/dashboard\" routerLinkActive=\"active\"&gt;Dashboard&lt;/a&gt;\n      &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `,\n  styleUrls: ['app/app.component.css']\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n}\n</pre>\n<pre language=\"ts\" name=\"app.mod...ts\" format=\"linenums\" data-language=\"typescript\">// app.mod...ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\n// Imports for loading &amp; configuring the in-memory web api\nimport { HttpModule, XHRBackend } from '@angular/http';\n\nimport { InMemoryBackendService, SEED_DATA } from 'angular2-in-memory-web-api';\nimport { InMemoryDataService }               from './in-memory-data.service';\n\nimport { AppComponent }   from './app.component';\nimport { routing }        from './app.routing';\n\nimport { HeroesComponent }      from './heroes.component';\nimport { DashboardComponent }   from './dashboard.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\nimport { HeroSearchComponent }  from './hero-search.component';\n\nimport { HeroService }  from './hero.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HttpModule\n  ],\n  declarations: [\n    AppComponent,\n    HeroesComponent,\n    DashboardComponent,\n    HeroDetailComponent,\n    HeroSearchComponent\n  ],\n  providers: [\n    HeroService,\n    { provide: XHRBackend, useClass: InMemoryBackendService }, // in-mem server\n    { provide: SEED_DATA,  useClass: InMemoryDataService }     // in-mem server data\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<pre language=\"ts\" name=\"heroes.comp...ts\" format=\"linenums\" data-language=\"typescript\">// heroes.comp...ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\n\nimport { Hero }                from './hero';\nimport { HeroService }         from './hero.service';\n\n@Component({\n  selector: 'my-heroes',\n  templateUrl: 'app/heroes.component.html',\n  styleUrls:  ['app/heroes.component.css']\n})\nexport class HeroesComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n  addingHero = false;\n  error: any;\n\n  constructor(\n    private router: Router,\n    private heroService: HeroService) { }\n\n  getHeroes() {\n    this.heroService\n        .getHeroes()\n        .then(heroes =&gt; this.heroes = heroes)\n        .catch(error =&gt; this.error = error);\n  }\n\n  addHero() {\n    this.addingHero = true;\n    this.selectedHero = null;\n  }\n\n  close(savedHero: Hero) {\n    this.addingHero = false;\n    if (savedHero) { this.getHeroes(); }\n  }\n\n  deleteHero(hero: Hero, event: any) {\n    event.stopPropagation();\n    this.heroService\n        .delete(hero)\n        .then(res =&gt; {\n          this.heroes = this.heroes.filter(h =&gt; h !== hero);\n          if (this.selectedHero === hero) { this.selectedHero = null; }\n        })\n        .catch(error =&gt; this.error = error);\n  }\n\n  ngOnInit() {\n    this.getHeroes();\n  }\n\n  onSelect(hero: Hero) {\n    this.selectedHero = hero;\n    this.addingHero = false;\n  }\n\n  gotoDetail() {\n    this.router.navigate(['/detail', this.selectedHero.id]);\n  }\n}\n</pre>\n<pre language=\"html\" name=\"heroes.comp...html\" format=\"linenums\" data-language=\"html\">&lt;!-- heroes.comp...html --&gt;\n\n&lt;h2&gt;My Heroes&lt;/h2&gt;\n&lt;ul class=\"heroes\"&gt;\n  &lt;li *ngFor=\"let hero of heroes\" (click)=\"onSelect(hero)\" [class.selected]=\"hero === selectedHero\"&gt;\n    &lt;span class=\"hero-element\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/span&gt;\n    &lt;button class=\"delete-button\" (click)=\"deleteHero(hero, $event)\"&gt;Delete&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;div class=\"error\" *ngIf=\"error\"&gt;{{error}}&lt;/div&gt;\n&lt;button (click)=\"addHero()\"&gt;Add New Hero&lt;/button&gt;\n&lt;div *ngIf=\"addingHero\"&gt;\n  &lt;my-hero-detail (close)=\"close($event)\"&gt;&lt;/my-hero-detail&gt;\n&lt;/div&gt;\n\n&lt;div *ngIf=\"selectedHero\"&gt;\n  &lt;h2&gt;\n    {{selectedHero.name | uppercase}} is my hero\n  &lt;/h2&gt;\n  &lt;button (click)=\"gotoDetail()\"&gt;View Details&lt;/button&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"css\" name=\"heroes.comp...css\" format=\"linenums\" data-language=\"css\">/* heroes.comp...css */\n\n.selected {\n  background-color: #CFD8DC !important;\n  color: white;\n}\n.heroes {\n  margin: 0 0 2em 0;\n  list-style-type: none;\n  padding: 0;\n  width: 15em;\n}\n.heroes li {\n  cursor: pointer;\n  position: relative;\n  left: 0;\n  background-color: #EEE;\n  margin: .5em;\n  padding: .3em 0;\n  height: 1.6em;\n  border-radius: 4px;\n}\n.heroes li:hover {\n  color: #607D8B;\n  background-color: #DDD;\n  left: .1em;\n}\n.heroes li.selected:hover {\n  background-color: #BBD8DC !important;\n  color: white;\n}\n.heroes .text {\n  position: relative;\n  top: -3px;\n}\n.heroes .badge {\n  display: inline-block;\n  font-size: small;\n  color: white;\n  padding: 0.8em 0.7em 0 0.7em;\n  background-color: #607D8B;\n  line-height: 1em;\n  position: relative;\n  left: -1px;\n  top: -4px;\n  height: 1.8em;\n  margin-right: .8em;\n  border-radius: 4px 0 0 4px;\n}\nbutton {\n  font-family: Arial;\n  background-color: #eee;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  cursor: hand;\n}\nbutton:hover {\n  background-color: #cfd8dc;\n}\n.error {color:red;}\nbutton.delete-button{\n  float:right;\n  background-color: gray !important;\n  color:white;\n}\n</pre>\n<pre language=\"ts\" name=\"hero-detail.comp...ts\" format=\"linenums\" data-language=\"typescript\">// hero-detail.comp...ts\n\nimport { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\nimport { ActivatedRoute, Params } from '@angular/router';\n\nimport { Hero }        from './hero';\nimport { HeroService } from './hero.service';\n\n@Component({\n  selector: 'my-hero-detail',\n  templateUrl: 'app/hero-detail.component.html',\n  styleUrls: ['app/hero-detail.component.css']\n})\nexport class HeroDetailComponent implements OnInit {\n  @Input() hero: Hero;\n  @Output() close = new EventEmitter();\n  error: any;\n  navigated = false; // true if navigated here\n\n  constructor(\n    private heroService: HeroService,\n    private route: ActivatedRoute) {\n  }\n\n  ngOnInit() {\n    this.route.params.forEach((params: Params) =&gt; {\n      if (params['id'] !== undefined) {\n        let id = +params['id'];\n        this.navigated = true;\n        this.heroService.getHero(id)\n            .then(hero =&gt; this.hero = hero);\n      } else {\n        this.navigated = false;\n        this.hero = new Hero();\n      }\n    });\n  }\n\n  save() {\n    this.heroService\n        .save(this.hero)\n        .then(hero =&gt; {\n          this.hero = hero; // saved hero, w/ id if new\n          this.goBack(hero);\n        })\n        .catch(error =&gt; this.error = error); // TODO: Display error message\n  }\n  goBack(savedHero: Hero = null) {\n    this.close.emit(savedHero);\n    if (this.navigated) { window.history.back(); }\n  }\n}\n</pre>\n<pre language=\"html\" name=\"hero-detail.comp...html\" format=\"linenums\" data-language=\"html\">&lt;!-- hero-detail.comp...html --&gt;\n\n&lt;div *ngIf=\"hero\"&gt;\n  &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n  &lt;div&gt;\n    &lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n  &lt;div&gt;\n    &lt;label&gt;name: &lt;/label&gt;\n    &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\" /&gt;\n   &lt;/div&gt;\n  &lt;button (click)=\"goBack()\"&gt;Back&lt;/button&gt;\n  &lt;button (click)=\"save()\"&gt;Save&lt;/button&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"ts\" name=\"hero.service.ts\" format=\"linenums\" data-language=\"typescript\">// hero.service.ts\n\nimport { Injectable }    from '@angular/core';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\n\nimport { Hero } from './hero';\n\n@Injectable()\nexport class HeroService {\n\n  private heroesUrl = 'app/heroes';  // URL to web api\n\n  constructor(private http: Http) { }\n\n  getHeroes() {\n    return this.http.get(this.heroesUrl)\n               .toPromise()\n               .then(response =&gt; response.json().data as Hero[])\n               .catch(this.handleError);\n  }\n\n  getHero(id: number) {\n    return this.getHeroes()\n               .then(heroes =&gt; heroes.find(hero =&gt; hero.id === id));\n  }\n\n  save(hero: Hero): Promise&lt;Hero&gt;  {\n    if (hero.id) {\n      return this.put(hero);\n    }\n    return this.post(hero);\n  }\n\n  delete(hero: Hero) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    let url = `${this.heroesUrl}/${hero.id}`;\n\n    return this.http\n               .delete(url, {headers: headers})\n               .toPromise()\n               .catch(this.handleError);\n  }\n\n  // Add new Hero\n  private post(hero: Hero): Promise&lt;Hero&gt; {\n    let headers = new Headers({\n      'Content-Type': 'application/json'});\n\n    return this.http\n               .post(this.heroesUrl, JSON.stringify(hero), {headers: headers})\n               .toPromise()\n               .then(res =&gt; res.json().data)\n               .catch(this.handleError);\n  }\n\n  // Update existing Hero\n  private put(hero: Hero) {\n    let headers = new Headers();\n    headers.append('Content-Type', 'application/json');\n\n    let url = `${this.heroesUrl}/${hero.id}`;\n\n    return this.http\n               .put(url, JSON.stringify(hero), {headers: headers})\n               .toPromise()\n               .then(() =&gt; hero)\n               .catch(this.handleError);\n  }\n\n  private handleError(error: any) {\n    console.error('An error occurred', error);\n    return Promise.reject(error.message || error);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"in-memory-data.service.ts\" format=\"linenums\" data-language=\"typescript\">// in-memory-data.service.ts\n\nexport class InMemoryDataService {\n  createDb() {\n    let heroes = [\n      {id: 11, name: 'Mr. Nice'},\n      {id: 12, name: 'Narco'},\n      {id: 13, name: 'Bombasto'},\n      {id: 14, name: 'Celeritas'},\n      {id: 15, name: 'Magneta'},\n      {id: 16, name: 'RubberMan'},\n      {id: 17, name: 'Dynama'},\n      {id: 18, name: 'Dr IQ'},\n      {id: 19, name: 'Magma'},\n      {id: 20, name: 'Tornado'}\n    ];\n    return {heroes};\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"hero-search.service.ts\" format=\"linenums\" data-language=\"typescript\">// hero-search.service.ts\n\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\n\nimport { Hero }           from './hero';\n\n@Injectable()\nexport class HeroSearchService {\n\n  constructor(private http: Http) {}\n\n  search(term: string) {\n    return this.http\n               .get(`app/heroes/?name=${term}`)\n               .map((r: Response) =&gt; r.json().data as Hero[]);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"hero-search.component.ts\" format=\"linenums\" data-language=\"typescript\">// hero-search.component.ts\n\nimport { Component, OnInit } from '@angular/core';\nimport { Router }            from '@angular/router';\nimport { Observable }        from 'rxjs/Observable';\nimport { Subject }           from 'rxjs/Subject';\n\nimport { HeroSearchService } from './hero-search.service';\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-search',\n  templateUrl: 'app/hero-search.component.html',\n  styleUrls:  ['app/hero-search.component.css'],\n  providers: [HeroSearchService]\n})\nexport class HeroSearchComponent implements OnInit {\n  heroes: Observable&lt;Hero[]&gt;;\n  private searchTerms = new Subject&lt;string&gt;();\n\n  constructor(\n    private heroSearchService: HeroSearchService,\n    private router: Router) {}\n\n  // Push a search term into the observable stream.\n  search(term: string) { this.searchTerms.next(term); }\n\n  ngOnInit() {\n    this.heroes = this.searchTerms\n      .debounceTime(300)        // wait for 300ms pause in events\n      .distinctUntilChanged()   // ignore if next search term is same as previous\n      .switchMap(term =&gt; term   // switch to new observable each time\n        // return the http search observable\n        ? this.heroSearchService.search(term)\n        // or the observable of empty heroes if no search term\n        : Observable.of&lt;Hero[]&gt;([]))\n      .catch(error =&gt; {\n        // TODO: real error handling\n        console.log(error);\n        return Observable.of&lt;Hero[]&gt;([]);\n      });\n  }\n\n  gotoDetail(hero: Hero) {\n    let link = ['/detail', hero.id];\n    this.router.navigate(link);\n  }\n}\n</pre>\n<pre language=\"html\" name=\"hero-search.service.html\" format=\"linenums\" data-language=\"html\">&lt;!-- hero-search.service.html --&gt;\n\n&lt;div id=\"search-component\"&gt;\n  &lt;h4&gt;Hero Search&lt;/h4&gt;\n  &lt;input #searchBox id=\"search-box\" (keyup)=\"search(searchBox.value)\" /&gt;\n  &lt;div&gt;\n    &lt;div *ngFor=\"let hero of heroes | async\"\n         (click)=\"gotoDetail(hero)\" class=\"search-result\" &gt;\n      {{hero.name}}\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"css\" name=\"hero-search.component.css\" format=\"linenums\" data-language=\"css\">/* hero-search.component.css */\n\n.search-result{\n  border-bottom: 1px solid gray;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  width:195px;\n  height: 20px;\n  padding: 5px;\n  background-color: white;\n  cursor: pointer;\n}\n\n#search-box{\n  width: 200px;\n  height: 20px;\n}\n</pre>\n<pre language=\"ts\" name=\"hero-search.component.css\" format=\"linenums\" data-language=\"typescript\">// hero-search.component.css\n\nBAD FILENAME: ../../../_fragments/toh-6/ts/app/rxjs-operators.ts.md   Current path: docs,ts,latest,tutorial,toh-pt6 PathToDocs: ../../../</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/tutorial/toh-pt6.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/tutorial/toh-pt6.html</a>\n  </p>\n</div>\n","guide/animations":"<h1 class=\"hero-title text-display-1 \">Animations</h1>\n\n<div class=\"banner\"><p class=\"text-body\">A guide to Angular's animation system.</p></div>\n<p>Motion is an important aspect in the design of modern web applications. We want our user interfaces to have smooth transitions between states, and engaging animations that call attention where it's needed. Well-designed animations can make a UI not only more fun but also easier to use.</p> <p>Angular's animation system gives us what we need to make the kinds of animations we want. We can build animations that run with the same kind of native performance that we're used to with pure CSS animations. But we can also have our animation logic tightly integrated with the rest of our application code, where they can be easily triggered and controlled.</p> <div class=\"alert is-helpful\">\n<p>Angular animations are built on top of the standard <a href=\"https://w3c.github.io/web-animations/\">Web Animations API</a> and they run natively on <a href=\"http://caniuse.com/#feat=web-animation\">browsers that support it</a>.</p> <p>For other browsers, a polyfill is required. Grab <a href=\"https://github.com/web-animations/web-animations-js\"><code>web-animations.min.js</code> from here</a> and add it to your page.</p> <p>A more lightweight polyfill maintained by the Angular team is coming soon.</p> </div>\n<h1 id=\"table-of-contents\">Table of Contents</h1> <ul> <li><a href=\"#example-transitioning-between-states\">Quickstart Example: Transitioning Between Two States</a></li> <li><a href=\"#states-and-transitions\">States and Transitions</a></li> <li><a href=\"#example-entering-and-leaving\">Example: Entering and Leaving</a></li> <li><a href=\"#example-entering-and-leaving-from-different-states\">Example: Entering and Leaving from Different States</a></li> <li><a href=\"#animatable-properties-and-units\">Animatable Properties and Units</a></li> <li><a href=\"#automatic-property-calculation\">Automatic Property Calculation</a></li> <li><a href=\"#animation-timing\">Animation Timing</a></li> <li><a href=\"#multi-step-animations-with-keyframes\">Multi-Step Animations with Keyframes</a></li> <li><a href=\"#parallel-animation-groups\">Parallel Animation Groups</a></li> </ul> <div class=\"l-sub-section\">\n<p>The examples referenced in this chapter are available as a <live-example></live-example>.</p> </div>\n<h2 id=\"example-transitioning-between-states\">Quickstart Example: Transitioning Between Two States</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_basic_click.gif\" alt=\"A simple transition animation\" align=\"right\" style=\"width:220px\"><p>Let's build a simple animation that transitions an element between two states driven by a model attribute.</p> <p>Animations are defined inside <code>@Component</code> metadata. Before we can add some, we need to import a few animation-specific functions:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import {\n  Component,\n  Input,\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/core';\n</pre>\n<p>With these we can now define an <em>animation trigger</em> called <code>heroState</code> in the component metadata. It has animated transitions between two states: <code>active</code> and <code>inactive</code>. When a hero is active, we display the element in a slightly larger size and lighter color.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      state('active',   style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      transition('inactive =&gt; active', animate('100ms ease-in')),\n      transition('active =&gt; inactive', animate('100ms ease-out'))\n    ])\n  ]\n</pre>\n<div class=\"alert is-helpful\">\n<p>In this example we are defining animation styles (color and transform) inline in the animation metadata. In an upcoming release of Angular, support will be added for pulling the styles in from the component CSS stylesheet instead.</p> </div>\n<p>We now have an animation defined but it is not yet used anywhere. We can change that by attaching it to one or more elements in the component's template using the \"<code>@triggerName</code>\" syntax:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;ul&gt;\n    &lt;li *ngFor=\"let hero of heroes\"\n        @heroState=\"hero.state\"\n        (click)=\"hero.toggleState()\"&gt;\n      {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`,\n</pre>\n<p>Here we've applied the animation trigger to every element repeated by an <code>ngFor</code>. Each of the repeated elements will animate independently. We're binding the value of the attribute to the expression <code>hero.state</code>. We expect it to always be either <code>inactive</code> or <code>active</code>, since that's what we have defined animation states for.</p> <p>With this setup, an animated transition is shown whenever a hero object changes state! Here's the full component implementation:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {\n  Component,\n  Input,\n  trigger,\n  state,\n  style,\n  transition,\n  animate\n} from '@angular/core';\n\nimport { Heroes } from './hero.service';\n\n@Component({\n  moduleId: module.id,\n  selector: 'hero-list-basic',\n  template: `\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let hero of heroes\"\n          @heroState=\"hero.state\"\n          (click)=\"hero.toggleState()\"&gt;\n        {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  styleUrls: ['hero-list.component.css'],\n  animations: [\n    trigger('heroState', [\n      state('inactive', style({\n        backgroundColor: '#eee',\n        transform: 'scale(1)'\n      })),\n      state('active',   style({\n        backgroundColor: '#cfd8dc',\n        transform: 'scale(1.1)'\n      })),\n      transition('inactive =&gt; active', animate('100ms ease-in')),\n      transition('active =&gt; inactive', animate('100ms ease-out'))\n    ])\n  ]\n})\nexport class HeroListBasicComponent {\n  @Input() heroes: Heroes;\n}\n</pre>\n<h2 id=\"states-and-transitions\">States and Transitions</h2> <p>Angular animations are defined in terms of logical <strong>states</strong> and <strong>transitions</strong> between states.</p> <p>An animation state is a string value that we define in our application code. In the example above we used the states <code>'active'</code> and <code>'inactive'</code> based on the logical state of hero objects. The source of the state can be a simple object attribute as it was in this case, or it can be a value computed in a method. The important thing is that we can read it into the component's template.</p> <p>We can define <em>styles</em> for each animation state:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">state('inactive', style({\n  backgroundColor: '#eee',\n  transform: 'scale(1)'\n})),\nstate('active',   style({\n  backgroundColor: '#cfd8dc',\n  transform: 'scale(1.1)'\n})),\n</pre>\n<p>These <code>state</code> definitions specify the <em>end styles</em> of each state. They are applied to the element once it has transitioned to that state, and will stay <em>as long as it remains in that state</em>. In that sense, we are defining more than just animations here. We're actually defining what styles the element has in different states.</p> <p>Once we have states, we can define <em>transitions</em> between the states. Each transition controls the timing of switching between one set of styles and the next:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">transition('inactive =&gt; active', animate('100ms ease-in')),\ntransition('active =&gt; inactive', animate('100ms ease-out'))\n</pre>\n<img src=\"https://angular.io/resources/images/devguide/animations/ng_animate_transitions_inactive_active.png\" alt=\"In Angular animations we defines states and transitions between states\" width=\"400\"><p>If we have the same timing configuration for several transitions, we can combine them into the same <code>transition</code> definition:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">transition('inactive =&gt; active, active =&gt; inactive',\n animate('100ms ease-out'))\n</pre>\n<p>When we have the same timing for both directions of a transition, as we do in the previous example, we can use the <code>&lt;=&gt;</code> shorthand syntax:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">transition('inactive &lt;=&gt; active', animate('100ms ease-out'))\n</pre>\n<p>Sometimes we have styles that we want to apply during an animation but not keep around after it finishes. We can define such styles inline in the <code>transition</code>. In this example, the element receives one set of styles immediately and is then animated to the next. When the transition finishes, none of these styles will be kept because they're not defined in a <code>state</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">transition('inactive =&gt; active', [\n  style({\n    backgroundColor: '#cfd8dc',\n    transform: 'scale(1.3)'\n  }),\n  animate('80ms ease-in', style({\n    backgroundColor: '#eee',\n    transform: 'scale(1)'\n  }))\n]),\n</pre>\n<h3 id=\"the-wildcard-state-\">The wildcard state <code>*</code>\n</h3> <p>The <code>*</code> (\"wildcard\") state matches <em>any</em> animation state. This is useful for defining styles and transitions that should apply regardless of which state the animation is in. For example:</p> <ul> <li>The <code>active =&gt; *</code> transition applies when the element's state changes from <code>active</code> to anything else.</li> <li>The <code>* =&gt; *</code> transition applies when <em>any</em> change between two states takes place.</li> </ul> <img src=\"https://angular.io/resources/images/devguide/animations/ng_animate_transitions_inactive_active_wildcards.png\" alt=\"The wildcard state can be used to match many different transitions at once\" width=\"400\"><h3 id=\"the-void-state\">The <code>void</code> state</h3> <p>There's one special state called <code>void</code> that may apply to any animation. It applies when the element is <em>not</em> attached to a view. This may be because it has not yet been added or because it has been removed. The <code>void</code> state is useful for defining \"enter\" and \"leave\" animations.</p> <p>For example the <code>* =&gt; void</code> transition applies when the element leaves the view, regardless of what state it was in before it left.</p> <img src=\"https://angular.io/resources/images/devguide/animations/ng_animate_transitions_void_in.png\" alt=\"The void state can be used for enter and leave transitions\" width=\"400\"><p>The wildcard state <code>*</code> also matches <code>void</code>.</p> <h2 id=\"example-entering-and-leaving\">Example: Entering and Leaving</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_enter_leave.gif\" alt=\"Enter and leave animations\" align=\"right\" style=\"width:250px\"><p>Using the <code>void</code> and <code>*</code> states we can define transitions that animate the entering and leaving of elements:</p> <ul> <li>Enter: <code>void =&gt; *</code>\n</li> <li>Leave: <code>* =&gt; void</code>\n</li> </ul> <pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('flyInOut', [\n    state('in', style({transform: 'translateX(0)'})),\n    transition('void =&gt; *', [\n      style({transform: 'translateX(-100%)'}),\n      animate(100)\n    ]),\n    transition('* =&gt; void', [\n      animate(100, style({transform: 'translateX(100%)'}))\n    ])\n  ])\n]\n</pre>\n<p>Note that in this case we have the styles applied to the void state directly in the transition definitions, and not in a separate <code>state(void)</code> definition. We do this because we want the transforms to be different on enter and leave: The element enters from the left and leaves to the right.</p> <h2 id=\"example-entering-and-leaving-from-different-states\">Example: Entering and Leaving from Different States</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_enter_leave_states.gif\" alt=\"Enter and leave animations combined with state animations\" align=\"right\" style=\"width:200px\"><p>We can also combine this animation with the earlier state transition animation by using the hero state as the animation state. What this will let us do is configure different transitions for entering and leaving based on what the state of the hero is:</p> <ul> <li>Inactive hero enter: <code>void =&gt; inactive</code>\n</li> <li>Active hero enter: <code>void =&gt; active</code>\n</li> <li>Inactive hero leave: <code>inactive =&gt; void</code>\n</li> <li>Active hero leave: <code>active =&gt; void</code>\n</li> </ul> <p>We now have fine-grained control over each transition:</p> <img src=\"https://angular.io/resources/images/devguide/animations/ng_animate_transitions_inactive_active_void.png\" alt=\"This example transitions between active, inactive, and void states\" width=\"400\"><pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('heroState', [\n    state('inactive', style({transform: 'translateX(0) scale(1)'})),\n    state('active',   style({transform: 'translateX(0) scale(1.1)'})),\n    transition('inactive =&gt; active', animate('100ms ease-in')),\n    transition('active =&gt; inactive', animate('100ms ease-out')),\n    transition('void =&gt; inactive', [\n      style({transform: 'translateX(-100%) scale(1)'}),\n      animate(100)\n    ]),\n    transition('inactive =&gt; void', [\n      animate(100, style({transform: 'translateX(100%) scale(1)'}))\n    ]),\n    transition('void =&gt; active', [\n      style({transform: 'translateX(0) scale(0)'}),\n      animate(200)\n    ]),\n    transition('active =&gt; void', [\n      animate(200, style({transform: 'translateX(0) scale(0)'}))\n    ])\n  ])\n]\n</pre>\n<h2 id=\"animatable-properties-and-units\">Animatable Properties and Units</h2> <p>Since Angular's animation support builds on top of Web Animations, we can animate any property that the browser considers <em>animatable</em>. This includes positions, sizes, transforms, colors, borders and many others. The W3C maintains <a href=\"https://www.w3.org/TR/css3-transitions/#animatable-properties\">a list of animatable properties</a>.</p> <p>For positional properties that have a numeric value, we can define a unit by providing the value as a string with the appropriate suffix:</p> <ul> <li><code>'50px'</code></li> <li><code>'3em'</code></li> <li><code>'100%'</code></li> </ul> <p>For most dimensional properties we can also just define a number which is then assumed to be in pixels:</p> <ul> <li>\n<code>50</code> is the same as saying <code>'50px'</code>\n</li> </ul> <h2 id=\"automatic-property-calculation\">Automatic Property Calculation</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_auto.gif\" alt=\"Animation with automated height calculation\" align=\"right\" style=\"width:220px\"><p>Sometimes the value of a dimensional style property that we want to animate is not known until at runtime. For example, it is quite common for elements to have widths and heights that depend on their content and the screen size. These properties are often tricky to animate with CSS.</p> <p>With Angular we can use a special <code>*</code> property value in these cases. What it means is that the value of this property will be computed at runtime and then plugged into the animation.</p> <p>The \"leave\" animation in this example takes whatever height the element has before it leaves and animates from that height to zero:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('shrinkOut', [\n    state('in', style({height: '*'})),\n    transition('* =&gt; void', [\n      style({height: '*'}),\n      animate(250, style({height: 0}))\n    ])\n  ])\n]\n</pre>\n<h2 id=\"animation-timing\">Animation Timing</h2> <p>There are three timing properties we can tune for every animated transition: The duration, the delay, and the easing function. They are all combined into a single transition <em>timing string</em>.</p> <h3 id=\"duration\">Duration</h3> <p>The duration controls how long the animation takes to run from start to finish. We can define a duration in three ways:</p> <ul> <li>As a plain number, in milliseconds: <code>100</code>\n</li> <li>In a string, as milliseconds: <code>'100ms'</code>\n</li> <li>In a string, as seconds: <code>'0.1s'</code>\n</li> </ul> <h3 id=\"delay\">Delay</h3> <p>The delay controls how long to wait after an animation triggers before the transition actually begins. We can define one by adding it in the same string following the duration. It also has the same format options as the duration:</p> <ul> <li>Wait for 100ms and then run for 200ms: <code>'0.2s 100ms'</code>\n</li> </ul> <h3 id=\"easing\">Easing</h3> <p>The <a href=\"http://easings.net/\">easing function</a> controls how the animation accelerates and decelerates during its runtime. For example, using an <code>ease-in</code> function means the animation begins relatively slowly but then picks up speed as it progresses. We can control the easing by adding it as a <em>third</em> value in the string after the duration and the delay (or as the <em>second</em> value when there is no delay):</p> <ul> <li>Wait for 100ms and then run for 200ms, with easing: <code>'0.2s 100ms ease-out'</code>\n</li> <li>Run for 200ms, with easing: <code>'0.2s ease-in-out'</code>\n</li> </ul> <img src=\"https://angular.io/resources/images/devguide/animations/animation_timings.gif\" alt=\"Animations with specific timings\" align=\"right\" style=\"width:220px\"><h3 id=\"example\">Example</h3> <p>Here are a couple of custom timings in action. Both \"enter\" and \"leave\" last for 200 milliseconds but they have different easings. The leave begins after a slight delay:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('flyInOut', [\n    state('in', style({opacity: 1, transform: 'translateX(0)'})),\n    transition('void =&gt; *', [\n      style({\n        opacity: 0,\n        transform: 'translateX(-100%)'\n      }),\n      animate('0.2s ease-in')\n    ]),\n    transition('* =&gt; void', [\n      animate('0.2s 10 ease-out', style({\n        opacity: 0,\n        transform: 'translateX(100%)'\n      }))\n    ])\n  ])\n]\n</pre>\n<h2 id=\"multi-step-animations-with-keyframes\">Multi-Step Animations with Keyframes</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_multistep.gif\" alt=\"Animations with some bounce implemented with keyframes\" align=\"right\" style=\"width:220px\"><p>With animation <em>keyframes</em> we can go beyond a simple transition between two sets of styles to a more intricate animation that goes through one or more intermediate styles in between.</p> <p>For each keyframe, we can specify an <em>offset</em> that defines at which point in the animation that keyframe applies. The offset is a number between zero, which marks the beginning of the animation, and one, which marks the end.</p> <p>In this example we add some \"bounce\" to our enter and leave animations with keyframes:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('flyInOut', [\n    state('in', style({transform: 'translateX(0)'})),\n    transition('void =&gt; *', [\n      animate(300, keyframes([\n        style({opacity: 0, transform: 'translateX(-100%)', offset: 0}),\n        style({opacity: 1, transform: 'translateX(15px)',  offset: 0.3}),\n        style({opacity: 1, transform: 'translateX(0)',     offset: 1.0})\n      ]))\n    ]),\n    transition('* =&gt; void', [\n      animate(300, keyframes([\n        style({opacity: 1, transform: 'translateX(0)',     offset: 0}),\n        style({opacity: 1, transform: 'translateX(-15px)', offset: 0.7}),\n        style({opacity: 0, transform: 'translateX(100%)',  offset: 1.0})\n      ]))\n    ])\n  ])\n]\n</pre>\n<p>Note that the offsets are <em>not</em> defined in terms of absolute time. They are relative measures from 0 to 1. The final timeline of the animation will based on the combination of keyframe offsets, duration, delay, and easing.</p> <p>Defining offsets for keyframes is optional. If we omit them, offsets with even spacing are automatically assigned. For example, three keyframes without predefined offsets will receive offsets <code>0</code>, <code>0.5</code>, and <code>1</code>.</p> <h2 id=\"parallel-animation-groups\">Parallel Animation Groups</h2> <img src=\"https://angular.io/resources/images/devguide/animations/animation_groups.gif\" alt=\"Parallel animations with different timings, implemented with groups\" align=\"right\" style=\"width:220px\"><p>We've already seen how we can animate multiple style properties at the same time: Just put all of them into the same <code>style()</code> definition!</p> <p>But we may also want to configure different <em>timings</em> for animations that happen in parallel. For example, we may want to animate two CSS properties but use a different easing function for each one.</p> <p>For this we can use animation <em>groups</em>. In this example we use groups both on enter and leave so that we can use two different timing configurations. Both are applied to the same element in parallel, but run independent of each other:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">animations: [\n  trigger('flyInOut', [\n    state('in', style({width: 120, transform: 'translateX(0)', opacity: 1})),\n    transition('void =&gt; *', [\n      style({width: 10, transform: 'translateX(50px)', opacity: 0}),\n      group([\n        animate('0.3s 0.1s ease', style({\n          transform: 'translateX(0)',\n          width: 120\n        })),\n        animate('0.3s ease', style({\n          opacity: 1\n        }))\n      ])\n    ]),\n    transition('* =&gt; void', [\n      group([\n        animate('0.3s ease', style({\n          transform: 'translateX(50px)',\n          width: 10\n        })),\n        animate('0.3s 0.2s ease', style({\n          opacity: 0\n        }))\n      ])\n    ])\n  ])\n]\n</pre>\n<p>One group animates the element transform and width. The other animates the opacity.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/animations.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/animations.html</a>\n  </p>\n</div>\n","guide/attribute-directives":"<h1 class=\"hero-title text-display-1 \">Attribute Directives</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Attribute directives attach behavior to elements.</p></div>\n<p>An <strong>Attribute</strong> directive changes the appearance or behavior of a DOM element.</p> <p>In this chapter we will</p> <ul> <li><a href=\"#write-directive\">write an attribute directive to change the background color</a></li> <li><a href=\"#apply-directive\">apply the attribute directive to an element in a template</a></li> <li><a href=\"#respond-to-user\">respond to user-initiated events</a></li> <li><a href=\"#bindings\">pass values into the directive using data binding</a></li> </ul> <p>Try the <live-example></live-example>.</p> <h2 id=\"directives-overview\">Directives overview</h2> <p>There are three kinds of directives in Angular:</p> <ol> <li>Components</li> <li>Structural directives </li> <li>Attribute directives</li> </ol> <p>A <em>Component</em> is really a directive with a template. It's the most common of the three directives and we tend to write lots of them as we build applications.</p> <p><a href=\"structural-directives\"><em>Structural</em> directives</a> can change the DOM layout by adding and removing DOM elements. <a href=\"template-syntax#ngFor\">NgFor</a> and <a href=\"template-syntax#ngIf\">NgIf</a> are two familiar examples.</p> <p>An <em>Attribute</em> directive can change the appearance or behavior of an element. The built-in <a href=\"template-syntax#ngStyle\">NgStyle</a> directive, for example, can change several element styles at the same time.</p> <p>We are going to write our own attribute directive to set an element's background color when the user hovers over that element.</p> <div class=\"l-sub-section\">\n<p>We don't need <em>any</em> directive to simply set the background color. We can set it with the special <a href=\"template-syntax#style-binding\">Style Binding</a> like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p [style.background]=\"'lime'\"&gt;I am green with envy!&lt;/p&gt;\n</pre>\n<p>That wouldn't be nearly as much fun as creating our own directive.</p> <p>Besides, we're not just <em>setting</em> the color; we'll be <em>changing</em> the color in response to a user action, a mouse hover.</p> </div>\n<h2 id=\"write-directive\">Build a simple attribute directive</h2> <p>An attribute directive minimally requires building a controller class annotated with <code>@Directive</code>, which specifies the selector identifying the attribute associated with the directive. The controller class implements the desired directive behavior.</p> <p>Let's build a small illustrative example together.</p> <h3 id=\"our-first-draft\">Our first draft</h3> <p>Create a new project folder (<code>attribute-directives</code>) and follow the steps in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>.</p> <div class=\"l-sub-section\">\n<p>Alternatively, begin with a <a href=\"https://github.com/angular/quickstart/blob/master/README.md\">download of the QuickStart source</a>.</p> </div>\n<p>Create the following source file in the indicated folder with the given code:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/highlight.directive.ts\">// app/highlight.directive.ts\n\nimport { Directive, ElementRef, Input } from '@angular/core';\n\n@Directive({ selector: '[myHighlight]' })\nexport class HighlightDirective {\n    constructor(el: ElementRef) {\n       el.nativeElement.style.backgroundColor = 'yellow';\n    }\n}\n</pre>\n<p>We begin by importing some symbols from the Angular <code>core</code>. We need the <code>Directive</code> symbol for the <code>@Directive</code> decorator. We need the <code>ElementRef</code> to <a href=\"dependency-injection\">inject</a> into the directive's constructor so we can access the DOM element. We don't need <code>Input</code> immediately but we will need it later in the chapter.</p> <p>Then we define the directive metadata in a configuration object passed as an argument to the <code>@Directive</code> decorator function. </p> <p><code>@Directive</code> requires a CSS selector to identify the HTML in the template that is associated with our directive. The <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Attribute_selectors\">CSS selector for an attribute</a> is the attribute name in square brackets. Our directive's selector is <code>[myHighlight]</code>. Angular will locate all elements in the template that have an attribute named <code>myHighlight</code>. </p> <div class=\"l-sub-section\">\n<h3 id=\"why-not-call-it-highlight-\">Why not call it \"highlight\"?</h3> <p><em>highlight</em> is a nicer name than <em>myHighlight</em> and, technically, it would work if we called it that.</p> <p>However, we recommend picking a selector name with a prefix to ensure that it cannot conflict with any standard HTML attribute, now or in the future. There is also less risk of colliding with a third-party directive name when we give ours a prefix.</p> <p>We do <strong>not</strong> prefix our <code>highlight</code> directive name with <strong><code>ng</code></strong>. That prefix belongs to Angular.</p> <p>We need a prefix of our own, preferably short, and <code>my</code> will do for now.</p> </div>\n<p>After the <code>@Directive</code> metadata comes the directive's controller class, which contains the logic for the directive. We export `HighlightDirective` to make it accessible to other components.</p>\n<p>Angular creates a new instance of the directive's controller class for each matching element, injecting an Angular <code>ElementRef</code> into the constructor. <code>ElementRef</code> is a service that grants us direct access to the DOM element through its <code>nativeElement</code> property. That's all we need to set the element's background color using the browser DOM API.</p> <h2 id=\"apply-directive\">Apply the attribute directive</h2> <p>The <code>AppComponent</code> in this sample is a test harness for our <code>HighlightDirective</code>. Let's give it a new template that applies the directive as an attribute to a paragraph (<code>p</code>) element. In Angular terms, the <code>&lt;p&gt;</code> element will be the attribute <strong>host</strong>.</p> <p>We'll put the template in its own <code>app.component.html</code>file that looks like this:</p>\n<pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/app.component.html\">&lt;!-- app/app.component.html --&gt;\n\n&lt;h1&gt;My First Attribute Directive&lt;/h1&gt;\n&lt;p myHighlight&gt;Highlight me!&lt;/p&gt;\n</pre>\n<p>A separate template file is clearly overkill for a 2-line template. Hang in there; we're going to expand it later. Meanwhile, we'll revise the <code>AppComponent</code> to reference this template.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app/app.component.html'\n})\n\nexport class AppComponent { }\n</pre>\n<p>We'll add an <code>import</code> statement to fetch the 'Highlight' directive and, added that class to the <code>declarations</code> NgModule metadata so that Angular will recognize our directive when it encounters <code>myHighlight</code> in the template. </p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>We run the app and see that our directive highlights the paragraph text.</p> <img src=\"https://angular.io/resources/images/devguide/attribute-directives/first-highlight.png\" alt=\"First Highlight\"><div class=\"l-sub-section\">\n<h3 id=\"your-directive-isn-t-working-\">Your directive isn't working?</h3> <p>Did you remember to add the directive to the the <code>declarations</code> attribute of <code>@NgModule</code>? It is easy to forget!</p> <p>Open the console in the browser tools and look for an error like this:</p> <pre format=\"nocode\">EXCEPTION: Template parse errors:\n  Can't bind to 'myHighlight' since it isn't a known property of 'p'.</pre>\n<p>Angular detects that we're trying to bind to <em>something</em> but it doesn't know what. We have to tell it by listing <code>HighlightDirective</code> in the <code>declarations</code> metadata array.</p> </div>\n<p>Let's recap what happened.</p> <p>Angular found the <code>myHighlight</code> attribute on the <code>&lt;p&gt;</code> element. It created an instance of the <code>HighlightDirective</code> class, injecting a reference to the element into the constructor where we set the <code>&lt;p&gt;</code> element's background style to yellow.</p> <h2 id=\"respond-to-user\">Respond to user action</h2> <p>We are not satisfied to simply set an element color. Our directive should set the color in response to a user action. Specifically, we want to set the color when the user hovers over an element.</p> <p>We'll need to</p> <ol> <li>detect when the user hovers into and out of the element,</li> <li>respond to those actions by setting and clearing the highlight color, respectively.</li> </ol> <p>We apply the <code>@HostListener</code> decorator to methods which are called when an event is raised.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@HostListener('mouseenter') onMouseEnter() {\n/* . . . */\n}\n\n@HostListener('mouseleave') onMouseLeave() {\n/* . . . */\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>@HostListener</code> decorator refers to the DOM element that hosts our attribute directive, the <code>&lt;p&gt;</code> in our case.</p> <p>We could have attached event listeners by manipulating the host DOM element directly, but there are at least three problems with such an approach:</p> <ol> <li>We have to write the listeners correctly.</li> <li>We must <em>detach</em> our listener when the directive is destroyed to avoid memory leaks.</li> <li>We'd be talking to DOM API directly which, we learned, is something to avoid.</li> </ol> <p>Let's roll with the <code>@HostListener</code> decorator. </p> </div>\n<p>Now we implement the two mouse event handlers:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n</pre>\n<p>Notice that they delegate to a helper method that sets the color via a private local variable, <code>el</code>. We revise the constructor to capture the <code>ElementRef.nativeElement</code> in this variable.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private el: HTMLElement;\n\nconstructor(el: ElementRef) { this.el = el.nativeElement; }\n</pre>\n<p>Here's the updated directive:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/highlight.directive.ts\">// app/highlight.directive.ts\n\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[myHighlight]'\n})\n\nexport class HighlightDirective {\n  private el: HTMLElement;\n\n  constructor(el: ElementRef) { this.el = el.nativeElement; }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight('yellow');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n\n}\n</pre>\n<p>We run the app and confirm that the background color appears as we move the mouse over the <code>p</code> and disappears as we move out.</p> <img src=\"https://angular.io/resources/images/devguide/attribute-directives/highlight-directive-anim.gif\" alt=\"Second Highlight\"><h2 id=\"bindings\">Configure the directive with binding</h2> <p>Currently the highlight color is hard-coded within the directive. That's inflexible. We should set the color externally with a binding like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p [myHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n</pre>\n<p>We'll extend our directive class with a bindable <strong>input</strong> <code>highlightColor</code> property and use it when we highlight text.</p> <p>Here is the final version of the class:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/highlight.directive.ts (class)\">// app/highlight.directive.ts (class)\n\nexport class HighlightDirective {\n  private _defaultColor = 'red';\n  private el: HTMLElement;\n\n  constructor(el: ElementRef) { this.el = el.nativeElement; }\n\n  @Input('myHighlight') highlightColor: string;\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this._defaultColor);\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n}\n</pre>\n<p id=\"input\">The new <code>highlightColor</code> property is called an <em>input</em> property because data flows from the binding expression into our directive. Notice the <code>@Input()</code> decorator applied to the property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/highlight.directive.ts (color)\">// app/highlight.directive.ts (color)\n\n@Input('myHighlight') highlightColor: string;\n</pre>\n<p><code>@Input</code> adds metadata to the class that makes the <code>highlightColor</code> property available for property binding under the <code>myHighlight</code> alias. We must add this input metadata or Angular will reject the binding. See the <a href=\"#why-input\">appendix</a> below to learn why.</p> <div class=\"l-sub-section\">\n<h3 id=\"-input-_alias_-\">@Input(<em>alias</em>)</h3> <p>The developer who uses this directive expects to bind to the attribute name, <code>myHighlight</code>. The directive property name is <code>highlightColor</code>. That's a disconnect.</p> <p>We could resolve the discrepancy by renaming the property to <code>myHighlight</code> and define it as follows:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input() myHighlight: string;\n</pre>\n<p>Maybe we don't want that property name inside the directive perhaps because it doesn't express our intention well. We can <strong>alias</strong> the <code>highlightColor</code> property with the attribute name by passing <code>myHighlight</code> into the <code>@Input</code> decorator:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input('myHighlight') highlightColor: string;\n</pre>\n</div>\n<p>Now that we're getting the highlight color as an input, we modify the <code>onMouseEnter()</code> method to use it instead of the hard-coded color name. We also define red as the default color to fallback on in case the user neglects to bind with a color.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@HostListener('mouseenter') onMouseEnter() {\n  this.highlight(this.highlightColor || this._defaultColor);\n}\n</pre>\n<p>Now we'll update our <code>AppComponent</code> template to let users pick the highlight color and bind their choice to our directive.</p> <p>Here is the updated template:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;h1&gt;My First Attribute Directive&lt;/h1&gt;\n&lt;h4&gt;Pick a highlight color&lt;/h4&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\"&gt;Green\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\"&gt;Yellow\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\"&gt;Cyan\n&lt;/div&gt;\n&lt;p [myHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n</pre>\n<div class=\"l-sub-section\">\n<h3 id=\"where-is-the-templated-color-property-\">Where is the templated <em>color</em> property?</h3> <p>The eagle-eyed may notice that the radio button click handlers in the template set a <code>color</code> property and we are binding that <code>color</code> to the directive. We should expect to find a <code>color</code> on the host <code>AppComponent</code>.</p> <p><strong>We never defined a color property for the host <em>AppComponent</em></strong>! And yet this code works. Where is the template <code>color</code> value going?</p> <p>Browser debugging reveals that Angular dynamically added a <code>color</code> property to the runtime instance of the <code>AppComponent</code>.</p> <p>This is <em>convenient</em> behavior but it is also <em>implicit</em> behavior that could be confusing. While it's cool that this technique works, we recommend adding the <code>color</code> property to the <code>AppComponent</code>.</p> </div>\n<p>Here is our second version of the directive in action.</p> <img src=\"https://angular.io/resources/images/devguide/attribute-directives/highlight-directive-v2-anim.gif\" alt=\"Highlight v.2\"><h2 id=\"bind-to-a-second-property\">Bind to a second property</h2> <p>Our directive only has a single, customizable property. What if we had <strong><em>two properties</em></strong>?</p> <p>Let's allow the template developer to set the default color, the color that prevails until the user picks a highlight color. We'll add a second <strong>input</strong> property to <code>HighlightDirective</code> called <code>defaultColor</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input() set defaultColor(colorName: string){\n  this._defaultColor = colorName || this._defaultColor;\n}\n</pre>\n<p>The <code>defaultColor</code> property has a setter that overrides the hard-coded default color, \"red\". We don't need a getter.</p> <p>How do we bind to it? We already \"burned\" the <code>myHighlight</code> attribute name as a binding target.</p> <p>Remember that a <em>component is a directive too</em>. We can add as many component property bindings as we need by stringing them along in the template as in this example that sets the <code>a</code>, <code>b</code>, <code>c</code> properties to the string literals 'a', 'b', and 'c'. </p> <pre format=\".\">&lt;my-component [a]=\"'a'\" [b]=\"'b'\" [c]=\"'c'\"&gt;&lt;my-component&gt;</pre>\n<p>We do the same thing with an attribute directive.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p [myHighlight]=\"color\" [defaultColor]=\"'violet'\"&gt;\n  Highlight me too!\n&lt;/p&gt;\n</pre>\n<p>Here we're binding the user's color choice to the <code>myHighlight</code> attribute as we did before. We're <em>also</em> binding the literal string, 'violet', to the <code>defaultColor</code>.</p> <p>Here is the final version of the directive in action.</p> <img src=\"https://angular.io/resources/images/devguide/attribute-directives/highlight-directive-final-anim.gif\" alt=\"Final Highlight\"><h2 id=\"summary\">Summary</h2> <p>We now know how to</p> <ul> <li>\n<a href=\"#write-directive\">build a simple <strong>attribute directive</strong> to attach behavior to an HTML element</a>,</li> <li>\n<a href=\"#apply-directive\">use that directive in a template</a>,</li> <li>\n<a href=\"#respond-to-user\">respond to <strong>events</strong> to change behavior based on an event</a>,</li> <li>and <a href=\"#bindings\">use <strong>binding</strong> to pass values to the attribute directive</a>.</li> </ul> <p>The final source:</p> <pre language=\"ts\" name=\"app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app/app.component.html'\n})\n\nexport class AppComponent { }\n</pre>\n<pre language=\"html\" name=\"app.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- app.component.html --&gt;\n\n&lt;h1&gt;My First Attribute Directive&lt;/h1&gt;\n&lt;h4&gt;Pick a highlight color&lt;/h4&gt;\n&lt;div&gt;\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='lightgreen'\"&gt;Green\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='yellow'\"&gt;Yellow\n  &lt;input type=\"radio\" name=\"colors\" (click)=\"color='cyan'\"&gt;Cyan\n&lt;/div&gt;\n&lt;p [myHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n\n&lt;p [myHighlight]=\"color\" [defaultColor]=\"'violet'\"&gt;\n  Highlight me too!\n&lt;/p&gt;\n</pre>\n<pre language=\"ts\" name=\"highlight.directive.ts\" format=\"linenums\" data-language=\"typescript\">// highlight.directive.ts\n\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[myHighlight]'\n})\nexport class HighlightDirective {\n  private _defaultColor = 'red';\n  private el: HTMLElement;\n\n  constructor(el: ElementRef) { this.el = el.nativeElement; }\n\n  @Input() set defaultColor(colorName: string){\n    this._defaultColor = colorName || this._defaultColor;\n  }\n\n  @Input('myHighlight') highlightColor: string;\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || this._defaultColor);\n  }\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\nimport { HighlightDirective } from './highlight.directive';\n\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [\n    AppComponent,\n    HighlightDirective\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"main.ts\" format=\"linenums\" data-language=\"typescript\">// main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<pre language=\"html\n  \" name=\"index.html\" format=\"linenums\" data-language=\"html\">&lt;!-- index.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Attribute Directives&lt;/title&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n\n    &lt;!-- Polyfill(s) for older browsers --&gt;\n    &lt;script src=\"node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"systemjs.config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      System.import('app').catch(function(err){ console.error(err); });\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<h3 id=\"why-input\">Appendix: Input properties</h3> <p>Earlier we declared the <code>highlightColor</code> property to be an <strong><em>input</em></strong> property of our <code>HighlightDirective</code></p> <p>We've seen properties in bindings before. We never had to declare them as anything. Why now?</p> <p>Angular makes a subtle but important distinction between binding <strong>sources</strong> and <strong>targets</strong>.</p> <p>In all previous bindings, the directive or component property was a binding <strong><em>source</em></strong>. A property is a <em>source</em> if it appears in the template expression to the <strong><em>right</em></strong> of the equals (=).</p> <p>A property is a <em>target</em> when it appears in <strong>square brackets</strong> ([ ]) to the <strong>left</strong> of the equals (=) ... as it is does when we bind to the <code>myHighlight</code> property of the <code>HighlightDirective</code>, </p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p [myHighlight]=\"color\"&gt;Highlight me!&lt;/p&gt;\n</pre>\n<p>The 'color' in <code>[myHighlight]=\"color\"</code> is a binding <strong><em>source</em></strong>. A source property doesn't require a declaration.</p> <p>The 'myHighlight' in <code>[myHighlight]=\"color\"</code> <em>is</em> a binding <strong><em>target</em></strong>. We must declare it as an <em>input</em> property. Angular rejects the binding with a clear error if we don't.</p> <p>Angular treats a <em>target</em> property differently for a good reason. A component or directive in target position needs protection.</p> <p>Imagine that our <code>HighlightDirective</code> did truly wonderous things. We graciously made a gift of it to the world. </p> <p>To our surprise, some people — perhaps naively — started binding to <em>every</em> property of our directive. Not just the one or two properties we expected them to target. <em>Every</em> property. That could really mess up our directive in ways we didn't anticipate and have no desire to support.</p> <p>The <em>input</em> declaration ensures that consumers of our directive can only bind to the properties of our public API ... nothing else.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/attribute-directives.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/attribute-directives.html</a>\n  </p>\n</div>\n","guide/npm-packages":"<h1 class=\"hero-title text-display-1 \">Npm Packages</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Details of the recommended npm packages and the different kinds of package dependencies</p></div>\n<p>Angular applications and Angular itself depend upon features and functionality provided by a variety of third-party packages (including Angular itself). These packages are maintained and installed with the Node Package Manager (<a href=\"https://docs.npmjs.com/\" target=\"_blank\">npm</a>).</p> <div class=\"l-sub-section\">\n<p>Node.js and npm are essential to Angular 2 development. </p> <p><a href=\"https://docs.npmjs.com/getting-started/installing-node\" target=\"_blank\" title=\"Installing Node.js and updating npm\"> Get it now</a> if it's not already installed on your machine.</p> <p><strong>Verify that you are running at least node <code>v4.x.x</code> and npm <code>3.x.x</code></strong> by running <code>node -v</code> and <code>npm -v</code> in a terminal/console window. Older versions produce errors.</p> <p>We recommend <a href=\"https://github.com/creationix/nvm\">nvm</a> for managing multiple versions of node and npm.</p> </div>\n<p>We recommend a comprehensive starter-set of packages as specified in the <code>dependencies</code> and <code>devDependencies</code> sections of the QuickStart <a href=\"https://docs.npmjs.com/files/package.json\" target=\"_blank\">package.json</a> file:</p> <pre language=\"json\" format=\".\" data-language=\"json\" name=\"package.json (dependencies)\">// package.json (dependencies)\n\n{\n  \"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.5\",\n    \"@angular/compiler\": \"2.0.0-rc.5\",\n    \"@angular/core\": \"2.0.0-rc.5\",\n    \"@angular/forms\": \"0.3.0\",\n    \"@angular/http\": \"2.0.0-rc.5\",\n    \"@angular/platform-browser\": \"2.0.0-rc.5\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.5\",\n    \"@angular/router\": \"3.0.0-rc.1\",\n    \"@angular/router-deprecated\": \"2.0.0-rc.2\",\n    \"@angular/upgrade\": \"2.0.0-rc.5\",\n    \"systemjs\": \"0.19.27\",\n    \"core-js\": \"^2.4.0\",\n    \"reflect-metadata\": \"^0.1.3\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"zone.js\": \"^0.6.12\",\n    \"angular2-in-memory-web-api\": \"0.0.15\",\n    \"bootstrap\": \"^3.3.6\"\n  },\n  \"devDependencies\": {\n    \"concurrently\": \"^2.0.0\",\n    \"lite-server\": \"^2.2.0\",\n    \"typescript\": \"^1.8.10\",\n    \"typings\": \"^1.0.4\"\n  }\n}</pre>\n<p>There are other possible package choices and you're likely to add and subtract to meet your application needs. We're recommending <em>this particular set</em> because (a) we know they work well together and (b) they include everything we'll need to build and run the sample applications in this documentation series.</p> <div class=\"l-sub-section\">\n<p><em>Almost</em> everything. A cookbook or guide chapter may require an additional library such as <em>jQuery</em>.</p> </div>\n<p>This is far more than we need for QuickStart. Indeed, it's more than we need for most applications. There is no harm in installing more than we need. We only serve to the client those packages that the application actually requests.</p> <p>In this chapter we explain what each package does and why we include it. Feel free to make substitutions later to suit your tastes and experience.</p> <h2 id=\"-dependencies-and-devdependencies-\">\n<em>dependencies</em> and <em>devDependencies</em>\n</h2> <p>The <code>package.json</code> distinguishes between two sets of packages, <a href=\"#dependencies\">dependencies</a> and <a href=\"#dev-dependencies\">devDependencies</a>.</p> <p>The packages listed under <em>dependencies</em> are essential to <em>running</em> the application. The <em>devDependencies</em> are only necessary to <em>develop</em> the application. They can be excluded from production installations as in this example:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">npm install my-application --production\n</pre>\n<h2 id=\"dependencies\"><em>dependencies</em></h2> <p>There are three package categories in the <code>dependencies</code> section of the application <code>package.json</code>:</p> <ul> <li>\n<p><strong><em>Features</em></strong> - Feature packages provide our application with framework and utility capabilities.</p> </li> <li>\n<p><strong><em>Polyfills</em></strong> - Polyfills plug gaps in the browser's JavaScript implementation.</p> </li> <li>\n<p><strong><em>Other</em></strong> - Other libraries that support the application such as <code>bootstrap</code> for HTML widgets and styling.</p> </li> </ul> <h3 id=\"feature-packages\">Feature Packages</h3> <p><strong><em>@angular/core</em></strong> - Critical runtime parts of the framework needed by every application. Includes all metadata decorators, <code>Component</code>, <code>Directive</code>, dependency injection, and the component lifecycle hooks.</p> <p><strong><em>@angular/common</em></strong> - The commonly needed services, pipes and directives provided by the Angular team.</p> <p><strong><em>@angular/compiler</em></strong> - Angular's <em>Template Compiler</em>. It understand templates and can convert them to code that makes the app run and render. Developers typically don’t interact with the compiler directly. They use it indirectly via <code>platform-browser-dynamic</code> or the offline template compiler.</p> <p><strong><em>@angular/platform-browser</em></strong> - Everything DOM and browser related, especially the pieces that help render into DOM. This package also includes the bootstrapStatic method for bootstrapping applications for production builds that pre-compile templates offline.</p> <p><strong><em>@angular/platform-browser-dynamic</em></strong> - Providers and a bootstrap method for applications that compile templates on the client. Don’t use offline compilation. We use this package for boostrapping during development and for boostrapping plunker samples.</p> <p><strong><em>@angular/http</em></strong> - Angular's http client.</p> <p><strong><em>@angular/router</em></strong> - Component router.</p> <p><strong><em>@angular/upgrade</em></strong> - Set of utilities for upgrading Angular 1 applications.</p> <p><strong><em><a href=\"https://github.com/systemjs/systemjs\">system.js</a></em></strong> - A dynamic module loader compatible with the <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">ES2015 module</a> specification. There are other viable choices including the well-regarded <a href=\"https://webpack.github.io/\">webpack</a>. SystemJS happens to be the one we use in the documentation samples. It works.</p> <p>Our applications are likely to require additional packages that provide HTML controls, themes, data access, and various utilities.</p> <h3 id=\"polyfills\">Polyfill Packages</h3> <p>Angular requires certain <a href=\"https://en.wikipedia.org/wiki/Polyfill\">polyfills</a> in the application environment. We install these polyfills with very specific npm packages that Angular lists in the <em>peerDependencies</em> section of its <code>package.json</code>.</p> <p>We must list these packages in the <code>dependencies</code> section of our own <code>package.json</code>.</p> <div class=\"l-sub-section\">\n<p>See \"<a href=\"#why-peer-dependencies\">Why peerDependencies?</a>\" below for background on this requirement.</p> </div>\n<p><strong><em>core-js</em></strong> - Monkey patches the global context (window) with essential features of ES2015 (ES6). Developers may substitute an alternative polyfill that provides the same core APIs. This dependency should go away once these APIs are implemented by all supported ever-green browsers.</p> <p><strong><em>reflect-metadata</em></strong> - A dependency shared between Angular and the <strong><em>TypeScript compiler</em></strong>. Developers should be able to update a TypeScript package without upgrading Angular, which is why this is a dependency of the application and not a dependency of Angular.</p> <p><strong><em>rxjs</em></strong> - A polyfill for the <a href=\"https://github.com/zenparsing/es-observable\">Observables specification</a> currently before the <a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a> committee that determines standards for the JavaScript language. Developers should be able to pick a preferred version of <em>rxjs</em> (within a compatible version range) without waiting for Angular updates.</p> <p><strong><em>zone.js</em></strong> - A polyfill for the <a href=\"https://gist.github.com/mhevery/63fdcdf7c65886051d55\">Zone specification</a> currently before the <a href=\"http://www.ecma-international.org/memento/TC39.htm\">TC39</a> committee that determines standards for the JavaScript language. Developers should be able to pick a preferred version of <em>zone.js</em> to use (within a compatible version range) without waiting for Angular updates.</p> <h3 id=\"other\">Other helper libraries</h3> <p><strong><em>angular2-in-memory-web-api</em></strong> - An Angular-supported library that simulates a remote server's web api without requiring an actual server or real http calls. Good for demos, documentation samples, and early stage development (before we even have a server). Learn about it in the <a href=\"server-communication#appendix-tour-of-heroes-in-memory-server\">Http Client</a> chapter.</p> <p><strong><em>bootstrap</em></strong> - <a href=\"http://getbootstrap.com/\">Bootstrap</a> is a popular HTML and CSS framework for designing responsive web apps. Some of the documentation samples improve their appearance with <em>bootstrap</em>.</p> <h2 id=\"dev-dependencies\"><em>devDependencies</em></h2> <p>The packages listed in the <em>devDependencies</em> section of the <code>package.json</code> help us develop the application. They do not have to be deployed with the production application although there is rarely harm in doing so.</p> <p><strong><em><a href=\"https://www.npmjs.com/package/concurrently\">concurrently</a></em></strong> - A utility to run multiple <em>npm</em> commands concurrently on OS/X, Windows, and Linux operating systems.</p> <p><strong><em><a href=\"https://www.npmjs.com/package/lite-server\">lite-server</a></em></strong> - A light-weight, static file server, written and maintained by <a href=\"http://johnpapa.net/\">John Papa</a> with excellent support for Angular apps that use routing.</p> <p><strong><em><a href=\"https://www.npmjs.com/package/typescript\">typescript</a></em></strong> - The TypeScript language server including the <em>tsc</em> TypeScript compiler.</p> <p><strong><em><a href=\"https://www.npmjs.com/package/typings\">typings</a></em></strong> - A manager for TypeScript definition files. Learn more about it in the <a href=\"typescript-configuration#typings\">TypeScript Configuration</a> chapter.</p> <p>This section likely grows as we add more tools, testing, and build support. The QuickStart set is sufficient for developing the documentation sample applications.</p> <h2 id=\"why-peer-dependencies\">Why <em>peerDependencies</em>?</h2> <p>We don't have a <em>peerDependencies</em> section in the QuickStart <code>package.json</code>. But Angular itself has a <em>peerDependencies</em> section in <em>its</em> package.json and that has important consequences for our application. </p> <p>It explains why we load the <a href=\"#polyfills\">polyfill</a> <em>dependency</em> packages in the QuickStart <code>package.json</code>, and why we'll need those packages in our own applications.</p> <p>Let's briefly explain what <a href=\"https://nodejs.org/en/blog/npm/peer-dependencies/\">peer dependencies</a> are about.</p> <p>As we know, packages depend on other packages. For example, our application depends upon the Angular package.</p> <p>Two packages, 'A' and 'B', could depend on the same third package 'C'. 'A' and 'B' might both list 'C' among their <em>dependencies</em>.</p> <p>What if 'A' and 'B' depend on different versions of 'C' ('C1' and 'C2'). The npm package system supports that! It installs 'C1' in the <code>node_modules</code> folder for 'A' and 'C2' in the <code>node_modules</code> folder for 'B'. Now 'A' and 'B' have their own copies of 'C' and they run without interferring. This is great.</p> <p>But there is a problem. Package 'A' may require the presence of 'C1' without actually calling upon it directly. 'A' may only work if <em>everyone is using 'C1'</em>. It falls down if any part of the application relies on 'C2'.</p> <p>The solution is for 'A' to declare that 'C1' is a <em>peer dependency</em>.</p> <p>The difference between a <code>dependency</code> and a <code>peerDependency</code> is roughly this:</p>  <p>A <strong>dependency</strong> says, \"I need this thing directly available to <em>me</em>.\"</p> <p>A <strong>peerDependency</strong> says, \"if you want to use me, you need this thing available to <em>you</em>.\"</p>  <p>Angular finds itself in this situation. Accordingly, the Angular <code>package.json</code> specifies several <em>peer dependency</em> packages, each pinned to a particular version of a third-party package.</p> <h3 id=\"we-must-install-angular-s-peerdependencies-ourselves\">We must install Angular's <em>peerDependencies</em> ourselves</h3> <p>When <em>npm</em> installs packages listed in <em>our</em> <code>dependencies</code> section, it also installs the packages listed within <em>their</em> packages <code>dependencies</code> sections. The process is recursive.</p> <p>But as of version 3, <em>npm</em> does <em>not</em> install packages listed in <em>peerDependencies</em> sections.</p> <p>That means when our application installs Angular, <strong><em>npm</em> will not automatically install the packages listed in Angular's <em>peerDependencies</em> section</strong>.</p> <p>Fortunately, <em>npm</em> warns us (a) when any <em>peer dependencies</em> are missing or (b) when the application or any its other dependencies installs a different version of a <em>peer dependency</em>. </p> <p>These warnings are a critical guard against accidental failures due to version mismatches. They leave us in control of package and version resolution.</p> <p>It is our responsibility to list all <em>peer dependency</em> packages <strong>among our own <em>devDependencies</em></strong>.</p> <div class=\"l-sub-section\">\n<h4 id=\"the-future-of-peerdependencies-\">The future of <em>peerDependencies</em>\n</h4> <p>The Angular polyfill dependencies should be just a suggestion or a hint to developers so that they know what Angular expects. They should not be hard requirements as they are today. We don't have a way to make them optional today.</p> <p>There is a npm feature request for \"optional peerDependencies\" which would allow us to model this relationship better. Once implemented, Angular will switch from <em>peerDependencies</em> to <em>optionalPeerDependencies</em> for all polyfills.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/npm-packages.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/npm-packages.html</a>\n  </p>\n</div>\n","guide/index":"<h1 class=\"hero-title text-display-1 \">Documentation Overview</h1>\n\n<img src=\"https://angular.io/resources/images/devguide/intro/people.png\" alt=\"Us\" align=\"left\" style=\"width:200px\"><p>This is a practical guide to Angular for experienced programmers who are building client applications in HTML and TypeScript.</p> <p>We are on a journey together to understand how Angular works and, more importantly, how to make it work for us. This overview begins the journey. <br clear=\"all\"></p> <h2 id=\"learning-path\">Organization</h2> <p>The documentation is divided into major thematic sections, each a collection of chapters devoted to that theme.</p> <table width=\"100%\">\n<col width=\"15%\">\n<col>\n<tr>\n<td><b>QuickStart</b></td>\n<td>\n<p>The foundation for every chapter and sample in this documentation.</p> </td>\n</tr>\n<tr>\n<td><b>Tutorial</b></td>\n<td>\n<p>A step-by-step, immersive approach to learning Angular that introduces the major features of Angular in an application context.</p> </td>\n</tr>\n<tr>\n<td><b>Basics</b></td>\n<td>\n<p>The essential ingredients of Angular development.</p> </td>\n</tr>\n<tr>\n<td><b>Developer Guide</b></td>\n<td>\n<p>In-depth analysis of Angular features and development practices.</p> </td>\n</tr>\n<tr>\n<td><b>Cookbook</b></td>\n<td>\n<p>Recipes for specific application challenges, mostly code snippets with a minimum of exposition.</p> </td>\n</tr>\n<tr>\n<td><b>API Reference</b></td>\n<td>\n<p>Authoritative details about each member of the Angular libraries.</p> </td>\n</tr>\n</table>\n<h2 id=\"learning-path\">Learning path</h2> <p>We don't have to read the guide straight through. Most chapters stand on their own.</p> <p>We recommend a learning path for those new to Angular. Most of that path runs through the <em>Basics</em> section:</p> <ol> <li>\n<p>Read the <a href=\"architecture\">Architecture</a> overview to get the big picture.</p> </li> <li>\n<p>Try the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>. The QuickStart is the \"Hello, World\" of Angular 2. It shows us how to set up the libraries and tools we'll need to write <em>any</em> Angular app.</p> </li> <li>\n<p>Take the <em>Tour of Heroes</em> <a href=\"../tutorial/index\">Tutorial</a>, which picks up from where the QuickStart leaves off and builds a simple data-driven app. Simple, yes, but with the essential characteristics we'd expect of a professional application: a sensible project structure, data binding, master/detail, services, dependency injection, navigation, and remote data access.</p> <p>Return to the <em>Basics</em> section and continue in the suggested order:</p> </li> <li>\n<p><a href=\"displaying-data\">Displaying Data</a> explains how to get information on to the screen.</p> </li> <li>\n<p><a href=\"user-input\">User Input</a> covers the basics of responding to user behavior.</p> </li> <li>\n<p><a href=\"forms\">Forms</a> handle user data entry and validation within the UI.</p> </li> <li>\n<p><a href=\"dependency-injection\">Dependency Injection</a> is the way we build large, maintainable applications from small, single-purpose parts.</p> </li> <li>\n<p><a href=\"template-syntax\">Template Syntax</a> is a comprehensive study of Angular template HTML.</p> </li> </ol> <p>With this foundation, we can read and understand any chapter in the guide.</p> <h2 id=\"code-samples\">Code samples</h2> <p>Every chapter includes code snippets that we can reuse in our own applications. These snippets are excerpts from a sample application that accompanies the chapter.</p> <p>Look for a link to a running version of that sample near the top of each page, such as this <live-example></live-example> from the <a href=\"architecture\">Architecture</a> chapter.</p> <p>The link launches a browser-based code editor where we can inspect, modify, save, and download the code.</p> <p>A few early chapters are written as tutorials and are clearly marked as such. Most chapters are <em>not</em> tutorials. They highlight key points in code rather than explain each step necessary to build the sample. We can always get the full source by way of the live link.</p> <h2 id=\"reference-pages\">Reference pages</h2> <p>The <a href=\"https://angular.io/docs/ts/latest/guide/cheatsheet.html\">Cheat Sheet</a> lists Angular syntax for common scenarios.</p> <p>The <a href=\"../glossary\">Glossary</a> defines terms that Angular developers should know.</p> <p>The <a href=\"../index\">API Reference</a> is the authority on every public-facing member of the Angular libraries.</p> <h2 id=\"feedback\">Feedback</h2> <p>We welcome feedback! Leave a comment by clicking the icon in upper right corner of the banner.</p> <p>Post <em>documentation</em> issues and pull requests on the <a href=\"https://github.com/angular/angular.io\">angular.io</a> github repository.</p> <p>Post issues with <em>Angular 2 itself</em> to the <a href=\"https://github.com/angular/angular\">angular</a> github repository.</p> <div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"architecture\">Architecture Overview</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/</a>\n  </p>\n</div>\n","guide/pipes":"<h1 class=\"hero-title text-display-1 \">Pipes</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Pipes transform displayed values within a template.</p></div>\n<p>Every application starts out with what seems like a simple task: get data, transform them, and show them to users. Getting data could be as simple as creating a local variable or as complex as streaming data over a Websocket.</p> <p>Once data arrive, we could push their raw <code>toString</code> values directly to the view. That rarely makes for a good user experience. E.g., almost everyone prefers a simple birthday date like <samp>April 15, 1988</samp> to the original raw string format — <samp>Fri Apr 15 1988 00:00:00 GMT-0700 (Pacific Daylight Time)</samp>.</p> <p>Clearly some values benefit from a bit of massage. We soon discover that we desire many of the same transformations repeatedly, both within and across many applications. We almost think of them as styles. In fact, we'd like to apply them in our HTML templates as we do styles.</p> <p>Introducing Angular pipes, a way to write display-value transformations that we can declare in our HTML! Try the <live-example></live-example>.</p> <h2 id=\"using-pipes\">Using Pipes</h2> <p>A pipe takes in data as input and transforms it to a desired output. We'll illustrate by transforming a component's birthday property into a human-friendly date.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-birthday1.component.ts\">// app/hero-birthday1.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-birthday',\n  template: `&lt;p&gt;The hero's birthday is {{ birthday | date }}&lt;/p&gt;`\n})\nexport class HeroBirthdayComponent {\n  birthday = new Date(1988, 3, 15); // April 15, 1988\n}\n</pre>\n<p>Focus on the component's template.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;The hero's birthday is {{ birthday | date }}&lt;/p&gt;\n</pre>\n<p>Inside the interpolation expression we flow the component's <code>birthday</code> value through the <a href=\"template-syntax#pipe\">pipe operator</a> ( | ) to the <a href=\"../api/common/index/datepipe-class\">Date pipe</a> function on the right. All pipes work this way.</p> <div class=\"l-sub-section\">\n<p>The <code>Date</code> and <code>Currency</code> pipes need the <strong>ECMAScript Internationalization API</strong>. Safari and other older browsers don't support it. We can add support with a polyfill.</p> <pre language=\"html\" data-language=\"html\">&lt;script src=\"https://cdn.polyfill.io/v2/polyfill.min.js?features=Intl.~locale.en\"&gt;&lt;/script&gt;\n</pre>\n</div>\n<h2 id=\"built-in-pipes\">Built-in pipes</h2> <p>Angular comes with a stock of pipes such as <code>DatePipe</code>, <code>UpperCasePipe</code>, <code>LowerCasePipe</code>, <code>CurrencyPipe</code>, and <code>PercentPipe</code>. They are all immediately available for use in any template.</p> <div class=\"l-sub-section\">\n<p>Learn more about these and many other built-in pipes in the <a href=\"../api/index#!?apiFilter=pipe\">API Reference</a>; filter for entries that include the word \"pipe\".</p> <p>Angular 2 doesn't have a <code>FilterPipe</code> or an <code>OrderByPipe</code> for reasons explained in an <a href=\"#no-filter-pipe\">appendix below</a>.</p> </div>\n<h2 id=\"parameterizing-a-pipe\">Parameterizing a Pipe</h2> <p>A pipe may accept any number of optional parameters to fine-tune its output. We add parameters to a pipe by following the pipe name with a colon ( : ) and then the parameter value (e.g., <code>currency:'EUR'</code>). If our pipe accepts multiple parameters, we separate the values with colons (e.g. <code>slice:1:5</code>)</p> <p>We'll modify our birthday template to give the date pipe a format parameter. After formatting the hero's April 15th birthday, it should render as <strong><samp>04/15/88</samp></strong>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;The hero's birthday is {{ birthday | date:\"MM/dd/yy\" }} &lt;/p&gt;\n</pre>\n<p>The parameter value can be any valid <a href=\"template-syntax#template-expressions\">template expression</a> such as a string literal or a component property. In other words, we can control the format through a binding the same way we control the birthday value through a binding.</p> <p>Let's write a second component that <em>binds</em> the pipe's format parameter to the component's <code>format</code> property. Here's the template for that component:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-birthday2.component.ts (template)\">// app/hero-birthday2.component.ts (template)\n\ntemplate: `\n  &lt;p&gt;The hero's birthday is {{ birthday | date:format }}&lt;/p&gt;\n  &lt;button (click)=\"toggleFormat()\"&gt;Toggle Format&lt;/button&gt;\n`\n</pre>\n<p>We also added a button to the template and bound its click event to the component's <code>toggleFormat()</code> method. That method toggles the component's <code>format</code> property between a short form (<code>'shortDate'</code>) and a longer form (<code>'fullDate'</code>).</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-birthday2.component.ts (class)\">// app/hero-birthday2.component.ts (class)\n\nexport class HeroBirthday2Component {\n  birthday = new Date(1988, 3, 15); // April 15, 1988\n  toggle = true; // start with true == shortDate\n\n  get format()   { return this.toggle ? 'shortDate' : 'fullDate'; }\n  toggleFormat() { this.toggle = !this.toggle; }\n}\n</pre>\n<p>As we click the button, the displayed date alternates between \"<strong><samp>04/15/1988</samp></strong>\" and \"<strong><samp>Friday, April 15, 1988</samp></strong>\".</p> <img src=\"https://angular.io/resources/images/devguide/pipes/date-format-toggle-anim.gif\" alt=\"Date Format Toggle\"><div class=\"l-sub-section\">\n<p>Learn more about the <code>DatePipes</code> format options in the <a href=\"../api/common/index/datepipe-class\">API Docs</a>.</p> </div>\n<h2 id=\"chaining-pipes\">Chaining pipes</h2> <p>We can chain pipes together in potentially useful combinations. In the following example, we chain the birthday to the <code>DatePipe</code> and on to the <code>UpperCasePipe</code> so we can display the birthday in uppercase. The following birthday displays as <strong><samp>APR 15, 1988</samp></strong>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">The chained hero's birthday is\n{{ birthday | date | uppercase}}\n</pre>\n<p>This example — which displays <strong><samp>FRIDAY, APRIL 15, 1988</samp></strong> — chains the same pipes as above, but passes in a parameter to <code>date</code> as well.</p> <pre language=\"html\" format=\"\" data-language=\"html\">The chained hero's birthday is\n{{  birthday | date:'fullDate' | uppercase}}\n</pre>\n<h2 id=\"custom-pipes\">Custom Pipes</h2> <p>We can write our own custom pipes. Here's a custom pipe named <code>ExponentialStrengthPipe</code> that can boost a hero's powers:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/exponential-strength.pipe.ts\">// app/exponential-strength.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n/*\n * Raise the value exponentially\n * Takes an exponent argument that defaults to 1.\n * Usage:\n *   value | exponentialStrength:exponent\n * Example:\n *   {{ 2 |  exponentialStrength:10}}\n *   formats to: 1024\n*/\n@Pipe({name: 'exponentialStrength'})\nexport class ExponentialStrengthPipe implements PipeTransform {\n  transform(value: number, exponent: string): number {\n    let exp = parseFloat(exponent);\n    return Math.pow(value, isNaN(exp) ? 1 : exp);\n  }\n}\n</pre>\n<p>This pipe definition reveals several key points:</p> <ul> <li>\n<p>A pipe is a class decorated with pipe metadata.</p> </li> <li>\n<p>The pipe class implements the <code>PipeTransform</code> interface's <code>transform</code> method that accepts an input value followed by optional parameters and returns the transformed value.</p> </li> <li>\n<p>There will be one additional argument to the <code>transform</code> method for each parameter passed to the pipe. Our pipe has one such parameter: the <code>exponent</code>.</p> </li> <li>\n<p>We tell Angular that this is a pipe by applying the <code>@Pipe</code> decorator which we import from the core Angular library.</p> </li> <li>\n<p>The <code>@Pipe</code> decorator allows us to define the pipe name that we'll use within template expressions. It must be a valid JavaScript identifier. Our pipe's name is <code>exponentialStrength</code>.</p> </li> </ul> <div class=\"l-sub-section\">\n<h3 id=\"the-pipetransform-interface\">The <em>PipeTransform</em> Interface</h3> <p>The <code>transform</code> method is essential to a pipe. The <code>PipeTransform</code> <em>interface</em> defines that method and guides both tooling and the compiler. It is technically optional; Angular looks for and executes the <code>transform</code> method regardless.</p> </div>\n<p>Now we need a component to demonstrate our pipe.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/power-booster.component.ts\">// app/power-booster.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'power-booster',\n  template: `\n    &lt;h2&gt;Power Booster&lt;/h2&gt;\n    &lt;p&gt;Super power boost: {{2 | exponentialStrength: 10}}&lt;/p&gt;\n  `\n})\nexport class PowerBoosterComponent { }\n</pre>\n<img src=\"https://angular.io/resources/images/devguide/pipes/power-booster.png\" alt=\"Power Booster\"><p>Two things to note:</p> <ol> <li>\n<p>We use our custom pipe the same way we use the built-in pipes.</p> </li> <li>\n<p>We must include our pipe in the <code>declarations</code> array of the AppModule.</p> </li> </ol> <div class=\"callout is-helpful\">\n<header>Remember the declarations array!</header><p>Angular reports an error if we neglect to list our custom pipe. We didn't list the <code>DatePipe</code> in our previous example because all Angular built-in pipes are pre-registered. Custom pipes must be registered manually.</p> </div>\n<p>If we try the <live-example></live-example>, we can probe its behavior by changing the value and the optional exponent in the template.</p> <h2 id=\"power-boost-calculator-extra-credit-\">Power Boost Calculator (extra-credit)</h2> <p>It's not much fun updating the template to test our custom pipe. We could upgrade the example to a \"Power Boost Calculator\" that combines our pipe and two-way data binding with <code>ngModel</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"/app/power-boost-calculator.component.ts\">// /app/power-boost-calculator.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'power-boost-calculator',\n  template: `\n    &lt;h2&gt;Power Boost Calculator&lt;/h2&gt;\n    &lt;div&gt;Normal power: &lt;input [(ngModel)]=\"power\"&gt;&lt;/div&gt;\n    &lt;div&gt;Boost factor: &lt;input [(ngModel)]=\"factor\"&gt;&lt;/div&gt;\n    &lt;p&gt;\n      Super Hero Power: {{power | exponentialStrength: factor}}\n    &lt;/p&gt;\n  `\n})\nexport class PowerBoostCalculatorComponent {\n  power = 5;\n  factor = 1;\n}\n</pre>\n<img src=\"https://angular.io/resources/images/devguide/pipes/power-boost-calculator-anim.gif\" alt=\"Power Boost Calculator\"><h2 id=\"change-detection\">Pipes and Change Detection</h2> <p>Angular looks for changes to data-bound values through a <em>change detection</em> process that runs after every JavaScript event: every keystroke, mouse move, timer tick, and server response. This could be expensive. Angular strives to lower the cost whenever possible and appropriate.</p> <p>Angular picks a simpler, faster change detection algorithm when we use a pipe. Let's see how.</p> <h3 id=\"no-pipe\">No pipe</h3> <p>The component in our next example uses the default, aggressive change detection strategy to monitor and update its display of every hero in the <code>heroes</code> array. Here's the template:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/flying-heroes.component.html (v1)\">&lt;!-- app/flying-heroes.component.html (v1) --&gt;\n\nNew hero:\n  &lt;input type=\"text\" #box\n          (keyup.enter)=\"addHero(box.value); box.value=''\"\n          placeholder=\"hero name\"&gt;\n  &lt;button (click)=\"reset()\"&gt;Reset&lt;/button&gt;\n  &lt;div *ngFor=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n</pre>\n<p>The companion component class provides heroes, adds new heroes into the array, and can reset the array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/flying-heroes.component.ts (v1)\">// app/flying-heroes.component.ts (v1)\n\nexport class FlyingHeroesComponent {\n  heroes: any[] = [];\n  canFly = true;\n  constructor() { this.reset(); }\n\n  addHero(name: string) {\n    name = name.trim();\n    if (!name) { return; }\n    let hero = {name, canFly: this.canFly};\n    this.heroes.push(hero);\n  }\n\n  reset() { this.heroes = HEROES.slice(); }\n}\n</pre>\n<p>We can add a new hero and Angular updates the display when we do. The <code>reset</code> button replaces <code>heroes</code> with a new array of the original heroes and Angular updates the display when we do. If we added the ability to remove or change a hero, Angular would detect those changes too and update the display as well.</p> <h3 id=\"flying-heroes-pipe\">Flying Heroes pipe</h3> <p>Let's add a <code>FlyingHeroesPipe</code> to the <code>*ngFor</code> repeater that filters the list of heroes to just those heroes who can fly.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/flying-heroes.component.html (flyers)\">&lt;!-- app/flying-heroes.component.html (flyers) --&gt;\n\n&lt;div *ngFor=\"let hero of (heroes | flyingHeroes)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n</pre>\n<p>Here's the <code>FlyingHeroesPipe</code> implementation which follows the pattern for custom pipes we saw earlier.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/flying-heroes.pipe.ts\">// app/flying-heroes.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { Flyer } from './heroes';\n\n@Pipe({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements PipeTransform {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n</pre>\n<p>When we run the sample now we see odd behavior (try it in the <live-example></live-example>). Every hero we add is a flying hero but none of them are displayed.</p> <p>Although we're not getting the behavior we want, Angular isn't broken. It's just using a different change detection algorithm — one that ignores changes to the list or any of its items.</p> <p>Look at how we're adding a new hero:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">this.heroes.push(hero);\n</pre>\n<p>We're adding the new hero into the <code>heroes</code> array. The reference to the array hasn't changed. It's the same array. That's all Angular cares about. From its perspective, <em>same array, no change, no display update</em>.</p> <p>We can fix that. Let's create a new array with the new hero appended and assign that to <code>heroes</code>. This time Angular detects that the array reference has changed. It executes the pipe and updates the display with the new array which includes the new flying hero.</p> <p><em>If we <strong>mutate</strong> the array, no pipe is invoked and no display updated; if we <strong>replace</strong> the array, then the pipe executes and the display is updated</em>. The <em>Flying Heroes</em> extends the code with checkbox switches and additional displays to help us experience these effects.</p> <img src=\"https://angular.io/resources/images/devguide/pipes/flying-heroes-anim.gif\" alt=\"Flying Heroes\"><p>Replacing the array is an efficient way to signal to Angular that it should update the display. When do we replace the array? When the data change. That's an easy rule to follow in <em>this toy</em> example where the only way to change the data is by adding a new hero.</p> <p>More often we don't know when the data have changed, especially in applications that mutate data in many ways, perhaps in application locations far away. A component in such an application usually can't know about those changes. Moreover, it's unwise to distort our component design to accommodate a pipe. We strive as much as possible to keep the component class independent of the HTML. The component should be unaware of pipes.</p> <p>Perhaps we should consider a different kind of pipe for filtering flying heroes, an <em>impure pipe</em>.</p> <h2 id=\"pure-and-impure-pipes\">Pure and Impure Pipes</h2> <p>There are two categories of pipes: <strong>pure</strong> and <strong>impure</strong>. Pipes are pure by default. Every pipe we've seen so far has been pure. We make a pipe impure by setting its pure flag to false. We could make the <code>FlyingHeroesPipe</code> impure like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Pipe({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\n</pre>\n<p>Before we do that, let's understand the difference between <em>pure</em> and <em>impure</em>, starting with a <em>pure</em> pipe.</p> <h3 id=\"pure-pipes\">Pure pipes</h3> <p>Angular executes a <em>pure pipe</em> only when it detects a <em>pure change</em> to the input value. A <strong><em>pure change</em></strong> is <em>either</em> a change to a primitive input value (<code>String</code>, <code>Number</code>, <code>Boolean</code>, <code>Symbol</code>) <em>or</em> a changed object reference (<code>Date</code>, <code>Array</code>, <code>Function</code>, <code>Object</code>).</p> <p>Angular ignores changes <em>within</em> (composite) objects. It won't call a pure pipe if we change an input month, add to an input array, or update an input object property.</p> <p>This may seem restrictive but is is also fast. An object reference check is fast — much faster than a deep check for differences — so Angular can quickly determine if it can skip both the pipe execution and a view update.</p> <p>For this reason, we prefer a pure pipe if we can live with the change detection strategy. When we can't, we <em>may</em> turn to the impure pipe.</p> <div class=\"l-sub-section\">\n<p>Or we might not use a pipe at all. It may be better to pursue the pipe's purpose with a property of the component, a point we take up later.</p> </div>\n<h3 id=\"impure-pipes\">Impure pipes</h3> <p>Angular executes an <em>impure pipe</em> during <em>every</em> component change detection cycle. An impure pipe will be called a lot, as often as every keystroke or mouse-move.</p> <p>With that concern in mind, we must implement an impure pipe with great care. An expensive, long-running pipe could destroy the user experience.</p>  <h3 id=\"an-impure-flyingheroespipe-\">An impure <em>FlyingHeroesPipe</em>\n</h3> <p>A flip of the switch turns our <code>FlyingHeroesPipe</code> into a <code>FlyingHeroesImpurePipe</code>. Here's the complete implementation:</p> <pre language=\"ts\" name=\"FlyingHeroesImpurePipe\" format=\".\" data-language=\"typescript\">// FlyingHeroesImpurePipe\n\n@Pipe({\n  name: 'flyingHeroesImpure',\n  pure: false\n})\nexport class FlyingHeroesImpurePipe extends FlyingHeroesPipe {}\n</pre>\n<pre language=\"ts\" name=\"FlyingHeroesPipe\" format=\".\" data-language=\"typescript\">// FlyingHeroesPipe\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\nimport { Flyer } from './heroes';\n\n@Pipe({ name: 'flyingHeroes' })\nexport class FlyingHeroesPipe implements PipeTransform {\n  transform(allHeroes: Flyer[]) {\n    return allHeroes.filter(hero =&gt; hero.canFly);\n  }\n}\n</pre>\n<p>We inherit from <code>FlyingHeroesPipe</code> to prove the point that nothing changed internally. The only difference is the <code>pure</code> flag in the pipe metadata.</p> <p>This is a good candidate for an impure pipe because the <code>transform</code> function is trivial and fast.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">return allHeroes.filter(hero =&gt; hero.canFly);\n</pre>\n<pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/flying-heroes-impure.component.html (FlyingHeroesImpureComponent)\">&lt;!-- app/flying-heroes-impure.component.html (FlyingHeroesImpureComponent) --&gt;\n\n&lt;div *ngFor=\"let hero of (heroes | flyingHeroesImpure)\"&gt;\n  {{hero.name}}\n&lt;/div&gt;\n</pre>\n<p>The only substantive change is the pipe in the template. We can confirm in the <live-example></live-example> that the <em>flying heroes</em> display updates as we enter new heroes even when we mutate the <code>heroes</code> array.</p> <h3 id=\"async-pipe\">The impure <i>AsyncPipe</i>\n</h3>\n<p>The Angular <code>AsyncPipe</code> is an interesting example of an impure pipe. The <code>AsyncPipe</code> accepts a <code>Promise</code> or <code>Observable</code> as input and subscribes to the input automatically, eventually returning the emitted value(s).</p> <p>It is also stateful. The pipe maintains a subscription to the input <code>Observable</code> and keeps delivering values from that <code>Observable</code> as they arrive.</p> <p>In this next example, we bind an <code>Observable</code> of message strings (<code>message$</code>) to a view with the <code>async</code> pipe.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-async-message.component.ts\">// app/hero-async-message.component.ts\n\nimport { Component } from '@angular/core';\nimport { Observable } from 'rxjs/Rx';\n\n@Component({\n  selector: 'hero-message',\n  template: `\n    &lt;h2&gt;Async Hero Message and AsyncPipe&lt;/h2&gt;\n    &lt;p&gt;Message: {{ message$ | async }}&lt;/p&gt;\n    &lt;button (click)=\"resend()\"&gt;Resend&lt;/button&gt;`,\n})\nexport class HeroAsyncMessageComponent {\n  message$: Observable&lt;string&gt;;\n\n  private messages = [\n    'You are my hero!',\n    'You are the best hero!',\n    'Will you be my hero?'\n  ];\n\n  constructor() { this.resend(); }\n\n  resend() {\n    this.message$ = Observable.interval(500)\n      .map(i =&gt; this.messages[i])\n      .take(this.messages.length);\n  }\n}\n</pre>\n<p>The Async pipe saves boilerplate in the component code. The component doesn't have to subscribe to the async data source, it doesn't extract the resolved values and expose them for binding, and the component doesn't have to unsubscribe when it is destroyed (a potent source of memory leaks).</p> <h3 id=\"an-impure-caching-pipe\">An impure caching pipe</h3> <p>Let's write one more impure pipe, a pipe that makes an HTTP request to the server. Normally, that's a horrible idea. It's probably a horrible idea no matter what we do. We're forging ahead anyway to make a point. Remember that impure pipes are called every few microseconds. If we're not careful, this pipe will punish the server with requests.</p> <p>We are careful. Our pipe only makes a server call if the request URL has changed. It caches the request URL and waits for a result which it also caches when it arrives. The pipe returns the cached result (which is null while a request is in flight) after every Angular call and only contacts the server as necessary.</p> <p>Here's the code, which uses the <a href=\"server-communication\">Angular http</a> facility to retrieve a <code>heroes.json</code> file:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/fetch-json.pipe.ts\">// app/fetch-json.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport { Http }                from '@angular/http';\n\n@Pipe({\n  name: 'fetch',\n  pure: false\n})\nexport class FetchJsonPipe  implements PipeTransform {\n  private fetchedJson: any = null;\n  private prevUrl = '';\n\n  constructor(private _http: Http) { }\n\n  transform(url: string): any {\n    if (url !== this.prevUrl) {\n      this.prevUrl = url;\n      this.fetchedJson = null;\n      this._http.get(url)\n        .map( result =&gt; result.json() )\n        .subscribe( result =&gt; this.fetchedJson = result );\n    }\n\n    return this.fetchedJson;\n  }\n}\n</pre>\n<p>Then we demonstrate it in a harness component whose template defines two bindings to this pipe.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-list.component.ts (template)\">// app/hero-list.component.ts (template)\n\ntemplate: `\n  &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n  &lt;div *ngFor=\"let hero of ('heroes.json' | fetch) \"&gt;\n    {{hero.name}}\n  &lt;/div&gt;\n\n  &lt;p&gt;Heroes as JSON:\n  {{'heroes.json' | fetch | json}}\n  &lt;/p&gt;\n`\n</pre>\n<p>Despite the two bindings and what we know to be frequent pipe calls, the nework tab in the browser developer tools confirms that there is only one request for the file.</p> <p>The component renders like this:</p> <img src=\"https://angular.io/resources/images/devguide/pipes/hero-list.png\" alt=\"Hero List\"><h3 id=\"-jsonpipe-\"><em>JsonPipe</em></h3> <p>The second binding involving the <code>FetchPipe</code> uses more pipe chaining. We take the same fetched results displayed in the first binding and display them again, this time in JSON format by chaining through to the built-in <code>JsonPipe</code>.</p> <div class=\"callout is-helpful\">\n<header>Debugging with the json pipe</header><p>The <a href=\"../api/common/index/jsonpipe-class\">JsonPipe</a> provides an easy way to diagnosis a mysteriously failing data binding or inspect an object for future binding.</p> </div>\n<p>Here's the complete component implementation:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-list.component.ts\">// app/hero-list.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-list',\n  template: `\n    &lt;h2&gt;Heroes from JSON File&lt;/h2&gt;\n\n    &lt;div *ngFor=\"let hero of ('heroes.json' | fetch) \"&gt;\n      {{hero.name}}\n    &lt;/div&gt;\n\n    &lt;p&gt;Heroes as JSON:\n    {{'heroes.json' | fetch | json}}\n    &lt;/p&gt;\n  `\n})\nexport class HeroListComponent { }\n</pre>\n<h3 id=\"pure-pipe-pure-fn\">Pure pipes and pure functions</h3> <p>A pure pipe uses pure functions. Pure functions process inputs and return values without detectable side-effects. Given the same input they should always return the same output.</p> <p>The pipes we saw earlier in this chapter were implemented with pure functions. The built-in <code>DatePipe</code> is a pure pipe with a pure function implementation. So is our <code>ExponentialStrengthPipe</code>. So is our <code>FlyingHeroesPipe</code>. A few steps back we reviewed the <code>FlyingHeroesImpurePipe</code> — <em>an impure pipe with a pure function</em>.</p> <p>But a <em>pure pipe</em> must always be implemented with a <em>pure function</em>. Failure to heed this warning will bring about many a console errors regarding expressions that have changed after they were checked.</p> <h2 id=\"next-steps\">Next Steps</h2> <p>Pipes are a great way to encapsulate and share common display-value transformations. We use them like styles, dropping them into our templates expressions to enrich the appeal and usability of our views.</p> <p>Explore Angular's inventory of built-in pipes in the <a href=\"../api/index#!?apiFilter=pipe\">API Reference</a>. Try writing a custom pipe and perhaps contributing it to the community.</p> <h2 id=\"no-filter-pipe\">No <em>FilterPipe</em> or <em>OrderByPipe</em>\n</h2> <p>Angular does not ship with pipes for filtering or sorting lists. Developers familiar with Angular 1 know these as <code>filter</code> and <code>orderBy</code>. There are no equivalents in Angular 2.</p> <p>This is not an oversight. Angular 2 is unlikely to offer such pipes because (a) they perform poorly and (b) they prevent aggressive minification. Both <code>filter</code> and <code>orderBy</code> require parameters that reference object properties. We learned earlier that such pipes must be <a href=\"#pure-and-impure-pipes\"><em>impure</em></a> and that Angular calls impure pipes in almost every change detection cycle.</p> <p>Filtering and especially sorting are expensive operations. The user experience can degrade severely for even moderate sized lists when Angular calls these pipe methods many times per second. The <code>filter</code> and <code>orderBy</code> have often been abused in Angular 1 apps, leading to complaints that Angular itself is slow. That charge is fair in the indirect sense that Angular 1 prepared this performance trap by offering <code>filter</code> and <code>orderBy</code> in the first place.</p> <p>The minification hazard is also compelling if less obvious. Imagine a sorting pipe applied to a list of heroes. We might sort the list by hero <code>name</code> and <code>planet</code> of origin properties something like this:</p> <pre language=\"html\" data-language=\"html\">&lt;!-- NOT REAL CODE! --&gt;\n&lt;div *ngFor=\"let hero of heroes | orderBy:'name,planet'\"&gt;&lt;/div&gt;</pre>\n<p>We identify the sort fields by text strings, expecting the pipe to reference a property value by indexing (e.g., <code>hero['name']</code>). Unfortunately, aggressive minification <em>munges</em> the <code>Hero</code> property names so that <code>Hero.name</code> and <code>Hero.planet</code> becomes something like <code>Hero.a</code> and <code>Hero.b</code>. Clearly <code>hero['name']</code> is not going to work.</p> <p>Some of us may not care to minify this aggressively. That's <em>our</em> choice. But the Angular product should not prevent someone else from minifying aggressively. Therefore, the Angular team decided that everything shipped in Angular will minify safely.</p> <p>The Angular team and many experienced Angular developers strongly recommend that you move filtering and sorting logic into the component itself. The component can expose a <code>filteredHeroes</code> or <code>sortedHeroes</code> property and take control over when and how often to execute the supporting logic. Any capabilities that you would have put in a pipe and shared across the app can be written in a filtering/sorting service and injected into the component.</p> <p>If these performance and minification considerations do not apply to you, you can always create your own such pipes (along the lines of the <a href=\"#impure-flying-heroes\">FlyingHeroesPipe</a>) or find them in the community.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/pipes.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/pipes.html</a>\n  </p>\n</div>\n","guide/architecture":"<h1 class=\"hero-title text-display-1 \">Architecture Overview</h1>\n\n<div class=\"banner\"><p class=\"text-body\">The basic building blocks of Angular 2 applications</p></div>\n<p>Angular 2 is a framework to help us build client applications in HTML and either JavaScript or a language (like Dart or TypeScript) that compiles to JavaScript.</p> <p>The framework consists of several cooperating libraries, some of them core and some optional.</p> <p>We write Angular applications by composing HTML <em>templates</em> with Angularized-markup, writing <em>component</em> classes to manage those templates, adding application logic in <em>services</em>, and boxing components and services in <em>modules</em>.</p> <p>Then we launch the app by <em>bootstrapping</em> the top <em>root module</em>. Angular takes over, presenting our application content in a browser and responding to user interactions according to the instructions we provided.</p> <p>Of course there is more to it than this. We'll learn the details when we dive into the guide chapters. Let's get the big picture first.</p> <img src=\"https://angular.io/resources/images/devguide/architecture/overview2.png\" alt=\"overview\" style=\"\" width=\"700\" align=\"\"><p>The architecture diagram identifies the eight main building blocks of an Angular 2 application:</p> <ol> <li><a href=\"#modules\">Modules</a></li> <li><a href=\"#components\">Components</a></li> <li><a href=\"#templates\">Templates</a></li> <li><a href=\"#metadata\">Metadata</a></li> <li><a href=\"#data-binding\">Data binding</a></li> <li><a href=\"#directives\">Directives</a></li> <li><a href=\"#services\">Services</a></li> <li><a href=\"#dependency-injection\">Dependency injection</a></li> </ol> <p>Learn these, and we're on our way.</p> <div class=\"l-sub-section\"><p>The code referenced in this chapter is available as a <a href=\"https://angular.io/resources/live-examples/architecture/ts/plnkr.html\" target=\"_blank\">live example</a>.</p></div>\n<h2 id=\"modules\">Modules</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/module.png\" alt=\"Component\" align=\"left\" style=\"width:240px\"><p>Angular apps are modular and Angular has its own modularity system called <em>Angular Modules</em> or <em>NgModules</em>.</p> <p><em>Angular Modules</em> are a big deal. We can only introduce them here; the <a href=\"ngmodule\">Angular Modules</a> chapter covers modules in depth.</p> <br clear=\"all\"><br><p>Every Angular app has at least one module, the <em>root module</em>, conventionally named <code>AppModule</code>.</p> <p>While the <em>root</em> module may be the only module in a small application, most apps have many more <em>feature</em> modules, each a cohesive block of code dedicated to an application domain, a workflow, or a closely-related set of capabilities. </p> <p>An Angular module, whether a <em>root</em> or <em>feature</em>, is a class with an <code>@NgModule</code> decorator.</p> <div class=\"l-sub-section\">\n<p>Decorators are functions that modify JavaScript classes. Angular has many decorators that attach metadata to classes so that it knows what those classes mean and how they should work. <a href=\"https://medium.com/google-developers/exploring-es7-decorators-76ecb65fb841#.x5c2ndtx0\" target=\"_blank\"> Learn more</a> about decorators on the web.</p> </div>\n<p><code>NgModule</code> is a decorator function that takes a single metadata object whose properties describe the module. The most important are</p> <ul> <li>\n<p><code>declarations</code> - the <em>view classes</em> that belong to this module. Angular has three kinds of view classes: <a href=\"#components\">components</a>, <a href=\"#directives\">directives</a> and <a href=\"pipes\">pipes</a>.</p> </li> <li>\n<p><code>exports</code> - subset of declarations that should be visible and usable in the component <a href=\"#templates\">templates</a> of other modules.</p> </li> <li>\n<p><code>imports</code> - other modules whose exported classes are needed by component templates declared in <em>this</em> module.</p> </li> <li>\n<p><code>providers</code> creators of <a href=\"#services\">services</a> that this module contributes to the global collection of services; they become accessible in all parts of the app.</p> </li> <li>\n<p><code>bootstrap</code> - identifies the main application view, called the <em>root component</em>, that hosts all other app views. Only the <em>root module</em> should set this <code>bootstrap</code> property.</p> </li> </ul> <p>Here's a simple root module:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n@NgModule({\n  imports:      [ BrowserModule ],\n  providers:    [ Logger ],\n  declarations: [ AppComponent ],\n  exports:      [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>export</code> of <code>AppComponent</code> is just for show. A root module has no reason to export anything because ... it's the root. We don't expect other modules to import the root module.</p> <p>But if one did, it could use the <code>AppComponent</code> in its component templates.</p> </div>\n<p>We launch an application by <em>bootstrapping</em> its root module. During development we're likely to bootstrap the <code>AppModule</code> in a <code>main.ts</code> file like this one.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<h3 id=\"angular-modules-vs-javascript-modules\">Angular Modules vs. JavaScript Modules</h3> <p>The Angular module — a class decorated with <code>@NgModule</code> — is a fundamental feature of Angular itself.</p> <p>JavaScript also has its own module system for managing collections of JavaScript objects. It's completely different and unrelated to the Angular module system.</p> <p>In JavaScript each <em>file</em> is a module and all objects defined in the file belong to that module. The module declares some objects to be public by marking them with the <code>export</code> key word. Other JavaScript modules use <em>import statements</em> to access public objects from other modules.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { NgModule }     from '@angular/core';\nimport { AppComponent } from './app.component';\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\">export class AppModule { }\n</pre>\n<div class=\"l-sub-section\">\n<p><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\">Learn more about the JavaScript module system on the web.</a></p> </div>\n<p>These are two different and <em>complementary</em> module systems. We use them both to write our apps.</p> <h3 id=\"angular-libraries\">Angular Libraries</h3> <img src=\"https://angular.io/resources/images/devguide/architecture/library-module.png\" alt=\"Component\" align=\"left\" style=\"width:240px\"><p>Angular itself ships as a collection of JavaScript modules. We can think of them as library modules. </p> <p>Each Angular library name begin with the <code>@angular</code> prefix.</p> <p>We install them with the <strong>npm</strong> package manager and import parts of them with JavaScript <code>import</code> statements.</p> <br clear=\"all\"><br><p>For example, we import Angular's <code>Component</code> decorator from the <code>@angular/core</code> library like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component } from '@angular/core';\n</pre>\n<p>We also import Angular <em>modules</em> from Angular <em>libraries</em> using JavaScript import statements:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { BrowserModule } from '@angular/platform-browser';\n</pre>\n<p>Our application module needs material from within that <code>BrowserModule</code> so we add it to the <code>@NgModule</code> metadata <code>imports</code> like this.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">imports:      [ BrowserModule ],\n</pre>\n<p>We're using both the Angular and JavaScript module systems <em>together</em>.</p> <p>It's easy to confuse the two systems because they share the common vocabulary of \"imports\" and \"exports\". Hang in there. The confusion will yield to clarity with time and experience.</p> <div class=\"l-sub-section\">\n<p>Learn more in the <a href=\"ngmodule\">Angular Modules</a> chapter.</p> </div>\n\n<h2 id=\"components\">Components</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/hero-component.png\" alt=\"Component\" align=\"left\" style=\"width:200px\"><p>A <strong>component</strong> controls a patch of screen real estate that we could call a <em>view</em>. The shell at the application root with navigation links, a list of heroes, a hero editor ... they're all views controlled by components.</p> <p>We define a component's application logic — what it does to support the view — inside a class. The class interacts with the view through an API of properties and methods.</p> <p> A <code id=\"component-code\">HeroListComponent</code>, for example, might have a <code>heroes</code> property that returns an array of heroes that it acquired from a service. It might have a <code>selectHero()</code> method that sets a <code>selectedHero</code> property when the user clicks to choose a hero from that list. The component might be a class like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-list.component.ts (class)\">// app/hero-list.component.ts (class)\n\nexport class HeroListComponent implements OnInit {\n  heroes: Hero[];\n  selectedHero: Hero;\n\n  constructor(private service: HeroService) { }\n\n  ngOnInit() {\n    this.heroes = this.service.getHeroes();\n  }\n\n  selectHero(hero: Hero) { this.selectedHero = hero; }\n}\n</pre>\n<p>Angular creates, updates, and destroys components as the user moves through the application. The developer can take action at each moment in this lifecycle through optional <a href=\"lifecycle-hooks\">lifecycle hooks</a>, like <code>ngOnInit()</code> declared above.</p> <div class=\"l-sub-section\">\n<p>We may wonder who is calling the component's constructor? Who provides the service parameter? For the moment, have faith that Angular will call the constructor and deliver an appropriate <code>HeroService</code> when we need it.</p> </div>\n\n<h2 id=\"templates\">Templates</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/template.png\" alt=\"Template\" align=\"left\" style=\"width:200px\"><p>We define a component's view with its companion <strong>template</strong>. A template is a form of HTML that tells Angular how to render the component.</p> <p>A template looks like regular HTML much of the time ... and then it gets a bit strange. Here is a template for our <code>HeroListComponent</code>:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/hero-list.component.html\">&lt;!-- app/hero-list.component.html --&gt;\n\n&lt;h2&gt;Hero List&lt;/h2&gt;\n\n&lt;p&gt;&lt;i&gt;Pick a hero from the list&lt;/i&gt;&lt;/p&gt;\n&lt;ul&gt;\n  &lt;li *ngFor=\"let hero of heroes\" (click)=\"selectHero(hero)\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hero-detail *ngIf=\"selectedHero\" [hero]=\"selectedHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>This template features typical HTML elements like <code>&lt;h2&gt;</code> and <code>&lt;p&gt;</code>. But what are <code>*ngFor</code>, <code>{{hero.name}}</code>, <code>(click)</code>, <code>[hero]</code>, and <code>&lt;hero-detail&gt;</code>?</p> <p>These are examples of Angular's <a href=\"template-syntax\">template syntax</a>. We will grow accustomed to that syntax and may even learn to love it. We'll begin to explain it in a moment.</p> <p>Before we do, focus attention on the last line. The <code>&lt;hero-detail&gt;</code> tag is a custom element representing the <code>HeroDetailComponent</code>.</p> <p>The <code>HeroDetailComponent</code> is a <em>different</em> component than the <code>HeroListComponent</code> we've been reviewing. The <code>HeroDetailComponent</code> (code not shown) presents facts about a particular hero, the hero that the user selects from the list presented by the <code>HeroListComponent</code>. The <code>HeroDetailComponent</code> is a <strong>child</strong> of the <code>HeroListComponent</code>.</p> <img src=\"https://angular.io/resources/images/devguide/architecture/component-tree.png\" alt=\"Metadata\" align=\"left\" style=\"width:300px\"><p>Notice how <code>&lt;hero-detail&gt;</code> rests comfortably among native HTML elements. We can and <em>will</em> mix our custom components with native HTML in the same layouts.</p> <p>In this manner we'll compose complex component trees to build out our richly featured application.</p> <br clear=\"all\">\n<h2 id=\"metadata\">Metadata</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/metadata.png\" alt=\"Metadata\" align=\"left\" style=\"width:150px\"><p style=\"padding-top:10px\">Metadata tells Angular how to process a class.</p> <br clear=\"all\"><p><a href=\"#component-code\">Looking back at the code</a> for <code>HeroListComponent</code>, we see that it's just a class. There is no evidence of a framework, no \"Angular\" in it at all.</p> <p>In fact, it really is <em>just a class</em>. It's not a component until we <em>tell Angular about it</em>.</p> <p>We tell Angular that <code>HeroListComponent</code> is a component by attaching <strong>metadata</strong> to the class.</p> <p>In TypeScript, we attach metadata by using a <strong>decorator</strong>. Here's some metadata for <code>HeroListComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-list.component.ts (metadata)\">// app/hero-list.component.ts (metadata)\n\n@Component({\n  selector:    'hero-list',\n  templateUrl: 'app/hero-list.component.html',\n  providers:   [ HeroService ]\n})\nexport class HeroListComponent implements OnInit {\n/* . . . */\n}\n</pre>\n<p>Here we see the <code>@Component</code> decorator which (no surprise) identifies the class immediately below it as a component class.</p> <p>The <code>@Component</code> decorator takes a required configuration object with the information Angular needs to create and present the component and its view.</p> <p>Here are a few of the possible <code>@Component</code> configuration options:</p> <ul> <li>\n<p><code>selector</code>: CSS selector that tells Angular to create and insert an instance of this component where it finds a <code>&lt;hero-list&gt;</code> tag in <em>parent</em> HTML. For example, if an app's HTML contains <code>&lt;hero-list&gt;&lt;/hero-list&gt;</code>, then Angular inserts an instance of the <code>HeroListComponent</code> view between those tags.</p> </li> <li>\n<p><code>templateUrl</code>: address of this component's template, which we showed <a href=\"#templates\">above</a>.</p> </li> <li>\n<p><code>directives</code>: array of the components or directives that <em>this</em> template requires. We saw in the last line of our template that we expect Angular to insert a <code>HeroDetailComponent</code> in the space indicated by <code>&lt;hero-detail&gt;</code> tags. Angular will do so only if we mention the <code>HeroDetailComponent</code> in this <code>directives</code> array.</p> </li> <li>\n<p><code>providers</code>: array of <strong>dependency injection providers</strong> for services that the component requires. This is one way to tell Angular that our component's constructor requires a <code>HeroService</code> so it can get the list of heroes to display. We'll get to dependency injection later.</p> </li> </ul> <img src=\"https://angular.io/resources/images/devguide/architecture/template-metadata-component.png\" alt=\"Metadata\" align=\"left\" style=\"height:200px\"><p>Angular reads the metadata specified by the <code>@Component</code> annotation. That's how Angular learns to do \"the right thing\".</p> <p>The template, metadata, and component together describe a view.</p> <p>We apply other metadata decorators in a similar fashion to guide Angular behavior. <code>@Injectable</code>, <code>@Input</code>, and <code>@Output</code> are a few of the more popular decorators we'll master as our Angular knowledge grows.</p> <br clear=\"all\"><p>The architectural takeaway is that we must add metadata to our code so that Angular knows what to do.</p> \n<h2 id=\"data-binding\">Data binding</h2> <p>Without a framework, we would be responsible for pushing data values into the HTML controls and turning user responses into actions and value updates. Writing such push/pull logic by hand is tedious, error-prone, and a nightmare to read as any experienced jQuery programmer can attest.</p> <img src=\"https://angular.io/resources/images/devguide/architecture/databinding.png\" alt=\"Data Binding\" style=\"width:220px\" align=\"left\"><p>Angular supports <strong>data binding</strong>, a mechanism for coordinating parts of a template with parts of a component. We add binding markup to the template HTML to tell Angular how to connect both sides.</p> <p>There are four forms of data binding syntax. Each form has a direction — to the DOM, from the DOM, or in both directions — as indicated by the arrows in the diagram.</p> <br clear=\"all\"><p>We saw three forms of data binding in our <a href=\"#templates\">example</a> template:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-list.component.html (binding)\">&lt;!-- app/hero-list.component.html (binding) --&gt;\n\n&lt;li&gt;{{hero.name}}&lt;/li&gt;\n&lt;hero-detail [hero]=\"selectedHero\"&gt;&lt;/hero-detail&gt;\n&lt;li (click)=\"selectHero(hero)\"&gt;&lt;/li&gt;\n</pre>\n<ul> <li>\n<p>The <code>{{hero.name}}</code> <a href=\"displaying-data#interpolation\"><em>interpolation</em></a> displays the component's <code>hero.name</code> property value within the <code>&lt;li&gt;</code> tags.</p> </li> <li>\n<p>The <code>[hero]</code> <a href=\"template-syntax#property-binding\"><em>property binding</em></a> passes the value of <code>selectedHero</code> from the parent <code>HeroListComponent</code> to the <code>hero</code> property of the child <code>HeroDetailComponent</code>.</p> </li> <li>\n<p>The <code>(click)</code> <a href=\"user-input#click\"><em>event binding</em></a> calls the component's <code>selectHero</code> method when the user clicks a hero's name.</p> </li> </ul> <p><strong>Two-way data binding</strong> is an important fourth form that combines property and event binding in a single notation, using the <code>ngModel</code> directive. We didn't have a two-way binding in the <code>HeroListComponent</code> template; here's an example from the <code>HeroDetailComponent</code> template:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-detail.component.html (ngModel)\">&lt;!-- app/hero-detail.component.html (ngModel) --&gt;\n\n&lt;input [(ngModel)]=\"hero.name\"&gt;\n</pre>\n<p>In two-way binding, a data property value flows to the input box from the component as with property binding. The user's changes also flow back to the component, resetting the property to the latest value, as with event binding.</p> <p>Angular processes <em>all</em> data bindings once per JavaScript event cycle, from the root of the application component tree down to the leaves.</p> <img src=\"https://angular.io/resources/images/devguide/architecture/component-databinding.png\" alt=\"Data Binding\" style=\"width:300px\" align=\"left\"><p>We don't know all the details yet, but it's clear from these examples that data binding plays an important role in communication between a template and its component.</p> <br clear=\"all\"><img src=\"https://angular.io/resources/images/devguide/architecture/parent-child-binding.png\" alt=\"Parent/Child binding\" style=\"width:300px\" align=\"left\"><p>Data binding is also important for communication between parent and child components.</p> <br clear=\"all\">\n<h2 id=\"directives\">Directives</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/directive.png\" alt=\"Parent child\" style=\"width:150px\" align=\"left\"><p>Angular templates are <em>dynamic</em>. When Angular renders them, it transforms the DOM according to the instructions given by <strong>directives</strong>.</p> <p>A directive is a class with directive metadata. In TypeScript we apply the <code>@Directive</code> decorator to attach metadata to the class.</p> <br clear=\"all\"><p>We already met one form of directive: the component. A component is a <em>directive-with-a-template</em>; a <code>@Component</code> decorator is actually a <code>@Directive</code> decorator extended with template-oriented features.</p> <div class=\"l-sub-section\">\n<p>While <strong>a component is technically a directive</strong>, components are so distinctive and central to Angular applications that we chose to separate components from directives in this architectural overview.</p> </div>\n<p>Two <em>other</em> kinds of directives exist: <em>structural</em> and <em>attribute</em> directives.</p> <p>They tend to appear within an element tag as attributes do, sometimes by name but more often as the target of an assignment or a binding.</p> <p><strong>Structural</strong> directives alter layout by adding, removing, and replacing elements in DOM.</p> <p>Our <a href=\"#templates\">example</a> template uses two built-in structural directives:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-list.component.html (structural)\">&lt;!-- app/hero-list.component.html (structural) --&gt;\n\n&lt;li *ngFor=\"let hero of heroes\"&gt;&lt;/li&gt;\n&lt;hero-detail *ngIf=\"selectedHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<ul> <li>\n<a href=\"displaying-data#ngFor\"><code>*ngFor</code></a> tells Angular to stamp out one <code>&lt;li&gt;</code> per hero in the <code>heroes</code> list.</li> <li>\n<a href=\"displaying-data#ngIf\"><code>*ngIf</code></a> includes the <code>HeroDetail</code> component only if a selected hero exists.</li> </ul> <p><strong>Attribute</strong> directives alter the appearance or behavior of an existing element. In templates they look like regular HTML attributes, hence the name.</p> <p>The <code>ngModel</code> directive, which implements two-way data binding, is an example of an attribute directive. <code>ngModel</code> modifies the behavior of an existing element (typically an <code>&lt;input&gt;</code>) by setting its display value property and responding to change events.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/hero-detail.component.html (ngModel)\">&lt;!-- app/hero-detail.component.html (ngModel) --&gt;\n\n&lt;input [(ngModel)]=\"hero.name\"&gt;\n</pre>\n<p>Angular ships with a small number of other directives that either alter the layout structure (for example, <a href=\"template-syntax#ngSwitch\">ngSwitch</a>) or modify aspects of DOM elements and components (for example, <a href=\"template-syntax#ngStyle\">ngStyle</a> and <a href=\"template-syntax#ngClass\">ngClass</a>).</p> <p>Of course, we can also write our own directives. Components such as <code>HeroListComponent</code> are one kind of custom directive. </p> \n<h2 id=\"services\">Services</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/service.png\" alt=\"Service\" style=\"\" align=\"left\"><p><em>Service</em> is a broad category encompassing any value, function, or feature that our application needs.</p> <p>Almost anything can be a service. A service is typically a class with a narrow, well-defined purpose. It should do something specific and do it well.</p> <br clear=\"all\"><p>Examples include:</p> <ul> <li>logging service</li> <li>data service</li> <li>message bus</li> <li>tax calculator</li> <li>application configuration</li> </ul> <p>There is nothing specifically <em>Angular</em> about services. Angular itself has no definition of a service. There is no service base class, and no place to register a service.</p> <p>Yet services are fundamental to any Angular application. Our components are big consumers of services.</p> <p>Here's an example of a service class that logs to the browser console</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/logger.service.ts (class)\">// app/logger.service.ts (class)\n\nexport class Logger {\n  log(msg: any)   { console.log(msg); }\n  error(msg: any) { console.error(msg); }\n  warn(msg: any)  { console.warn(msg); }\n}\n</pre>\n<p>Here's a <code>HeroService</code> that fetches heroes and returns them in a resolved <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a>. The <code>HeroService</code> depends on the <code>Logger</code> service and another <code>BackendService</code> that handles the server communication grunt work.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.service.ts (class)\">// app/hero.service.ts (class)\n\nexport class HeroService {\n  private heroes: Hero[] = [];\n\n  constructor(\n    private backend: BackendService,\n    private logger: Logger) { }\n\n  getHeroes() {\n    this.backend.getAll(Hero).then( (heroes: Hero[]) =&gt; {\n      this.logger.log(`Fetched ${heroes.length} heroes.`);\n      this.heroes.push(...heroes); // fill cache\n    });\n    return this.heroes;\n  }\n}\n</pre>\n<p>Services are everywhere.</p> <p>We prefer our component classes lean. Our components don't fetch data from the server, they don't validate user input, and they don't log directly to the console. They delegate such tasks to services.</p> <p>A component's job is to enable the user experience and nothing more. It mediates between the view (rendered by the template) and the application logic (which often includes some notion of a <em>model</em>). A good component presents properties and methods for data binding. It delegates everything nontrivial to services.</p> <p>Angular doesn't <em>enforce</em> these principles. It won't complain if we write a \"kitchen sink\" component with 3000 lines.</p> <p>Angular does help us <em>follow</em> these principles by making it easy to factor our application logic into services and make those services available to components through <em>dependency injection</em>.</p> \n<h2 id=\"dependency-injection\">Dependency injection</h2> <img src=\"https://angular.io/resources/images/devguide/architecture/dependency-injection.png\" alt=\"Service\" style=\"width:200px\" align=\"left\"><p><em>Dependency injection</em> is a way to supply a new instance of a class with the fully-formed dependencies it requires. Most dependencies are services. Angular uses dependency injection to provide new components with the services they need.</p> <br clear=\"all\"><p>Angular can tell which services a component needs by looking at the types of its constructor parameters. For example, the constructor of our <code>HeroListComponent</code> needs a <code>HeroService</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-list.component.ts (constructor)\">// app/hero-list.component.ts (constructor)\n\nconstructor(private service: HeroService) { }\n</pre>\n<p>When Angular creates a component, it first asks an <strong>injector</strong> for the services that the component requires.</p> <p>An injector maintains a container of service instances that it has previously created. If a requested service instance is not in the container, the injector makes one and adds it to the container before returning the service to Angular. When all requested services have been resolved and returned, Angular can call the component's constructor with those services as arguments. This is what we mean by <em>dependency injection</em>.</p> <p>The process of <code>HeroService</code> injection looks a bit like this:</p> <img src=\"https://angular.io/resources/images/devguide/architecture/injector-injects.png\" alt=\"Service\"><p>If the injector doesn't have a <code>HeroService</code>, how does it know how to make one?</p> <p>In brief, we must have previously registered a <strong>provider</strong> of the <code>HeroService</code> with the injector. A provider is something that can create or return a service, typically the service class itself.</p> <p>We can register providers in modules or in components.</p> <p>We often add providers to the <a href=\"#module\">root module</a> so that the same instance of a service is available everywhere.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (module providers)\">// app/app.module.ts (module providers)\n\nproviders: [\n  BackendService,\n  HeroService,\n  Logger\n],\n</pre>\n<p>Alternatively, we might register at a component level in the <code>providers</code> property of the <code>@Component</code> metadata:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-list.component.ts (component providers)\">// app/hero-list.component.ts (component providers)\n\n@Component({\n  selector:    'hero-list',\n  templateUrl: 'app/hero-list.component.html',\n  providers:   [ HeroService ]\n})\n</pre>\n<p>Registering at a component level means we get a new instance of the service with each new instance of that component.</p>  <p>Points to remember about dependency injection:</p> <ul> <li>\n<p>Dependency injection is wired into the Angular framework and used everywhere.</p> </li> <li>\n<p>The <em>injector</em> is the main mechanism.</p> <ul> <li>An injector maintains a <em>container</em> of service instances that it created.</li> <li>An injector can create a new service instance from a <em>provider</em>.</li> </ul> </li> <li>\n<p>A <em>provider</em> is a recipe for creating a service.</p> </li> <li>\n<p>We register <em>providers</em> with injectors.</p> </li> </ul> \n<h2 id=\"wrap-up\">Wrap up</h2> <p>We've learned just a bit about the eight main building blocks of an Angular application:</p> <ol> <li><a href=\"#modules\">Modules</a></li> <li><a href=\"#components\">Components</a></li> <li><a href=\"#templates\">Templates</a></li> <li><a href=\"#metadata\">Metadata</a></li> <li><a href=\"#data-binding\">Data binding</a></li> <li><a href=\"#directives\">Directives</a></li> <li><a href=\"#services\">Services</a></li> <li><a href=\"#dependency-injection\">Dependency injection</a></li> </ol> <p>That's a foundation for everything else in an Angular application, and it's more than enough to get going. But it doesn't include everything we'll need or want to know.</p> <p>Here is a brief, alphabetical list of other important Angular features and services. Most of them are covered in this Developers Guide (or soon will be).</p>  <p><a href=\"animations\"><strong>Animations</strong></a>: The animation library makes it easy for developers to animate component behavior without deep knowledge of animation techniques or CSS.</p> <p><strong>Change detection</strong>: Learn how Angular decides that a component property value has changed and when to update the screen. Learn how it uses <strong>zones</strong> to intercept asynchronous activity and run its change detection strategies.</p> <p><strong>Events</strong>: The DOM raises events. So can components and services. Angular offers mechanisms for publishing and subscribing to events.</p> <p><a href=\"forms\"><strong>Forms</strong></a>: Support complex data entry scenarios with HTML-based validation and dirty checking.</p> <p><a href=\"server-communication\"><strong>HTTP</strong></a>: Communicate with a server to get data, save data, and invoke server-side actions with an HTTP client.</p> <p><a href=\"lifecycle-hooks\"><strong>Lifecycle hooks</strong></a>: We can tap into key moments in the lifetime of a component, from its creation to its destruction, by implementing the lifecycle hook interfaces.</p> <p><a href=\"pipes\"><strong>Pipes</strong></a>: Services that transform values for display. We can put pipes in our templates to improve the user experience. Consider this <code>currency</code> pipe expression:</p>  <pre>price | currency:'USD':true</pre> <p>It displays a price of \"42.33\" as <code>$42.33</code>.</p> <p><a href=\"router\"><strong>Router</strong></a>: Navigate from page to page within the client application and never leave the browser.</p> <p><a href=\"testing\"><strong>Testing</strong></a>: Angular provides a <a href=\"https://pub.dartlang.org/packages/angular2_testing\">testing library</a> to run unit tests on our application parts as they interact with the Angular framework.</p> <div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"displaying-data\">Displaying Data</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/architecture.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/architecture.html</a>\n  </p>\n</div>\n","guide/template-syntax":"<h1 class=\"hero-title text-display-1 \">Template Syntax</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Learn how to write templates that display data and consume user events with the help of data binding.</p></div>\n<p>Our Angular application manages what the user sees and can do, achieving this through the interaction of a Component class instance (the <em>component</em>) and its user-facing template.</p> <p>Many of us are familiar with the component/template duality from our experience with model-view-controller (MVC) or model-view-viewmodel (MVVM). In Angular, the component plays the part of the controller/viewmodel, and the template represents the view.</p> <p>Let’s find out what it takes to write a template for our view. We’ll cover these basic elements of template syntax:</p> <ul> <li><a href=\"#html\">HTML</a></li> <li><a href=\"#interpolation\">Interpolation</a></li> <li><a href=\"#template-expressions\">Template expressions</a></li> <li><a href=\"#template-statements\">Template statements</a></li> <li><a href=\"#binding-syntax\">Binding syntax</a></li> <li><a href=\"#property-binding\">Property binding</a></li> <li><a href=\"#other-bindings\">Attribute, class, and style bindings</a></li> <li><a href=\"#event-binding\">Event binding</a></li> <li><a href=\"#ngModel\">Two-way data binding with <code>NgModel</code></a></li> <li>\n<a href=\"#directives\">Built-in directives</a><ul> <li><a href=\"#ngClass\">NgClass</a></li> <li><a href=\"#ngStyle\">NgStyle</a></li> <li><a href=\"#ngIf\">NgIf</a></li> <li><a href=\"#ngSwitch\">NgSwitch</a></li> <li><a href=\"#ngFor\">NgFor</a></li> </ul> </li> <li><a href=\"#star-template\">* and &lt;template&gt;</a></li> <li><a href=\"#ref-vars\">Template reference variables</a></li> <li><a href=\"#inputs-outputs\">Input and output properties</a></li> <li>\n<a href=\"#expression-operators\">Template expression operators</a><ul> <li><a href=\"#pipe\">pipe</a></li> <li><a href=\"#safe-navigation-operator\">safe navigation operator (?.)</a></li> </ul> </li> </ul> <p>The <live-example></live-example> demonstrates all of the syntax and code snippets described in this chapter.</p> <h2 id=\"html\">HTML</h2> <p>HTML is the language of the Angular template. Our <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> application has a template that is pure HTML:</p> <pre language=\"html\" escape=\"html\" data-language=\"html\"><h1>My First Angular 2 App</h1>\n</pre>\n<p>Almost all HTML syntax is valid template syntax. The <code>&lt;script&gt;</code> element is a notable exception; it is forbidden, eliminating the risk of script injection attacks. (In practice, <code>&lt;script&gt;</code> is simply ignored.)</p> <p>Some legal HTML doesn’t make much sense in a template. The <code>&lt;html&gt;</code>, <code>&lt;body&gt;</code>, and <code>&lt;base&gt;</code> elements have no useful role in our repertoire. Pretty much everything else is fair game.</p> <p>We can extend the HTML vocabulary of our templates with components and directives that appear as new elements and attributes. In the following sections we are going to learn how to get and set DOM (Document Object Model) values dynamically through data binding.</p> <p>Let’s turn to the first form of data binding — interpolation — to see how much richer template HTML can be.</p> <h2 id=\"interpolation\">Interpolation</h2> <p>We met the double-curly braces of interpolation, <code>{{</code> and <code>}}</code>, early in our Angular education.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;My current hero is {{currentHero.firstName}}&lt;/p&gt;\n</pre>\n<p>We use interpolation to weave calculated strings into the text between HTML element tags and within attribute assignments.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;h3&gt;\n  {{title}}\n  &lt;img src=\"{{heroImageUrl}}\" style=\"height:30px\"&gt;\n&lt;/h3&gt;\n</pre>\n<p>The material between the braces is often the name of a component property. Angular replaces that name with the string value of the corresponding component property. In the example above, Angular evaluates the <code>title</code> and <code>heroImageUrl</code> properties and \"fills in the blanks\", first displaying a bold application title and then a heroic image.</p> <p>More generally, the material between the braces is a <strong>template expression</strong> that Angular first <strong>evaluates</strong> and then <strong>converts to a string</strong>. The following interpolation illustrates the point by adding the two numbers within braces:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- \"The sum of 1 + 1 is 2\" --&gt;\n&lt;p&gt;The sum of 1 + 1 is {{1 + 1}}&lt;/p&gt;\n</pre>\n<p>The expression can invoke methods of the host component, as we do here with <code>getVal()</code>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- \"The sum of 1 + 1 is not 4\" --&gt;\n&lt;p&gt;The sum of 1 + 1 is not {{1 + 1 + getVal()}}&lt;/p&gt;\n</pre>\n<p>Angular evaluates all expressions in double curly braces, converts the expression results to strings, and links them with neighboring literal strings. Finally, it assigns this composite interpolated result to an <strong>element or directive property</strong>.</p> <p>We appear to be inserting the result between element tags and assigning it to attributes. It's convenient to think so, and we rarely suffer for this mistake. Though this is not exactly true. Interpolation is a special syntax that Angular converts into a <a href=\"#property-binding\">property binding</a>, and is explained below.</p> <p>But first, let's take a closer look at template expressions and statements.</p> <h2 id=\"template-expressions\">Template expressions</h2> <p>A template <strong>expression</strong> produces a value. Angular executes the expression and assigns it to a property of a binding target; the target might be an HTML element, a component, or a directive.</p> <p>We put a template expression within the interpolation braces when we wrote <code>{{1 + 1}}</code>. We’ll see template expressions again in the <a href=\"#property-binding\">property binding</a> section, appearing in quotes to the right of the <code>=</code> symbol as in <code>[property]=\"expression\"</code>.</p> <p>We write template expressions in a language that looks like JavaScript. Many JavaScript expressions are legal template expressions, but not all.</p> <p>JavaScript expressions that have or promote side effects are prohibited, including:</p> <ul> <li>assignments (<code>=</code>, <code>+=</code>, <code>-=</code>, ...)</li> <li><code>new</code></li> <li>chaining expressions with <code>;</code> or <code>,</code>\n</li> <li>increment and decrement operators (<code>++</code> and <code>--</code>)</li> </ul> <p>Other notable differences from JavaScript syntax include:</p> <ul> <li>no support for the bitwise operators <code>|</code> and <code>&amp;</code>\n</li> <li>new <a href=\"#expression-operators\">template expression operators</a>, such as <code>|</code> and <code>?.</code>\n</li> </ul> <h3 id=\"expression-context\">Expression context</h3>\n<p>Perhaps more surprising, template expressions cannot refer to anything in the global namespace. They can’t refer to <code>window</code> or <code>document</code>. They can’t call <code>console.log</code> or <code>Math.max</code>. They are restricted to referencing members of the expression context.</p> <p>The <em>expression context</em> is typically the <strong>component instance</strong>, which is the source of binding values.</p> <p>When we see <em>title</em> wrapped in double-curly braces, <code>{{title}}</code>, we know that <code>title</code> is a property of the data-bound component. When we see <em>isUnchanged</em> in <code>[disabled]=\"isUnchanged\"</code>, we know we are referring to that component's <code>isUnchanged</code> property.</p> <p>The component itself is usually the expression <em>context</em>, in which case the template expression usually references that component.</p> <p>The expression context can include objects other than the component. A <a href=\"#ref-vars\">template reference variable</a> is one such alternative context object.</p>  <h3 id=\"expression-guidelines\">Expression guidelines</h3> <p>Template expressions can make or break an application. Please follow these guidelines:</p> <ul> <li><a href=\"#no-visible-side-effects\">No visible side effects</a></li> <li><a href=\"#quick-execution\">Quick execution</a></li> <li><a href=\"#simplicity\">Simplicity</a></li> <li><a href=\"#idempotence\">Idempotence</a></li> </ul> <p>The only exceptions to these guidelines should be in specific circumstances that you thoroughly understand.</p> <h4 id=\"no-visible-side-effects\">No visible side effects</h4> <p>A template expression should not change any application state other than the value of the target property.</p> <p>This rule is essential to Angular's \"unidirectional data flow\" policy. We should never worry that reading a component value might change some other displayed value. The view should be stable throughout a single rendering pass.</p> <h4 id=\"quick-execution\">Quick execution</h4> <p>Angular executes template expressions more often than we think. They can be called after every keypress or mouse move. Expressions should finish quickly or the user experience may drag, especially on slower devices. Consider caching values computed from other values when the computation is expensive.</p> <h4 id=\"simplicity\">Simplicity</h4> <p>Although it's possible to write quite complex template expressions, we really shouldn't.</p> <p>A property name or method call should be the norm. An occasional Boolean negation (<code>!</code>) is OK. Otherwise, confine application and business logic to the component itself, where it will be easier to develop and test.</p> <h4 id=\"idempotence\">Idempotence</h4> <p>An <a href=\"https://en.wikipedia.org/wiki/Idempotence\">idempotent</a> expression is ideal because it is free of side effects and improves Angular's change detection performance.</p> <p>In Angular terms, an idempotent expression always returns <em>exactly the same thing</em> until one of its dependent values changes.</p> <p>Dependent values should not change during a single turn of the event loop. If an idempotent expression returns a string or a number, it returns the same string or number when called twice in a row. If the expression returns an object (including an <code>Array</code>), it returns the same object <em>reference</em> when called twice in a row.</p> <h2 id=\"template-statements\">Template statements</h2> <p>A template <strong>statement</strong> responds to an <strong>event</strong> raised by a binding target such as an element, component, or directive.</p> <p>We’ll see template statements in the <a href=\"#event-binding\">event binding</a> section, appearing in quotes to the right of the <code>=</code> symbol as in <code>(event)=\"statement\"</code>.</p> <p>A template statement <em>has a side effect</em>. It's how we update application state from user input. There would be no point to responding to an event otherwise.</p> <div class=\"l-sub-section\">\n<p>Responding to events is the other side of Angular's \"unidirectional data flow\". We're free to change anything, anywhere, during this turn of the event loop.</p> </div>\n<p>Like template expressions, template <em>statements</em> use a language that looks like JavaScript. The template statement parser is different than the template expression parser and specifically supports both basic assignment (<code>=</code>) and chaining expressions (with <code>;</code> or <code>,</code>).</p> <p>However, certain JavaScript syntax is not allowed:</p> <ul> <li><code>new</code></li> <li>increment and decrement operators, <code>++</code> and <code>--</code>\n</li> <li>operator assignment, such as <code>+=</code> and <code>-=</code>\n</li> <li>the bitwise operators <code>|</code> and <code>&amp;</code>\n</li> <li>the <a href=\"#expression-operators\">template expression operators</a>\n</li> </ul> <h3 id=\"statement-context\">Statement context</h3> <p>As with expressions, statements can refer only to what's in the statement context — typically the <strong>component instance</strong> to which we're binding the event.</p> <p>Template statements cannot refer to anything in the global namespace. They can’t refer to <code>window</code> or <code>document</code>. They can’t call <code>console.log</code> or <code>Math.max</code>.</p> <p>The <em>onSave</em> in <code>(click)=\"onSave()\"</code> is sure to be a method of the data-bound component instance.</p> <p>The statement context may include an object other than the component. A <a href=\"#ref-vars\">template reference variable</a> is one such alternative context object. We'll frequently see the reserved <code>$event</code> symbol in event binding statements, representing the \"message\" or \"payload\" of the raised event.</p> <h3 id=\"statement-guidelines\">Statement guidelines</h3> <p>As with expressions, avoid writing complex template statements. A method call or simple property assignment should be the norm.</p> <p>Now that we have a feel for template expressions and statements, we’re ready to learn about the varieties of data binding syntax beyond interpolation.</p>  <h2 id=\"binding-syntax-an-overview\">Binding syntax: An overview</h2> <p>Data binding is a mechanism for coordinating what users see with application data values. While we could push values to and pull values from HTML, the application is easier to write, read, and maintain if we turn these chores over to a binding framework. We simply declare bindings between binding sources and target HTML elements and let the framework do the work.</p> <p>Angular provides many kinds of data binding, and we’ll discuss each of them in this chapter. First we'll take a high-level view of Angular data binding and its syntax.</p> <p>We can group all bindings into three categories by the direction in which data flows. Each category has its distinctive syntax:</p> <table>\n<tr>\n<th>Data direction</th>\n<th>Syntax</th>\n<th>Binding type</th>\n</tr>\n<tr>\n<td>One-way<br>from data source<br>to view target</td>\n<td><pre>{{expression}}\n[target] = \"expression\"\nbind-target = \"expression\"</pre></td>\n<td>Interpolation<br> Property<br> Attribute<br> Class<br> Style</td>\n</tr>\n<tr>\n<td>One-way<br>from view target<br>to data source</td>\n<td><pre>(target) = \"statement\"\non-target = \"statement\"</pre></td>\n<td>Event</td>\n</tr>\n<tr>\n<td>Two-way</td>\n<td><pre>[(target)] = \"expression\"\nbindon-target = \"expression\"</pre></td>\n<td>Two-way</td>\n</tr>\n</table>\n<p>Binding types other than interpolation have a <strong>target name</strong> to the left of the equal sign, either surrounded by punctuation (<code>[]</code>, <code>()</code>) or preceded by a prefix (<code>bind-</code>, <code>on-</code>, <code>bindon-</code>).</p> <p>What is that target? Before we can answer that question, we must challenge ourselves to look at template HTML in a new way.</p> <h3 id=\"a-new-mental-model\">A new mental model</h3> <p>With all the power of data binding and our ability to extend the HTML vocabulary with custom markup, it is tempting to think of template HTML as <em>HTML Plus</em>.</p> <p>Well, it <em>is</em> HTML Plus. But it’s also significantly different than the HTML we’re used to. We really need a new mental model.</p> <p>In the normal course of HTML development, we create a visual structure with HTML elements, and we modify those elements by setting element attributes with string constants.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div class=\"special\"&gt;Mental Model&lt;/div&gt;\n&lt;img src=\"images/hero.png\"&gt;\n&lt;button disabled&gt;Save&lt;/button&gt;\n</pre>\n<p>We still create a structure and initialize attribute values this way in Angular templates.</p> <p>Then we learn to create new elements with components that encapsulate HTML and drop them into our templates as if they were native HTML elements.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- Normal HTML --&gt;\n&lt;div class=\"special\"&gt;Mental Model&lt;/div&gt;\n&lt;!-- Wow! A new element! --&gt;\n&lt;hero-detail&gt;&lt;/hero-detail&gt;\n</pre>\n<p>That’s HTML Plus.</p> <p>Now we start to learn about data binding. The first binding we meet might look like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- Bind button disabled state to `isUnchanged` property --&gt;\n&lt;button [disabled]=\"isUnchanged\"&gt;Save&lt;/button&gt;\n</pre>\n<p>We’ll get to that peculiar bracket notation in a moment. Looking beyond it, our intuition tells us that we’re binding to the button's <code>disabled</code> attribute and setting it to the current value of the component’s <code>isUnchanged</code> property.</p> <p>Our intuition is wrong! Our everyday HTML mental model is misleading us. In fact, once we start data binding, we are no longer working with HTML <em>attributes</em>. We aren't setting attributes. We are setting the <em>properties</em> of DOM elements, components, and directives.</p> <div class=\"l-sub-section\">\n<h3 id=\"html-attribute-vs-dom-property\">HTML attribute vs. DOM property</h3> <p>The distinction between an HTML attribute and a DOM property is crucial to understanding how Angular binding works.</p> <p><strong>Attributes are defined by HTML. Properties are defined by the DOM (Document Object Model).</strong></p> <ul> <li>\n<p>A few HTML attributes have 1:1 mapping to properties. <code>id</code> is one example.</p> </li> <li>\n<p>Some HTML attributes don't have corresponding properties. <code>colspan</code> is one example.</p> </li> <li>\n<p>Some DOM properties don't have corresponding attributes. <code>textContent</code> is one example.</p> </li> <li>\n<p>Many HTML attributes appear to map to properties ... but not in the way we might think!</p> </li> </ul> <p>That last category can be especially confusing ... until we understand this general rule:</p> <p><strong>Attributes <em>initialize</em> DOM properties and then they are done. Property values can change; attribute values can't.</strong></p> <p>For example, when the browser renders <code>&lt;input type=\"text\" value=\"Bob\"&gt;</code>, it creates a corresponding DOM node with a <code>value</code> property <em>initialized</em> to \"Bob\".</p> <p>When the user enters \"Sally\" into the input box, the DOM element <code>value</code> <em>property</em> becomes \"Sally\". But the HTML <code>value</code> <em>attribute</em> remains unchanged as we discover if we ask the input element about that attribute: <code>input.getAttribute('value') // returns \"Bob\"</code></p> <p>The HTML attribute <code>value</code> specifies the <em>initial</em> value; the DOM <code>value</code> property is the <em>current</em> value.</p> <p>The <code>disabled</code> attribute is another peculiar example. A button's <code>disabled</code> <em>property</em> is <code>false</code> by default so the button is enabled. When we add the <code>disabled</code> <em>attribute</em>, its presence alone initializes the button's <code>disabled</code> <em>property</em> to <code>true</code> so the button is disabled.</p> <p>Adding and removing the <code>disabled</code> <em>attribute</em> disables and enables the button. The value of the <em>attribute</em> is irrelevant, which is why we cannot enable a button by writing <code>&lt;button disabled=\"false\"&gt;Still Disabled&lt;/button&gt;</code>.</p> <p>Setting the button's <code>disabled</code> <em>property</em> (say, with an Angular binding) disables or enables the button. The value of the <em>property</em> matters.</p> <p><strong>The HTML attribute and the DOM property are not the same thing, even when they have the same name.</strong></p> </div>\n<p>This is so important, we’ll say it again.</p> <p><strong>Template binding works with <em>properties</em> and <em>events</em>, not <em>attributes</em>.</strong></p> <div class=\"callout is-helpful\">\n<header>A world without attributes</header><p>In the world of Angular 2, the only role of attributes is to initialize element and directive state. When we data bind, we're dealing exclusively with element and directive properties and events. Attributes effectively disappear.</p> </div>\n<p>With this model firmly in mind, let's learn about binding targets.</p> <h3 id=\"binding-targets\">Binding targets</h3> <p>The <strong>target of a data binding</strong> is something in the DOM. Depending on the binding type, the target can be an (element | component | directive) property, an (element | component | directive) event, or (rarely) an attribute name. The following table summarizes:</p> <table>\n<tr>\n<th>Binding type</th>\n<th>Target</th>\n<th>Examples</th>\n</tr>\n<tr>\n<td>Property</td>\n<td>Element property<br> Component property<br> Directive property</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;img [src] = \"heroImageUrl\"&gt;\n&lt;hero-detail [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n&lt;div [ngClass] = \"{selected: isSelected}\"&gt;&lt;/div&gt;\n</pre></td>\n</tr>\n<tr>\n<td>Event</td>\n<td>Element event<br> Component event<br> Directive event</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click) = \"onSave()\"&gt;Save&lt;/button&gt;\n&lt;hero-detail (deleteRequest)=\"deleteHero()\"&gt;&lt;/hero-detail&gt;\n&lt;div (myClick)=\"clicked=$event\"&gt;click me&lt;/div&gt;\n</pre></td>\n</tr>\n<tr>\n<td>Two-way</td>\n<td>Event and property</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [(ngModel)]=\"heroName\"&gt;\n</pre></td>\n</tr>\n<tr>\n<td>Attribute</td>\n<td>Attribute (the exception)</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;button [attr.aria-label]=\"help\"&gt;help&lt;/button&gt;\n</pre></td>\n</tr>\n<tr>\n<td>Class</td>\n<td>\n<code>class</code> property</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [class.special]=\"isSpecial\"&gt;Special&lt;/div&gt;\n</pre></td>\n</tr>\n<tr>\n<td>Style</td>\n<td>\n<code>style</code> property</td>\n<td><pre language=\"html\" format=\"\" data-language=\"html\">&lt;button [style.color] = \"isSpecial ? 'red' : 'green'\"&gt;\n</pre></td>\n</tr>\n</table>\n<p>Let’s descend from the architectural clouds and look at each of these binding types in concrete detail.</p> <h2 id=\"property-binding\">Property binding</h2> <p>We write a template <strong>property binding</strong> when we want to set a property of a view element to the value of a <a href=\"#template-expressions\">template expression</a>.</p> <p>The most common property binding sets an element property to a component property value. An example is binding the <code>src</code> property of an image element to a component’s <code>heroImageUrl</code> property:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;img [src]=\"heroImageUrl\"&gt;\n</pre>\n<p>Another example is disabling a button when the component says that it <code>isUnchanged</code>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button [disabled]=\"isUnchanged\"&gt;Cancel is disabled&lt;/button&gt;\n</pre>\n<p>Another is setting a property of a directive:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngClass]=\"classes\"&gt;[ngClass] binding to the classes property&lt;/div&gt;\n</pre>\n<p>Yet another is setting the model property of a custom component (a great way for parent and child components to communicate):</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<h3 id=\"one-way-in-\">One-way <em>in</em>\n</h3> <p>People often describe property binding as <em>one-way data binding</em> because it flows a value in one direction, from a component’s data property into a target element property.</p> <p>We cannot use property binding to pull values <em>out</em> of the target element. We can't bind to a property of the target element to read it. We can only set it.</p> <div class=\"l-sub-section\">\n<p>Nor can we use property binding to <em>call</em> a method on the target element.</p> <p>If the element raises events we can listen to them with an <a href=\"#event-binding\">event binding</a>.</p> <p>If we must read a target element property or call one of its methods, we'll need a different technique. See the API reference for <a href=\"../api/core/index/viewchild-var\">viewChild</a> and <a href=\"../api/core/index/contentchild-var\">contentChild</a>.</p> </div>\n<h3 id=\"binding-target\">Binding target</h3> <p>An element property between enclosing square brackets identifies the target property. The target property in the following code is the image element’s <code>src</code> property.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;img [src]=\"heroImageUrl\"&gt;\n</pre>\n<p>Some people prefer the <code>bind-</code> prefix alternative, known as the <em>canonical form</em>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;img bind-src=\"heroImageUrl\"&gt;\n</pre>\n<p>The target name is always the name of a property, even when it appears to be the name of something else. We see <code>src</code> and may think it’s the name of an attribute. No. It’s the name of an image element property.</p> <p>Element properties may be the more common targets, but Angular looks first to see if the name is a property of a known directive, as it is in the following example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngClass]=\"classes\"&gt;[ngClass] binding to the classes property&lt;/div&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>Technically, Angular is matching the name to a directive <a href=\"#inputs-outputs\">input</a>, one of the property names listed in the directive’s <code>inputs</code> array or a property decorated with <code>@Input()</code>. Such inputs map to the directive’s own properties.</p> </div>\n<p>If the name fails to match a property of a known directive or element, Angular reports an “unknown directive” error.</p> <h3 id=\"avoid-side-effects\">Avoid side effects</h3> <p>As we've already discussed, evaluation of a template expression should have no visible side effects. The expression language itself does its part to keep us safe. We can’t assign a value to anything in a property binding expression nor use the increment and decrement operators.</p> <p>Of course, our expression might invoke a property or method that has side effects. Angular has no way of knowing that or stopping us.</p> <p>The expression could call something like <code>getFoo()</code>. Only we know what <code>getFoo()</code> does. If <code>getFoo()</code> changes something and we happen to be binding to that something, we risk an unpleasant experience. Angular may or may not display the changed value. Angular may detect the change and throw a warning error. Our general advice: stick to data properties and to methods that return values and do no more.</p> <h3 id=\"return-the-proper-type\">Return the proper type</h3> <p>The template expression should evaluate to the type of value expected by the target property. Return a string if the target property expects a string. Return a number if the target property expects a number. Return an object if the target property expects an object.</p> <p>The <code>hero</code> property of the <code>HeroDetail</code> component expects a <code>Hero</code> object, which is exactly what we’re sending in the property binding:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<h3 id=\"remember-the-brackets\">Remember the brackets</h3> <p>The brackets tell Angular to evaluate the template expression. If we forget the brackets, Angular treats the string as a constant and <em>initializes the target property</em> with that string. It does <em>not</em> evaluate the string!</p> <p>Don't make the following mistake:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- ERROR: HeroDetailComponent.hero expects a\n     Hero object, not the string \"currentHero\" --&gt;\n  &lt;hero-detail hero=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<h3 id=\"one-time-initialization\">One-time string initialization</h3> <p>We <em>should</em> omit the brackets when all of the following are true:</p> <ul> <li>The target property accepts a string value.</li> <li>The string is a fixed value that we can bake into the template.</li> <li>This initial value never changes.</li> </ul> <p>We routinely initialize attributes this way in standard HTML, and it works just as well for directive and component property initialization. The following example initializes the <code>prefix</code> property of the <code>HeroDetailComponent</code> to a fixed string, not a template expression. Angular sets it and forgets about it.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail prefix=\"You are my\" [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>The <code>[hero]</code> binding, on the other hand, remains a live binding to the component's <code>currentHero</code> property.</p> <h3 id=\"property-binding-or-interpolation-\">Property binding or interpolation?</h3> <p>We often have a choice between interpolation and property binding. The following binding pairs do the same thing:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;&lt;img src=\"{{heroImageUrl}}\"&gt; is the &lt;i&gt;interpolated&lt;/i&gt; image.&lt;/p&gt;\n&lt;p&gt;&lt;img [src]=\"heroImageUrl\"&gt; is the &lt;i&gt;property bound&lt;/i&gt; image.&lt;/p&gt;\n\n&lt;p&gt;&lt;span&gt;\"{{title}}\" is the &lt;i&gt;interpolated&lt;/i&gt; title.&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;\"&lt;span [innerHTML]=\"title\"&gt;&lt;/span&gt;\" is the &lt;i&gt;property bound&lt;/i&gt; title.&lt;/p&gt;\n</pre>\n<p>Interpolation is a convenient alternative for property binding in many cases. In fact, Angular translates those interpolations into the corresponding property bindings before rendering the view.</p> <p>There is no technical reason to prefer one form to the other. We lean toward readability, which tends to favor interpolation. We suggest establishing coding style rules and choosing the form that both conforms to the rules and feels most natural for the task at hand.</p> <h4 id=\"content-security\">Content Security</h4> <p>Imagine the following <em>malicious content</em>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">evilTitle = 'Template &lt;script&gt;alert(\"evil never sleeps\")&lt;/script&gt;Syntax';\n</pre>\n<p>Fortunately, Angular data binding is on alert for dangerous HTML. It <em>sanitizes</em> the values before displaying them. It <strong>will not</strong> allow HTML with script tags to leak into the browser, neither with interpolation nor property binding.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;&lt;span&gt;\"{{evilTitle}}\" is the &lt;i&gt;interpolated&lt;/i&gt; evil title.&lt;/span&gt;&lt;/p&gt;\n&lt;p&gt;\"&lt;span [innerHTML]=\"evilTitle\"&gt;&lt;/span&gt;\" is the &lt;i&gt;property bound&lt;/i&gt; evil title.&lt;/p&gt;\n</pre>\n<p>Interpolation handles the script tags differently than property binding but both approaches render the content harmlessly.</p> <img src=\"https://angular.io/resources/images/devguide/template-syntax/evil-title.png\" alt=\"evil title made safe\" width=\"500px\"> <h2 id=\"attribute-class-and-style-bindings\">Attribute, Class, and Style Bindings</h2> <p>The template syntax provides specialized one-way bindings for scenarios less well suited to property binding.</p> <h3 id=\"attribute-binding\">Attribute Binding</h3> <p>We can set the value of an attribute directly with an <strong>attribute binding</strong>.</p> <div class=\"l-sub-section\">\n<p>This is the only exception to the rule that a binding sets a target property. This is the only binding that creates and sets an attribute.</p> </div>\n<p>We have stressed throughout this chapter that setting an element property with a property binding is always preferred to setting the attribute with a string. Why does Angular offer attribute binding?</p> <p><strong>We must use attribute binding when there is no element property to bind.</strong></p> <p>Consider the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Accessibility/ARIA\">ARIA</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/SVG\">SVG</a>, and table span attributes. They are pure attributes. They do not correspond to element properties, and they do not set element properties. There are no property targets to bind to.</p> <p>We become painfully aware of this fact when we try to write something like this:</p> <pre language=\"html\" data-language=\"html\">&lt;tr&gt;&lt;td colspan=\"{{1 + 1}}\"&gt;Three-Four&lt;/td&gt;&lt;/tr&gt;</pre>\n<p>We get this error:</p> <pre format=\"nocode\">Template parse errors:\nCan't bind to 'colspan' since it isn't a known native property</pre>\n<p>As the message says, the <code>&lt;td&gt;</code> element does not have a <code>colspan</code> property. It has the \"colspan\" <em>attribute</em>, but interpolation and property binding can set only <em>properties</em>, not attributes.</p> <p>We need attribute bindings to create and bind to such attributes.</p> <p>Attribute binding syntax resembles property binding. Instead of an element property between brackets, we start with the prefix <strong><code>attr</code></strong>, followed by a dot (<code>.</code>) and the name of the attribute. We then set the attribute value, using an expression that resolves to a string.</p> <p>Here we bind <code>[attr.colspan]</code> to a calculated value:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;table border=1&gt;\n  &lt;!--  expression calculates colspan=2 --&gt;\n  &lt;tr&gt;&lt;td [attr.colspan]=\"1 + 1\"&gt;One-Two&lt;/td&gt;&lt;/tr&gt;\n\n  &lt;!-- ERROR: There is no `colspan` property to set!\n    &lt;tr&gt;&lt;td colspan=\"{{1 + 1}}\"&gt;Three-Four&lt;/td&gt;&lt;/tr&gt;\n  --&gt;\n\n  &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt;\n</pre>\n<p>Here's how the table renders:</p> <table border=\"1px\"> <tr><td colspan=\"2\">One-Two</td></tr> <tr>\n<td>Five</td>\n<td>Six</td>\n</tr> </table> <p>One of the primary use cases for attribute binding is to set ARIA attributes, as in this example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- create and set an aria attribute for assistive technology --&gt;\n&lt;button [attr.aria-label]=\"actionName\"&gt;{{actionName}} with Aria&lt;/button&gt;\n</pre>\n<h3 id=\"class-binding\">Class Binding</h3> <p>We can add and remove CSS class names from an element’s <code>class</code> attribute with a <strong>class binding</strong>.</p> <p>Class binding syntax resembles property binding. Instead of an element property between brackets, we start with the prefix <code>class</code>, optionally followed by a dot (<code>.</code>) and the name of a CSS class: <code>[class.class-name]</code>.</p> <p>The following examples show how to add and remove the application's \"special\" class with class bindings. Here's how we set the attribute without binding:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- standard class attribute setting  --&gt;\n&lt;div class=\"bad curly special\"&gt;Bad curly special&lt;/div&gt;\n</pre>\n<p>We can replace that with a binding to a string of the desired class names; this is an all-or-nothing, replacement binding.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- reset/override all class names with a binding  --&gt;\n&lt;div class=\"bad curly special\"\n     [class]=\"badCurly\"&gt;Bad curly&lt;/div&gt;\n</pre>\n<p>Finally, we can bind to a specific class name. Angular adds the class when the template expression evaluates to truthy. It removes the class when the expression is falsey.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- toggle the \"special\" class on/off with a property --&gt;\n&lt;div [class.special]=\"isSpecial\"&gt;The class binding is special&lt;/div&gt;\n\n&lt;!-- binding to `class.special` trumps the class attribute --&gt;\n&lt;div class=\"special\"\n     [class.special]=\"!isSpecial\"&gt;This one is not so special&lt;/div&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>While this is a fine way to toggle a single class name, we generally prefer the <a href=\"#ngClass\">NgClass directive</a> for managing multiple class names at the same time.</p> </div>\n<h3 id=\"style-binding\">Style Binding</h3> <p>We can set inline styles with a <strong>style binding</strong>.</p> <p>Style binding syntax resembles property binding. Instead of an element property between brackets, we start with the prefix <code>style</code>, followed by a dot (<code>.</code>) and the name of a CSS style property: <code>[style.style-property]</code>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button [style.color] = \"isSpecial ? 'red': 'green'\"&gt;Red&lt;/button&gt;\n&lt;button [style.background-color]=\"canSave ? 'cyan': 'grey'\" &gt;Save&lt;/button&gt;\n</pre>\n<p>Some style binding styles have unit extension. Here we conditionally set the font size in “em” and “%” units .</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button [style.font-size.em]=\"isSpecial ? 3 : 1\" &gt;Big&lt;/button&gt;\n&lt;button [style.font-size.%]=\"!isSpecial ? 150 : 50\" &gt;Small&lt;/button&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>While this is a fine way to set a single style, we generally prefer the <a href=\"#ngStyle\">NgStyle directive</a> when setting several inline styles at the same time.</p> </div>\n<div class=\"l-sub-section\">\n<p>Note that a <em>style property</em> name can be written in either <a href=\"../glossary#dash-case\">dash-case</a>, as shown above, or <a href=\"../glossary#camelcase\">camelCase</a>, such as <code>fontSize</code>.</p> </div>\n<h2 id=\"event-binding\">Event Binding</h2> <p>The bindings we’ve met so far flow data in one direction: <em>from the component to an element</em>.</p> <p>Users don’t just stare at the screen. They enter text into input boxes. They pick items from lists. They click buttons. Such user actions may result in a flow of data in the opposite direction: <em>from an element to the component</em>.</p> <p>The only way to know about a user action is to listen for certain events such as keystrokes, mouse movements, clicks, and touches. We declare our interest in user actions through Angular event binding.</p> <p>Event binding syntax consists of a <strong>target event</strong> within parentheses on the left of an equal sign, and a quoted <a href=\"#template-statements\">template statement</a> on the right. The following event binding listens for the button’s click event, calling the component's <code>onSave()</code> method whenever a click occurs:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"onSave()\"&gt;Save&lt;/button&gt;\n</pre>\n<h3 id=\"target-event\">Target Event</h3> <p>A <strong>name between enclosing parentheses</strong> — for example, <code>(click)</code> — identifies the target event. In the following example, the target is the button’s click event.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"onSave()\"&gt;Save&lt;/button&gt;\n</pre>\n<p>Some people prefer the <code>on-</code> prefix alternative, known as the <em>canonical form</em>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button on-click=\"onSave()\"&gt;On Save&lt;/button&gt;\n</pre>\n<p>Element events may be the more common targets, but Angular looks first to see if the name matches an event property of a known directive, as it does in the following example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- `myClick` is an event on the custom `MyClickDirective` --&gt;\n&lt;div (myClick)=\"clickMessage=$event\"&gt;click with myClick&lt;/div&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>myClick</code> directive is further described below in the section on <a href=\"#aliasing-io\">Aliasing input/output properties</a>.</p> </div>\n<p>If the name fails to match an element event or an output property of a known directive, Angular reports an “unknown directive” error.</p> <h3 id=\"-event-and-event-handling-statements\">\n<em>$event</em> and event handling statements</h3> <p>In an event binding, Angular sets up an event handler for the target event.</p> <p>When the event is raised, the handler executes the template statement. The template statement typically involves a receiver that wants to do something in response to the event, such as take a value from the HTML control and store it in a model.</p> <p>The binding conveys information about the event, including data values, through an <strong>event object named <code>$event</code></strong>.</p> <p>The shape of the event object is determined by the target event itself. If the target event is a native DOM element event, the <code>$event</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">DOM event object</a>, with properties such as <code>target</code> and <code>target.value</code>.</p> <p>Consider this example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [value]=\"currentHero.firstName\"\n       (input)=\"currentHero.firstName=$event.target.value\" &gt;\n</pre>\n<p>We’re binding the input box <code>value</code> to a <code>firstName</code> property, and we’re listening for changes by binding to the input box’s <code>input</code> event. When the user makes changes, the <code>input</code> event is raised, and the binding executes the statement within a context that includes the DOM event object, <code>$event</code>.</p> <p>To update the <code>firstName</code> property, we must get the changed text by following the path <code>$event.target.value</code>.</p> <p>If the event belongs to a directive (remember: components are directives), <code>$event</code> has whatever shape the directive chose to produce.</p>  <h3 id=\"custom-events-with-eventemitter\">Custom Events with EventEmitter</h3> <p>Directives typically raise custom events with an Angular <a href=\"../api/core/index/eventemitter-class\">EventEmitter</a>. A directive creates an <code>EventEmitter</code> and exposes it as a property. The directive calls <code>EventEmitter.emit(payload)</code> to fire an event, passing in a message payload that can be anything. Parent directives listen for the event by binding to this property and accessing the payload through the <code>$event</code> object.</p> <p>Consider a <code>HeroDetailComponent</code> that presents hero information and responds to user actions. Although the <code>HeroDetailComponent</code> has a delete button it doesn't know how to delete the hero itself. The best it can do is raise an event reporting the user's delete request.</p> <p>Here are the pertinent excerpts from that <code>HeroDetailComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"HeroDetailComponent.ts (template)\">// HeroDetailComponent.ts (template)\n\ntemplate: `\n&lt;div&gt;\n  &lt;img src=\"{{heroImageUrl}}\"&gt;\n  &lt;span [style.text-decoration]=\"lineThrough\"&gt;\n    {{prefix}} {{hero?.fullName}}\n  &lt;/span&gt;\n  &lt;button (click)=\"delete()\"&gt;Delete&lt;/button&gt;\n&lt;/div&gt;`\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"HeroDetailComponent.ts (delete logic)\">// HeroDetailComponent.ts (delete logic)\n\n// This component make a request but it can't actually delete a hero.\ndeleteRequest = new EventEmitter&lt;Hero&gt;();\n\ndelete() {\n  this.deleteRequest.emit(this.hero);\n}\n</pre>\n<p>The component defines a <code>deleteRequest</code> property that returns an <code>EventEmitter</code>. When the user clicks <em>delete</em>, the component invokes the <code>delete()</code> method which tells the <code>EventEmitter</code> to emit a <code>Hero</code> object.</p> <p>Now imagine a hosting parent component that binds to the <code>HeroDetailComponent</code>'s <code>deleteRequest</code> event.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail (deleteRequest)=\"deleteHero($event)\" [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>When the <code>deleteRequest</code> event fires, Angular calls the parent component's <code>deleteHero</code> method, passing the <em>hero-to-delete</em> (emitted by <code>HeroDetail</code>) in the <code>$event</code> variable.</p> <h3 id=\"template-statements-have-side-effects\">Template statements have side effects</h3> <p>The <code>deleteHero</code> method has a side effect: it deletes a hero. Template statement side effects are not just OK, they are expected.</p> <p>Deleting the hero updates the model, perhaps triggering other changes including queries and saves to a remote server. These changes percolate through the system and are ultimately displayed in this and other views. It's all good.</p>  <h2 id=\"two-way-binding-with-ngmodel\">Two-way binding with NgModel</h2> <p>When developing data entry forms, we often want to both display a data property and update that property when the user makes changes.</p> <p>The <code>[(ngModel)]</code> two-way data binding syntax makes that easy. Here's an example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [(ngModel)]=\"currentHero.firstName\"&gt;\n</pre>\n<div class=\"callout is-important\">\n<header>[()] = banana in a box</header><p>To remember that the parentheses go inside the brackets, visualize a <em>banana in a box</em>.</p> </div>\n<div class=\"callout is-important\">\n<header>FormsModule is Required to use ngModel</header><p>Before we can use <code>ngModel</code> two-way data binding, we need to import the <code>FormsModule</code> package in our Angular module. We add it to the <code>NgModule</code> decorator's <code>imports</code> array. This array contains the list of external modules used by our application. <br>Learn more about the <code>FormsModule</code> and <code>ngModel</code> in the <a href=\"forms#ngModel\">Forms</a> chapter.</p> </div>\n<pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (FormsModule import)\">// app.module.ts (FormsModule import)\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>Alternatively to using <code>[(ngModel)]</code>, we can use the canonical prefix form:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input bindon-ngModel=\"currentHero.firstName\"&gt;\n</pre>\n<p>There’s a story behind this construction, a story that builds on the property and event binding techniques we learned previously.</p> <h3 id=\"inside-ngmodel-\">Inside [(ngModel)]</h3> <p>We could have achieved the same result with separate bindings to the <code>&lt;input&gt;</code> element's <code>value</code> property and <code>input</code> event.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [value]=\"currentHero.firstName\"\n       (input)=\"currentHero.firstName=$event.target.value\" &gt;\n</pre>\n<p>That’s cumbersome. Who can remember which element property to set and what event reports user changes? How do we extract the currently displayed text from the input box so we can update the data property? Who wants to look that up each time?</p> <p>That <code>ngModel</code> directive hides these onerous details behind its own <code>ngModel</code> input and <code>ngModelChange</code> output properties.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input\n  [ngModel]=\"currentHero.firstName\"\n  (ngModelChange)=\"currentHero.firstName=$event\"&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>ngModel</code> input property sets the element's value property and the <code>ngModelChange</code> output property listens for changes to the element's value. The details are specific to each kind of element and therefore the <code>NgModel</code> directive only works for elements, such as the input text box, that are supported by a <a href=\"../api/common/index/controlvalueaccessor-interface\">ControlValueAccessor</a>. We can't apply <code>[(ngModel)]</code> to our custom components until we write a suitable <em>value accessor</em>, a technique that is beyond the scope of this chapter.</p> </div>\n<p>Separate <code>ngModel</code> bindings is an improvement. We can do better.</p> <p>We shouldn't have to mention the data property twice. Angular should be able to capture the component’s data property and set it with a single declaration — which it can with the <code>[( )]</code> syntax:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [(ngModel)]=\"currentHero.firstName\"&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p><code>[(ngModel)]</code> is a specific example of a more general pattern in which Angular \"de-sugars\" the <code>[(x)]</code> syntax into an <code>x</code> input property for property binding and an <code>xChange</code> output property for event binding. Angular constructs the event property binding's template statement by appending <code>=$event</code> to the literal string of the template expression.</p>  <p><span style=\"font-family:courier\">[(<em>x</em>)]=\"<em>e</em>\" &lt;==&gt; [<em>x</em>]=\"<em>e</em>\" (<i>x</i>Change)=\"<em>e</em>=$event\"</span></p>  <p>We can write a two-way binding directive of our own to exploit this behavior.</p> </div>\n<p>Is <code>[(ngModel)]</code> all we need? Is there ever a reason to fall back to its expanded form?</p> <p>The <code>[( )]</code> syntax can only <em>set</em> a data-bound property. If we need to do something more or something different, we need to write the expanded form ourselves.</p> <p>Let's try something silly like forcing the input value to uppercase:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input\n  [ngModel]=\"currentHero.firstName\"\n  (ngModelChange)=\"setUpperCaseFirstName($event)\"&gt;\n</pre>\n<p>Here are all variations in action, including the uppercase version:</p> <img src=\"https://angular.io/resources/images/devguide/template-syntax/ng-model-anim.gif\" alt=\"NgModel variations\"> <h2 id=\"built-in-directives\">Built-in directives</h2> <p>Earlier versions of Angular included over seventy built-in directives. The community contributed many more, and countless private directives have been created for internal applications.</p> <p>We don’t need many of those directives in Angular 2. Quite often we can achieve the same results with the more capable and expressive Angular 2 binding system. Why create a directive to handle a click when we can write a simple binding such as this?</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"onSave()\"&gt;Save&lt;/button&gt;\n</pre>\n<p>We still benefit from directives that simplify complex tasks. Angular still ships with built-in directives; just not as many. We'll write our own directives, just not as many.</p> <p>This segment reviews some of the most frequently used built-in directives.</p> <h3 id=\"ngClass\">NgClass</h3> <p>We typically control how elements appear by adding and removing CSS classes dynamically. We can bind to <code>NgClass</code> to add or remove several classes simultaneously.</p> <p>A <a href=\"#class-binding\">class binding</a> is a good way to add or remove a <em>single</em> class.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- toggle the \"special\" class on/off with a property --&gt;\n&lt;div [class.special]=\"isSpecial\"&gt;The class binding is special&lt;/div&gt;\n</pre>\n<p>The <code>NgClass</code> directive may be the better choice when we want to add or remove <em>many</em> CSS classes at the same time.</p> <p>A good way to apply <code>NgClass</code> is by binding it to a key:value control object. Each key of the object is a CSS class name; its value is <code>true</code> if the class should be added, <code>false</code> if it should be removed.</p> <p>Consider a component method such as <code>setClasses</code> that manages the state of three CSS classes:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">setClasses() {\n  let classes =  {\n    saveable: this.canSave,      // true\n    modified: !this.isUnchanged, // false\n    special: this.isSpecial,     // true\n  };\n  return classes;\n}\n</pre>\n<p>Now we can add an <code>NgClass</code> property binding that calls <code>setClasses</code> and sets the element's classes accordingly:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngClass]=\"setClasses()\"&gt;This div is saveable and special&lt;/div&gt;\n</pre>\n<h3 id=\"ngStyle\">NgStyle</h3> <p>We can set inline styles dynamically, based on the state of the component. Binding to <code>NgStyle</code> lets us set many inline styles simultaneously.</p> <p>A <a href=\"#style-binding\">style binding</a> is an easy way to set a <em>single</em> style value.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [style.font-size]=\"isSpecial ? 'x-large' : 'smaller'\" &gt;\n  This div is x-large.\n&lt;/div&gt;\n</pre>\n<p>The <code>NgStyle</code> directive may be the better choice when we want to set <em>many</em> inline styles at the same time.</p> <p>We apply <code>NgStyle</code> by binding it to a key:value control object. Each key of the object is a style name; its value is whatever is appropriate for that style.</p> <p>Consider a component method such as <code>setStyles</code> that returns an object defining three styles:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">setStyles() {\n  let styles = {\n    // CSS property names\n    'font-style':  this.canSave      ? 'italic' : 'normal',  // italic\n    'font-weight': !this.isUnchanged ? 'bold'   : 'normal',  // normal\n    'font-size':   this.isSpecial    ? '24px'   : '8px',     // 24px\n  };\n  return styles;\n}\n</pre>\n<p>Now we just add an <code>NgStyle</code> property binding that calls <code>setStyles</code> and sets the element's styles accordingly:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngStyle]=\"setStyles()\"&gt;\n  This div is italic, normal weight, and extra large (24px).\n&lt;/div&gt;\n</pre>\n<h3 id=\"ngIf\">NgIf</h3> <p>We can add an element subtree (an element and its children) to the DOM by binding an <code>NgIf</code> directive to a truthy expression.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngIf=\"currentHero\"&gt;Hello, {{currentHero.firstName}}&lt;/div&gt;\n</pre>\n<div class=\"alert is-critical\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code>ngIf</code>. For more information, see <a href=\"#star-template\">* and &lt;template&gt;</a>.</p> </div>\n<p>Binding to a falsey expression removes the element subtree from the DOM.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- because of the ngIf guard\n    `nullHero.firstName` never has a chance to fail --&gt;\n&lt;div *ngIf=\"nullHero\"&gt;Hello, {{nullHero.firstName}}&lt;/div&gt;\n\n&lt;!-- Hero Detail is not in the DOM because isActive is false--&gt;\n&lt;hero-detail *ngIf=\"isActive\"&gt;&lt;/hero-detail&gt;\n</pre>\n<h4 id=\"visibility-and-ngif-are-not-the-same\">Visibility and NgIf are not the same</h4> <p>We can show and hide an element subtree (the element and its children) with a <a href=\"#class-binding\">class</a> or <a href=\"#style-binding\">style</a> binding:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- isSpecial is true --&gt;\n&lt;div [class.hidden]=\"!isSpecial\"&gt;Show with class&lt;/div&gt;\n&lt;div [class.hidden]=\"isSpecial\"&gt;Hide with class&lt;/div&gt;\n\n&lt;!-- HeroDetail is in the DOM but hidden --&gt;\n&lt;hero-detail [class.hidden]=\"isSpecial\"&gt;&lt;/hero-detail&gt;\n\n&lt;div [style.display]=\"isSpecial ? 'block' : 'none'\"&gt;Show with style&lt;/div&gt;\n&lt;div [style.display]=\"isSpecial ? 'none'  : 'block'\"&gt;Hide with style&lt;/div&gt;\n</pre>\n<p>Hiding a subtree is quite different from excluding a subtree with <code>NgIf</code>.</p> <p>When we hide the element subtree, it remains in the DOM. Components in the subtree are preserved, along with their state. Angular may continue to check for changes even to invisible properties. The subtree may tie up substantial memory and computing resources.</p> <p>When <code>NgIf</code> is <code>false</code>, Angular physically removes the element subtree from the DOM. It destroys components in the subtree, along with their state, potentially freeing up substantial resources and resulting in better performance for the user.</p> <p>The show/hide technique is probably fine for small element trees. We should be wary when hiding large trees; <code>NgIf</code> may be the safer choice. Always measure before leaping to conclusions.</p> <h3 id=\"ngSwitch\">NgSwitch</h3> <p>We bind to <code>NgSwitch</code> when we want to display <em>one</em> element tree (an element and its children) from a <em>set</em> of possible element trees, based on some condition. Angular puts only the <em>selected</em> element tree into the DOM.</p> <p>Here’s an example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;span [ngSwitch]=\"toeChoice\"&gt;\n  &lt;span *ngSwitchCase=\"'Eenie'\"&gt;Eenie&lt;/span&gt;\n  &lt;span *ngSwitchCase=\"'Meanie'\"&gt;Meanie&lt;/span&gt;\n  &lt;span *ngSwitchCase=\"'Miney'\"&gt;Miney&lt;/span&gt;\n  &lt;span *ngSwitchCase=\"'Moe'\"&gt;Moe&lt;/span&gt;\n  &lt;span *ngSwitchDefault&gt;other&lt;/span&gt;\n&lt;/span&gt;\n</pre>\n<p>We bind the parent <code>NgSwitch</code> directive to an expression returning a <em>switch value</em>. The value is a string in this example, but it can be a value of any type.</p> <p>In this example, the parent <code>NgSwitch</code> directive controls a set of child <code>&lt;span&gt;</code> elements. A <code>&lt;span&gt;</code> is either pegged to a <em>match value</em> expression or marked as the default.</p> <p><strong>At any particular moment, at most one of these <em>spans</em> is in the DOM.</strong></p> <p>If the <em>span</em>’s <em>match value</em> equals the switch value, Angular adds the <code>&lt;span&gt;</code> to the DOM. If none of the <em>spans</em> is a match, Angular adds the default <em>span</em> to the DOM. Angular removes and destroys all other <em>spans</em>.</p> <div class=\"l-sub-section\">\n<p>We could substitute any element for the <em>span</em> in this example. That element could be a <code>&lt;div&gt;</code> with a vast subtree of its own elements. Only the matching <code>&lt;div&gt;</code> and its subtree would appear in the DOM; the others would be removed.</p> </div>\n<p>Three collaborating directives are at work here:</p> <ol> <li>\n<code>ngSwitch</code>: bound to an expression that returns the switch value</li> <li>\n<code>ngSwitchCase</code>: bound to an expression returning a match value</li> <li>\n<code>ngSwitchDefault</code>: a marker attribute on the default element</li> </ol> <div class=\"alert is-critical\">\n<p><strong>Do <em>not</em></strong> put the asterisk (<code>*</code>) in front of <code>ngSwitch</code>. Use the property binding instead.</p> <p><strong>Do</strong> put the asterisk (<code>*</code>) in front of <code>ngSwitchCase</code> and <code>ngSwitchDefault</code>. For more information, see <a href=\"#star-template\">* and &lt;template&gt;</a>.</p> </div>\n<h3 id=\"ngFor\">NgFor</h3> <p><code>NgFor</code> is a <em>repeater</em> directive — a way to customize data display.</p> <p>Our goal is to present a list of items. We define a block of HTML that defines how a single item should be displayed. We tell Angular to use that block as a template for rendering each item in the list.</p> <p>Here is an example of <code>NgFor</code> applied to a simple <code>&lt;div&gt;</code>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero.fullName}}&lt;/div&gt;\n</pre>\n<p>We can also apply an <code>NgFor</code> to a component element, as in this example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail *ngFor=\"let hero of heroes\" [hero]=\"hero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<div class=\"alert is-critical\">\n<p>Don't forget the asterisk (<code>*</code>) in front of <code>ngFor</code>. For more information, see <a href=\"#star-template\">* and &lt;template&gt;</a>.</p> </div>\n<p>The text assigned to <code>*ngFor</code> is the instruction that guides the repeater process.</p> <h4 id=\"ngForMicrosyntax\">NgFor microsyntax</h4> <p>The string assigned to <code>*ngFor</code> is not a <a href=\"#template-expressions\">template expression</a>. It’s a <em>microsyntax</em> — a little language of its own that Angular interprets. In this example, the string <code>\"let hero of heroes\"</code> means:</p>  <p><em>Take each hero in the <code>heroes</code> array, store it in the local <code>hero</code> variable, and make it available to the templated HTML for each iteration.</em></p>  <p>Angular translates this instruction into a new set of elements and bindings.</p> <p>In the two previous examples, the <code>ngFor</code> directive iterates over the <code>heroes</code> array returned by the parent component’s <code>heroes</code> property, stamping out instances of the element to which it is applied. Angular creates a fresh instance of the template for each hero in the array.</p> <p>The <code>let</code> keyword before <code>hero</code> creates a template input variable called <code>hero</code>.</p> <div class=\"alert is-critical\">\n<p>A template input variable is <strong>not</strong> the same as a <a href=\"#ref-vars\">template reference variable</a>!</p> </div>\n<p>We use this variable within the template to access a hero’s properties, as we’re doing in the interpolation. We can also pass the variable in a binding to a component element, as we're doing with <code>hero-detail</code>.</p> <h4 id=\"ngfor-with-index\">NgFor with index</h4> <p>The <code>ngFor</code> directive supports an optional <code>index</code> that increases from 0 to the length of the array for each iteration. We can capture the index in a template input variable and use it in our template.</p> <p>The next example captures the index in a variable named <code>i</code>, using it to stamp out rows like \"1 - Hercules Son of Zeus\".</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngFor=\"let hero of heroes; let i=index\"&gt;{{i + 1}} - {{hero.fullName}}&lt;/div&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn about other special <em>index-like</em> values such as <code>last</code>, <code>even</code>, and <code>odd</code> in the <a href=\"../api/common/index/ngfor-directive\">NgFor API reference</a>.</p> </div>\n<h4 id=\"ngfortrackby\">NgForTrackBy</h4> <p>The <code>ngFor</code> directive has the potential to perform poorly, especially with large lists. A small change to one item, an item removed, or an item added can trigger a cascade of DOM manipulations.</p> <p>For example, we could refresh the list of heroes by re-querying the server. The refreshed list probably contains most, if not all, of the previously displayed heroes.</p> <p><em>We</em> know this because the <code>id</code> of each hero hasn't changed. But Angular sees only a fresh list of new object references. It has no choice but to tear down the old list, discard those DOM elements, and re-build a new list with new DOM elements.</p> <p>Angular can avoid this churn if we give it a <em>tracking</em> function that tells it what we know: that two objects with the same <code>hero.id</code> are the same <em>hero</em>. Here is such a function:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">trackByHeroes(index: number, hero: Hero) { return hero.id; }\n</pre>\n<p>Now set the <code>NgForTrackBy</code> directive to that <em>tracking</em> function.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngFor=\"let hero of heroes; trackBy:trackByHeroes\"&gt;({{hero.id}}) {{hero.fullName}}&lt;/div&gt;\n</pre>\n<p>The <em>tracking</em> function doesn't eliminate all DOM changes. Angular may have to update the DOM element if the same-hero <em>properties</em> have changed. But if the properties haven't changed — and most of the time they will not have changed — Angular can leave those DOM elements alone. The list UI will be smoother and more responsive.</p> <p>Here is an illustration of the <code>NgForTrackBy</code> effect.</p> <img src=\"https://angular.io/resources/images/devguide/template-syntax/ng-for-track-by-anim.gif\" alt=\"NgForTrackBy\"> <h2 id=\"star-template\">* and &lt;template&gt;</h2> <p>When we reviewed the <code>NgFor</code>, <code>NgIf</code>, and <code>NgSwitch</code> built-in directives, we called out an oddity of the syntax: the asterisk (<code>*</code>) that appears before the directive names.</p> <p>The <code>*</code> is a bit of syntactic sugar that makes it easier to read and write directives that modify HTML layout with the help of templates. <code>NgFor</code>, <code>NgIf</code>, and <code>NgSwitch</code> all add and remove element subtrees that are wrapped in <code>&lt;template&gt;</code> tags.</p> <p>We didn't see the <code>&lt;template&gt;</code> tags because the <code>*</code> prefix syntax allowed us to skip those tags and focus directly on the HTML element that we are including, excluding, or repeating.</p> <p>In this section we go under the hood and see how Angular strips away the <code>*</code> and expands the HTML into the <code>&lt;template&gt;</code> tags for us.</p> <h3 id=\"expanding-ngif-\">Expanding <code>*ngIf</code>\n</h3> <p>We can do what Angular does ourselves and expand the <code>*</code> prefix syntax to template syntax. Here's some code with <code>*ngIf</code>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail *ngIf=\"currentHero\" [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>The <code>currentHero</code> is referenced twice, first as the true/false condition for <code>NgIf</code> and again as the actual hero passed into the <code>HeroDetailComponent</code>.</p> <p>The first expansion step transports the <code>ngIf</code> (without the <code>*</code> prefix) and its contents into an expression assigned to a <code>template</code> directive.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail template=\"ngIf:currentHero\" [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>The next (and final) step unfolds the HTML into a <code>&lt;template&gt;</code> tag and <code>[ngIf]</code> <a href=\"#property-binding\">property binding</a>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;template [ngIf]=\"currentHero\"&gt;\n  &lt;hero-detail [hero]=\"currentHero\"&gt;&lt;/hero-detail&gt;\n&lt;/template&gt;\n</pre>\n<p>Notice that the <code>[hero]=\"currentHero\"</code> binding remains on the child <code>&lt;hero-detail&gt;</code> element inside the template.</p> <div class=\"callout is-critical\">\n<header>Remember the brackets!</header><p>Don’t make the mistake of writing <code>ngIf=\"currentHero\"</code>! That syntax assigns the <em>string</em> value <code>\"currentHero\"</code> to <code>ngIf</code>. In JavaScript a non-empty string is a truthy value, so <code>ngIf</code> would always be <code>true</code> and Angular would always display the <code>hero-detail</code> … even when there is no <code>currentHero</code>!</p> </div>\n<h3 id=\"expanding-ngswitch-\">Expanding <code>*ngSwitch</code>\n</h3> <p>A similar transformation applies to <code>*ngSwitch</code>. We can de-sugar the syntax ourselves. Here's an example, first with <code>*ngSwitchCase</code> and <code>*ngSwitchDefault</code> and then again with <code>&lt;template&gt;</code> tags:</p> <pre language=\"html\" format=\"\" data-language=\"html\">    &lt;span [ngSwitch]=\"toeChoice\"&gt;\n\n      &lt;!-- with *NgSwitch --&gt;\n      &lt;span *ngSwitchCase=\"'Eenie'\"&gt;Eenie&lt;/span&gt;\n      &lt;span *ngSwitchCase=\"'Meanie'\"&gt;Meanie&lt;/span&gt;\n      &lt;span *ngSwitchCase=\"'Miney'\"&gt;Miney&lt;/span&gt;\n      &lt;span *ngSwitchCase=\"'Moe'\"&gt;Moe&lt;/span&gt;\n      &lt;span *ngSwitchDefault&gt;other&lt;/span&gt;\n\n      &lt;!-- with &lt;template&gt; --&gt;\n      &lt;template [ngSwitchCase]=\"'Eenie'\"&gt;&lt;span&gt;Eenie&lt;/span&gt;&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"'Meanie'\"&gt;&lt;span&gt;Meanie&lt;/span&gt;&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"'Miney'\"&gt;&lt;span&gt;Miney&lt;/span&gt;&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"'Moe'\"&gt;&lt;span&gt;Moe&lt;/span&gt;&lt;/template&gt;\n      &lt;template ngSwitchDefault&gt;&lt;span&gt;other&lt;/span&gt;&lt;/template&gt;\n\n    &lt;/span&gt;\n</pre>\n<p>The <code>*ngSwitchCase</code> and <code>*ngSwitchDefault</code> expand in exactly the same manner as <code>*ngIf</code>, wrapping their former elements in <code>&lt;template&gt;</code> tags.</p> <p>Now we can see why the <code>ngSwitch</code> itself is not prefixed with an asterisk (*). It does not define content. It's job is to control a collection of templates.</p> <p>In this case, it governs two sets of <code>ngSwitchCase</code> and <code>NgSwitchDefault</code> directives. We should expect it to display the values of the selected template twice, once for the (*) prefixed version and once for the expanded template version. That's exactly what we see in this example:</p> <img src=\"https://angular.io/resources/images/devguide/template-syntax/ng-switch-anim.gif\" alt=\"NgSwitch\"><h3 id=\"expanding-ngfor-\">Expanding <code>*ngFor</code>\n</h3> <p>The <code>*ngFor</code> undergoes a similar transformation. We begin with an <code>*ngFor</code> example:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail *ngFor=\"let hero of heroes; trackBy:trackByHeroes\" [hero]=\"hero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>Here's the same example after transporting the <code>ngFor</code> to the <code>template</code> directive:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail template=\"ngFor let hero of heroes; trackBy:trackByHeroes\" [hero]=\"hero\"&gt;&lt;/hero-detail&gt;\n</pre>\n<p>And here it is expanded further into a <code>&lt;template&gt;</code> tag wrapping the original <code>&lt;hero-detail&gt;</code> element:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;template ngFor let-hero [ngForOf]=\"heroes\" [ngForTrackBy]=\"trackByHeroes\"&gt;\n  &lt;hero-detail [hero]=\"hero\"&gt;&lt;/hero-detail&gt;\n&lt;/template&gt;\n</pre>\n<p>The <code>NgFor</code> code is a bit more complex than <code>NgIf</code> because a repeater has more moving parts to configure. In this case, we have to remember to create and assign the <code>NgForOf</code> directive that identifies the list and the <code>NgForTrackBy</code> directive. Using the <code>*ngFor</code> syntax is much easier than writing out this expanded HTML ourselves.</p> <h2 id=\"ref-vars\">Template reference variables</h2> <p>A <strong>template reference variable</strong> is a reference to a DOM element or directive within a template.</p> <p>It can be used with native DOM elements but also with Angular 2 components — in fact, it will work with any custom web component.</p> <h3 id=\"referencing-a-template-reference-variable\">Referencing a template reference variable</h3> <p>We can reference a template reference variable on the same element, on a sibling element, or on any child elements.</p> <p>Here are two other examples of creating and consuming a Template reference variable:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- phone refers to the input element; pass its `value` to an event handler --&gt;\n&lt;input #phone placeholder=\"phone number\"&gt;\n&lt;button (click)=\"callPhone(phone.value)\"&gt;Call&lt;/button&gt;\n\n&lt;!-- fax refers to the input element; pass its `value` to an event handler --&gt;\n&lt;input ref-fax placeholder=\"fax number\"&gt;\n&lt;button (click)=\"callFax(fax.value)\"&gt;Fax&lt;/button&gt;\n</pre>\n<p>The hash (<code>#</code>) prefix to \"phone\" means that we're defining a <code>phone</code> variable.</p> <div class=\"l-sub-section\">\n<p>Folks who don't like using the <code>#</code> character can use its canonical alternative, the <code>ref-</code> prefix. For example, we can declare the our <code>phone</code> variable using either <code>#phone</code> or <code>ref-phone</code>.</p> </div>\n<h3 id=\"how-a-variable-gets-its-value\">How a variable gets its value</h3> <p>Angular sets the variable's value to the element on which it was defined. We defined these variables on the <code>input</code> elements. We’re passing those <code>input</code> element objects across to the button elements, where they're used in arguments to the <code>call</code> methods in the event bindings.</p> <h3 id=\"ngform-and-template-reference-variables\">NgForm and template reference variables</h3> <p>Let's look at one final example: a form, the poster child for template reference variables.</p> <p>The HTML for a form can be quite involved, as we saw in the <a href=\"forms\">Forms</a> chapter. The following is a <em>simplified</em> example — and it's not simple at all.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;form (ngSubmit)=\"onSubmit(theForm)\" #theForm=\"ngForm\"&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;input class=\"form-control\" name=\"name\" required [(ngModel)]=\"currentHero.firstName\"&gt;\n  &lt;/div&gt;\n  &lt;button type=\"submit\" [disabled]=\"!theForm.form.valid\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</pre>\n<p>A template reference variable, <code>theForm</code>, appears three times in this example, separated by a large amount of HTML.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;form (ngSubmit)=\"onSubmit(theForm)\" #theForm=\"ngForm\"&gt;\n  &lt;button type=\"submit\" [disabled]=\"!theForm.form.valid\"&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</pre>\n<p>What is the value of <code>theForm</code>?</p> <p>It would be the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement\">HTMLFormElement</a> if Angular hadn't taken it over. It's actually <code>ngForm</code>, a reference to the Angular built-in <code>NgForm</code> directive that wraps the native <code>HTMLFormElement</code> and endows it with additional superpowers such as the ability to track the validity of user input.</p> <p>This explains how we can disable the submit button by checking <code>theForm.form.valid</code> and pass an object with rich information to the parent component's <code>onSubmit</code> method.</p> <h2 id=\"inputs-outputs\">Input and output properties</h2> <p>So far, we’ve focused mainly on binding to component members within template expressions and statements that appear on the <em>right side of the binding declaration</em>. A member in that position is a data binding <strong>source</strong>.</p> <p>This section concentrates on binding to <strong>targets</strong>, which are directive properties on the <em>left side of the binding declaration</em>. These directive properties must be declared as <strong>inputs</strong> or <strong>outputs</strong>.</p> <div class=\"alert is-important\">\n<p>Remember: All <strong>components</strong> are <strong>directives</strong>.</p> </div>\n<div class=\"l-sub-section\">\n<p>We're drawing a sharp distinction between a data binding <strong>target</strong> and a data binding <strong>source</strong>.</p> <p>The <em>target</em> of a binding is to the <em>left</em> of the <code>=</code>. The <em>source</em> is on the <em>right</em> of the <code>=</code>.</p> <p>The <em>target</em> of a binding is the property or event inside the binding punctuation: <code>[]</code>, <code>()</code> or <code>[()]</code>. The <em>source</em> is either inside quotes (<code>\" \"</code>) or within an interpolation (<code>{{}}</code>).</p> <p>Every member of a <strong>source</strong> directive is automatically available for binding. We don't have to do anything special to access a directive member in a template expression or statement.</p> <p>We have <em>limited</em> access to members of a <strong>target</strong> directive. We can only bind to properties that are explicitly identified as <em>inputs</em> and <em>outputs</em>.</p> </div>\n<p>In the following example, <code>iconUrl</code> and <code>onSave</code> are members of a component that are referenced within quoted syntax to the right of the <code>=</code>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;img [src]=\"iconUrl\"/&gt;\n&lt;button (click)=\"onSave()\"&gt;Save&lt;/button&gt;\n</pre>\n<p>They are <em>neither inputs nor outputs</em> of the component. They are data sources for their bindings.</p> <p>Now look at <code>HeroDetailComponent</code> when it is the <strong>target of a binding</strong>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail [hero]=\"currentHero\" (deleteRequest)=\"deleteHero($event)\"&gt;\n&lt;/hero-detail&gt;\n</pre>\n<p>Both <code>HeroDetailComponent.hero</code> and <code>HeroDetailComponent.deleteRequest</code> are on the <strong>left side</strong> of binding declarations. <code>HeroDetailComponent.hero</code> is inside brackets; it is the target of a property binding. <code>HeroDetailComponent.deleteRequest</code> is inside parentheses; it is the target of an event binding.</p> <h3 id=\"declaring-input-and-output-properties\">Declaring input and output properties</h3> <p>Target properties must be explicitly marked as inputs or outputs.</p> <p>When we peek inside <code>HeroDetailComponent</code>, we see that these properties are marked with decorators as input and output properties.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input()  hero: Hero;\n@Output() deleteRequest = new EventEmitter&lt;Hero&gt;();\n</pre>\n<div class=\"l-sub-section\">\n<p>Alternatively, we can identify members in the <code>inputs</code> and <code>outputs</code> arrays of the directive metadata, as in this example:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  inputs: ['hero'],\n  outputs: ['deleteRequest'],\n})\n</pre>\n<br><p>We can specify an input/output property either with a decorator or in a metadata array. Don't do both!</p> </div>\n<h3 id=\"input-or-output-\">Input or output?</h3> <p><em>Input</em> properties usually receive data values. <em>Output</em> properties expose event producers, such as <code>EventEmitter</code> objects.</p> <p>The terms <em>input</em> and <em>output</em> reflect the perspective of the target directive.</p> <img src=\"https://angular.io/resources/images/devguide/template-syntax/input-output.png\" alt=\"Inputs and outputs\"><p><code>HeroDetailComponent.hero</code> is an <strong>input</strong> property from the perspective of <code>HeroDetailComponent</code> because data flows <em>into</em> that property from a template binding expression.</p> <p><code>HeroDetailComponent.deleteRequest</code> is an <strong>output</strong> property from the perspective of <code>HeroDetailComponent</code> because events stream <em>out</em> of that property and toward the handler in a template binding statement.</p> <h3 id=\"aliasing-io\">Aliasing input/output properties</h3>\n<p>Sometimes we want the public name of an input/output property to be different from the internal name.</p> <p>This is frequently the case with <a href=\"attribute-directives\">attribute directives</a>. Directive consumers expect to bind to the name of the directive. For example, when we apply a directive with a <code>myClick</code> selector to a <code>&lt;div&gt;</code> tag, we expect to bind to an event property that is also called <code>myClick</code>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div (myClick)=\"clickMessage=$event\"&gt;click with myClick&lt;/div&gt;\n</pre>\n<p>However, the directive name is often a poor choice for the name of a property within the directive class. The directive name rarely describes what the property does. The <code>myClick</code> directive name is not a good name for a property that emits click messages.</p> <p>Fortunately, we can have a public name for the property that meets conventional expectations, while using a different name internally. In the example immediately above, we are actually binding <em>through the</em> <code>myClick</code> <em>alias</em> to the directive's own <code>clicks</code> property.</p> <p>We can specify the alias for the property name by passing it into the input/output decorator like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Output('myClick') clicks = new EventEmitter&lt;string&gt;(); //  @Output(alias) propertyName = ...\n</pre>\n<div class=\"l-sub-section\">\n<p>We can also alias property names in the <code>inputs</code> and <code>outputs</code> arrays. We write a colon-delimited (<code>:</code>) string with the directive property name on the <em>left</em> and the public alias on the <em>right</em>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Directive({\n  outputs: ['clicks:myClick']  // propertyName:alias\n})\n</pre>\n</div>\n<h2 id=\"expression-operators\">Template expression operators</h2> <p>The template expression language employs a subset of JavaScript syntax supplemented with a few special operators for specific scenarios. We'll cover two of these operators: <em>pipe</em> and <em>safe navigation operator</em>.</p>  <h3 id=\"the-pipe-operator-\">The pipe operator ( | )</h3> <p>The result of an expression might require some transformation before we’re ready to use it in a binding. For example, we might want to display a number as a currency, force text to uppercase, or filter a list and sort it.</p> <p>Angular <a href=\"pipes\">pipes</a> are a good choice for small transformations such as these. Pipes are simple functions that accept an input value and return a transformed value. They're easy to apply within template expressions, using the <strong>pipe operator (<code>|</code>)</strong>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div&gt;Title through uppercase pipe: {{title | uppercase}}&lt;/div&gt;\n</pre>\n<p>The pipe operator passes the result of an expression on the left to a pipe function on the right.</p> <p>We can chain expressions through multiple pipes:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- Pipe chaining: convert title to uppercase, then to lowercase --&gt;\n&lt;div&gt;\n  Title through a pipe chain:\n  {{title | uppercase | lowercase}}\n&lt;/div&gt;\n</pre>\n<p>And we can also <a href=\"pipes#parameterizing-a-pipe\">apply parameters</a> to a pipe:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- pipe with configuration argument =&gt; \"February 25, 1970\" --&gt;\n&lt;div&gt;Birthdate: {{currentHero?.birthdate | date:'longDate'}}&lt;/div&gt;\n</pre>\n<p>The <code>json</code> pipe is particularly helpful for debugging our bindings:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div&gt;{{currentHero | json}}&lt;/div&gt;\n</pre>\n<p>The generated output would look something like this</p> <pre language=\"json\" data-language=\"json\">{ \"firstName\": \"Hercules\", \"lastName\": \"Son of Zeus\",\n  \"birthdate\": \"1970-02-25T08:00:00.000Z\",\n  \"url\": \"http://www.imdb.com/title/tt0065832/\",\n  \"rate\": 325, \"id\": 1 }\n</pre>\n <h3 id=\"the-safe-navigation-operator-and-null-property-paths\">The safe navigation operator ( ?. ) and null property paths</h3> <p>The Angular <strong>safe navigation operator (<code>?.</code>)</strong> is a fluent and convenient way to guard against null and undefined values in property paths. Here it is, protecting against a view render failure if the <code>currentHero</code> is null.</p> <pre language=\"html\" format=\"\" data-language=\"html\">The current hero's name is {{currentHero?.firstName}}\n</pre>\n<p>Let’s elaborate on the problem and this particular solution.</p> <p>What happens when the following data bound <code>title</code> property is null?</p> <pre language=\"html\" format=\"\" data-language=\"html\">The title is {{title}}\n</pre>\n<p>The view still renders but the displayed value is blank; we see only \"The title is\" with nothing after it. That is reasonable behavior. At least the app doesn't crash.</p> <p>Suppose the template expression involves a property path, as in this next example where we’re displaying the <code>firstName</code> of a null hero.</p> <pre language=\"html\" data-language=\"html\">The null hero's name is {{nullHero.firstName}}\n</pre>\n<p>JavaScript throws a null reference error, and so does Angular:</p> <pre format=\"nocode\">TypeError: Cannot read property 'firstName' of null in [null].\n</pre>\n<p>Worse, the <em>entire view disappears</em>.</p> <p>We could claim that this is reasonable behavior if we believed that the <code>hero</code> property must never be null. If it must never be null and yet it is null, we've made a programming error that should be caught and fixed. Throwing an exception is the right thing to do.</p> <p>On the other hand, null values in the property path may be OK from time to time, especially when we know the data will arrive eventually.</p> <p>While we wait for data, the view should render without complaint, and the null property path should display as blank just as the <code>title</code> property does.</p> <p>Unfortunately, our app crashes when the <code>currentHero</code> is null.</p> <p>We could code around that problem with <a href=\"#ngIf\">NgIf</a>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!--No hero, div not displayed, no error --&gt;\n&lt;div *ngIf=\"nullHero\"&gt;The null hero's name is {{nullHero.firstName}}&lt;/div&gt;\n</pre>\n<p>Or we could try to chain parts of the property path with <code>&amp;&amp;</code>, knowing that the expression bails out when it encounters the first null.</p> <pre language=\"html\" format=\"\" data-language=\"html\">The null hero's name is {{nullHero &amp;&amp; nullHero.firstName}}\n</pre>\n<p>These approaches have merit but can be cumbersome, especially if the property path is long. Imagine guarding against a null somewhere in a long property path such as <code>a.b.c.d</code>.</p> <p>The Angular safe navigation operator (<code>?.</code>) is a more fluent and convenient way to guard against nulls in property paths. The expression bails out when it hits the first null value. The display is blank, but the app keeps rolling without errors.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- No hero, no problem! --&gt;\nThe null hero's name is {{nullHero?.firstName}}\n</pre>\n<p>It works perfectly with long property paths such as <code>a?.b?.c?.d</code>.</p> <h2 id=\"summary\">Summary</h2> <p>We’ve completed our survey of template syntax. Now it's time to put that knowledge to work as we write our own components and directives.</p>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"https://angular.io/docs/ts/latest/guide/cheatsheet.html\">Angular Cheat Sheet</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/template-syntax.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/template-syntax.html</a>\n  </p>\n</div>\n","guide/ngmodule":"<h1 class=\"hero-title text-display-1 \">Angular Modules (NgModule)</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Define application modules with @NgModule</p></div>\n<p><strong>Angular Modules</strong> help organize an application into cohesive blocks of functionality.</p> <p>An Angular Module <em>class</em> is adorned with the <strong>NgModule</strong> decorator that defines metadata about the module. </p> <p>This chapter explains how to <strong>create</strong> <code>NgModule</code> classes and how to load them, either immediately when the application launches or later, as needed, via the Router. </p> <h2 id=\"contents\">Contents</h2> <ul> <li><a href=\"#angular-modularity\" title=\"Add structure to the app with NgModule\">Angular modularity</a></li> <li><a href=\"#root-module\" title=\"The startup module that every app requires\">The application root module</a></li> <li>\n<a href=\"#bootstrap\" title=\"Launch the app in a browser with the root module as the entry point\">Bootstrap</a> the root module</li> <li><a href=\"#declarations\" title=\"Declare the components, directives, and pipes that belong to a module\">Declarations</a></li> <li><a href=\"#providers\" title=\"Extend the app with additional services\">Providers</a></li> <li><a href=\"#imports\" title=\"Import components, directives, and pipes for use in component templates\">Imports</a></li> <li><a href=\"#resolve-conflicts\" title=\"When two directives have the same selector ...\">Resolve conflicts</a></li> <li><a href=\"#feature-modules\" title=\"Partition the app into feature modules\">Feature modules</a></li> <li>\n<a href=\"#lazy-load\" title=\"Load modules asynchronously\">Lazy loaded modules</a> with the Router</li> <li>\n<a href=\"#shared-module\" title=\"Create a module for commonly used components, directives, pipes and services\">Shared modules</a> </li> <li><a href=\"#ngmodule-properties\" title=\"A technical summary of the @NgModule metadata properties\">NgModule metadata properties</a></li> <li><a href=\"#faq\" title=\"Frequently asked questions\">FAQ</a></li> </ul> <h2 id=\"angular-modularity\">Angular Modularity</h2> <p>Modules are a great way to organize the application and extend it with capabilities from external libraries.</p> <p>Many Angular libraries are modules (e.g, <code>FormsModule</code>, <code>HttpModule</code>, <code>RouterModule</code>). Many third party libraries are available as Angular modules (e.g., <a href=\"https://material.angular.io/\" target=\"_blank\">Material Design</a>, <a href=\"http://ionicframework.com/\" target=\"_blank\">Ionic</a>, <a href=\"https://github.com/angular/angularfire2\" target=\"_blank\">AngularFire2</a>).</p> <p>Angular modules consolidate components, directives and pipes into cohesive blocks of functionality, each focused on a feature area, application business domain, workflow, or common collection of utilities.</p> <p>Modules can also add services to the application. Such services might be internally-developed such as the application logger. They can come from outside sources such as the Angular router and Http client.</p> <p>Modules can be loaded eagerly when the application starts. They can also be <em>lazy loaded</em> asynchronously by the router.</p> <p>An Angular module is a class decorated with <code>@NgModule</code> metadata. The metadata:</p> <ul> <li>declare which components, directives and pipes <em>belong together</em>.</li> <li>make some of those classes public so that other component templates can use them.</li> <li>hide other classes as implementation details.</li> <li>import other modules with the components, directives and pipes it needs.</li> <li>provide services at the application level that any application component can use.</li> </ul> <p>Every Angular app has at least one module class, the <em>root module</em>. We bootstrap that module to launch the application.</p> <p>The <em>root module</em> is all we need in a simple application with a few components. As the app grows, we refactor the <em>root module</em> into <strong>feature modules</strong> that represent collections of related functionality. We then import these modules into the <em>root module</em>.</p> <p>We'll see how later in the chapter. Let's start with the <em>root module</em>.</p> <h2 id=\"_appmodule_-the-application-root-module\">\n<em>AppModule</em> - the application root module</h2> <p>Every Angular app has a <strong>root module</strong> class. By convention it's a class called <code>AppModule</code> in a file named <code>app.module.ts</code>.</p> <p>This <code>AppModule</code> is about as minimal as it gets:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (minimal)\">// app/app.module.ts (minimal)\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport\n       { AppComponent }  from './app.component';\n\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>The <code>@NgModule</code> decorator defines the metadata for the module. We'll take an intuitive approach to understanding the metadata and fill in details as we go.</p> <p>This metadata imports a single helper module, <code>BrowserModule</code>, the module every browser app must import.</p> <p><code>BrowserModule</code> registers critical application service providers. It also includes common directives like <code>NgIf</code> and <code>NgFor</code> which become immediately visible and usable in any of this modules component templates. </p> <p>The <code>declarations</code> list identifies the application's only component, the <em>root component</em>, the top of this app's rather bare component tree.</p> <p>The example <code>AppComponent</code> simply displays a data-bound title:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (minimal)\">// app/app.component.ts (minimal)\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&lt;h1&gt;{{title}}&lt;/h1&gt;',\n})\nexport class AppComponent {\n  title = 'Minimal NgModule';\n}\n</pre>\n<p>Lastly, the <code>@NgModule.bootstrap</code> property identifies this <code>AppComponent</code> as the <em>bootstrap component</em>. When Angular launches the app, it places the HTML rendering of <code>AppComponent</code> in the DOM, inside the <code>&lt;my-app&gt;</code> element tags of the <code>index.html</code></p> <h2 id=\"bootstrap\">Bootstrapping in <em>main.ts</em>\n</h2> <p>We launch the application by bootstrapping the <code>AppModule</code> in the <code>main.ts</code> file.</p> <p>Angular offers a variety of bootstrapping options, targeting multiple platforms. In this chapter we consider two options, both targeting the browser.</p> <h3 id=\"dynamic-bootstrapping-with-the-just-in-time-jit-compiler\">Dynamic bootstrapping with the Just-In-Time (JIT) compiler</h3> <p>In the first, <em>dynamic</em> option, the <a href=\"#q-angular-compiler\" title=\"About the Angular Compiler\">Angular compiler</a> compiles the application in the browser and then launches the app.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts (dynamic)\">// app/main.ts (dynamic)\n\n// The browser platform with a compiler\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\n// The app module\nimport { AppModule } from './app.module';\n\n// Compile and launch the module\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<p>The samples in this chapter demonstrate the dynamic bootstrapping approach. </p> <p><live-example plnkr=\"minimal.0\">Try the live example.</live-example></p> <h3 id=\"static-bootstrapping-with-the-ahead-of-time-aot-compiler\">Static bootstrapping with the Ahead-Of-Time (AOT) compiler</h3> <p>Consider the static alternative which can produce a much smaller application that launches faster, especially on mobile devices and high latency networks.</p> <p>In the <em>static</em> option, the Angular compiler runs ahead of time as part of the build process, producing a collection of class factories in their own files. Among them is the <code>AppModuleNgFactory</code>.</p> <p>The syntax for bootstrapping the pre-compiled <code>AppModuleNgFactory</code> is similar to the dynamic version that bootstraps the <code>AppModule</code> class.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts (static)\">// app/main.ts (static)\n\n// The browser platform without a compiler\nimport { platformBrowser } from '@angular/platform-browser';\n\n// The app module factory produced by the static offline compiler\nimport { AppModuleNgFactory } from './app.module.ngfactory';\n\n// Launch with the app module factory.\nplatformBrowser().bootstrapModuleFactory(AppModuleNgFactory);\n</pre>\n<p>Because the entire application was pre-compiled, we don't ship the <em>Angular Compiler</em> to the browser and we don't compile in the browser.</p> <p>The application code downloaded to the browser is much smaller than the dynamic equivalent and it is ready to execute immediately. The performance boost can be significant.</p> <p>Both the JIT and AOT compilers generate an <code>AppModuleNgFactory</code> class from the same <code>AppModule</code> source code. The JIT compiler creates that factory class on the fly, in memory, in the browser. The AOT compiler outputs the factory to a physical file that we're importing here in the static version of <code>main.ts</code>.</p> <p>In general, the <code>AppModule</code> should neither know nor care how it is bootstrapped.</p> <p>Although the <code>AppModule</code> evolves as the app grows, the bootstrap code in <code>main.ts</code> doesn't change. This is the last time we'll look at <code>main.ts</code>.</p> \n<h2 id=\"declarations\">Declare directives and components</h2> <p>The app evolves. The first addition is a <code>HighlightDirective</code>, an <a href=\"attribute-directives\">attribute directive</a> that sets the background color of the attached element.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/highlight.directive.ts\">// app/highlight.directive.ts\n\nimport { Directive, ElementRef, Renderer } from '@angular/core';\n\n@Directive({ selector: '[highlight]' })\n/** Highlight the attached element in gold */\nexport class HighlightDirective {\n  constructor(renderer: Renderer, el: ElementRef) {\n    renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'gold');\n    console.log(\n      `* AppRoot highlight called for ${el.nativeElement.tagName}`);\n  }\n}\n</pre>\n<p>We update the <code>AppComponent</code> template to attach the directive to the title:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: '&lt;h1 highlight&gt;{{title}}&lt;/h1&gt;'\n</pre>\n<p>If we ran the app now, Angular would report an error in the console because it doesn't recognize the <code>highlight</code> binding. </p> <p>We must declare the directive in <code>AppModule</code>. Import the <code>HighlightDirective</code> class and add it to the module's <code>declarations</code> like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">declarations: [\n  AppComponent,\n  HighlightDirective,\n],\n</pre>\n<h3 id=\"add-a-component\">Add a component</h3> <p>We decide to refactor the title into its own <code>TitleComponent</code>. The component's template binds to the component's <code>title</code> and <code>subtitle</code> properties like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/title.component.html\">&lt;!-- app/title.component.html --&gt;\n\n&lt;h1 highlight&gt;{{title}} {{subtitle}}&lt;/h1&gt;\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/title.component.ts\">// app/title.component.ts\n\nimport { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: 'app/title.component.html',\n})\nexport class TitleComponent {\n  @Input() subtitle = '';\n  title = 'Angular Modules';\n}\n</pre>\n<p>We rewrite the <code>AppComponent</code> to display the new <code>TitleComponent</code> in the <code>&lt;app-title&gt;</code> element, using an input binding to set the <code>subtitle</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (v1)\">// app/app.component.ts (v1)\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: '&lt;app-title [subtitle]=\"subtitle\"&gt;&lt;/app-title&gt;'\n})\nexport class AppComponent {\n  subtitle = '(v1)';\n}\n</pre>\n<p>Angular won't recognize the <code>&lt;app-title&gt;</code> tag until we declare it in <code>AppModule</code>. Import the <code>TitleComponent</code> class and add it to the module's <code>declarations</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  declarations: [\n    AppComponent,\n    HighlightDirective,\n    TitleComponent,\n  ],\n</pre>\n<h2 id=\"providers\">Service Providers</h2> <p>Modules are a great way to provide services for all of the module's components.</p> <p>The <a href=\"dependency-injection\">Dependency Injection</a> chapter describes the Angular hierarchical dependency injection system and how to configure that system with <a href=\"dependency-injection#providers\">providers</a> at different levels of the application's component tree.</p> <p>A module can add providers to the application's root dependency injector, making those services available everywhere in the application.</p> <p>Many applications capture information about the currently logged-in user and make that information accessible through a user service. This sample application has a dummy implementation of such a <code>UserService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/user.service.ts\">// app/user.service.ts\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\n/** Dummy version of an authenticated user service */\nexport class UserService {\n  userName = 'Sam Spade';\n}\n</pre>\n<p>The sample application should display a welcome message to the logged in user just below the application title. Update the <code>TitleComponent</code> template to show the welcome message below the application title.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/title.component.html\">&lt;!-- app/title.component.html --&gt;\n\n&lt;h1 highlight&gt;{{title}} {{subtitle}}&lt;/h1&gt;\n&lt;p *ngIf=\"user\"&gt;\n  &lt;i&gt;Welcome, {{user}}&lt;/i&gt;\n&lt;p&gt;\n</pre>\n<p>Update the <code>TitleComponent</code> class with a constructor that injects the <code>UserService</code> and sets the component's <code>user</code> property from the service.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/title.component.ts\">// app/title.component.ts\n\nimport { Component, Input } from '@angular/core';\nimport { UserService } from './user.service';\n\n@Component({\n  selector: 'app-title',\n  templateUrl: 'app/title.component.html',\n})\nexport class TitleComponent {\n  @Input() subtitle = '';\n  title = 'Angular Modules';\n  user = '';\n\n  constructor(userService: UserService) {\n    this.user = userService.userName;\n  }\n}\n</pre>\n<p>We've <em>defined</em> and <em>used</em> the service. Now we <em>provide</em> it for all components to use by adding it to a <code>providers</code> property in the <code>AppModule</code> metadata:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (providers)\">// app/app.module.ts (providers)\n\nproviders: [ UserService ],\n</pre>\n<h2 id=\"imports\">Import supporting modules</h2> <p>The app shouldn't welcome a user if there is no user.</p> <p>Notice in the revised <code>TitleComponent</code> that an <code>*ngIf</code> directive guards the message. There is no message if there is no user.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/title.component.html (ngIf)\">&lt;!-- app/title.component.html (ngIf) --&gt;\n\n&lt;p *ngIf=\"user\"&gt;\n  &lt;i&gt;Welcome, {{user}}&lt;/i&gt;\n&lt;p&gt;\n</pre>\n<p>Although <code>AppModule</code> doesn't declare <code>NgIf</code>, the application still compiles and runs. How can that be? The Angular compiler should either ignore or complain about unrecognized HTML.</p> <p>Angular <em>does</em> recognize <code>NgIf</code> because we imported it earlier. The initial version of <code>AppModule</code> imports <code>BrowserModule</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (imports)\">// app/app.module.ts (imports)\n\nimports: [ BrowserModule ],\n</pre>\n<p>Importing <code>BrowserModule</code> made all of its public components, directives and pipes visible to the component templates in <code>AppModule</code>. They are ready to use without further ado.</p> <div class=\"l-sub-section\">\n<p>More accurately, <code>NgIf</code> is declared in <code>CommonModule</code> from <code>@angular/common</code>.</p> <p><code>CommonModule</code> contributes many of the common directives that applications need including <code>ngIf</code> and <code>ngFor</code>.</p> <p><code>BrowserModule</code> imports <code>CommonModule</code> and <em>re-exports</em> it. We'll cover re-exporting a module <a href=\"#q-re-export\">later</a> in the chapter. The net effect is that an importer of <code>BrowserModule</code> gets <code>CommonModule</code> directives automatically.</p> </div>\n<p>Many familiar Angular directives do not belong to<code>CommonModule</code>. For example, <code>NgModel</code> and <code>RouterLink</code> belong to Angular's <code>FormsModule</code> and <code>RouterModule</code> respectively. We must <em>import</em> those modules before we can use their directives.</p> <p>To illustrate this point, we extend the sample app with <code>ContactComponent</code>, a form component that imports form support from the Angular <code>FormsModule</code>.</p> <h3 id=\"add-the-_contactcomponent_\">Add the <em>ContactComponent</em>\n</h3> <p><a href=\"forms\">Angular Forms</a> are a great way to manage user data entry.</p> <p>The <code>ContactComponent</code> presents a \"contact editor\", implemented with <em>Angular Forms</em> in the <a href=\"forms\"><em>template-driven form</em></a> style.</p> <div class=\"l-sub-section\">\n<h4 id=\"angular-form-styles\">Angular Form Styles</h4> <p>We write Angular form components in either the <a href=\"forms\"><em>template-driven form</em></a> style or the <a href=\"../cookbook/dynamic-form\"><em>reactive form</em></a> style.</p> <p>This sample is about to import the <code>FormsModule</code> from <code>@angular/forms</code> because the <code>ContactComponent</code> is written in the <em>template-driven</em> style. Modules with components written in the <em>reactive</em> style, should import the <code>ReactiveFormsModule</code> instead.</p> </div>\n<p>The <code>ContactComponent</code> selector matches an element named <code>&lt;app-contact&gt;</code>. Add an element with that name to the <code>AppComponent</code> template just below the <code>&lt;app-title&gt;</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template)\">// app/app.component.ts (template)\n\ntemplate: `\n  &lt;app-title [subtitle]=\"subtitle\"&gt;&lt;/app-title&gt;\n  &lt;app-contact&gt;&lt;/app-contact&gt;\n`\n</pre>\n<p>The <code>ContactComponent</code> has a lot going on. Form components are often complex anyway and this one has its own <code>ContactService</code>, its own <a href=\"#pipes.html#custom-pipes\">custom pipe</a> called <code>Awesome</code>, and an alternative version of the <code>HighlightDirective</code>.</p> <p>To make it manageable, we place all contact-related material in an <code>app/contact</code> folder and break the component into three constituent HTML, TypeScript, and css files:</p> <pre language=\"html\" name=\"app/contact/contact.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- app/contact/contact.component.html --&gt;\n\n&lt;h2&gt;Contact of {{userName}}&lt;/h2&gt;\n&lt;div *ngIf=\"msg\" class=\"msg\"&gt;{{msg}}&lt;/div&gt;\n\n&lt;form *ngIf=\"contacts\" (ngSubmit)=\"onSubmit()\" #contactForm=\"ngForm\"&gt;\n  &lt;h3 highlight&gt;{{ contact.name | awesome }}&lt;/h3&gt;\n  &lt;div class=\"form-group\"&gt;\n    &lt;label for=\"name\"&gt;Name&lt;/label&gt;\n    &lt;input type=\"text\" class=\"form-control\" required\n      [(ngModel)]=\"contact.name\"\n        name=\"name\"  #name=\"ngModel\" &gt;\n    &lt;div [hidden]=\"name.valid\" class=\"alert alert-danger\"&gt;\n      Name is required\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;br&gt;\n  &lt;button type=\"submit\" class=\"btn btn-default\" [disabled]=\"!contactForm.form.valid\"&gt;Save&lt;/button&gt;\n  &lt;button type=\"button\" class=\"btn\" (click)=\"next()\" [disabled]=\"!contactForm.form.valid\"&gt;Next Contact&lt;/button&gt;\n  &lt;button type=\"button\" class=\"btn\" (click)=\"newContact()\"&gt;New Contact&lt;/button&gt;\n&lt;/form&gt;\n</pre>\n<pre language=\"ts\" name=\"app/contact/contact.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.component.ts\n\nimport { Component, OnInit }      from '@angular/core';\n\nimport { Contact, ContactService } from './contact.service';\nimport { UserService }    from '../shared/user.service';\n\n@Component({\n  selector: 'app-contact',\n  templateUrl: 'app/contact/contact.component.html',\n  styleUrls: ['app/contact/contact.component.css']\n})\nexport class ContactComponent implements OnInit {\n  contact:  Contact;\n  contacts: Contact[];\n\n  msg = 'Loading contacts ...';\n  userName = '';\n\n  constructor(private contactService: ContactService, userService: UserService) {\n    this.userName = userService.userName;\n  }\n\n  ngOnInit() {\n    this.contactService.getContacts().then(contacts =&gt; {\n      this.msg = '';\n      this.contacts = contacts;\n      this.contact = contacts[0];\n    });\n  }\n\n  next() {\n    let ix = 1 + this.contacts.indexOf(this.contact);\n    if (ix &gt;= this.contacts.length) { ix = 0; }\n    this.contact = this.contacts[ix];\n  }\n\n  onSubmit() {\n    // TODO: do something like save it\n    this.displayMessage('Saved ' + this.contact.name);\n  }\n\n  newContact() {\n    this.displayMessage('New contact');\n    this.contact = {id: 42, name: ''};\n    this.contacts.push(this.contact);\n  }\n\n  /** Display a message briefly, then remove it. */\n  displayMessage(msg: string) {\n    this.msg = msg;\n    setTimeout(() =&gt; this.msg = '', 1500);\n  }\n}\n</pre>\n<pre language=\"css\" name=\"app/contact/contact.component.css\" format=\"linenums\" data-language=\"css\">/* app/contact/contact.component.css */\n\n.ng-valid[required] {\n  border-left: 5px solid #42A948; /* green */\n}\n\n.ng-invalid {\n  border-left: 5px solid #a94442; /* red */\n}\n\n.alert {\n  padding: 15px;\n  margin: 8px 0;\n  border: 1px solid transparent;\n  border-radius: 4px;\n}\n.alert-danger {\n  color: #a94442;\n  background-color: #f2dede;\n  border-color: #ebccd1;\n}\n\n.msg {\n  color: blue;\n  background-color: whitesmoke;\n  border: 1px solid transparent;\n  border-radius: 4px;\n  margin-bottom: 20px;\n}\n</pre>\n<pre language=\"ts\" name=\"app/contact/contact.service.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.service.ts\n\nimport { Injectable } from '@angular/core';\n\nexport class Contact {\n  constructor(public id: number, public name: string) { }\n}\n\nconst CONTACTS: Contact[] = [\n  new Contact(21, 'Sam Spade'),\n  new Contact(22, 'Nick Danger'),\n  new Contact(23, 'Nancy Drew')\n];\n\nconst FETCH_LATENCY = 500;\n\n@Injectable()\nexport class ContactService {\n\n  getContacts() {\n    return new Promise&lt;Contact[]&gt;(resolve =&gt; {\n      setTimeout(() =&gt; { resolve(CONTACTS); }, FETCH_LATENCY);\n    });\n  }\n\n  getContact(id: number | string) {\n    return this.getContacts()\n      .then(heroes =&gt; heroes.find(hero =&gt; hero.id === +id));\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app/contact/awesome.pipe.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/awesome.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'awesome' })\n/** Precede the input string with the word \"Awesome \" */\nexport class AwesomePipe implements PipeTransform {\n  transform(phrase: string) {\n    return phrase ? 'Awesome ' + phrase : '';\n  }\n}\n</pre>\n<pre language=\"ts\n  \" name=\"app/contact/highlight.directive.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/highlight.directive.ts\n\nimport { Directive, ElementRef, Renderer } from '@angular/core';\n\n@Directive({ selector: '[highlight], input' })\n/** Highlight the attached element or an InputElement in blue */\nexport class HighlightDirective {\n  constructor(renderer: Renderer, el: ElementRef) {\n    renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'powderblue');\n    console.log(\n      `* Contact highlight called for ${el.nativeElement.tagName}`);\n  }\n}\n</pre>\n<p>Focus on the component template. Notice the two-way data binding <code>[(ngModel)]</code> in the middle of the template. <code>ngModel</code> is the selector for the <code>NgModel</code> directive.</p> <p>Although <code>NgModel</code> is an Angular directive, the <em>Angular Compiler</em> won't recognize it because (a) <code>AppModule</code> doesn't declare it and (b) it wasn't imported via <code>BrowserModule</code>.</p> <p>Less obviously, even if Angular somehow recognized <code>ngModel</code>, this <code>ContactComponent</code> would not behave like an Angular form because form features such as validation are not yet available.</p> <h3 id=\"import-the-formsmodule\">Import the FormsModule</h3> <p>Add the <code>FormsModule</code> to the <code>AppModule</code> metadata's <code>imports</code> list.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">imports: [ BrowserModule, FormsModule ],\n</pre>\n<p>Now <code>[(ngModel)]</code> binding works and the user input is validated by Angular Forms.</p> <div class=\"alert is-critical\">\n<p><strong>Do not</strong> add <code>NgModel</code> — or the <code>FORMS_DIRECTIVES</code> — to the <code>AppModule</code> metadata's declarations!</p> <p>These directives belong to the <code>FormsModule</code>. Components, directives and pipes belong to one module — and <em>one module only</em>.</p> <p><strong>Never re-declare classes that belong to another module.</strong></p> </div>\n<h3 id=\"declare-pipe\">Declare the contact component, directive and pipe</h3> <p>The application fails to compile until we declare the contact component, directive and pipe. Update the <code>declarations</code> in the <code>AppModule</code> accordingly:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (declarations)\">// app/app.module.ts (declarations)\n\n  declarations: [\n    AppComponent,\n    HighlightDirective,\n    TitleComponent,\n\n    AwesomePipe,\n    ContactComponent,\n    ContactHighlightDirective\n  ],\n</pre>\n<div class=\"l-sub-section\" id=\"import-name-conflict\">\n<p>There are two directives with the same name, both called <code>HighlightDirective</code>.</p> <p>We work around it by creating an alias for the second, contact version using the <code>as</code> JavaScript import keyword:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import {\n  HighlightDirective as ContactHighlightDirective\n} from './contact/highlight.directive';\n</pre>\n<p>This solves the immediate problem of referencing both directive <em>types</em> in the same file but leaves another problem unresoved as we discuss <a href=\"#resolve-conflicts\">below</a>.</p> </div>\n<h3 id=\"provide-the-_contactservice_\">Provide the <em>ContactService</em>\n</h3> <p>The <code>ContactComponent</code> displays contacts retrieved by the <code>ContactService</code> which Angular injects into its constructor. </p> <p>We have to provide that service somewhere. The <code>ContactComponent</code> <em>could</em> provide it. But then it would be scoped to this component <em>only</em>. We want to share this service with other contact-related components that we will surely add later.</p> <p>In this app we chose to add <code>ContactService</code> to the <code>AppModule</code> metadata's <code>providers</code> list:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (providers)\">// app/app.module.ts (providers)\n\nproviders: [ ContactService, UserService ],\n</pre>\n<p>Now <code>ContactService</code> (like <code>UserService</code>) can be injected into any component in the application.</p> <div class=\"l-sub-section\" id=\"application-scoped-providers\">\n<h4 id=\"application-scoped-providers\">Application-scoped Providers</h4> <p> The <code>ContactService</code> provider is <em>application</em>-scoped because Angular registers a module's <code>providers</code> with the application's <strong>root injector</strong>.</p> <p> Architecturally, the <code>ContactService</code> belongs to the Contact business domain. Classes in <em>other</em> domains don't need the <code>ContactService</code> and shouldn't inject it.</p> <p> We might expect Angular to offer a <em>module</em>-scoping mechanism to enforce this design. It doesn't. Angular module instances, unlike components, do not have their own injectors so they can't have their own provider scopes.</p> <p> This omission is intentional. Angular modules are designed primarily to extend an application, to enrich the entire app with the module's capabilities.</p> <p> Service scoping is rarely a problem in practice. Non-contact components can't inject the <code>ContactService</code> by accident. To inject <code>ContactService</code>, you must first import its <em>type</em>. Only Contact components should import the <code>ContactService</code> <em>type</em>.</p> <p> <a href=\"#q-component-scoped-providers\">An FAQ below</a> pursues this issue and its mitigations in greater detail.</p> </div>\n<h3 id=\"run-the-app\">Run the app</h3> <p>Everything is now in place to run the application with its contact editor.</p> <p>The app file structure looks like this:</p> <div class=\"filetree\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">highlight.directive.ts</div>\n<div class=\"file\">main.ts</div>\n<div class=\"file\">title.component.(html|ts)</div>\n<div class=\"file\">user.service.ts</div>\n<div class=\"file\">contact</div>\n<div class=\"children\">\n<div class=\"file\">awesome.pipe.ts</div>\n<div class=\"file\">contact.component.(css|html|ts)</div>\n<div class=\"file\">contact.service.ts</div>\n<div class=\"file\">highlight.directive.ts</div>\n</div>\n</div>\n</div>\n<p><live-example plnkr=\"contact.1b\">Try the live example.</live-example></p> <h2 id=\"resolve-conflicts\">Resolve directive conflicts</h2> <p>We ran into trouble <a href=\"#import-name-conflict\">above</a> when we declared the contact's <code>HighlightDirective</code> because we already had a <code>HighlightDirective</code> class at the application level.</p> <p>That both directives have the same name smells of trouble.</p> <p>A look at their selectors reveals that they both highlight the attached element with a different color.</p> <pre language=\"ts\" name=\"app/highlight.directive.ts\" format=\"linenums\" data-language=\"typescript\">// app/highlight.directive.ts\n\nimport { Directive, ElementRef, Renderer } from '@angular/core';\n\n@Directive({ selector: '[highlight]' })\n/** Highlight the attached element in gold */\nexport class HighlightDirective {\n  constructor(renderer: Renderer, el: ElementRef) {\n    renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'gold');\n    console.log(\n      `* AppRoot highlight called for ${el.nativeElement.tagName}`);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"app/contact/highlight.directive.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/highlight.directive.ts\n\nimport { Directive, ElementRef, Renderer } from '@angular/core';\n\n@Directive({ selector: '[highlight], input' })\n/** Highlight the attached element or an InputElement in blue */\nexport class HighlightDirective {\n  constructor(renderer: Renderer, el: ElementRef) {\n    renderer.setElementStyle(el.nativeElement, 'backgroundColor', 'powderblue');\n    console.log(\n      `* Contact highlight called for ${el.nativeElement.tagName}`);\n  }\n}\n</pre>\n<p>Will Angular use only one of them? No. Both directives are declared in this module so <em>both directives are active</em>.</p> <p>When the two directives compete to color the same element, the directive declared later wins because its DOM changes overwrite the first. In this case, the contact's <code>HighlightDirective</code> colors the application title text blue when it should stay gold.</p> <div class=\"l-sub-section\">\n<p>The real problem is that there are <em>two different classes</em> trying to do the same thing.</p> <p>It's OK to import the <em>same</em> directive class multiple times. Angular removes duplicate classes and only registers one of them.</p> <p>But these are actually two different classes, defined in different files, that happen to have the same name.</p> <p>They're not duplicates from Angular's perspective. Angular keeps both directives and they take turns modifying the same HTML element.</p> </div>\n<p>At least the app still compiles. If we define two different component classes with the same selector specifying the same element tag, the compiler reports an error. It can't insert two components in the same DOM location.</p> <p>What a mess! </p> <p>We can eliminate component and directive conflicts by creating feature modules that insulate the declarations in one module from the declarations in another.</p> <h2 id=\"feature-modules\">Feature Modules</h2> <p>This application isn't big yet. But it's already suffering structural problems.</p> <ul> <li>\n<p>The root <code>AppModule</code> grows larger with each new application class and shows no signs of stopping.</p> </li> <li>\n<p>We have conflicting directives. The <code>HighlightDirective</code> in contact is re-coloring the work done by the <code>HighlightDirective</code> declared in <code>AppModule</code>. And it's coloring the application title text when it should only color the <code>ContactComponent</code>.</p> </li> <li>\n<p>A change to a contact class could break an application part in some unrelated section of the app. The app is brittle and hard to test. </p> </li> <li>\n<p>The app lacks clear boundaries between contact functionality and other application features. That lack of clarity makes it harder to assign development responsibilities to different teams.</p> </li> </ul> <p>We mitigate these problems with <em>feature modules</em>.</p> <h3 id=\"_feature-module_\"><em>Feature Module</em></h3> <p>A <em>feature module</em> is a class adorned by the <code>@NgModule</code> decorator and its metadata, just like a root module. Feature module metadata have the same properties as the metadata for a root module.</p> <p>The root module and the feature module share the same execution context. They share the same dependency injector which means the services in one module are available to all.</p> <p>There are two significant technical differences:</p> <ol> <li>\n<p>We <em>boot</em> the root module to <em>launch</em> the app; we <em>import</em> a feature module to <em>extend</em> the app.</p> </li> <li>\n<p>A feature module can expose or hide its implementation from other modules.</p> </li> </ol> <p>Otherwise, a feature module is distinguished primarily by its intent.</p> <p>A feature module delivers a cohesive set of functionality. focused on an application business domain, a user workflow, a facility (forms, http, routing), or a collection of related utilities.</p> <p>While we can do everything within the root module, feature modules help us partition the app into areas of specific interest and purpose.</p> <p>A feature module collaborates with the root module and with other modules through the services it provides and the components, directives, and pipes that it chooses to share.</p> <p>In the next section, we carve the contact functionality out of the root module and into a dedicated feature module.</p> <h3 id=\"make-_contact_-a-feature-module\">Make <em>Contact</em> a feature module</h3> <p>It's easy to refactor the contact material into a contact feature module.</p> <ol> <li>Create the <code>ContactModule</code> in the <code>app/contact</code> folder.</li> <li>Move the contact material from <code>AppModule</code> to <code>ContactModule</code>.</li> <li>Replace the imported <code>BrowserModule</code> with <code>CommonModule</code>.</li> <li>Import the <code>ContactModule</code> into the <code>AppModule</code>.</li> </ol> <p><code>AppModule</code> is the only <em>existing</em> class that changes. But we do add one new file.</p> <h3 id=\"add-the-_contactmodule_\">Add the <em>ContactModule</em>\n</h3> <p>Here's the new <code>ContactModule</code></p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/contact/contact.module.ts\">// app/contact/contact.module.ts\n\nimport { NgModule }           from '@angular/core';\nimport { CommonModule }       from '@angular/common';\nimport { FormsModule }        from '@angular/forms';\n\nimport { AwesomePipe }        from './awesome.pipe';\n\nimport\n       { ContactComponent }   from './contact.component';\nimport { ContactService }     from './contact.service';\nimport { HighlightDirective } from './highlight.directive';\n\n@NgModule({\n  imports:      [ CommonModule, FormsModule ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n  exports:      [ ContactComponent ],\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<p>We copy from <code>AppModule</code> the contact-related import statements and the <code>@NgModule</code> properties that concern the contact and paste them in <code>ContactModule</code>.</p> <p>We <em>import</em> the <code>FormsModule</code> because the contact component needs it. </p> <div class=\"alert is-important\">\n<p>Modules do not inherit access to the components, directives or pipes that are declared in other modules. The fact that <code>AppModule</code> imports <code>FormsModule</code> is irrelevant. The <code>ContactModule</code> must import <code>FormsModule</code> explicitly so that <code>ContactComponent</code> can data bind with <code>ngModel</code>.</p> </div>\n<p>We also swapped <code>CommonModule</code> for <code>BrowserModule</code> for reasons we explain <a href=\"#root-vs-feature-module\">soon</a>.</p> <p>We <em>declare</em> the contact component, directive, and pipe in the module <code>declarations</code>.</p> <p>We <em>export</em> the <code>ContactComponent</code> so other modules that import the <code>ContactModule</code> can include it in their component templates.</p> <p>All other declared contact classes are private by default. The <code>AwesomePipe</code> and <code>HighlightDirective</code> are hidden from the rest of the application. The <code>HighlightDirective</code> can no longer color the <code>AppComponent</code> title text.</p> <h3 id=\"refactor-the-_appmodule_\">Refactor the <em>AppModule</em>\n</h3> <p>Return to the <code>AppModule</code> and remove everything specific to the contact feature set.</p> <p>Delete the contact import statements. Delete the contact declarations and contact providers. Remove the <code>FormsModule</code> from the <code>imports</code> list (<code>AppComponent</code> doesn't need it). Leave only the classes required at the application root level.</p> <p>Then import the <code>ContactModule</code> so the app can continue to display the exported <code>ContactComponent</code>.</p> <p>Here's the refactored version of the <code>AppModule</code> side-by-side with the previous version.</p> <pre language=\"ts\" name=\"app/app.module.ts (v2)\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts (v2)\n\nimport { NgModule }           from '@angular/core';\nimport { BrowserModule }      from '@angular/platform-browser';\n\n/* App Root */\nimport\n       { AppComponent }       from './app.component';\nimport { HighlightDirective } from './highlight.directive';\nimport { TitleComponent }     from './title.component';\nimport { UserService }        from './user.service';\n\n/* Contact Imports */\nimport\n       { ContactModule }      from './contact/contact.module';\n\n@NgModule({\n  imports:      [ BrowserModule, ContactModule ],\n  declarations: [ AppComponent, HighlightDirective, TitleComponent ],\n  providers:    [ UserService ],\n  bootstrap:    [ AppComponent ],\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"app/app.module.ts (v1)\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts (v1)\n\nimport { NgModule }           from '@angular/core';\nimport { BrowserModule }      from '@angular/platform-browser';\n\n/* App Root */\nimport\n       { AppComponent }       from './app.component';\nimport { HighlightDirective } from './highlight.directive';\nimport { TitleComponent }     from './title.component';\nimport { UserService }        from './user.service';\n\n/* Contact Imports */\nimport\n       { ContactComponent }   from './contact/contact.component';\nimport { ContactService }     from './contact/contact.service';\nimport { AwesomePipe }        from './contact/awesome.pipe';\n\nimport {\n  HighlightDirective as ContactHighlightDirective\n} from './contact/highlight.directive';\n\nimport { FormsModule }        from '@angular/forms';\n\n@NgModule({\n  imports: [ BrowserModule,  FormsModule ],\n  declarations: [\n    AppComponent, HighlightDirective, TitleComponent,\n    AwesomePipe, ContactComponent, ContactHighlightDirective\n  ],\n  providers: [ ContactService, UserService ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<h3 id=\"improvements\">Improvements</h3> <p>There's a lot to like in the revised <code>AppModule</code></p> <ul> <li>It does not change as the <em>Contact</em> domain grows.</li> <li>It only changes when we add new modules.</li> <li>It's simpler:<ul> <li>Fewer import statements</li> <li>No <code>FormsModule</code> import</li> <li>No contact-specific declarations</li> <li>No <code>ContactService</code> provider</li> <li>No <code>HighlightDirective</code> conflict</li> </ul> </li> </ul> <p><live-example plnkr=\"contact.2\">Try the live example of version 2.</live-example></p> <h2 id=\"lazy-load\">Lazy loading modules with the Router</h2> <p>The Heroic Staffing Agency sample app has evolved. It has two more modules, one for managing the heroes-on-staff and another for matching crises to the heroes. Both modules are in the early stages of development. Their specifics aren't important to the story and we won't discuss every line of code.</p> <div class=\"l-sub-section\">\n<p>Examine and download the complete source for this version from the <live-example plnkr=\"pre-shared.3\">live example.</live-example></p> </div>\n<p>Some facets of the current application merit discussion.</p> <ul> <li>The app has three feature modules: Contact, Hero, and Crisis.</li> <li>The Angular router helps users navigate among these modules.</li> <li>The <code>ContactComponent</code> is the default destination when the app starts.</li> <li>The <code>ContactModule</code> continues to be \"eagerly\" loaded when the application starts.</li> <li>\n<code>HeroModule</code> and the <code>CrisisModule</code> are lazy loaded.</li> </ul> <p> Let's start at the top with the new <code id=\"app-component-template\">AppComponent</code> template: a title, three links, and a <code>&lt;router-outlet&gt;</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (v3 - Template)\">// app/app.component.ts (v3 - Template)\n\ntemplate: `\n  &lt;app-title [subtitle]=\"subtitle\"&gt;&lt;/app-title&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"contact\" routerLinkActive=\"active\"&gt;Contact&lt;/a&gt;\n    &lt;a routerLink=\"crisis\"  routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a routerLink=\"heroes\"  routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<p>The <code>&lt;app-contact&gt;</code> element is gone; we're routing to the <em>Contact</em> page now.</p> <p>The <code>AppModule</code> has changed modestly:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.module.ts (v3)\">// app/app.module.ts (v3)\n\nimport { NgModule }           from '@angular/core';\nimport { BrowserModule }      from '@angular/platform-browser';\n\n/* App Root */\nimport { AppComponent }       from './app.component.3';\nimport { HighlightDirective } from './highlight.directive';\nimport { TitleComponent }     from './title.component';\nimport { UserService }        from './user.service';\n\n/* Feature Modules */\nimport { ContactModule }      from './contact/contact.module.3';\n\n\nimport { routing }            from './app.routing.3';\n\n@NgModule({\n  imports:      [\n    BrowserModule,\n    ContactModule,\n    routing\n  ],\n\n  declarations: [ AppComponent, HighlightDirective, TitleComponent ],\n  providers:    [ UserService ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<div class=\"l-sub-section\">\n<p>Some file names bear a <code>.3</code> extension indicating a difference with prior or future versions. We'll explain differences that matter in due course.</p> </div>\n<p>The module still imports <code>ContactModule</code> so that its routes and components are mounted when the app starts. </p> <p>The module does <em>not</em> import <code>HeroModule</code> or <code>CrisisModule</code>. They'll be fetched and mounted asynchronously when the user navigates to one of their routes.</p> <p>The significant change from version 2 is the addition of a <strong><em>routing</em></strong> object to the <code>imports</code>. The routing object, which provides a configured <code>Router</code> service, is defined in the <code>app.routing.ts</code> file.</p> <h3 id=\"app-routing\">App routing</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts\">// app/app.routing.ts\n\nimport { Routes,\n         RouterModule } from '@angular/router';\n\nexport const routes: Routes = [\n  { path: '', redirectTo: 'contact', pathMatch: 'full'},\n  { path: 'crisis', loadChildren: 'app/crisis/crisis.module' },\n  { path: 'heroes', loadChildren: 'app/hero/hero.module' }\n];\n\nexport const routing = RouterModule.forRoot(routes);\n</pre>\n<p>The router is the subject of <a href=\"router\">its own chapter</a> so we'll skip lightly over the details and concentrate on the intersection of Angular modules and routing.</p> <p>This file defines three routes. </p> <p>The first redirects the empty URL (e.g., <code>http://host.com/</code>) to another route whose path is <code>contact</code> (e.g., <code>http://host.com/contact</code>).</p> <p>The <code>contact</code> route isn't defined here. It's defined in the <em>Contact</em> feature's <em>own</em> routing file, <code>contact.routing.ts</code>. It's standard practice for feature modules with routing components to define their own routes. We'll get to that file in a moment.</p> <p>The remaining two routes use lazy loading syntax to tell the router where to find the modules:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ path: 'crisis', loadChildren: 'app/crisis/crisis.module' },\n{ path: 'heroes', loadChildren: 'app/hero/hero.module' }\n</pre>\n<div class=\"l-sub-section\">\n<p>Note that the module location is a <em>string</em>, not a <em>type</em>. </p> <p>To reference the <em>type</em> we'd have to import the module, which loads the module loads immediately, defeating our intent to load the module later. A string, on the other hand, is just a string. It has no side-effects.</p> </div>\n<p>The module location strings in this app identify module <em>files</em>, not module <em>classes</em>. That works because each module class is marked as the default export in its file.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"/app/crisis/crisis.module.ts (export default)\">// /app/crisis/crisis.module.ts (export default)\n\nexport default class CrisisModule {}\n</pre>\n<p><em>Remember to use</em> <code>export default</code><em>, not just</em> <code>export</code>.</p> <h3 id=\"routermodule-forroot\">RouterModule.forRoot</h3> <p>The last line calls the <code>forRoot</code> static class method of the <code>RouterModule</code>, passing in the configuration.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export const routing = RouterModule.forRoot(routes);\n</pre>\n<p>The returned <code>routing</code> object is a <code>ModuleWithProviders</code> containing both the <code>RouterModule</code> directives and the Dependency Injection providers that produce a configured <code>Router</code>. </p> <p>This <code>routing</code> object is intended for the app <em>root</em> module <em>only</em>.</p> <div class=\"alert is-critical\">\n<p>Never call <code>RouterModule.forRoot</code> in a feature module.</p> </div>\n<p>Back in the root <code>AppModule</code>, we add this <code>routing</code> object to its <code>imports</code> list, and the app is ready to navigate.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (imports)\">// app/app.module.ts (imports)\n\nimports:      [\n  BrowserModule,\n  ContactModule,\n  routing\n],\n</pre>\n<h3 id=\"routing-to-a-feature-module\">Routing to a feature module</h3> <p>The <code>app/contact</code> folder holds a new file, <code>contact.routing.ts</code>. It defines the <code>contact</code> route we mentioned a bit earlier and also creates a <code>routing</code> object like so:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/contact/contact.routing.ts (routing)\">// app/contact/contact.routing.ts (routing)\n\nexport const routing = RouterModule.forChild([\n  { path: 'contact', component: ContactComponent}\n]);\n</pre>\n<p>This time we pass the route list to the <code>forChild</code> method of the <code>RouterModule</code>. It produces a different kind of object intended for feature modules.</p> <div class=\"alert is-important\">\n<p>Always call <code>RouterModule.forChild</code> in a feature module.</p> </div>\n<div class=\"alert is-helpful\">\n<p><strong><em>forRoot</em></strong> and <strong><em>forChild</em></strong> are conventional names for methods that deliver different <code>import</code> values to root and feature modules. Angular doesn't recognize them but Angular developers do. <a href=\"#shared-module-for-root\">Follow the convention</a> when you write similar modules for your application.</p> </div>\n<p><code>ContactModule</code> has changed in two small but important details</p> <pre language=\"ts\" name=\"app/contact/contact.module.3.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.module.3.ts\n\n@NgModule({\n  imports:      [ CommonModule, FormsModule, routing ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<pre language=\"ts\" name=\"app/contact/contact.module.2.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.module.2.ts\n\n@NgModule({\n  imports:      [ CommonModule, FormsModule ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n  exports:      [ ContactComponent ],\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<ol> <li>It imports the <code>routing</code> object from <code>contact.routing.ts</code>\n</li> <li>It no longer exports <code>ContactComponent</code>\n</li> </ol> <p>Now that we navigate to <code>ContactComponent</code> with the router there's no reason to make it public. Nor does it need a selector. No template will ever again reference this <code>ContactComponent</code>. It's gone from the <a href=\"#app-component-template\"><em>AppComponent</em> template</a>.</p> <h3 id=\"hero-module\">Lazy loaded routing to a module</h3> <p>The lazy loaded <code>HeroModule</code> and <code>CrisisModule</code> follow the same principles as any feature module. They don't look different from the eagerly loaded <code>ContactModule</code>.</p> <p>The <code>HeroModule</code> is a bit more complex than the <code>CrisisModule</code> which makes it a more interesting and useful example. Here's its file structure:</p> <div class=\"filetree\">\n<div class=\"file\">hero</div>\n<div class=\"children\">\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero-list.component.ts</div>\n<div class=\"file\">hero.component.ts</div>\n<div class=\"file\">hero.module.ts</div>\n<div class=\"file\">hero.routing.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">highlight.directive.ts</div>\n</div>\n</div>\n<p>This is the child routing scenario familiar to readers of <a href=\"router#child-routing-component\">Router</a> chapter. The <code>HeroComponent</code> is the feature's top component and routing host. Its template has a <code>&lt;router-outlet&gt;</code> that displays either a list of heroes (<code>HeroList</code>) or an editor of a selected hero (<code>HeroDetail</code>). Both components delegate to the <code>HeroService</code> to fetch and save data.</p> <p>There's yet <em>another</em> <code>HighlightDirective</code> that colors elements in yet a different shade. We should <a href=\"#shared-module\" title=\"Shared modules\">do something</a> about the repetition and inconsistencies. We endure for now.</p> <p>The <code>HeroModule</code> is a feature module like any other.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero/hero.module.ts (class)\">// app/hero/hero.module.ts (class)\n\n@NgModule({\n  imports: [ CommonModule, FormsModule, routing ],\n  declarations: [\n    HeroComponent, HeroDetailComponent, HeroListComponent,\n    HighlightDirective\n  ]\n})\nexport default class HeroModule { }\n</pre>\n<p>It imports the <code>FormsModule</code> because the <code>HeroDetailComponent</code> template binds with <code>[(ngModel)]</code>. It imports a <code>routing</code> object from <code>hero.routing.ts</code> just as <code>ContractModule</code> and <code>CrisisModule</code> do.</p> <p>The <code>CrisisModule</code> is much the same. There's nothing more to say that's new. </p> <p><live-example plnkr=\"pre-shared.3\">Try the live example.</live-example></p> <h2 id=\"shared-module\">Shared modules</h2> <p>The app is shaping up. One thing we don't like is carrying three different versions of the <code>HighlightDirective</code>. And there's a bunch of other stuff cluttering the app folder level that could be tucked away.</p> <p>Let's add a <code>SharedModule</code> to hold the common components, directives, pipes and services and share them with the modules that need them.</p> <ul> <li>create an <code>app/shared</code> folder</li> <li>move the <code>AwesomePipe</code> and <code>HighlightDirective</code> from <code>app/contact</code> to <code>app/shared</code>.</li> <li>move the <code>UserService</code> and <code>TitleComponent</code> from <code>app/</code> to <code>app/shared</code>\n</li> <li>delete the <code>HighlightDirective</code> classes from <code>app/</code> and <code>app/hero</code>\n</li> <li>create a <code>SharedModule</code> class to own the shared material</li> <li>updata all other modules to import <code>SharedModule</code>\n</li> </ul> <p>Most of this is familiar blocking and tackling. </p> <div class=\"l-sub-section\">\n<p>Examine and download the complete source for this version from the <live-example>live example.</live-example></p> </div>\n<p>Let's focus on the effects on three modules: the new <code>SharedModule</code>, the <code>ContactModule</code>, and the root <code>AppModule</code>. </p> <h3 id=\"_sharedmodule_\"><em>SharedModule</em></h3> <p>Here it is</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app/shared/shared.module.ts\">// app/app/shared/shared.module.ts\n\nimport { NgModule,\n         ModuleWithProviders } from '@angular/core';\nimport { CommonModule }        from '@angular/common';\nimport { FormsModule }         from '@angular/forms';\n\nimport { AwesomePipe }         from './awesome.pipe';\nimport { HighlightDirective }  from './highlight.directive';\nimport { TitleComponent }      from './title.component';\nimport { UserService }         from './user.service';\n\n@NgModule({\n  imports:      [ CommonModule ],\n  declarations: [ AwesomePipe, HighlightDirective, TitleComponent ],\n  exports:      [ AwesomePipe, HighlightDirective, TitleComponent,\n                  CommonModule, FormsModule ]\n})\nexport class SharedModule {\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SharedModule,\n      providers: [ UserService ]\n    };\n  }\n}\n</pre>\n<p>Some highlights</p> <ul> <li>It imports the <code>CommonModule</code> because its component needs common directives.</li> <li>It declares and exports the utility pipe, directive, and component classes as expected.</li> <li>It re-exports the <code>CommonModule</code>\n</li> <li>It re-exports the <code>FormsModule</code> which it didn't even import.</li> <li>There's a strange, static class method call <code>forRoot</code> that we should talk about.</li> </ul> <p>But first a few words about module <code>exports</code>.</p> <p>We noticed that all of our feature modules import <code>CommonModule</code>. We can reduce this repetition when they import the <code>Shared</code> module by sending <code>CommonModule</code> along for the ride.</p> <p>Many of our application components two-way bind with <code>[(ngModel)]</code>, a directive in the <code>FormsModule</code>, We export that too so that other modules don't have to import it themselves</p> <p>The <code>SharedModule</code> didn't import <code>FormsModule</code> because its components don't need it. Angular lets us <a href=\"#q-re-export\">re-export a module</a> even if we don't import it.</p>  <h3 id=\"adding-services-with-_forroot_\">Adding services with <em>forRoot</em>\n</h3> <p>Recall that the <code>UserService</code> contains information about the logged-in user. The app should only have one instance of the <code>UserService</code>. It's an application-wide singleton.</p> <p>We'll ask the <code>SharedModule</code> to register the singleton <code>UserService</code> when the application starts.</p> <div class=\"l-sub-section\">\n<p>This scenario is somewhat contrived. The root <code>AppModule</code> can register the <code>UserService</code> itself, as it does now, even after moving the <code>UserService</code> file to the <code>app/shared</code> folder. That's much simpler than the technique we're about to demonstrate.</p> <p>That won't always be the case. Many real world modules have internally complex, multi-service configurations. They hide the gory details behind a simple, unified API that's easy for developers to use.</p> <p>The <code>RouterModule</code> is a good example of this strategy. We pass some routes into <code>RouterModule.forRoot</code> and it registers the configured router services in the application root injector for us.</p> <p>The <code>SharedModule</code> registers the <code>UserService</code> with a <code>forRoot</code> method so that we learn how to do it this way when we need to do it.</p> </div>\n<p>The obvious approach is to add the <code>UserService</code> to the <code>providers</code> list of the <code>SharedModule</code>.</p> <p><em>That is a mistake, especially in an application with lazy loaded routes!</em></p> <p>In this app, every module imports the <code>SharedModule</code> in order to benefit from its public declaration classes. That means every module tries to provide the <code>UserService</code>, including the lazy loaded modules.</p> <div class=\"alert is-critical\">\n<p>Do <strong>not</strong> specify <code>providers</code> for modules that might be imported by a lazy loaded module.</p> </div>\n<div class=\"l-sub-section\">\n<p>See <a href=\"#q-why-it-is-bad\">\"Why is it bad if <em>SharedModule</em> provides the <em>UserService</em> to every app module?\"</a></p> </div>\n<p>The <code>SharedModule</code> should only provide the <code>UserService</code> when imported by the root <code>AppModule</code>. The <code>SharedModule.forRoot</code> method helps us meet this challenge.</p> <p>Look again at the <code>SharedModule</code>. It does not have <code>providers</code>. When a feature module imports the <code>SharedModule</code>, it benefits from the exported classes alone.</p> <p>When we add the <code>SharedModule</code> to the <code>imports</code> of the <code>AppModule</code>, we call <code>forRoot</code>. In doing so, the <code>AppModule</code> gains the exported classes <em>and</em> the <code>SharedModule</code> delivers the singleton <code>UserService</code> provider at the same time.</p> <p>Look again at the static <code>forRoot</code> method to see how that works</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app/shared/shared.module.ts (forRoot)\">// app/app/shared/shared.module.ts (forRoot)\n\nstatic forRoot(): ModuleWithProviders {\n  return {\n    ngModule: SharedModule,\n    providers: [ UserService ]\n  };\n}\n</pre>\n<p>The <code>forRoot</code> method returns an object of type <code>ModuleWithProviders</code>, consisting of the pure, provider-less <code>SharedModule</code> <em>plus</em> the <code>UserService</code> provider.</p> <p>The <code>@NgModule</code> knows what to do with this specialized import. It's that simple.</p> <h3 id=\"a-trimmer-_appmodule_\">A trimmer <em>AppModule</em>\n</h3> <p>Here is the updated <code>AppModule</code> paired with version 3 for comparison:</p> <pre language=\"ts\" name=\"app/app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\n\n/* App Root */\nimport { AppComponent }   from './app.component';\n\n\n\n\n/* Feature Modules */\nimport { ContactModule }  from './contact/contact.module';\nimport { SharedModule }   from './shared/shared.module';\n\nimport { routing }        from './app.routing';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    ContactModule,\n    routing,\n    SharedModule.forRoot()\n  ],\n  declarations: [ AppComponent ],\n\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"app/app.module.ts (v3)\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts (v3)\n\nimport { NgModule }           from '@angular/core';\nimport { BrowserModule }      from '@angular/platform-browser';\n\n/* App Root */\nimport { AppComponent }       from './app.component.3';\nimport { HighlightDirective } from './highlight.directive';\nimport { TitleComponent }     from './title.component';\nimport { UserService }        from './user.service';\n\n/* Feature Modules */\nimport { ContactModule }      from './contact/contact.module.3';\n\n\nimport { routing }            from './app.routing.3';\n\n@NgModule({\n  imports:      [\n    BrowserModule,\n    ContactModule,\n    routing\n  ],\n\n  declarations: [ AppComponent, HighlightDirective, TitleComponent ],\n  providers:    [ UserService ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>Notice that</p> <ul> <li>It's smaller and cleaner because many <code>app/root</code> classes have moved to the <code>SharedModule</code>.</li> <li>We're calling <code>SharedModule.forRoot()</code>in the <code>imports</code> list as <a href=\"#shared-module-for-root\">discussed above</a>.</li> <li>\n<code>AppModule</code> no longer provides the <code>UserService</code>; thats the job of the <code>SharedModule</code>.</li> </ul> <h3 id=\"a-trimmer-_contactmodule_\">A trimmer <em>ContactModule</em>\n</h3> <p>Here is the new <code>ContactModule</code> paired with version 3:</p> <pre language=\"ts\" name=\"app/contact/contact.module.ts\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.module.ts\n\nimport { NgModule }           from '@angular/core';\nimport { SharedModule }       from '../shared/shared.module';\n\nimport { ContactComponent }   from './contact.component';\nimport { ContactService }     from './contact.service';\nimport { routing }            from './contact.routing';\n\n@NgModule({\n  imports:      [ SharedModule, routing ],\n  declarations: [ ContactComponent ],\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<pre language=\"ts\" name=\"app/contact/contact.module.ts (v3)\" format=\"linenums\" data-language=\"typescript\">// app/contact/contact.module.ts (v3)\n\nimport { NgModule }           from '@angular/core';\nimport { CommonModule }       from '@angular/common';\nimport { FormsModule }        from '@angular/forms';\n\nimport { AwesomePipe }        from './awesome.pipe';\n\nimport { ContactComponent }   from './contact.component.3';\nimport { ContactService }     from './contact.service';\nimport { HighlightDirective } from './highlight.directive';\n\nimport { routing }            from './contact.routing.3';\n\n@NgModule({\n  imports:      [ CommonModule, FormsModule, routing ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<p>Notice that</p> <ul> <li>The new version is leaner and cleaner.</li> <li>The <code>AwesomePipe</code> and <code>HighlightDirective</code> are gone.</li> <li>The imports include <code>SharedModule</code> instead of <code>CommonModule</code> and <code>FormsModule</code>\n</li> </ul> \n<h2 id=\"-ngmodule-properties\">\n<em>NgModule</em> properties</h2> <p>The following chart summarizes the <code>NgModule</code> metadata properties.</p> <table>\n<tr>\n<th>Property</th>\n<th>Description</th>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>declarations</code></td>\n<td>\n<p>A list of the <strong>component</strong>, <strong>directive</strong> and <strong>pipe</strong> classes that <em>belong to this module</em>.</p> <p>These declared classes are visible within the module but invisible to components in a different module unless (a) they are <em>exported</em> from this module and (b) that other module <em>imports</em> this one.</p> <p>Components, directives and pipes must belong to <em>exactly</em> one module. The compiler emits an error if we try to declare the same class in more than one module.</p> <p><strong>Do not re-declare a class imported from another module.</strong></p> </td>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>providers</code></td>\n<td>\n<p>A list of dependency injection providers.</p> <p>Angular registers these providers with the root injector of the module's execution context. That's the application's root injector for all modules loaded when the application starts.</p> <p>Angular can inject one of these provider services into any component in the application. If this module provides the <code>HeroService</code>, or any module loaded at launch provides the <code>HeroService</code>, Angular can inject the same <code>HeroService</code> intance into any app component.</p> <p>A lazy loaded module has its own sub-root injector which typically is a direct child of the application root injector.</p> <p>Lazy loaded services are scoped to the lazy module's injector. If a lazy loaded module also provides the <code>HeroService</code>, any component created within that module's context (e.g., by router navigation) gets the local instance of the service, not the instance in the root application injector.</p> <p>Components in external modules continue to receive the instance created for the application root. </p> </td>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>imports</code></td>\n<td>\n<p>A list of supporting modules.</p> <p>Specifically, the list of modules whose exported components, directives or pipes are referenced by the component templates declared in this module.</p> <p>A component template can <a href=\"#q-template-reference\">reference</a> another component, directive or pipe on two conditions: either the referenced class is declared in this module or the class was imported from another module. </p> <p>A component can use the <code>NgIf</code> and <code>NgFor</code> directives only because its parent module imported the Angular <code>CommonModule</code> (perhaps indirectly by importing <code>BrowserModule</code>).</p> <p>We can import many standard directives with the <code>CommonModule</code>. But some familiar directives belong to other modules. A component template can bind with <code>[(ngModel)]</code> only after importing the Angular <code>FormsModule</code>.</p> </td>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>exports</code></td>\n<td>\n<p>A list of declarations — <strong>component</strong>, <strong>directive</strong>, and <strong>pipe</strong> classes — that an importing module can use.</p> <p>Exported declarations are the module's <em>public API</em>. A component in another module can <a href=\"#q-template-reference\">reference</a> <em>this</em> module's <code>HeroComponent</code> if (a) it imports this module and (b) this module exports <code>HeroComponent</code>.</p> <p>Declarations are private by default. If this module does <em>not</em> export <code>HeroComponent</code>, no other module can see it.</p> <p>Importing a module does <em>not</em> automatically re-export the imported module's exports. Module 'B' can't use <code>ngIf</code> just because it imported module <code>A</code> which imported <code>CommonModule</code>. Module 'B' must import <code>CommonModule</code> itself.</p> <p>A module can list another module among its <code>exports</code> in which case all of that module's public components, directives, and pipes are exported.</p> <p><a href=\"#q-re-export\">Re-export</a> makes module transitivity explicit. If Module 'A' re-exports <code>CommonModule</code> and Module 'B' imports Module 'A', Module 'B' components can use <code>ngIf</code> even though 'B' itself didn't import <code>CommonModule</code>.</p> </td>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>bootstrap</code></td>\n<td>\n<p>A list of components that can be <a href=\"#bootstrap\">bootstrapped</a>.</p> <p>Usually there is only one component in this list, the <em>root component</em> of the application.</p> <p>Angular can launch with multiple bootstrap components, each with its own location in the host web page.</p> <p>A bootstrap component is automatically an <code>entryComponent</code> </p> </td>\n</tr>\n<tr>\n<td style=\"vertical-align: top\"><code>entryComponents</code></td>\n<td>\n<p>A list of components that are <em>not</em> <a href=\"#q-template-reference\">referenced</a> in a reachable component template.</p> <p>Most developers will never set this property. Here's why.</p> <p>The <a href=\"#q-angular-compiler\"><em>Angular Compiler</em></a> must know about every component actually used in the application. The compiler can discover most components by walking the tree of references from one component template to another.</p> <p>But there's always at least one component that is not referenced in any template: the root component, <code>AppComponent</code>, that we bootstrap to launch the app. That's why it's called an <em>entry component</em>.</p> <p>Routed components are also <em>entry components</em> because they aren't referenced in a template either. The router creates them and drops them into the DOM near a <code>&lt;router-outlet&gt;</code>.</p> <p>While the bootstrapped and routed components are <em>entry components</em>, we usally don't have to add them to a module's <code>entryComponents</code> list.</p> <p>Angular automatically adds components in the module's <code>bootstrap</code> list to the <code>entryComponents</code> list. The <code>RouterModule</code> adds routed components to that list.</p> <p>That leaves only two sources of undiscoverable components.</p> <ol> <li>Components bootstrapped using one of the imperative techniques.</li> <li>Components dynamically loaded into the DOM by some means other than the router.</li> </ol> <p>Both are advanced techniques that few developers will ever employ. If you are one of those few, you'll have to add these components to the <code>entryComponents</code> list yourself, either programmatically or by hand.</p> </td>\n</tr>\n</table>\n<h2 id=\"faq-frequently-asked-questions\">FAQ: Frequently Asked Questions</h2> <p>Declarations</p> <ul> <li><a href=\"#q-what-to-declare\">What classes should I add to <em>declarations</em>?</a></li> <li><a href=\"#q-what-not-to-declare\">What classes should I <em>not</em> add to <em>declarations</em>?</a></li> <li><a href=\"#q-why-multiple-mentions\">Why list the same component in multiple module properties?</a></li> <li><a href=\"q-why-cant-bind-to\">What does \"<em>Can't bind to 'x' since it isn't a known property of 'y'</em>\" mean?</a></li> </ul> <p>Imports and Exports</p> <ul> <li><a href=\"#q-what-to-import\">What should I import?</a></li> <li><a href=\"#q-reimport\">What if I import the same module twice?</a></li> <li><a href=\"#q-what-to-export\">What should I export?</a></li> <li><a href=\"#q-what-not-to-export\">What should I <em>not</em> export?</a></li> <li><a href=\"#q-re-export\">Can I re-export imported classes and modules?</a></li> </ul> <p>Service Providers </p> <ul> <li><a href=\"#q-module-provider-visibility\">Why is a service provided in a feature module visible everywhere?</a></li> <li>\n<a href=\"q-lazy-loaded-module-provider-visibility\">Why is a service provided in a <em>lazy loaded</em> module visible only to that module?</a> </li> <li><a href=\"#q-module-provider-duplicates\">What if two modules provide the <em>same</em> service?</a></li> <li><a href=\"#q-component-scoped-providers\">How do I restrict service scope to a module?</a></li> <li><a href=\"#q-root-component-or-module\">Should I add providers to the root <em>AppModule</em> or the root <em>AppComponent</em>?</a></li> <li><a href=\"#q-why-it-is-bad\">Why is it bad if <em>SharedModule</em> provides the <em>UserService</em> to every app module?</a></li> </ul> <p>Entry Components</p> <ul> <li><a href=\"#q-entry-component-defined\">What is an <em>entry component</em>?</a></li> <li><a href=\"#q-bootstrap_vs_entry_component\">What is the difference between a <em>bootstrap</em> component and an <em>entry component</em>?</a></li> <li><a href=\"#q-when-entry-components\">When do I add components to <em>entryComponents</em>?</a></li> <li><a href=\"#q-why-entry-components\">Why does Angular need <em>entryComponents</em>?</a></li> </ul> <p>Miscellaneous</p> <ul> <li><a href=\"#q-template-reference\">What is a \"template reference\"?</a></li> <li>\n<a href=\"#q-template-reference\">How does Angular find components, directives, and pipes in a template?</a> </li> <li>\n<a href=\"#q-angular-compiler\">What is the Angular Compiler?</a> </li> <li><a href=\"#q-ng-vs-js-modules\">What's the difference between Angular and JavaScript Modules?</a></li> </ul> \n<h3 id=\"q-what-to-declare\">What classes should I add to <em>declarations</em>?</h3> <p>Add components, directives, and pipes to a <code>declarations</code> list.</p> <p>These kinds of classes must be declared in <em>exactly one</em> module of the application. Declare them in <em>this</em> module if they <em>belong</em> to this module.</p> \n<h3 id=\"q-what-not-to-declare\">What classes should I <em>not</em> add to <em>declarations</em>?</h3> <p>Do <em>not</em> declare </p> <ul> <li>\n<p>a class that is already declared in another module, whether an app module, @angular module, or 3rd party module</p> </li> <li>\n<p>an array of directives imported from another module. For example, do not declare FORMS_DIRECTIVES from <code>@angular/forms</code>.</p> </li> <li>\n<p>service classes</p> </li> <li>\n<p>non-Angular classes and objects such as strings, numbers, functions, entity models, configurations, business logic, and helper classes.</p> </li> </ul> \n<h3 id=\"q-why-multiple-mentions\">Why list the same component in multiple module properties?</h3> <p>For example, we often see <code>AppComponent</code> listed in both <code>declarations</code> and <code>bootstrap</code>. We might see <code>HeroComponent</code> listed in <code>declarations</code>, <code>exports</code>, and <code>entryComponents</code>.</p> <p>That <em>feels</em> redundant but these properties have different functions and we can't infer that membership in one list implies membership in another list.</p> <ul> <li>\n<code>AppComponent</code> could be declared in this module but not bootstrapped.</li> <li>\n<code>AppComponent</code> could be bootstrapped in this module but declared in a different feature module.</li> <li>\n<code>HeroComponent</code> could be imported from another app module (so we can't declare it) and re-exported by this module.</li> <li>\n<code>HeroComponent</code> could be exported for inclusion in an external component's template and also dynamically loaded in a pop-up dialog.</li> </ul> \n<h3 id=\"q-why-cant-bind-to\">What does \"<em>Can't bind to 'x' since it isn't a known property of 'y'</em>\" mean?</h3> <p>This error usually means either that you neglected to declare the directive \"x\" or you haven't imported the module to which \"x\" belongs.</p> <p>For example, if \"x\" is <code>ngModel</code>, you probably haven't imported the <code>FormsModule</code> from <code>@angular/forms</code>.</p> <p>Perhaps you declared \"x\" in an application sub-module but forgot to export it? The \"x\" class won't be visible to other modules until you add it to the <code>exports</code> list.</p> \n<h3 id=\"q-what-to-import\">What should I import?</h3> <p>The <strong>root application module</strong> (<code>AppModule</code>) of almost every browser application should import <code>BrowserModule</code> from <code>@angular/core</code>.</p> <p><code>BrowserModule</code> provides services that are essential to launch and run a browser app.</p> <p>It also re-exports <code>CommonModule</code> from <code>@angular/common</code> which means that <code>AppModule</code> module components have access to that common directives almost every app needs such as <code>NgIf</code> and <code>NgFor</code>.</p> <p>Application <em>feature modules</em> and <em>lazy loaded modules</em> should import <code>CommonModule</code> instead.</p> <p><strong><em>They should not import <code>BrowserModule</code></em></strong>.</p> <p>A feature module that imports <code>BrowserModule</code> could redefine the platform providers that were originally registered in a previously imported module.</p> <p>The risk is greater with lazy loaded modules because they have their own injector. Importing <code>BrowserModule</code> could block access to the corresponding service instances in the root injector. </p> <p>Importing <code>CommonModule</code> also frees feature modules for use on <em>any</em> target platform, not just browsers, a fact of some interest to authors of cross-platform libraries.</p> \n<h3 id=\"q-reimport\">What if I import the same module twice?</h3> <p>That's not a problem. When three modules all import Module 'A', Angular evaluates Module 'A' once, the first time it encounters it, and does not do so again. </p> <p>That's true at whatever level <code>A</code> appears in a hierarchy of imported modules. When Module 'B' imports Module 'A', Module 'C' imports 'B', and Module 'D' imports <code>[C, B, A]</code>, then 'D' triggers the evaluation of 'C' which triggers the evaluation of 'B' which evaluates 'A'. When Angular gets to the 'B' and 'A' in 'D', they're already cached and ready to go.</p> <p>Angular does not like modules with circular references so don't let Module 'A' import Module 'B' which imports Module 'A'.</p> \n<h3 id=\"q-what-to-export\">What should I export?</h3> <p>Only export \"public classes\", the classes that external components should be allowed to incorporate in their templates.</p> <p>You <em>can</em> export any declarable class — components, directives, and pipes — whether declared in this module or in an imported module.</p> <p>You <em>can</em> re-export entire imported modules which effectively re-exports all of their exported classes. A module can even export a module that it doesn't import as long as it doesn't need anything from that module. </p> \n<h3 id=\"q-what-not-to-export\">What should I <em>not</em> export?</h3> <p>Do <em>not</em> export</p> <ul> <li>\n<p>The components, directives, and pipes that should be used privately, strictly within templates of the components declared in this module.</p> </li> <li>\n<p>Non-declarable objects such as services, functions, configurations, entity models, etc.</p> </li> <li>\n<p>Components that are only loaded dynamically by the router or by bootstrapping. Such <a href=\"#q-entry-component-defined\">entry components</a> can never be selected in another component's template. There's no harm in exporting them but no benefit either. </p> </li> </ul> \n<h3 id=\"q-reexport\">Can I re-export classes and modules?</h3> <p>Absolutely!</p> <p>Modules are a great way to selectively aggregate classes from other modules and re-export them in a consolidated, convenience module.</p> <p>A module can re-export entire modules which effectively re-exports all of their exported classes. Angular's own <code>BrowserModule</code> exports a couple of modules like this:</p> <pre>exports: [CommonModule, ApplicationModule]\n</pre>\n<p>A module can export a combination of its own declarations, selected imported classes, and imported modules.</p> \n<h3 id=\"q-module-provider-visibility\">Why is a service provided in a feature module visible everywhere?</h3> <p>Providers listed in the <code>@NgModule.providers</code> of a bootstrapped module have <strong>application scope</strong>. Adding a service provider to <code>@NgModule.providers</code> effectively publishes the service to the entire application.</p> <p>When we import a module, Angular adds the module's service providers (the contents of its <code>providers</code> list) to the application <em>root injector</em>.</p> <p>This makes the provider visible to every class in the application that knows the provider's lookup token.</p> <p>This is by design. Extensibility through module imports is a primary goal of the Angular module system. Merging module providers into the application injector makes it easy for a module library to enrich the entire application with new services. By adding the <code>HttpModule</code> once, every application component can make http requests. </p> <p>However, this can feel like an unwelcome surprise if you are expecting the module's services to be visible only to the components declared by that feature module. If the <code>HeroModule</code> provides the <code>HeroService</code> and the root <code>AppModule</code> imports <code>HeroModule</code>, any class that knows the <code>HeroService</code> <em>type</em> can inject that service, not just the classes declared in the <code>HeroModule</code>.</p> \n<h3 id=\"q-lazy-loaded-module-provider-visibility\">Why is a service provided in a lazy loaded module visible only to that module?</h3> <p>Unlike providers of the modules loaded at launch, providers of lazy loaded modules are <em>module-scoped</em>.</p> <p>When the Angular router lazy-loads a module, it creates a new execution context. That context has its own injector which is a direct child of the application injector.</p> <p>The router adds the lazy module's own providers and the providers of its imported modules to this child injector.</p> <p>These providers are insulated from changes to application providers with the same lookup token. When the router creates a component within the lazy loaded context, Angular prefers service instances created from these providers to the service instances of the application root injector.</p> \n<h3 id=\"q-module-provider-duplicates\">What if two modules provide the <em>same</em> service?</h3> <p>When two imported modules, loaded at the same time, list a provider with the same token, the second module's provider \"wins\". That's because both providers are added to the same injector.</p> <p>When Angular looks to inject a service for that token, it creates and delivers the instance created by the second provider.</p> <p><em>Every</em> class that injects this service gets the instance created by the second provider. Even classes declared within the first module get the instance created by the second provider. <em>This can be an unwelcome surprise</em>.</p> <p>If Module A provides a service for token 'X' and imports a module B that also provides a service for token 'X', then Module A's service definition \"wins\".</p> <p>The service provided by the root <code>AppModule</code> takes precedence over services provided by imported modules. The <code>AppModule</code> always wins.</p> \n<h3 id=\"q-component-scoped-providers\">How do I restrict service scope to a module?</h3> <p>When a module is loaded at application launch, its <code>@NgModule.providers</code> have <strong><em>application-wide scope</em></strong>. They are visible throughout the application as discussed <a href=\"#application-scoped-providers\">above</a>.</p> <p>Imported providers are easily replaced by providers from another imported module. Such replacement may be by design. It could be unintentional and have adverse consequences.</p> <div class=\"alert is-important\">\n<p>As a general rule, import modules with providers <em>exactly once</em>, preferably in the application's <em>root module</em>. That's also usually the best place to configure, wrap, and override them.</p> </div>\n<p>Suppose a module requires a customized <code>HttpBackend</code> that adds a special header for all Http requests. If another module elsewhere in the application also customizes <code>HttpBackend</code> or merely imports the <code>HttpModule</code>, it could override this module's <code>HttpBackend</code> provider, losing the special header. The server will reject http requests from this module.</p> <div class=\"alert is-important\">\n<p>Avoid this problem by importing the <code>HttpModule</code> only in the <code>AppModule</code>, the application <em>root module</em>.</p> </div>\n<p>If you must guard against this kind of \"provider corruption\", <em>don't rely on a launch-time module's <code>providers</code>.</em></p> <p>Load the module lazily if you can. Angular gives a <a href=\"#q-lazy-loaded-module-provider-visibility\">lazy-loaded module</a> its own child injector. The module's providers are visible only within the component tree created with this injector.</p> <p>If you must load the module eagerly, when the application starts, <strong><em>provide the service in a component instead.</em></strong></p> <p>Continuing with the same example, suppose the components of a module truly require a private, custom <code>HttpBackend</code>.</p> <p>Create a \"top component\" that acts as the root for all of the module's components. Add the custom <code>HttpBackend</code> provider to the top component's <code>providers</code> list rather than the module's <code>providers</code>. Recall that Angular creates a child injector for each component instance and populates the injector with the component's own providers.</p> <p>When a child of this component <em>asks</em> for the <code>HttpBackend</code> service, Angular provides the local <code>HttpBackend</code> service, not the version provided in the application root injector. Child components will make proper http requests no matter what other modules do to <code>HttpBackend</code>.</p> <p>Be sure to create module components as children of this module's top component.</p> <p>You can embed the child components in the top component's template. Alternatively, make the top component a routing host by giving it a <code>&lt;router-outlet&gt;</code>. Define child routes and let the router load module components into that outlet.</p> \n<h3 id=\"q-root-component-or-module\">Should I add providers to the root <em>AppModule</em> or the root <em>AppComponent</em>?</h3> <p>Most apps launch with an initial set of service providers. Should we register those providers on the root <code>AppModule</code> (<code>@NgModel.providers</code>) or the root <code>AppComponent</code> (<code>@Component.providers</code>)?</p> <p><strong><em>List such providers in the root</em> <code>AppModule</code> <em>unless you have a compelling reason to do otherwise</em></strong>.</p> <p>Angular registers all startup module providers with the application root injector. The services created from root injector providers are available to the entire application. They are <em>application-scoped</em>.</p> <p>Certain services (e.g., the <code>Router</code>) only work when registered in the application root injector.</p> <p>By contrast, Angular registers <code>AppComponent</code> providers with the <code>AppComponent</code>'s own injector. <code>AppComponent</code>services are available to that component and its component tree. They are <em>component-scoped</em>.</p> <p>The <code>AppComponent</code>'s injector is a <em>child</em> of the root injector, one down in the injector hierarchy. That is <em>almost</em> the entire application for apps that don't use the router. But \"almost\" isn't good enough for routed applications.</p> <p><code>AppComponent</code> services don't exist at the root level where routing operates. Lazy loaded modules can't reach them. In this sample applications, if we had registered <code>UserService</code> in the <code>AppComponent</code>, the <code>HeroComponent</code> couldn't inject it. The application would fail the moment a user navigated to \"Heroes\".</p> <p>We <em>can</em> register a service in <code>AppComponent</code> providers if the app doesn't use routing. We <em>should</em> register a service in <code>AppComponent</code> providers if the service must be hidden from components outside the <code>AppComponent</code> tree. </p> <p>These are special cases. When in doubt, register with the <code>AppModule</code>.</p> \n<h3 id=\"q-why-it-is-bad\">Why is it bad if <em>SharedModule</em> provides the <em>UserService</em> to every app module?</h3> <p>This question arose when we described the <a href=\"#shared-module-for-root\"><em>SharedModule.forRoot</em></a> method.</p> <p>Suppose we had listed the service in the module's <code>providers</code> (which we did not). Suppose every module imports this <code>SharedModule</code> (which they all do).</p> <p>When the app starts, Angular loads the <code>AppModule</code> and the <code>ContactModule</code>. Both instances of the imported <code>SharedModule</code> provide the <code>UserService</code>. Angular registers one of them in the root app injector. A component requests it and we have our app-wide singleton <code>UserService</code>. No problem. </p> <p>But the <code>HeroModule</code> is lazy loaded! When the router lazy loads the <code>HeroModule</code>, it creates a child injector and registers the <code>UserService</code> with that child injector. The child injector is <em>not</em> the root injector. When Angular injects the <code>UserService</code> into the <code>HeroComponent</code>, it creates and injects a new instance of the <code>UserService</code>. That's a disaster.</p> <div class=\"l-sub-section\">\n<p>Prove it for yourself. Run the <live-example>live example</live-example>. Modify the <code>SharedModule</code> so that it provides the <code>UserService</code>. Then toggle between the \"Contact\" and \"Heroes\" links a few times. The username goes bonkers as the Angular creates a new <code>UserService</code> instance each time.</p> </div>\n\n<h3 id=\"q-entry-component-defined\">What is an <em>entry component</em>?</h3> <p>Any component that Angular loads <em>imperatively</em> by type is an <em>entry component</em>,</p> <p>A component loaded <em>declaratively</em> via its selector is <em>not</em> an entry component.</p> <p>Most application components are loaded declaratively. Angular uses the component's selector to locate the element in the template. It then creates the HTML representation of the component and inserts it into the DOM at the selected element. These are not entry components.</p> <p>A few components are only loaded dynamically and are <em>never</em> referenced in a component template. </p> <p>The bootstrapped root <code>AppComponent</code> is an <em>entry component</em>. True, its selector matches an element tag in <code>index.html</code>. But <code>index.html</code> is not a component template and the <code>AppComponent</code> selector doesn't match an element in any component template.</p> <p>Angular loads <code>AppComponent</code> dynamically either because we listed it <em>by type</em> in <code>@NgModule.bootstrap</code> or because we boostrapped it imperatively with the module's <code>ngDoBootstrap</code> method.</p> <p>Components in route definitions are also <em>entry components</em>. A route definition refers to a component by its <em>type</em>. The router ignores a routed component's selector (if it even has one) and loads the component dynamically into a <code>RouterOutlet</code>. </p> <p>The compiler can't discover these <em>entry components</em> by looking for them in other component templates. We must tell it about them ... by adding them to the <code>entryComponents</code> list.</p> <p>Angular automatically adds two kinds of components to the module's <code>entryComponents</code>:</p> <ol> <li>the component in the <code>@NgModel.bootstrap</code> list</li> <li>components referenced in router configuration</li> </ol> <p>We don't have to mention these components explicitly although it does not harm to do so.</p> \n<h3 id=\"q-bootstrap_vs_entry_component\">What's the difference between a <em>bootstrap</em> component and an <em>entry component</em>?</h3> <p>A bootstrapped component <em>is</em> an <a href=\"#entry-component-defined\">entry component</a>. It's an entry component that Angular loads into the DOM during the bootstrap (application launch) process. Other entry components are loaded by dynamically by other means such as with the router.</p> <p>The <code>@NgModule.bootstrap</code> property tells the compiler <em>both</em> that this is an entry_component <em>and</em> that it should generate code to bootstrap the application with this component.</p> <p>There is no need to list a component in both the <code>bootstrap</code> and <code>entryComponent</code> lists although it is harmless to do so.</p> \n<h3 id=\"q-when-entry-components\">When do I add components to <em>entryComponents</em>?</h3> <p>Most application developers won't need to add components to the <code>_entryComponents_</code>.</p> <p>Angular adds certain components to <em>entry components</em> automatically. Components listed in <code>@NgModule.bootstrap</code> are added automatically. Components referenced in router configuration are added automatically. These two mechanisms account for almost all entry components.</p> <p>If your app happens to bootstrap or dynamically load a component <em>by type</em> in some other manner, you'll have to add it to <code>entryComponents</code> explicitly.</p> <p>Although it's harmless to add components to this list, it's best to add only the components that are truly <em>entry components</em>. Don't include components that <a href=\"#q-template-reference\">are referenced</a> in the templates of other components.</p> \n<h3 id=\"q-why-entry-components\">Why does Angular need <em>entryComponents</em>?</h3> <p><em>Entry components</em> are also declared. Why doesn't the Angular compiler generate code for every component in <code>@NgModule.declarations</code>? Then we wouldn't need entry components.</p> <p>The reason is <em>tree shaking</em>. For production apps we want to load the smallest, fastest code possible. The code should contain only the classes that we actually need. It should exclude a component that's never used, whether or not that component is declared.</p> <p>In fact, many libraries declare and export components we'll never use. The <em>tree shaker</em> will drop these components from the final code package if we don't reference them. </p> <p>If the <a href=\"#angular-compilar\">Angular compiler</a> generated code for every declared component, it would defeat the purpose of the tree shaker.</p> <p>Instead, the compiler adopts a recursive strategy that generates code only for the components we use.</p> <p>It starts with the entry components, then it generates code for the declared components it <a href=\"#q-template-reference\">finds</a> in an entry component's template, then for the declared components it discovers in the templates of previously compiled components, and so on. At the end of the process, it has generated code for every entry component and every component reachable from an entry component.</p> <p>If a component isn't an <em>entry component</em> or wasn't found in a template, the compiler omits it. </p> \n<h4 id=\"q-template-reference\">How does Angular find components, directives, and pipes in a template?<br>What is a <i><b>template reference</b></i>?</h4>\n<p>The <a href=\"#q-angular-compiler\">Angular compiler</a> looks inside component templates for other components, directives, and pipes. When it finds one, that's a \"template reference\".</p> <p>The Angular compiler finds a component or directive in a template when it can match the <strong>selector</strong> of that component or directive to some HTML in that template. </p> <p>The compiler finds a pipe if the pipe's <strong>name</strong> appears within the pipe syntax of the template HTML.</p> <p>Angular only matches selectors and pipe names for classes that are declared by this module or exported by a module that this module imports.</p> \n<h3 id=\"what-is-the-angular-compiler-\">What is the Angular Compiler?</h3> <p>The <em>Angular Compiler</em> converts the application code we write into highly performant JavaScript code. The <code>@NgModule</code> metadata play an important role in guiding the compilation process.</p> <p>The code we write is not immediately executable. Consider <strong>components</strong>. Components have templates that contain custom elements, attribute directives, Angular binding declarations, and some peculiar syntax that clearly isn't native HTML.</p> <p>The <em>Angular Compiler</em> reads the template markup, combines it with the corresponding component class code, and emits <em>component factories</em>.</p> <p>A component factory creates a pure, 100% JavaScript representation of the component that incorporates everything described in its <code>@Component</code> metadata: the HTML, the binding instructions, the attached styles ... everything.</p> <p>Because <strong>directives</strong> and <strong>pipes</strong> appear in component templates, the <em>Angular Compiler</em> incorporates them into compiled component code too.</p> <p><code>@NgModule</code> metadata tells the <em>Angular Compiler</em> what components to compile for this module and how to link this module with other modules.</p> \n<h3 id=\"q-ng-vs-js-modules\">What's the difference between Angular and JavaScript Modules?</h3> <p>Angular and JavaScript are two different yet complementary module systems.</p> <p>In modern JavaScript, <a href=\"http://exploringjs.com/es6/ch_modules.html\">every file is a <em>module</em></a>. Within each file we write an <code>export</code> statement to make parts of the module public:</p> <pre format=\".\">export class AppComponent { ... }\n</pre>\n<p>Then we <code>import</code> a part in another module:</p> <pre format=\".\">import { AppComponent }  from './app.component';\n</pre>\n<p>This kind of modularity is a feature of the <em>JavaScript language</em>.</p> <p>An <em>Angular Module</em> is a feature of <em>Angular</em> itself. It describes entire blocks of the application to the <a href=\"#q-angular-compiler\">Angular Compiler</a>.</p> <p>The <em>Angular Module</em> also has <code>imports</code> and <code>exports</code> and they serve a similar purpose. But it is has other capabilities that are specific to Angular. For example, it <em>declares</em> the components, directives, and pipes that belong to the module in a <code>declarations</code> list.</p> <p>Here's an <em>Angular Module</em> class with imports, exports, and declarations.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@NgModule({\n  imports:      [ CommonModule, FormsModule ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n  exports:      [ ContactComponent ],\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre>\n<p>Of course we use <em>JavaScript</em> modules to write <em>Angular</em> modules as seen in the complete <code>contact.module.ts</code> file:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/contact/contact.module.ts\">// app/contact/contact.module.ts\n\nimport { NgModule }           from '@angular/core';\nimport { CommonModule }       from '@angular/common';\nimport { FormsModule }        from '@angular/forms';\n\nimport { AwesomePipe }        from './awesome.pipe';\n\nimport\n       { ContactComponent }   from './contact.component';\nimport { ContactService }     from './contact.service';\nimport { HighlightDirective } from './highlight.directive';\n\n@NgModule({\n  imports:      [ CommonModule, FormsModule ],\n  declarations: [ ContactComponent, HighlightDirective, AwesomePipe ],\n  exports:      [ ContactComponent ],\n  providers:    [ ContactService ]\n})\nexport class ContactModule { }\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/ngmodule.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/ngmodule.html</a>\n  </p>\n</div>\n","guide/security":"<h1 class=\"hero-title text-display-1 \">Security</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Developing for content security in Angular applications</p></div>\n<p>Web application security has many aspects. This chapter describes Angular's built in protections against common web application vulnerabilities and attacks, such as Cross Site Scripting Attacks. It does not cover application level security, such as authentication (<em>Who is this user?</em>) or authorization (<em>What can this user do?</em>).</p> <p>The <a href=\"https://www.owasp.org/index.php/Category:OWASP_Guide_Project\">Open Web Application Security Project (OWASP)</a> has further information on the attacks and mitigations described below.</p> <h1 id=\"table-of-contents\">Table Of Contents</h1> <ul> <li><a href=\"#report-issues\">Reporting Vulnerabilities</a></li> <li><a href=\"#best-practices\">Best Practices</a></li> <li><a href=\"#xss\">Preventing Cross-Site Scripting (XSS)</a></li> <li><a href=\"#bypass-security-apis\">Trusting Safe Values</a></li> <li><a href=\"#http\">HTTP-level Vulnerabilities</a></li> <li><a href=\"#code-review\">Auditing Angular Applications</a></li> </ul> <p>Try the <live-example></live-example> of the code shown in this chapter.</p> <h2 id=\"report-issues\">Reporting Vulnerabilities</h2>\n<p>Email us at <a href=\"mailto:security@angular.io\">security@angular.io</a> to report vulnerabilities in Angular itself.</p> <p>For further details on how Google handles security issues please refer to <a href=\"https://www.google.com/about/appsecurity/\">Google's security philosophy</a>.</p> <h2 id=\"best-practices\">Best Practices</h2>\n<ul> <li>\n<p><strong>Keep current with the latest Angular library releases.</strong> We regularly update our Angular libraries and these updates may fix security defects discovered in previous version. Check the Angular <a href=\"https://github.com/angular/angular/blob/master/CHANGELOG.md\">change log</a> for security-related updates.</p> </li> <li>\n<p><strong>Don't modify your copy of Angular.</strong> Private, customized versions of Angular tend to fall behind the current version and may neglect important security fixes and enhancements. Instead, share your Angular improvements with the community and make a pull request.</p> </li> <li>\n<p><strong>Avoid Angular APIs marked in the documentation as “<a href=\"#bypass-security-apis\"><em>Security Risk</em></a>”.</strong></p> </li> </ul> <h2 id=\"xss\">Preventing Cross-Site Scripting (XSS)</h2>\n<p><a href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross-Site Scripting (XSS)</a> enables attackers to inject malicious code into web pages. Such code can then, for example, steal user's data (in particular their login data), or perform actions impersonating the user. This is one of the most common attacks on the web.</p> <p>To block XSS attacks, we must prevent malicious code from entering the DOM. For example, if an attacker can trick us into inserting a <code>&lt;script&gt;</code> tag in the DOM, they can run arbitrary code on our website. The attack is not limited to <code>&lt;script&gt;</code> tags - many elements and properties in the DOM allow code execution, for example <code>&lt;img onerror=\"...\"&gt;</code>, <code>&lt;a href=\"javascript:...\"&gt;</code>. If attacker controlled data enters the DOM, we have to expect security vulnerabilities.</p> <h3 id=\"angular-s-cross-site-scripting-security-model\">Angular’s Cross-site Scripting Security Model</h3> <p>To systematically block XSS bugs, Angular treats all values as untrusted by default. When a value is inserted into the DOM from a template, via property, attribute, style, or class binding, or via interpolation, Angular will sanitize and escape untrusted values.</p> <p><strong>Angular templates are the same as executable code</strong>: HTML, attributes, and binding expressions (but not the values bound!) in templates are trusted to be safe. That means applications must prevent potentially attacker controlled values from ever making it into the source code of a template. Never generate template source code by concatenating user input and templates! Using the <a href=\"#offline-template-compiler\">offline template compiler</a> is an effective way to prevent these vulnerabilities, also known as template injection.</p> <h3 id=\"sanitization-and-security-contexts\">Sanitization and security contexts</h3> <p>Sanitization inspects an untrusted value and turns it into a value that is safe to insert into the DOM. In many cases, values do not get changed by this at all. Sanitization depends on context: a value that is harmless in CSS is potentially dangerous in a URL.</p> <p>Angular defines four security contexts: HTML, style, URL, and resource URL.</p> <ul> <li>HTML is used when interpreting a value as HTML, e.g., when binding to <code>innerHtml</code>\n</li> <li>Style is used when binding CSS into the <code>style</code> property</li> <li>URL is used for URL properties such as <code>&lt;a href&gt;</code>\n</li> <li>Resource URLs are URLs that will be loaded and executed as code, e.g., in <code>&lt;script src&gt;</code>\n</li> </ul> <p>Angular sanitizes untrusted values for the first three items; sanitizing resource URLs is not possible as they contain arbitrary code. In development mode, Angular prints a console warning when it has to change a value during sanitization.</p> <h3 id=\"sanitization-example\">Sanitization example</h3> <p>The template below binds the value of <code>htmlSnippet</code>, once by interpolating it into an element's content, and once by binding it to the <code>innerHTML</code> property of an element.</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/inner-html-binding.component.html\">&lt;!-- app/inner-html-binding.component.html --&gt;\n\n&lt;h3&gt;Binding innerHTML&lt;/h3&gt;\n&lt;p&gt;Bound value:&lt;/p&gt;\n&lt;p class=\"e2e-inner-html-interpolated\"&gt;{{htmlSnippet}}&lt;/p&gt;\n&lt;p&gt;Result of binding to innerHTML:&lt;/p&gt;\n&lt;p class=\"e2e-inner-html-bound\" [innerHTML]=\"htmlSnippet\"&gt;&lt;/p&gt;\n</pre>\n<p>Interpolated content is always escaped - the HTML is not interpreted, and the browser displays angle brackets in the elements text content.</p> <p>For the HTML to be interpreted, we must bind to an HTML property, such as <code>innerHTML</code>. But binding a potentially attacker controlled value into <code>innerHTML</code> would normally cause an XSS vulnerability. For example, code contained in a <code>&lt;script&gt;</code> tag would be executed.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/inner-html-binding.component.ts (excerpt)\">// app/inner-html-binding.component.ts (excerpt)\n\nexport class InnerHtmlBindingComponent {\n  // E.g. a user/attacker controlled value from a URL.\n  htmlSnippet = 'Template &lt;script&gt;alert(\"0wned\")&lt;/script&gt; &lt;b&gt;Syntax&lt;/b&gt;';\n}\n</pre>\n<p>Angular recognizes the value as unsafe, and automatically sanitizes it. It removes the <code>&lt;script&gt;</code> tag but keeps safe content, such as the text content of the <code>&lt;script&gt;</code> tag, or the <code>&lt;b&gt;</code> element.</p> <img src=\"https://angular.io/resources/images/devguide/security/binding-inner-html.png\" alt=\"A screenshot showing interpolated and bound HTML values\"><h3 id=\"avoid-direct-use-of-the-dom-apis\">Avoid direct use of the DOM APIs</h3> <p>The built-in browser DOM APIs do not automatically protect you from security vulnerabilities. For example, <code>document</code>, the node available through <code>ElementRef</code>, and many third party APIs contain unsafe methods. Avoid directly interacting with the DOM, and instead use Angular templates where possible.</p> <h3 id=\"content-security-policy\">Content Security Policy</h3> <p>A <a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\">Content Security Policy (CSP)</a> is a defense-in-depth technique to prevent XSS. To enable CSP, configure your web server to return an appropriate <code>Content-Security-Policy</code> HTTP header.</p>  <h3 id=\"use-the-offline-template-compiler\">Use the Offline Template Compiler</h3> <p>The offline template compiler prevents a whole class of vulnerabilities called template injection, and also greatly improves application performance. Use the offline template compiler in production deployments. Do not dynamically generate templates. Angular trusts template code, so generating templates, in particular containing user data, circumvents Angular's built-in protections. See the <a href=\"../cookbook/dynamic-form\">Dynamic Forms Cookbook</a> on how to dynamically construct forms in a safe way.</p> <h3 id=\"server-side-xss-protection\">Server side XSS protection</h3> <p>HTML constructed on the server is vulnerable to injection attacks. Injecting template code into an Angular application is the same as injecting executable code into the application; it gives the attacker full control over the application. To prevent this, make sure to use a templating language that automatically escapes values to prevent XSS vulnerabilities on the server. Do not generate Angular templates on the server side using a templating language, this carries a high risk of introducing template injection vulnerabilities.</p> <h2 id=\"bypass-security-apis\">Trusting Safe Values</h2>\n<p>Sometimes applications genuinely need to include executable code, display an <code>&lt;iframe&gt;</code> from some URL, or construct potentially dangerous URLs. To prevent automatic sanitization in this situation, you can tell Angular that you inspected a value, checked how it is generated, and made sure it is always secure. But <strong>be careful</strong>! If you trust a value that can be malicious, you will likely introduce a security vulnerability into your application. If in doubt, find a professional security reviewer.</p> <p>You can mark a value as trusted by injecting <code>DomSanitizationService</code>, and calling one of the following methods.</p> <ul> <li><code>bypassSecurityTrustHtml</code></li> <li><code>bypassSecurityTrustScript</code></li> <li><code>bypassSecurityTrustStyle</code></li> <li><code>bypassSecurityTrustUrl</code></li> <li><code>bypassSecurityTrustResourceUrl</code></li> </ul> <p>Remember, whether a value is safe depends on context, so you need to choose the right context for your intended use of the value. Imagine the following template needs to bind a URL to a <code>javascript:alert(...)</code> call.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/bypass-security.component.html (excerpt)\">&lt;!-- app/bypass-security.component.html (excerpt) --&gt;\n\n&lt;h4&gt;A untrusted URL:&lt;/h4&gt;\n&lt;p&gt;&lt;a class=\"e2e-dangerous-url\" [href]=\"dangerousUrl\"&gt;Click me&lt;/a&gt;&lt;/p&gt;\n&lt;h4&gt;A trusted URL:&lt;/h4&gt;\n&lt;p&gt;&lt;a class=\"e2e-trusted-url\" [href]=\"trustedUrl\"&gt;Click me&lt;/a&gt;&lt;/p&gt;\n</pre>\n<p>Normally, Angular automatically sanitizes the URL, disables the dangerous code and, in development mode, logs this action to the console. To prevent this, we can mark the URL value as a trusted URL using the <code>bypassSecurityTrustUrl</code> call:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/bypass-security.component.ts (excerpt)\">// app/bypass-security.component.ts (excerpt)\n\nconstructor(private sanitizer: DomSanitizationService) {\n  // javascript: URLs are dangerous if attacker controlled.\n  // Angular sanitizes them in data binding, but we can\n  // explicitly tell Angular to trust this value:\n  this.dangerousUrl = 'javascript:alert(\"Hi there\")';\n  this.trustedUrl = sanitizer.bypassSecurityTrustUrl(this.dangerousUrl);\n</pre>\n<img src=\"https://angular.io/resources/images/devguide/security/bypass-security-component.png\" alt=\"A screenshot showing an alert box created from a trusted URL\"><p>If we need to convert user input into a trusted value, it can be convenient to do so in a controller method. The template below allows users to enter a YouTube video ID, and load the corresponding video in an <code>&lt;iframe&gt;</code>. The <code>&lt;iframe src&gt;</code> attribute is a resource URL security context, because an untrusted source can, e.g., smuggle in file downloads that unsuspecting users would execute. So we call a method on the controller to construct a trusted video URL, which Angular then allows binding into <code>&lt;iframe src&gt;</code>.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/bypass-security.component.html (excerpt)\">&lt;!-- app/bypass-security.component.html (excerpt) --&gt;\n\n&lt;h4&gt;Resource URL:&lt;/h4&gt;\n&lt;p&gt;&lt;label&gt;Showing: &lt;input (input)=\"updateVideoUrl($event.target.value)\"&gt;&lt;/label&gt;&lt;/p&gt;\n&lt;p&gt;Trusted:&lt;/p&gt;\n&lt;iframe class=\"e2e-iframe-trusted-src\" width=\"640\" height=\"390\" [src]=\"videoUrl\"&gt;&lt;/iframe&gt;\n&lt;p&gt;Untrusted:&lt;/p&gt;\n&lt;iframe class=\"e2e-iframe-untrusted-src\" width=\"640\" height=\"390\" [src]=\"dangerousVideoUrl\"&gt;&lt;/iframe&gt;\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/bypass-security.component.ts (excerpt)\">// app/bypass-security.component.ts (excerpt)\n\nupdateVideoUrl(id: string) {\n  // Appending an ID to a YouTube URL is safe.\n  // Always make sure to construct SafeValue objects as\n  // close as possible to the input data, so\n  // that it's easier to check if the value is safe.\n  this.dangerousVideoUrl = 'https://www.youtube.com/embed/' + id;\n  this.videoUrl =\n      this.sanitizer.bypassSecurityTrustResourceUrl(this.dangerousVideoUrl);\n}\n</pre>\n<h2 id=\"http\">HTTP-level Vulnerabilities</h2>\n<p>Angular has built in support to help prevent two common HTTP vulnerabilities, Cross-site Request Forgery (XSRF) and Cross-site Script Inclusion (XSSI). Both of these must be primarily mitigated on the server side, but Angular ships helpers to make integration on the client side easier.</p> <h3 id=\"xsrf\">Cross-site Request Forgery (XSRF)</h3>\n<p>In a Cross-site Request Forgery (XSRF or CSRF), an attacker tricks the user into visiting a <em>different</em> page, and has them, e.g., submit a form that sends a request to your application's web server. If the user is logged into your application, the browser will send authentication cookies, and the attacker could — for example — cause a bank transfer in the user's name with the right request.</p> <p>To prevent this, your application must ensure that user requests originate in your own application, not on a different site. A common technique is that the server sends a randomly generated authentication token in a cookie, often with the name <code>XSRF-TOKEN</code>. Cookies can only be read by the website on which they are set, so only your own application can read this token. On each API request, the server then validates the client by checking that the token is sent back, usually in an HTTP header called <code>X-XSRF-TOKEN</code>.</p> <p>The Angular <code>http</code> client has built-in support for this technique. The default <code>CookieXSRFStrategy</code> looks for a cookie called <code>XSRF-TOKEN</code> and sets an HTTP request header named <code>X-XSRF-TOKEN</code> with the value of that cookie on every request. The server must set the <code>XSRF-TOKEN</code> cookie, and validate the response header for each state modifying request.</p> <p>XSRF tokens should be unique per user and session, have a large random value generated by a cryptographically secure random number generator, and expire.</p> <p>Angular applications can customize cookie and header names by binding their own <code>CookieXSRFStrategy</code> value, or implement an entirely custom <code>XSRFStrategy</code> by providing a custom binding for that type, by adding either of the following to your providers list:</p> <pre language=\"typescript\" data-language=\"typescript\">{ provide: XSRFStrategy, useValue: new CookieXSRFStrategy('myCookieName', 'My-Header-Name')}\n{ provide: XSRFStrategy, useClass: MyXSRFStrategy}\n</pre>\n<p>Learn about Cross Site Request Forgery (XSRF) at the Open Web Application Security Project (OWASP) <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">here</a> and <a href=\"https://www.owasp.org/index.php/CSRF_Prevention_Cheat_Sheet\">here</a>. This <a href=\"https://seclab.stanford.edu/websec/csrf/csrf.pdf\">Stanford University paper</a> is also a rich source of detail.</p> <h3 id=\"xssi\">Cross-site Script Inclusion (XSSI)</h3>\n<p>Cross-site Script Inclusion, also known as JSON vulnerability, can allow an attacker's website to read data from a JSON API. The attack works on older browser by overriding native JavaScript object constructors, and then including an API URL using a <code>&lt;script&gt;</code> tag.</p> <p>This attack is only successful if the returned JSON is executable as JavaScript. Servers can prevent it by prefixing all JSON responses to make them non-executable, by convention using the well-known string <code>\")]}',\\n\"</code>.</p> <p>Angular's <code>Http</code> library recognizes this convention and automatically strips the string <code>\")]}',\\n\"</code> from all responses before further parsing.</p> <p>Learn more in the XSSI section of this <a href=\"https://security.googleblog.com/2011/05/website-security-for-webmasters.html\">Google web security blog post</a></p> <h2 id=\"code-review\">Auditing Angular Applications</h2>\n<p>Angular applications should follow the same security principles as regular web applications, and should be audited as such. Angular specific APIs that should be audited in a security review, such as the <a href=\"#bypass-security-apis\"><em>bypassSecurityTrust</em></a> APIs, are marked in the documentation as security sensitive.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/security.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/security.html</a>\n  </p>\n</div>\n","guide/structural-directives":"<h1 class=\"hero-title text-display-1 \">Structural Directives</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Angular has a powerful template engine that lets us easily manipulate the DOM structure of our elements.</p></div>\n<p>One of the defining features of a single page application is its manipulation of the DOM tree. Instead of serving a whole new page every time a user navigates, whole sections of the DOM appear and disappear according to the application state. In this chapter we'll to look at how Angular manipulates the DOM and how we can do it ourselves in our own directives.</p> <p>In this chapter we will</p> <ul> <li><a href=\"#definition\">learn what structural directives are</a></li> <li><a href=\"#ngIf\">study <em>ngIf</em></a></li> <li><a href=\"#template\">discover the &lt;template&gt; element</a></li> <li><a href=\"#asterisk\">understand the asterisk (*) in <em>*ngFor</em></a></li> <li><a href=\"#unless\">write our own structural directive</a></li> </ul> <p>Try the <live-example></live-example>.</p> <h2 id=\"definition\">What are structural directives?</h2> <p>There are three kinds of Angular directives:</p> <ol> <li>Components</li> <li>Attribute directives</li> <li>Structural directives</li> </ol> <p>The <em>Component</em> is really a directive with a template. It's the most common of the three directives and we write lots of them as we build our application.</p> <p>The <a href=\"attribute-directives\"><em>Attribute</em> directive</a> changes the appearance or behavior of an element. The built-in <a href=\"template-syntax#ngStyle\">NgStyle</a> directive, for example, can change several element styles at the same time. We can use it to render text bold, italic, and lime green by binding to a component property that requests such a sickening result.</p> <p>A <em>Structural</em> directive changes the DOM layout by adding and removing DOM elements. We've seen three of the built-in structural directives in other chapters: <a href=\"template-syntax#ngIf\">ngIf</a>, <a href=\"template-syntax#ngSwitch\">ngSwitch</a> and <a href=\"template-syntax#ngFor\">ngFor</a>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngIf=\"hero\"&gt;{{hero}}&lt;/div&gt;\n&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero}}&lt;/div&gt;\n&lt;div [ngSwitch]=\"status\"&gt;\n  &lt;template [ngSwitchCase]=\"'in-mission'\"&gt;In Mission&lt;/template&gt;\n  &lt;template [ngSwitchCase]=\"'ready'\"&gt;Ready&lt;/template&gt;\n  &lt;template ngSwitchDefault&gt;Unknown&lt;/template&gt;\n&lt;/div&gt;\n</pre>\n<h2 id=\"ngIf\">NgIf Case Study</h2> <p>Let’s focus on <code>ngIf</code>. It's a great example of a structural directive: it takes a boolean and makes an entire chunk of DOM appear or disappear.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p *ngIf=\"condition\"&gt;\n  condition is true and ngIf is true.\n&lt;/p&gt;\n&lt;p *ngIf=\"!condition\"&gt;\n  condition is false and ngIf is false.\n&lt;/p&gt;\n</pre>\n<p>The <code>ngIf</code> directive does not hide the element. Using browser developer tools we can see that, when the condition is true, the top paragraph is in the DOM and the bottom disused paragraph is completely absent from the DOM! In its place are empty <code>&lt;script&gt;</code> tags.</p> <img src=\"https://angular.io/resources/images/devguide/structural-directives/element-not-in-dom.png\" alt=\"element not in dom\"><h3 id=\"why-remove-rather-than-hide-\">Why <em>remove</em> rather than <em>hide</em>?</h3> <p>We could hide the unwanted paragraph by setting its css <code>display</code> style to <code>none</code>. The element would remain in the DOM while invisible. Instead we removed it with <code>ngIf</code>.</p> <p>The difference matters. When we hide an element, the component's behavior continues. It remains attached to its DOM element. It continues to listen to events. Angular keeps checking for changes that could affect data bindings. Whatever the component was doing it keeps doing.</p> <p>Although invisible, the component — and all of its descendent components — tie up resources that might be more useful elsewhere. The performance and memory burden can be substantial and the user may not benefit at all.</p> <p>On the positive side, showing the element again is very quick. The component's previous state is preserved and ready to display. The component doesn't re-initialize — an operation that could be expensive.</p> <p><code>ngIf</code> is different. Setting <code>ngIf</code> to false <strong>does</strong> affect the component's resource consumption. Angular removes the element from DOM, stops change detection for the associated component, detaches it from DOM events (the attachments that it made) and destroys the component. The component can be garbage-collected (we hope) and free up memory.</p> <p>Components often have child components which themselves have children. All of them are destroyed when <code>ngIf</code> destroys the common ancestor. This cleanup effort is usually a good thing.</p> <p>Of course it isn't <em>always</em> a good thing. It might be a bad thing if we need that particular component again soon.</p> <p>The component's state might be expensive to re-construct. When <code>ngIf</code> becomes <code>true</code> again, Angular recreates the component and its subtree. Angular runs every component's initialization logic again. That could be expensive ... as when a component re-fetches data that had been in memory just moments ago.</p> <div class=\"l-sub-section\">\n<p><em>Design thought</em>: minimize initialization effort and consider caching state in a companion service.</p> </div>\n<p>Although there are pros and cons to each approach, in general it is best to use <code>ngIf</code> to remove unwanted components rather than hide them.</p> <p><strong>These same considerations apply to every structural directive, whether built-in or custom.</strong> We should ask ourselves — and the users of our directives — to think carefully about the consequences of adding and removing elements and of creating and destroying components.</p> <p>Let's see these dynamics at work. For fun, we'll stack the deck <em>against</em> our recommendation and consider a component called <code>heavy-loader</code> that <strong><em>pretends</em></strong> to load a ton of data when initialized.</p> <p>We'll display two instances of the component. We toggle the visibility of the first one with CSS. We toggle the second into and out of the DOM with <code>ngIf</code>.</p> <pre language=\"html\" name=\"template (excerpt)\" format=\"linenums\" data-language=\"html\">&lt;!-- template (excerpt) --&gt;\n\n&lt;div&gt;&lt;!-- Visibility --&gt;\n  &lt;button (click)=\"isVisible = !isVisible\"&gt;show | hide&lt;/button&gt;\n  &lt;heavy-loader [style.display]=\"isVisible ? 'inline' : 'none'\" [logs]=\"logs\"&gt;&lt;/heavy-loader&gt;\n&lt;/div&gt;\n\n&lt;div&gt;&lt;!-- NgIf --&gt;\n  &lt;button (click)=\"condition = !condition\"&gt;if | !if&lt;/button&gt;\n  &lt;heavy-loader *ngIf=\"condition\" [logs]=\"logs\"&gt;&lt;/heavy-loader&gt;\n&lt;/div&gt;\n\n&lt;h4&gt;heavy-loader log:&lt;/h4&gt;\n&lt;div *ngFor=\"let message of logs\"&gt;{{message}}&lt;/div&gt;\n</pre>\n<pre language=\"ts\" name=\"heavy-loader.component.ts\" format=\"linenums\" data-language=\"typescript\">// heavy-loader.component.ts\n\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nlet nextId = 1;\n\n@Component({\n  selector: 'heavy-loader',\n  template: '&lt;span&gt;heavy loader #{{id}} on duty!&lt;/span&gt;'\n})\nexport class HeavyLoaderComponent implements OnDestroy, OnInit {\n  id = nextId++;\n  @Input() logs: string[];\n\n  ngOnInit() {\n    // Mock todo: get 10,000 rows of data from the server\n    this.log(`heavy-loader ${this.id} initialized,\n      loading 10,000 rows of data from the server`);\n  }\n\n  ngOnDestroy() {\n    // Mock todo: clean-up\n    this.log(`heavy-loader ${this.id} destroyed, cleaning up`);\n  }\n\n  private log(msg: string) {\n    this.logs.push(msg);\n    this.tick();\n  }\n\n  // Triggers the next round of Angular change detection\n  // after one turn of the browser event loop\n  // ensuring display of msg added in onDestroy\n  private tick() { setTimeout(() =&gt; { }, 0); }\n}\n</pre>\n<p>We also log when a component is created or destroyed using the built-in <code>ngOnInit</code> and <code>ngOnDestroy</code> <a href=\"lifecycle-hooks\">lifecycle hooks</a>. Here it is in action:</p> <img src=\"https://angular.io/resources/images/devguide/structural-directives/heavy-loader-toggle.gif\" alt=\"heavy loader toggle\"><p>Both components are in the DOM at the start. First we toggle the component's visibility repeatedly. The component never leaves the DOM. When visible it's always the same instance and the log is quiet.</p> <p>Then we toggle the second component with <code>ngIf</code>. We create a new instance every time and the log shows that we're paying a heavy price to create and destroy it.</p> <p>If we really expected to \"wink\" the component like this, toggling visibility would be the better choice. In most UIs, when we \"close\" a component we're unlikely see it again for a long time, if ever. The <code>ngIf</code> would be preferred in that case.</p> <h2 id=\"template\">The <em>&lt;template&gt;</em> tag</h2> <p>Structural directives, like <code>ngIf</code>, do their magic by using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/template\">HTML 5 template tag</a>.</p> <p>Outside of an Angular app, the <code>&lt;template&gt;</code> tag's default CSS <code>display</code> property is <code>none</code>. It's contents are <strong><em>invisible</em></strong> within a hidden <a href=\"https://developer.mozilla.org/en/docs/Web/API/DocumentFragment\">document fragment</a>.</p> <p>Inside of an app, Angular <strong><em>removes</em></strong> the<code>&lt;template&gt;</code> tags and their children. The contents are gone — but not forgotten as we'll see soon.</p> <p>We can confirm these effects by wrapping the middle \"hip\" of the phrase \"Hip! Hip! Hooray!\" within a <code>&lt;template&gt;</code> tag.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p&gt;\n  Hip!\n&lt;/p&gt;\n&lt;template&gt;\n  &lt;p&gt;\n    Hip!\n  &lt;/p&gt;\n&lt;/template&gt;\n&lt;p&gt;\n  Hooray!\n&lt;/p&gt;\n</pre>\n<p>The display is a 'Hip! Hooray!', short of perfect enthusiasm. The DOM effects are different when Angular is in control.</p> <img src=\"https://angular.io/resources/images/devguide/structural-directives/template-in-out-of-a2.png\" alt=\"template outside angular\"><p>Evidently Angular replaces the <code>&lt;template&gt;</code> tag and its contents with empty <code>&lt;script&gt;</code> tags. That's just its default behavior. It can do something different as we saw when applying a variety of <code>ngSwitch</code> directives to <code>&lt;template&gt;</code> tags:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngSwitch]=\"status\"&gt;\n  &lt;template [ngSwitchCase]=\"'in-mission'\"&gt;In Mission&lt;/template&gt;\n  &lt;template [ngSwitchCase]=\"'ready'\"&gt;Ready&lt;/template&gt;\n  &lt;template ngSwitchDefault&gt;Unknown&lt;/template&gt;\n&lt;/div&gt;\n</pre>\n<p>When one of those <code>ngSwitch</code> conditions is true, Angular inserts the template's content into the DOM.</p> <p>What does this have to do with <code>ngIf</code> and <code>ngFor</code>? We didn't use a <code>&lt;template&gt;</code> tag with those directives.</p> <h2 id=\"asterisk\">The asterisk (*) effect</h2> <p>Here are those directives again. See the difference?</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngIf=\"hero\"&gt;{{hero}}&lt;/div&gt;\n&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero}}&lt;/div&gt;\n</pre>\n<p>We're prefixing these directive names with an asterisk (*).</p> <p>The asterisk is \"syntactic sugar\". It simplifies <code>ngIf</code> and <code>ngFor</code> for both the writer and the reader. Under the hood, Angular replaces the asterisk version with a more verbose <code>&lt;template&gt;</code> form.</p> <p>The next two <code>ngIf</code> examples are effectively the same and we may write in either style:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- Examples (A) and (B) are the same --&gt;\n&lt;!-- (A) *ngIf paragraph --&gt;\n&lt;p *ngIf=\"condition\"&gt;\n  Our heroes are true!\n&lt;/p&gt;\n\n&lt;!-- (B) [ngIf] with template --&gt;\n&lt;template [ngIf]=\"condition\"&gt;\n  &lt;p&gt;\n    Our heroes are true!\n  &lt;/p&gt;\n&lt;/template&gt;\n</pre>\n<p>Most of us would rather write in style (A).</p> <p>It's worth knowing that Angular expands style (A) into style (B). It moves the paragraph and its contents inside a <code>&lt;template&gt;</code> tag. It moves the directive up to the <code>&lt;template&gt;</code> tag where it becomes a property binding, surrounded in square brackets. The boolean value of the host component's <code>condition</code> property determines whether the templated content is displayed or not.</p> <p>Angular transforms <code>*ngFor</code> in a similar manner:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- Examples (A) and (B) are the same --&gt;\n\n&lt;!-- (A) *ngFor div --&gt;\n&lt;div *ngFor=\"let hero of heroes\"&gt;{{ hero }}&lt;/div&gt;\n\n&lt;!-- (B) ngFor with template --&gt;\n&lt;template ngFor let-hero [ngForOf]=\"heroes\"&gt;\n  &lt;div&gt;{{ hero }}&lt;/div&gt;\n&lt;/template&gt;\n</pre>\n<p>The basic pattern is the same: create a <code>&lt;template&gt;</code>, relocate the content, and move the directive onto the <code>&lt;template&gt;</code>.</p> <p>There are extra nuances stemming from Angular's <a href=\"template-syntax#ngForMicrosyntax\">ngFor micro-syntax</a> which expands into an additional <code>ngForOf</code> property binding (the iterable) and the <code>hero</code> template input variable (the current item in each iteration).</p> <h2 id=\"unless\">Make a structural directive</h2> <p>Let's write our own structural directive, an <code>Unless</code> directive, the not-so-evil twin of <code>ngIf</code>.</p> <p>Unlike <code>ngIf</code> which displays the template content when <code>true</code>, our directive displays the content when the condition is <strong><em>false</em></strong>.</p> <p>Creating a directive is similar to creating a component.</p> <ul> <li>\n<p>import the <code>Directive</code> decorator.</p> </li> <li>\n<p>add a CSS <strong>attribute selector</strong> (in brackets) that identifies our directive.</p> </li> <li>\n<p>specify the name of the public <code>input</code> property for binding (typically the name of the directive itself).</p> </li> <li>\n<p>apply the decorator to our implementation class.</p> </li> </ul> <p>Here is how we begin:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"unless.directive.ts (excerpt)\">// unless.directive.ts (excerpt)\n\nimport { Directive, Input } from '@angular/core';\n\n@Directive({ selector: '[myUnless]' })\nexport class UnlessDirective {\n}\n</pre>\n<div class=\"l-sub-section\">\n<h3 id=\"selector-brackets-nbsp-\">Selector brackets [ ]</h3> <p>The CSS syntax for selecting an attribute is a name in square brackets. We surround our directive name in square brackets. See <em>Directive configuration</em> on the <a href=\"https://angular.io/docs/ts/latest/guide/cheatsheet.html\">cheatsheet</a>.</p> <h3 id=\"selector-name-prefixes\">Selector name prefixes</h3> <p>We recommend picking a selector name with a prefix to ensure that it cannot conflict with any standard HTML attribute, now or in the future.</p> <p>We do <strong>not</strong> prefix our <code>unless</code> directive name with <strong><code>ng</code></strong>. That prefix belongs to Angular and we don't want to confuse our directives with their directives.</p> <p>Our prefix is <code>my</code>.</p> </div>\n<p>We'll need access to the template <em>and</em> something that can render its contents. We access the template with a <code>TemplateRef</code>. The renderer is a <code>ViewContainerRef</code>. We inject both into our constructor as private variables.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(\n  private templateRef: TemplateRef&lt;any&gt;,\n  private viewContainer: ViewContainerRef\n  ) { }\n</pre>\n<p>The consumer of our directive will bind a boolean value to our directive's <code>myUnless</code> input property. The directive adds or removes the template based on that value.</p> <p>Let's add the <code>myUnless</code> property now as a setter-only property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input() set myUnless(condition: boolean) {\n  if (!condition) {\n    this.viewContainer.createEmbeddedView(this.templateRef);\n  } else {\n    this.viewContainer.clear();\n  }\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>@Input()</code> annotation marks this property as an input for the directive.</p> </div>\n<p>Nothing fancy here: if the condition is false, we render the template, otherwise we clear the element content.</p> <p>The end result should look like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"unless.directive.ts\">// unless.directive.ts\n\nimport { Directive, Input } from '@angular/core';\n\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({ selector: '[myUnless]' })\nexport class UnlessDirective {\n\n  constructor(\n    private templateRef: TemplateRef&lt;any&gt;,\n    private viewContainer: ViewContainerRef\n    ) { }\n\n  @Input() set myUnless(condition: boolean) {\n    if (!condition) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}\n</pre>\n<p>Now we add it to the <code>declarations</code> array of the AppModule and try it. First we add some test HTML to the template:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;p *myUnless=\"condition\"&gt;\n  condition is false and myUnless is true.\n&lt;/p&gt;\n\n&lt;p *myUnless=\"!condition\"&gt;\n  condition is true and myUnless is false.\n&lt;/p&gt;\n</pre>\n<p>We run it and it behaves as expected, doing the opposite of <code>ngIf</code>. When <code>condition</code> is <code>true</code>, the top paragraph is removed (replaced by <code>&lt;script&gt;</code> tags) and the bottom paragraph appears.</p> <img src=\"https://angular.io/resources/images/devguide/structural-directives/myUnless-is-true.png\" alt=\"myUnless is true\"><p>Our <code>myUnless</code> directive is dead simple. Surely we left something out. Surely <code>ngIf</code> is more complex?</p> <p><a href=\"https://github.com/angular/angular/blob/master/modules/%40angular/common/src/directives/ng_if.ts\">Look at the source code</a>. It's well documented and we shouldn't be shy about consulting the source when we want to know how something works.</p> <p><code>ngIf</code> isn't much different! There are a few additional checks to improve performance (don't clear or recreate the view unless necessary) but otherwise it's much the same.</p> <h2 id=\"wrap-up\">Wrap up</h2> <p>Here is the pertinent source for this chapter.</p> <pre language=\"ts\" name=\"unless.directive.ts\" format=\"linenums\" data-language=\"typescript\">// unless.directive.ts\n\nimport { Directive, Input } from '@angular/core';\n\nimport { TemplateRef, ViewContainerRef } from '@angular/core';\n\n@Directive({ selector: '[myUnless]' })\nexport class UnlessDirective {\n\n  constructor(\n    private templateRef: TemplateRef&lt;any&gt;,\n    private viewContainer: ViewContainerRef\n    ) { }\n\n  @Input() set myUnless(condition: boolean) {\n    if (!condition) {\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    } else {\n      this.viewContainer.clear();\n    }\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"heavy-loader.component.ts\" format=\"linenums\" data-language=\"typescript\">// heavy-loader.component.ts\n\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\n\nlet nextId = 1;\n\n@Component({\n  selector: 'heavy-loader',\n  template: '&lt;span&gt;heavy loader #{{id}} on duty!&lt;/span&gt;'\n})\nexport class HeavyLoaderComponent implements OnDestroy, OnInit {\n  id = nextId++;\n  @Input() logs: string[];\n\n  ngOnInit() {\n    // Mock todo: get 10,000 rows of data from the server\n    this.log(`heavy-loader ${this.id} initialized,\n      loading 10,000 rows of data from the server`);\n  }\n\n  ngOnDestroy() {\n    // Mock todo: clean-up\n    this.log(`heavy-loader ${this.id} destroyed, cleaning up`);\n  }\n\n  private log(msg: string) {\n    this.logs.push(msg);\n    this.tick();\n  }\n\n  // Triggers the next round of Angular change detection\n  // after one turn of the browser event loop\n  // ensuring display of msg added in onDestroy\n  private tick() { setTimeout(() =&gt; { }, 0); }\n}\n</pre>\n<pre language=\"ts\" name=\"structural-directives.component.ts\" format=\"linenums\" data-language=\"typescript\">// structural-directives.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'structural-directives',\n  templateUrl: 'app/structural-directives.component.html',\n  styles: ['button { min-width: 100px; }']\n})\nexport class StructuralDirectivesComponent {\n  heroes = ['Mr. Nice', 'Narco', 'Bombasto'];\n  hero = this.heroes[0];\n  condition = true;\n  isVisible = true;\n  logs: string[] = [];\n  status = 'ready';\n}\n</pre>\n<pre language=\"html\n  \" name=\"structural-directives.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- structural-directives.component.html --&gt;\n\n&lt;h1&gt;Structural Directives&lt;/h1&gt;\n\n&lt;div *ngIf=\"hero\"&gt;{{hero}}&lt;/div&gt;\n&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero}}&lt;/div&gt;\n&lt;div [ngSwitch]=\"status\"&gt;\n  &lt;template [ngSwitchCase]=\"'in-mission'\"&gt;In Mission&lt;/template&gt;\n  &lt;template [ngSwitchCase]=\"'ready'\"&gt;Ready&lt;/template&gt;\n  &lt;template ngSwitchDefault&gt;Unknown&lt;/template&gt;\n&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;button\n  (click)=\"condition = !condition\"\n  [style.background] = \"condition ? 'orangered': 'lightgreen'\"\n  &gt;\n  Set 'condition' to {{condition ? 'False': 'True'}}\n&lt;/button&gt;\n\n&lt;p *ngIf=\"condition\"&gt;\n  condition is true and ngIf is true.\n&lt;/p&gt;\n&lt;p *ngIf=\"!condition\"&gt;\n  condition is false and ngIf is false.\n&lt;/p&gt;\n&lt;p *myUnless=\"condition\"&gt;\n  condition is false and myUnless is true.\n&lt;/p&gt;\n\n&lt;p *myUnless=\"!condition\"&gt;\n  condition is true and myUnless is false.\n&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;div&gt;&lt;!-- Visibility --&gt;\n  &lt;button (click)=\"isVisible = !isVisible\"&gt;show | hide&lt;/button&gt;\n  &lt;heavy-loader [style.display]=\"isVisible ? 'inline' : 'none'\" [logs]=\"logs\"&gt;&lt;/heavy-loader&gt;\n&lt;/div&gt;\n\n&lt;div&gt;&lt;!-- NgIf --&gt;\n  &lt;button (click)=\"condition = !condition\"&gt;if | !if&lt;/button&gt;\n  &lt;heavy-loader *ngIf=\"condition\" [logs]=\"logs\"&gt;&lt;/heavy-loader&gt;\n&lt;/div&gt;\n\n&lt;h4&gt;heavy-loader log:&lt;/h4&gt;\n&lt;div *ngFor=\"let message of logs\"&gt;{{message}}&lt;/div&gt;\n\n&lt;hr&gt;\n\n&lt;p&gt;\n  Hip!\n&lt;/p&gt;\n&lt;template&gt;\n  &lt;p&gt;\n    Hip!\n  &lt;/p&gt;\n&lt;/template&gt;\n&lt;p&gt;\n  Hooray!\n&lt;/p&gt;\n\n&lt;hr&gt;\n\n&lt;!-- Examples (A) and (B) are the same --&gt;\n&lt;!-- (A) *ngIf paragraph --&gt;\n&lt;p *ngIf=\"condition\"&gt;\n  Our heroes are true!\n&lt;/p&gt;\n\n&lt;!-- (B) [ngIf] with template --&gt;\n&lt;template [ngIf]=\"condition\"&gt;\n  &lt;p&gt;\n    Our heroes are true!\n  &lt;/p&gt;\n&lt;/template&gt;\n\n&lt;hr&gt;\n\n&lt;!-- Examples (A) and (B) are the same --&gt;\n\n&lt;!-- (A) *ngFor div --&gt;\n&lt;div *ngFor=\"let hero of heroes\"&gt;{{ hero }}&lt;/div&gt;\n\n&lt;!-- (B) ngFor with template --&gt;\n&lt;template ngFor let-hero [ngForOf]=\"heroes\"&gt;\n  &lt;div&gt;{{ hero }}&lt;/div&gt;\n&lt;/template&gt;\n</pre>\n<p>We learned that we can manipulate our HTML layout with structural directives like <code>ngFor</code> and <code>ngIf</code> and we wrote our own structural directive, <code>myUnless</code>, to do something similar.</p> <p>Angular offers more sophisticated techniques for managing layout such as <em>structural components</em> that can take external content and incorporate that content within their own templates. Tab and tab pane controls are good examples.</p> <p>We'll learn about structural components in a future chapter.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/structural-directives.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/structural-directives.html</a>\n  </p>\n</div>\n","guide/testing":"<h1 class=\"hero-title text-display-1 \">Testing</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Techniques and practices for testing an Angular 2 app</p></div>\n<div class=\"alert is-important\">\n<p>We are still preparing the testing guide with all the new testing features introduced in RC5 and will update it very soon.</p> </div>\n<p>We write <strong>unit tests</strong> to explore and confirm the <strong>behavior</strong> of parts of our application.</p> <ol> <li>They <strong>guard</strong> against breaking existing code (“regressions”) when we make changes.</li> <li>They <strong>clarify</strong> what the code does both when used as intended and when faced with deviant conditions.</li> <li>They <strong>reveal</strong> mistakes in design and implementation. Tests force us to look at our code from many angles. When a part of our application seems hard to test, we may have discovered a design flaw, something we can cure now rather than later when it becomes expensive to fix.</li> </ol> <h1 id=\"table-of-contents\">Table of Contents</h1> <ol> <li>\n<p><a href=\"#jasmine-101\">Jasmine Testing 101</a></p> <ul> <li>setup to run Jasmine tests in the browser</li> <li>basic Jasmine testing skills</li> <li>write simple Jasmine tests in TypeScript</li> <li>debug a test in the browser</li> </ul> </li> <li>\n<p><a href=\"#aut\">The Application Under Test</a></p> </li> <li>\n<p><a href=\"#first-app-tests\">First app test</a></p> <ul> <li>test a simple application interface outside of Angular</li> <li>where to put the test file</li> <li>load a test file with systemJS</li> </ul> </li> <li>\n<p><a href=\"#pipe-testing\">Pipe driven development</a></p> <ul> <li>create a test before creating a class</li> <li>load multiple test files in our test harness, using system.js</li> <li>add the Angular 2 library to our test harness</li> <li>watch the new test fail, and fix it</li> </ul> </li> <li>\n<p>Test an Asynchronous Service (forthcoming)</p> <ul> <li>test an asynchronous service class outside of Angular</li> <li>write a test plan in code</li> <li>fake a dependency</li> <li>master the <code>catch(fail).then(done)</code> pattern</li> <li>move setup to <code>beforeEach</code>\n</li> <li>test when a dependency fails</li> <li>control async test timeout</li> </ul> </li> <li>\n<p>The Angular Test Environment (forthcoming)</p> <ul> <li>the Angular test environment and why we need help</li> <li>add the Angular Test libraries to the test harness</li> <li>test the same async service using Angular Dependency Injection</li> <li>reduce friction with test helpers</li> <li>introducing spies</li> </ul> </li> <li>\n<p>Test a Component (forthcoming)</p> <ul> <li>test the component outside of Angular</li> <li>mock the dependent asynchronous service</li> <li>simulate interaction with the view (no DOM)</li> <li>use a spy-promise to control asynchronous test flow</li> </ul> </li> <li>\n<p>Test a Component in the DOM (forthcoming</p> <ul> <li>test the component inside the Angular test environment</li> <li>use the <code>TestComponentBuilder</code>\n</li> <li>more test helpers</li> <li>interact with the DOM</li> <li>bind to a mock dependent asynchronous service</li> </ul> </li> <li>\n<p>Run the tests with karma (forthcoming)</p> </li> </ol> <p>It’s a big agenda. Fortunately, you can learn a little bit at a time and put each lesson to use.</p> \n<h1 id=\"jasmine-101\">Jasmine Testing 101</h1> <p>We’ll write our tests with the <a href=\"http://jasmine.github.io/2.3/introduction.html\">Jasmine test framework</a>. We’ll start by getting <em>some</em> tests to work - <em>any</em> tests at all.</p> <p>We will learn</p> <ul> <li>basic Jasmine testing skills</li> <li>to run our tests in the browser</li> <li>to write simple Jasmine tests in TypeScript</li> <li>to debug a test in the browser</li> </ul> <p><strong>Create a new project folder</strong> perhaps called <code>angular2-unit-testing</code>.</p> <h2 id=\"install-npm-packages-locally\">Install npm packages locally</h2> <p>Next follow all of the steps prescribed in “Install npm packages locally” of the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>.</p> <p>We’ll also add the Jasmine package via <code>npm</code>:</p> <pre class=\"prettyprint lang-bash\">npm install jasmine-core --save-dev --save-exact</pre>\n<div class=\"alert is-important\">\n<p>Be sure to install <code>jasmine-core</code> , not <code>jasmine</code>!</p> </div>\n<p><strong>Create a sub-folder <code>src</code> </strong> for our tests and then <strong>cd into it</strong>.</p> <p>We are going to <strong>display and control our tests in the browser</strong>.</p> <div class=\"l-sub-section\">\n<p>The browser is nice during development of a few tests. It’s not the best venue for working with a lot of tests and it won’t do at all for build automation. We’ll switch to the karma test-runner when the time comes. But the browser will do for now.</p> </div>\n<p>Create a new file called<code>unit-tests.html</code> and enter the following:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"unit-tests.html\">&lt;!-- unit-tests.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\n  &lt;title&gt;Ng App Unit Tests&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.css\"&gt;\n\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/boot.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<p>In the head we have three Jasmine scripts and one Jasmine css file. That’s the foundation for running any tests.</p> <p>We’ll write our first test with inline JavaScript inside the body tag:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;body&gt;\n  &lt;!-- Unit Testing Chapter #1: Proof of life.  --&gt;\n  &lt;script&gt;\n    it('true is true', function(){ expect(true).toEqual(true); });\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre>\n<p>Now open <code>unit-tests.html</code> in a browser and see the Jasmine HTML test output:</p> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/jasmine-1-spec-0-failures.png\" style=\"height:170px\" alt=\"Jasmine HTML test output\" align=\"\"><p>It doesn’t get much simpler than that!</p> <h2 id=\"first-typescript-test\">First TypeScript Test</h2> <p>Perhaps too simple. We won’t write our entire test suite inside one HTML file. Let’s <strong>extract</strong> that line of test code to a <strong>new file in <code>src</code> called <code>1st.spec.ts</code> </strong> .</p> <div class=\"l-sub-section\">\n<p>Among Jasmine developers, a test is known as a “spec” and test filenames include the word “spec”. We’ll stick with that convention.</p> </div>\n<p>The test we wrote is valid TypeScript because any JavaScript is valid TypeScript. But let’s make it more modern with an arrow function:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"1st.spec.ts\">// 1st.spec.ts\n\nit('true is true', () =&gt; expect(true).toEqual(true));\n</pre>\n<p>Now modify <code>unit-tests.html</code> to load the script:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;script src=\"1st.spec.js\"&gt;&lt;/script&gt;\n</pre>\n<p>Hold on! We wrote a TypeScript file but we’re loading a JavaScript file?</p> <p>That’s a reminder that we need to compile our TypeScript test files as we do our TypeScript application files. Do that next.</p> <h2 id=\"prepare-for-typescript\">Prepare for TypeScript</h2> <p>As we’ve seen before, we first have to tell the compiler how to compile our TypeScript files with a <strong> <code>tsconfig.json</code> </strong>.</p> <p>We can copy one from the quickstart we wrote previously and paste it into our src sub-folder. It should look something like this:</p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"tsconfig.json\">// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"system\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n</pre>\n<h2 id=\"compile-and-run\">Compile and Run</h2> <p>Compile in the terminal window using the npm script command</p> <pre class=\"prettyprint lang-bash\">npm run tsc</pre>\n<div class=\"alert is-helpful\">\n<p>Our editor and the compiler may complain that they don’t know what <code>it</code> and <code>expect</code> are because they lack the typing files that describe Jasmine. We can ignore those annoying complaints for now as they are harmless.</p> </div>\n<p>If we reload the browser, we should see the same Jasmine test-runner output as before.</p> <p>We’ll be evolving these tests rapidly and it would be nice to have the browser refresh automatically as we make changes and recompile.</p> <p>Let’s launch with <strong>lite-server</strong> in a second terminal window:</p> <pre class=\"prettyprint lang-bash\">npm start</pre>\n<p>Now reload <code>unit-tests.html</code> in the browser</p> <p>We should get the same Jasmine test-runner output as before.</p> <h2 id=\"add-a-describe-and-another-test\">Add a describe and another test</h2> <p>We can’t tell what file produced these test results. We only have one file at the moment but soon we’ll write more.</p> <p>We should wrap this test into something that identifies the file. In Jasmine that “something” is a <code>describe</code> function. Every test file should have at least one <code>describe</code> that identifies the file holding the test(s).</p> <p>Here’s what our revised <code>1st.spec.ts</code> looks like when wrapped in a <code>describe</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\"> describe('1st tests', () =&gt; {\n\n  it('true is true', () =&gt; expect(true).toEqual(true));\n\n});\n</pre>\n<p>And here’s how the test report displays it.</p> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/test-report-1-spec-0-failures.png\" style=\"height:100px\" alt=\"1 spec, 0 failures\" align=\"\"><p>Let’s add another Jasmine test to <code>1st.spec.ts</code></p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">it('null is not the same thing as undefined',\n  () =&gt; expect(null).not.toEqual(undefined)\n);\n</pre>\n<p>You knew that right? Let’s prove it with this test. The browser should refresh after you paste that test, and show:</p> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/test-report-2-specs-0-failures.png\" style=\"height:100px\" alt=\"refreshed 2 specs, 0 failures\" align=\"\"><p>What does a failing test look like? Remove the <code>.not</code>. The browser refreshes and shows:</p> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/test-report-2-specs-1-failure.png\" style=\"height:190px\" alt=\"failing test 2 specs, 1 failure\" align=\"\"><p>Click the <code>Spec List</code> link just below “2 specs, 1 failure” to see the summary again:</p> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/spec-list-2-specs-1-failure.png\" style=\"height:140px\" alt=\"2 specs, 1 failure\" align=\"\"><p>We can re-run just the failing test by double-clicking it. Try it!</p> <h2 id=\"debug-the-test\">Debug the test</h2> <p>Suppose we didn’t know what was going on. We can debug it in the browser.</p> <ul> <li>Open the browser’s “Developer Tools” (F12 or Ctrl-Shift-I).</li> <li>Pick the “sources” section</li> <li>Open the <code>1st.spec.ts</code> test file (Ctrl-P, then start typing the name of the file).</li> <li>Set a breakpoint on the second line of the failing test</li> <li>Refresh the browser … and it stops at our breakpoint.</li> <li>Open the console window at the bottom (press Esc)</li> <li>Type <code>null === undefined</code> … … and we should see this:</li> </ul> <img src=\"https://angular.io/resources/images/devguide/jasmine-testing-101/null-to-equal-undefined.png\" style=\"height:500px\" alt=\"null === undefined\" align=\"\"><p>How about that! They really aren’t equal.</p> <ul> <li>remove the breakpoint (right-click in the “Breakpoints” section and chose “Remove breakpoint”)</li> <li>Click the “play” icon to resume the test (or F8)</li> </ul> <p>And the test finishes. Close the browser tools (click the close box or press F12 or Ctrl-Shift-I)</p> <p>Fix the test (restore the <code>.not</code>); the browser should refresh automatically and all tests pass.</p> <p>Congratulations … you’ve completed Jasmine testing 101.</p> <p>Now that we’re familiar with Jasmine on its own, we’re ready to test an application.</p> \n<h1 id=\"aut\">The Application to Test</h1> <p>We’ll need an Angular application to test, one as simple as possible while having most of the angular features we want to test.</p> <p>What better app than our own <a href=\"../tutorial/toh-pt5\">The Tour of Heroes</a>? We're already quite familiar with it and it fits our criteria, so let's try to test what we've done there.</p> <p>We might end up modifying it a bit, because it doesn't have everything we want to test, but it's the perfect starting point.</p> <p>Create a copy of the Tour of Heroes app so that we can fiddle without fear.</p> \n<h1 id=\"first-app-tests\">First app test</h1> <p>In this chapter we'll setup the environment for testing our sample application and write a few easy Jasmine tests of the app's simplest parts. We'll learn:</p> <ul> <li>to test one of our application files</li> <li>why we prefer our test files to be next to their corresponding source files</li> <li>to run tests with an <code>npm</code> command</li> <li>load the test file with SystemJS</li> </ul> <div class=\"callout is-helpful\">\n<header>Prior Knowledge</header><p>The Unit Testing chapters build upon each other. We recommend reading them in order. We're also assuming that you're already comfortable with basic Angular 2 concepts and the tools we introduced in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> and the <a href=\"../tutorial/index\">Tour of Heroes</a> tutorial such as <code>npm</code>, <code>gulp</code>, and <code>lite-server</code>.</p> </div>\n<h2 id=\"create-the-test-runner-html\">Create the test-runner HTML</h2> <p>Locate the folder that contains the application <code>index.html</code> for your testing copy of Tour of Heroes.</p> <p>Create a new, sibling HTML file, <strong> <code>unit-tests.html</code> </strong> and copy over the same basic material from the <code>unit-tests.html</code> in the <a href=\"jasmine-testing-101\">Jasmine 101</a> chapter.</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"unit-tests.html\">&lt;!-- unit-tests.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\"&gt;\n  &lt;title&gt;Ng App Unit Tests&lt;/title&gt;\n  &lt;link rel=\"stylesheet\" href=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.css\"&gt;\n\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/jasmine-html.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"../node_modules/jasmine-core/lib/jasmine-core/boot.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<p>We're picking up right where we left off. All we've done is change the title.</p> <h2 id=\"update-package-json-for-testing\">Update <code>package.json</code> for testing</h2> <p>We must install the Jasmine package as well:</p> <pre class=\"prettyprint lang-bash\">npm install jasmine-core --save-dev --save-exact</pre>\n<div class=\"alert is-important\">Be sure to install <code>jasmine-core</code> , not <code>jasmine</code>!</div>\n<h2 id=\"configure-lite-server-for-serving-our-test-harness\">Configure <code>lite-server</code> for serving our test harness</h2> <p>First create a configuration file for serving up our test harness through <code>lite-server</code>.</p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"liteserver-test-config.json\">// liteserver-test-config.json\n\n{\n    \"startPath\": \"unit-tests.html\"\n}\n</pre>\n<p>Let's make one more change to the <code>package.json</code> script commands.</p> <p><strong>Open the <code>package.json</code> </strong> and scroll to the <code>scripts</code> node and add the following two entries:</p> <pre format=\"\">\"lite-server-test\": \"lite-server --config=liteserver-test-config.json\",\n\"test\": \"tsc &amp;&amp; concurrently \\\"npm run tsc:w\\\" \\\"npm run lite-server-test\\\" \"\n</pre>\n<p>The <code>npm test</code> command will launch <code>lite-server</code> and open a browser to the <code>unit-tests.html</code> page we just wrote. It will also take care of recompiling your source code and reloading your browser after any change.</p> <h2 id=\"first-app-tests\">First app tests</h2> <p>We can start testing <em>some</em> of our app right away. For example, we can test the <code>Hero</code> interface:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">export class Hero {\n  id: number;\n  name: string;\n}\n</pre>\n<p>Let's add a couple of simple tests in a new file.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Hero } from './hero';\n\ndescribe('Hero', () =&gt; {\n\n  it('has name', () =&gt; {\n    let hero: Hero = {id: 1, name: 'Super Cat'};\n    expect(hero.name).toEqual('Super Cat');\n  });\n\n  it('has id', () =&gt; {\n    let hero: Hero = {id: 1, name: 'Super Cat'};\n    expect(hero.id).toEqual(1);\n  });\n});\n</pre>\n<p>That's the basic Jasmine we learned back in \"Jasmine 101\".</p> <p>Notice that we surrounded our tests with <strong> <code>describe('Hero')</code> </strong>.</p> <p><strong>By convention, our test always begin with a <code>describe</code> that identifies the application part under test.</strong></p> <p>The description should be sufficient to identify the tested application part and its source file. Almost any convention will do as long as you and your team follow it consistently and are never confused.</p> <p>But we haven't saved this test yet.</p> <h2 id=\"where-do-tests-go-\">Where do tests go?</h2> <p>Some people like to keep their tests in a <code>tests</code> folder parallel to the application source folder.</p> <p>We are not those people. We like our unit tests to be close to the source code that they test. We prefer this approach because</p> <ul> <li>The tests are easy to find</li> <li>We see at a glance if an application part lacks tests.</li> <li>Nearby tests can teach us about how the part works; they express the developers intention and reveal how the developer thinks the part should behave under a variety of circumstances.</li> <li>When we move the source (inevitable), we remember to move the test.</li> <li>When we rename the source file (inevitable), we remember to rename the test file.</li> </ul> <p>We can't think of a downside. The server doesn't care where they are. They are easy to find and distinguish from application files when named conventionally.</p> <div class=\"l-sub-section\">\n<p>You may put your tests elsewhere if you wish. We're putting ours inside the app, next to the source files that they test.</p> </div>\n<h2 id=\"first-spec-file\">First spec file</h2> <p><strong>Create</strong> a new file, <strong> <code>hero.spec.ts</code> </strong> in <code>app</code> next to <code>hero.ts</code>.</p> <p>Notice the \".spec\" suffix in the test file's filename, appended to the name of the file holding the application part we're testing.</p> <div class=\"alert is-important\"> All of our unit test files follow this .spec naming pattern.</div>\n<p>Save the tests we just made in <code>hero.spec.ts</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Hero } from './hero';\n\ndescribe('Hero', () =&gt; {\n\n  it('has name', () =&gt; {\n    let hero: Hero = {id: 1, name: 'Super Cat'};\n    expect(hero.name).toEqual('Super Cat');\n  });\n\n  it('has id', () =&gt; {\n    let hero: Hero = {id: 1, name: 'Super Cat'};\n    expect(hero.id).toEqual(1);\n  });\n});\n</pre>\n<h3 id=\"import-the-part-we-re-testing\">Import the part we're testing</h3> <p>We have an <code>import {Hero} from './hero'</code> statement.</p> <p>If we forgot this import, a TypeScript-aware editor would warn us, with a squiggly red underline, that it can't find the definition of the <code>Hero</code> interface.</p> <h3 id=\"update-unit-tests-html\">Update unit-tests.html</h3> <p>Next we update the <code>unit-tests.html</code> with a reference to our new <code>hero.spec.ts</code> file. Delete the inline test code. The revised pertinent HTML looks like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;script src=\"app/hero.js\"&gt;&lt;/script&gt;\n&lt;script src=\"app/hero.spec.js\"&gt;&lt;/script&gt;\n</pre>\n<h3 id=\"run-and-fail\">Run and Fail</h3> <p>Look over at the browser (lite-server will have reloaded it). The browser displays</p> <img src=\"https://angular.io/resources/images/devguide/first-app-tests/Jasmine-not-running-tests.png\" style=\"width:400px\" alt=\"Jasmine not running any tests\" align=\"\"><p>That's Jasmine saying \"<strong>things are <em>so</em> bad that <em>I'm not running any tests</em>.</strong>\"</p> <p>Open the browser's Developer Tools (F12, Ctrl-Shift-i). There's an error:</p> <pre format=\"\" language=\"html\" data-language=\"html\">Uncaught ReferenceError: System is not defined\n</pre>\n<h2 id=\"load-tests-with-systemjs\">Load tests with SystemJS</h2> <p>The immediate cause of the error is the <code>export</code> statement in <code>hero.ts</code>. That error was there all along. It wasn't a problem until we tried to <code>import</code> the <code>Hero</code> interface in our tests.</p> <p>Our test environment lacks support for module loading. Apparently we can't simply load our application and test scripts like we do with 3rd party JavaScript libraries.</p> <p>We are committed to module loading in our application. Our app will call <code>import</code>. Our tests must do so too.</p> <p>We add module loading support in four steps:</p> <ol> <li>add the <em>SystemJS</em> module management library</li> <li>configure <em>SystemJS</em> to look for JavaScript files by default</li> <li>import our test files</li> <li>tell Jasmine to run the imported tests</li> </ol> <p>These steps are all clearly visible, in exactly that order, in the following lines that replace the <code>&lt;body&gt;</code> contents in <code>unit-tests.html</code>:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;body&gt;\n  &lt;!-- #1. add the system.js library --&gt;\n  &lt;script src=\"../node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n\n  &lt;script&gt;\n    // #2. Configure systemjs to use the .js extension\n    //     for imports from the app folder\n    System.config({\n      packages: {\n        'app': {defaultExtension: 'js'}\n      }\n    });\n\n    // #3. Import the spec file explicitly\n    System.import('app/hero.spec')\n\n      // #4. wait for all imports to load ...\n      //     then re-execute `window.onload` which\n      //     triggers the Jasmine test-runner start\n      //     or explain what went wrong.\n      .then(window.onload)\n      .catch(console.error.bind(console));\n  &lt;/script&gt;\n&lt;/body&gt;\n</pre>\n<p>Look in the browser window. Our tests pass once again.</p> <img src=\"https://angular.io/resources/images/devguide/first-app-tests/test-passed-once-again.png\" style=\"width:400px\" alt=\"Tests passed once again\" align=\"\"><h2 id=\"observations\">Observations</h2> <h3 id=\"system-config\">System.config</h3> <p>System.js demands that we specify a default extension for the filenames that correspond to whatever it is asked to import. Without that default, it would translate an import statement such as <code>import {Hero} from './hero'</code> to a request for the file named <code>hero</code>. Not <code>hero.js</code>. Just plain <code>hero</code>. Our server error with \"404 - not found\" because it doesn't have a file of that name.</p> <p>Once configured with a default extension of 'js', SystemJS requests <code>hero.js</code> which <em>does</em> exist and is promptly returned by our server.</p> <h3 id=\"asynchronous-system-import\">Asynchronous System.import</h3> <p>The call to <code>System.import</code> shouldn't surprise us but its asynchronous nature might. If we ponder this for a moment, we realize that it must be asynchronous because System.js may have to fetch the corresponding JavaScript file from the server. Accordingly, <code>System.import</code> returns a promise and we must wait for that promise to resolve. Only then can Jasmine start evaluating the imported tests.</p> <h3 id=\"window-onload\">window.onload</h3> <p>Jasmine doesn't have a <code>start</code> method. It wires its own start to the browser window's <code>load</code> event. That makes sense if we're loading our tests with script tags. The browser raises the <code>load</code> event when it finishes loading all scripts.</p> <p>But we're not loading test scripts inline anymore. We're using the SystemJS module loader and it won't be done until long after the browser raised the <code>load</code> event. Meanwhile, Jasmine started and ran to completion … with no tests to evaluate … before the import completed.</p> <p>So we must wait until the import completes and only then call the window <code>onLoad</code> handler. Jasmine re-starts, this time with our imported test queued up.</p> <h2 id=\"what-s-next-\">What's Next?</h2> <p>We are able to test a part of our application with simple Jasmine tests. The part was a stand-alone interface that made no mention or use of Angular.</p> <p>That's not rare but it's not typical either. Most of our application parts make some use of the Angular framework. Let's test a <em>pipe</em> class that does rely on Angular.</p> \n<h1 id=\"pipe-testing\">Pipe driven development</h1> <p>We’ll test an Angular pipe in this chapter.</p> <p>An Angular pipe is a declarative way in HTML to transform some input into some displayable output.</p> <p>We don't have a pipe though, since in Tour of Heroes we didn't create any pipes. It uses a pipe though, the <code>uppercase</code> pipe that comes with Angular 2.</p> <p>We can make our own <code>my-uppercase</code> pipe that does exactly the same as the <code>uppercase</code> pipe and test that.</p> <p>Since we're getting ready to write some code we want to test, let's take this opportunity to talk just a little bit about <a href=\"https://en.wikipedia.org/wiki/Test-driven_development\">Test Driven Development</a>. There's a lot written about this topic so we don't want to have an exhaustive description here, but rather a practical application.</p> <p>We already know <em>exactly</em> what we want the <code>uppercase</code> pipe to do. We could say our ...expectations... of it are very well defined.</p> <p>We always use our expectations to guide development, but sometimes it's hard to see the forest for the trees when we're right in the middle of coding. This is especially evident in larger tasks.</p> <p>So one thing we can do is put those expectations down as cold hard test code. We were going to test things manually anyway, so doing it <em>before</em> we have even one line of code isn't going to hurt. </p> <p>Worst thing that can happen is have that test fail, but on the way to fixing it we'll end up creating our pipe. So in a sense, the failing test will <em>tell you what it wants</em> to pass.</p> <p>We're just putting down expectations, nothing more. If we were to put them down on paper, they would look like this:</p> <pre><code>  MyUppercasePipe\n    transforms \"abc\" to \"ABC\"\n    transforms \"abc def\" to \"ABC DEF\"\n    leaves \"ABC DEF\" unchanged\n</code></pre>\n<p>All we need to know to put down our expectations as code is how a pipe class looks like from the outside. From the <a href=\"pipes#custom-pipes\">pipe developer guide</a> we know that a pipe implements a <code>transform</code> method. </p> <p>Putting it down as Jasmine expectations, they would look something like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">it('transforms \"abc\" to \"ABC\"', () =&gt; {\n  expect(pipe.transform('abc')).toEqual('ABC');\n});\n\nit('transforms \"abc def\" to \"ABC DEF\"', () =&gt; {\n  expect(pipe.transform('abc def')).toEqual('ABC DEF');\n});\n\nit('leaves \"ABC DEF\" unchanged', () =&gt; {\n  expect(pipe.transform('ABC DEF')).toEqual('ABC DEF');\n});\n</pre>\n<p>In this chapter we will:</p> <ul> <li>create a test before creating a class</li> <li>load multiple test files in our test harness, using system.js</li> <li>add the Angular 2 library to our test harness</li> <li>watch the new test fail, and fix it</li> </ul> <div class=\"callout is-helpful\">\n<header>Prior Knowledge</header><p>The Unit Testing chapters build upon each other. We recommend reading them in order. We're also assuming that you're already comfortable with basic Angular 2 concepts and the tools we introduced in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> and the <a href=\"../tutorial/index\">Tour of Heroes</a> tutorial such as <code>npm</code>, <code>gulp</code>, and <code>lite-server</code>.</p> </div>\n<h2 id=\"add-another-spec-file\">Add another spec file</h2> <p><strong>Create</strong> a <code>my-uppercase.pipe.spec.ts</code> in <code>app/</code>.</p> <p><strong>Stop and restart the TypeScript compiler</strong> to ensure we compile the new file.</p> <p><strong>Add</strong> the following lines of rather obvious Jasmine test code.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/my-uppercase.pipe.spec.ts\">// app/my-uppercase.pipe.spec.ts\n\nimport { MyUppercasePipe } from './my-uppercase.pipe';\n\ndescribe('MyUppercasePipe', () =&gt; {\n  let pipe: MyUppercasePipe;\n\n  beforeEach(() =&gt; {\n    pipe = new MyUppercasePipe();\n  });\n\n  it('transforms \"abc\" to \"ABC\"', () =&gt; {\n    expect(pipe.transform('abc')).toEqual('ABC');\n  });\n\n  it('transforms \"abc def\" to \"ABC DEF\"', () =&gt; {\n    expect(pipe.transform('abc def')).toEqual('ABC DEF');\n  });\n\n  it('leaves \"ABC DEF\" unchanged', () =&gt; {\n    expect(pipe.transform('ABC DEF')).toEqual('ABC DEF');\n  });\n});\n</pre>\n<p>Note that each test is short (one line in our case). It has a clear label that accurately describes the test. And it makes exactly one expectation.</p> <p>Anyone can read these tests and understand quickly what the test does and what the pipe does. If one of the tests fails, we know which expected behavior is no longer true. We’ll have little trouble maintaining these tests and adding more like them as we encounter new conditions to explore.</p> <p>That’s the way we like our tests!</p> <h2 id=\"add-this-spec-to-unit-tests-html-\">Add this spec to <code>unit-tests.html</code>\n</h2> <p>Now let’s wire our new spec file into the HTML test harness.</p> <p>Open <code>unit-tests.html</code>. Find <code>System.import('app/hero.spec')</code>.</p> <p>Hmm. We can’t just add <code>System.import('app/my-uppercase.pipe.spec')</code>.</p> <p>The first <code>System.import</code> returns a promise as does this second import. We can’t run any of the Jasmine tests until <strong>both imports are finished</strong>.</p> <p>Fortunately, we can create a new <code>Promise</code> that wraps both import promises and waits for both to finish loading.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;script&gt;\n  // #2. Import the spec files explicitly\n  Promise.all([\n    System.import('app/hero.spec'),\n    System.import('app/my-uppercase.pipe.spec')\n  ])\n\n    // #3. wait for all imports to load ...\n    //     then re-execute `window.onload` which\n    //     triggers the Jasmine test-runner start\n    //     or explain what went wrong.\n    .then(window.onload)\n    .catch(console.error.bind(console));\n&lt;/script&gt;\n</pre>\n<p>We have a pattern for adding new tests.</p> <p>In future, when we add a new spec, we add another <code>System.import('app/some.spec')</code> to the array argument passed to <code>Promise.all</code>.</p> <p>Try it. The browser should refresh and show the following in the console:</p> <pre format=\"\" language=\"html\" escape=\"html\" data-language=\"html\">GET http://localhost:8080/app/my-uppercase.pipe.js 404 (Not Found)\n</pre>\n<p>Our test failed, as expected. We're importing something that doesn't exist and our test fails saying that. All is going according to plan.</p> <h2 id=\"the-pipe-if-you-please\">The pipe, if you please</h2> <p>The test is asking for a pipe, and we shall deliver. </p> <p><strong>Create</strong> a <code>my-uppercase.pipe.ts</code> in <code>app/</code>.</p> <p><strong>Stop and restart the TypeScript compiler</strong> to ensure we compile the new file.</p> <p><strong>Add</strong> a basic pipe that doesn't do anything. We know how to make strings uppercase, but we since we're letting the test take the lead let's wait for it to tell us what's next. Maybe it'll surprise us.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/my-uppercase.pipe.ts\">// app/my-uppercase.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({ name: 'my-uppercase' })\nexport class MyUppercasePipe implements PipeTransform {\n  transform(value: string) {\n    return value;\n  }\n}\n</pre>\n<p>Reload our test page and...</p> <pre format=\"\" language=\"html\" escape=\"html\" data-language=\"html\">GET http://localhost:8080/angular2/core 404 (Not Found)\n</pre>\n<h2 id=\"the-angular-library-if-you-please\">The Angular library, if you please</h2> <p>Looking back at <code>unit-tests.html</code> we realize that we have not loaded the Angular library. Yet we were able to load and test the application’s <code>Hero</code> interface.</p> <p><strong>We were lucky!</strong> The <code>Hero</code> interface has no dependence on Angular. If it had depended on Angular, we’d still be staring at the Jasmine “big-time fail” screen:</p> <img src=\"https://angular.io/resources/images/devguide/testing-an-angular-pipe/big-time-fail-screen.png\" alt=\"Jasmine's' big time fail screen\"><p>We are writing an Angular application after all and we were going to need Angular sooner or later. That time has come.</p> <p><code>MyUppercasePipe</code> depends on Angular as is clear in the first few lines:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Pipe, PipeTransform } from '@angular/core';\n</pre>\n<p><strong>Open</strong> <code>unit-tests.html</code></p> <p><strong>Find</strong> the <code>&lt;!-- #1. add the system.js library --&gt;</code> comment.</p> <p><strong>Replace</strong> the scripts tags beneath it with the all the needed angular scripts:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;!-- #1. add the system.js and angular libraries --&gt;\n  &lt;script src=\"node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n  &lt;script src=\"node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n\n  &lt;script src=\"systemjs.config.js\"&gt;&lt;/script&gt;\n</pre>\n<p>We should now be ready to see our 3 expectations fail when reloading our test page.</p> <img src=\"https://angular.io/resources/images/devguide/testing-an-angular-pipe/two-failures.png\" alt=\"2 failed tests\"><h2 id=\"uppercase-if-you-please\">Uppercase, if you please</h2> <p>The first two tests that passed were our old <code>hero</code> interface tests, so it makes sense that those passed. Of our three new expectations, one still passed though.</p> <pre><code>  MyUppercasePipe\n    transforms \"abc\" to \"ABC\"\n    transforms \"abc def\" to \"ABC DEF\"\n    leaves \"ABC DEF\" unchanged\n</code></pre>\n<p>Ah but of course! Our simple pipe doesn't transform the input at all, and the third test expected input to not be changed.</p> <p>All we have to do now is actually transform text to uppercase in our pipe.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">transform(value: string) {\n  return value.toUpperCase();\n}\n</pre>\n<p>Are we done now?</p> <img src=\"https://angular.io/resources/images/devguide/testing-an-angular-pipe/zero-failures.png\" alt=\"0 failed tests\"><p>The glorious green is back with us again!</p> <p>We tried a bit of test driven development and it seems to have guided us to success.</p> <p>But it's not always feasible. For instance, sometimes we need to write tests for existing functionality, like what we're about to do with the rest of Tour of Heroes. </p> <p>If we are writing new code though, writing tests might just be what we need to help us track our progress and keep the end result in sight at all times.</p> <h2 id=\"what-s-next-\">What’s Next?</h2> <p>Now we can test parts of our application that we <em>load</em> asynchronously with system.js.</p> <p>What about testing parts that <em>are themselves asynchronous</em>?</p> <p>Let's test a service with a public asynchronous method that fetches heroes from a remote server.</p> <div class=\"alert is-important\">\n<p>The testing chapter is still under development. Please bear with us as we both update and complete it.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/testing.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/testing.html</a>\n  </p>\n</div>\n","guide/webpack":"<h1 class=\"hero-title text-display-1 \">Webpack: an introduction</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Create your Angular 2 applications with a Webpack based tooling</p></div>\n<p><a href=\"https://webpack.github.io/\"><strong>Webpack</strong></a> is a popular module bundler, a tool for bundling application source code in convenient <em>chunks</em> and for loading that code from a server into a browser.</p> <p>It's an excellent alternative to the <em>SystemJS</em> approach we use throughout the documentation. In this guide we get a taste of Webpack and how to use it with Angular 2 applications.</p>  <h2 id=\"table-of-contents\">Table of contents</h2> <p><a href=\"#what-is-webpack\">What is Webpack?</a></p> <ul> <li><a href=\"#entries-outputs\">Entries and outputs</a></li> <li><a href=\"#loaders\">Loaders</a></li> <li><a href=\"#plugins\">Plugins</a></li> </ul> <p><a href=\"#configure-webpack\">Configuring Webpack</a></p> <ul> <li><a href=\"#common-configuration\">Common configuration</a></li> <li><a href=\"#development-configuration\">Development configuration</a></li> <li><a href=\"#production-configuration\">Production configuration</a></li> <li><a href=\"#test-configuration\">Test configuration</a></li> </ul> <p><a href=\"#try\">Trying it out</a></p> <p><a href=\"#conclusions\">Conclusions</a></p> <h2 id=\"what-is-webpack\">What is Webpack?</h2> <p>Webpack is a powerful module bundler. A <em>bundle</em> is a JavaScript file that incorporate <em>assets</em> that <em>belong</em> together and should be served to the client in a response to a single file request. A bundle can include JavaScript, CSS styles, HTML, and almost any other kind of file.</p> <p>Webpack roams over your application source code, looking for <code>import</code> statements, building a dependency graph, and emitting one (or more) <em>bundles</em>. With plugin \"loaders\" Webpack can preprocess and minify different non-JavaScript files such as TypeScript, SASS, and LESS files. </p> <p>We determine what Webpack does and how it does it with a JavaScript configuration file, <code>webpack.config.js</code>.</p> <h3 id=\"entries-outputs\">Entries and outputs</h3> <p>We feed Webpack with one or more <em>entry</em> files and let it find and incorporate the dependencies that radiate from those entries. In this example, we start from the application's root file, <code>src/app.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"webpack.config.js (single entry)\">// webpack.config.js (single entry)\n\nentry: {\n  app: 'src/app.ts'\n}\n</pre>\n<p>Webpack inspects that file and traverses its <code>import</code> dependencies recursively.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"src/app.ts\">// src/app.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  ...\n})\nexport class AppComponent {}\n</pre>\n<p>Here it sees that we're importing <em>@angular/core</em> so it adds that to its dependency list for (potential) inclusion in the bundle. It opens <em>@angular/core</em> and follows <em>its</em> network of <code>import</code> statements until it has build the complete dependency graph from <code>app.ts</code> down.</p> <p>Then it <strong>outputs</strong> these files to the <code>app.js</code> <em>bundle file</em> designated in configuration:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"webpack.config.js (single output)\">// webpack.config.js (single output)\n\noutput: {\n  filename: 'app.js'\n}\n</pre>\n<p>This <code>app.js</code> output bundle is a single JavaScript file that contains our application source and its dependencies. We'll load it later with a &lt;script&gt; tag in our index.html. </p> <h4 id=\"multiple-bundles\">Multiple bundles</h4> <p>We probably do not want one giant bundle of everything. We'll likely prefer to separate our volatile application app code from comparatively stable vendor code modules.</p> <p>We change the configuration so that we have two entry points, <code>app.ts</code> and <code>vendor.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"webpack.config.js (two entries)\">// webpack.config.js (two entries)\n\nentry: {\n  app: 'src/app.ts',\n  vendor: 'src/vendor.ts'\n},\n\noutput: {\n  filename: '[name].js'\n}\n</pre>\n<p>Webpack constructs two separate dependency graphs and emits <em>two</em> bundle files, one called <code>app.js</code> containing only our application code and another called <code>vendor.js</code> with all the vendor dependencies.</p> <div class=\"l-sub-section\">\n<p>The <code>[name]</code> in the output name is a Webpack <em>placeholder</em> that is replaced with the entry names. <code>app</code> and <code>vendor</code> respectively.</p> <p>We need a plugin to make this work; we'll <a href=\"#commons-chunk-plugin\">cover that later</a> in the chapter.</p> </div>\n<p>We met <code>app.ts</code> earlier. We wrote <code>vendor.ts</code> such that it imports the vendor modules we need:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"src/vendor.ts\">// src/vendor.ts\n\n// Angular 2\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n</pre>\n<h3 id=\"loaders\">Loaders</h3> <p>Webpack can bundle any kind of file: JavaScript, TypeScript, CSS, SASS, LESS, images, html, fonts, whatever. Webpack itself doesn't know what to do with a non-JavaScript file. We teach it to process such files into JavaScript with <em>loaders</em>. Here we configure loaders for TypeScript and CSS:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"webpack.config.js (two entries)\">// webpack.config.js (two entries)\n\nloaders: [\n  {\n    test: /\\.ts$/\n    loaders: 'ts'\n  },\n  {\n    test: /\\.css$/\n    loaders: 'style!css'\n  }\n]\n</pre>\n<p>As Webpack encounters <code>import</code> statements like these ...</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { AppComponent } from './app.component.ts';\nimport 'uiframework/dist/uiframework.css';\n</pre>\n<p>... it applies the <code>test</code> RegEx patterns. When a pattern matches the filename, Webpack processes the file with the associated loader. </p> <p>The first <code>import</code> file matches the <code>.ts</code> pattern so Webpack processes it with the <code>ts</code> (TypeScript) loader. The imported file doesn't match the second pattern so its loader is ignored. </p> <p>The second <code>import</code> matches the second <code>.css</code> pattern for which we have <em>two</em> loaders chained by the (!) character. Webpack applies chained loaders <em>right to left</em> so it applies the <code>css</code> loader first (to flatten CSS <code>@import</code> and <code>url(...)</code> statements) and then the <code>style</code> loader (to append the css inside <em>&lt;style&gt;</em> elements on the page).</p> <h3 id=\"plugins\">Plugins</h3> <p>Webpack has a build pipeline with well-defined phases. We tap into that pipeline with plugins such as the <code>uglify</code> minification plugin:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">plugins: [\n  new webpack.optimize.UglifyJsPlugin()\n]\n</pre>\n<h2 id=\"configure-webpack\">Configure Webpack</h2> <p>After that brief orientation, we are ready to build our own Webpack configuration for Angular 2 apps. </p> <p>Begin by setting up the development environment.</p> <p>Create a <strong>new project folder</strong></p> <pre format=\"\">mkdir angular2-webpack\ncd    angular2-webpack\n</pre>\n<p>Add these files to the root directory:</p> <pre language=\"json\" name=\"package.json\" format=\"linenums\" data-language=\"json\">// package.json\n\n{\n  \"name\": \"angular2-webpack\",\n  \"version\": \"1.0.0\",\n  \"description\": \"A webpack starter for angular 2\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --inline --progress --port 8080\",\n    \"test\": \"karma start\",\n    \"build\": \"rimraf dist &amp;&amp; webpack --config config/webpack.prod.js --progress --profile --bail\",\n    \"postinstall\": \"typings install\"\n  },\n  \"license\": \"MIT\",\n  \"dependencies\": {\n    \"@angular/common\": \"2.0.0-rc.5\",\n    \"@angular/compiler\": \"2.0.0-rc.5\",\n    \"@angular/core\": \"2.0.0-rc.5\",\n    \"@angular/forms\": \"0.3.0\",\n    \"@angular/http\": \"2.0.0-rc.5\",\n    \"@angular/platform-browser\": \"2.0.0-rc.5\",\n    \"@angular/platform-browser-dynamic\": \"2.0.0-rc.5\",\n    \"@angular/router\": \"3.0.0-rc.1\",\n    \"core-js\": \"^2.4.0\",\n    \"reflect-metadata\": \"0.1.2\",\n    \"rxjs\": \"5.0.0-beta.6\",\n    \"zone.js\": \"0.6.12\"\n  },\n  \"devDependencies\": {\n    \"angular2-template-loader\": \"^0.4.0\",\n    \"css-loader\": \"^0.23.1\",\n    \"extract-text-webpack-plugin\": \"^1.0.1\",\n    \"file-loader\": \"^0.8.5\",\n    \"html-loader\": \"^0.4.3\",\n    \"html-webpack-plugin\": \"^2.15.0\",\n    \"jasmine-core\": \"^2.4.1\",\n    \"karma\": \"^0.13.22\",\n    \"karma-jasmine\": \"^0.3.8\",\n    \"karma-phantomjs-launcher\": \"^1.0.0\",\n    \"karma-sourcemap-loader\": \"^0.3.7\",\n    \"karma-webpack\": \"^1.7.0\",\n    \"null-loader\": \"^0.1.1\",\n    \"phantomjs-prebuilt\": \"^2.1.7\",\n    \"raw-loader\": \"^0.5.1\",\n    \"rimraf\": \"^2.5.2\",\n    \"style-loader\": \"^0.13.1\",\n    \"ts-loader\": \"^0.8.1\",\n    \"typescript\": \"^1.8.10\",\n    \"typings\": \"^1.0.4\",\n    \"webpack\": \"^1.13.0\",\n    \"webpack-dev-server\": \"^1.14.1\",\n    \"webpack-merge\": \"^0.14.0\"\n  }\n}\n</pre>\n<pre language=\"json\" name=\"typings.json\" format=\"linenums\" data-language=\"json\">// typings.json\n\n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160602141332\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\",\n    \"node\": \"registry:dt/node#6.0.0+20160807145350\"\n  }\n}\n</pre>\n<pre language=\"json\" name=\"tsconfig.json\" format=\"linenums\" data-language=\"json\">// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n</pre>\n<pre language=\"js\" name=\"webpack.config.js\" format=\"linenums\" data-language=\"js\">// webpack.config.js\n\nmodule.exports = require('./config/webpack.dev.js');\n</pre>\n<pre language=\"js\" name=\"karma.conf.js\" format=\"linenums\" data-language=\"js\">// karma.conf.js\n\nmodule.exports = require('./config/karma.conf.js');\n</pre>\n<pre language=\"js\" name=\"config/helpers.js\" format=\"linenums\" data-language=\"js\">// config/helpers.js\n\nvar path = require('path');\n\nvar _root = path.resolve(__dirname, '..');\n\nfunction root(args) {\n  args = Array.prototype.slice.call(arguments, 0);\n  return path.join.apply(path, [_root].concat(args));\n}\n\nexports.root = root;\n</pre>\n<div class=\"l-sub-section\">\n<p>Many of these files and much of their content should be familiar from other Angular 2 documentation chapters.</p> <p>Learn about the <code>package.json</code> in the <a href=\"npm-packages\">npm packages</a> chapter. We require packages for Webpack use in addition to the ones listed in that chapter.</p> <p>Learn about <code>tsconfig.json</code> and <code>typings.json</code> in the <a href=\"typescript-configuration\">Typescript configuration</a> chapter.</p> </div>\n<p>Open a terminal/console window and install the <em>npm</em> packages with <code>npm install</code>.</p> <h3 id=\"common-configuration\">Common Configuration</h3> <p>We will define separate configurations for development, production, and test environments. All three have some configuration in common. We'll gather that common configuration in a separate file called <code>webpack.common.js</code>.</p> <p>Let's see the entire file and then walk through it a section at a time:</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.common.js\">// config/webpack.common.js\n\nvar webpack = require('webpack');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar helpers = require('./helpers');\n\nmodule.exports = {\n  entry: {\n    'polyfills': './src/polyfills.ts',\n    'vendor': './src/vendor.ts',\n    'app': './src/main.ts'\n  },\n\n  resolve: {\n    extensions: ['', '.js', '.ts']\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loaders: ['ts', 'angular2-template-loader']\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html'\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'file?name=assets/[name].[hash].[ext]'\n      },\n      {\n        test: /\\.css$/,\n        exclude: helpers.root('src', 'app'),\n        loader: ExtractTextPlugin.extract('style', 'css?sourceMap')\n      },\n      {\n        test: /\\.css$/,\n        include: helpers.root('src', 'app'),\n        loader: 'raw'\n      }\n    ]\n  },\n\n  plugins: [\n    new webpack.optimize.CommonsChunkPlugin({\n      name: ['app', 'vendor', 'polyfills']\n    }),\n\n    new HtmlWebpackPlugin({\n      template: 'src/index.html'\n    })\n  ]\n};\n</pre>\n<p>Webpack is a NodeJS-based tool so its configuration is a JavaScript <em>commonjs</em> module file that begins with <code>require</code> statements as such files do. </p> <p>The configuration exports several objects, beginning with the <em>entries</em> described earlier:</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.common.js\">// config/webpack.common.js\n\nentry: {\n  'polyfills': './src/polyfills.ts',\n  'vendor': './src/vendor.ts',\n  'app': './src/main.ts'\n},\n</pre>\n<p>We are splitting our application into three bundles:</p> <ul> <li>polyfills - the standard polyfills we require to run Angular 2 applications in most modern browsers.</li> <li>vendor - the vendor files we need: Angular 2, lodash, bootstrap.css...</li> <li>app - our application code.</li> </ul> <div class=\"callout is-critical\">\n<header>Loading polyfills</header><p>Load Zone.js early, immediately after the other ES6 and metadata shims.</p> </div>\n<p>Our app will <code>import</code> dozens if not hundreds of JavaScript and TypeScript files. We <em>might</em> write <code>import</code> statements with explicit extensions as in this example:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { AppComponent } from './app.component.ts';\n</pre>\n<p>But most of our <code>import</code> statements won't mention the extension at all. So we tell Webpack to <em>resolve</em> module file requests by looking for matching files with</p> <ul> <li>an explicit extension (signified by the empty extension string, <code>''</code>) or </li> <li>\n<code>.js</code> extension (for regular JavaScript files and pre-compiled TypeScript files) or </li> <li>\n<code>.ts</code> extension.</li> </ul> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.common.js\">// config/webpack.common.js\n\nresolve: {\n  extensions: ['', '.js', '.ts']\n},\n</pre>\n<div class=\"l-sub-section\">\n<p>We could add <code>.css</code> and <code>.html</code> later if we want Webpack to resolve extension-less files with <em>those</em> extension too.</p> </div>\n<p>Next we specify the loaders:</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.common.js\">// config/webpack.common.js\n\nmodule: {\n  loaders: [\n    {\n      test: /\\.ts$/,\n      loaders: ['ts', 'angular2-template-loader']\n    },\n    {\n      test: /\\.html$/,\n      loader: 'html'\n    },\n    {\n      test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n      loader: 'file?name=assets/[name].[hash].[ext]'\n    },\n    {\n      test: /\\.css$/,\n      exclude: helpers.root('src', 'app'),\n      loader: ExtractTextPlugin.extract('style', 'css?sourceMap')\n    },\n    {\n      test: /\\.css$/,\n      include: helpers.root('src', 'app'),\n      loader: 'raw'\n    }\n  ]\n},\n</pre>\n<ul> <li>ts - a loader to transpile our Typescript code to ES5, guided by the <code>tsconfig.json</code> file</li> <li>angular2-template-loader - loads angular components' template and styles</li> <li>html - for component templates</li> <li>images/fonts - Images and fonts are bundled as well.</li> <li>css - The pattern matches application-wide styles; the second handles component-scoped styles (the ones specified in a component's <code>styleUrls</code> metadata property)</li> </ul> <div class=\"l-sub-section\">\n<p>The first pattern excludes <code>.css</code> files within the <code>/src/app</code> directories where our component-scoped styles sit. It includes only <code>.css</code> files located at or above <code>/src</code>; these are the application-wide styles. The <code>ExtractTextPlugin</code> (described below) applies the <code>style</code> and <code>css</code> loaders to these files.</p> <p>The second pattern filters for component-scoped styles and loads them as strings via the <code>raw</code> loader — which is what Angular expects to do with styles specified in a <code>styleUrls</code> metadata property.</p> </div>\n<div class=\"l-sub-section\">\n<p>Multiple loaders can be also chained using the array notation.</p> </div>\n<p>Finally we add two plugins:</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.common.js\">// config/webpack.common.js\n\nplugins: [\n  new webpack.optimize.CommonsChunkPlugin({\n    name: ['app', 'vendor', 'polyfills']\n  }),\n\n  new HtmlWebpackPlugin({\n    template: 'src/index.html'\n  })\n]\n</pre>\n<h4 id=\"commons-chunk-plugin\"><em>CommonsChunkPlugin</em></h4> <p>We want the <code>app.js</code> bundle to contain only app code and the <code>vendor.js</code> bundle to contain only the vendor code. </p> <p>Our application code <code>imports</code> vendor code. Webpack is not smart enough to keep the vendor code out of the <code>app.js</code> bundle. We rely on the <code>CommonsChunkPlugin</code> to do that job. </p> <div class=\"l-sub-section\">\n<p>It identifies the hierarchy among three <em>chunks</em>: <code>app</code> -&gt; <code>vendor</code> -&gt; <code>polyfills</code>. Where Webpack finds that <code>app</code> has shared dependencies with <code>vendor</code>, it removes them from <code>app</code>. It would do the same if <code>vendor</code> and <code>polyfills</code> had shared dependencies (which they don't).</p> </div>\n<h4 id=\"html-webpack-plugin\"><em>HtmlWebpackPlugin</em></h4> <p>Webpack generates a number of js and css files. We <em>could</em> insert them into our <code>index.html</code> <em>manually</em>. That would be tedious and error-prone. Webpack can inject those scripts and links for us with the <code>HtmlWebpackPlugin</code>.</p> <h3 id=\"environment-configuration\">Environment-specific configuration</h3> <p>The <code>webpack.common.js</code> configuration file does most of the heavy lifting. We create separate, environment-specific configuration files that build on <code>webpack.common</code> by merging into it the peculiarities particular to their target environments.</p> <p>These files tend to be short and simple.</p> <h3 id=\"development-configuration\">Development Configuration</h3> <p>Here is the development configuration file, <code>webpack.dev.js</code></p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.dev.js\">// config/webpack.dev.js\n\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'cheap-module-eval-source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: 'http://localhost:8080/',\n    filename: '[name].js',\n    chunkFilename: '[id].chunk.js'\n  },\n\n  plugins: [\n    new ExtractTextPlugin('[name].css')\n  ],\n\n  devServer: {\n    historyApiFallback: true,\n    stats: 'minimal'\n  }\n});\n</pre>\n<p>The development build relies on the Webpack development server which we configure near the bottom of the file.</p> <p>Although we tell Webpack to put output bundles in the <code>dist</code> folder, the dev server keeps all bundles in memory; it doesn't write them to disk. So we won't find any files in the <code>dist</code> folder (at least not any generated from <code>this development build</code>).</p> <p>The <code>HtmlWebpackPlugin</code> (added in <code>webpack.common.js</code>) use the <em>publicPath</em> and the <em>filename</em> settings to generate appropriate &lt;script&gt; and &lt;link&gt; tags into the <code>index.html</code>.</p> <p>Our CSS are buried inside our Javascript bundles by default. The <code>ExtractTextPlugin</code> extracts them into external <code>.css</code> files that the <code>HtmlWebpackPlugin</code> inscribes as &lt;link&gt; tags into the <code>index.html</code>.</p> <p>Refer to the Webpack documentation for details on these and other configuration options in this file</p> <p>Grab the app code at the end of this guide and try:</p> <pre format=\"\">npm start\n</pre>\n<h3 id=\"production-configuration\">Production Configuration</h3> <p>Configuration of a <em>production</em> build resembles <em>development</em> configuration ... with a few key changes.</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.prod.js\">// config/webpack.prod.js\n\nvar webpack = require('webpack');\nvar webpackMerge = require('webpack-merge');\nvar ExtractTextPlugin = require('extract-text-webpack-plugin');\nvar commonConfig = require('./webpack.common.js');\nvar helpers = require('./helpers');\n\nconst ENV = process.env.NODE_ENV = process.env.ENV = 'production';\n\nmodule.exports = webpackMerge(commonConfig, {\n  devtool: 'source-map',\n\n  output: {\n    path: helpers.root('dist'),\n    publicPath: '/',\n    filename: '[name].[hash].js',\n    chunkFilename: '[id].[hash].chunk.js'\n  },\n\n  htmlLoader: {\n    minimize: false // workaround for ng2\n  },\n\n  plugins: [\n    new webpack.NoErrorsPlugin(),\n    new webpack.optimize.DedupePlugin(),\n    new webpack.optimize.UglifyJsPlugin(),\n    new ExtractTextPlugin('[name].[hash].css'),\n    new webpack.DefinePlugin({\n      'process.env': {\n        'ENV': JSON.stringify(ENV)\n      }\n    })\n  ]\n});\n</pre>\n<p>We don't use a development server. We're expected to deploy the application and its dependencies to a real production server.</p> <p>This time the output bundle files are physically placed in the <code>dist</code> folder.</p> <p>Webpack generates file names with cache-busting hash. Thanks to the <code>HtmlWebpackPlugin</code> we don't have to update the <code>index.html</code> file when the hashes changes.</p> <p>There are additional plugins:</p> <ul> <li>\n<strong>NoErrorsPlugin</strong> - stops the build if there is any error.</li> <li>\n<strong>DedupePlugin</strong> - detects identical (and nearly identical) files and removes them from the output.</li> <li>\n<strong>UglifyJsPlugin</strong> - minifies the bundles.</li> <li>\n<strong>ExtractTextPlugin</strong> - extracts embedded css as external files, adding cache-busting hash to the filename.</li> <li>\n<strong>DefinePlugin</strong> - use to define environment variables that we can reference within our application.</li> </ul> <p>Thanks to the <em>DefinePlugin</em> and the <code>ENV</code> variable defined at top, we can enable Angular 2 production mode like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">if (process.env.ENV === 'production') {\n  enableProdMode();\n}\n</pre>\n<p>Grab the app code at the end of this guide and try:</p> <pre format=\"\">npm run build\n</pre>\n<h3 id=\"test-configuration\">Test Configuration</h3> <p>We don't need much configuration to run unit tests. We don't need the loaders and plugins that we declared for our development and production builds. We probably don't need to load and process <code>css</code> files for unit tests and doing so would slow us down; we'll use the <code>null</code> loader for all CSS.</p> <p>We could merge our test configuration into the <code>webpack.common</code> configuration and override the parts we don't want or need. But it might be simpler to start over with a completely fresh configuration.</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/webpack.test.js\">// config/webpack.test.js\n\nmodule.exports = {\n  devtool: 'inline-source-map',\n\n  resolve: {\n    extensions: ['', '.ts', '.js']\n  },\n\n  module: {\n    loaders: [\n      {\n        test: /\\.ts$/,\n        loaders: ['ts', 'angular2-template-loader']\n      },\n      {\n        test: /\\.html$/,\n        loader: 'html'\n\n      },\n      {\n        test: /\\.(png|jpe?g|gif|svg|woff|woff2|ttf|eot|ico)$/,\n        loader: 'null'\n      },\n      {\n        test: /\\.css$/,\n        loader: 'null'\n      }\n    ]\n  }\n}\n</pre>\n<p>Here's our karma configuration:</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/karma.conf.js\">// config/karma.conf.js\n\nvar webpackConfig = require('./webpack.test');\n\nmodule.exports = function (config) {\n  var _config = {\n    basePath: '',\n\n    frameworks: ['jasmine'],\n\n    files: [\n      {pattern: './config/karma-test-shim.js', watched: false}\n    ],\n\n    preprocessors: {\n      './config/karma-test-shim.js': ['webpack', 'sourcemap']\n    },\n\n    webpack: webpackConfig,\n\n    webpackMiddleware: {\n      stats: 'errors-only'\n    },\n\n    webpackServer: {\n      noInfo: true\n    },\n\n    reporters: ['progress'],\n    port: 9876,\n    colors: true,\n    logLevel: config.LOG_INFO,\n    autoWatch: false,\n    browsers: ['PhantomJS'],\n    singleRun: true\n  };\n\n  config.set(_config);\n};\n</pre>\n<p>We're telling Karma to use webpack to run the tests. </p> <p>We don't precompile our TypeScript; Webpack transpiles our Typescript files on the fly, in memory, and feeds the emitted JS directly to Karma. There are no temporary files on disk.</p> <p>The <code>karma-test-shim</code> tells Karma what files to pre-load and primes the Angular test framework with test versions of the providers that every app expects to be pre-loaded.</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"config/karma-test-shim.js\">// config/karma-test-shim.js\n\nError.stackTraceLimit = Infinity;\n\nrequire('core-js/es6');\nrequire('reflect-metadata');\n\nrequire('zone.js/dist/zone');\nrequire('zone.js/dist/long-stack-trace-zone');\nrequire('zone.js/dist/jasmine-patch');\nrequire('zone.js/dist/async-test');\nrequire('zone.js/dist/fake-async-test');\n\nvar appContext = require.context('../src', true, /\\.spec\\.ts/);\n\nappContext.keys().forEach(appContext);\n\nvar testing = require('@angular/core/testing');\nvar browser = require('@angular/platform-browser-dynamic/testing');\n\ntesting.setBaseTestProviders(\n  browser.TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n  browser.TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS\n);\n</pre>\n<p>Notice that we do <em>not</em> load our application code explicitly. We tell Webpack to find and load our test files (the files ending in <code>.spec.ts</code>). Each spec file imports all — and only — the application source code that it tests. Webpack loads just <em>those</em> specific application files and ignores the other files that we aren't testing.</p> <p>Grab the app code at the end of this guide and try:</p> <pre format=\"\">npm test\n</pre>\n<h2 id=\"try\">Trying it out</h2> <p>Here is the source code for a small application that we can bundle with the Webpack techniques we learned in this chapter.</p> <pre language=\"html\" name=\"src/index.html\" format=\"linenums\" data-language=\"html\">&lt;!-- src/index.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Angular With Webpack&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;Loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<pre language=\"ts\" name=\"src/main.ts\" format=\"linenums\" data-language=\"typescript\">// src/main.ts\n\nimport { browserDynamicPlatform } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\n\nimport { AppModule } from './app/app.module';\n\nif (process.env.ENV === 'production') {\n  enableProdMode();\n}\n\nbrowserDynamicPlatform().bootstrapModule(AppModule);\n</pre>\n<pre language=\"css\" name=\"public/css/styles.css\" format=\"linenums\" data-language=\"css\">/* public/css/styles.css */\n\nbody {\n    background: #0147A7;\n    color: #fff;\n}\n</pre>\n<pre language=\"ts\" name=\"src/app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// src/app/app.component.ts\n\nimport { Component } from '@angular/core';\n\nimport '../../public/css/styles.css';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n</pre>\n<pre language=\"html\" name=\"src/app/app.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- src/app/app.component.html --&gt;\n\n&lt;main&gt;\n  &lt;h1&gt;Hello from Angular 2 App with Webpack&lt;/h1&gt;\n\n  &lt;img src=\"../../public/images/angular.png\"&gt;\n&lt;/main&gt;\n</pre>\n<pre language=\"css\" name=\"src/app/app.component.css\" format=\"linenums\" data-language=\"css\">/* src/app/app.component.css */\n\nmain {\n  padding: 1em;\n  font-family: Arial, Helvetica, sans-serif;\n  text-align: center;\n  margin-top: 50px;\n  display: block;\n}\n</pre>\n<pre language=\"ts\" name=\"src/app/app.component.spec.ts\" format=\"linenums\" data-language=\"typescript\">// src/app/app.component.spec.ts\n\nimport {\n  addProviders,\n  inject,\n} from '@angular/core/testing';\n\nimport { AppComponent } from './app.component';\n\ndescribe('App', () =&gt; {\n  beforeEach(() =&gt; {\n    addProviders([\n      AppComponent\n    ]);\n  });\n\n  it ('should work', inject([AppComponent], (app: AppComponent) =&gt; {\n    // Add real test here\n    expect(2).toBe(2);\n  }));\n});\n</pre>\n<pre language=\"ts\" name=\"src/app/app.module.ts\" format=\"linenums\" data-language=\"typescript\">// src/app/app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>The <code>app.component.html</code> displays this downloadable Angular logo <a href=\"https://raw.githubusercontent.com/angular/angular.io/master/public/resources/images/logos/angular2/angular.png\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/angular/angular.io/master/public/resources/images/logos/angular2/angular.png\" height=\"40px\" title=\"download Angular logo\"></a>. </p>\n<pre language=\"ts\" name=\"src/vendor.ts\" format=\"linenums\" data-language=\"typescript\">// src/vendor.ts\n\n// Angular 2\nimport '@angular/platform-browser';\nimport '@angular/platform-browser-dynamic';\nimport '@angular/core';\nimport '@angular/common';\nimport '@angular/http';\nimport '@angular/router';\n\n// RxJS\nimport 'rxjs';\n\n// Other vendors for example jQuery, Lodash or Bootstrap\n// You can import js, ts, css, sass, ...\n</pre>\n<pre language=\"ts\" name=\"src/polyfills.ts\" format=\"linenums\" data-language=\"typescript\">// src/polyfills.ts\n\nimport 'core-js/es6';\nimport 'core-js/es7/reflect';\nrequire('zone.js/dist/zone');\n\nif (process.env.ENV === 'production') {\n  // Production\n\n} else {\n  // Development\n\n  Error['stackTraceLimit'] = Infinity;\n\n  require('zone.js/dist/long-stack-trace-zone');\n}\n</pre>\n<h3 id=\"highlights-\">Highlights:</h3> <ul> <li>\n<p>There are no &lt;script&gt; or &lt;link&gt; tags in the <code>index.html</code>. The <code>HtmlWebpackPlugin</code> inserts them dynamically at runtime.</p> </li> <li>\n<p>The <code>AppComponent</code> in <code>app.component.ts</code> imports the application-wide css with a simple <code>import</code> statement.</p> </li> <li>\n<p>The <code>AppComponent</code> itself has its own html template and css file. WebPack loads them with calls to <code>require()</code>. Webpack stashes those component-scoped files in the <code>app.js</code> bundle too. We don't see those calls in our source code; they're added behind the scenes by the <code>angular2-template-loader</code> plug-in. </p> </li> <li>\n<p>The <code>vendor.ts</code> consists of vendor dependency <code>import</code> statements that drive the <code>vendor.js</code> bundle. The application imports these modules too; they'd be duplicated in the <code>app.js</code> bundle if the <code>CommonsChunkPlugin</code> hadn't detected the overlap and removed them from <code>app.js</code>.</p> </li> </ul> <h2 id=\"conclusions\">Conclusions</h2> <p>We've learned just enough Webpack to configurate development, test and production builds for a small Angular application.</p> <p><em>We could always do more</em>. Search the web for expert advice and expand your Webpack knowledge.</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/webpack.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/webpack.html</a>\n  </p>\n</div>\n","cookbook/component-communication":"<h1 class=\"hero-title text-display-1 \">Component Interaction</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Share information between different directives and components</p></div>\n<p>This cookbook contains recipes for common component communication scenarios in which two or more components share information.</p> <h2 id=\"toc\">Table of contents</h2> <p><a href=\"#parent-to-child\">Pass data from parent to child with input binding</a></p> <p><a href=\"#parent-to-child-setter\">Intercept input property changes with a setter</a></p> <p><a href=\"#parent-to-child-on-changes\">Intercept input property changes with <em>ngOnChanges</em></a></p> <p><a href=\"#child-to-parent\">Parent listens for child event</a></p> <p><a href=\"#parent-to-child-local-var\">Parent interacts with child via a <em>local variable</em></a></p> <p><a href=\"#parent-to-view-child\">Parent calls a <em>ViewChild</em></a></p> <p><a href=\"#bidirectional-service\">Parent and children communicate via a service</a></p> <p><strong>See the <live-example name=\"cb-component-communication\"></live-example></strong>.</p> <h2 id=\"parent-to-child\">Pass data from parent to child with input binding</h2> <p><code>HeroChildComponent</code> has two <strong><em>input properties</em></strong>, typically adorned with <a href=\"../guide/template-syntax#inputs-outputs\">@Input decorations</a>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, Input } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'hero-child',\n  template: `\n    &lt;h3&gt;{{hero.name}} says:&lt;/h3&gt;\n    &lt;p&gt;I, {{hero.name}}, am at your service, {{masterName}}.&lt;/p&gt;\n  `\n})\nexport class HeroChildComponent {\n  @Input() hero: Hero;\n  @Input('master') masterName: string;\n}\n</pre>\n<p>The second <code>@Input</code> aliases the child component property name <code>masterName</code> as <code>'master'</code>.</p> <p>The <code>HeroParentComponent</code> nests the child <code>HeroChildComponent</code> inside an <code>*ngFor</code> repeater, binding its <code>master</code> string property to the child's <code>master</code> alias and each iteration's <code>hero</code> instance to the child's <code>hero</code> property.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component } from '@angular/core';\n\nimport { HEROES } from './hero';\n\n@Component({\n  selector: 'hero-parent',\n  template: `\n    &lt;h2&gt;{{master}} controls {{heroes.length}} heroes&lt;/h2&gt;\n    &lt;hero-child *ngFor=\"let hero of heroes\"\n      [hero]=\"hero\"\n      [master]=\"master\"&gt;\n    &lt;/hero-child&gt;\n  `\n})\nexport class HeroParentComponent {\n  heroes = HEROES;\n  master: string = 'Master';\n}\n</pre>\n<p>The running application displays three heroes:</p> <img src=\"https://angular.io/resources/images/cookbooks/component-communication/parent-to-child.png\" alt=\"Parent-to-child\"><h3 id=\"test-it\">Test it</h3> <p>E2E test that all children were instantiated and displayed as expected:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\nlet _heroNames = ['Mr. IQ', 'Magneta', 'Bombasto'];\nlet _masterName = 'Master';\n\nit('should pass properties to children properly', function () {\n  let parent = element.all(by.tagName('hero-parent')).get(0);\n  let heroes = parent.all(by.tagName('hero-child'));\n\n  for (let i = 0; i &lt; _heroNames.length; i++) {\n    let childTitle = heroes.get(i).element(by.tagName('h3')).getText();\n    let childDetail = heroes.get(i).element(by.tagName('p')).getText();\n    expect(childTitle).toEqual(_heroNames[i] + ' says:');\n    expect(childDetail).toContain(_masterName);\n  }\n});\n// ...\n</pre>\n <h2 id=\"parent-to-child-setter\">Intercept input property changes with a setter</h2> <p>Use an input property setter to intercept and act upon a value from the parent.</p> <p>The setter of the <code>name</code> input property in the child <code>NameChildComponent</code> trims the whitespace from a name and replaces an empty value with default text. </p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'name-child',\n  template: `\n    &lt;h3&gt;\"{{name}}\"&lt;/h3&gt;\n  `\n})\nexport class NameChildComponent {\n  _name: string = '&lt;no name set&gt;';\n\n  @Input()\n  set name(name: string) {\n    this._name = (name &amp;&amp; name.trim()) || '&lt;no name set&gt;';\n  }\n\n  get name() { return this._name; }\n}\n</pre>\n<p>Here's the <code>NameParentComponent</code> demonstrating name variations including a name with all spaces:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'name-parent',\n  template: `\n    &lt;h2&gt;Master controls {{names.length}} names&lt;/h2&gt;\n    &lt;name-child *ngFor=\"let name of names\"\n      [name]=\"name\"&gt;\n    &lt;/name-child&gt;\n  `\n})\nexport class NameParentComponent {\n  // Displays 'Mr. IQ', '&lt;no name set&gt;', 'Bombasto'\n  names = ['Mr. IQ', '   ', '  Bombasto  '];\n}\n</pre>\n<img src=\"https://angular.io/resources/images/cookbooks/component-communication/setter.png\" alt=\"Parent-to-child-setter\"><h3 id=\"test-it\">Test it</h3> <p>E2E tests of input property setter with empty and non-empty names:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\nit('should display trimmed, non-empty names', function () {\n  let _nonEmptyNameIndex = 0;\n  let _nonEmptyName = '\"Mr. IQ\"';\n  let parent = element.all(by.tagName('name-parent')).get(0);\n  let hero = parent.all(by.tagName('name-child')).get(_nonEmptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_nonEmptyName);\n});\n\nit('should replace empty name with default name', function () {\n  let _emptyNameIndex = 1;\n  let _defaultName = '\"&lt;no name set&gt;\"';\n  let parent = element.all(by.tagName('name-parent')).get(0);\n  let hero = parent.all(by.tagName('name-child')).get(_emptyNameIndex);\n\n  let displayName = hero.element(by.tagName('h3')).getText();\n  expect(displayName).toEqual(_defaultName);\n});\n// ...\n</pre>\n <h2 id=\"parent-to-child-on-changes\">Intercept input property changes with <em>ngOnChanges</em>\n</h2> <p>Detect and act upon changes to input property values with the <code>ngOnChanges</code> method of the <code>OnChanges</code> lifecycle hook interface.</p> <div class=\"l-sub-section\">\n<p>May prefer this approach to the property setter when watching multiple, interacting input properties.</p> <p>Learn about <code>ngOnChanges</code> in the <a href=\"../guide/lifecycle-hooks\">LifeCycle Hooks</a> chapter.</p> </div>\n<p>This <code>VersionChildComponent</code> detects changes to the <code>major</code> and <code>minor</code> input properties and composes a log message reporting these changes:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, Input, OnChanges, SimpleChange } from '@angular/core';\n\n@Component({\n  selector: 'version-child',\n  template: `\n    &lt;h3&gt;Version {{major}}.{{minor}}&lt;/h3&gt;\n    &lt;h4&gt;Change log:&lt;/h4&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let change of changeLog\"&gt;{{change}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class VersionChildComponent implements OnChanges {\n  @Input() major: number;\n  @Input() minor: number;\n  changeLog: string[] = [];\n\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    let log: string[] = [];\n    for (let propName in changes) {\n      let changedProp = changes[propName];\n      let from = JSON.stringify(changedProp.previousValue);\n      let to =   JSON.stringify(changedProp.currentValue);\n      log.push( `${propName} changed from ${from} to ${to}`);\n    }\n    this.changeLog.push(log.join(', '));\n  }\n}\n</pre>\n<p>The <code>VersionParentComponent</code> supplies the <code>minor</code> and <code>major</code> values and binds buttons to methods that change them.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'version-parent',\n  template: `\n    &lt;h2&gt;Source code version&lt;/h2&gt;\n    &lt;button (click)=\"newMinor()\"&gt;New minor version&lt;/button&gt;\n    &lt;button (click)=\"newMajor()\"&gt;New major version&lt;/button&gt;\n    &lt;version-child [major]=\"major\" [minor]=\"minor\"&gt;&lt;/version-child&gt;\n  `\n})\nexport class VersionParentComponent {\n  major: number = 1;\n  minor: number = 23;\n\n  newMinor() {\n    this.minor++;\n  }\n\n  newMajor() {\n    this.major++;\n    this.minor = 0;\n  }\n}\n</pre>\n<p>Here's the output of a button-pushing sequence:</p> <img src=\"https://angular.io/resources/images/cookbooks/component-communication/parent-to-child-on-changes.gif\" alt=\"Parent-to-child-onchanges\"><h3 id=\"test-it\">Test it</h3> <p>Test that <strong><em>both</em></strong> input properties are set initially and that button clicks trigger the expected <code>ngOnChanges</code> calls and values:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\n// Test must all execute in this exact order\nit('should set expected initial values', function () {\n  let actual = getActual();\n\n  let initialLabel = 'Version 1.23';\n  let initialLog = 'major changed from {} to 1, minor changed from {} to 23';\n\n  expect(actual.label).toBe(initialLabel);\n  expect(actual.count).toBe(1);\n  expect(actual.logs.get(0).getText()).toBe(initialLog);\n});\n\nit('should set expected values after clicking \\'Minor\\' twice', function () {\n  let repoTag = element(by.tagName('version-parent'));\n  let newMinorButton = repoTag.all(by.tagName('button')).get(0);\n\n  newMinorButton.click().then(function() {\n    newMinorButton.click().then(function() {\n      let actual = getActual();\n\n      let labelAfter2Minor = 'Version 1.25';\n      let logAfter2Minor = 'minor changed from 24 to 25';\n\n      expect(actual.label).toBe(labelAfter2Minor);\n      expect(actual.count).toBe(3);\n      expect(actual.logs.get(2).getText()).toBe(logAfter2Minor);\n    });\n  });\n});\n\nit('should set expected values after clicking \\'Major\\' once', function () {\n  let repoTag = element(by.tagName('version-parent'));\n  let newMajorButton = repoTag.all(by.tagName('button')).get(1);\n\n  newMajorButton.click().then(function() {\n    let actual = getActual();\n\n    let labelAfterMajor = 'Version 2.0';\n    let logAfterMajor = 'major changed from 1 to 2, minor changed from 25 to 0';\n\n    expect(actual.label).toBe(labelAfterMajor);\n    expect(actual.count).toBe(4);\n    expect(actual.logs.get(3).getText()).toBe(logAfterMajor);\n  });\n});\n\nfunction getActual() {\n  let versionTag = element(by.tagName('version-child'));\n  let label = versionTag.element(by.tagName('h3')).getText();\n  let ul = versionTag.element((by.tagName('ul')));\n  let logs = ul.all(by.tagName('li'));\n\n  return {\n    label: label,\n    logs: logs,\n    count: logs.count()\n  };\n}\n// ...\n</pre>\n <h2 id=\"child-to-parent\">Parent listens for child event</h2> <p>The child component exposes an <code>EventEmitter</code> property with which it <code>emits</code>events when something happens. The parent binds to that event property and reacts to those events.</p> <p>The child's <code>EventEmitter</code> property is an <strong><em>output property</em></strong>, typically adorned with an <a href=\"../guide/template-syntax#inputs-outputs\">@Output decoration</a> as seen in this <code>VoterComponent</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'my-voter',\n  template: `\n    &lt;h4&gt;{{name}}&lt;/h4&gt;\n    &lt;button (click)=\"vote(true)\"  [disabled]=\"voted\"&gt;Agree&lt;/button&gt;\n    &lt;button (click)=\"vote(false)\" [disabled]=\"voted\"&gt;Disagree&lt;/button&gt;\n  `\n})\nexport class VoterComponent {\n  @Input()  name: string;\n  @Output() onVoted = new EventEmitter&lt;boolean&gt;();\n  voted = false;\n\n  vote(agreed: boolean) {\n    this.onVoted.emit(agreed);\n    this.voted = true;\n  }\n}\n</pre>\n<p>Clicking a button triggers emission of a <code>true</code> or <code>false</code> (the boolean <em>payload</em>).</p> <p>The parent <code>VoteTakerComponent</code> binds an event handler (<code>onVoted</code>) that responds to the child event payload (<code>$event</code>) and updates a counter.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component }      from '@angular/core';\n\n@Component({\n  selector: 'vote-taker',\n  template: `\n    &lt;h2&gt;Should mankind colonize the Universe?&lt;/h2&gt;\n    &lt;h3&gt;Agree: {{agreed}}, Disagree: {{disagreed}}&lt;/h3&gt;\n    &lt;my-voter *ngFor=\"let voter of voters\"\n      [name]=\"voter\"\n      (onVoted)=\"onVoted($event)\"&gt;\n    &lt;/my-voter&gt;\n  `\n})\nexport class VoteTakerComponent {\n  agreed = 0;\n  disagreed = 0;\n  voters = ['Mr. IQ', 'Ms. Universe', 'Bombasto'];\n\n  onVoted(agreed: boolean) {\n    agreed ? this.agreed++ : this.disagreed++;\n  }\n}\n</pre>\n<p>The framework passes the event argument — represented by <code>$event</code> — to the handler method, and the method processes it:</p> <img src=\"https://angular.io/resources/images/cookbooks/component-communication/child-to-parent.gif\" alt=\"Child-to-parent\"><h3 id=\"test-it\">Test it</h3> <p>Test that clicking the <em>Agree</em> and <em>Disagree</em> buttons update the appropriate counters:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\nit('should not emit the event initially', function () {\n  let voteLabel = element(by.tagName('vote-taker'))\n    .element(by.tagName('h3')).getText();\n  expect(voteLabel).toBe('Agree: 0, Disagree: 0');\n});\n\nit('should process Agree vote', function () {\n  let agreeButton1 = element.all(by.tagName('my-voter')).get(0)\n    .all(by.tagName('button')).get(0);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 0');\n  });\n});\n\nit('should process Disagree vote', function () {\n  let agreeButton1 = element.all(by.tagName('my-voter')).get(1)\n    .all(by.tagName('button')).get(1);\n  agreeButton1.click().then(function() {\n    let voteLabel = element(by.tagName('vote-taker'))\n      .element(by.tagName('h3')).getText();\n    expect(voteLabel).toBe('Agree: 1, Disagree: 1');\n  });\n});\n// ...\n</pre>\n <parent-to-child-local-var></parent-to-child-local-var><h2 id=\"parent-to-child-local-var\">Parent interacts with child via <em>local variable</em>\n</h2> <p>A parent component cannot use data binding to read child properties or invoke child methods. We can do both by creating a template reference variable for the child element and then reference that variable <em>within the parent template</em> as seen in the following example.</p> <p> We have a child <code id=\"countdown-timer-example\">CountdownTimerComponent</code> that repeatedly counts down to zero and launches a rocket. It has <code>start</code> and <code>stop</code> methods that control the clock and it displays a countdown status message in its own template.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, OnDestroy, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'countdown-timer',\n  template: '&lt;p&gt;{{message}}&lt;/p&gt;'\n})\nexport class CountdownTimerComponent implements OnInit, OnDestroy {\n\n  intervalId = 0;\n  message = '';\n  seconds = 11;\n\n  clearTimer() { clearInterval(this.intervalId); }\n\n  ngOnInit()    { this.start(); }\n  ngOnDestroy() { this.clearTimer(); }\n\n  start() { this.countDown(); }\n  stop()  {\n    this.clearTimer();\n    this.message = `Holding at T-${this.seconds} seconds`;\n  }\n\n  private countDown() {\n    this.clearTimer();\n    this.intervalId = window.setInterval(() =&gt; {\n      this.seconds -= 1;\n      if (this.seconds === 0) {\n        this.message = 'Blast off!';\n      } else {\n        if (this.seconds &lt; 0) { this.seconds = 10; } // reset\n        this.message = `T-${this.seconds} seconds and counting`;\n      }\n    }, 1000);\n  }\n}\n</pre>\n<p>Let's see the <code>CountdownLocalVarParentComponent</code> that hosts the timer component.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@Component({\n  selector: 'countdown-parent-lv',\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via local variable)&lt;/h3&gt;\n  &lt;button (click)=\"timer.start()\"&gt;Start&lt;/button&gt;\n  &lt;button (click)=\"timer.stop()\"&gt;Stop&lt;/button&gt;\n  &lt;div class=\"seconds\"&gt;{{timer.seconds}}&lt;/div&gt;\n  &lt;countdown-timer #timer&gt;&lt;/countdown-timer&gt;\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownLocalVarParentComponent { }\n</pre>\n<p>The parent component cannot data bind to the child's <code>start</code> and <code>stop</code> methods nor to its <code>seconds</code> property.</p> <p>We can place a local variable (<code>#timer</code>) on the tag (<code>&lt;countdown-timer&gt;</code>) representing the child component. That gives us a reference to the child component itself and the ability to access <em>any of its properties or methods</em> from within the parent template.</p> <p>In this example, we wire parent buttons to the child's <code>start</code> and <code>stop</code> and use interpolation to display the child's <code>seconds</code> property.</p> <p>Here we see the parent and child working together.</p> <img src=\"https://angular.io/resources/images/cookbooks/component-communication/countdown-timer-anim.gif\" alt=\"countdown timer\"><h3 id=\"countdown-tests\">Test it</h3> <p>Test that the seconds displayed in the parent template match the seconds displayed in the child's status message. Test also that clicking the <em>Stop</em> button pauses the countdown timer:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\nit('timer and parent seconds should match', function () {\n  let parent = element(by.tagName(parentTag));\n  let message = parent.element(by.tagName('countdown-timer')).getText();\n  browser.sleep(10); // give `seconds` a chance to catchup with `message`\n  let seconds = parent.element(by.className('seconds')).getText();\n  expect(message).toContain(seconds);\n});\n\nit('should stop the countdown', function () {\n  let parent = element(by.tagName(parentTag));\n  let stopButton = parent.all(by.tagName('button')).get(1);\n\n  stopButton.click().then(function() {\n    let message = parent.element(by.tagName('countdown-timer')).getText();\n    expect(message).toContain('Holding');\n  });\n});\n// ...\n</pre>\n <h2 id=\"parent-to-view-child\">Parent calls a <em>ViewChild</em>\n</h2> <p>The <em>local variable</em> approach is simple and easy. But it is limited because the parent-child wiring must be done entirely within the parent template. The parent component <em>itself</em> has no access to the child.</p> <p>We can't use the <em>local variable</em> technique if an instance of the parent component <em>class</em> must read or write child component values or must call child component methods.</p> <p>When the parent component <em>class</em> requires that kind of access, we <strong><em>inject</em></strong> the child component into the parent as a <em>ViewChild</em>.</p> <p>We'll illustrate this technique with the same <a href=\"#countdown-timer-example\">Countdown Timer</a> example. We won't change its appearance or behavior. The child <a href=\"#countdown-timer-example\">CountdownTimerComponent</a> is the same as well.</p> <div class=\"l-sub-section\">\n<p>We are switching from the <em>local variable</em> to the <em>ViewChild</em> technique solely for the purpose of demonstration.</p> </div>\n<p>Here is the parent, <code>CountdownViewChildParentComponent</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { AfterViewInit, ViewChild } from '@angular/core';\nimport { Component }                from '@angular/core';\nimport { CountdownTimerComponent }  from './countdown-timer.component';\n\n@Component({\n  selector: 'countdown-parent-vc',\n  template: `\n  &lt;h3&gt;Countdown to Liftoff (via ViewChild)&lt;/h3&gt;\n  &lt;button (click)=\"start()\"&gt;Start&lt;/button&gt;\n  &lt;button (click)=\"stop()\"&gt;Stop&lt;/button&gt;\n  &lt;div class=\"seconds\"&gt;{{ seconds() }}&lt;/div&gt;\n  &lt;countdown-timer&gt;&lt;/countdown-timer&gt;\n  `,\n  styleUrls: ['demo.css']\n})\nexport class CountdownViewChildParentComponent implements AfterViewInit {\n\n  @ViewChild(CountdownTimerComponent)\n  private timerComponent: CountdownTimerComponent;\n\n  seconds() { return 0; }\n\n  ngAfterViewInit() {\n    // Redefine `seconds()` to get from the `CountdownTimerComponent.seconds` ...\n    // but wait a tick first to avoid one-time devMode\n    // unidirectional-data-flow-violation error\n    setTimeout(() =&gt; this.seconds = () =&gt; this.timerComponent.seconds, 0);\n  }\n\n  start() { this.timerComponent.start(); }\n  stop() { this.timerComponent.stop(); }\n}\n</pre>\n<p>It takes a bit more work to get the child view into the parent component classs.</p> <p>We import references to the <code>ViewChild</code> decorator and the <code>AfterViewInit</code> lifecycle hook.</p> <p>We inject the child <code>CountdownTimerComponent</code> into the private <code>timerComponent</code> property via the <code>@ViewChild</code> property decoration.</p> <p>The <code>#timer</code> local variable is gone from the component metadata. Instead we bind the buttons to the parent component's own <code>start</code> and <code>stop</code> methods and present the ticking seconds in an interpolation around the parent component's <code>seconds</code> method.</p> <p>These methods access the injected timer component directly.</p> <p>The <code>ngAfterViewInit</code> lifecycle hook is an important wrinkle. The timer component isn't available until <em>after</em> Angular displays the parent view. So we display <code>0</code> seconds initially.</p> <p>Then Angular calls the <code>ngAfterViewInit</code> lifecycle hook at which time it is <em>too late</em> to update the parent view's display of the countdown seconds. Angular's unidirectional data flow rule prevents us from updating the parent view's in the same cycle. We have to <em>wait one turn</em> before we can display the seconds.</p> <p>We use <code>setTimeout</code> to wait one tick and then revise the <code>seconds</code> method so that it takes future values from the timer component.</p> <h3 id=\"test-it\">Test it</h3> <p>Use <a href=\"#countdown-tests\">the same countdown timer tests</a> as before.</p>  <h2 id=\"bidirectional-service\">Parent and children communicate via a service</h2> <p>A parent component and its children share a service whose interface enables bi-directional communication <em>within the family</em>.</p> <p>The scope of the service instance is the parent component and its children. Components outside this component subtree have no access to the service or their communications.</p> <p>This <code>MissionService</code> connects the <code>MissionControlComponent</code> to multiple <code>AstronautComponent</code> children.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Injectable } from '@angular/core';\nimport { Subject }    from 'rxjs/Subject';\n\n@Injectable()\nexport class MissionService {\n\n  // Observable string sources\n  private missionAnnouncedSource = new Subject&lt;string&gt;();\n  private missionConfirmedSource = new Subject&lt;string&gt;();\n\n  // Observable string streams\n  missionAnnounced$ = this.missionAnnouncedSource.asObservable();\n  missionConfirmed$ = this.missionConfirmedSource.asObservable();\n\n  // Service message commands\n  announceMission(mission: string) {\n    this.missionAnnouncedSource.next(mission);\n  }\n\n  confirmMission(astronaut: string) {\n    this.missionConfirmedSource.next(astronaut);\n  }\n}\n</pre>\n<p>The <code>MissionControlComponent</code> both provides the instance of the service that it shares with its children (through the <code>providers</code> metadata array) and injects that instance into itself through its constructor:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component }          from '@angular/core';\n\nimport { MissionService }     from './mission.service';\n\n@Component({\n  selector: 'mission-control',\n  template: `\n    &lt;h2&gt;Mission Control&lt;/h2&gt;\n    &lt;button (click)=\"announce()\"&gt;Announce mission&lt;/button&gt;\n    &lt;my-astronaut *ngFor=\"let astronaut of astronauts\"\n      [astronaut]=\"astronaut\"&gt;\n    &lt;/my-astronaut&gt;\n    &lt;h3&gt;History&lt;/h3&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let event of history\"&gt;{{event}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  providers: [MissionService]\n})\nexport class MissionControlComponent {\n  astronauts = ['Lovell', 'Swigert', 'Haise'];\n  history: string[] = [];\n  missions = ['Fly to the moon!',\n              'Fly to mars!',\n              'Fly to Vegas!'];\n  nextMission = 0;\n\n  constructor(private missionService: MissionService) {\n    missionService.missionConfirmed$.subscribe(\n      astronaut =&gt; {\n        this.history.push(`${astronaut} confirmed the mission`);\n      });\n  }\n\n  announce() {\n    let mission = this.missions[this.nextMission++];\n    this.missionService.announceMission(mission);\n    this.history.push(`Mission \"${mission}\" announced`);\n    if (this.nextMission &gt;= this.missions.length) { this.nextMission = 0; }\n  }\n}\n</pre>\n<p>The <code>AstronautComponent</code> also injects the service in its constructor. Each <code>AstronautComponent</code> is a child of the <code>MissionControlComponent</code> and therefore receives its parent's service instance:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component, Input, OnDestroy } from '@angular/core';\n\nimport { MissionService } from './mission.service';\nimport { Subscription }   from 'rxjs/Subscription';\n\n@Component({\n  selector: 'my-astronaut',\n  template: `\n    &lt;p&gt;\n      {{astronaut}}: &lt;strong&gt;{{mission}}&lt;/strong&gt;\n      &lt;button\n        (click)=\"confirm()\"\n        [disabled]=\"!announced || confirmed\"&gt;\n        Confirm\n      &lt;/button&gt;\n    &lt;/p&gt;\n  `\n})\nexport class AstronautComponent implements OnDestroy {\n  @Input() astronaut: string;\n  mission = '&lt;no mission announced&gt;';\n  confirmed = false;\n  announced = false;\n  subscription: Subscription;\n\n  constructor(private missionService: MissionService) {\n    this.subscription = missionService.missionAnnounced$.subscribe(\n      mission =&gt; {\n        this.mission = mission;\n        this.announced = true;\n        this.confirmed = false;\n    });\n  }\n\n  confirm() {\n    this.confirmed = true;\n    this.missionService.confirmMission(this.astronaut);\n  }\n\n  ngOnDestroy() {\n    // prevent memory leak when component destroyed\n    this.subscription.unsubscribe();\n  }\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Notice that we capture the <code>subscription</code> and unsubscribe when the <code>AstronautComponent</code> is destroyed. This is a memory-leak guard step. There is no actual risk in this app because the lifetime of a <code>AstronautComponent</code> is the same as the lifetime of the app itself. That <em>would not</em> always be true in a more complex application.</p> <p>We do not add this guard to the <code>MissionControlComponent</code> because, as the parent, it controls the lifetime of the <code>MissionService</code>.</p> </div>\n<p>The <em>History</em> log demonstrates that messages travel in both directions between the parent <code>MissionControlComponent</code> and the <code>AstronautComponent</code> children, facilitated by the service:</p> <img src=\"https://angular.io/resources/images/cookbooks/component-communication/bidirectional-service.gif\" alt=\"bidirectional-service\"><h3 id=\"test-it\">Test it</h3> <p>Tests click buttons of both the parent <code>MissionControlComponent</code> and the <code>AstronautComponent</code> children and verify that the <em>History</em> meets expectations:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">// ...\nit('should announce a mission', function () {\n  let missionControl = element(by.tagName('mission-control'));\n  let announceButton = missionControl.all(by.tagName('button')).get(0);\n  announceButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(1);\n    expect(history.get(0).getText()).toMatch(/Mission.* announced/);\n  });\n});\n\nit('should confirm the mission by Lovell', function () {\n  testConfirmMission(1, 2, 'Lovell');\n});\n\nit('should confirm the mission by Haise', function () {\n  testConfirmMission(3, 3, 'Haise');\n});\n\nit('should confirm the mission by Swigert', function () {\n  testConfirmMission(2, 4, 'Swigert');\n});\n\nfunction testConfirmMission(buttonIndex: number, expectedLogCount: number, astronaut: string) {\n  let _confirmedLog = ' confirmed the mission';\n  let missionControl = element(by.tagName('mission-control'));\n  let confirmButton = missionControl.all(by.tagName('button')).get(buttonIndex);\n  confirmButton.click().then(function () {\n    let history = missionControl.all(by.tagName('li'));\n    expect(history.count()).toBe(expectedLogCount);\n    expect(history.get(expectedLogCount - 1).getText()).toBe(astronaut + _confirmedLog);\n  });\n}\n// ...\n</pre>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/component-communication.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/component-communication.html</a>\n  </p>\n</div>\n","cookbook/dependency-injection":"<h1 class=\"hero-title text-display-1 \">Dependency Injection</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Techniques for Dependency Injection</p></div>\n<p>Dependency Injection is a powerful pattern for managing code dependencies. In this cookbook we will explore many of the features of Dependency Injection (DI) in Angular.</p> <h2 id=\"toc\">Table of contents</h2> <p><a href=\"#app-wide-dependencies\">Application-wide dependencies</a></p> <p><a href=\"#external-module-configuration\">External module configuration</a></p> <p><a href=\"#nested-dependencies\"><em>@Injectable</em> and nested service dependencies</a></p> <p><a href=\"#service-scope\">Limit service scope to a component subtree</a></p> <p><a href=\"#multiple-service-instances\">Multiple service instances (sandboxing)</a></p> <p><a href=\"#qualify-dependency-lookup\">Qualify dependency lookup with <em>@Optional</em> and <em>@Host</em></a></p> <p><a href=\"#component-element\">Inject the component's DOM element</a></p> <p><a href=\"#providers\">Define dependencies with providers</a></p> <ul> <li><a href=\"#provide\">The <em>provide</em> object literal</a></li> <li><a href=\"#usevalue\">useValue - the <em>value provider</em></a></li> <li><a href=\"#useclass\">useClass - the <em>class provider</em></a></li> <li><a href=\"#useexisting\">useExisting - the <em>alias provider</em></a></li> <li><a href=\"#usefactory\">useFactory - the <em>factory provider</em></a></li> </ul> <p><a href=\"#tokens\">Provider token alternatives</a></p> <ul> <li><a href=\"#class-interface\">class-interface</a></li> <li><a href=\"#opaque-token\">OpaqueToken</a></li> </ul> <p><a href=\"#di-inheritance\">Inject into a derived class</a></p> <p><a href=\"#find-parent\">Find a parent component by injection</a></p> <ul> <li><a href=\"#known-parent\">Find parent with a known component type</a></li> <li><a href=\"#base-parent\">Cannot find a parent by its base class</a></li> <li><a href=\"#class-interface-parent\">Find a parent by its class-interface</a></li> <li><a href=\"#parent-tree\">Find a parent in a tree of parents (<em>@SkipSelf</em>)</a></li> <li><a href=\"#provideparent\">A <em>provideParent</em> helper function</a></li> </ul> <p><a href=\"#forwardref\">Break circularities with a forward class reference (<em>forwardRef</em>)</a></p> <p><strong>See the <live-example name=\"cb-dependency-injection\"></live-example></strong> of the code supporting this cookbook. </p> <h2 id=\"app-wide-dependencies\">Application-wide dependencies</h2> <p>Register providers for dependencies used throughout the application in the root application component, <code>AppComponent</code>.</p> <p>In the following example, we import and register several services (the <code>LoggerService</code>, <code>UserContext</code>, and the <code>UserService</code>) in the <code>@Component</code> metadata <code>providers</code> array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (excerpt)\">// app/app.component.ts (excerpt)\n\nimport { LoggerService }      from './logger.service';\nimport { UserContextService } from './user-context.service';\nimport { UserService }        from './user.service';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: 'app/app.component.html',\n  providers: [LoggerService, UserContextService, UserService]\n})\nexport class AppComponent {\n/* . . . */\n}\n</pre>\n<p>All of these services are implemented as classes. Service classes can act as their own providers which is why listing them in the <code>providers</code> array is all the registration we need.</p> <div class=\"l-sub-section\">\n<p>A <em>provider</em> is something that can create or deliver a service. Angular creates a service instance from a class provider by \"new-ing\" it. Learn more about providers <a href=\"#providers\">below</a>.</p> </div>\n<p>Now that we've registered these services, Angular can inject them into the constructor of <em>any</em> component or service, <em>anywhere</em> in the application.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-bios.component.ts (component constructor injection)\">// app/hero-bios.component.ts (component constructor injection)\n\nconstructor(logger: LoggerService) {\n  logger.logInfo('Creating HeroBiosComponent');\n}\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/user-context.service.ts (service constructor injection)\">// app/user-context.service.ts (service constructor injection)\n\nconstructor(private userService: UserService, private loggerService: LoggerService) {\n}\n</pre>\n<h2 id=\"external-module-configuration\">External module configuration</h2> <p>We can register <em>certain</em> module providers in the <code>NgModule</code> rather than in the root application component. </p> <p>We'd do this when we expect to select or configure external modules that support our application but (a) aren't conceptually part of the application and (b) that we could change later without altering the essential logic of the application.</p> <p>For example, we might configure the Component Router with different <a href=\"../guide/router#location-strategy\">location strategies</a> based on environmental factors. The choice of location strategy doesn't matter to the application itself.</p> <p>We could sneak in a fake HTTP backend with sample data during development rather than allow http calls to a remote server (that might not yet exist). We'll switch to the real backend in production. The application shouldn't know or care one way or the other.</p> <p>See both examples in the following <code>app.module.ts</code> where we list their service providers in the <code>providers</code> array of the <code>NgModule</code> (AppModule).</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts\">// app/app.module.ts\n\n@NgModule({\n  imports: [ BrowserModule, FormsModule ],\n  declarations: [ ...DIRECTIVES,\n                  ...B_DIRECTIVES,\n                  ...C_DIRECTIVES,\n                  AliceComponent,\n                  AlexComponent ],\n  bootstrap: [ AppComponent ],\n  providers: [\n    // appRouterProviders, TODO: add routes\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\n\n    { provide: XHRBackend, useClass: InMemoryBackendService }, // in-mem server\n    { provide: SEED_DATA,  useClass: HeroData } // in-mem server data\n  ]\n})\nexport class AppModule {\n  constructor() {\n  }\n}\n</pre>\n<h2 id=\"injectable\">\n<em>@Injectable</em> and nested service dependencies</h2> <p>The consumer of an injected service does not know how to create that service. It shouldn't care. It's the dependency injection's job to create and cache that service.</p> <p>Sometimes a service depends on other services ... which may depend on yet other services. Resolving these nested dependencies in the correct order is also the framework's job. At each step, the consumer of dependencies simply declares what it requires in its constructor and the framework takes over.</p> <p>For example, we inject both the <code>LoggerService</code> and the <code>UserContext</code> in the <code>AppComponent</code>. </p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nconstructor(logger: LoggerService, public userContext: UserContextService) {\n  userContext.loadUser(this.userId);\n  logger.logInfo('AppComponent initialized');\n}\n</pre>\n<p>The <code>UserContext</code> in turn has dependencies on both the <code>LoggerService</code> (again) and a <code>UserService</code> that gathers information about a particular user.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"user-context.service.ts (injection)\">// user-context.service.ts (injection)\n\n@Injectable()\nexport class UserContextService {\n  constructor(private userService: UserService, private loggerService: LoggerService) {\n  }\n}\n</pre>\n<p>When Angular creates an<code>AppComponent</code>, the dependency injection framework creates an instance of the <code>LoggerService</code> and starts to create the <code>UserContextService</code>. The <code>UserContextService</code> needs the <code>LoggerService</code>, which the framework already has, and the <code>UserService</code>, which it has yet to create. The <code>UserService</code> has no dependencies so the dependency injection framework can just <code>new</code> one into existence.</p> <p>The beauty of dependency injection is that the author of <code>AppComponent</code> didn't care about any of this. The author simply declared what was needed in the constructor (<code>LoggerService</code> and <code>UserContextService</code>) and the framework did the rest.</p> <p>Once all the dependencies are in place, the <code>AppComponent</code> displays the user information:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/logged-in-user.png\" alt=\"Logged In User\"><h3 id=\"-injectable-\"><em>@Injectable()</em></h3> <p>Notice the <code>@Injectable()</code>decorator on the <code>UserContextService</code> class. </p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"user-context.service.ts (@Injectable)\">// user-context.service.ts (@Injectable)\n\n@Injectable()\nexport class UserContextService {\n}\n</pre>\n<p>That decorator makes it possible for Angular to identify the types of its two dependencies, <code>LoggerService</code> and <code>UserService</code>.</p> <p>Technically, the <code>@Injectable()</code>decorator is only <em>required</em> for a service class that has <em>its own dependencies</em>. The <code>LoggerService</code> doesn't depend on anything. The logger would work if we omitted <code>@Injectable()</code> and the generated code would be slightly smaller. </p> <p>But the service would break the moment we gave it a dependency and we'd have to go back and and add <code>@Injectable()</code> to fix it. We add <code>@Injectable()</code> from the start for the sake of consistency and to avoid future pain.</p> <div class=\"alert is-helpful\">\n<p>Although we recommend applying <code>@Injectable</code> to all service classes, do not feel bound by it. Some developers prefer to add it only where needed and that's a reasonable policy too.</p> </div>\n<div class=\"l-sub-section\">\n<p>The <code>AppComponent</code> class had two dependencies as well but no <code>@Injectable()</code>. It didn't need <code>@Injectable()</code> because that component class has the <code>@Component</code> decorator. In Angular with TypeScript, a <em>single</em> decorator — <em>any</em> decorator — is sufficient to identify dependency types.</p> </div>\n<h2 id=\"service-scope\">Limit service scope to a component subtree</h2> <p>All injected service dependencies are singletons meaning that, for a given dependency injector (\"injector\"), there is only one instance of service. </p> <p>But an Angular application has multiple dependency injectors, arranged in a tree hierarchy that parallels the component tree. So a particular service can be <em>provided</em> (and created) at any component level and multiple times if provided in multiple components.</p> <p>By default, a service dependency provided in one component is visible to all of its child components and Angular injects the same service instance into all child components that ask for that service.</p> <p>Accordingly, dependencies provided in the root <code>AppComponent</code> can be injected into <em>any</em> component <em>anywhere</em> in the application.</p> <p>That isn't always desirable. Sometimes we want to restrict service availability to a particular region of the application.</p> <p>We can limit the scope of an injected service to a <em>branch</em> of the application hierarchy by providing that service <em>at the sub-root component for that branch</em>. Here we provide the <code>HeroService</code> to the <code>HeroesBaseComponent</code> by listing it in the <code>providers</code> array:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/sorted-heroes.component.ts (HeroesBaseComponent excerpt)\">// app/sorted-heroes.component.ts (HeroesBaseComponent excerpt)\n\n@Component({\n  selector: 'unsorted-heroes',\n  template: `&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero.name}}&lt;/div&gt;`,\n  providers: [HeroService]\n})\nexport class HeroesBaseComponent implements OnInit {\n  constructor(private heroService: HeroService) { }\n}\n</pre>\n<p>When Angular creates the <code>HeroesBaseComponent</code>, it also creates a new instance of <code>HeroService</code> that is visible only to the component and its children (if any).</p> <p>We could also provide the <code>HeroService</code> to a <em>different</em> component elsewhere in the application. That would result in a <em>different</em> instance of the service, living in a <em>different</em> injector.</p> <div class=\"l-sub-section\">\n<p>We examples of such scoped <code>HeroService</code> singletons appear throughout the accompanying sample code, including the <code>HeroBiosComponent</code>, <code>HeroOfTheMonthComponent</code>, and <code>HeroesBaseComponent</code>. Each of these components has its own <code>HeroService</code> instance managing its own independent collection of heroes.</p> </div>\n<div class=\"alert is-helpful\">\n<h3 id=\"take-a-break-\">Take a break!</h3> <p>This much Dependency Injection knowledge may be all that many Angular developers ever need to build their applications. It doesn't always have to be more complicated.</p> </div>\n<h2 id=\"multiple-service-instances\">Multiple service instances (sandboxing)</h2> <p>Sometimes we want multiple instances of a service at <em>the same level of the component hierarchy</em>.</p> <p>A good example is a service that holds state for its companion component instance. We need a separate instance of the service for each component. Each service has its own work-state, isolated from the service-and-state of a different component. We call this <em>sandboxing</em> because each service and component instance has its own sandbox to play in.</p> <p> Imagine a <code id=\"hero-bios-component\">HeroBiosComponent</code> that presents three instances of the <code>HeroBioComponent</code>. </p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"ap/hero-bios.component.ts\">// ap/hero-bios.component.ts\n\n@Component({\n  selector: 'hero-bios',\n  template: `\n    &lt;hero-bio [heroId]=\"1\"&gt;&lt;/hero-bio&gt;\n    &lt;hero-bio [heroId]=\"2\"&gt;&lt;/hero-bio&gt;\n    &lt;hero-bio [heroId]=\"3\"&gt;&lt;/hero-bio&gt;`,\n  providers: [HeroService]\n})\nexport class HeroBiosComponent {\n}\n</pre>\n<p>Each <code>HeroBioComponent</code> can edit a single hero's biography. A <code>HeroBioComponent</code> relies on a <code>HeroCacheService</code> to fetch, cache, and perform other persistence operations on that hero.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-cache.service.ts\">// app/hero-cache.service.ts\n\n@Injectable()\nexport class HeroCacheService {\n  hero: Hero;\n  constructor(private heroService: HeroService) {}\n\n  fetchCachedHero(id: number) {\n    if (!this.hero) {\n      this.hero = this.heroService.getHeroById(id);\n    }\n    return this.hero;\n  }\n}\n</pre>\n<p>Clearly the three instances of the <code>HeroBioComponent</code> can't share the same <code>HeroCacheService</code>. They'd be competing with each other to determine which hero to cache.</p> <p>Each <code>HeroBioComponent</code> gets its <em>own</em> <code>HeroCacheService</code> instance by listing the <code>HeroCacheService</code> in its metadata <code>providers</code> array.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-bio.component.ts\">// app/hero-bio.component.ts\n\n@Component({\n  selector: 'hero-bio',\n  template: `\n    &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;textarea cols=\"25\" [(ngModel)]=\"hero.description\"&gt;&lt;/textarea&gt;`,\n  providers: [HeroCacheService]\n})\n\nexport class HeroBioComponent implements OnInit  {\n  @Input() heroId: number;\n\n  constructor(private heroCache: HeroCacheService) { }\n\n  ngOnInit() { this.heroCache.fetchCachedHero(this.heroId); }\n\n  get hero() { return this.heroCache.hero; }\n}\n</pre>\n<p>The parent <code>HeroBiosComponent</code> binds a value to the <code>heroId</code>. The <code>ngOnInit</code> pass that <code>id</code> to the service which fetches and caches the hero. The getter for the <code>hero</code> property pulls the cached hero from the service. And the template displays this data-bound property.</p> <p>Find this example in <live-example name=\"cb-dependency-injection\">live code</live-example> and confirm that the three <code>HeroBioComponent</code> instances have their own cached hero data. </p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/hero-bios.png\" alt=\"Bios\"><h2 id=\"optional\">Qualify dependency lookup with <em>@Optional</em> and <em>@Host</em>\n</h2> <p>We learned that dependencies can be registered at any level in the component hierarchy. </p> <p>When a component requests a dependency, Angular starts with that component's injector and walks up the injector tree until it finds the first suitable provider. Angular throws an error if it can't find the dependency during that walk. </p> <p>We <em>want</em> this behavior most of the time. But sometimes we need to limit the search and/or accommodate a missing dependency. We can modify Angular's search behavior with the <code>@Host</code> and <code>@Optional</code> qualifying decorators, used individually or together.</p> <p>The <code>@Optional</code> decorator tells Angular to continue when it can't find the dependency. Angular sets the injection parameter to <code>null</code> instead.</p> <p>The <code>@Host</code> decorator stops the upward search at the <em>host component</em>. </p> <p>The host component is typically the component requesting the dependency. But when this component is projected into a <em>parent</em> component, that parent component becomes the host. We look at this second, more interesting case in our next example.</p> <h3 id=\"demonstration\">Demonstration</h3> <p>The <code>HeroBiosAndContactsComponent</code> is a revision of the <code>HeroBiosComponent</code> that we looked at <a href=\"#hero-bios-component\">above</a>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-bios.component.ts (HeroBiosAndContactsComponent)\">// app/hero-bios.component.ts (HeroBiosAndContactsComponent)\n\n@Component({\n  selector: 'hero-bios-and-contacts',\n  template: `\n    &lt;hero-bio [heroId]=\"1\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;\n    &lt;hero-bio [heroId]=\"2\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;\n    &lt;hero-bio [heroId]=\"3\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;`,\n  providers: [HeroService]\n})\nexport class HeroBiosAndContactsComponent {\n  constructor(logger: LoggerService) {\n    logger.logInfo('Creating HeroBiosAndContactsComponent');\n  }\n}\n</pre>\n<p>Focus on the template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;hero-bio [heroId]=\"1\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;\n  &lt;hero-bio [heroId]=\"2\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;\n  &lt;hero-bio [heroId]=\"3\"&gt; &lt;hero-contact&gt;&lt;/hero-contact&gt; &lt;/hero-bio&gt;`,\n</pre>\n<p>We've inserted a <code>&lt;hero-contact&gt;</code> element between the <code>&lt;hero-bio&gt;</code> tags. Angular <em>projects</em> (<em>transcludes</em>) the corresponding <code>HeroContactComponent</code> into the <code>HeroBioComponent</code> view, placing it in the <code>&lt;ng-content&gt;</code> slot of the <code>HeroBioComponent</code> template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-bio.component.ts (template)\">// app/hero-bio.component.ts (template)\n\ntemplate: `\n  &lt;h4&gt;{{hero.name}}&lt;/h4&gt;\n  &lt;ng-content&gt;&lt;/ng-content&gt;\n  &lt;textarea cols=\"25\" [(ngModel)]=\"hero.description\"&gt;&lt;/textarea&gt;`,\n</pre>\n<p>It looks like this, with the hero's telephone number from <code>HeroContactComponent</code> projected above the hero description:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/hero-bio-and-content.png\" alt=\"bio and contact\"><p>Here's the <code>HeroContactComponent</code> which demonstrates the qualifying decorators that we're talking about in this section:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/hero-contact.component.ts\">// app/hero-contact.component.ts\n\n@Component({\n  selector: 'hero-contact',\n  template: `\n  &lt;div&gt;Phone #: {{phoneNumber}}\n  &lt;span *ngIf=\"hasLogger\"&gt;!!!&lt;/span&gt;&lt;/div&gt;`\n})\nexport class HeroContactComponent {\n\n  hasLogger = false;\n\n  constructor(\n      @Host() // limit to the host component's instance of the HeroCacheService\n      private heroCache: HeroCacheService,\n\n      @Host()     // limit search for logger; hides the application-wide logger\n      @Optional() // ok if the logger doesn't exist\n      private loggerService: LoggerService\n  ) {\n    if (loggerService) {\n      this.hasLogger = true;\n      loggerService.logInfo('HeroContactComponent can log!');\n    }\n  }\n\n  get phoneNumber() { return this.heroCache.hero.phone; }\n\n}\n</pre>\n<p>Focus on the constructor parameters</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-contact.component.ts\">// app/hero-contact.component.ts\n\n@Host() // limit to the host component's instance of the HeroCacheService\nprivate heroCache: HeroCacheService,\n\n@Host()     // limit search for logger; hides the application-wide logger\n@Optional() // ok if the logger doesn't exist\nprivate loggerService: LoggerService\n</pre>\n<p>The <code>@Host()</code> function decorating the <code>heroCache</code> property ensures that we get a reference to the cache service from the parent <code>HeroBioComponent</code>. Angular throws if the parent lacks that service, even if a component higher in the component tree happens to have that service.</p> <p>A second <code>@Host()</code> function decorates the <code>loggerService</code> property. We know the only <code>LoggerService</code> instance in the app is provided at the <code>AppComponent</code> level. The host <code>HeroBioComponent</code> doesn't have its own <code>LoggerService</code> provider.</p> <p>Angular would throw an error if we hadn't also decorated the property with the <code>@Optional()</code> function. Thanks to <code>@Optional()</code>, Angular sets the <code>loggerService</code> to null and the rest of the component adapts.</p> <div class=\"l-sub-section\">\n<p>We'll come back to the <code>elementRef</code> property shortly.</p> </div>\n<p>Here's the <code>HeroBiosAndContactsComponent</code> in action.</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/hero-bios-and-contacts.png\" alt=\"Bios with contact into\"><p>If we comment out the <code>@Host()</code> decorator, Angular now walks up the injector ancestor tree until it finds the logger at the <code>AppComponent</code> level. The logger logic kicks in and the hero display updates with the gratuitous \"!!!\", indicating that the logger was found.</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/hero-bio-contact-no-host.png\" alt=\"Without @Host\"><p>On the other hand, if we restore the <code>@Host()</code> decorator and comment out <code>@Optional</code>, the application fails for lack of the required logger at the host component level. <br> <code>EXCEPTION: No provider for LoggerService! (HeroContactComponent -&gt; LoggerService)</code></p> <h2 id=\"component-element\">Inject the component's element</h2> <p>On occasion we might need to access a component's corresponding DOM element. Although we strive to avoid it, many visual effects and 3rd party tools (such as jQuery) require DOM access. </p> <p>To illustrate, we've written a simplified version of the <code>HighlightDirective</code> from the <a href=\"../guide/attribute-directives\">Attribute Directives</a> chapter.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/highlight.directive.ts\">// app/highlight.directive.ts\n\nimport { Directive, ElementRef, HostListener, Input } from '@angular/core';\n\n@Directive({\n  selector: '[myHighlight]'\n})\nexport class HighlightDirective {\n\n  @Input('myHighlight') highlightColor: string;\n\n  private el: HTMLElement;\n\n  constructor(el: ElementRef) {\n    this.el = el.nativeElement;\n  }\n\n  @HostListener('mouseenter') onMouseEnter() {\n    this.highlight(this.highlightColor || 'cyan');\n  }\n\n  @HostListener('mouseleave') onMouseLeave() {\n    this.highlight(null);\n  }\n\n  private highlight(color: string) {\n    this.el.style.backgroundColor = color;\n  }\n}\n</pre>\n<p>The directive sets the background to a highlight color when the user mouses over the DOM element to which it is applied.</p> <p>Angular set the constructor's <code>el</code> parameter to the injected <code>ElementRef</code> which is a wrapper around that DOM element. Its <code>nativeElement</code> property exposes the DOM element for the directive to manipulate.</p> <p>The sample code applies the directive's <code>myHighlight</code> attribute to two <code>&lt;div&gt;</code> tags, first without a value (yielding the default color) and then with an assigned color value.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"app/app.component.html (highlight)\">&lt;!-- app/app.component.html (highlight) --&gt;\n\n&lt;div id=\"highlight\"  class=\"di-component\"  myHighlight&gt;\n  &lt;h3&gt;Hero Bios and Contacts&lt;/h3&gt;\n  &lt;div myHighlight=\"yellow\"&gt;\n    &lt;hero-bios-and-contacts&gt;&lt;/hero-bios-and-contacts&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>The following image shows the effect of mousing over the <code>&lt;hero-bios-and-contacts&gt;</code> tag.</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/highlight.png\" alt=\"Highlighted bios\"> <h2 id=\"providers\">Define dependencies with providers</h2> <p>In this section we learn to write providers that deliver dependent services.</p> <h3 id=\"background\">Background</h3> <p>We get a service from a dependency injector by giving it a <strong><em>token</em></strong>. </p> <p>We usually let Angular handle this transaction for us by specifying a constructor parameter and its type. The parameter type serves as the injector lookup <em>token</em>. Angular passes this token to the injector and assigns the result to the parameter. Here's a typical example:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-bios.component.ts (component constructor injection)\">// app/hero-bios.component.ts (component constructor injection)\n\nconstructor(logger: LoggerService) {\n  logger.logInfo('Creating HeroBiosComponent');\n}\n</pre>\n<p>Angular asks the injector for the service associated with the <code>LoggerService</code> and and assigns the returned value to the <code>logger</code> parameter.</p> <p>Where did the injector get that value? It may already have that value in its internal container. If it doesn't, it may be able to make one with the help of a <strong><em>provider</em></strong>. A <em>provider</em> is a recipe for delivering a service associated with a <em>token</em>.</p> <div class=\"l-sub-section\">\n<p>If the injector doesn't have a provider for the requested <em>token</em>, it delegates the request to its parent injector, where the process repeats until there are no more injectors. If the search is futile, the injector throws an error ... unless the request was <a href=\"#optional\">optional</a>.</p> <p>Let's return our attention to providers themselves.</p> </div>\n<p>A new injector has no providers. Angular initializes the injectors it creates with some providers it cares about. We have to register our <em>own</em> application providers manually, usually in the <code>providers</code> array of the <code>Component</code> or <code>Directive</code> metadata:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (providers)\">// app/app.component.ts (providers)\n\nproviders: [LoggerService, UserContextService, UserService]\n</pre>\n<h3 id=\"defining-providers\">Defining providers</h3> <p>The simple class provider is the most typical by far. We mention the class in the <code>providers</code> array and we're done.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-bios.component.ts (class provider)\">// app/hero-bios.component.ts (class provider)\n\nproviders: [HeroService]\n</pre>\n<p>It's that simple because the most common injected service is an instance of a class. But not every dependency can be satisfied by creating a new instance of a class. We need other ways to deliver dependency values and that means we need other ways to specify a provider.</p> <p>The <code>HeroOfTheMonthComponent</code> example demonstrates many of the alternatives and why we need them. </p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/hero-of-month.png\" alt=\"Hero of the month\" width=\"300px\"><p>It's visually simple: a few properties and the output of a logger. The code behind it gives us plenty to talk about.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-of-the-month.component.ts\">// hero-of-the-month.component.ts\n\nimport { Component, Inject } from '@angular/core';\n\nimport { DateLoggerService,\n         MinimalLogger }     from './date-logger.service';\nimport { Hero }              from './hero';\nimport { HeroService }       from './hero.service';\nimport { LoggerService }     from './logger.service';\nimport { RUNNERS_UP,\n         runnersUpFactory }  from './runners-up';\n\n@Component({\n  selector: 'hero-of-the-month',\n  template: template,\n  providers: [\n    { provide: Hero,          useValue:    someHero },\n    { provide: TITLE,         useValue:   'Hero of the Month' },\n    { provide: HeroService,   useClass:    HeroService },\n    { provide: LoggerService, useClass:    DateLoggerService },\n    { provide: MinimalLogger, useExisting: LoggerService },\n    { provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n  ]\n})\nexport class HeroOfTheMonthComponent {\n  logs: string[] = [];\n\n  constructor(\n      logger: MinimalLogger,\n      public heroOfTheMonth: Hero,\n      @Inject(RUNNERS_UP) public runnersUp: string,\n      @Inject(TITLE) public title: string)\n  {\n    this.logs = logger.logs;\n    logger.logInfo('starting up');\n  }\n}\n</pre>\n<h4 id=\"provide\">The <em>provide</em> object literal</h4> <p>The <code>provide</code> object literal takes a <em>token</em> and a <em>definition object</em>. The <em>token</em> is usually a class but <a href=\"#tokens\">it doesn't have to be</a>.</p> <p>The <em>definition</em> object has one main property, (e.g. <code>useValue</code>) that indicates how the provider should create or return the provided value.</p> <h4 id=\"usevalue\">useValue - the <em>value provider</em>\n</h4> <p>Set the <code>useValue</code> property to a <strong><em>fixed value</em></strong> that the provider can return as the dependency object.</p> <p>Use this technique to provide <em>runtime configuration constants</em> such as web-site base addresses and feature flags. We often use a <em>value provider</em> in a unit test to replace a production service with a fake or mock.</p> <p>The <code>HeroOfTheMonthComponent</code> example has two <em>value providers</em>. The first provides an instance of the <code>Hero</code> class; the second specifies a literal string resource:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">    { provide: Hero,          useValue:    someHero },\n    { provide: TITLE,         useValue:   'Hero of the Month' },\n</pre>\n<p>The <code>Hero</code> provider token is a class which makes sense because the value is a <code>Hero</code> and the consumer of the injected hero would want the type information.</p> <p>The <code>TITLE</code> provider token is <em>not a class</em>. It's a special kind of provider lookup key called an <a href=\"#opaquetoken\">OpaqueToken</a>. We often use an <code>OpaqueToken</code> when the dependency is a simple value like a string, a number, or a function.</p> <p>The value of a <em>value provider</em> must be defined <em>now</em>. We can't create the value later. Obviously the title string literal is immediately available. The <code>someHero</code> variable in this example was set earlier in the file:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">const someHero = new Hero(42, 'Magma', 'Had a great month!', '555-555-5555');\n</pre>\n<p>The other providers create their values <em>lazily</em> when they're needed for injection.</p> <h4 id=\"useclass\">useClass - the <em>class provider</em>\n</h4> <p>The <code>useClass</code> provider creates and returns new instance of the specified class.</p> <p>Use this technique to <strong><em>substitute an alternative implementation</em></strong> for a common or default class. The alternative could implement a different strategy, extend the default class, or fake the behavior of the real class in a test case.</p> <p>We see two examples in the <code>HeroOfTheMonthComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ provide: HeroService,   useClass:    HeroService },\n{ provide: LoggerService, useClass:    DateLoggerService },\n</pre>\n<p>The first provider is the <em>de-sugared</em>, expanded form of the most typical case in which the class to be created (<code>HeroService</code>) is also the provider's injection token. We wrote it in this long form to de-mystify the preferred short form.</p> <p>The second provider substitutes the <code>DateLoggerService</code> for the <code>LoggerService</code>. The <code>LoggerService</code> is already registered at the <code>AppComponent</code> level. When <em>this component</em> requests the <code>LoggerService</code>, it receives the <code>DateLoggerService</code> instead.</p> <div class=\"l-sub-section\">\n<p>This component and its tree of child components receive the <code>DateLoggerService</code> instance. Components outside the tree continue to receive the original <code>LoggerService</code> instance.</p> </div>\n<p>The <code>DateLoggerService</code> inherits from <code>LoggerService</code>; it appends the current date/time to each message: </p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/date-logger.service.ts\">// app/date-logger.service.ts\n\n@Injectable()\nexport class DateLoggerService extends LoggerService implements MinimalLogger\n{\n  logInfo(msg: any)  { super.logInfo(stamp(msg)); }\n  logDebug(msg: any) { super.logInfo(stamp(msg)); }\n  logError(msg: any) { super.logError(stamp(msg)); }\n}\n\nfunction stamp(msg: any) { return msg + ' at ' + new Date(); }\n</pre>\n<h4 id=\"useexisting\">useExisting - the <em>alias provider</em>\n</h4> <p>The <code>useExisting</code> provider maps one token to another. In effect, the first token is an <strong><em>alias</em></strong> for the service associated with second token, creating <strong><em>two ways to access the same service object</em></strong>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ provide: MinimalLogger, useExisting: LoggerService },\n</pre>\n<p>Narrowing an API through an aliasing interface is <em>one</em> important use case for this technique. We're aliasing for that very purpose here. Imagine that the <code>LoggerService</code> had a large API (it's actually only three methods and a property). We want to shrink that API surface to just the two members exposed by the <code>MinimalLogger</code> <a href=\"#class-interface\"><em>class-interface</em></a>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/date-logger.service.ts (MinimalLogger)\">// app/date-logger.service.ts (MinimalLogger)\n\n// class used as a restricting interface (hides other public members)\nexport abstract class MinimalLogger {\n  logInfo: (msg: string) =&gt; void;\n  logs: string[];\n}\n</pre>\n<p>The constructor's <code>logger</code> parameter is typed as <code>MinimalLogger</code> so only its two members are visible in TypeScript:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/minimal-logger-intellisense.png\" alt=\"MinimalLogger restricted API\"><p>Angular actually sets the <code>logger</code> parameter to the injector's full version of the <code>LoggerService</code> which happens to be the <code>DateLoggerService</code> thanks to the override provider registered previously via <code>useClass</code>. The following image, which displays the logging date, confirms the point:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/date-logger-entry.png\" alt=\"DateLoggerService entry\" width=\"300px\"><h4 id=\"usefactory\">useFactory - the <em>factory provider</em>\n</h4> <p>The <code>useFactory</code> provider creates a dependency object by calling a factory function as seen in this example.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n</pre>\n<p>Use this technique to <strong><em>create a dependency object</em></strong> with a factory function whose inputs are some <strong><em>combination of injected services and local state</em></strong>.</p> <p>The <em>dependency object</em> doesn't have to be a class instance. It could be anything. In this example, the <em>dependency object</em> is a string of the names of the runners-up to the \"Hero of the Month\" contest.</p> <p>The local state is the number <code>2</code>, the number of runners-up this component should show. We execute <code>runnersUpFactory</code> immediately with <code>2</code>. </p> <p>The <code>runnersUpFactory</code> itself isn't the provider factory function. The true provider factory function is the function that <code>runnersUpFactory</code> returns.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"runners-up.ts (excerpt)\">// runners-up.ts (excerpt)\n\nexport function runnersUpFactory(take: number) {\n  return (winner: Hero, heroService: HeroService): string =&gt; {\n    /* ... */\n  };\n};\n</pre>\n<p>That returned function takes a winning <code>Hero</code> and a <code>HeroService</code> as arguments.</p> <p>Angular supplies these arguments from injected values identified by the two <em>tokens</em> in the <code>deps</code> array. The two <code>deps</code> values are <em>tokens</em> that the injector uses to provide these factory function dependencies.</p> <p>After some undisclosed work, the function returns the string of names and Angular injects it into the <code>runnersUp</code> parameter of the <code>HeroOfTheMonthComponent</code>.</p> <div class=\"l-sub-section\">\n<p>The function retrieves candidate heroes from the <code>HeroService</code>, takes <code>2</code> of them to be the runners-up, and returns their concatenated names. Look at the <live-example name=\"cb-dependency-injection\"></live-example> for the full source code.</p> </div>\n<h2 id=\"tokens\">Provider token alternatives: the <em>class-interface</em> and <em>OpaqueToken</em>\n</h2> <p>Angular dependency injection is easiest when the provider <em>token</em> is a class that is also the type of the returned dependency object (what we usually call the <em>service</em>).</p> <p>But the token doesn't have to be a class and even when it is a class, it doesn't have to be the same type as the returned object. That's the subject of our next section. </p>  <h3 id=\"class-interface\">class-interface</h3> <p>In the previous <em>Hero of the Month</em> example, we used the <code>MinimalLogger</code> class as the token for a provider of a <code>LoggerService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ provide: MinimalLogger, useExisting: LoggerService },\n</pre>\n<p>The <code>MinimalLogger</code> is an abstract class. </p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// class used as a restricting interface (hides other public members)\nexport abstract class MinimalLogger {\n  logInfo: (msg: string) =&gt; void;\n  logs: string[];\n}\n</pre>\n<p>We usually inherit from an abstract class. But <code>LoggerService</code> doesn't inherit from <code>MinimalLogger</code>. <em>No class</em> inherits from it. Instead, we use it like an interface.</p> <p>Look again at the declaration for <code>DateLoggerService</code></p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export class DateLoggerService extends LoggerService implements MinimalLogger\n</pre>\n<p><code>DateLoggerService</code> inherits (extends) from <code>LoggerService</code>, not <code>MinimalLogger</code>. The <code>DateLoggerService</code> <em>implements</em> <code>MinimalLogger</code> as if <code>MinimalLogger</code> were an <em>interface</em>.</p> <p>We call a class used in this way a <strong><em>class-interface</em></strong>. The key benefit of a <em>class-interface</em> is that we can get the strong-typing of an interface and we can <strong><em>use it as a provider token</em></strong> in the same manner as a normal class.</p> <p>A <strong><em>class-interface</em></strong> should define <em>only</em> the members that its consumers are allowed to call. Such a narrowing interface helps decouple the concrete class from its consumers. The <code>MinimalLogger</code> defines just two of the <code>LoggerClass</code> members.</p> <div class=\"l-sub-section\">\n<h4 id=\"why-minimallogger-is-a-class-and-not-an-interface\">Why <em>MinimalLogger</em> is a class and not an interface</h4> <p>We can't use an interface as a provider token because interfaces are not JavaScript objects. They exist only in the TypeScript design space. They disappear after the code is transpiled to JavaScript.</p> <p>A provider token must be a real JavaScript object of some kind: a function, an object, a string ... a class.</p> <p>Using a class as an interface gives us the characteristics of an interface in a JavaScript object.</p> <p>The minimize memory cost, the class should have <em>no implementation</em>. The <code>MinimalLogger</code> transpiles to this unoptimized, pre-minified JavaScript:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">var MinimalLogger = (function () {\n  function MinimalLogger() {}\n  return MinimalLogger;\n}());\nexports(\"MinimalLogger\", MinimalLogger);\n</pre>\n<p>It never grows larger no matter how many members we add <em>as long as they are typed but not implemented</em>.</p> </div>\n<h3 id=\"opaque-token\">OpaqueToken</h3> <p>Dependency objects can be simple values like dates, numbers and strings or shapeless objects like arrays and functions.</p> <p>Such objects don't have application interfaces and therefore aren't well represented by a class. They're better represented by a token that is both unique and symbolic, a JavaScript object that has a friendly name but won't conflict with another token that happens to have the same name.</p> <p>The <code>OpaqueToken</code> has these characteristics. We encountered them twice in the <em>Hero of the Month</em> example, in the <em>title</em> value provider and in the <em>runnersUp</em> factory provider.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ provide: TITLE,         useValue:   'Hero of the Month' },\n{ provide: RUNNERS_UP,    useFactory:  runnersUpFactory(2), deps: [Hero, HeroService] }\n</pre>\n<p>We created the <code>TITLE</code> token like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { OpaqueToken } from '@angular/core';\n\nexport const TITLE = new OpaqueToken('title');\n</pre>\n<h2 id=\"di-inheritance\">Inject into a derived class</h2> <p>We must take care when writing a component that inherits from another component. If the base component has injected dependencies, we must re-provide and re-inject them in the derived class and then pass them down to the base class through the constructor.</p> <p>In this contrived example, <code>SortedHeroesComponent</code> inherits from <code>HeroesBaseComponent</code> to display a <em>sorted</em> list of heroes.</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/sorted-heroes.png\" alt=\"Sorted Heroes\"><p>The <code>HeroesBaseComponent</code> could stand on its own. It demands its own instance of the <code>HeroService</code> to get heroes and displays them in the order they arrive from the database.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/sorted-heroes.component.ts (HeroesBaseComponent)\">// app/sorted-heroes.component.ts (HeroesBaseComponent)\n\n@Component({\n  selector: 'unsorted-heroes',\n  template: `&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero.name}}&lt;/div&gt;`,\n  providers: [HeroService]\n})\nexport class HeroesBaseComponent implements OnInit {\n  constructor(private heroService: HeroService) { }\n\n  heroes: Array&lt;Hero&gt;;\n\n  ngOnInit() {\n    this.heroes = this.heroService.getAllHeroes();\n    this.afterGetHeroes();\n  }\n\n  // Post-process heroes in derived class override.\n  protected afterGetHeroes() {}\n\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>We strongly prefer simple constructors. They should do little more than initialize variables. This rule makes the component safe to construct under test without fear that it will do something dramatic like talk to the server. That's why we call the <code>HeroService</code> from within the <code>ngOnInit</code> rather than the constructor.</p> <p>We explain the mysterious <code>afterGetHeroes</code> below.</p> </div>\n<p>Users want to see the heroes in alphabetical order. Rather than modify the original component, we sub-class it and create a <code>SortedHeroesComponent</code> that sorts the heroes before presenting them. The <code>SortedHeroesComponent</code> lets the base class fetch the heroes. (we said it was contrived).</p> <p>Unfortunately, Angular cannot inject the <code>HeroService</code> directly into the base class. We must provide the <code>HeroService</code> again for <em>this</em> component, then pass it down to the base class inside the constructor.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/sorted-heroes.component.ts (SortedHeroesComponent)\">// app/sorted-heroes.component.ts (SortedHeroesComponent)\n\n@Component({\n  selector: 'sorted-heroes',\n  template: `&lt;div *ngFor=\"let hero of heroes\"&gt;{{hero.name}}&lt;/div&gt;`,\n  providers: [HeroService]\n})\nexport class SortedHeroesComponent extends HeroesBaseComponent {\n  constructor(heroService: HeroService) {\n    super(heroService);\n  }\n\n  protected afterGetHeroes() {\n    this.heroes = this.heroes.sort((h1, h2) =&gt; {\n      return h1.name &lt; h2.name ? -1 :\n            (h1.name &gt; h2.name ? 1 : 0);\n    });\n  }\n}\n</pre>\n<p>Now take note of the <code>afterGetHeroes</code> method. Our first instinct was to create an <code>ngOnInit</code> method in <code>SortedHeroesComponent</code> and do the sorting there. But Angular calls the <em>derived</em> class's <code>ngOnInit</code> <em>before</em> calling the base class's <code>ngOnInit</code> so we'd be sorting the heroes array <em>before they arrived</em>. That produces a nasty error.</p> <p>Overriding the base class's <code>afterGetHeroes</code> method solves the problem</p> <p>These complications argue for <em>avoiding component inheritance</em>. </p> <h2 id=\"find-parent\">Find a parent component by injection</h2> <p>Application components often need to share information. We prefer the more loosely coupled techniques such as data binding and service sharing. But sometimes it makes sense for one component to have a direct reference to another component perhaps to access values or call methods on that component.</p> <p>Obtaining a component reference is a bit tricky in Angular. Although an Angular application is a tree of components, there is no public API for inspecting and traversing that tree. </p> <p>There is an API for acquiring a child reference (checkout <code>Query</code>, <code>QueryList</code>, <code>ViewChildren</code>, and <code>ContentChildren</code>).</p> <p>There is no public API for acquiring a parent reference. But because every component instance is added to an injector's container, we can use Angular dependency injection to reach a parent component.</p> <p>This section describes some techniques for doing that.</p>  <h3 id=\"find-a-parent-component-of-known-type\">Find a parent component of known type</h3> <p>We use standard class injection to acquire a parent component whose type we know.</p> <p>In the following example, the parent <code>AlexComponent</code> has several children including a <code>CathyComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (AlexComponent v.1)\">// parent-finder.component.ts (AlexComponent v.1)\n\n@Component({\n  selector: 'alex',\n  template: `\n    &lt;div class=\"a\"&gt;\n      &lt;h3&gt;{{name}}&lt;/h3&gt;\n      &lt;cathy&gt;&lt;/cathy&gt;\n      &lt;craig&gt;&lt;/craig&gt;\n      &lt;carol&gt;&lt;/carol&gt;\n    &lt;/div&gt;`,\n})\nexport class AlexComponent extends Base\n{\n  name= 'Alex';\n}\n</pre>\n<p><em>Cathy</em> reports whether or not she has access to <em>Alex</em> after injecting an <code>AlexComponent</code> into her constructor:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (CathyComponent)\">// parent-finder.component.ts (CathyComponent)\n\n@Component({\n  selector: 'cathy',\n  template: `\n  &lt;div class=\"c\"&gt;\n    &lt;h3&gt;Cathy&lt;/h3&gt;\n    {{alex ? 'Found' : 'Did not find'}} Alex via the component class.&lt;br&gt;\n  &lt;/div&gt;`\n})\nexport class CathyComponent {\n  constructor( @Optional() public alex: AlexComponent ) { }\n}\n</pre>\n<p>We added the <a href=\"#optional\">@Optional</a> qualifier for safety but the <live-example name=\"cb-dependency-injection\"></live-example> confirms that the <code>alex</code> parameter is set.</p>  <h3 id=\"cannot-find-a-parent-by-its-base-class\">Cannot find a parent by its base class</h3> <p>What if we do <em>not</em> know the concrete parent component class?</p> <p>A re-usable component might be a child of multiple components. Imagine a component for rendering breaking news about a financial instrument. For sound (cough) business reasons, this news component makes frequent calls directly into its parent instrument as changing market data stream by.</p> <p>The app probably defines more than a dozen financial instrument components. If we're lucky, they all implement the same base class whose API our <code>NewsComponent</code> understands.</p> <div class=\"l-sub-section\">\n<p>Looking for components that implement an interface would be better. That's not possible because TypeScript interfaces disappear from the transpiled JavaScript which doesn't support interfaces. There's no artifact we could look for.</p> </div>\n<p>We're not claiming this is good design. We are asking <em>can a component inject its parent via the parent's base class</em>?</p> <p>The sample's <code>CraigComponent</code> explores this question. <a href=\"#alex\">Looking back</a> we see that the <code>Alex</code> component <em>extends</em> (<em>inherits</em>) from a class named <code>Base</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (Alex class signature)\">// parent-finder.component.ts (Alex class signature)\n\nexport class AlexComponent extends Base\n</pre>\n<p>The <code>CraigComponent</code> tries to inject <code>Base</code> into its <code>alex</code> constructor parameter and reports if it succeeded.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (CraigComponent)\">// parent-finder.component.ts (CraigComponent)\n\n@Component({\n  selector: 'craig',\n  template: `\n  &lt;div class=\"c\"&gt;\n    &lt;h3&gt;Craig&lt;/h3&gt;\n    {{alex ? 'Found' : 'Did not find'}} Alex via the base class.\n  &lt;/div&gt;`\n})\nexport class CraigComponent {\n  constructor( @Optional() public alex: Base ) { }\n}\n</pre>\n<p>Unfortunately, this does not work. The <live-example name=\"cb-dependency-injection\"></live-example> confirms that the <code>alex</code> parameter is null. <em>We cannot inject a parent by its base class.</em></p>  <h3 id=\"find-a-parent-by-its-class-interface\">Find a parent by its class-interface</h3> <p>We can find a parent component with a <a href=\"#class-interface\">class-interface</a>.</p> <p>The parent must cooperate by providing an <em>alias</em> to itself in the name of a <em>class-interface</em> token. </p> <p>Recall that Angular always adds a component instance to its own injector; that's why we could inject <em>Alex</em> into <em>Carol</em> <a href=\"#known-parent\">earlier</a>.</p> <p>We write an <a href=\"#useexisting\"><em>alias provider</em></a> — a <code>provide</code> object literal with a <code>useExisting</code> definition — that creates an <em>alternative</em> way to inject the same component instance and add that provider to the <code>providers</code> array of the <code>@Component</code> metadata for the <code>AlexComponent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (AlexComponent providers)\">// parent-finder.component.ts (AlexComponent providers)\n\nproviders: [{ provide: Parent, useExisting: forwardRef(() =&gt; AlexComponent) }],\n</pre>\n<p><a href=\"#parent-token\">Parent</a> is the provider's <em>class-interface</em> token. The <a href=\"#forwardref\"><em>forwardRef</em></a> breaks the circular reference we just created by having the <code>AlexComponent</code> refer to itself.</p> <p><em>Carol</em>, the third of <em>Alex</em>'s child components, injects the parent into its <code>parent</code> parameter, the same way we've done it before:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (CarolComponent class)\">// parent-finder.component.ts (CarolComponent class)\n\nexport class CarolComponent {\n  name= 'Carol';\n  constructor( @Optional() public parent: Parent ) { }\n}\n</pre>\n<p>Here's <em>Alex</em> and family in action:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/alex.png\" alt=\"Alex in action\"><h3 id=\"parent-tree\">Find the parent in a tree of parents</h3> <p>Imagine one branch of a component hierarchy: <em>Alice</em> -&gt; <em>Barry</em> -&gt; <em>Carol</em>. Both <em>Alice</em> and <em>Barry</em> implement the <code>Parent</code> <em>class-interface</em>.</p> <p><em>Barry</em> is the problem. He needs to reach his parent, <em>Alice</em>, and also be a parent to <em>Carol</em>. That means he must both <em>inject</em> the <code>Parent</code> <em>class-interface</em> to get <em>Alice</em> and <em>provide</em> a <code>Parent</code> to satisfy <em>Carol</em>.</p> <p>Here's <em>Barry</em>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (BarryComponent)\">// parent-finder.component.ts (BarryComponent)\n\nconst templateB = `\n  &lt;div class=\"b\"&gt;\n    &lt;div&gt;\n      &lt;h3&gt;{{name}}&lt;/h3&gt;\n      &lt;p&gt;My parent is {{parent?.name}}&lt;/p&gt;\n    &lt;/div&gt;\n    &lt;carol&gt;&lt;/carol&gt;\n    &lt;chris&gt;&lt;/chris&gt;\n  &lt;/div&gt;`;\n\n@Component({\n  selector:   'barry',\n  template:   templateB,\n  providers:  [{ provide: Parent, useExisting: forwardRef(() =&gt; BarryComponent) }]\n})\nexport class BarryComponent implements Parent {\n  name = 'Barry';\n  constructor( @SkipSelf() @Optional() public parent: Parent ) { }\n}\n</pre>\n<p><em>Barry</em>'s <code>providers</code> array looks just like <a href=\"#alex-providers\"><em>Alex</em>'s</a>. If we're going to keep writing <a href=\"#useexisting\"><em>alias providers</em></a> like this we should create a <a href=\"#provideparent\">helper function</a>.</p> <p>For now, focus on <em>Barry</em>'s constructor:</p> <pre language=\"ts\" name=\"Barry's constructor\" format=\".\" data-language=\"typescript\">// Barry's constructor\n\nconstructor( @SkipSelf() @Optional() public parent: Parent ) { }\n</pre>\n<pre language=\"ts\" name=\"Carol's constructor\" format=\".\" data-language=\"typescript\">// Carol's constructor\n\nconstructor( @Optional() public parent: Parent ) { }\n</pre>\n<p>It's identical to <em>Carol</em>'s constructor except for the additional <code>@SkipSelf</code> decorator.</p> <p><code>@SkipSelf</code> is essential for two reasons:</p> <ol> <li>\n<p>It tell the injector to start its search for a <code>Parent</code> dependency in a component <em>above</em> itself, which <em>is</em> what parent means.</p> </li> <li>\n<p>Angular throws a cyclic dependency error if we omit the <code>@SkipSelf</code> decorator.</p> <p><code>Cannot instantiate cyclic dependency! (BethComponent -&gt; Parent -&gt; BethComponent)</code></p> </li> </ol> <p>Here's <em>Alice</em>, <em>Barry</em> and family in action:</p> <img src=\"https://angular.io/resources/images/cookbooks/dependency-injection/alice.png\" alt=\"Alice in action\"><h3 id=\"parent-token\">The <em>Parent</em> class-interface</h3> <p>We <a href=\"#class-interface\">learned earlier</a> that a <em>class-interface</em> is an abstract class used as an interface rather than as a base class.</p> <p>Our example defines a <code>Parent</code> <em>class-interface</em> .</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (Parent class-interface)\">// parent-finder.component.ts (Parent class-interface)\n\nexport abstract class Parent { name: string; }\n</pre>\n<p>The <code>Parent</code> <em>class-interface</em> defines a <code>name</code> property with a type declaration but <em>no implementation</em>., The <code>name</code> property is the only member of a parent component that a child component can call. Such a narrowing interface helps decouple the child component class from its parent components.</p> <p>A component that could serve as a parent <em>should</em> implement the <em>class-interface</em> as the <code>AliceComponent</code> does:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (AliceComponent class signature)\">// parent-finder.component.ts (AliceComponent class signature)\n\nexport class AliceComponent implements Parent\n</pre>\n<p>Doing so adds clarity to the code. But it's not technically necessary. Although the <code>AlexComponent</code> has a <code>name</code> property (as required by its <code>Base</code> class) its class signature doesn't mention <code>Parent</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (AlexComponent class signature)\">// parent-finder.component.ts (AlexComponent class signature)\n\nexport class AlexComponent extends Base\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>AlexComponent</code> <em>should</em> implement <code>Parent</code> as a matter of proper style. It doesn't in this example <em>only</em> to demonstrate that the code will compile and run without the interface </p> </div>\n<h3 id=\"provideparent\">A <em>provideParent</em> helper function</h3> <p>Writing variations of the same parent <em>alias provider</em> gets old quickly, especially this awful mouthful with a <a href=\"#forwardref\"><em>forwardRef</em></a>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [{ provide: Parent, useExisting: forwardRef(() =&gt; AlexComponent) }],\n</pre>\n<p>We can extract that logic into a helper function like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// Helper method to provide the current component instance in the name of a `parentType`.\nconst provideParent =\n  (component: any) =&gt; {\n    return { provide: Parent, useExisting: forwardRef(() =&gt; component) };\n  };\n</pre>\n<p>Now we can add a simpler, more meaningful parent provider to our components:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers:  [ provideParent(AliceComponent) ]\n</pre>\n<p>We can do better. The current version of the helper function can only alias the <code>Parent</code> <em>class-interface</em>. Our application might have a variety of parent types, each with its own <em>class-interface</em> token.</p> <p>Here's a revised version that defaults to <code>parent</code> but also accepts an optional second parameter for a different parent <em>class-interface</em>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// Helper method to provide the current component instance in the name of a `parentType`.\n// The `parentType` defaults to `Parent` when omitting the second parameter.\nconst provideParent =\n  (component: any, parentType?: any) =&gt; {\n    return { provide: parentType || Parent, useExisting: forwardRef(() =&gt; component) };\n  };\n</pre>\n<p>And here's how we could use it with a different parent type:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers:  [ provideParent(BethComponent, DifferentParent) ]\n</pre>\n<h2 id=\"forwardref\">Break circularities with a forward class reference (<em>forwardRef</em>)</h2> <p>The order of class declaration matters in TypeScript. We can't refer directly to a class until it's been defined.</p> <p>This isn't usually a problem, especially if we adhere to the recommended <em>one class per file</em> rule. But sometimes circular references are unavoidable. We're in a bind when class 'A refers to class 'B' and 'B' refers to 'A'. One of them has to be defined first. </p> <p>The Angular <code>forwardRef</code> function creates an <em>indirect</em> reference that Angular can resolve later.</p> <p>The <em>Parent Finder</em> sample is full of circular class references that are impossible to break.</p> <p>We face this dilemma when a class makes <em>a reference to itself</em> as does the <code>AlexComponent</code> in its <code>providers</code> array. The <code>providers</code> array is a property of the <code>@Component</code> decorator function which must appear <em>above</em> the class definition.</p> <p>We break the circularity with <code>forwardRef</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"parent-finder.component.ts (AlexComponent providers)\">// parent-finder.component.ts (AlexComponent providers)\n\nproviders: [{ provide: Parent, useExisting: forwardRef(() =&gt; AlexComponent) }],\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/dependency-injection.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/dependency-injection.html</a>\n  </p>\n</div>\n","guide/displaying-data":"<h1 class=\"hero-title text-display-1 \">Displaying Data</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Interpolation and other forms of property binding help us show app data in the UI.</p></div>\n<p>We typically display data in Angular by binding controls in an HTML template to properties of an Angular component.</p> <p>In this chapter, we'll create a component with a list of heroes. Each hero has a name. We'll display the list of hero names and conditionally show a message below the list.</p> <p>The final UI looks like this:</p> <img src=\"https://angular.io/resources/images/devguide/displaying-data/final.png\" alt=\"Final UI\"><h1 id=\"table-of-contents\">Table Of Contents</h1> <ul> <li><a href=\"#interpolation\">Showing component properties with interpolation</a></li> <li><a href=\"#ngFor\">Showing an array property with NgFor</a></li> <li><a href=\"#ngIf\">Conditional display with NgIf</a></li> </ul> <div class=\"l-sub-section\">\n<p>The <live-example></live-example> demonstrates all of the syntax and code snippets described in this chapter.</p> </div>\n<h2 id=\"showing-component-properties-with-interpolation\">Showing component properties with interpolation</h2> <p>The easiest way to display a component property is to bind the property name through interpolation. With interpolation, we put the property name in the view template, enclosed in double curly braces: <code>{{myHero}}</code>.</p> <p>Let's build a small illustrative example together.</p> <p>Create a new project folder (<ngio-ex path=\"displaying-data\"></ngio-ex>) and follow the steps in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>.</p> <div class=\"l-sub-section\">\n<p>Alternatively, begin with a <a href=\"https://github.com/angular/quickstart/blob/master/README.md\">download of the QuickStart source</a>.</p> </div>\n<p>Then modify the <ngio-ex path=\"app.component.ts\"></ngio-ex> file by changing the template and the body of the component. When we're done, it should look like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n    `\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  myHero = 'Windstorm';\n}\n</pre>\n<p>We added two properties to the formerly empty component: <code>title</code> and <code>myHero</code>.</p> <p>Our revised template displays the two component properties using double curly brace interpolation:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n  `\n</pre>\n<div class=\"l-sub-section\">\n<p>The template is a multi-line string within ECMAScript 2015 backticks (<code>`</code>). The backtick (<code>`</code>) — which is <em>not</em> the same character as a single quote (<code>'</code>) — has many nice features. The feature we're exploiting here is the ability to compose the string over several lines, which makes for much more readable HTML.</p> </div>\n<p>Angular automatically pulls the value of the <code>title</code> and <code>myHero</code> properties from the component and inserts those values into the browser. Angular updates the display when these properties change.</p> <div class=\"l-sub-section\">\n<p>More precisely, the redisplay occurs after some kind of asynchronous event related to the view such as a keystroke, a timer completion, or an async <code>XHR</code> response. We don't have those in this sample. But then the properties aren't changing on their own either. For the moment we must operate on faith.</p> </div>\n<p>Notice that we haven't called <strong>new</strong> to create an instance of the <code>AppComponent</code> class. Angular is creating an instance for us. How?</p> <p>Notice the CSS <code>selector</code> in the <code>@Component</code> decorator that specifies an element named <code>my-app</code>. Remember back in <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a> that we added the <code>&lt;my-app&gt;</code> element to the body of our <code>index.html</code> file:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (body)\">&lt;!-- index.html (body) --&gt;\n\n&lt;body&gt;\n  &lt;my-app&gt;loading...&lt;/my-app&gt;\n&lt;/body&gt;\n</pre>\n<p>When we bootstrap with the <code>AppComponent</code> class (in <ngio-ex path=\"main.ts\"></ngio-ex>), Angular looks for a <code>&lt;my-app&gt;</code> in the <code>index.html</code>, finds it, instantiates an instance of <code>AppComponent</code>, and renders it inside the <code>&lt;my-app&gt;</code> tag.</p> <p>Try running the app. It should display the title and hero name:</p> <img src=\"https://angular.io/resources/images/devguide/displaying-data/title-and-hero.png\" alt=\"Title and Hero\"><p>Let's review some of the choices we made and consider alternatives.</p> <h2 id=\"template-inline-or-template-file-\">Template inline or template file?</h2> <p>We can store our component's template in one of two places. We can define it <em>inline</em> using the <code>template</code> property, as we do here. Or we can define the template in a separate HTML file and link to it in the component metadata using the <code>@Component</code> decorator's <code>templateUrl</code> property.</p> <p>The choice between inline and separate HTML is a matter of taste, circumstances, and organization policy. Here we're using inline HTML because the template is small, and the demo is simpler without the additional HTML file.</p> <p>In either style, the template data bindings have the same access to the component's properties.</p> <h2 id=\"constructor-or-variable-initialization-\">Constructor or variable initialization?</h2> <p>We initialized our component properties using variable assignment. This is a wonderfully concise and compact technique.</p> <p>Some folks prefer to declare the properties and initialize them within a constructor like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app-ctor.component.ts (class)\">// app/app-ctor.component.ts (class)\n\nexport class AppCtorComponent {\n  title: string;\n  myHero: string;\n\n  constructor() {\n    this.title = 'Tour of Heroes';\n    this.myHero = 'Windstorm';\n  }\n}\n</pre>\n<p>That's fine too. The choice is a matter of taste and organization policy. We'll adopt the more terse \"variable assignment\" style in this chapter simply because there will be less code to read.</p> <h2 id=\"showing-_an-_array-property-with-ngfor-\">Showing an array property with <strong>*ngFor</strong>\n</h2> <p>We want to display a list of heroes. We begin by adding an array of hero names to the component and redefine <code>myHero</code> to be the first name in the array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (class)\">// app/app.component.ts (class)\n\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = ['Windstorm', 'Bombasto', 'Magneta', 'Tornado'];\n  myHero = this.heroes[0];\n}\n</pre>\n<p>Now we use the Angular <code>ngFor</code> directive in the template to display each item in the <code>heroes</code> list.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template)\">// app/app.component.ts (template)\n\n  template: `\n    &lt;h1&gt;{{title}}&lt;/h1&gt;\n    &lt;h2&gt;My favorite hero is: {{myHero}}&lt;/h2&gt;\n    &lt;p&gt;Heroes:&lt;/p&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let hero of heroes\"&gt;\n        {{ hero }}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  `\n</pre>\n<p>Our presentation is the familiar HTML unordered list with <code>&lt;ul&gt;</code> and <code>&lt;li&gt;</code> tags. Let's focus on the <code>&lt;li&gt;</code> tag.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">&lt;li *ngFor=\"let hero of heroes\"&gt;\n  {{ hero }}\n&lt;/li&gt;\n</pre>\n<p>We added a somewhat mysterious <code>*ngFor</code> to the <code>&lt;li&gt;</code> element. That's the Angular \"repeater\" directive. Its presence on the <code>&lt;li&gt;</code> tag marks that <code>&lt;li&gt;</code> element (and its children) as the \"repeater template\".</p> <div class=\"alert is-important\">\n<p>Don't forget the leading asterisk (*) in <code>*ngFor</code>. It is an essential part of the syntax. Learn more about this and <code>ngFor</code> in the <a href=\"template-syntax#ngFor\">Template Syntax</a> chapter.</p> </div>\n<p>Notice the <code>hero</code> in the <code>ngFor</code> double-quoted instruction; it is an example of a <a href=\"template-syntax#ngForMicrosyntax\">template input variable</a>.</p> <p>Angular duplicates the <code>&lt;li&gt;</code> for each item in the list, setting the <code>hero</code> variable to the item (the hero) in the current iteration. Angular uses that variable as the context for the interpolation in the double curly braces.</p> <div class=\"l-sub-section\">\n<p>We happened to give <code>ngFor</code> an array to display. In fact, <code>ngFor</code> can repeat items for any <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols\">iterable</a> object.</p> </div>\n<p>Now the heroes appear in an unordered list.</p> <img src=\"https://angular.io/resources/images/devguide/displaying-data/hero-names-list.png\" alt=\"After ngfor\"><h2 id=\"creating-a-class-for-the-data\">Creating a class for the data</h2> <p>We are defining our data directly inside our component. That's fine for a demo but certainly isn't a best practice. It's not even a good practice. Although we won't do anything about that in this chapter, we'll make a mental note to fix this down the road.</p> <p>At the moment, we're binding to an array of strings. We do that occasionally in real applications, but most of the time we're binding to more specialized objects.</p> <p>Let's turn our array of hero names into an array of <code>Hero</code> objects. For that we'll need a <code>Hero</code> class.</p> <p>Create a new file in the <code>app</code> folder called <ngio-ex path=\"hero.ts\"></ngio-ex> with the following code:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.ts (excerpt)\">// app/hero.ts (excerpt)\n\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n</pre>\n<p>We've defined a class with a constructor and two properties: <code>id</code> and <code>name</code>.</p> <p>It might not look like we have properties, but we do. We're taking advantage of a TypeScript shortcut in our declaration of the constructor parameters.</p> <p>Consider the first parameter:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero.ts (excerpt)\">// app/hero.ts (excerpt)\n\npublic id: number,\n</pre>\n<p>That brief syntax does a lot:</p> <ul> <li>Declares a constructor parameter and its type</li> <li>Declares a public property of the same name</li> <li>Initializes that property with the corresponding argument when we \"new\" an instance of the class</li> </ul> <h2 id=\"using-the-hero-class\">Using the Hero class</h2> <p>Let's make the <code>heroes</code> property in our component return an array of these <code>Hero</code> objects.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (heroes)\">// app/app.component.ts (heroes)\n\nheroes = [\n  new Hero(1, 'Windstorm'),\n  new Hero(13, 'Bombasto'),\n  new Hero(15, 'Magneta'),\n  new Hero(20, 'Tornado')\n];\nmyHero = this.heroes[0];\n</pre>\n<p>We'll have to update the template. At the moment it displays the hero's <code>id</code> and <code>name</code>. Let's fix that so we display only the hero's <code>name</code> property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template)\">// app/app.component.ts (template)\n\ntemplate: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero.name}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *ngFor=\"let hero of heroes\"&gt;\n      {{ hero.name }}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n</pre>\n<p>Our display looks the same, but now we know much better what a hero really is.</p> <h2 id=\"conditional-display-with-ngif\">Conditional display with NgIf</h2> <p>Sometimes an app needs to display a view or a portion of a view only under specific circumstances.</p> <p>In our example, we'd like to display a message if we have a large number of heroes, say, more than 3.</p> <p>The Angular <code>ngIf</code> directive inserts or removes an element based on a truthy/falsey condition. We can see it in action by adding the following paragraph at the bottom of the template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (message)\">// app/app.component.ts (message)\n\n&lt;p *ngIf=\"heroes.length &gt; 3\"&gt;There are many heroes!&lt;/p&gt;\n</pre>\n<div class=\"alert is-important\">\n<p>Don't forget the leading asterisk (*) in <code>*ngIf</code>. It is an essential part of the syntax. Learn more about this and <code>ngIf</code> in the <a href=\"template-syntax#ngIf\">Template Syntax</a> chapter.</p> </div>\n<p>The <a href=\"template-syntax#template-expressions\">template expression</a> inside the double quotes looks much like TypeScript, and it <em>is</em> much like TypeScript. When the component's list of heroes has more than 3 items, Angular adds the paragraph to the DOM and the message appears. If there are 3 or fewer items, Angular omits the paragraph, so no message appears.</p> <div class=\"alert is-helpful\">\n<p>Angular isn't showing and hiding the message. It is adding and removing the paragraph element from the DOM. That hardly matters here. But it would matter a great deal, from a performance perspective, if we were conditionally including or excluding a big chunk of HTML with many data bindings.</p> </div>\n<p>Try it out. Because the array has four items, the message should appear. Go back into <ngio-ex path=\"app.component.ts\"></ngio-ex> and delete or comment out one of the elements from the hero array. The browser should refresh automatically and the message should disappear.</p> <h2 id=\"summary\">Summary</h2> <p>Now we know how to use:</p> <ul> <li>\n<strong>Interpolation</strong> with double curly braces to display a component property</li> <li>\n<strong>ngFor</strong> to display an array of items</li> <li>A TypeScript class to shape the <strong>model data</strong> for our component and display properties of that model</li> <li>\n<strong>ngIf</strong> to conditionally display a chunk of HTML based on a boolean expression</li> </ul> <p>Here's our final code:</p> <pre language=\"ts\" name=\"app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { Hero } from './hero';\n\n@Component({\n  selector: 'my-app',\n  template: `\n  &lt;h1&gt;{{title}}&lt;/h1&gt;\n  &lt;h2&gt;My favorite hero is: {{myHero.name}}&lt;/h2&gt;\n  &lt;p&gt;Heroes:&lt;/p&gt;\n  &lt;ul&gt;\n    &lt;li *ngFor=\"let hero of heroes\"&gt;\n      {{ hero.name }}\n      &lt;/li&gt;\n  &lt;/ul&gt;\n  &lt;p *ngIf=\"heroes.length &gt; 3\"&gt;There are many heroes!&lt;/p&gt;\n`\n})\nexport class AppComponent {\n  title = 'Tour of Heroes';\n  heroes = [\n    new Hero(1, 'Windstorm'),\n    new Hero(13, 'Bombasto'),\n    new Hero(15, 'Magneta'),\n    new Hero(20, 'Tornado')\n  ];\n  myHero = this.heroes[0];\n}\n</pre>\n<pre language=\"ts\" name=\"app/hero.ts\" format=\"linenums\" data-language=\"typescript\">// app/hero.ts\n\nexport class Hero {\n  constructor(\n    public id: number,\n    public name: string) { }\n}\n</pre>\n<pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"main.ts\" format=\"linenums\" data-language=\"typescript\">// main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<div class=\"l-sub-section\">\n<h3>Next Step</h3>\n<a href=\"user-input\">User Input</a>\n</div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/displaying-data.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/displaying-data.html</a>\n  </p>\n</div>\n","guide/router":"<h1 class=\"hero-title text-display-1 \">Routing &amp; Navigation</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Discover the basics of screen navigation with the Angular 2 Component Router.</p></div>\n<p>The Angular <strong><em>Component Router</em></strong> enables navigation from one <a href=\"../glossary#view\">view</a> to the next as users perform application tasks.</p> <p>We cover the router's primary features in this chapter, illustrating them through the evolution of a small application that we can <live-example>run live</live-example>.</p> <div class=\"l-sub-section\">\n<img src=\"https://angular.io/resources/images/devguide/plunker-separate-window-button.png\" alt=\"pop out the window\" align=\"right\" style=\"\"><p>To see the URL changes in the browser address bar, pop out the preview window by clicking the blue 'X' button in the upper right corner.</p> </div>\n<h2 id=\"overview\">Overview</h2> <p>The browser is a familiar model of application navigation. We enter a URL in the address bar and the browser navigates to a corresponding page. We click links on the page and the browser navigates to a new page. We click the browser's back and forward buttons and the browser navigates backward and forward through the history of pages we've seen.</p> <p>The Angular <strong><em>Component Router</em></strong> (\"the router\") borrows from this model. It can interpret a browser URL as an instruction to navigate to a client-generated view and pass optional parameters along to the supporting view component to help it decide what specific content to present. We can bind the router to links on a page and it will navigate to the appropriate application view when the user clicks a link. We can navigate imperatively when the user clicks a button, selects from a drop box, or in response to some other stimulus from any source. And the router logs activity in the browser's history journal so the back and forward buttons work as well.</p> <p>We'll learn many router details in this chapter which covers</p> <ul> <li>Setting the <a href=\"#base-href\">base href</a>\n</li> <li>Importing from the <a href=\"#import\">router library</a>\n</li> <li><a href=\"#route-config\">configuring the router</a></li> <li>the <a href=\"#link-parameters-array\">link parameters array</a> that propels router navigation</li> <li>navigating when the user clicks a data-bound <a href=\"#router-link\">RouterLink</a>\n</li> <li>navigating under <a href=\"#navigate\">program control</a>\n</li> <li>toggling css classes for the <a href=\"#router-link-active\">active router link</a>\n</li> <li>embedding critical information in the URL with <a href=\"#route-parameters\">route parameters</a>\n</li> <li>providing non-critical information in <a href=\"#optional-route-parameters\">optional route parameters</a>\n</li> <li>add <a href=\"#child-routing-component\">child routes</a> under a feature section</li> <li>\n<a href=\"#redirect\">redirecting</a> from one route to another</li> <li>confirming or canceling navigation with <a href=\"#guards\">guards</a><ul> <li>\n<a href=\"#can-activate-guard\">CanActivate</a> to prevent navigation to a route</li> <li>\n<a href=\"#can-deactivate-guard\">CanDeactivate</a> to prevent navigation away from the current route</li> <li>\n<a href=\"#resolve-guard\">Resolve</a> to pre-fetch data before activating a route</li> </ul> </li> <li>providing optional information across routes with <a href=\"#query-parameters\">query parameters</a>\n</li> <li>jumping to anchor elements using a <a href=\"#fragment\">fragment</a>\n</li> <li>loading feature areas <a href=\"#asynchronous-routing\">asynchronously</a>\n</li> <li>choosing the \"HTML5\" or \"hash\" <a href=\"#browser-url-styles\">URL style</a>\n</li> </ul> <p>We proceed in phases marked by milestones building from a simple two-pager with placeholder views up to a modular, multi-view design with child routes.</p> <p>But first, an overview of router basics.</p> <h2 id=\"the-basics\">The Basics</h2> <p>Let's begin with a few core concepts of the Component Router. Then we can explore the details through a sequence of examples.</p> <h3 id=\"-lt-base-href-\"><em>&lt;base href&gt;</em></h3> <p>Most routing applications should add a <code>&lt;base&gt;</code> element to the <strong><code>index.html</code></strong> as the first child in the <code>&lt;head&gt;</code> tag to tell the router how to compose navigation URLs.</p> <p>If the <code>app</code> folder is the application root, as it is for our sample application, set the <code>href</code> value <em>exactly</em> as shown here.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (base href)\">&lt;!-- index.html (base href) --&gt;\n\n&lt;base href=\"/\"&gt;\n</pre>\n<h3 id=\"router-imports\">Router imports</h3> <p>The Angular Component Router is an optional service that presents a particular component view for a given URL. It is not part of the Angular 2 core. It is in its own library package, <code>@angular/router</code>. We import what we need from it as we would from any other Angular package.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (import)\">// app/app.routing.ts (import)\n\nimport { Routes, RouterModule }   from '@angular/router';\n</pre>\n<div class=\"l-sub-section\">\n<p>We cover other options in the <a href=\"#browser-url-styles\">details below</a>.</p> </div>\n<h3 id=\"configuration\">Configuration</h3> <p>The application will have one <em><code>router</code></em>. When the browser's URL changes, the router looks for a corresponding <strong><code>Route</code></strong> from which it can determine the component to display.</p> <p>A router has no routes until we configure it. We bootstrap our application with an array of routes that we'll provide to our <strong><code>RouterModule.forRoot</code></strong> function.</p> <p>In the following example, we configure our application with four route definitions.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts\">// app/app.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisCenterComponent },\n  {\n    path: 'heroes',\n    component: HeroListComponent,\n    data: {\n      title: 'Heroes List'\n    }\n  },\n  { path: 'hero/:id', component: HeroDetailComponent },\n  { path: '**', component: PageNotFoundComponent }\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<div class=\"l-sub-section\">\n<p>The <code>Routes</code> is an array of <em>routes</em> that describe how to navigate. Each <em>Route</em> maps a URL <code>path</code> to a component.</p> <p>There are no <strong>leading slashes</strong> in our <strong>path</strong>. The router parses and builds the URL for us, allowing us to use relative and absolute paths when navigating between application views.</p> <p>The <code>data</code> property in the second route is a place to store arbitrary data associated to each specific route. This data is accessible with each activated route and can be used to store items such as page titles, breadcrumb text and other read-only data. We'll use the <a href=\"#resolve-guard\">resolve guard</a> to retrieve additional data later in the chapter.</p> <p>The <code>:id</code> in the third route is a token for a route parameter. In a URL such as <code>/hero/42</code>, \"42\" is the value of the <code>id</code> parameter. The corresponding <code>HeroDetailComponent</code> will use that value to find and present the hero whose <code>id</code> is 42. We'll learn more about route parameters later in this chapter.</p> <p>The <code>**</code> in the fourth route denotes a <strong>wildcard</strong> path for our route. The router will match this route if the URL requested doesn't match any paths for routes defined in our configuration. This is useful for displaying a 404 page or redirecting to another route.</p> </div>\n<p>We export the <code>routing</code> constant so we can import it into our <code>app.module.ts</code> file where we'll add a configured <em>Router</em> module to our root NgModule imports.</p> <p>Next we open <code>app.module.ts</code> where we must register our routing, routing providers, and declare our two route components.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (basic setup)\">// app/app.module.ts (basic setup)\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { CrisisListComponent }  from './crisis-list.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [ AppComponent ]\n})\n</pre>\n<h3 id=\"router-outlet\">Router Outlet</h3> <p>Given this configuration, when the browser URL for this application becomes <code>/heroes</code>, the router matches that URL to the <code>Route</code> path <code>/heroes</code> and displays the <code>HeroListComponent</code> in a <strong><code>RouterOutlet</code></strong> that we've placed in the host view's HTML.</p> <pre format=\"\" language=\"html\" data-language=\"html\">&lt;!-- Routed views go here --&gt;\n&lt;router-outlet&gt;&lt;/router-outlet&gt;</pre>\n<h3 id=\"router-links\">Router Links</h3> <p>Now we have routes configured and a place to render them, but how do we navigate? The URL could arrive directly from the browser address bar. But most of the time we navigate as a result of some user action such as the click of an anchor tag.</p> <p>We add a <strong><code>RouterLink</code></strong> directive to the anchor tag. Since we know our link doesn't contain any dynamic information, we can use a one-time binding to our route <em>path</em>.</p> <p>If our <code>RouterLink</code> needed to be more dynamic we could bind to a template expression that returns an array of route link parameters (the <strong>link parameters array</strong>). The router ultimately resolves that array into a URL and a component view.</p> <p>We also add a <strong><code>RouterLinkActive</code></strong> directive to each anchor tag to add or remove CSS classes to the element when the associated <em>RouterLink</em> becomes active. The directive can be added directly on the element or on its parent element.</p> <p>We see such bindings in the following <code>AppComponent</code> template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;h1&gt;Component Router&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<div class=\"l-sub-section\">\n<p>We're adding two anchor tags with <code>RouterLink</code> and <code>RouterLinkActive</code> directives. We bind each <code>RouterLink</code> to a string containing the path of a route. '/crisis-center' and '/heroes' are the paths of the <code>Routes</code> we configured above.</p> <p>We'll learn to write link expressions — and why they are arrays — <a href=\"#link-parameters-array\">later</a> in the chapter.</p> <p>We define <code>active</code> as the CSS class we want toggled to each <code>RouterLink</code> when they become the current route using the <code>RouterLinkActive</code> directive. We could add multiple classes to the <code>RouterLink</code> if we so desired.</p> </div>\n<h3 id=\"router-state\">Router State</h3> <p>After the end of each successful navigation lifecycle, the router builds a tree of <code>ActivatedRoute</code> objects that make up the current state of the router. We can access the current <code>RouterState</code> from anywhere in our application using the <code>Router</code> service and the <code>routerState</code> property.</p> <p>The router state provides us with methods to traverse up and down the route tree from any activated route to get information we may need from parent, child and sibling routes.</p> <h3 id=\"let-s-summarize\">Let's summarize</h3> <p>The application is provided with a configured router. The component has a <code>RouterOutlet</code> where it can display views produced by the router. It has <code>RouterLink</code>s that users can click to navigate via the router.</p> <p>Here are the key <em>Component Router</em> terms and their meanings:</p> <table>\n<tr>\n<th>Router Part</th>\n<th>Meaning</th>\n</tr>\n<tr>\n<td><code>Router</code></td>\n<td>Displays the application component for the active URL. Manages navigation from one component to the next.</td>\n</tr>\n<tr>\n<td><code>RouterModule</code></td>\n<td>A separate Angular module that provides the necessary service providers and directives for navigating through application views.</td>\n</tr>\n<tr>\n<td><code>Routes</code></td>\n<td>Defines an array of Routes, each mapping a URL path to a component.</td>\n</tr>\n<tr>\n<td><code>Route</code></td>\n<td>Defines how the router should navigate to a component based on a URL pattern. Most routes consist of a path and a component type.</td>\n</tr>\n<tr>\n<td><code>RouterOutlet</code></td>\n<td>The directive (<code>&lt;router-outlet&gt;</code>) that marks where the router should display a view.</td>\n</tr>\n<tr>\n<td><code>RouterLink</code></td>\n<td>The directive for binding a clickable HTML element to a route. Clicking an anchor tag with a <code>routerLink</code> directive that is bound to a <i>string</i> or a <i>Link Parameters Array</i> triggers a navigation.</td>\n</tr>\n<tr>\n<td><code>RouterLinkActive</code></td>\n<td>The directive for adding/removing classes from an HTML element when an associated routerLink contained on or inside the element becomes active/inactive.</td>\n</tr>\n<tr>\n<td><code>ActivatedRoute</code></td>\n<td>A service that is provided to each route component that contains route specific information such as route parameters, static data, resolve data, global query params and the global fragment.</td>\n</tr>\n<tr>\n<td><code>RouterState</code></td>\n<td>The current state of the router including a tree of the currently activated routes in our application along convenience methods for traversing the route tree.</td>\n</tr>\n<tr>\n<td><code><i>Link Parameters Array</i></code></td>\n<td>An array that the router interprets into a routing instruction. We can bind a <code>RouterLink</code> to that array or pass the array as an argument to the <code>Router.navigate</code> method.</td>\n</tr>\n<tr>\n<td><code><i>Routing Component</i></code></td>\n<td>An Angular component with a <code>RouterOutlet</code> that displays views based on router navigations.</td>\n</tr>\n</table>\n<p>We've barely touched the surface of the router and its capabilities.</p> <p>The following detail sections describe a sample routing application as it evolves over a sequence of milestones. We strongly recommend taking the time to read and understand this story.</p> <h2 id=\"the-sample-application\">The Sample Application</h2> <p>We have an application in mind as we move from milestone to milestone.</p> <div class=\"l-sub-section\">\n<p>While we make incremental progress toward the ultimate sample application, this chapter is not a tutorial. We discuss code and design decisions pertinent to routing and application design. We gloss over everything in between.</p> <p>The full source is available in the <live-example></live-example>.</p> </div>\n<p>Our client is the Hero Employment Agency. Heroes need work and The Agency finds Crises for them to solve.</p> <p>The application has two main feature areas:</p> <ol> <li>A <em>Crisis Center</em> where we maintain the list of crises for assignment to heroes.</li> <li>A <em>Heroes</em> area where we maintain the list of heroes employed by The Agency.</li> </ol> <p>Run the <live-example></live-example>. It opens in the <em>Crisis Center</em>. We'll come back to that.</p> <p>Click the <em>Heroes</em> link. We're presented with a list of Heroes.</p> <img src=\"https://angular.io/resources/images/devguide/router/hero-list.png\" alt=\"Hero List\" width=\"250\"><p>We select one and the application takes us to a hero editing screen.</p> <img src=\"https://angular.io/resources/images/devguide/router/hero-detail.png\" alt=\"Crisis Center Detail\" width=\"250\"><p>Our changes take effect immediately. We click the \"Back\" button and the app returns us to the Heroes list.</p> <p>We could have clicked the browser's back button instead. That would have returned us to the Heroes List as well. Angular app navigation updates the browser history as normal web navigation does.</p> <p>Now click the <em>Crisis Center</em> link. We go to the <em>Crisis Center</em> and its list of ongoing crises.</p> <img src=\"https://angular.io/resources/images/devguide/router/crisis-center-list.png\" alt=\"Crisis Center List\"><p>We select one and the application takes us to a crisis editing screen.</p> <img src=\"https://angular.io/resources/images/devguide/router/crisis-center-detail.png\" alt=\"Crisis Center Detail\"><p>This is a bit different from the <em>Hero Detail</em>. <em>Hero Detail</em> saves the changes as we type. In <em>Crisis Detail</em> our changes are temporary until we either save or discard them by pressing the \"Save\" or \"Cancel\" buttons. Both buttons navigate back to the <em>Crisis Center</em> and its list of crises.</p> <p>Suppose we click a crisis, make a change, but <strong><em>do not click either button</em></strong>. Maybe we click the browser back button instead. Maybe we click the \"Heroes\" link.</p> <p>Do either. Up pops a dialog box.</p> <img src=\"https://angular.io/resources/images/devguide/router/confirm-dialog.png\" alt=\"Confirm Dialog\" width=\"300\"><p>We can say \"OK\" and lose our changes or click \"Cancel\" and continue editing.</p> <p>The router supports a <code>CanDeactivate</code> guard that gives us a chance to clean-up or ask the user's permission before navigating away from the current view.</p> <p>Here we see an entire user session that touches all of these features.</p> <img src=\"https://angular.io/resources/images/devguide/router/router-anim.gif\" alt=\"App in action\" id=\"full-app-demo\"><p>Here's a diagram of all application routing options:</p> <img src=\"https://angular.io/resources/images/devguide/router/complete-nav.png\" alt=\"Navigation diagram\"><p>This app illustrates the router features we'll cover in this chapter</p> <ul> <li>organizing the application features into modules</li> <li>navigating to a component (<em>Heroes</em> link to \"Heroes List\")</li> <li>including a route parameter (passing the Hero <code>id</code> while routing to the \"Hero Detail\")</li> <li>child routes (the <em>Crisis Center</em> has its own routes)</li> <li>the <code>CanActivate</code> guard (checking route access)</li> <li>the <code>CanDeactivate</code> guard (ask permission to discard unsaved changes)</li> <li>the <code>Resolve</code> guard (pre-fetching route data)</li> <li>lazy loading feature area modules</li> </ul> <h2 id=\"getting-started\">Milestone #1: Getting Started with the Router</h2> <p>Let's begin with a simple version of the app that navigates between two empty views.</p> <img src=\"https://angular.io/resources/images/devguide/router/router-1-anim.gif\" alt=\"App in action\"><h3 id=\"base-href\">Set the <em>&lt;base href&gt;</em>\n</h3> <p>The Component Router uses the browser's <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\">history.pushState</a> for navigation. Thanks to <code>pushState</code>, we can make our in-app URL paths look the way we want them to look, e.g. <code>localhost:3000/crisis-center</code>. Our in-app URLs can be indistinguishable from server URLs.</p> <p>Modern HTML 5 browsers were the first to support <code>pushState</code> which is why many people refer to these URLs as \"HTML 5 style\" URLs.</p> <p>We must <strong>add a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">&lt;base href&gt; element</a> tag</strong> to the <code>index.html</code> to make <code>pushState</code> routing work. The browser also needs the base <code>href</code> value to prefix <em>relative</em> URLs when downloading and linking to css files, scripts, and images.</p> <p>Add the base element just after the <code>&lt;head&gt;</code> tag. If the <code>app</code> folder is the application root, as it is for our application, set the <code>href</code> value in <strong><code>index.html</code></strong> <em>exactly</em> as shown here.</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html (base href)\">&lt;!-- index.html (base href) --&gt;\n\n&lt;base href=\"/\"&gt;\n</pre>\n<div class=\"l-sub-section\">\n<p>HTML 5 style navigation is the Component Router default. Learn why \"HTML 5\" style is preferred, how to adjust its behavior, and how to switch to the older hash (#) style if necessary in the <a href=\"#browser-url-styles\">Browser URL Styles</a> appendix below.</p> </div>\n<div class=\"l-sub-section\">\n<h4 id=\"live-example-note\">Live example note</h4> <p>We have to get tricky when we run the live example because the host service sets the application base address dynamically. That's why we replace the <code>&lt;base href...&gt;</code> with a script that writes a <code>&lt;base&gt;</code> tag on the fly to match.</p> <pre format=\"\">&lt;script&gt;document.write('&lt;base href=\"' + document.location + '\" /&gt;');&lt;/script&gt;</pre>\n<p>We should only need this trick for the live example, not production code.</p> </div>\n<h3 id=\"configure-the-routes-for-the-router\">Configure the routes for the Router</h3> <p>We begin by importing some symbols from the router library.</p> <p>The Component Router is in its own <code>@angular/router</code> package. It's not part of the Angular 2 core. The router is an optional service because not all applications need routing and, depending on your requirements, you may need a different routing library.</p> <p>We teach our router how to navigate by configuring it with routes. We recommend creating a separate <code>app.routing.ts</code> file dedicated to this purpose.</p> <div class=\"l-sub-section\">\n<p>Defining configuration in a separate file paves the way for a future in which we load routing configuration immediately but <em>delay loading the components themselves</em> until the user needs them.</p> <p>Such <a href=\"#asynchronous-routing\"><em>asynchronous routing</em></a> can make our application launch more quickly.</p> </div>\n<p>Here is our first configuration. We pass the array of routes to the <code>RouterModule.forRoot</code> method which returns a module containing the configured <code>Router</code> service provider ... and some other, unseen providers that the routing library requires. We export this as the <code>routing</code> token.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts\">// app/app.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CrisisListComponent }  from './crisis-list.component';\nimport { HeroListComponent }    from './hero-list.component';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent }\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<div class=\"l-sub-section\">\n<p>We also export an empty <code>appRoutingProviders</code> array so we can simplify registration of router dependencies later in <code>app.module.ts</code>. We don't have any providers to register right now. But we will.</p> </div>\n<h4 id=\"route-config\">Define routes</h4>\n<p>A router must be configured with a list of route definitions.</p> <p>Our first configuration defines an array of two routes with simple paths leading to the <code>CrisisListComponent</code> and <code>HeroListComponent</code> components.</p> <p>Each definition translates to a <a href=\"../api/router/index/route-interface\">Route</a> object which has a <code>path</code>, the URL path segment for this route, and a <code>component</code>, the component associated with this route.</p> <p>The router draws upon its registry of such route definitions when the browser URL changes or when our code tells the router to navigate along a route path.</p> <p>In plain English, we might say of the first route:</p> <ul> <li>\n<p><em>When the browser's location URL changes to match the path segment <code>/crisis-center</code>, create or retrieve an instance of the <code>CrisisListComponent</code> and display its view.</em></p> </li> <li>\n<p><em>When the application requests navigation to the path <code>/crisis-center</code>, create or retrieve an instance of the <code>CrisisListComponent</code>, display its view, and update the browser's address location and history with the URL for that path.</em></p> </li> </ul> <div class=\"l-sub-section\">\n<p>Learn about <em>providers</em> in the <a href=\"#\">Dependency Injection</a> chapter.</p> </div>\n<h4 id=\"register-providers\">Register routing in the root NgModule</h4>\n<p>Our app launches from the <code>app.module.ts</code> file in the <code>/app</code> folder.</p> <p>We import the <code>routing</code> token we exported from the <code>app.routing.ts</code> file and add it to the <code>imports</code> array.</p> <p>We import our <code>CrisisListComponent</code> and <code>HeroListComponent</code> components and add them to our <em>declarations</em> so they will be registered within our root NgModule.</p> <p>We also import the <code>appRoutingProviders</code> array and add it to the <code>providers</code> array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.module.ts\">// app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { CrisisListComponent }  from './crisis-list.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<p>Providing the router module in our root NgModule makes the Router available everywhere in our application.</p> <h3 id=\"shell\">The <i>AppComponent</i> shell</h3>\n<p>The root <code>AppComponent</code> is the application shell. It has a title at the top, a navigation bar with two links, and a <em>Router Outlet</em> at the bottom where the router swaps views on and off the page. Here's what we mean:</p> <img src=\"https://angular.io/resources/images/devguide/router/shell-and-outlet.png\" alt=\"Shell\" width=\"300\"><p id=\"shell-template\">The corresponding component template looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;h1&gt;Component Router&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<h3 id=\"router-outlet\"><i>RouterOutlet</i></h3>\n<p><code>RouterOutlet</code> is a component from the router library. The router displays views within the bounds of the <code>&lt;router-outlet&gt;</code> tags.</p> <div class=\"l-sub-section\">\n<p>A template may hold exactly one <strong><em>unnamed</em></strong> <code>&lt;router-outlet&gt;</code>. The router supports multiple <em>named</em> outlets, a feature we'll cover in future.</p> </div>\n<h3 id=\"router-link\">\n<i>RouterLink</i> binding</h3>\n<p>Above the outlet, within the anchor tags, we see <a href=\"template-syntax#property-binding\">Property Bindings</a> to the <code>RouterLink</code> directive that look like <code>routerLink=\"...\"</code>. We imported <code>RouterLink</code> from the router library.</p> <p>The links in this example each have a string path, the path of a route that we configured earlier. We don't have route parameters yet.</p> <p>We can also add more contextual information to our <code>RouterLink</code> by providing query string parameters or a URL fragment for jumping to different areas on our page. Query string parameters are provided through the <code>[queryParams]</code> binding which takes an object (e.g. <code>{ name: 'value' }</code>), while the URL fragment takes a single value bound to the <code>[fragment]</code> input binding.</p> <div class=\"l-sub-section\">\n<p>Learn about the how we can also use the <strong>link parameters array</strong> in the <a href=\"#link-parameters-array\">appendix below</a>.</p> </div>\n<h3 id=\"router-link-active\">\n<i>RouterLinkActive</i> binding</h3>\n<p>On each anchor tag, we also see <a href=\"template-syntax#property-binding\">Property Bindings</a> to the <code>RouterLinkActive</code> directive that look like <code>routerLinkActive=\"...\"</code>.</p> <p>The template expression to the right of the equals (=) contains our space-delimited string of CSS classes. We can also bind to the <code>RouterLinkActive</code> directive using an array of classes such as <code>[routerLinkActive]=\"['...']\"</code>.</p> <p>The <code>RouterLinkActive</code> directive toggles css classes for active <code>RouterLink</code>s based on the current <code>RouterState</code>. This cascades down through each level in our route tree, so parent and child router links can be active at the same time. To override this behavior, we can bind to the <code>[routerLinkActiveOptions]</code> input binding with the <code>{ exact: true }</code> expression. By using <code>{ exact: true }</code>, a given <code>RouterLink</code> will only be active if its URL is an exact match to the current URL.</p> <h3 id=\"router-directives\"><i>Router Directives</i></h3>\n<p><code>RouterLink</code>, <code>RouterLinkActive</code> and <code>RouterOutlet</code> are directives provided by the Angular <code>RouterModule</code> package. They are readily available for us to use in our template.</p> <p>The current state of <code>app.component.ts</code> looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;Component Router&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n      &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class AppComponent { }\n</pre>\n<h3 id=\"-getting-started-wrap-up\">\"Getting Started\" wrap-up</h3> <p>We've got a very basic, navigating app, one that can switch between two views when the user clicks a link.</p> <p>We've learned how to</p> <ul> <li>load the router library</li> <li>add a nav bar to the shell template with anchor tags, <code>routerLink</code> and <code>routerLinkActive</code> directives</li> <li>add a <code>router-outlet</code> to the shell template where views will be displayed</li> <li>configure the router module with <code>RouterModule.forRoot</code>\n</li> <li>set the router to compose \"HTML 5\" browser URLs.</li> </ul> <p>The rest of the starter app is mundane, with little interest from a router perspective. Here are the details for readers inclined to build the sample through to this milestone.</p> <p>Our starter app's structure looks like this:</p> <div class=\"filetree\">\n<div class=\"file\">router-sample</div>\n<div class=\"children\">\n<div class=\"file\">app<div class=\"children\">\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">app.routing.ts</div>\n<div class=\"file\">crisis-list.component.ts</div>\n<div class=\"file\">hero-list.component.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n<p>Here are the files discussed in this milestone</p> <pre language=\"ts\" name=\"app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;Component Router&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n      &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class AppComponent { }\n</pre>\n<pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { CrisisListComponent }  from './crisis-list.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    CrisisListComponent\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<pre language=\"ts\" name=\"app.routing.ts\" format=\"linenums\" data-language=\"typescript\">// app.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CrisisListComponent }  from './crisis-list.component';\nimport { HeroListComponent }    from './hero-list.component';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent },\n  { path: 'heroes', component: HeroListComponent }\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<pre language=\"ts\" name=\"main.ts\" format=\"linenums\" data-language=\"typescript\">// main.ts\n\nimport { browserDynamicPlatform } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nbrowserDynamicPlatform().bootstrapModule(AppModule);\n</pre>\n<pre language=\"ts\" name=\"hero-list.component.ts\" format=\"linenums\" data-language=\"typescript\">// hero-list.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  template: `\n    &lt;h2&gt;HEROES&lt;/h2&gt;\n    &lt;p&gt;Get your heroes here&lt;/p&gt;`\n})\nexport class HeroListComponent { }\n</pre>\n<pre language=\"ts\" name=\"crisis-list.component.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-list.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  template: `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;p&gt;Get your crisis here&lt;/p&gt;`\n})\nexport class CrisisListComponent { }\n</pre>\n<pre language=\"html\" name=\"index.html\" format=\"linenums\" data-language=\"html\">&lt;!-- index.html --&gt;\n\n&lt;html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- Set the base href --&gt;\n    &lt;base href=\"/\"&gt;\n    &lt;title&gt;Router Sample&lt;/title&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n\n    &lt;!-- Polyfill(s) for older browsers --&gt;\n    &lt;script src=\"node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n\n    &lt;script src=\"systemjs.config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      System.import('app')\n            .catch(function(err){ console.error(err); });\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body&gt;\n    &lt;my-app&gt;loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n\n&lt;/html&gt;\n</pre>\n<h2 id=\"heroes-feature\">Milestone #2: The Heroes Feature</h2>\n<p>We've seen how to navigate using the <code>RouterLink</code> directive.</p> <p>Now we'll learn some new tricks such as how to</p> <ul> <li>organize our app and routes into <em>feature areas</em> using modules</li> <li>navigate imperatively from one component to another</li> <li>pass information in route parameters</li> </ul> <p>To demonstrate, we'll build out the <em>Heroes</em> feature.</p> <h3 id=\"the-heroes-feature-area-\">The Heroes \"feature area\"</h3> <p>A typical application has multiple <em>feature areas</em>, each an island of functionality with its own workflow(s), dedicated to a particular business purpose.</p> <p>We could continue to add files to the <code>app/</code> folder. That's unrealistic and ultimately not maintainable. We think it's better to put each feature area in its own folder.</p> <p>Our first step is to <strong>create a separate <code>app/heroes/</code> folder</strong> and add <em>Hero Management</em> feature files there.</p> <p>We won't be creative about it. Our example is pretty much a copy of the code and capabilities in the \"<a href=\"../tutorial/index\">Tutorial: Tour of Heroes</a>\".</p> <p>Here's how the user will experience this version of the app</p> <img src=\"https://angular.io/resources/images/devguide/router/router-2-anim.gif\" alt=\"App in action\"><h3 id=\"add-heroes-functionality\">Add Heroes functionality</h3> <p>We want to break our app out into different <em>submodules</em> that we then import into our main module so it can make use of them. First, we'll create a <code>heroes.module.ts</code> in our heroes folder.</p> <p>We delete the placeholder <code>hero-list.component.ts</code> that's in the <code>app/</code> folder.</p> <p>We create a new <code>hero-list.component.ts</code> in the <code>app/heroes/</code> folder and copy over the contents of the final <code>heroes.component.ts</code> from the tutorial. We copy the <code>hero-detail.component.ts</code> and the <code>hero.service.ts</code> files into the <code>heroes/</code> folder.</p> <p>We provide the <code>HeroService</code> in the <code>providers</code> array of our <code>Heroes</code> module so its available to all components within our module.</p> <p>Our <code>Heroes</code> module is ready for routing.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/heroes.module.ts\">// app/heroes/heroes.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { CommonModule }   from '@angular/common';\nimport { FormsModule }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService } from './hero.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [\n    HeroService\n  ]\n})\nexport class HeroesModule {}\n</pre>\n<p>When we're done organizing, we have four <em>Hero Management</em> files:</p> <div class=\"filetree\">\n<div class=\"file\">app/heroes</div>\n<div class=\"children\">\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero-list.component.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">heroes.module.ts</div>\n</div>\n</div>\n<p>Now it's time for some surgery to bring these files and the rest of the app into alignment with our application router.</p> <h3 id=\"-hero-feature-routing-requirements\">\n<em>Hero</em> feature routing requirements</h3> <p>The new Heroes feature has two interacting components, the list and the detail. The list view is self-sufficient; we navigate to it, it gets a list of heroes and displays them. It doesn't need any outside information.</p> <p>The detail view is different. It displays a particular hero. It can't know which hero on its own. That information must come from outside.</p> <p>In our example, when the user selects a hero from the list, we navigate to the detail view to show that hero. We'll tell the detail view which hero to display by including the selected hero's id in the route URL.</p> <h3 id=\"-hero-feature-route-configuration\">\n<em>Hero</em> feature route configuration</h3> <p>We recommend giving each feature area its own route configuration file.</p> <p>Create a new <code>heroes.routing.ts</code> in the <code>heroes</code> folder like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/heroes.routing.ts\">// app/heroes/heroes.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst heroesRoutes: Routes = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\nexport const heroesRouting = RouterModule.forChild(heroesRoutes);\n</pre>\n<p>We use the same techniques we learned for <code>app.routing.ts</code>.</p> <p>We import the two components from their new locations in the <code>app/heroes/</code> folder, define the two hero routes. and add export our <code>heroesRouting</code> that returns configured <code>RouterModule</code> for our submodule.</p> <p>Now that we have routes for our <code>Heroes</code> module, we'll need to register them with the <em>Router</em>. We'll import the <em>RouterModule</em> like we did in the root NgModule, but there is a slight difference here. In our root routing setup, we used the static <strong>forRoot</strong> method to register our routes and application level service providers. Since we are in a submodule, we'll use <strong>Router.forChild</strong> method to only register additional routes. We do this because the <em>Router</em> will combine all the provided routes from the submodule together and build our configuration. This allows us to continue defining our feature-specific routes without modifying our main route configuration.</p> <p>We import our <code>heroesRouting</code> token from <code>heroes.routing.ts</code> into our <code>Heroes</code> module and register the routing.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/heroes.module.ts (Heroes routing)\">// app/heroes/heroes.module.ts (Heroes routing)\n\nimport { heroesRouting } from './heroes.routing';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    heroesRouting\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [\n    HeroService\n  ]\n})\n</pre>\n<h3 id=\"route-definition-with-a-parameter\">Route definition with a parameter</h3> <p>The route to <code>HeroDetailComponent</code> has a twist.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ path: 'hero/:id', component: HeroDetailComponent }\n</pre>\n<p>Notice the <code>:id</code> token in the path. That creates a slot in the path for a <strong>Route Parameter</strong>. In this case, we're expecting the router to insert the <code>id</code> of a hero into that slot.</p> <p>If we tell the router to navigate to the detail component and display \"Magneta\", we expect hero <code>id</code> (15) to appear in the browser URL like this:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3000/hero/15</pre>\n<p>If a user enters that URL into the browser address bar, the router should recognize the pattern and go to the same \"Magneta\" detail view.</p> <div class=\"l-sub-section\">\n<h4 id=\"route-parameter-required-or-optional-\">Route parameter: Required or optional?</h4> <p>Embedding the route parameter token, <code>:id</code>, in the route definition path is a good choice for our scenario because the <code>id</code> is <em>required</em> by the <code>HeroDetailComponent</code> and because the value <code>15</code> in the path clearly distinguishes the route to \"Magneta\" from a route for some other hero.</p> <p>An <a href=\"#optional-route-parameter\">optional-route-parameter</a> might be a better choice if we were passing an <em>optional</em> value to <code>HeroDetailComponent</code>.</p> </div>\n<h3 id=\"navigate\">Navigate to hero detail imperatively</h3>\n<p><em>We won't navigate to the detail component by clicking a link</em> so we won't be adding a new <code>RouterLink</code> anchor tag to the shell.</p> <p>Instead, when the user <em>clicks</em> a hero in the list, we'll <em>command</em> the router to navigate to the hero detail view for the selected hero.</p> <p>We'll adjust the <code>HeroListComponent</code> to implement these tasks, beginning with its constructor which acquires the router service and the <code>HeroService</code> by dependency injection:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/hero-list.component.ts (Constructor)\">// app/heroes/hero-list.component.ts (Constructor)\n\nconstructor(\n  private router: Router,\n  private service: HeroService) { }\n</pre>\n<p>We make a few changes to the template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;h2&gt;HEROES&lt;/h2&gt;\n  &lt;ul class=\"items\"&gt;\n    &lt;li *ngFor=\"let hero of heroes\"\n      (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n</pre>\n<p>The template defines an <code>*ngFor</code> repeater such as <a href=\"displaying-data#ngFor\">we've seen before</a>. There's a <code>(click)</code> <a href=\"template-syntax#event-binding\">EventBinding</a> to the component's <code>onSelect</code> method which we implement as follows:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">  onSelect(hero: Hero) {\n    this.router.navigate(['/hero', hero.id]);\n  }\n</pre>\n<p>It calls the router's <strong><code>navigate</code></strong> method with a <strong>Link Parameters Array</strong>. We can use this same syntax with a <code>RouterLink</code> if we want to use it in HTML rather than code.</p> <h3 id=\"route-parameters\">Setting the route parameters in the list view</h3>\n<p>We're navigating to the <code>HeroDetailComponent</code> where we expect to see the details of the selected hero. We'll need <em>two</em> pieces of information: the destination and the hero's <code>id</code>.</p> <p>Accordingly, the <em>link parameters array</em> has <em>two</em> items: the <strong>path</strong> of the destination route and a <strong>route parameter</strong> that specifies the <code>id</code> of the selected hero.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">['/hero', hero.id] // { 15 }\n</pre>\n<p>The router composes the appropriate two-part destination URL from this array:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3000/hero/15</pre>\n<h3 id=\"get-route-parameter\">Getting the route parameter in the details view</h3>\n<p>How does the target <code>HeroDetailComponent</code> learn about that <code>id</code>? Certainly not by analyzing the URL! That's the router's job.</p> <p>The router extracts the route parameter (<code>id:15</code>) from the URL and supplies it to the <code>HeroDetailComponent</code> via the <strong>ActivatedRoute</strong> service.</p> <p id=\"hero-detail-ctor\">As usual, we write a constructor that asks Angular to inject services that the component requires and reference them as private variables.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/heroes/hero-detail.component.ts (Constructor)\">// app/heroes/hero-detail.component.ts (Constructor)\n\nconstructor(\n  private route: ActivatedRoute,\n  private router: Router,\n  private service: HeroService) {}\n</pre>\n<p>Later, in the <code>ngOnInit</code> method, we use the <code>ActivatedRoute</code> service to retrieve the parameters for our route. Since our parameters are provided as an <code>Observable</code>, we <em>subscribe</em> to them for the <code>id</code> parameter by name and tell the <code>HeroService</code> to fetch the hero with that <code>id</code>. We'll keep a reference to this <code>Subscription</code> so we can tidy things up later.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private sub: Subscription;\n\nngOnInit() {\n  this.sub = this.route.params.subscribe(params =&gt; {\n     let id = +params['id']; // (+) converts string 'id' to a number\n     this.service.getHero(id).then(hero =&gt; this.hero = hero);\n   });\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Angular calls the <code>ngOnInit</code> method shortly after creating an instance of the <code>HeroDetailComponent</code>.</p> <p>We put the data access logic in the <code>ngOnInit</code> method rather than inside the constructor to improve the component's testability. We explore this point in greater detail in the <a href=\"#onInit\">OnInit appendix</a> below.</p> </div>\n<p>Eventually, we'll navigate somewhere else. The router will remove this component from the DOM and destroy it. We need to clean up after ourselves before that happens. Specifically, we <strong>must unsubscribe</strong> before Angular destroys the component. <em>Failure to do so could create a memory leak.</em></p> <p>We unsubscribe from our <code>Observable</code> in the <code>ngOnDestroy</code> method.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">ngOnDestroy() {\n  this.sub.unsubscribe();\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Learn about the <code>ngOnInit</code> and <code>ngOnDestroy</code> methods in the <a href=\"lifecycle-hooks\">Lifecycle Hooks</a> chapter.</p> </div>\n<h4 id=\"reuse\">Observable <i>params</i> and component re-use</h4>\n<p>In this example, we subscribe to the route params <code>Observable</code>. That implies that the route params can change during the lifetime of this component.</p> <p>They might. By default, the router reuses a component instance when it re-navigates to the same component type without visiting a different component first. The parameters can change between each re-use.</p> <p>Suppose a parent component navigation bar had \"forward\" and \"back\" buttons that scrolled through the list of heroes. Each click navigated imperatively to the <code>HeroDetailComponent</code> with the next or previous <code>id</code>.</p> <p>We don't want the router to remove the current <code>HeroDetailComponent</code> instance from the DOM only to re-create it for the next <code>id</code>. That could be visibly jarring. Better to simply re-use the same component instance and update the parameter.</p> <p>But <code>ngOnInit</code> is only called once per instantiation. We need a way to detect when the route parameters change from <em>within the same instance</em>. The observable <code>params</code> property handles that beautifully.</p> <h4 id=\"snapshot\">\n<i>Snapshot</i>: the no-observable alternative</h4>\n<p>This application won't reuse the <code>HeroDetailComponent</code>. We always return to the hero list to select another hero to view. There's no way to navigate from hero detail to hero detail without visiting the list component in between. That means we get a new <code>HeroDetailComponent</code> instance every time.</p> <p>Suppose we know for certain that <code>HeroDetailComponent</code> will <em>never, never, ever</em> be re-used. We'll always re-create the component each time we navigate to it.</p> <p>The router offers a <em>Snapshot</em> alternative that gives us the initial value of the route parameters. We don't need to subscribe. We don't have to unsubscribe in <code>ngOnDestroy</code>. It's much simpler to write and read:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">ngOnInit() {\n  // (+) converts string 'id' to a number\n  let id = +this.route.snapshot.params['id'];\n  this.service.getHero(id).then(hero =&gt; this.hero = hero);\n}\n</pre>\n<div class=\"l-sub-section\">\n<p><strong>Remember:</strong> we only get the <em>initial</em> value of the parameters with this technique. Stick with the observable <code>params</code> approach if there's even a chance that we might navigate to this component multiple times in a row. We are leaving the observable <code>params</code> strategy in place just in case.</p> </div>\n<h3 id=\"nav-to-list\">Navigating back to the list component</h3>\n<p>The <code>HeroDetailComponent</code> has a \"Back\" button wired to its <code>gotoHeroes</code> method that navigates imperatively back to the <code>HeroListComponent</code>.</p> <p>The router <code>navigate</code> method takes the same one-item <em>link parameters array</em> that we can bind to a <code>[routerLink]</code> directive. It holds the <strong>path to the <code>HeroListComponent</code></strong>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">gotoHeroes() { this.router.navigate(['/heroes']); }\n</pre>\n<h3 id=\"merge-hero-routes\">Import hero module into root NgModule</h3>\n<p>Our heroes feature is ready, but application doesn't know about our heroes module yet. We'll need to import it into the root NgModule we defined in <code>app.module.ts</code>.</p> <p>Update <code>app.module.ts</code> as follows:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.module.ts (Heroes module import)\">// app.module.ts (Heroes module import)\n\nimport { HeroesModule }         from './heroes/heroes.module';\n\nimport { CrisisListComponent }  from './crisis-list.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HeroesModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [ AppComponent ]\n})\n</pre>\n<p>We imported the <code>HeroesModule</code> and added it to our root NgModule <code>imports</code>.</p> <p>We removed the <code>HeroListComponent</code> from the root NgModule's <code>declarations</code> because its being provided by the <code>HeroesModule</code> now. This is important because their can be only <strong>one</strong> owner for a declared component. In our case, the <code>Heroes</code> module is the owner of the <code>Heroes</code> components and is making them available to the root NgModule.</p> <p>As a result, the <code>app.module.ts</code> no longer has specific knowledge of the hero feature, its components, or its route details. We can evolve the hero feature with more components and different routes. That's a key benefit of creating a separate module for each feature area.</p> <p>Since our <code>Heroes</code> routes are defined within our submodule, we can also remove our initial <code>heroes</code> route from the <code>app.routing.ts</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.routing.ts (v.2)\">// app.routing.ts (v.2)\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-center/crisis-list.component';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent }\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<h3 id=\"heroes-app-wrap-up\">Heroes App Wrap-up</h3> <p>We've reached the second milestone in our router education.</p> <p>We've learned how to</p> <ul> <li>organize our app into <em>feature areas</em>\n</li> <li>navigate imperatively from one component to another</li> <li>pass information along in route parameters and subscribe to them in our component</li> <li>import our feature area NgModule into our root NgModule</li> </ul> <p>After these changes, the folder structure looks like this:</p> <div class=\"filetree\">\n<div class=\"file\">router-sample</div>\n<div class=\"children\">\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">heroes</div>\n<div class=\"children\">\n<div class=\"file\">hero-detail.component.ts</div>\n<div class=\"file\">hero-list.component.ts</div>\n<div class=\"file\">hero.service.ts</div>\n<div class=\"file\">heroes.module.ts</div>\n<div class=\"file\">heroes.routing.ts</div>\n</div>\n<div class=\"file\">app.component.ts</div>\n<div class=\"file\">app.module.ts</div>\n<div class=\"file\">app.routing.ts</div>\n<div class=\"file\">crisis-list.component.ts</div>\n<div class=\"file\">main.ts</div>\n</div>\n<div class=\"file\">node_modules ...</div>\n<div class=\"file\">typings ...</div>\n<div class=\"file\">index.html</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">styles.css</div>\n<div class=\"file\">tsconfig.json</div>\n<div class=\"file\">typings.json</div>\n</div>\n</div>\n <h3 id=\"the-heroes-app-code\">The Heroes App code</h3> <p>Here are the relevant files for this version of the sample application.</p> <pre language=\"ts\" name=\"app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1&gt;Component Router&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"&gt;Crisis Center&lt;/a&gt;\n      &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class AppComponent { }\n</pre>\n<pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroesModule }         from './heroes/heroes.module';\n\nimport { CrisisListComponent }  from './crisis-list.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HeroesModule\n  ],\n  declarations: [\n    AppComponent,\n    CrisisListComponent\n  ],\n  providers: [\n    appRoutingProviders\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<pre language=\"ts\" name=\"app.routing.ts\" format=\"linenums\" data-language=\"typescript\">// app.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CrisisListComponent } from './crisis-center/crisis-list.component';\n\nconst appRoutes: Routes = [\n  { path: 'crisis-center', component: CrisisListComponent }\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<pre language=\"ts\" name=\"hero-list.component.ts\" format=\"linenums\" data-language=\"typescript\">// hero-list.component.ts\n\n// TODO SOMEDAY: Feature Componetized like HeroCenter\nimport { Component, OnInit }   from '@angular/core';\nimport { Router }              from '@angular/router';\n\nimport { Hero, HeroService }   from './hero.service';\n\n@Component({\n  template: `\n    &lt;h2&gt;HEROES&lt;/h2&gt;\n    &lt;ul class=\"items\"&gt;\n      &lt;li *ngFor=\"let hero of heroes\"\n        (click)=\"onSelect(hero)\"&gt;\n        &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  `\n})\nexport class HeroListComponent implements OnInit {\n  heroes: Hero[];\n\n  constructor(\n    private router: Router,\n    private service: HeroService) { }\n\n  ngOnInit() {\n    this.service.getHeroes().then(heroes =&gt; this.heroes = heroes);\n  }\n\n  onSelect(hero: Hero) {\n    this.router.navigate(['/hero', hero.id]);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"hero-detail.component.ts\" format=\"linenums\" data-language=\"typescript\">// hero-detail.component.ts\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Router, ActivatedRoute }       from '@angular/router';\n\nimport { Hero, HeroService } from './hero.service';\nimport { Subscription } from 'rxjs/Subscription';\n\n@Component({\n  template: `\n  &lt;h2&gt;HEROES&lt;/h2&gt;\n  &lt;div *ngIf=\"hero\"&gt;\n    &lt;h3&gt;\"{{hero.name}}\"&lt;/h3&gt;\n    &lt;div&gt;\n      &lt;label&gt;Id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name: &lt;/label&gt;\n      &lt;input [(ngModel)]=\"hero.name\" placeholder=\"name\"/&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"gotoHeroes()\"&gt;Back&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent implements OnInit, OnDestroy  {\n  hero: Hero;\n  private sub: Subscription;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    private service: HeroService) {}\n\n  ngOnInit() {\n    this.sub = this.route.params.subscribe(params =&gt; {\n       let id = +params['id']; // (+) converts string 'id' to a number\n       this.service.getHero(id).then(hero =&gt; this.hero = hero);\n     });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  gotoHeroes() { this.router.navigate(['/heroes']); }\n}\n</pre>\n<pre language=\"ts\" name=\"hero.service.ts\" format=\"linenums\" data-language=\"typescript\">// hero.service.ts\n\nimport { Injectable } from '@angular/core';\n\nexport class Hero {\n  constructor(public id: number, public name: string) { }\n}\n\nlet HEROES = [\n  new Hero(11, 'Mr. Nice'),\n  new Hero(12, 'Narco'),\n  new Hero(13, 'Bombasto'),\n  new Hero(14, 'Celeritas'),\n  new Hero(15, 'Magneta'),\n  new Hero(16, 'RubberMan')\n];\n\nlet heroesPromise = Promise.resolve(HEROES);\n\n@Injectable()\nexport class HeroService {\n  getHeroes() { return heroesPromise; }\n\n  getHero(id: number | string) {\n    return heroesPromise\n      .then(heroes =&gt; heroes.find(hero =&gt; hero.id === +id));\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"heroes.module.ts\" format=\"linenums\" data-language=\"typescript\">// heroes.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { CommonModule }   from '@angular/common';\nimport { FormsModule }    from '@angular/forms';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nimport { HeroService } from './hero.service';\n\nimport { heroesRouting } from './heroes.routing';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    heroesRouting\n  ],\n  declarations: [\n    HeroListComponent,\n    HeroDetailComponent\n  ],\n  providers: [\n    HeroService\n  ]\n})\nexport class HeroesModule {}\n</pre>\n<pre language=\"ts\" name=\"heroes.routing.ts\" format=\"linenums\" data-language=\"typescript\">// heroes.routing.ts\n\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { HeroListComponent }    from './hero-list.component';\nimport { HeroDetailComponent }  from './hero-detail.component';\n\nconst heroesRoutes: Routes = [\n  { path: 'heroes',  component: HeroListComponent },\n  { path: 'hero/:id', component: HeroDetailComponent }\n];\n\nexport const heroesRouting = RouterModule.forChild(heroesRoutes);\n</pre> <h2 id=\"crisis-center-feature\">Milestone #3: The Crisis Center</h2> <p>The <em>Crisis Center</em> is a fake view at the moment. Time to make it useful.</p> <p>The new <em>Crisis Center</em> begins as a virtual copy of the <em>Heroes</em> module. We create a new <code>app/crisis-center</code> folder, copy the Hero files, and change every mention of \"hero\" to \"crisis\".</p> <p>A <code>Crisis</code> has an <code>id</code> and <code>name</code>, just like a <code>Hero</code> The new <code>CrisisListComponent</code> displays lists of crises. When the user selects a crisis, the app navigates to the <code>CrisisDetailComponent</code> for display and editing of the crisis name.</p> <p>Voilà, another feature module!</p> <p>There's no point to this exercise unless we can learn something. We do have new ideas and techniques in mind:</p> <ul> <li>\n<p>We'd like our route URLs to branch in to child route trees that reflect the component trees in our feature areas.</p> </li> <li>\n<p>The application should navigate to the <em>Crisis Center</em> by default.</p> </li> <li>\n<p>The router should prevent navigation away from the detail view while there are pending changes.</p> </li> <li>\n<p>The user should be able to cancel unwanted changes.</p> </li> <li>\n<p>The router should block access to certain features until the user logs-in.</p> </li> <li>\n<p>Our <code>CrisisService</code> is only needed within the <em>Crisis Center</em> module. We should limit access to it to that module.</p> </li> <li>\n<p>Changes to a submodule such as <em>Crisis Center</em> shouldn't provoke changes to the root <code>NgModule</code> or any other feature's component. We need to <a href=\"https://blog.8thlight.com/uncle-bob/2014/05/08/SingleReponsibilityPrinciple.html\"><em>separate our concerns</em></a>.</p> </li> </ul> <p>We'll address all of these issues in the <em>Crisis Center</em> starting with the introduction of <strong>child routes</strong></p> <div class=\"l-sub-section\">\n<p>We'll leave <em>Heroes</em> in its less-than-perfect state to serve as a contrast with what we believe to be a superior <em>Crisis Center</em> design.</p> </div>\n<h3 id=\"a-crisis-center-with-child-routes\">A Crisis Center with child routes</h3> <p>We'll organize the <em>Crisis Center</em> to conform to the following recommended pattern for Angular applications.</p> <ul> <li>each feature area in its own folder within a defined module</li> <li>each area with its own area root component</li> <li>each area root component with its own router-outlet and child routes</li> <li>area routes rarely (if ever) cross</li> </ul> <p>If we had many feature areas, their component trees might look like this:</p> <img src=\"https://angular.io/resources/images/devguide/router/component-tree.png\" alt=\"Component Tree\"><h3 id=\"child-routing-component\">Child Routing Component</h3>\n<p>Add the following <code>crisis-center.component.ts</code> to the <code>crisis-center</code> folder:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-center/crisis-center.component.ts (minus imports)\">// crisis-center/crisis-center.component.ts (minus imports)\n\n@Component({\n  template:  `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class CrisisCenterComponent { }\n</pre>\n<p>The <code>CrisisCenterComponent</code> is much like the <code>AppComponent</code> shell.</p> <ul> <li>\n<p>It is the root of the <em>Crisis Center</em> area just as <code>AppComponent</code> is the root of the entire application.</p> </li> <li>\n<p>It is a shell for the crisis management feature area just as the <code>AppComponent</code> is a shell to manage the high-level workflow.</p> </li> <li>\n<p>It is dead simple — simpler even than the <code>AppComponent</code> template. It has no content, no links, just a <code>&lt;router-outlet&gt;</code> for the <em>Crisis Center</em> child views.</p> </li> </ul> <p>Unlike <code>AppComponent</code> (and most other components), it <strong>lacks a selector</strong>. It doesn't need one. We don't <em>embed</em> this component in a parent template. We <em>navigate</em> to it from the outside, via the router.</p> <div class=\"l-sub-section\">\n<p>We <em>can</em> give it a selector. There's no harm in it. Our point is that we don't <em>need</em> one because we only <em>navigate</em> to it.</p> </div>\n<h3 id=\"service-isolation\">Service isolation</h3> <p>The <code>CrisisService</code> is neither needed nor wanted outside the <em>Crisis Center</em> domain. Instead of registering it with the root NgModule's providers — which makes it visible everywhere — we register the <code>CrisisService</code> in the <code>CrisisCenterModule</code> providers array.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">providers: [\n  CrisisService\n]\n</pre>\n<p>This limits the scope of the <code>CrisisService</code> to the <em>Crisis Center</em> routes. No module outside of the <em>Crisis Center</em> can access it.</p> <p>There's a practical benefit to restricting its scope in this way.</p> <p>First we can evolve the service independently of the rest of the application without fear of breaking what should be unrelated modules.</p> <p>Second, we can delay loading this service into memory until we need it. We can remove it from the application launch bundle, reducing the size of the initial payload and improving performance. We can load it optionally, <a href=\"#asynchronous-routing\">asynchronously</a> with the other <em>Crisis Center</em> components if and when the user begins that workflow.</p> <h3 id=\"child-route-configuration\">Child Route Configuration</h3> <p>The <code>CrisisCenterComponent</code> is a <em>Routing Component</em> like the <code>AppComponent</code>. It has its own <code>RouterOutlet</code> and its own child routes.</p> <p>We create a <code>crisis-center.routing.ts</code> file as we did the <code>heroes.routing.ts</code> file. But this time we define <strong>child routes</strong> <em>within</em> the parent <code>crisis-center</code> route.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/crisis-center/crisis-center.routing.ts (Routes)\">// app/crisis-center/crisis-center.routing.ts (Routes)\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      { path: ':id',  component: CrisisDetailComponent },\n      { path: '',     component: CrisisListComponent }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<p>Notice that the parent <code>crisis-center</code> route has a <code>children</code> property with an array of two routes. These two routes navigate to the two <em>Crisis Center</em> child components, <code>CrisisListComponent</code> and <code>CrisisDetailComponent</code>.</p> <p>There are some <em>important differences</em> in the treatment of these routes.</p> <p>First, the router displays the components of these child routes in the <code>RouterOutlet</code> of the <code>CrisisCenterComponent</code>, not in the <code>RouterOutlet</code> of the <code>AppComponent</code> shell.</p> <p>Second, the child paths <em>extend</em> the path of their parent route.</p> <p>Normally paths that begin with <code>/</code> refer to the root of the application. Here they are appended to the path to the <code>CrisisCenterComponent</code>.</p> <p>To write an URL that navigates to the <code>CrisisListComponent</code>, we'd append its child route path, <code>/</code>, to <code>/crisis-center</code>.</p> <p>To write an URL that navigates to the <code>CrisisDetailComponent</code>, we'd append the child route path, <code>/</code>, followed by the crisis id, yielding something like:</p> <pre format=\"\">localhost:3000/crisis-center/2\n</pre>\n<p>Here's the complete <code>crisis-center.routing.ts</code> with its imports.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/crisis-center/crisis-center.routing.ts\">// app/crisis-center/crisis-center.routing.ts\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-detail.component';\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center.component';\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      { path: ':id',  component: CrisisDetailComponent },\n      { path: '',     component: CrisisListComponent }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<h3 id=\"import-crisis-module\">Import crisis center module into the root NgModule routes</h3>\n<p>As with the <code>Heroes</code> module, we must import the <code>Crisis Center</code> module into the root NgModule:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (Crisis Center Module)\">// app/app.module.ts (Crisis Center Module)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroesModule }           from './heroes/heroes.module';\nimport { CrisisCenterModule }     from './crisis-center/crisis-center.module';\n\nimport { DialogService }  from './dialog.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HeroesModule,\n    CrisisCenterModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    appRoutingProviders,\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<p>We also remove the initial crisis center route from our <code>app.routing.ts</code>. Our routes are now being provided by our <code>HeroesModule</code> and our <code>CrisisCenter</code> submodules. We'll keep our <code>app.routing.ts</code> file for general routes which we'll cover later in the chapter.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.routing.ts (v.3)\">// app/app.routing.ts (v.3)\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nconst appRoutes: Routes = [\n\n];\n\nexport const appRoutingProviders: any[] = [\n\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<h3 id=\"redirect\">Redirecting routes</h3>\n<p>When the application launches, the initial URL in the browser bar is something like:</p> <pre format=\"\">localhost:3000</pre>\n<p>That doesn't match any of our configured routes which means that our application won't display any component when it's launched. The user must click one of the navigation links to trigger a navigation and display something.</p> <p>We prefer that the application display the list of crises as it would if the user clicked the \"Crisis Center\" link or pasted <code>localhost:3000/crisis-center/</code> into the address bar. This is our intended default route.</p> <p>The preferred solution is to add a <code>redirect</code> route that transparently translates from the initial relative URL (<code>''</code>) to the desired default path (<code>/crisis-center</code>):</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/crisis-center/crisis-center.routing.ts (redirect route)\">// app/crisis-center/crisis-center.routing.ts (redirect route)\n\n{\n  path: '',\n  redirectTo: '/crisis-center',\n  pathMatch: 'full'\n},\n</pre>\n<p>A redirect route requires a <code>pathMatch</code> property to tell the router how to match a URL to the path of a route. In this app, the router should select the route to the <code>CrisisListComponent</code> when the <em>entire URL</em> matches <code>''</code>, so we set the <code>pathMatch</code> value to <code>'full'</code>.</p> <div class=\"l-sub-section\">\n<p>Technically, <code>pathMatch = 'full'</code> results in a route hit when the <em>remaining</em>, unmatched segments of the URL match <code>''</code>. In our example, the redirect is at the top level of the route configuration tree so the <em>remaining</em> URL and the <em>entire</em> URL are the same thing.</p> <p>The other possible <code>pathMatch</code> value is <code>'prefix'</code> which tells the router to match the redirect route when the <em>remaining</em> URL <strong><em>begins</em></strong> with the redirect route's <em>prefix</em> path.</p> <p>That's not what we want to do here. If the <code>pathMatch</code> value were <code>'prefix'</code>, <em>every</em> URL would match <code>''</code>. We could never navigate to <code>/crisis-center/1</code> because the redirect route would match first and send us to the <code>CrisisListComponent</code>.</p> <p>We should redirect to the <code>CrisisListComponent</code> <em>only</em> when the <em>entire (remaining)</em> url is <code>''</code>.</p> <p>Learn more in Victor Savkin's blog <a href=\"http://victorsavkin.com/post/146722301646/angular-router-empty-paths-componentless-routes\">post on redirects</a>.</p> <p>We'll discuss redirects in more detail in a future update to this chapter.</p> </div>\n<p>The updated route definitions look like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/crisis-center/crisis-center.routing.ts (Routes v.2)\">// app/crisis-center/crisis-center.routing.ts (Routes v.2)\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: '',\n    redirectTo: '/crisis-center',\n    pathMatch: 'full'\n  },\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      { path: ':id',  component: CrisisDetailComponent },\n      { path: '',     component: CrisisListComponent }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<h2 id=\"guards\">Route Guards</h2>\n<p>At the moment, <em>any</em> user can navigate <em>anywhere</em> in the application <em>anytime</em>.</p> <p>That's not always the right thing to do.</p> <ul> <li>Perhaps the user is not authorized to navigate to the target component.</li> <li>Maybe the user must login (<em>authenticate</em>) first.</li> <li>Maybe we should fetch some data before we display the target component.</li> <li>We might want to save pending changes before leaving a component.</li> <li>We might ask the user if it's OK to discard pending changes rather than save them.</li> </ul> <p>We can add <strong><em>guards</em></strong> to our route configuration to handle these scenarios.</p> <p>A guard's return value controls the router's behavior:</p> <ul> <li>if it returns <code>true</code>, the navigation process continues</li> <li>if it returns <code>false</code>, the navigation process stops and the user stays put</li> </ul> <div class=\"l-sub-section\">\n<p>The guard can also tell the router to navigate elsewhere, effectively canceling the current navigation.</p> </div>\n<p>The guard <em>might</em> return its boolean answer synchronously. But in many cases, the guard can't produce an answer synchronously. The guard could ask the user a question, save changes to the server, or fetch fresh data. These are all asynchronous operations.</p> <p>Accordingly, a routing guard can return an <code>Observable&lt;boolean&gt;</code> or a <code>Promise&lt;boolean&gt;</code> and the router will wait for the observable to resolve to <code>true</code> or <code>false</code>.</p> <p>The router supports three kinds of guards:</p> <ol> <li>\n<p><a href=\"../api/router/index/canactivate-interface\">CanActivate</a> to mediate navigation <em>to</em> a route.</p> </li> <li>\n<p><a href=\"../api/router/index/candeactivate-interface\">CanDeactivate</a> to mediate navigation <em>away</em> from the current route.</p> </li> <li>\n<p><a href=\"../api/router/index/resolve-interface\">Resolve</a> to perform route data retrieval before <em>before</em> route activation.</p> </li> </ol> <div class=\"l-sub-section\">\n<p>We'll examine other router guards in a future update to this chapter.</p> </div>\n<p>We can have multiple guards at every level of a routing hierarchy. The router checks the <code>CanDeactivate</code> guards first, from deepest child route to the top. Then it checks the <code>CanActivate</code> guards from the top down to the deepest child route. If <em>any</em> guard returns false, pending guards that have not completed will be canceled, and the entire navigation is canceled.</p> <p>Let's look at some examples.</p> <h3 id=\"can-activate-guard\">\n<i>CanActivate</i>: requiring authentication</h3>\n<p>Applications often restrict access to a feature area based on who the user is. We could permit access only to authenticated users or to users with a specific role. We might block or limit access until the user's account is activated.</p> <p>The <code>CanActivate</code> guard is the tool to manage these navigation business rules.</p> <h4 id=\"add-a-crisis-admin-feature\">Add a crisis admin feature</h4> <p>We intend to extend the Crisis Center with some new <em>administrative</em> features. Those features aren't defined yet. So we add the following placeholder component.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-admin.component.ts\">// crisis-admin.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  template:  `\n    &lt;h3&gt;CRISIS ADMINISTRATION&lt;/h3&gt;\n    &lt;p&gt;Manage your crises here&lt;/p&gt;\n  `\n})\nexport class CrisisAdminComponent { }\n</pre>\n<p>Next, we add a child route to the <code>crisis-center.routes</code> with the path, <code>/admin</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-center.routing.ts (admin route)\">// crisis-center.routing.ts (admin route)\n\n{\n  path: 'admin',\n  component: CrisisAdminComponent\n},\n</pre>\n<p>And we add a link to the <code>AppComponent</code> shell that users can click to get to this feature.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (template)\">// app/app.component.ts (template)\n\ntemplate: `\n  &lt;h1 class=\"title\"&gt;Component Router&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"\n       [routerLinkActiveOptions]=\"{ exact: true }\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n    &lt;a routerLink=\"/crisis-center/admin\" routerLinkActive=\"active\"&gt;Crisis Admin&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<div class=\"l-sub-section\">\n<p>Since our admin <code>RouterLink</code> is a child route of our <code>Crisis Center</code>, we only want the <code>Crisis Center</code> link to be active when we visit that route. We've added an additional binding to our <code>/crisis-center</code> routerLink, <code>[routerLinkActiveOptions]=\"{ exact: true }\"</code> which will only mark the <code>/crisis-center</code> link as active when we navigate the to <code>/crisis-center</code> URL and not when we navigate to one its child routes.</p> </div>\n<h4 id=\"guard-the-admin-feature\">Guard the admin feature</h4> <p>Currently every route within our <em>Crisis Center</em> is open to everyone. The new <em>admin</em> feature should be accessible only to authenticated users.</p> <p>We could hide the link until the user logs in. But that's tricky and difficult to maintain.</p> <p>Instead we'll write a <code>CanActivate</code> guard to redirect anonymous users to the login page when they try to reach the admin component.</p> <p>This is a general purpose guard — we can imagine other features that require authenticated users — so we create an <code>auth-guard.service.ts</code> in the application root folder.</p> <p>At the moment we're interested in seeing how guards work so our first version does nothing useful. It simply logs to console and <code>returns</code> true immediately, allowing navigation to proceed:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/auth-guard.service.ts\">// app/auth-guard.service.ts\n\nimport { Injectable }     from '@angular/core';\nimport { CanActivate }    from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  canActivate() {\n    console.log('AuthGuard#canActivate called');\n    return true;\n  }\n}\n</pre>\n<p>Next we open <code>crisis-center.routing.ts</code>, import the <code>AuthGuard</code> class, and update the admin route with a <code>CanActivate</code> guard property that references it:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-center.routing.ts (guarded admin route)\">// crisis-center.routing.ts (guarded admin route)\n\n{\n  path: 'admin',\n  component: CrisisAdminComponent,\n  canActivate: [AuthGuard]\n},\n</pre>\n<h4 id=\"teach-authguard-to-authenticate\">Teach <em>AuthGuard</em> to authenticate</h4> <p>Let's make our <code>AuthGuard</code> at least pretend to authenticate.</p> <p>The <code>AuthGuard</code> should call an application service that can login a user and retain information about the current user. Here's a demo <code>AuthService</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/auth.service.ts\">// app/auth.service.ts\n\nimport { Injectable } from '@angular/core';\n\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/do';\nimport 'rxjs/add/operator/delay';\n\n@Injectable()\nexport class AuthService {\n  isLoggedIn: boolean = false;\n\n  // store the URL so we can redirect after logging in\n  redirectUrl: string;\n\n  login() {\n    return Observable.of(true).delay(1000).do(val =&gt; this.isLoggedIn = true);\n  }\n\n  logout() {\n    this.isLoggedIn = false;\n  }\n}\n</pre>\n<p>Although it doesn't actually log in, it has what we need for this discussion. It has an <code>isLoggedIn</code> flag to tell us whether the user is authenticated. Its <code>login</code> method simulates an API call to an external service by returning an observable that resolves successfully after a short pause. The <code>redirectUrl</code> property will store our attempted URL so we can navigate to it after authenticating.</p> <p>Let's revise our <code>AuthGuard</code> to call it.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/auth-guard.service.ts (v.2)\">// app/auth-guard.service.ts (v.2)\n\nimport { Injectable }             from '@angular/core';\nimport { CanActivate, Router,\n         ActivatedRouteSnapshot,\n         RouterStateSnapshot }    from '@angular/router';\nimport { AuthService }            from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = state.url;\n\n    // Navigate to the login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n</pre>\n<p>Notice that we <em>inject</em> the <code>AuthService</code> and the <code>Router</code> in the constructor. We haven't provided the <code>AuthService</code> yet but it's good to know that we can inject helpful services into our routing guards.</p> <p>This guard returns a synchronous boolean result. If the user is logged in, it returns true and the navigation continues.</p> <p>The <code>ActivatedRouteSnapshot</code> contains the <em>future</em> route that will be activated and the <code>RouterStateSnapshot</code> contains the <em>future</em> <code>RouterState</code> of our application, should we pass through our guard check.</p> <p>If the user is not logged in, we store the attempted URL the user came from using the <code>RouterStateSnapshot.url</code> and tell the router to navigate to a login page — a page we haven't created yet. This secondary navigation automatically cancels the current navigation; we return <code>false</code> just to be clear about that.</p> <h4 id=\"add-the-logincomponent-\">Add the <em>LoginComponent</em>\n</h4> <p>We need a <code>LoginComponent</code> for the user to log in to the app. After logging in, we'll redirect to our stored URL if available, or use the default URL. There is nothing new about this component or the way we wire it into the router configuration.</p> <p>We'll register a <code>/login</code> route in our <code>app.routing.ts</code> and add the necessary providers to the <code>appRoutingProviders</code> array we created earlier. In our <code>app.module.ts</code>, we'll import the <code>LoginComponent</code> and add it to our root NgModule <code>declarations</code>.</p> <pre language=\"ts\" name=\"app/app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { LoginComponent } from './login.component';\n\nimport { DialogService }  from './dialog.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HeroesModule\n  ],\n  declarations: [\n    AppComponent,\n    LoginComponent\n  ],\n  providers: [\n    appRoutingProviders,\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.routing.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.routing.ts\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nimport { loginRoutes,\n         authProviders }      from './login.routing';\n\nconst appRoutes: Routes = [\n  ...loginRoutes\n];\n\nexport const appRoutingProviders: any[] = [\n  authProviders\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<pre language=\"ts\" name=\"app/login.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/login.component.ts\n\nimport { Component }   from '@angular/core';\nimport { Router }      from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Component({\n  template: `\n    &lt;h2&gt;LOGIN&lt;/h2&gt;\n    &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"login()\"  *ngIf=\"!authService.isLoggedIn\"&gt;Login&lt;/button&gt;\n      &lt;button (click)=\"logout()\" *ngIf=\"authService.isLoggedIn\"&gt;Logout&lt;/button&gt;\n    &lt;/p&gt;`\n})\nexport class LoginComponent {\n  message: string;\n\n  constructor(public authService: AuthService, public router: Router) {\n    this.setMessage();\n  }\n\n  setMessage() {\n    this.message = 'Logged ' + (this.authService.isLoggedIn ? 'in' : 'out');\n  }\n\n  login() {\n    this.message = 'Trying to log in ...';\n\n    this.authService.login().subscribe(() =&gt; {\n      this.setMessage();\n      if (this.authService.isLoggedIn) {\n        // Get the redirect URL from our auth service\n        // If no redirect has been set, use the default\n        let redirect = this.authService.redirectUrl ? this.authService.redirectUrl : '/crisis-center/admin';\n\n        // Redirect the user\n        this.router.navigate([redirect]);\n      }\n    });\n  }\n\n  logout() {\n    this.authService.logout();\n    this.setMessage();\n  }\n}\n</pre>\n<pre language=\"ts\n  \" name=\"app/login.routing.ts\" format=\"linenums\" data-language=\"typescript\">// app/login.routing.ts\n\nimport { Routes }         from '@angular/router';\nimport { AuthGuard }      from './auth-guard.service';\nimport { AuthService }    from './auth.service';\nimport { LoginComponent } from './login.component';\n\nexport const loginRoutes: Routes = [\n  { path: 'login', component: LoginComponent }\n];\n\nexport const authProviders = [\n  AuthGuard,\n  AuthService\n];\n</pre>\n<h3 id=\"can-deactivate-guard\">\n<i>CanDeactivate</i>: handling unsaved changes</h3>\n<p>Back in the \"Heroes\" workflow, the app accepts every change to a hero immediately without hesitation or validation.</p> <p>In the real world, we might have to accumulate the users changes. We might have to validate across fields. We might have to validate on the server. We might have to hold changes in a pending state until the user confirms them <em>as a group</em> or cancels and reverts all changes.</p> <p>What do we do about unapproved, unsaved changes when the user navigates away? We can't just leave and risk losing the user's changes; that would be a terrible experience.</p> <p>We'd like to pause and let the user decide what to do. If the user cancels, we'll stay put and allow more changes. If the user approves, the app can save.</p> <p>We still might delay navigation until the save succeeds. If we let the user move to the next screen immediately and the save failed (perhaps the data are ruled invalid), we would have lost the context of the error.</p> <p>We can't block while waiting for the server — that's not possible in a browser. We need to stop the navigation while we wait, asynchronously, for the server to return with its answer.</p> <p>We need the <code>CanDeactivate</code> guard.</p> <h3 id=\"cancel-and-save\">Cancel and Save</h3> <p>Our sample application doesn't talk to a server. Fortunately, we have another way to demonstrate an asynchronous router hook.</p> <p>Users update crisis information in the <code>CrisisDetailComponent</code>. Unlike the <code>HeroDetailComponent</code>, the user changes do not update the crisis entity immediately. We update the entity when the user presses the <em>Save</em> button. We discard the changes if the user presses he <em>Cancel</em> button.</p> <p>Both buttons navigate back to the crisis list after save or cancel.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-detail.component.ts (excerpt)\">// crisis-detail.component.ts (excerpt)\n\nexport class CrisisDetailComponent implements OnInit, OnDestroy {\n\n  crisis: Crisis;\n  editName: string;\n  private sub: Subscription;\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n}\n</pre>\n<p>What if the user tries to navigate away without saving or canceling? The user could push the browser back button or click the heroes link. Both actions trigger a navigation. Should the app save or cancel automatically?</p> <p>We'll do neither. Instead we'll ask the user to make that choice explicitly in a confirmation dialog box that <em>waits asynchronously for the user's answer</em>.</p> <div class=\"l-sub-section\">\n<p>We could wait for the user's answer with synchronous, blocking code. Our app will be more responsive ... and can do other work ... by waiting for the user's answer asynchronously. Waiting for the user asynchronously is like waiting for the server asynchronously.</p> </div>\n<p>The <code>DialogService</code> (provided in the root <code>NgModule</code> for app-wide use) does the asking.</p> <p>It returns a <a href=\"http://exploringjs.com/es6/ch_promises.html\">promise</a> that <em>resolves</em> when the user eventually decides what to do: either to discard changes and navigate away (<code>true</code>) or to preserve the pending changes and stay in the crisis editor (<code>false</code>).</p> <p id=\"CanDeactivate\">We create a <code>Guard</code> that will check for the presence of a <code>canDeactivate</code> function in our component, in this case being <code>CrisisDetailComponent</code>. We don't need to know the details of how our <code>CrisisDetailComponent</code> confirms deactivation. This makes our guard reusable, which is an easy win for us.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"can-deactivate-guard.service.ts\">// can-deactivate-guard.service.ts\n\nimport { Injectable }    from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable }    from 'rxjs/Observable';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () =&gt; boolean | Observable&lt;boolean&gt;;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n</pre>\n<p>Alternatively, We could make a component-specific <code>CanDeactivate</code> guard for our <code>CrisisDetailComponent</code>. The <code>canDeactivate</code> method provides us with the current instance of our <code>component</code>, the current <code>ActivatedRoute</code> and <code>RouterStateSnapshot</code> in case we needed to access some external information. This would be useful if we only wanted to use this guard for this component and needed to ask the component's properties in or to confirm whether the router should allow navigation away from it.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"can-deactivate-guard.service.ts (component-specific)\">// can-deactivate-guard.service.ts (component-specific)\n\nimport { Injectable }           from '@angular/core';\nimport { CanDeactivate,\n         ActivatedRouteSnapshot,\n         RouterStateSnapshot }  from '@angular/router';\nimport { Observable }           from 'rxjs/Observable';\n\nimport { CrisisDetailComponent } from './crisis-center/crisis-detail.component';\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate&lt;CrisisDetailComponent&gt; {\n\n  canDeactivate(\n    component: CrisisDetailComponent,\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    // Get the Crisis Center ID\n    console.log(route.params['id']);\n\n    // Get the current URL\n    console.log(state.url);\n\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!component.crisis || component.crisis.name === component.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // promise which resolves to true or false when the user decides\n    return component.dialogService.confirm('Discard changes?');\n  }\n}\n</pre>\n<p>Looking back at our <code>CrisisDetailComponent</code>, we have implemented our confirmation workflow for unsaved changes.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-detail.component.ts (excerpt)\">// crisis-detail.component.ts (excerpt)\n\ncanDeactivate(): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n  // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n  if (!this.crisis || this.crisis.name === this.editName) {\n    return true;\n  }\n  // Otherwise ask the user with the dialog service and return its\n  // promise which resolves to true or false when the user decides\n  return this.dialogService.confirm('Discard changes?');\n}\n</pre>\n<p>Notice that the <code>canDeactivate</code> method <em>can</em> return synchronously; it returns <code>true</code> immediately if there is no crisis or there are no pending changes. But it can also return a <code>Promise</code> or an <code>Observable</code> and the router will wait for that to resolve to truthy (navigate) or falsey (stay put).</p> <p>We add the <code>Guard</code> to our crisis detail route in <code>crisis-center.routing.ts</code> using the <code>canDeactivate</code> array.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-center.routing.ts\">// crisis-center.routing.ts\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nimport { CrisisDetailComponent } from './crisis-detail.component';\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { CrisisCenterComponent } from './crisis-center.component';\nimport { CrisisAdminComponent }  from './crisis-admin.component';\n\nimport { CanDeactivateGuard }    from '../can-deactivate-guard.service';\nimport { AuthGuard }             from '../auth-guard.service';\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: '',\n    redirectTo: '/crisis-center',\n    pathMatch: 'full'\n  },\n  {\n    path: 'crisis-center',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: 'admin',\n        component: CrisisAdminComponent,\n        canActivate: [AuthGuard]\n      },\n      {\n        path: ':id',\n        component: CrisisDetailComponent,\n        canDeactivate: [CanDeactivateGuard]\n      },\n      {\n        path: '',\n        component: CrisisListComponent\n      }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<p>We also need to add the <code>Guard</code> to our main <code>appRoutingProviders</code> so the <code>Router</code> can inject it during the navigation process.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.routing.ts\">// app.routing.ts\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nimport { loginRoutes,\n         authProviders }      from './login.routing';\n\nconst appRoutes: Routes = [\n  ...loginRoutes\n];\n\nexport const appRoutingProviders: any[] = [\n  authProviders\n];\n\nexport const routing = RouterModule.forRoot(appRoutes);\n</pre>\n<p>Now we have given our user a safeguard against unsaved changes.</p> <h3 id=\"Resolve\">\n<i>Resolve</i>: pre-fetching component data</h3>\n<p>In our <code>Hero Detail</code> and <code>Crisis Detail</code>, we waited until the route was activated to fetch our respective hero or crisis.</p> <p>This worked well for us, but we can always do better. If we were using a real world api, there may be some delay in when the data we want to display gets returned. We don't want to display a blank component until the data loads in this situation.</p> <p>We'd like to pre-fetch data from the server so its ready the moment our route is activated. We'd also like to handle the situation where our data fails to load or some other error condition occurs. This would help us in our <code>Crisis Center</code> if we navigated to an <code>id</code> that doesn't return a record. We could send the user back to the <code>Crisis List</code> where we only show valid crisis centers. We want to delay rendering of our route component until all necessary data has been fetched or some action has occurred.</p> <p>We need the <code>Resolve</code> guard.</p> <h3 id=\"preload-route-information\">Preload route information</h3> <p>We'll update our <code>Crisis Detail</code> route to resolve our Crisis before loading the route, or if the user happens to navigate to an invalid crisis center <code>:id</code>, we'll navigate back to our list of existing crises.</p> <p>Like the <code>CanActivate</code> and <code>CanDeactivate</code> guards, the <strong><code>Resolve</code></strong> guard is an interface we can implement as a service to resolve route data synchronously or asynchronously. In our <code>Crisis Detail</code> component, we used the <code>ngOnInit</code> to retrieve the <code>Crisis</code> information. We also navigated the user away from the route if the <code>Crisis</code> was not found. It would be more efficient to perform this action before the route is ever activated.</p> <p>We'll create a <code>CrisisDetailResolve</code> service that will handle retrieving the <code>Crisis</code> and navigating the user away if the <code>Crisis</code> does not exist. Then we can be assured that when we activate the <code>CrisisDetailComponent</code>, the associated Crisis will already be available for display.</p> <p>Let's create our <code>crisis-detail-resolve.service.ts</code> file within our <code>Crisis Center</code> feature area.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-detail-resolve.service.ts\">// crisis-detail-resolve.service.ts\n\nimport { Injectable }             from '@angular/core';\nimport { Router, Resolve,\n         ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable }             from 'rxjs/Observable';\n\nimport { Crisis, CrisisService } from './crisis.service';\n\n@Injectable()\nexport class CrisisDetailResolve implements Resolve&lt;Crisis&gt; {\n  constructor(private cs: CrisisService, private router: Router) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable&lt;any&gt; | Promise&lt;any&gt; | any {\n    let id = +route.params['id'];\n\n    return this.cs.getCrisis(id).then(crisis =&gt; {\n      if (crisis) {\n        return crisis;\n      } else { // id not found\n        this.router.navigate(['/crisis-center']);\n        return false;\n      }\n    });\n  }\n}\n</pre>\n<p>We'll take the relevant parts of the <code>ngOnInit</code> lifecycle hook in our <code>CrisisDetailComponent</code> and moved them into our <code>CrisisDetailResolve</code> guard. We import the <code>Crisis</code> model and <code>CrisisService</code> and also the <code>Router</code> for navigation from our resolve implementation. We want to be explicit about the data we are resolving, so we implement the <code>Resolve</code> interface with a type of <code>Crisis</code>. This lets us know that what we will resolve will match our <code>Crisis</code> model. We inject the <code>CrisisService</code> and <code>Router</code> and implement the <code>resolve</code> method that supports a <code>Promise</code>, <code>Observable</code> or a synchronous return value.</p> <p>We'll use our <code>CrisisService.getCrisis</code> method that returns a promise to prevent our route from loading until the data is fetched. If we don't find a valid <code>Crisis</code>, we navigate the user back to the <code>CrisisList</code>, canceling the previous in-flight navigation to the crisis details.</p> <p>Now that our guard is ready, we'll import it in our <code>crisis-center.routing.ts</code> and use the <code>resolve</code> object in our route configuration.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-center.routing.ts (resolve)\">// crisis-center.routing.ts (resolve)\n\nimport { CrisisDetailResolve }   from './crisis-detail-resolve.service';\n\n      {\n        path: ':id',\n        component: CrisisDetailComponent,\n        canDeactivate: [CanDeactivateGuard],\n        resolve: {\n          crisis: CrisisDetailResolve\n        }\n      },\n</pre>\n<p>We'll add the <code>CrisisDetailResolve</code> service to our crisis center module's <code>providers</code>, so its available to the <code>Router</code> during the navigation process.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-center.module.ts (crisis detail resolve provider)\">// crisis-center.module.ts (crisis detail resolve provider)\n\nimport { CrisisDetailResolve }  from './crisis-detail-resolve.service';\n\n  providers: [\n    CrisisService,\n    CrisisDetailResolve\n  ]\n</pre>\n<p>Now that we've added our <code>Resolve</code> guard to fetch data before the route loads, we no longer need to do this once we get into our <code>CrisisDetailComponent</code>. We'll update the <code>CrisisDetailComponent</code> to use the <code>ActivatedRoute.data</code>, which is where our <code>crisis</code> property from our <code>Resolve</code> guard will be provided. Once activated, all we need to do is set our local <code>crisis</code> and <code>editName</code> properties from our resolved <code>Crisis</code> information. We no longer need to subscribe and unsubscribe to the <code>ActivatedRoute</code> params to fetch the <code>Crisis</code> because it is being provided synchronously at the time the route component is activated.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-detail.component.ts (ngOnInit v.2)\">// crisis-detail.component.ts (ngOnInit v.2)\n\nngOnInit() {\n  this.route.data.forEach((data: { crisis: Crisis }) =&gt; {\n    this.editName = data.crisis.name;\n    this.crisis = data.crisis;\n  });\n}\n</pre>\n<p><strong>Two critical points</strong></p> <ol> <li>\n<p>The router interface is optional. We don't inherit from a base class. We simply implement the interface method or not.</p> </li> <li>\n<p>We rely on the router to call the guard. We don't worry about all the ways that the user could navigate away. That's the router's job. We simply write this class and let the router take it from there.</p> </li> </ol> <p>The relevant <em>Crisis Center</em> code for this milestone is</p> <pre language=\"ts\" name=\"app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app.component.ts\n\nimport { Component }          from '@angular/core';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;h1 class=\"title\"&gt;Component Router&lt;/h1&gt;\n    &lt;nav&gt;\n      &lt;a routerLink=\"/crisis-center\" routerLinkActive=\"active\"\n         [routerLinkActiveOptions]=\"{ exact: true }\"&gt;Crisis Center&lt;/a&gt;\n      &lt;a routerLink=\"/heroes\" routerLinkActive=\"active\"&gt;Heroes&lt;/a&gt;\n      &lt;a routerLink=\"/crisis-center/admin\" routerLinkActive=\"active\"&gt;Crisis Admin&lt;/a&gt;\n      &lt;a routerLink=\"/login\" routerLinkActive=\"active\"&gt;Login&lt;/a&gt;\n    &lt;/nav&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class AppComponent {\n}\n</pre>\n<pre language=\"ts\" name=\"crisis-center.component.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-center.component.ts\n\n// #docplaster\nimport { Component } from '@angular/core';\n\n@Component({\n  template:  `\n    &lt;h2&gt;CRISIS CENTER&lt;/h2&gt;\n    &lt;router-outlet&gt;&lt;/router-outlet&gt;\n  `\n})\nexport class CrisisCenterComponent { }\n</pre>\n<pre language=\"ts\" name=\"crisis-center.routing.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-center.routing.ts\n\nimport { Routes, RouterModule }  from '@angular/router';\n\nimport { CrisisCenterComponent } from './crisis-center.component';\nimport { CrisisDetailComponent } from './crisis-detail.component';\nimport { CrisisListComponent }   from './crisis-list.component';\nimport { CrisisAdminComponent }  from './crisis-admin.component';\n\nimport { CanDeactivateGuard }    from '../can-deactivate-guard.service';\nimport { AuthGuard }             from '../auth-guard.service';\nimport { CrisisDetailResolve }   from './crisis-detail-resolve.service';\n\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: 'admin',\n        component: CrisisAdminComponent,\n        canActivate: [AuthGuard]\n      },\n      {\n        path: ':id',\n        component: CrisisDetailComponent,\n        canDeactivate: [CanDeactivateGuard],\n        resolve: {\n          crisis: CrisisDetailResolve\n        }\n      },\n      {\n        path: '',\n        component: CrisisListComponent\n      }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<pre language=\"ts\" name=\"crisis-list.component.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-list.component.ts\n\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { ActivatedRoute, Router }       from '@angular/router';\n\nimport { Crisis, CrisisService } from './crisis.service';\nimport { Subscription }          from 'rxjs/Subscription';\n\n@Component({\n  template: `\n    &lt;ul class=\"items\"&gt;\n      &lt;li *ngFor=\"let crisis of crises\"\n        (click)=\"onSelect(crisis)\"&gt;\n        &lt;span class=\"badge\"&gt;{{crisis.id}}&lt;/span&gt; {{crisis.name}}\n      &lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n})\nexport class CrisisListComponent implements OnInit, OnDestroy {\n  crises: Crisis[];\n  selectedId: number;\n  private sub: Subscription;\n\n  constructor(\n    private service: CrisisService,\n    private route: ActivatedRoute,\n    private router: Router) {}\n\n  ngOnInit() {\n    this.sub = this.route\n      .params\n      .subscribe(params =&gt; {\n        this.selectedId = +params['id'];\n        this.service.getCrises()\n          .then(crises =&gt; this.crises = crises);\n      });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n\n  onSelect(crisis: Crisis) {\n    // Absolute link\n    this.router.navigate(['/crisis-center', crisis.id]);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"crisis-detail.component.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-detail.component.ts\n\nimport { Component, OnInit }      from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\n\nimport { Crisis }         from './crisis.service';\nimport { DialogService }  from '../dialog.service';\nimport { Observable }     from 'rxjs/Observable';\n\n@Component({\n  template: `\n  &lt;div *ngIf=\"crisis\"&gt;\n    &lt;h3&gt;\"{{editName}}\"&lt;/h3&gt;\n    &lt;div&gt;\n      &lt;label&gt;Id: &lt;/label&gt;{{crisis.id}}&lt;/div&gt;\n    &lt;div&gt;\n      &lt;label&gt;Name: &lt;/label&gt;\n      &lt;input [(ngModel)]=\"editName\" placeholder=\"name\"/&gt;\n    &lt;/div&gt;\n    &lt;p&gt;\n      &lt;button (click)=\"save()\"&gt;Save&lt;/button&gt;\n      &lt;button (click)=\"cancel()\"&gt;Cancel&lt;/button&gt;\n    &lt;/p&gt;\n  &lt;/div&gt;\n  `,\n  styles: ['input {width: 20em}']\n})\n\nexport class CrisisDetailComponent implements OnInit {\n  crisis: Crisis;\n  editName: string;\n\n  constructor(\n    private route: ActivatedRoute,\n    private router: Router,\n    public dialogService: DialogService\n    ) { }\n\n  ngOnInit() {\n    this.route.data.forEach((data: { crisis: Crisis }) =&gt; {\n      this.editName = data.crisis.name;\n      this.crisis = data.crisis;\n    });\n  }\n\n  cancel() {\n    this.gotoCrises();\n  }\n\n  save() {\n    this.crisis.name = this.editName;\n    this.gotoCrises();\n  }\n\n  canDeactivate(): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    // Allow synchronous navigation (`true`) if no crisis or the crisis is unchanged\n    if (!this.crisis || this.crisis.name === this.editName) {\n      return true;\n    }\n    // Otherwise ask the user with the dialog service and return its\n    // promise which resolves to true or false when the user decides\n    return this.dialogService.confirm('Discard changes?');\n  }\n\n  gotoCrises() {\n    let crisisId = this.crisis ? this.crisis.id : null;\n    // Pass along the hero id if available\n    // so that the CrisisListComponent can select that hero.\n    // Add a totally useless `foo` parameter for kicks.\n    // Absolute link\n    this.router.navigate(['/crisis-center', { id: crisisId, foo: 'foo' }]);\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"crisis-detail-resolve.service.ts\" format=\"linenums\" data-language=\"typescript\">// crisis-detail-resolve.service.ts\n\nimport { Injectable }             from '@angular/core';\nimport { Router, Resolve,\n         ActivatedRouteSnapshot } from '@angular/router';\nimport { Observable }             from 'rxjs/Observable';\n\nimport { Crisis, CrisisService } from './crisis.service';\n\n@Injectable()\nexport class CrisisDetailResolve implements Resolve&lt;Crisis&gt; {\n  constructor(private cs: CrisisService, private router: Router) {}\n\n  resolve(route: ActivatedRouteSnapshot): Observable&lt;any&gt; | Promise&lt;any&gt; | any {\n    let id = +route.params['id'];\n\n    return this.cs.getCrisis(id).then(crisis =&gt; {\n      if (crisis) {\n        return crisis;\n      } else { // id not found\n        this.router.navigate(['/crisis-center']);\n        return false;\n      }\n    });\n  }\n}\n</pre>\n<pre language=\"ts\n  \" name=\"crisis.service.ts\" format=\"linenums\" data-language=\"typescript\">// crisis.service.ts\n\nexport class Crisis {\n  constructor(public id: number, public name: string) { }\n}\n\nconst CRISES = [\n  new Crisis(1, 'Dragon Burning Cities'),\n  new Crisis(2, 'Sky Rains Great White Sharks'),\n  new Crisis(3, 'Giant Asteroid Heading For Earth'),\n  new Crisis(4, 'Procrastinators Meeting Delayed Again'),\n];\n\nlet crisesPromise = Promise.resolve(CRISES);\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class CrisisService {\n\n  static nextCrisisId = 100;\n\n  getCrises() { return crisesPromise; }\n\n  getCrisis(id: number | string) {\n    return crisesPromise\n      .then(crises =&gt; crises.find(crisis =&gt; crisis.id === +id));\n  }\n\n}\n</pre>\n<pre language=\"ts\" name=\"auth-guard.service.ts\" format=\"linenums\" data-language=\"typescript\">// auth-guard.service.ts\n\nimport { Injectable }             from '@angular/core';\nimport { CanActivate, Router,\n         ActivatedRouteSnapshot,\n         RouterStateSnapshot }    from '@angular/router';\nimport { AuthService }            from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = state.url;\n\n    // Navigate to the login page\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n</pre>\n<pre language=\"ts\n  \" name=\"can-deactivate-guard.service.ts\" format=\"linenums\" data-language=\"typescript\">// can-deactivate-guard.service.ts\n\nimport { Injectable }    from '@angular/core';\nimport { CanDeactivate } from '@angular/router';\nimport { Observable }    from 'rxjs/Observable';\n\nexport interface CanComponentDeactivate {\n canDeactivate: () =&gt; boolean | Observable&lt;boolean&gt;;\n}\n\n@Injectable()\nexport class CanDeactivateGuard implements CanDeactivate&lt;CanComponentDeactivate&gt; {\n  canDeactivate(component: CanComponentDeactivate): Observable&lt;boolean&gt; | Promise&lt;boolean&gt; | boolean {\n    return component.canDeactivate ? component.canDeactivate() : true;\n  }\n}\n</pre>\n<h2 id=\"optional-route-parameters\">Milestone #4: Route Parameters</h2> <p>We use <a href=\"#route-parameters\"><em>route parameters</em></a> to specify a <em>required</em> parameter value <em>within</em> the route URL as we do when navigating to the <code>HeroDetailComponent</code> in order to view-and-edit the hero with <em>id:15</em>.</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3000/hero/15</pre>\n<p>Sometimes we wish to add <em>optional</em> information to a route request. For example, the <code>HeroListComponent</code> doesn't need help to display a list of heroes. But it might be nice if the previously-viewed hero were pre-selected when returning from the <code>HeroDetailComponent</code>.</p> <img src=\"https://angular.io/resources/images/devguide/router/selected-hero.png\" alt=\"Selected hero\"><p>That becomes possible if we can include hero Magneta's <code>id</code> in the URL when we return from the <code>HeroDetailComponent</code>, a scenario we'll pursue in a moment.</p> <p>Optional information takes other forms. Search criteria are often loosely structured, e.g., <code>name='wind*'</code>. Multiple values are common — <code>after='12/31/2015' &amp; before='1/1/2017'</code> — in no particular order — <code>before='1/1/2017' &amp; after='12/31/2015'</code> — in a variety of formats — <code>during='currentYear'</code> .</p> <p>These kinds of parameters don't fit easily in a URL <em>path</em>. Even if we could define a suitable URL token scheme, doing so greatly complicates the pattern matching required to translate an incoming URL to a named route.</p> <p>Optional parameters are the ideal vehicle for conveying arbitrarily complex information during navigation. Optional parameters aren't involved in pattern matching and affords enormous flexibility of expression.</p> <p>The Component Router supports navigation with optional parameters as well as required route parameters. We define <em>optional</em> parameters in an <em>object</em> after we define our required route parameters.</p> <h3 id=\"route-parameters-required-or-optional-\">Route Parameters: Required or Optional?</h3> <p>There is no hard-and-fast rule. In general,</p> <p><em>prefer a required route parameter when</em></p> <ul> <li>the value is required.</li> <li>the value is necessary to distinguish one route path from another.</li> </ul> <p><em>prefer an optional parameter when</em></p> <ul> <li>the value is complex and/or multi-variate.</li> </ul>  <h3 id=\"route-parameter\">Route parameter</h3> <p>When navigating to the <code>HeroDetailComponent</code> we specified the <code>id</code> of the hero-to-edit in the <em>route parameter</em> and made it the second item of the <a href=\"#link-parameters-array\"><em>link parameters array</em></a>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">['/hero', hero.id] // { 15 }\n</pre>\n<p>The router embedded the <code>id</code> value in the navigation URL because we had defined it as a route parameter with an <code>:id</code> placeholder token in the route <code>path</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">{ path: 'hero/:id', component: HeroDetailComponent }\n</pre>\n<p>When the user clicks the back button, the <code>HeroDetailComponent</code> constructs another <em>link parameters array</em> which it uses to navigate back to the <code>HeroListComponent</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">gotoHeroes() { this.router.navigate(['/heroes']); }\n</pre>\n<p>This array lacks a route parameter because we had no reason to send information to the <code>HeroListComponent</code>.</p> <p>Now we have a reason. We'd like to send the id of the current hero with the navigation request so that the <code>HeroListComponent</code> can highlight that hero in its list.</p> <p>We do that with an object that contains our optional <code>id</code> parameter. We also defined a junk parameter (<code>foo</code>) that the <code>HeroListComponent</code> should ignore. Here's the revised navigation statement:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">gotoHeroes() {\n  let heroId = this.hero ? this.hero.id : null;\n  // Pass along the hero id if available\n  // so that the HeroList component can select that hero.\n  this.router.navigate(['/heroes', { id: heroId, foo: 'foo' }]);\n}\n</pre>\n<p>The application still works. Clicking \"back\" returns to the hero list view.</p> <p>Look at the browser address bar.</p> <div class=\"l-sub-section\">\n<img src=\"https://angular.io/resources/images/devguide/plunker-separate-window-button.png\" alt=\"pop out the window\" align=\"right\" style=\"\"><p>When running in plunker, pop out the preview window by clicking the blue 'X' button in the upper right corner.</p> </div>\n<p>It should look something like this, depending on where you run it:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3000/heroes;id=15;foo=foo</pre>\n<p>The <code>id</code> value appears in the URL as (<code>;id=15;foo=foo</code>), not in the URL path. The path for the \"Heroes\" route doesn't have an <code>:id</code> token.</p> <p>The optional route parameters are not separated by \"?\" and \"&amp;\". They are <strong>separated by semicolons (;)</strong> This is <em>matrix URL</em> notation — something we may not have seen before.</p> <div class=\"l-sub-section\">\n<p><em>Matrix URL</em> notation is an idea first floated in a <a href=\"http://www.w3.org/DesignIssues/MatrixURIs.html\">1996 proposal</a> by the founder of the web, Tim Berners-Lee.</p> <p>Although matrix notation never made it into the HTML standard, it is legal and it became popular among browser routing systems as a way to isolate parameters belonging to parent and child routes. The Angular Component Router is such a system.</p> <p>The syntax may seem strange to us but users are unlikely to notice or care as long as the URL can be emailed and pasted into a browser address bar as this one can.</p> </div>\n<h3 id=\"route-parameters-in-the-activatedroute-service\">Route parameters in the <em>ActivatedRoute</em> service</h3> <p>The list of heroes is unchanged. No hero row is highlighted.</p> <div class=\"l-sub-section\">\n<p>The <live-example></live-example> <em>does</em> highlight the selected row because it demonstrates the final state of the application which includes the steps we're <em>about</em> to cover. At the moment we're describing the state of affairs <em>prior</em> to those steps.</p> </div>\n<p>The <code>HeroListComponent</code> isn't expecting any parameters at all and wouldn't know what to do with them. Let's change that.</p> <p>When navigating from the <code>HeroListComponent</code> to the <code>HeroDetailComponent</code> we subscribed the route params <code>Observable</code> and made it available to the <code>HeroDetailComponent</code> in the <code>ActivatedRoute</code> service. We injected that service in the constructor of the <code>HeroDetailComponent</code>.</p> <p>This time we'll be navigating in the opposite direction, from the <code>HeroDetailComponent</code> to the <code>HeroListComponent</code>.</p> <p>First we extend the router import statement to include the <code>ActivatedRoute</code> service symbol;</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"hero-list.component.ts (import)\">// hero-list.component.ts (import)\n\nimport { Router, ActivatedRoute } from '@angular/router';\n</pre>\n<p>Then we use the <code>ActivatedRoute</code> to access the <code>params</code> <em>Observable</em> so we can subscribe and extract the <code>id</code> parameter as the <code>selectedId</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"hero-list.component.ts (constructor)\">// hero-list.component.ts (constructor)\n\n  private selectedId: number;\n  private sub: Subscription;\n\n  constructor(\n    private service: HeroService,\n    private route: ActivatedRoute,\n    private router: Router) {}\n\n  ngOnInit() {\n    this.sub = this.route\n      .params\n      .subscribe(params =&gt; {\n        this.selectedId = +params['id'];\n        this.service.getHeroes()\n          .then(heroes =&gt; this.heroes = heroes);\n      });\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n  }\n</pre>\n<div class=\"l-sub-section\">\n<p>All route/query parameters are strings. The (+) in front of the <code>params['id']</code> expression is a JavaScript trick to convert the string to an integer.</p> </div>\n<p>We add an <code>isSelected</code> method that returns true when a hero's id matches the selected id.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"hero-list.component.ts (constructor)\">// hero-list.component.ts (constructor)\n\nisSelected(hero: Hero) { return hero.id === this.selectedId; }\n</pre>\n<p>Finally, we update our template with a <a href=\"template-syntax#class-binding\">Class Binding</a> to that <code>isSelected</code> method. The binding adds the <code>selected</code> CSS class when the method returns <code>true</code> and removes it when <code>false</code>. Look for it within the repeated <code>&lt;li&gt;</code> tag as shown here:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"hero-list.component.ts (template)\">// hero-list.component.ts (template)\n\ntemplate: `\n  &lt;h2&gt;HEROES&lt;/h2&gt;\n  &lt;ul class=\"items\"&gt;\n    &lt;li *ngFor=\"let hero of heroes\"\n      [class.selected]=\"isSelected(hero)\"\n      (click)=\"onSelect(hero)\"&gt;\n      &lt;span class=\"badge\"&gt;{{hero.id}}&lt;/span&gt; {{hero.name}}\n    &lt;/li&gt;\n  &lt;/ul&gt;\n`\n</pre>\n<p>When the user navigates from the heroes list to the \"Magneta\" hero and back, \"Magneta\" appears selected:</p> <img src=\"https://angular.io/resources/images/devguide/router/selected-hero.png\" alt=\"Selected List\"><p>The optional <code>foo</code> route parameter is harmless and continues to be ignored.</p>  <h3 id=\"query-parameters\">Query Parameters and Fragments</h3> <p>In our <a href=\"#optional-route-parameters\">route parameters</a> example, we only dealt with parameters specific to our route, but what if we wanted optional parameters available to all routes? This is where our query parameters come into play and serve a special purpose in our application.</p> <p><a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\">Fragments</a> refer to certain elements on the page identified with an <code>id</code> attribute.</p> <p>We'll update our <code>AuthGuard</code> to provide a <code>session_id</code> query that will remain after navigating to another route.</p> <p>We'll also provide an arbitrary <code>anchor</code> fragment, which we would use to jump to a certain point on our page.</p> <p>We'll add the <code>NavigationExtras</code> object to our <code>router.navigate</code> method that navigates us to our <code>/login</code> route.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"auth-guard.service.ts (v.3)\">// auth-guard.service.ts (v.3)\n\nimport { Injectable }             from '@angular/core';\nimport { CanActivate, Router,\n         ActivatedRouteSnapshot,\n         RouterStateSnapshot,\n         NavigationExtras }       from '@angular/router';\nimport { AuthService }            from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  constructor(private authService: AuthService, private router: Router) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    if (this.authService.isLoggedIn) { return true; }\n\n    // Store the attempted URL for redirecting\n    this.authService.redirectUrl = state.url;\n\n    // Create a dummy session id\n    let sessionId = 123456789;\n\n    // Set our navigation extras object\n    // that contains our global query params and fragment\n    let navigationExtras: NavigationExtras = {\n      queryParams: { 'session_id': sessionId },\n      fragment: 'anchor'\n    };\n\n    // Navigate to the login page with extras\n    this.router.navigate(['/login'], navigationExtras);\n    return false;\n  }\n}\n</pre>\n<p>We can also <strong>preserve</strong> query parameters and fragments across navigations without having to re-provide them when navigating. In our <code>LoginComponent</code>, we'll add an <em>object</em> as the second argument in our <code>router.navigate</code> function and provide the <code>preserveQueryParams</code> and <code>preserveFragment</code> to pass along the current query parameters and fragment to the next route.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"login.component.ts (preserved)\">// login.component.ts (preserved)\n\n// Set our navigation extras object\n// that passes on our global query params and fragment\nlet navigationExtras: NavigationExtras = {\n  preserveQueryParams: true,\n  preserveFragment: true\n};\n\n// Redirect the user\nthis.router.navigate([redirect], navigationExtras);\n</pre>\n<p>Since we'll be navigating to our <em>Crisis Admin</em> route after logging in, we'll update it to handle our query parameters and fragment.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"crisis-admin.component.ts (v.2)\">// crisis-admin.component.ts (v.2)\n\nimport { Component, OnInit }  from '@angular/core';\nimport { ActivatedRoute }     from '@angular/router';\nimport { Observable }         from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n@Component({\n  template:  `\n    &lt;h3&gt;CRISIS ADMINISTRATION&lt;/h3&gt;\n    &lt;p&gt;Manage your crises here&lt;/p&gt;\n\n    &lt;p&gt;Session ID: {{ sessionId | async }}&lt;/p&gt;\n    &lt;a id=\"anchor\"&gt;&lt;/a&gt;\n    &lt;p&gt;Token: {{ token | async }}&lt;/p&gt;\n  `\n})\nexport class CrisisAdminComponent implements OnInit {\n  sessionId: Observable&lt;string&gt;;\n  token: Observable&lt;string&gt;;\n\n  constructor(private route: ActivatedRoute) {}\n\n  ngOnInit() {\n    // Capture the session ID if available\n    this.sessionId = this.route\n      .queryParams\n      .map(params =&gt; params['session_id'] || 'None');\n\n    // Capture the fragment if available\n    this.token = this.route\n      .fragment\n      .map(fragment =&gt; fragment || 'None');\n  }\n}\n</pre>\n<p><em>Query Parameters</em> and <em>Fragments</em> are also available through the <code>ActivatedRoute</code> service available to route components. Just like our <em>route parameters</em>, query parameters and fragments are provided as an <code>Observable</code>. For our updated <em>Crisis Admin</em> component we'll feed the <code>Observable</code> directly into our template using the <code>AsyncPipe</code>, which will handle <em>unsubscribing</em> from the <code>Observable</code> for us when the component is destroyed.</p> <div class=\"l-sub-section\">\n<img src=\"https://angular.io/resources/images/devguide/plunker-separate-window-button.png\" alt=\"pop out the window\" align=\"right\" style=\"\"><p>When running in plunker, pop out the preview window by clicking the blue 'X' button in the upper right corner.</p> </div>\n<p>Following the steps in this process, we can click on the <em>Crisis Admin</em> button, that takes us to the <em>Login</em> page with our provided <code>query params</code> and <code>fragment</code>. After we click the login button, we notice that we have been redirected to the <code>Crisis Admin</code> page with our <code>query params</code> and <code>fragment</code> still intact. We can use these persistent bits of information for things that need to be provided with across pages interaction like authentication tokens or session ids.</p> <h2 id=\"asynchronous-routing\">Milestone #5: Asynchronous Routing</h2> <p>As we have completed our milestones, our application has naturally gotten larger. As we continue to build out feature areas our overall application size will get larger also. At some point we'll reach a tipping point in where our application takes a significant enough time to load. This is not a viable long term solution.</p> <p>So how do we combat this problem? We introduce asynchronous routing into our application and take advantage of loading feature areas <em>lazily</em>. This buys us multiple things:</p> <p>We can continue building out feature areas without increasing our initial bundle. We can load feature areas only when requested by the user. We can speed up load time for users that only visit certain areas of our application.</p> <p>These are all things we want to have in our application, so let's apply this to our current setup. We've already made great strides by organizing our application into three modules: <code>AppModule</code>, <code>HeroesModule</code> and <code>CrisisCenterModule</code>. Our <code>CrisisCenterModule</code> is the most feature-rich area of our application and also the largest, so we'll take advantage of asynchronous routing and only load the <code>Crisis Center</code> feature area when requested.</p> <h3 id=\"lazy-loading-route-configuration\">Lazy-Loading route configuration</h3> <p>We'll start by pulling our <code>redirect</code> and <code>crisis-center</code> routes out of our <code>CrisisCenterModule</code> and including them in our <code>app.routing.ts</code> file. We want to load our <code>Crisis Center</code> asynchronously, so we'll use the <code>loadChildren</code> property in our route config where previously we used the <code>children</code> property to include our child routes.</p> <p>We'll also change our <code>crisis-center</code> <strong>path</strong> in our <code>crisis-center.routing.ts</code> to an empty path. The <code>Router</code> supports <em>empty path</em> routes, which we can use for grouping routes together without adding anything additional paths to the URL. Our users will still visit <code>/crisis-center</code> and our <code>CrisisCenterComponent</code> still serves as our <em>Routing Component</em> which contains our child routes.</p> <pre language=\"ts\" name=\"app.routing.ts (load children)\" format=\"linenums\" data-language=\"typescript\">// app.routing.ts (load children)\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: '',\n    redirectTo: '/crisis-center',\n    pathMatch: 'full'\n  },\n  {\n    path: 'crisis-center',\n    loadChildren: 'app/crisis-center/crisis-center.module#CrisisCenterModule'\n  }\n];\n\nconst appRoutes: Routes = [\n  ...loginRoutes,\n  ...crisisCenterRoutes\n];\n</pre>\n<pre language=\"ts\" name=\"crisis-center.routing.ts (empty path crisis center)\" format=\"linenums\" data-language=\"typescript\">// crisis-center.routing.ts (empty path crisis center)\n\nconst crisisCenterRoutes: Routes = [\n  {\n    path: '',\n    component: CrisisCenterComponent,\n    children: [\n      {\n        path: 'admin',\n        component: CrisisAdminComponent,\n        canActivate: [AuthGuard]\n      },\n      {\n        path: ':id',\n        component: CrisisDetailComponent,\n        canDeactivate: [CanDeactivateGuard],\n        resolve: {\n          crisis: CrisisDetailResolve\n        }\n      },\n      {\n        path: '',\n        component: CrisisListComponent\n      }\n    ]\n  }\n];\n\nexport const crisisCenterRouting = RouterModule.forChild(crisisCenterRoutes);\n</pre>\n<p>The <code>loadChildren</code> property is used by the <code>Router</code> to map to our bundle we want to lazy-load, in this case being the <code>CrisisCenterModule</code>.</p> <p>If we look closer at the <code>loadChildren</code> string, we can see that it maps directly to our <code>crisis-center.module</code> file where we previously built out our <code>Crisis Center</code> feature area. After the path to the file we use a <code>#</code> to denote where our file path ends and to tell the <code>Router</code> the name of our <code>CrisisCenter</code> NgModule. If we look in our <code>crisis-center.module</code> file, we can see it matches name of our exported NgModule class.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"crisis-center.module.ts (export)\">// crisis-center.module.ts (export)\n\nexport class CrisisCenterModule {}\n</pre>\n<p>The <code>loadChildren</code> property is used by the <code>Router</code> to map to our bundle we want to lazy-load, in this case being the <code>CrisisCenterModule</code>. The router will take our loadChildren string and dynamically load in our <code>CrisisCenterModule</code>, add its routes to our configuration <em>dynamically</em> and then load the requested route. This will only happen when route is <strong>first</strong> requested and the module will be immediately be available for subsequent requests.</p> <div class=\"l-sub-section\">\n<p>Angular provides a built-in module loader that supports <strong><code>SystemJS</code></strong> to load modules asynchronously. If we were using another bundling tool, such as <strong>Webpack</strong>, we would use the Webpack mechanism for asynchronously loading modules.</p> </div>\n<p>We've built our feature area, we've updated our route configuration to take advantage of lazy-loading, now we have to do the final step to break our <code>CrisisCenterModule</code> into a completely separate module. In our <code>app.module.ts</code>, we'll remove our <code>CrisisCenterModule</code> from the <code>imports</code> array since we'll be loading it on-demand an we'll remove the imported <code>CrisisCenterModule</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (final)\">// app.module.ts (final)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\n\nimport { AppComponent }       from './app.component';\nimport { routing,\n         appRoutingProviders } from './app.routing';\n\nimport { HeroesModule } from './heroes/heroes.module';\n\nimport { LoginComponent } from './login.component';\n\nimport { DialogService }  from './dialog.service';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    routing,\n    HeroesModule\n  ],\n  declarations: [\n    AppComponent,\n    LoginComponent\n  ],\n  providers: [\n    appRoutingProviders,\n    DialogService\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre>\n<p>If our initial redirect went to <code>/heroes</code> instead of going to <code>/crisis-center</code>, the <code>CrisisCenterModule</code> would not be loaded until the user visited a <code>Crisis Center</code> route. We'll update our redirect in our <code>app.routing.ts</code> to make this change.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.routing.ts (heroes redirect)\">// app.routing.ts (heroes redirect)\n\n{\n  path: '',\n  redirectTo: '/heroes',\n  pathMatch: 'full'\n},\n</pre>\n<h2 id=\"final-app\">Wrap Up</h2> <p>We've covered a lot of ground in this chapter and the application is too big to reprint here. Please visit the <live-example></live-example> and where you can download the final source code.</p> <h2 id=\"appendices\">Appendices</h2> <p>The balance of this chapter is a set of appendices that elaborate some of the points we covered quickly above.</p> <p>The appendix material isn't essential. Continued reading is for the curious.</p> <h2 id=\"link-parameters-array\">Appendix: Link Parameters Array</h2> <p>We've mentioned the <em>Link Parameters Array</em> several times. We've used it several times.</p> <p>A link parameters array holds the ingredients for router navigation:</p> <ul> <li>the <em>path</em> of the route to the destination component</li> <li>required and optional route parameters that go into the route URL</li> </ul> <p>We can bind the <code>RouterLink</code> directive to such an array like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">&lt;a [routerLink]=\"['/heroes']\"&gt;Heroes&lt;/a&gt;\n</pre>\n<p>We've written a two element array when specifying a route parameter like this</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">this.router.navigate(['/hero', hero.id]);\n</pre>\n<p>We can provide optional route parameters in an object like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">&lt;a [routerLink]=\"['/crisis-center', { foo: 'foo' }]\"&gt;Crisis Center&lt;/a&gt;\n</pre>\n<p>These three examples cover our needs for an app with one level routing. The moment we add a child router, such as the <em>Crisis Center</em>, we create new link array possibilities.</p> <p>Recall that we specified a default child route for <em>Crisis Center</em> so this simple <code>RouterLink</code> is fine.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">&lt;a [routerLink]=\"['/crisis-center']\"&gt;Crisis Center&lt;/a&gt;\n</pre>\n<p>Let's parse it out.</p> <ul> <li>The first item in the array identifies the parent route ('/crisis-center').</li> <li>There are no parameters for this parent route so we're done with it.</li> <li>There is no default for the child route so we need to pick one.</li> <li>We decide to go to the <code>CrisisListComponent</code> whose route path is '/' but we don't need to explicitly add it</li> <li>Voila! <code>['/crisis-center']</code>.</li> </ul> <p>Let's take it a step further. This time we'll build a link parameters array that navigates from the root of the application down to the \"Dragon Crisis\".</p> <ul> <li>The first item in the array identifies the parent route ('/crisis-center').</li> <li>There are no parameters for this parent route so we're done with it.</li> <li>The second item identifies the child route for details about a particular crisis ('/:id').</li> <li>The details child route requires an <code>id</code> route parameter</li> <li>We add <code>id</code> of the <em>Dragon Crisis</em> as the second item in the array (<code>1</code>)</li> </ul> <p>It looks like this!</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">&lt;a [routerLink]=\"['/crisis-center', 1]\"&gt;Dragon Crisis&lt;/a&gt;\n</pre>\n<p>If we wanted to, we could redefine our <code>AppComponent</code> template with <em>Crisis Center</em> routes exclusively:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">template: `\n  &lt;h1 class=\"title\"&gt;Component Router&lt;/h1&gt;\n  &lt;nav&gt;\n    &lt;a [routerLink]=\"['/crisis-center']\"&gt;Crisis Center&lt;/a&gt;\n    &lt;a [routerLink]=\"['/crisis-center/1', { foo: 'foo' }]\"&gt;Dragon Crisis&lt;/a&gt;\n    &lt;a [routerLink]=\"['/crisis-center/2']\"&gt;Shark Crisis&lt;/a&gt;\n  &lt;/nav&gt;\n  &lt;router-outlet&gt;&lt;/router-outlet&gt;\n`\n</pre>\n<p>In sum, we can write applications with one, two or more levels of routing. The link parameters array affords the flexibility to represent any routing depth and any legal sequence of route paths, (required) router parameters and (optional) route parameter objects.</p> <h2 id=\"onInit\">Appendix: Why use an <em>ngOnInit</em> method</h2> <p>We implemented an <code>ngOnInit</code> method in many of our Component classes. We did so, for example, in the <a href=\"#hero-detail-ctor\">HeroDetailComponent</a>. We might have put the <code>ngOnInit</code> logic inside the constructor instead. We didn't for a reason. The reason is <em>testability</em>.</p> <p>A constructor that has major side-effects can be difficult to test because it starts doing things as soon as we create a test instance. In this case, it might have made a request to a remote server, something it shouldn't do under test. It may even be impossible to reach the server in the test environment.</p> <p>The better practice is to limit what the constructor can do. Mostly it should stash parameters in local variables and perform simple instance configuration.</p> <p>Yet we want an instance of this class to get the hero data from the <code>HeroService</code> soon after it is created. How do we ensure that happens if not in the constructor?</p> <p>Angular detects when a component has certain lifecycle methods like <a href=\"../api/core/index/oninit-class\">ngOnInit</a> and <a href=\"../api/core/index/ondestroy-class\">ngOnDestroy</a> and calls them at the appropriate moment.</p> <p>Angular will call <code>ngOnInit</code> when we navigate to the <code>HeroDetailComponent</code>, we'll get the <code>id</code> from the <code>ActivatedRoute</code> params and ask the server for the hero with that <code>id</code>.</p> <p>We too can call that <code>ngOnInit</code> method in our tests if we wish ... after taking control of the injected <code>HeroService</code> and (perhaps) mocking it.</p>  <h2 id=\"location-strategy\">Appendix: <em>LocationStrategy</em> and browser URL styles</h2> <p>When the router navigates to a new component view, it updates the browser's location and history with a URL for that view. This is a strictly local URL. The browser shouldn't send this URL to the server and should not reload the page.</p> <p>Modern HTML 5 browsers support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\">history.pushState</a>, a technique that changes a browser's location and history without triggering a server page request. The router can compose a \"natural\" URL that is indistinguishable from one that would otherwise require a page load.</p> <p>Here's the <em>Crisis Center</em> URL in this \"HTML 5 pushState\" style:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3002/crisis-center/</pre>\n<p>Older browsers send page requests to the server when the location URL changes ... unless the change occurs after a \"#\" (called the \"hash\"). Routers can take advantage of this exception by composing in-application route URLs with hashes. Here's a \"hash URL\" that routes to the <em>Crisis Center</em></p> <pre format=\".\" language=\"bash\" data-language=\"bash\">localhost:3002/src/#/crisis-center/</pre>\n<p>The Angular Component Router supports both styles with two <code>LocationStrategy</code> providers:</p> <ol> <li>\n<code>PathLocationStrategy</code> - the default \"HTML 5 pushState\" style.</li> <li>\n<code>HashLocationStrategy</code> - the \"hash URL\" style.</li> </ol> <p>The <code>RouterModule.forRoot</code> function sets the <code>LocationStrategy</code> to the <code>PathLocationStrategy</code>, making it the default strategy. We can switch to the <code>HashLocationStrategy</code> with an override during the bootstrapping process if we prefer it.</p> <div class=\"l-sub-section\">\n<p>Learn about \"providers\" and the bootstrap process in the <a href=\"dependency-injection#bootstrap\">Dependency Injection chapter</a></p> </div>\n<h3 id=\"which-strategy-is-best-\">Which Strategy is Best?</h3> <p>We must choose a strategy and we need to make the right call early in the project. It won't be easy to change later once the application is in production and there are lots of application URL references in the wild.</p> <p>Almost all Angular 2 projects should use the default HTML 5 style. It produces URLs that are easier for users to understand. And it preserves the option to do <strong>server-side rendering</strong> later.</p> <p>Rendering critical pages on the server is a technique that can greatly improve perceived responsiveness when the app first loads. An app that would otherwise take ten or more seconds to start could be rendered on the server and delivered to the user's device in less than a second.</p> <p>This option is only available if application URLs look like normal web URLs without hashes (#) in the middle.</p> <p>Stick with the default unless you have a compelling reason to resort to hash routes.</p> <h3 id=\"html-5-urls-and-the-lt-base-href-\">HTML 5 URLs and the <em>&lt;base href&gt;</em>\n</h3> <p>While the router uses the \"<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API#Adding_and_modifying_history_entries\">HTML 5 pushState</a>\" style by default, we <em>must</em> configure that strategy with a <strong>base href</strong></p> <p>The preferred way to configure the strategy is to add a <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base\">&lt;base href&gt; element</a> tag in the <code>&lt;head&gt;</code> of the <code>index.html</code>.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;base href=\"/\"&gt;\n</pre>\n<p>Without that tag, the browser may not be able to load resources (images, css, scripts) when \"deep linking\" into the app. Bad things could happen when someone pastes an application link into the browser's address bar or clicks such a link in an email link.</p> <p>Some developers may not be able to add the <code>&lt;base&gt;</code> element, perhaps because they don't have access to <code>&lt;head&gt;</code> or the <code>index.html</code>.</p> <p>Those developers may still use HTML 5 URLs by taking two remedial steps:</p> <ol> <li>Provide the router with an appropriate <code>APP_BASE_HREF</code> value.</li> <li>Use <strong>absolute URLs</strong> for all web resources: css, images, scripts, and template html files.</li> </ol> <div class=\"l-sub-section\">\n<p>Learn about the <a href=\"../api/common/index/app_base_href-let\">APP_BASE_HREF</a> in the API Guide.</p> </div>\n<h3 id=\"-hashlocationstrategy-\"><em>HashLocationStrategy</em></h3> <p>We can go old-school with the <code>HashLocationStrategy</code> by providing the <code>useHash: true</code> in an object as the second argument of the <code>RouterModule.forRoot</code> in our root NgModule.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts (hash URL strategy)\">// app.module.ts (hash URL strategy)\n\nimport { NgModule }       from '@angular/core';\nimport { BrowserModule }  from '@angular/platform-browser';\nimport { FormsModule }    from '@angular/forms';\nimport { Routes, RouterModule }   from '@angular/router';\n\nimport { AppComponent }   from './app.component';\n\nconst routes: Routes = [\n\n];\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RouterModule.forRoot(routes, { useHash: true })  // .../#/crisis-center/\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n}\n</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/router.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/router.html</a>\n  </p>\n</div>\n","glossary":"<h1 class=\"hero-title text-display-1 \">Glossary</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Brief definitions of the most important words in the Angular 2 vocabulary</p></div>\n<h1 id=\"angular-2-glossary\">Angular 2 Glossary</h1> <p>Angular 2 has a vocabulary of its own. Most Angular 2 terms are everyday English words with a specific meaning within the Angular system.</p> <p>We have gathered here the most prominent terms and a few less familiar ones that have unusual or unexpected definitions.</p> <p><a href=\"#A\">A</a> <a href=\"#B\">B</a> <a href=\"#C\">C</a> <a href=\"#D\">D</a> <a href=\"#E\">E</a> <a href=\"#F\">F</a> <a href=\"#G\">G</a> <a href=\"#H\">H</a> <a href=\"#I\">I</a> <a href=\"#J\">J</a> <a href=\"#K\">K</a> <a href=\"#L\">L</a> <a href=\"#M\">M</a> <a href=\"#N\">N</a> <a href=\"#O\">O</a> <a href=\"#P\">P</a> <a href=\"#Q\">Q</a> <a href=\"#R\">R</a> <a href=\"#S\">S</a> <a href=\"#T\">T</a> <a href=\"#U\">U</a> <a href=\"#V\">V</a> <a href=\"#W\">W</a> <a href=\"#X\">X</a> <a href=\"#Y\">Y</a> <a href=\"#Z\">Z</a></p> <h2 id=\"A\">Ahead of Time (AOT) Compilation</h2> <p>Angular applications can be compiled by developers at build-time. By compiling your application using the compiler-cli, <code>ngc</code>, you can boostrap directly to a Module Factory, meaning you don't need to include the Angular compiler in your javascript bundle. Ahead of Time compiled applications also benefit from decreased load time and increased performance.</p> <h2 id=\"angular-module\">Angular Module</h2> <p>Helps us organize an application into cohesive blocks of functionality. An Angular module identifies the components, directives, and pipes that are used by the application along with the list of external Angular modules that the application needs, such as <code>FormsModule</code>.</p> <p>Every Angular application has an application root module class. By convention the class is called <code>AppModule</code> and resides in a file named <code>app.component.ts</code>.</p> <p>See the <a href=\"guide/ngmodule\">Angular Module</a> chapter for details and examples.</p> <h2 id=\"annotation\">Annotation</h2> <p>In practice a synonym for <a href=\"#decorator\">Decoration</a>.</p> <h2 id=\"attribute-directive\">Attribute Directive</h2> <p>A category of <a href=\"#directive\">Directive</a> that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.</p> <p>The <code>ngClass</code> directive for adding and removing CSS class names is a good example of an Attribute Directive.</p> <h2 id=\"B\">Barrel</h2> <p>A barrel is a way to <em>rollup exports</em> from several ES2015 modules into a single convenience ES2015 module. The barrel itself is an ES2015 module file that re-exports <em>selected</em> exports of other ES2015 modules.</p> <p>Imagine three ES2015 modules in a <code>heroes</code> folder:</p> <pre>// heroes/hero.component.ts\nexport class HeroComponent {}\n\n// heroes/hero.model.ts\nexport class Hero {}\n\n// heroes/hero.service.ts\nexport class HeroService {}</pre>\n<p>Without a barrel, a consumer would need three import statements:</p> <pre>import { HeroComponent } from '../heroes/hero.component.ts';\nimport { Hero }          from '../heroes/hero.model.ts';\nimport { HeroService }   from '../heroes/hero.service.ts';</pre>\n<p>We can add a barrel to the <code>heroes</code> folder (called <code>index</code> by convention) that exports all of these items:</p> <pre>export * from './hero.model.ts';   // re-export all of its exports\nexport * from './hero.service.ts'; // re-export all of its exports\nexport { HeroComponent } from './hero.component.ts'; // re-export the named thing</pre>\n<p>Now a consumer can import what it needs from the barrel.</p> <pre>import { Hero, HeroService } from '../heroes'; // index is implied</pre>\n<p>The Angular <a href=\"#scoped-package\">scoped packages</a> each have a barrel named <code>index</code>.</p> <p>That's why we can write this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component } from '@angular/core';\n</pre>\n<div class=\"alert is-important\">\n<p>Note that you can often achieve this same goal using <a href=\"#angular-module\">Angular modules</a> instead.</p> </div>\n<h2 id=\"binding\">Binding</h2> <p>Almost always refers to <a href=\"#data-binding\">Data Binding</a> and the act of binding an HTML object property to a data object property.</p> <p>May refer to a <a href=\"#dependency-injection\">Dependency Injection</a> binding between a \"token\" or \"key\" and a dependency <a href=\"#provider\">provider</a>. This more rare usage should be clear in context.</p> <h2 id=\"bootstrap\">Bootstrap</h2> <p>We launch an Angular application by \"bootstrapping\" it using the application root Angular module (<code>AppModule</code>). The bootstraping identifies an application's top level \"root\" <a href=\"#component\">Component</a>, which is the first component that is loaded for the application. For more information see the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>.</p> <p>One can bootstrap multiple apps in the same <code>index.html</code>, each with its own top level root.</p> <h2 id=\"C\">camelCase</h2> <p>The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter <em>except the first letter which is a lowercase letter</em>. </p> <p>Function, property, and method names are typically spelled in camelCase. Examples include: <code>square</code>, <code>firstName</code> and <code>getHeroes</code>.</p> <p>This form is also known as <strong>lower camel case</strong>, to distinguish it from <strong>upper camel case</strong> which we call <a href=\"#pascalcase\">PascalCase</a>. When we write \"camelCase\" in this documentation we always mean <em>lower camel case</em>.</p> <h2 id=\"component\">Component</h2> <p>An Angular class responsible for exposing data to a <a href=\"#view\">View</a> and handling most of the view’s display and user-interaction logic.</p> <p>The Component is one of the most important building blocks in the Angular system. It is, in fact, an Angular <a href=\"#directive\">Directive</a> with a companion <a href=\"#template\">Template</a>.</p> <p>The developer applies the <code>@Component</code> <a href=\"#decorator\">decorator</a> to the component class, thereby attaching to the class the essential component metadata that Angular needs to create a component instance and render it with its template as a view.</p> <p>Those familiar with \"MVC\" and \"MVVM\" patterns will recognize the Component in the role of \"Controller\" or \"View Model\".</p> <h2 id=\"D\">dash-case</h2> <p>The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (<code>-</code>). </p> <p>Directive selectors and the root of filenames are often spelled in dash-case. Examples include: <code>my-app</code> and <code>hero-list.component.ts</code>.</p> <p>This form is also known as <a href=\"#kebab-case\">kebab-case</a>.</p> <h2 id=\"data-binding\">Data Binding</h2> <p>Applications display data values to a user and respond to user actions (clicks, touches, keystrokes).</p> <p>We could push application data values into HTML, attach event listeners, pull changed values from the screen, and update application data values ... all by hand.</p> <p>Or we could declare the relationship between an HTML widget and an application data source ... and let a data binding framework handle the details.</p> <p>Data Binding is that second approach. Angular has a rich data binding framework with a variety of data binding operations and supporting declaration syntax.</p> <p> The many forms of binding include:</p> <ul> <li><a href=\"guide/template-syntax#interpolation\">Interpolation</a></li> <li><a href=\"guide/template-syntax#property-binding\">Property Binding</a></li> <li><a href=\"guide/template-syntax#event-binding\">Event Binding</a></li> <li><a href=\"guide/template-syntax#attribute-binding\">Attribute Binding</a></li> <li><a href=\"guide/template-syntax#class-binding\">Class Binding</a></li> <li><a href=\"guide/template-syntax#style-binding\">Style Binding</a></li> <li><a href=\"guide/template-syntax#ng-model\">Two-way data binding with ngModel</a></li> </ul> <p>Learn more about data binding in the <a href=\"guide/template-syntax#data-binding\">Template Syntax</a> chapter.</p>  <h2 id=\"decorator\">Decorator | Decoration</h2> <p>A Decorator is a <strong>function</strong> that adds metadata to a class, its members (properties, methods) and function arguments.</p> <p>Decorators are a JavaScript language <a href=\"https://github.com/wycats/javascript-decorators\">feature</a>, implemented in TypeScript and proposed for ES2016 (AKA ES7).</p> <p>We apply a decorator by positioning it immediately above or to the left of the thing it decorates.</p> <p>Angular has its own set of decorators to help it interoperate with our application parts. Here is an example of a <code>@Component</code> decorator that identifies a class as an Angular <a href=\"#component\">Component</a> and an <code>@Input</code> decorator applied to a property of that component. The elided object argument to the <code>@Component</code> decorator would contain the pertinent component metadata.</p> <pre><code>@Component({...})\nexport class AppComponent {\n  constructor(@Inject('SpecialFoo') public foo:Foo) {}\n  @Input() name:string;\n}\n</code></pre>\n<p>The scope of a decorator is limited to the language feature that it decorates. None of the decorations shown here will \"leak\" to other classes appearing below it in the file.</p> <div class=\"alert is-important\">\n<p>Always include the parentheses <code>()</code> when applying a decorator. A decorator is a <strong>function</strong> that must be called when applied.</p> </div>\n<h2 id=\"dependency-injection\">Dependency Injection</h2> <p>Dependency Injection is both a design pattern and a mechanism for creating and delivering parts of an application to other parts of an application that request them.</p> <p>Angular developers prefer to build applications by defining many simple parts that each do one thing well and then wire them together at runtime.</p> <p>These parts often rely on other parts. An Angular <a href=\"#component\">Component</a> part might rely on a service part to get data or perform a calculation. When a part \"A\" relies on another part \"B\", we say that \"A\" depends on \"B\" and that \"B\" is a dependency of \"A\".</p> <p>We can ask a \"Dependency Injection System\" to create \"A\" for us and handle all the dependencies. If \"A\" needs \"B\" and \"B\" needs \"C\", the system resolves that chain of dependencies and returns a fully prepared instance of \"A\".</p> <p>Angular provides and relies upon its own sophisticated <a href=\"dependency-injection\">Dependency Injection</a> system to assemble and run applications by \"injecting\" application parts into other application parts where and when needed.</p> <p>At the core there is an <a href=\"#injector\"><code>Injector</code></a> that returns dependency values on request. The expression <code>injector.get(token)</code> returns the value associated with the given token.</p> <p>A token is an Angular type (<code>OpaqueToken</code>). We rarely deal with tokens directly; most methods accept a class name (<code>Foo</code>) or a string (\"foo\") and Angular converts it to a token. When we write <code>injector.get(Foo)</code>, the injector returns the value associated with the token for the <code>Foo</code> class, typically an instance of <code>Foo</code> itself.</p> <p>Angular makes similar requests internally during many of its operations as when it creates a <a href=\"#component\"><code>Component</code></a> for display.</p> <p>The <code>Injector</code> maintains an internal map of tokens to dependency values. If the <code>Injector</code> can't find a value for a given token, it creates a new value using a <code>Provider</code> for that token.</p> <p>A <a href=\"#provider\">Provider</a> is a recipe for creating new instances of a dependency value associated with a particular token.</p> <p>An injector can only create a value for a given token if it has a <code>Provider</code> for that token in its internal provider registry. Registering providers is a critical preparatory step.</p> <p>Angular registers some of its own providers with every injector. We can register our own providers.</p> <p>Learn more in the <a href=\"guide/dependency-injection\">Dependency Injection</a> chapter.</p> <h2 id=\"directive\">Directive</h2> <p>An Angular class responsible for creating, re-shaping, and interacting with HTML elements in the browser DOM. Directives are Angular's most fundamental feature.</p> <p>A Directive is almost always associated with an HTML element or attribute. We often refer to such an element or attribute as the directive itself. When Angular finds a directive in an HTML template, it creates the matching directive class instance and gives that instance control over that portion of the browser DOM.</p> <p>Developers can invent custom HTML markup (e.g., <code>&lt;my-directive&gt;</code>) to associate with their custom directives. They add this custom markup to HTML templates as if they were writing native HTML. In this way, directives become extensions of HTML itself.</p> <p>Directives fall into one of three categories:</p> <ol> <li>\n<p><a href=\"#component\">Components</a> that combine application logic with an HTML template to render application [views]. Components are usually represented as HTML elements. They are the building blocks of an Angular application and the developer can expect to write a lot of them.</p> </li> <li>\n<p><a href=\"#attribute-directive\">Attribute Directives</a> that can listen to and modify the behavior of other HTML elements, attributes, properties, and components. They are usually represented as HTML attributes, hence the name.</p> </li> <li>\n<p><a href=\"#structural-directive\">Structural Directives</a>, a directive responsible for shaping or re-shaping HTML layout, typically by adding, removing, or manipulating elements and their children.</p> </li> </ol> <h2 id=\"E\">ECMAScript</h2> <p>The <a href=\"https://en.wikipedia.org/wiki/ECMAScript\">official JavaScript language specification</a>.</p> <p>The latest approved version of JavaScript is <a href=\"http://www.ecma-international.org/ecma-262/7.0/\">ECMAScript 2016</a> (AKA \"ES2016\" or \"ES7\") and many Angular 2 developers will write their applications either in this version of the language or a dialect that strives to be compatible with it such as <a href=\"#typesScript\">TypeScript</a>.</p> <p>Most modern browsers today only support the much older \"ECMAScript 5\" (AKA ES5) standard. Applications written in ES2016, ES2015 or one of their dialects must be \"<a href=\"#transpile\">transpiled</a>\" to ES5 JavaScript.</p> <p>Angular 2 developers may choose to write in ES5 directly.</p> <h2 id=\"es2015\">ES2015</h2> <p>Short hand for \"<a href=\"#ecmascript=2015\">ECMAScript 2015</a>\".</p> <h2 id=\"es6\">ES6</h2> <p>Short hand for \"<a href=\"#ecmascript=2015\">ECMAScript 2015</a>\".</p> <h2 id=\"es5\">ES5</h2> <p>Short hand for \"ECMAScript 5\", the version of JavaScript run by most modern browsers. See <a href=\"#ecmascript\">ECMAScript</a>.</p>    <h2 id=\"F\">Injector</h2> <p>An object in the Angular <a href=\"#dependency-injection\">dependency injection system</a> that can find a named \"dependency\" in its cache or create such a thing with a registered <a href=\"#provider\">provider</a>.</p> <h2 id=\"input\">Input</h2> <p>A directive property that can be the <strong><em>target</em></strong> of a <a href=\"guide/template-syntax#property-binding\">Property Binding</a>. Data values flow <em>into</em> this property from the data source identified in the template expression to the right of the equal sign.</p> <p>See the <a href=\"guide/template-syntax#inputs-outputs\">Template Syntax</a> chapter.</p> <h2 id=\"interpolation\">Interpolation</h2> <p>A form of <a href=\"#data-binding\">Property Data Binding</a> in which a <a href=\"#template-expression\">template expression</a> between double-curly braces renders as text. That text may be concatenated with neighboring text before it is assigned to an element property or displayed between element tags as in this example.</p> <pre language=\"html\" escape=\"html\" data-language=\"html\"><label>My current hero is {{hero.name}}</label>\n</pre>\n<p>Learn more about interpolation in the <a href=\"guide/template-syntax#interpolation\">Template Syntax</a> chapter.</p> <h2 id=\"J\">Just in Time (JIT) Compilation</h2> <p>With Angular <em>Just in Time</em> bootstrapping you compile your components and modules in the browser and launch the application dynamically. This is a good choice during development. Consider the <a href=\"#aot\">Ahead of Time</a> mode for production apps.</p> <h2 id=\"K\">kebab-case</h2> <p>The practice of writing compound words or phrases such that each word is separated by a dash or hyphen (<code>-</code>). </p> <p>Directive selectors and the root of filenames are often spelled in kebab-case. Examples include: <code>my-app</code> and <code>hero-list.component.ts</code>.</p> <p>This form is also known as <a href=\"#dash-case\">dash-case</a>.</p> <h2 id=\"L\">Lifecycle Hooks</h2> <p><a href=\"#directive\">Directives</a> and <a href=\"#component\">Components</a> have a lifecycle managed by Angular as it creates, updates and destroys them.</p> <p>Developers can tap into key moments in that lifecycle by implementing one or more of the \"Lifecycle Hook\" interfaces.</p> <p>Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>. For example, the <code>OnInit</code> interface has a hook method names <code>ngOnInit</code>.</p> <p>Angular calls these hook methods in the following order:</p> <ul> <li>\n<code>ngOnChanges</code> - called when an <a href=\"#input\">input</a>/<a href=\"#output\">output</a> binding values change</li> <li>\n<code>ngOnInit</code> - after the first <code>ngOnChanges</code>\n</li> <li>\n<code>ngDoCheck</code> - developer's custom change detection</li> <li>\n<code>ngAfterContentInit</code> - after component content initialized</li> <li>\n<code>ngAfterContentChecked</code> - after every check of component content</li> <li>\n<code>ngAfterViewInit</code> - after component's view(s) are initialized</li> <li>\n<code>ngAfterViewChecked</code> - after every check of a component's view(s)</li> <li>\n<code>ngOnDestroy</code> - just before the directive is destroyed.</li> </ul> <p>Learn more in the <a href=\"guide/lifecycle-hooks\">Lifecycle Hooks</a> chapter.</p> <h2 id=\"M\">Module</h2> <div class=\"alert is-important\">\n<p>In Angular, there are two types of modules:</p> <ul> <li>\n<a href=\"#angular-module\">Angular modules</a>. See the <a href=\"guide/ngmodule\">Angular Module</a> chapter for details and examples.</li> <li>ES2015 modules as described in this section.</li> </ul> </div>\n<p>Angular apps are modular.</p> <p>In general, we assemble our application from many modules, both the ones we write ourselves and the ones we acquire from others.</p> <p>A typical module is a cohesive block of code dedicated to a single purpose.</p> <p>A module <strong>exports</strong> something of value in that code, typically one thing such as a class. A module that needs that thing, <strong>imports</strong> it.</p> <p>The structure of Angular modules and the import/export syntax is based on the <a href=\"#es2015\">ES2015</a> module standard described <a href=\"http://www.2ality.com/2014/09/es6-modules-final.html\">here</a>.</p> <p>An application that adheres to this standard requires a module loader to load modules on request and resolve inter-module dependencies. Angular does not ship with a module loader and does not have a preference for any particular 3rd party library (although most samples use SystemJS). Application developers may pick any module library that conforms to the standard</p> <p>Modules are typically named after the file in which the exported thing is defined. The Angular <a href=\"https://github.com/angular/angular/blob/master/modules/@angular/common/src/pipes/date_pipe.ts\">DatePipe</a> class belongs to a feature module named <code>date_pipe</code> in the file <code>date_pipe.ts</code>.</p> <p>Developers rarely access Angular feature modules directly. We usually import them from one of the Angular <a href=\"#scoped-package\">scoped packages</a> such as <code>@angular/core</code>.</p>  <h2 id=\"N\">Observable</h2> <p>We can think of an observable as an array whose items arrive asynchronously over time. Observables help us manage asynchronous data, such as data coming from a backend service. Observables are used within Angular itself, including Angular's event system and its http client service.</p> <p>To use observables, Angular uses a third-party library called Reactive Extensions (RxJS). Observables are a proposed feature for ES 2016, the next version of JavaScript.</p> <h2 id=\"output\">Output</h2> <p>A directive property that can be the <strong><em>target</em></strong> of an <a href=\"guide/template-syntax#property-binding\">Event Binding</a>. Events stream <em>out</em> of this property to the receiver identified in the template expression to the right of the equal sign.</p> <p>See the <a href=\"guide/template-syntax#inputs-outputs\">Template Syntax</a> chapter.</p> <h2 id=\"P\">PascalCase</h2> <p>The practice of writing compound words or phrases such that each word or abbreviation begins with a capital letter. Class names are typically spelled in PascalCase. Examples include: <code>Person</code> and <code>HeroDetailComponent</code>.</p> <p>This form is also known as <strong>upper camel case</strong>, to distinguish it from <strong>lower camel case</strong> which we simply call <a href=\"#camelcase\">camelCase</a>. In this documentation, \"PascalCase\" means <em>upper camel case</em> and \"camelCase\" means <em>lower camel case</em>.</p> <h2 id=\"pipe\">Pipe</h2> <p>An Angular pipe is a function that transforms input values to output values for display in a <a href=\"#view\">view</a>. We use the <code>@Pipe</code> <a href=\"#decorator\">decorator</a> to associate the pipe function with a name. We can then use that name in our HTML to declaratively transform values on screen.</p> <p>Here's an example that uses the built-in <code>currency</code> pipe to display a numeric value in the local currency.</p> <pre language=\"html\" escape=\"html\" data-language=\"html\"><label>Price: </label>{{product.price | currency}}</pre>\n<p>Learn more in the chapter on <a href=\"guide/pipes\">pipes</a> .</p> <h2 id=\"provider\">Provider</h2> <p>A Provider creates a new instance of a dependency for the Dependency Injection system. It relates a lookup token to code - sometimes called a \"recipe\" - that can create a dependency value.</p> <p>For example, <code>new Provider(Foo, {useClass: Foo})</code> creates a <code>Provider</code> that relates the <code>Foo</code> token to a function that creates a new instance of the <code>Foo</code> class.</p> <p>There are other ways to create tokens and recipes. See <a href=\"#dependency-injection\">Dependency Injection</a> chapter to learn more.</p>   <h2 id=\"Q\">Reactive Forms</h2> <p>A technique for building Angular forms through code in a component. The alternate technique is <a href=\"#template-driven-forms\">Template-Driven Forms</a>.</p> <p>When building reactive forms:</p> <ul> <li>The \"source of truth\" is the component. The validation is defined using code in the component.</li> <li>Each control is explicitly created in the component class with <code>new FormControl()</code> or with <code>FormBuilder</code>.</li> <li>The template input elements do <em>not</em> use <code>ngModel</code>.</li> <li>The associated Angular directives are all prefixed with <code>Form</code> such as <code>FormGroup</code>, <code>FormControl</code>, and <code>FormControlName</code>.</li> </ul> <p>Reactive forms are powerful, flexible, and great for more complex data entry form scenarios, such as dynamic generation of form controls.</p> <h2 id=\"router\">Router</h2> <p>Most applications consist of many screens or <a href=\"#view\">views</a>. The user navigates among them by clicking links and buttons and taking other similar actions that cause the application to replace one view with another.</p> <p>The Angular <a href=\"guide/router\">Component Router</a> is a richly featured mechanism for configuring and managing the entire view navigation process including the creation and destruction of views.</p> <p>In most cases, components becomes attached to a <a href=\"#router\">router</a> by means of a <code>RouterConfig</code> that defines routes to views.</p> <p>A <a href=\"#routing-component\">routing component's</a> template has a <code>RouterOutlet</code> element where it can display views produced by the router.</p> <p>Other views in the application likely have anchor tags or buttons with <code>RouterLink</code> directives that users can click to navigate.</p> <p>See the <a href=\"guide/router\">Component Router</a> chapter to learn more.</p> <h2 id=\"routermodule\">RouterModule</h2> <p>A separate <a href=\"#angular-module\">Angular module</a> that provides the necessary service providers and directives for navigating through application views.</p> <p>See the <a href=\"guide/router\">Component Router</a> chapter to learn more.</p> <h2 id=\"routing-component\">Routing Component</h2> <p>An Angular <a href=\"#component\">Component</a> with a RouterOutlet that displays views based on router navigations.</p> <p>See the <a href=\"guide/router\">Component Router</a> chapter to learn more.</p> <h2 id=\"S\">Scoped Package</h2> <p>Angular modules are delivered within <em>scoped packages</em> such as <code>@angular/core</code>, <code>@angular/common</code>, <code>@angular/platform-browser-dynamic</code>, <code>@angular/http</code>, and <code>@angular/router</code>.</p> <p>A <a href=\"https://docs.npmjs.com/misc/scope\"><em>scoped package</em></a> is a way to group related <em>npm</em> packages.</p> <p>We import a scoped package the same way we'd import a <em>normal</em> package. The only difference, from a consumer perspective, is that the package name begins with the Angular <em>scope name</em>, <code>@angular</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component } from '@angular/core';\n</pre>\n<h2 id=\"service\">Service</h2> <p>Components are great and all … but what do we do with data or logic that are not associated with a specific view or that we want to share across components? We build services!</p> <p>Applications often require services such as a hero data service or a logging service. Our components depend on these services to do the heavy lifting.</p> <p>A service is a class with a focused purpose. We often create a service to implement features that are independent from any specific view, provide share data or logic across components, or encapsulate external interactions.</p> <p>See the <a href=\"tutorial/toh-pt4\">Services</a> chapter of the tutorial to learn more.</p> <h2 id=\"structural-directive\">Structural Directive</h2> <p>A category of <a href=\"#directive\">Directive</a> that can shape or re-shape HTML layout, typically by adding, removing, or manipulating elements and their children.</p> <p>The <code>ngIf</code> \"conditional element\" directive and the <code>ngFor</code> \"repeater\" directive are good examples in this category.</p> <p>See the <a href=\"guide/structural-directives\">Structural Directives</a> chapter to learn more.</p> <h2 id=\"T\">Template</h2> <p>A template is a chunk of HTML that Angular uses to render a <a href=\"#view\">view</a> with the support and continuing guidance of an Angular <a href=\"#directive\">Directive</a>, most notably a <a href=\"#component\">Component</a>.</p> <p>We write templates in a special <a href=\"guide/template-syntax\">Template Syntax</a>.</p> <h2 id=\"template-driven-forms\">Template-Driven Forms</h2> <p>A technique for building Angular forms using HTML forms and input elements in the view. The alternate technique is <a href=\"#reactive-forms\">Reactive Forms</a>.</p> <p>When building template-driven forms:</p> <ul> <li>The \"source of truth\" is the template. The validation is defined using attributes on the individual input elements.</li> <li>\n<a href=\"#data-binding\">Two-way binding</a> with <code>ngModel</code> keeps the component model in synchronization with the user's entry into the input elements.</li> <li>Behind the scenes, Angular creates a new control for each input element that has a <code>name</code> attribute and two-way binding set up.</li> <li>The associated Angular directives are all prefixed with <code>ng</code> such as <code>ngForm</code>, <code>ngModel</code>, and <code>ngModelGroup</code>.</li> </ul> <p>Template-driven forms are convenient, quick, and simple and are a good choice for many basic data entry form scenarios.</p> <p>Learn how to build template-driven forms in the <a href=\"guide/forms\">Forms</a> chapter.</p> <h2 id=\"template-expression\">Template Expression</h2> <p>An expression is a JavaScript-like syntax that Angular evaluates within a <a href=\"#data-binding\">data binding</a>. Learn how to write template expressions in the <a href=\"guide/template-syntax#template-expressions\">Template Syntax</a> chapter.</p> <h2 id=\"transpile\">Transpile</h2> <p>The process of transforming code written in one form of JavaScript (e.g., TypeScript) into another form of JavaScript (e.g., <a href=\"#es5\">ES5</a>).</p> <h2 id=\"typescript\">TypeScript</h2> <p>A version of JavaScript that supports most <a href=\"#ecmascript=2015\">ECMAScript 2015</a> language features and many features that may arrive in future versions of JavaScript such as <a href=\"#decorator\">Decorators</a>.</p> <p>TypeScript is also noteable for its optional typing system which gives us compile-time type-checking and strong tooling support (e.g. \"intellisense\", code completion, refactoring, and intelligent search). Many code editors and IDEs support TypeScript either natively or with plugins.</p> <p>TypeScript is the preferred language for Angular 2 development although we are welcome to write in other JavaScript dialects such as <a href=\"#es5\">ES5</a>.</p> <p>Angular 2 itself is written in TypeScript.</p> <p>Learn more about TypeScript on its <a href=\"http://www.typescriptlang.org/\">website</a>.</p>  <h2 id=\"U\">View</h2> <p>A view is a portion of the screen that displays information and responds to user actions such as clicks, mouse moves, and keystrokes.</p> <p>Angular renders a view under the control of one or more <a href=\"#directive\">Directives</a>, especially <a href=\"#component\">Component</a> directives and their companion <a href=\"#template\">Templates</a>. The Component plays such a prominent role that we often find it convenient to refer to a component as a view.</p> <p>Views often contain other views and any view might be loaded and unloaded dynamically as the user navigates through the application, typically under the control of a <a href=\"#router\">router</a>.</p>    <h2 id=\"W\">Zone</h2> <p>Zones are a mechanism for encapsulating and intercepting a JavaScript application's asynchronous activity.</p> <p>The browser DOM and JavaScript have a limited number of asynchronous activities, activities such as DOM events (e.g., clicks), <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promises</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XHR</a> calls to remote servers.</p> <p>Zones intercept all of these activities and give a \"zone client\" the opportunity to take action before and after the async activity completes.</p> <p>Angular runs our application in a zone where it can respond to asynchronous events by checking for data changes and updating the information it displays via <a href=\"#data-binding\">data binding</a>.</p> <p>Learn more about zones in this <a href=\"https://www.youtube.com/watch?v=3IqtmUscE_U\">Brian Ford video</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/glossary.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/glossary.html</a>\n  </p>\n</div>\n","guide/lifecycle-hooks":"<h1 class=\"hero-title text-display-1 \">Lifecycle Hooks</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Angular calls lifecycle hook methods on directives and components as it creates, changes, and destroys them.</p></div>\n<h1 id=\"component-lifecycle\">Component Lifecycle</h1> <p>A Component has a lifecycle managed by Angular itself. Angular creates it, renders it, creates and renders its children, checks it when its data-bound properties change, and destroys it before removing it from the DOM.</p> <p>Angular offers <strong>component lifecycle hooks</strong> that give us visibility into these key moments and the ability to act when they occur.</p> <p>We cover these hooks in this chapter and demonstrate how they work in code.</p> <ul> <li><a href=\"#hooks-overview\">The lifecycle hooks</a></li> <li><a href=\"#hook-sequence\">The hook-call sequence</a></li> <li><a href=\"#other-lifecycles\">Other Angular lifecycle hooks</a></li> <li>\n<a href=\"#the-sample\">The lifecycle sample</a><ul> <li><a href=\"#peek-a-boo\">All</a></li> <li>\n<a href=\"#spy\">Spying OnInit and OnDestroy</a> </li> <li><a href=\"#onchanges\">OnChanges</a></li> <li><a href=\"#docheck\">DoCheck</a></li> <li><a href=\"#afterview\">AfterViewInit and AfterViewChecked</a></li> <li><a href=\"#aftercontent\">AfterContentInit and AfterContentChecked</a></li> </ul> </li> </ul> <p>Try the <live-example></live-example>.</p> <h2 id=\"hooks-overview\">Component lifecycle Hooks</h2> <p>Directive and component instances have a lifecycle as Angular creates, updates, and destroys them.</p> <p>Developers can tap into key moments in that lifecycle by implementing one or more of the <em>Lifecycle Hook</em> interfaces in the Angular <code>core</code> library.</p> <p>Each interface has a single hook method whose name is the interface name prefixed with <code>ng</code>. For example, the <code>OnInit</code> interface has a hook method named <code>ngOnInit</code>. We might implement it in a component class like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"peek-a-boo.component.ts (excerpt)\">// peek-a-boo.component.ts (excerpt)\n\nexport class PeekABoo implements OnInit {\n  constructor(private logger: LoggerService) { }\n\n  // implement OnInit's `ngOnInit` method\n  ngOnInit() { this.logIt(`OnInit`); }\n\n  protected logIt(msg: string) {\n    this.logger.log(`#${nextId++} ${msg}`);\n  }\n}\n</pre>\n<p>No directive or component will implement all of them and some of the hooks only make sense for components. Angular only calls a directive/component hook method <em>if it is defined</em>.</p> <div class=\"l-sub-section\">\n<h3 id=\"interface-optional-\">Interface optional?</h3> <p>The interfaces are optional for JavaScript and Typescript developers from a purely technical perspective. The JavaScript language doesn't have interfaces. Angular can't see TypeScript interfaces at runtime because they disappear from the transpiled JavaScript.</p> <p>Fortunately, they aren't necessary. We don't have to add the lifecycle hook interfaces to our directives and components to benefit from the hooks themselves.</p> <p>Angular instead inspects our directive and component classes and calls the hook methods <em>if they are defined</em>. Angular will find and call methods like <code>ngOnInit()</code>, with or without the interfaces.</p> <p>Nonetheless, we strongly recommend adding interfaces to TypeScript directive classes in order to benefit from strong typing and editor tooling. </p> </div>\n<p>Here are the component lifecycle hook methods:</p> <h3 id=\"directives-and-components\">Directives and Components</h3> <table width=\"100%\">\n<col width=\"20%\">\n<col width=\"80%\">\n<tr>\n<th>Hook</th>\n<th>Purpose</th>\n</tr>\n<tr>\n<td>ngOnInit</td>\n<td>\n<p>Initialize the directive/component after Angular initializes the data-bound input properties.</p> </td>\n</tr>\n<tr>\n<td>ngOnChanges</td>\n<td>\n<p>Respond after Angular sets a data-bound input property. The method receives a <code>changes</code> object of current and previous values.</p> </td>\n</tr>\n<tr>\n<td>ngDoCheck</td>\n<td>\n<p>Detect and act upon changes that Angular can't or won't detect on its own. Called every change detection run.</p> </td>\n</tr>\n<tr>\n<td>ngOnDestroy</td>\n<td>\n<p>Cleanup just before Angular destroys the directive/component. Unsubscribe observables and detach event handlers to avoid memory leaks.</p> </td>\n</tr>\n</table>\n<h3 id=\"components-only\">Components only</h3> <table width=\"100%\">\n<col width=\"20%\">\n<col width=\"80%\">\n<tr>\n<th>Hook</th>\n<th>Purpose</th>\n</tr>\n<tr>\n<td>ngAfterContentInit</td>\n<td>\n<p>After Angular projects external content into its view.</p> </td>\n</tr>\n<tr>\n<td>ngAfterContentChecked</td>\n<td>\n<p>After Angular checks the bindings of the external content that it projected into its view.</p> </td>\n</tr>\n<tr>\n<td>ngAfterViewInit</td>\n<td>\n<p>After Angular creates the component's view(s).</p> </td>\n</tr>\n<tr>\n<td>ngAfterViewChecked</td>\n<td>\n<p>After Angular checks the bindings of the component's view(s).</p> </td>\n</tr>\n</table>\n<p>Angular does not call the hook methods in this order.</p> <h2 id=\"hook-sequence\">Lifecycle sequence</h2> <p><em>After</em> Angular creates a component/directive by <code>new</code>-ing its constructor, it calls the lifecycle hook methods in the following sequence at specific moments: </p> <table width=\"100%\">\n<col width=\"20%\">\n<col width=\"80%\">\n<tr>\n<th>Hook</th>\n<th>Timing</th>\n</tr>\n<tr>\n<td>ngOnChanges</td>\n<td>\n<p>before <code>ngOnInit</code> and when a data-bound input property value changes.</p> </td>\n</tr>\n<tr>\n<td>ngOnInit</td>\n<td>\n<p>after the first <code>ngOnChanges</code>.</p> </td>\n</tr>\n<tr>\n<td>ngDoCheck</td>\n<td>\n<p>during every Angular change detection cycle.</p> </td>\n</tr>\n<tr>\n<td>ngAfterContentInit</td>\n<td>\n<p>after projecting content into the component.</p> </td>\n</tr>\n<tr>\n<td>ngAfterContentChecked</td>\n<td>\n<p>after every check of projected component content.</p> </td>\n</tr>\n<tr>\n<td>ngAfterViewInit</td>\n<td>\n<p>after initializing the component's views and child views.</p> </td>\n</tr>\n<tr>\n<td>ngAfterViewChecked</td>\n<td>\n<p>after every check of the component's views and child views.</p> </td>\n</tr>\n<tr>\n<td>ngOnDestroy</td>\n<td>\n<p>just before Angular destroys the directive/component.</p> </td>\n</tr>\n</table>\n<h2 id=\"other-lifecycles\">Other lifecycle hooks</h2> <p>Other Angular sub-systems may have their own lifecycle hooks apart from the component hooks we've listed. The router, for instance, also has it's own <a href=\"router#router-lifecycle-hooks\">router lifecycle hooks</a> that allow us to tap into specific moments in route navigation.</p> <p>A parallel can be drawn between <code>ngOnInit</code> and <code>routerOnActivate</code>. Both are prefixed so as to avoid collision, and both run right when a component is 'booting' up.</p> <p>3rd party libraries might implement their hooks as well in order to give us, the developers, more control over how these libraries are used.</p> <h2 id=\"lifecycle-exercises\">Lifecycle exercises</h2> <p>The <live-example></live-example> demonstrates the lifecycle hooks in action through a series of exercises presented as components under the control of the root <code>AppComponent</code>.</p> <p>They follow a common pattern: a <em>parent</em> component serves as a test rig for a <em>child</em> component that illustrates one or more of the lifecycle hook methods.</p> <p>Here's a brief description of each exercise: </p> <table width=\"100%\">\n<col width=\"20%\">\n<col width=\"80%\">\n<tr>\n<th>Component</th>\n<th>Description</th>\n</tr>\n<tr>\n<td><a href=\"#peek-a-boo\">Peek-a-boo</a></td>\n<td>\n<p>Demonstrates every lifecycle hook. Each hook method writes to the on-screen log.</p> </td>\n</tr>\n<tr>\n<td><a href=\"#spy\">Spy</a></td>\n<td>\n<p>Directives have lifecycle hooks too. We create a <code>SpyDirective</code> that logs when the element it spies upon is created or destroyed using the <code>ngOnInit</code> and <code>ngOnDestroy</code> hooks.</p> <p>We apply the <code>SpyDirective</code> to a <code>&lt;div&gt;</code> in an <code>ngFor</code> <em>hero</em> repeater managed by the parent <code>SpyComponent</code>.</p> </td>\n</tr>\n<tr>\n<td><a href=\"#onchanges\">OnChanges</a></td>\n<td>\n<p>See how Angular calls the <code>ngOnChanges</code> hook with a <code>changes</code> object every time one of the component input properties changes. Shows how to interpret the <code>changes</code> object.</p> </td>\n</tr>\n<tr>\n<td>\n<a href=\"#docheck\">DoCheck</a> </td>\n<td>\n<p>Implements an <code>ngDoCheck</code> method with custom change detection. See how often Angular calls this hook and watch it post changes to a log.</p> </td>\n</tr>\n<tr>\n<td><a href=\"#afterview\">AfterView</a></td>\n<td>\n<p>Shows what Angular means by a <em>view</em>. Demonstrates the <code>ngAfterViewInit</code> and <code>ngAfterViewChecked</code> hooks.</p> </td>\n</tr>\n<tr>\n<td><a href=\"#aftercontent\">AfterContent</a></td>\n<td>\n<p>Shows how to project external content into a component and how to distinguish projected content from a component's view children. Demonstrates the <code>ngAfterContentInit</code> and <code>ngAfterContentChecked</code> hooks.</p> </td>\n</tr>\n<tr>\n<td>Counter</td>\n<td>\n<p>Demonstrates a combination of a component and a directive each with its own hooks.</p> <p>In this example, a <code>CounterComponent</code> logs a change (via <code>ngOnChanges</code>) every time the parent component increments its input counter property. Meanwhile, we apply the <code>SpyDirective</code> from the previous example to the <code>CounterComponent</code> log and watch log entries be created and destroyed.</p> </td>\n</tr>\n</table>\n<p>We discuss the exercises in further detail over this chapter as we learn more about the lifecycle hooks.</p> <h2 id=\"peek-a-boo\">Peek-a-boo: all hooks</h2> <p>The <code>PeekABooComponent</code> demonstrates all of the hooks in one component.</p> <p>In real life, we'd rarely if ever implement all of the interfaces like this. We do so in peek-a-boo in order to watch Angular call the hooks in the expected order.</p> <p>In this snapshot, we clicked the <em>Create...</em> button and then the <em>Destroy...</em> button.</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/peek-a-boo.png\" alt=\"Peek-a-boo\"><p>The sequence of log messages follows the prescribed hook calling order: <code>OnChanges</code>, <code>OnInit</code>, <code>DoCheck</code> (3x), <code>AfterContentInit</code>, <code>AfterContentChecked</code> (3x), <code>AfterViewInit</code>, <code>AfterViewChecked</code> (3x), and <code>OnDestroy</code>.</p> <div class=\"l-sub-section\">\n<p>The constructor isn't an Angular hook <em>per se</em>. We log in it to confirm that input properties (the <code>name</code> property in this case) have no assigned values at construction.</p> </div>\n<p>Had we clicked the <em>Update Hero</em> button, we'd have seen another <code>OnChanges</code> and two more triplets of <code>DoCheck</code>, <code>AfterContentChecked</code> and <code>AfterViewChecked</code>. Clearly these three hooks fire a <em>lot</em> and we must keep the logic we put in these hooks as lean as possible!</p> <p>Our next examples focus on hook details.</p> \n<h2 id=\"spying-oninit-and-ondestroy-\">Spying <em>OnInit</em> and <em>OnDestroy</em>\n</h2> <p>We're going undercover for these two hooks. We want to know when an element is initialized or destroyed, but we don't want <em>it</em> to know we're watching. </p> <p>This is the perfect infiltration job for a directive. Our heroes will never know it's there.</p> <div class=\"l-sub-section\">\n<p>Kidding aside, we're emphasizing two key points: </p> <ol> <li>\n<p>Angular calls hook methods for <em>directives</em> as well as components.</p> </li> <li>\n<p>A spy directive can gives us insight into a DOM object that we cannot change directly. Obviously we can't change the implementation of a native <code>div</code>. We can't modify a third party component either. But we can watch both with a directive.</p> </li> </ol> </div>\n<p>Our sneaky spy directive is simple, consisting almost entirely of <code>ngOnInit</code> and <code>ngOnDestroy</code> hooks that log messages to the parent via an injected <code>LoggerService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// Spy on any element to which it is applied.\n// Usage: &lt;div mySpy&gt;...&lt;/div&gt;\n@Directive({selector: '[mySpy]'})\nexport class SpyDirective implements OnInit, OnDestroy {\n\n  constructor(private logger: LoggerService) { }\n\n  ngOnInit()    { this.logIt(`onInit`); }\n\n  ngOnDestroy() { this.logIt(`onDestroy`); }\n\n  private logIt(msg: string) {\n    this.logger.log(`Spy #${nextId++} ${msg}`);\n  }\n}\n</pre>\n<p>We can apply the spy to any native or component element and it'll be initialized and destroyed at the same time as that element. Here we attach it to the repeated hero <code>&lt;div&gt;</code></p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div *ngFor=\"let hero of heroes\" mySpy class=\"heroes\"&gt;\n  {{hero}}\n&lt;/div&gt;\n</pre>\n<p>Each spy's birth and death marks the birth and death of the attached hero <code>&lt;div&gt;</code> with an entry in the <em>Hook Log</em> as we see here:</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/spy-directive.gif\" alt=\"Spy Directive\"><p>Adding a hero results in a new hero <code>&lt;div&gt;</code>. The spy's <code>ngOnInit</code> logs that event. We see a new entry for each hero.</p> <p>The <em>Reset</em> button clears the <code>heroes</code> list. Angular removes all hero divs from the DOM and destroys their spy directives at the same time. The spy's <code>ngOnDestroy</code> method reports its last moments.</p> <p>The <code>ngOnInit</code> and <code>ngOnDestroy</code> methods have more vital roles to play in real applications. Let's see why we need them.</p> <h3 id=\"oninit\">OnInit</h3> <p>We turn to <code>ngOnInit</code> for two main reasons:</p> <ol> <li>To perform complex initializations shortly after construction</li> <li>To set up the component after Angular sets the input properties</li> </ol> <p>An <code>ngOnInit</code> often fetches data for the component as shown in the <a href=\"../tutorial/toh-pt4#oninit\">Tutorial</a> and <a href=\"server-communication#oninit\">HTTP</a> chapters.</p> <p>We don't fetch data in a component constructor. Why? Because experienced developers agree that components should be cheap and safe to construct. We shouldn't worry that a new component will try to contact a remote server when created under test or before we decide to display it. Constructors should do no more than set the initial local variables to simple values.</p> <p>When a component must start working <em>soon</em> after creation, we can count on Angular to call the <code>ngOnInit</code> method to jumpstart it. That's where the heavy initialization logic belongs.</p> <p>Remember also that a directive's data-bound input properties are not set until <em>after construction</em>. That's a problem if we need to initialize the directive based on those properties. They'll have been set when our <code>ngOninit</code> runs.</p> <div class=\"l-sub-section\">\n<p>Our first opportunity to access those properties is the <code>ngOnChanges</code> method which Angular calls before <code>ngOnit</code>. But Angular calls <code>ngOnChanges</code> many times after that. It only calls <code>ngOnit</code> once.</p> </div>\n<h3 id=\"ondestroy\">OnDestroy</h3> <p>Put cleanup logic in <code>ngOnDestroy</code>, the logic that <em>must</em> run before Angular destroys the directive.</p> <p>This is the time to notify another part of the application that this component is going away.</p> <p>This is the place to free resources that won't be garbage collected automatically. Unsubscribe from observables and DOM events. Stop interval timers. Unregister all callbacks that this directive registered with global or application services. We risk memory leaks if we neglect to do so.</p> <h2 id=\"onchanges\">OnChanges</h2> <p>We monitor the <code>OnChanges</code> hook in this example. Angular calls its <code>ngOnChanges</code> method whenever it detects changes to <strong><em>input properties</em></strong> of the component (or directive).</p> <p>Here is our implementation of the hook.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"OnChangesComponent (ngOnChanges)\">// OnChangesComponent (ngOnChanges)\n\nngOnChanges(changes: {[propertyName: string]: SimpleChange}) {\n  for (let propName in changes) {\n    let chng = changes[propName];\n    let cur  = JSON.stringify(chng.currentValue);\n    let prev = JSON.stringify(chng.previousValue);\n    this.changeLog.push(`${propName}: currentValue = ${cur}, previousValue = ${prev}`);\n  }\n}\n</pre>\n<p>The <code>ngOnChanges</code> method takes an object that maps each changed property name to a <a href=\"../api/core/index/simplechange-class\">SimpleChange</a> object with the current and previous property values. We iterate over the changed properties and log them.</p> <p>The input properties for our example <code>OnChangesComponent</code> are <code>hero</code> and <code>power</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Input() hero: Hero;\n@Input() power: string;\n</pre>\n<p>The parent binds to them like this:</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;on-changes [hero]=\"hero\" [power]=\"power\"&gt;&lt;/on-changes&gt;\n</pre>\n<p>Here's the sample in action as we make changes.</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/on-changes-anim.gif\" alt=\"OnChanges\"><p>We see log entries as the string value of the <em>power</em> property changes. But the <code>ngOnChanges</code> did not catch changes to <code>hero.name</code> That's surprising at first. </p> <p>Angular only calls the hook when the value of the input property changes. The value of the <code>hero</code> property is the <em>reference to the hero object</em>. Angular doesn't care that the hero's own <code>name</code> property changed. The hero object <em>reference</em> didn't change so, from Angular's perspective, there is no change to report!</p> <h2 id=\"docheck\">DoCheck</h2> <p>We can use the <code>DoCheck</code> hook to detect and act upon changes that Angular doesn't catch on its own.</p> <div class=\"l-sub-section\">\n<p>With this method we can detect a change that Angular overlooked. What we do with that information to refresh the display is a separate matter.</p> </div>\n<p>The <em>DoCheck</em> sample extends the <em>OnChanges</em> sample with this implementation of <code>DoCheck</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"DoCheckComponent (ngDoCheck)\">// DoCheckComponent (ngDoCheck)\n\nngDoCheck() {\n\n  if (this.hero.name !== this.oldHeroName) {\n    this.changeDetected = true;\n    this.changeLog.push(`DoCheck: Hero name changed to \"${this.hero.name}\" from \"${this.oldHeroName}\"`);\n    this.oldHeroName = this.hero.name;\n  }\n\n  if (this.power !== this.oldPower) {\n    this.changeDetected = true;\n    this.changeLog.push(`DoCheck: Power changed to \"${this.power}\" from \"${this.oldPower}\"`);\n    this.oldPower = this.power;\n  }\n\n  if (this.changeDetected) {\n      this.noChangeCount = 0;\n  } else {\n      // log that hook was called when there was no relevant change.\n      let count = this.noChangeCount += 1;\n      let noChangeMsg = `DoCheck called ${count}x when no change to hero or power`;\n      if (count === 1) {\n        // add new \"no change\" message\n        this.changeLog.push(noChangeMsg);\n      } else {\n        // update last \"no change\" message\n        this.changeLog[this.changeLog.length - 1] = noChangeMsg;\n      }\n  }\n\n  this.changeDetected = false;\n}\n</pre>\n<p>We manually check everything that we care about, capturing and comparing against previous values. We write a special message to the log when there are no substantive changes to the hero or the power so we can keep an eye on the method's performance characteristics.</p> <p>The results are illuminating:</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/do-check-anim.gif\" alt=\"DoCheck\"><p>We now are able to detect when the hero's <code>name</code> has changed. But we must be careful.</p> <p>The <code>ngDoCheck</code> hook is called with enormous frequency — after <em>every</em> change detection cycle no matter where the change occurred. It's called over twenty times in this example before the user can do anything. </p> <p>Most of these initial checks are triggered by Angular's first rendering of <em>unrelated data elsewhere on the page</em>. Mere mousing into another input box triggers a call. Relatively few calls reveal actual changes to pertinent data. Clearly our implementation must be very lightweight or the user experience may suffer.</p> <div class=\"l-sub-section\">\n<p>We also see that the <code>ngOnChanges</code> method is called in contradiction of the <a href=\"../api/core/index/docheck-class\">incorrect API documentation</a>.</p> </div>\n<h2 id=\"afterview\">AfterView</h2> <p>The <em>AfterView</em> sample explores the <code>AfterViewInit</code> and <code>AfterViewChecked</code> hooks that Angular calls <em>after</em> it creates a component's child views.</p> <p>Here's a child view that displays a hero's name in an input box:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"ChildComponent\">// ChildComponent\n\n@Component({\n  selector: 'my-child-view',\n  template: '&lt;input [(ngModel)]=\"hero\"&gt;'\n})\nexport class ChildViewComponent {\n  hero = 'Magneta';\n}\n</pre>\n<p>The <code>AfterViewComponent</code> displays this child view <em>within its template</em>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterViewComponent (template)\">// AfterViewComponent (template)\n\ntemplate: `\n  &lt;div&gt;-- child view begins --&lt;/div&gt;\n    &lt;my-child-view&gt;&lt;/my-child-view&gt;\n  &lt;div&gt;-- child view ends --&lt;/div&gt;`\n</pre>\n<p>The following hooks take action based on changing values <em>within the child view</em> which we can only reach by querying for the child view via the property decorated with <a href=\"../api/core/index/viewchild-var\">@ViewChild</a>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterViewComponent (class excerpts)\">// AfterViewComponent (class excerpts)\n\nexport class AfterViewComponent implements  AfterViewChecked, AfterViewInit {\n  private prevHero = '';\n\n  // Query for a VIEW child of type `ChildViewComponent`\n  @ViewChild(ChildViewComponent) viewChild: ChildViewComponent;\n\n  ngAfterViewInit() {\n    // viewChild is set after the view has been initialized\n    this.logIt('AfterViewInit');\n    this.doSomething();\n  }\n\n  ngAfterViewChecked() {\n    // viewChild is updated after the view has been checked\n    if (this.prevHero === this.viewChild.hero) {\n      this.logIt('AfterViewChecked (no change)');\n    } else {\n      this.prevHero = this.viewChild.hero;\n      this.logIt('AfterViewChecked');\n      this.doSomething();\n    }\n  }\n  // ...\n}\n</pre>\n\n<h3 id=\"abide-by-the-unidirectional-data-flow-rule\">Abide by the unidirectional data flow rule</h3> <p>The <code>doSomething</code> method updates the screen when the hero name exceeds 10 characters.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterViewComponent (doSomething)\">// AfterViewComponent (doSomething)\n\n// This surrogate for real business logic sets the `comment`\nprivate doSomething() {\n  let c = this.viewChild.hero.length &gt; 10 ? `That's a long name` : '';\n  if (c !== this.comment) {\n    // Wait a tick because the component's view has already been checked\n    this.logger.tick_then(() =&gt; this.comment = c);\n  }\n}\n</pre>\n<p>Why does the <code>doSomething</code> method wait a tick before updating <code>comment</code>?</p> <p>Because we must adhere to Angular's unidirectional data flow rule which says that we may not update the view <em>after</em> it has been composed. Both hooks fire after the component's view has been composed.</p> <p>Angular throws an error if we update component's data-bound <code>comment</code> property immediately (try it!).</p> <p>The <code>LoggerService.tick</code> methods, which are implemented by a call to <code>setTimeout</code>, postpone the update one turn of the of the browser's JavaScript cycle ... and that's long enough.</p> <p>Here's <em>AfterView</em> in action</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/after-view-anim.gif\" alt=\"AfterView\"><p>Notice that Angular frequently calls <code>AfterViewChecked</code>, often when there are no changes of interest. Write lean hook methods to avoid performance problems.</p> <h2 id=\"aftercontent\">AfterContent</h2> <p>The <em>AfterContent</em> sample explores the <code>AfterContentInit</code> and <code>AfterContentChecked</code> hooks that Angular calls <em>after</em> Angular projects external content into the component.</p> <h3 id=\"content-projection\">Content projection</h3> <p><em>Content projection</em> is a way to import HTML content from outside the component and insert that content into the component's template in a designated spot.</p> <div class=\"l-sub-section\">\n<p>Angular 1 developers know this technique as <em>transclusion</em>.</p> </div>\n<p>We'll illustrate with a variation on the <a href=\"#afterview\">previous</a> example whose behavior and output is almost the same.</p> <p>This time, instead of including the child view within the template, we'll import it from the <code>AfterContentComponent</code>'s parent. Here's the parent's template.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterContentParentComponent (template excerpt)\">// AfterContentParentComponent (template excerpt)\n\n`&lt;after-content&gt;\n   &lt;my-child&gt;&lt;/my-child&gt;\n &lt;/after-content&gt;`\n</pre>\n<p>Notice that the <code>&lt;my-child&gt;</code> tag is tucked between the <code>&lt;after-content&gt;</code> tags. We never put content between a component's element tags <em>unless we intend to project that content into the component</em>.</p> <p>Now look at the component's template:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterContentComponent (template)\">// AfterContentComponent (template)\n\ntemplate: `\n  &lt;div&gt;-- projected content begins --&lt;/div&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  &lt;div&gt;-- projected content ends --&lt;/div&gt;`\n</pre>\n<p>The <code>&lt;ng-content&gt;</code> tag is a <em>placeholder</em> for the external content. They tell Angular where to insert that content. In this case, the projected content is the <code>&lt;my-child&gt;</code> from the parent.</p> <img src=\"https://angular.io/resources/images/devguide/lifecycle-hooks/projected-child-view.png\" width=\"230\" alt=\"Projected Content\"><div class=\"l-sub-section\">\n<p>The tell-tale signs of <em>content projection</em> are (a) HTML between component element tags and (b) the presence of <code>&lt;ng-content&gt;</code> tags in the component's template.</p> </div>\n<h3 id=\"aftercontent-hooks\">AfterContent hooks</h3> <p><em>AfterContent</em> hooks are similar to the <em>AfterView</em> hooks. The key difference is the kind of child component that we're looking for. </p> <ul> <li>\n<p>The <em>AfterView</em> hooks concern <code>ViewChildren</code>, the child components whose element tags appear <em>within</em> the component's template.</p> </li> <li>\n<p>The <em>AfterContent</em> hooks concern <code>ContentChildren</code>, the child components that Angular projected into the component.</p> </li> </ul> <p>The following <em>AfterContent</em> hooks take action based on changing values in a <em>content child</em> which we can only reach by querying for it via the property decorated with <a href=\"../api/core/index/contentchild-var\">@ContentChild</a>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"AfterContentComponent (class excerpts)\">// AfterContentComponent (class excerpts)\n\nexport class AfterContentComponent implements AfterContentChecked, AfterContentInit {\n  private prevHero = '';\n  comment = '';\n\n  // Query for a CONTENT child of type `ChildComponent`\n  @ContentChild(ChildComponent) contentChild: ChildComponent;\n\n  ngAfterContentInit() {\n    // contentChild is set after the content has been initialized\n    this.logIt('AfterContentInit');\n    this.doSomething();\n  }\n\n  ngAfterContentChecked() {\n    // contentChild is updated after the content has been checked\n    if (this.prevHero === this.contentChild.hero) {\n      this.logIt('AfterContentChecked (no change)');\n    } else {\n      this.prevHero = this.contentChild.hero;\n      this.logIt('AfterContentChecked');\n      this.doSomething();\n    }\n  }\n  // ...\n}\n</pre>\n<h3 id=\"no-unidirectional-flow-worries\">No unidirectional flow worries</h3> <p>This component's <code>doSomething</code> method update's the component's data-bound <code>comment</code> property immediately. There's no <a href=\"#wait-a-tick\">need to wait</a>. </p> <p>Recall that Angular calls both <em>AfterContent</em> hooks before calling either of the <em>AfterView</em> hooks. Angular completes composition of the projected content <em>before</em> finishing the composition of this component's view. We still have a window of opportunity to modify that view.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/lifecycle-hooks.html</a>\n  </p>\n</div>\n","cookbook/index":"<h1 class=\"hero-title text-display-1 \">Cookbook</h1>\n\n<h1 id=\"angular-2-cookbook\">Angular 2 Cookbook</h1> <p>The <em>Cookbook</em> offers answers to common implementation questions.</p> <p>Each cookbook chapter is a collection of recipes focused on a particular Angular 2 feature or application challenge such as data binding, cross-component interaction, and communicating with a remote server via HTTP.</p> <div class=\"l-sub-section\">\n<p>The cookbook is just getting started. Many more recipes are on the way.</p> </div>\n<p>Each cookbook chapter links to a live sample with every recipe included.</p> <p>Recipes are deliberately brief and code-centric. Each recipe links to a chapter of the Developer Guide or the API Guide where you can learn more about the purpose, context, and design choices behind the code snippets.</p> <h2 id=\"feedback\">Feedback</h2> <p>The cookbook is a perpetual <em>work-in-progress</em>. We welcome feedback! Leave a comment by clicking the icon in upper right corner of the banner.</p> <p>Post <em>documentation</em> issues and pull requests on the <a href=\"https://github.com/angular/angular.io\">angular.io</a> github repository.</p> <p>Post issues with <em>Angular 2 itself</em> to the <a href=\"https://github.com/angular/angular\">angular</a> github repository.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/</a>\n  </p>\n</div>\n","api/common/index/app_base_href-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">APP_BASE_HREF: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export APP_BASE_HREF</pre>\n<p>The <code>APP_BASE_HREF</code> token represents the base href to be used with the <a href=\"pathlocationstrategy-class\"><code>PathLocationStrategy</code></a>.</p> <p>If you're using <a href=\"pathlocationstrategy-class\"><code>PathLocationStrategy</code></a>, you must provide a provider to a string representing the URL prefix that should be preserved when generating and recognizing URLs.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {ROUTER_DIRECTIVES, ROUTER_PROVIDERS, RouteConfig} from '@angular/router';\nimport {APP_BASE_HREF} from '@angular/common';\n\n@Component({directives: [ROUTER_DIRECTIVES]})\n@RouteConfig([\n {...},\n])\nclass AppCmp {\n  // ...\n}\n\nbootstrap(AppCmp, [\n  ROUTER_PROVIDERS,\n  {provide: APP_BASE_HREF, useValue: '/my/app'}\n]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/location_strategy.ts#L72-L72\">@angular/common/src/location/location_strategy.ts (line 72)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/APP_BASE_HREF-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/APP_BASE_HREF-let.html</a>\n  </p>\n</div>\n","guide/server-communication":"<h1 class=\"hero-title text-display-1 \">HTTP Client</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Talk to a remote server with an HTTP Client.</p></div>\n<p><a href=\"https://tools.ietf.org/html/rfc2616\">HTTP</a> is the primary protocol for browser/server communication.</p> <div class=\"l-sub-section\">\n<p>The <a href=\"https://tools.ietf.org/html/rfc6455\"><code>WebSocket</code></a> protocol is another important communication technology; we won't cover it in this chapter.</p> </div>\n<p>Modern browsers support two HTTP-based APIs: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\">XMLHttpRequest (XHR)</a> and <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a>. A few browsers also support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\">Fetch</a>. </p> <p>The Angular HTTP library simplifies application programming of the <strong>XHR</strong> and <strong>JSONP</strong> APIs as we'll learn in this chapter covering:</p> <ul> <li><a href=\"#http-client\">HTTP client sample overview</a></li> <li><a href=\"#fetch-data\">Fetch data with http.get</a></li>\n<li if-docs=\"ts\"> <a href=\"#rxjs\">RxJS Observable of HTTP Responses</a>\n</li> <li if-docs=\"ts\"> <a href=\"#enable-rxjs-operators\">Enabling RxJS Operators</a>\n</li> <li><a href=\"#extract-data\">Extract JSON data</a></li> <li><a href=\"#error-handling\">Error handling</a></li> <li><a href=\"#update\">Send data to the server</a></li>\n<li if-docs=\"ts\"> <a href=\"#promises\">Promises instead of observables</a>\n</li> <li>\n<a href=\"#cors\">Cross-origin requests: Wikipedia example</a><ul if-docs=\"ts\"> <li> <a href=\"#search-parameters\">Set query string parameters</a>\n</li> <li> <a href=\"#more-observables\">Debounce search term input</a>\n</li> </ul>\n</li> <li><a href=\"#in-mem-web-api\">Appendix: the in-memory web api service</a></li> </ul> <p>We illustrate these topics with code that you can <live-example>run live</live-example>.</p> <h1 id=\"demos\">Demos</h1> <p>This chapter describes server communication with the help of the following demos</p> <ul> <li><a href=\"#http-client\">HTTP client: Tour of Heroes with Observables</a></li> <li><a href=\"#promises\">HTTP client: Tour of Heroes with Promises</a></li> <li><a href=\"#cors\">JSONP client: Wikipedia to fetch data from a service that does not support CORS</a></li> <li><a href=\"#more-observables\">JSONP client: Wikipedia using observable operators to reduce server calls</a></li> </ul> <p>These demos are orchestrated by the root <code>AppComponent</code></p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component }         from '@angular/core';\n\n// Add the RxJS Observable operators we need in this app.\nimport './rxjs-operators';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;hero-list&gt;&lt;/hero-list&gt;\n    &lt;hero-list-promise&gt;&lt;/hero-list-promise&gt;\n    &lt;my-wiki&gt;&lt;/my-wiki&gt;\n    &lt;my-wiki-smart&gt;&lt;/my-wiki-smart&gt;\n  `\n})\nexport class AppComponent { }\n</pre>\n<p>There is nothing remarkable here <em>except</em> for the import of RxJS operators.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">// Add the RxJS Observable operators we need in this app.\nimport './rxjs-operators';\n</pre>\n<p>We'll talk about that <a href=\"#rxjs\">below</a> when we're ready to explore observables.</p> <p>First, we have to configure our application to use server communication facilities.</p> <h1 id=\"providing-http-services\">Providing HTTP Services</h1> <p>We use the Angular <code>Http</code> client to communicate with a server using a familiar HTTP request/response protocol. The <code>Http</code> client is one of a family of services in the Angular HTTP library.</p> <div class=\"l-sub-section\">\n<p>SystemJS knows how to load services from the Angular HTTP library when we import from the <code>@angular/http</code> module because we registered that module name in the <code>system.config</code> file.</p> </div>\n<p>Before we can use the <code>Http</code> client , we'll have to register it as a service provider with the Dependency Injection system.</p> <div class=\"l-sub-section\">\n<p>Learn about providers in the <a href=\"dependency-injection\">Dependency Injection</a> chapter.</p> </div>\n<p>In this demo, we register providers by importing other NgModules to our root NgModule.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (v1)\">// app/app.module.ts (v1)\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule, JsonpModule } from '@angular/http';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    JsonpModule\n  ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>We begin by importing the symbols we need, most of them familiar by now. The newcomers are the <code>HttpModule</code> and the <code>JsonpModule</code> from the Angular HTTP library.</p> <p>We add these modules to the application by passing them to the <code>imports</code> array in our root NgModule.</p> <div class=\"l-sub-section\">\n<p>We need the HttpModule to make HTTP calls. We don't need the JsonpModule for plain HTTP. We will demonstrate JSONP support later in this chapter. We're loading its module now to save time.</p> </div>\n<h1 id=\"the-tour-of-heroes-_http_-client-demo\">The Tour of Heroes <em>HTTP</em> Client Demo</h1> <p>Our first demo is a mini-version of the <a href=\"../tutorial/index\">tutorial</a>'s \"Tour of Heroes\" (ToH) application. This version gets some heroes from the server, displays them in a list, lets us add new heroes, and saves them to the server. We use the Angular <code>Http</code> client to communicate via <code>XMLHttpRequest (XHR)</code>.</p> <p>It works like this.</p> <img src=\"https://angular.io/resources/images/devguide/server-communication/http-toh.gif\" alt=\"ToH mini app\" width=\"250\"><p>This demo has a single component, the <code>HeroListComponent</code>. Here's its template:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/toh/hero-list.component.html (template)\">&lt;!-- app/toh/hero-list.component.html (template) --&gt;\n\n&lt;h1&gt;Tour of Heroes ({{mode}})&lt;/h1&gt;\n&lt;h3&gt;Heroes:&lt;/h3&gt;\n&lt;ul&gt;\n  &lt;li *ngFor=\"let hero of heroes\"&gt;\n    {{hero.name}}\n  &lt;/li&gt;\n&lt;/ul&gt;\nNew hero name:\n&lt;input #newHeroName /&gt;\n&lt;button (click)=\"addHero(newHeroName.value); newHeroName.value=''\"&gt;\n  Add Hero\n&lt;/button&gt;\n&lt;div class=\"error\" *ngIf=\"errorMessage\"&gt;{{errorMessage}}&lt;/div&gt;\n</pre>\n<p>It presents the list of heroes with an <code>ngFor</code>. Below the list is an input box and an <em>Add Hero</em> button where we can enter the names of new heroes and add them to the database. We use a <a href=\"template-syntax#ref-vars\">template reference variable</a>, <code>newHeroName</code>, to access the value of the input box in the <code>(click)</code> event binding. When the user clicks the button, we pass that value to the component's <code>addHero</code> method and then clear it to make it ready for a new hero name.</p> <p>Below the button is an area for an error message.</p> <h2 id=\"oninit\">The <em>HeroListComponent</em> class</h2> <p>Here's the component class:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/toh/hero-list.component.ts (class)\">// app/toh/hero-list.component.ts (class)\n\nexport class HeroListComponent implements OnInit {\n  errorMessage: string;\n  heroes: Hero[];\n  mode = 'Observable';\n\n  constructor (private heroService: HeroService) {}\n\n  ngOnInit() { this.getHeroes(); }\n\n  getHeroes() {\n    this.heroService.getHeroes()\n                     .subscribe(\n                       heroes =&gt; this.heroes = heroes,\n                       error =&gt;  this.errorMessage = &lt;any&gt;error);\n  }\n\n  addHero (name: string) {\n    if (!name) { return; }\n    this.heroService.addHero(name)\n                     .subscribe(\n                       hero  =&gt; this.heroes.push(hero),\n                       error =&gt;  this.errorMessage = &lt;any&gt;error);\n  }\n}\n</pre>\n<p>Angular <a href=\"dependency-injection\">injects</a> a <code>HeroService</code> into the constructor and the component calls that service to fetch and save data.</p> <p>The component <strong>does not talk directly to the Angular <code>Http</code> client</strong>! The component doesn't know or care how we get the data. It delegates to the <code>HeroService</code>.</p> <p>This is a golden rule: <strong>always delegate data access to a supporting service class</strong>.</p> <p>Although <em>at runtime</em> the component requests heroes immediately after creation, we do <strong>not</strong> call the service's <code>get</code> method in the component's constructor. We call it inside the <code>ngOnInit</code> <a href=\"lifecycle-hooks\">lifecycle hook</a> instead and count on Angular to call <code>ngOnInit</code> when it instantiates this component. </p> <div class=\"l-sub-section\">\n<p>This is a <em>best practice</em>. Components are easier to test and debug when their constructors are simple and all real work (especially calling a remote server) is handled in a separate method.</p> </div>\n<p>The service's <code>getHeroes()</code> and <code>addHero()</code> methods return an <code>Observable</code> of hero data that the Angular <code>Http</code> client fetched from the server.</p> <p><em>Observables</em> are a big topic, beyond the scope of this chapter. But we need to know a little about them to appreciate what is going on here.</p> <p>We should think of an <code>Observable</code> as a stream of events published by some source. We listen for events in this stream by <strong><em>subscribing</em></strong> to the <code>Observable</code>. In these subscriptions we specify the actions to take when the web request produces a success event (with the hero data in the event payload) or a fail event (with the error in the payload).</p> <p>With our basic intuitions about the component squared away, we're ready to look inside the <code>HeroService</code>.</p> <h2 id=\"HeroService\">Fetch data with the <strong>HeroService</strong>\n</h2> <p>In many of our previous samples we faked the interaction with the server by returning mock heroes in a service like this one:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Injectable } from '@angular/core';\n\nimport { Hero } from './hero';\nimport { HEROES } from './mock-heroes';\n\n@Injectable()\nexport class HeroService {\n  getHeroes() {\n    return Promise.resolve(HEROES);\n  }\n}\n</pre>\n<p>In this chapter, we revise that <code>HeroService</code> to get the heroes from the server using the Angular <code>Http</code> client service: </p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (revised)\">// app/toh/hero.service.ts (revised)\n\nimport { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\n\nimport { Hero }           from './hero';\nimport { Observable }     from 'rxjs/Observable';\n\n@Injectable()\nexport class HeroService {\n  constructor (private http: Http) {}\n\n  private heroesUrl = 'app/heroes';  // URL to web API\n\n  getHeroes (): Observable&lt;Hero[]&gt; {\n    return this.http.get(this.heroesUrl)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n  private extractData(res: Response) {\n    let body = res.json();\n    return body.data || { };\n  }\n\n  private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Observable.throw(errMsg);\n  }\n}\n</pre>\n<p>Notice that the Angular <code>Http</code> client service is <a href=\"dependency-injection\">injected</a> into the <code>HeroService</code> constructor.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor (private http: Http) {}\n</pre>\n<p>Look closely at how we call <code>http.get</code></p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (getHeroes)\">// app/toh/hero.service.ts (getHeroes)\n\ngetHeroes (): Observable&lt;Hero[]&gt; {\n  return this.http.get(this.heroesUrl)\n                  .map(this.extractData)\n                  .catch(this.handleError);\n}\n</pre>\n<p>We pass the resource URL to <code>get</code> and it calls the server which should return heroes.</p> <div class=\"l-sub-section\">\n<p>It <em>will</em> return heroes once we've set up the <a href=\"#in-mem-web-api\">in-memory web api</a> described in the appendix below. Alternatively, we can (temporarily) target a JSON file by changing the endpoint URL:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private heroesUrl = 'app/heroes.json'; // URL to JSON file\n</pre>\n</div>\n<p> The return value may surprise us. Many of us who are familiar with asynchronous methods in modern JavaScript would expect the <code id=\"rxjs\">get</code> method to return a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">promise</a>. We'd expect to chain a call to <code>then()</code> and extract the heroes. Instead we're calling a <code>map()</code> method. Clearly this is not a promise.</p> <p>In fact, the <code>http.get</code> method returns an <strong>Observable</strong> of HTTP Responses (<code>Observable&lt;Response&gt;</code>) from the RxJS library and <code>map</code> is one of the RxJS <em>operators</em>.</p> <h1 id=\"rxjs-library\">RxJS Library</h1> <p><a href=\"https://github.com/ReactiveX/RxJS\">RxJS</a> (\"Reactive Extensions\") is a 3rd party library, endorsed by Angular, that implements the <a href=\"https://www.youtube.com/watch?v=UHI0AzD_WfY\" title=\"Rob Wormald on observables\"><em>asynchronous observable</em></a> pattern.</p> <p>All of our Developer Guide samples have installed the RxJS npm package and loaded via <code>system.js</code> because observables are used widely in Angular applications. We certainly need it now when working with the HTTP client. And we must take a critical extra step to make RxJS observables usable.</p> <h3 id=\"enable-rxjs-operators\">Enable RxJS Operators</h3> <p>The RxJS library is quite large. Size matters when we build a production application and deploy it to mobile devices. We should include only those features that we actually need.</p> <p>Accordingly, Angular exposes a stripped down version of <code>Observable</code> in the <code>rxjs/Observable</code> module, a version that lacks most of the operators including some we'd like to use here such as the <code>map</code> method we called above in <code>getHeroes</code>.</p> <p>It's up to us to add the operators we need. </p> <p>We could add <em>every</em> RxJS operators with a single import statement. While that is the easiest thing to do, we'd pay a penalty in extended launch time and application size because the full library is so big. We only use a few operators in our app.</p> <p>Instead, we'll import each <code>Observable</code> operator and static class method, one-by-one, until we have a custom <em>Observable</em> implementation tuned precisely to our requirements. We'll put the <code>import</code> statements in one <code>app/rxjs-operators.ts</code> file.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/rxjs-operators.ts\">// app/rxjs-operators.ts\n\n// import 'rxjs/Rx'; // adds ALL RxJS statics &amp; operators to Observable\n\n// See node_module/rxjs/Rxjs.js\n// Import just the rxjs statics and operators we need for THIS app.\n\n// Statics\nimport 'rxjs/add/observable/throw';\n\n// Operators\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\n</pre>\n<p>If we forget an operator, the TypeScript compiler will warn that it's missing and we'll update this file.</p> <div class=\"l-sub-section\">\n<p>We don't need <em>all</em> of these particular operators in the <code>HeroService</code> — just <code>map</code>, <code>catch</code> and <code>throw</code>. We'll need the other operators later, in a <em>Wiki</em> example <a href=\"#more-observables\">below</a>.</p> </div>\n<p>Finally, we import <code>rxjs-operator</code><em>itself</em> in our <code>app.component.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (import rxjs)\">// app/app.component.ts (import rxjs)\n\n// Add the RxJS Observable operators we need in this app.\nimport './rxjs-operators';\n</pre>\n<p>Let's return to our study of the <code>HeroService</code>.</p> <l-main-section></l-main-section><h2 id=\"extract-data\">Process the response object</h2> <p>Remember that our <code>getHeroes()</code> method mapped the <code>http.get</code> response object to heroes with an <code>extractData</code> helper method:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (excerpt)\">// app/toh/hero.service.ts (excerpt)\n\nprivate extractData(res: Response) {\n  let body = res.json();\n  return body.data || { };\n}\n</pre>\n<p>The <code>response</code> object does not hold our data in a form we can use directly. To make it useful in our application we must parse the response data into a JSON object</p> <h4 id=\"parse-to-json\">Parse to JSON</h4> <p>The response data are in JSON string form. We must parse that string into JavaScript objects which we do by calling <code>response.json()</code>.</p> <div class=\"l-sub-section\">\n<p>This is not Angular's own design. The Angular HTTP client follows the ES2015 specification for the <a href=\"https://fetch.spec.whatwg.org/#response-class\">response object</a> returned by the <code>Fetch</code> function. That spec defines a <code>json()</code> method that parses the response body into a JavaScript object.</p> </div>\n<div class=\"l-sub-section\">\n<p>We shouldn't expect the decoded JSON to be the heroes array directly. The server we're calling always wraps JSON results in an object with a <code>data</code> property. We have to unwrap it to get the heroes. This is conventional web api behavior, driven by <a href=\"https://www.owasp.org/index.php/OWASP_AJAX_Security_Guidelines#Always_return_JSON_with_an_Object_on_the_outside\">security concerns</a>.</p> </div>\n<div class=\"alert is-important\">\n<p>Make no assumptions about the server API. Not all servers return an object with a <code>data</code> property.</p> </div>\n<h3 id=\"do-not-return-the-response-object\">Do not return the response object</h3> <p>Our <code>getHeroes()</code> could have returned the HTTP response. Bad idea! The point of a data service is to hide the server interaction details from consumers. The component that calls the <code>HeroService</code> wants heroes. It has no interest in what we do to get them. It doesn't care where they come from. And it certainly doesn't want to deal with a response object.</p> <div class=\"callout is-important\">\n<header>HTTP GET is delayed </header><p>The <code>http.get</code> does <strong>not send the request just yet!</strong> This observable is <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/creating.md#cold-vs-hot-observables\"><em>cold</em></a> which means the request won't go out until something <em>subscribes</em> to the observable. That <em>something</em> is the <a href=\"#subscribe\">HeroListComponent</a>.</p> </div>\n<h3 id=\"error-handling\">Always handle errors</h3> <p>Whenever we deal with I/O we must be prepared for something to go wrong as it surely will. We should catch errors in the <code>HeroService</code> and do something with them. We may also pass an error message back to the component for presentation to the user but only if we can say something the user can understand and act upon.</p> <p>In this simple app we provide rudimentary error handling in both the service and the component.</p> <p>The eagle-eyed reader may have spotted our use of the <code>catch</code> operator in conjunction with a <code>handleError</code> method. We haven't discussed so far how that actually works. </p> <p>We use the Observable <code>catch</code> operator on the service level. It takes an error handling function with an error object as the argument. Our service handler, <code>handleError</code>, logs the response to the console, transforms the error into a user-friendly message, and returns the message in a new, failed observable via <code>Observable.throw</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (excerpt)\">// app/toh/hero.service.ts (excerpt)\n\ngetHeroes (): Observable&lt;Hero[]&gt; {\n  return this.http.get(this.heroesUrl)\n                  .map(this.extractData)\n                  .catch(this.handleError);\n}\nprivate handleError (error: any) {\n  // In a real world app, we might use a remote logging infrastructure\n  // We'd also dig deeper into the error to get a better message\n  let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n  console.error(errMsg); // log to console instead\n  return Observable.throw(errMsg);\n}\n</pre>\n<h4 id=\"subscribe\">\n<b>HeroListComponent</b> error handling</h4>\n<p>Back in the <code>HeroListComponent</code>, where we called <code>heroService.getHeroes()</code>, we supply the <code>subscribe</code> function with a second function parameter to handle the error message. It sets an <code>errorMessage</code> variable which we've bound conditionally in the <code>HeroListComponent</code> template.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero-list.component.ts (getHeroes)\">// app/toh/hero-list.component.ts (getHeroes)\n\ngetHeroes() {\n  this.heroService.getHeroes()\n                   .subscribe(\n                     heroes =&gt; this.heroes = heroes,\n                     error =&gt;  this.errorMessage = &lt;any&gt;error);\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>Want to see it fail? Reset the api endpoint in the <code>HeroService</code> to a bad value. Remember to restore it!</p> </div>\n <h2 id=\"update\">Send data to the server</h2> <p>So far we've seen how to retrieve data from a remote location using an HTTP service. Let's add the ability to create new heroes and save them in the backend.</p> <p>We'll create an easy method for the <code>HeroListComponent</code> to call, an <code>addHero()</code> method that takes just the name of a new hero:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">addHero (name: string): Observable&lt;Hero&gt; {\n</pre>\n<p>To implement it, we need to know some details about the server's api for creating heroes.</p> <p><a href=\"#server\">Our data server</a> follows typical REST guidelines. It expects a <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html#sec9.5\"><code>POST</code></a> request at the same endpoint where we <code>GET</code> heroes. It expects the new hero data to arrive in the body of the request, structured like a <code>Hero</code> entity but without the <code>id</code> property. The body of the request should look like this:</p> <pre format=\".\" language=\"javascript\" data-language=\"javascript\">{ \"name\": \"Windstorm\" }</pre>\n<p>The server will generate the <code>id</code> and return the entire <code>JSON</code> representation of the new hero including its generated id. The hero arrives tucked inside a response object with its own <code>data</code> property.</p> <p>Now that we know how the API works, we implement <code>addHero()</code>like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (additional imports)\">// app/toh/hero.service.ts (additional imports)\n\nimport { Headers, RequestOptions } from '@angular/http';\n</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero.service.ts (addHero)\">// app/toh/hero.service.ts (addHero)\n\n  addHero (name: string): Observable&lt;Hero&gt; {\n    let body = JSON.stringify({ name });\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.post(this.heroesUrl, body, options)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n</pre>\n<h3 id=\"headers\">Headers</h3> <p>The <code>Content-Type</code> header allows us to inform the server that the body will represent JSON.</p> <p><a href=\"../api/http/index/headers-class\">Headers</a> are one of the <a href=\"../api/http/index/requestoptions-class\">RequestOptions</a>. Compose the options object and pass it in as the <em>third</em> parameter of the <code>post</code> method, as shown above.</p> <h3 id=\"body\">Body</h3> <p>Despite the content type being specified as JSON, the POST body must actually be a <em>string</em>. Hence, we explicitly encode the JSON hero content before passing it in as the body argument.</p> <div class=\"l-sub-section\">\n<p>We may be able to skip the <code>JSON.stringify</code> step in the near future.</p> </div>\n<h3 id=\"json-results\">JSON results</h3> <p>As with <code>getHeroes()</code>, we <a href=\"#extract-data\">extract the data</a> from the response using the <code>extractData()</code> helper.</p> <p>Back in the <code>HeroListComponent</code>, we see that <em>its</em> <code>addHero()</code> method subscribes to the observable returned by the <em>service's</em> <code>addHero()</code> method. When the data, arrive it pushes the new hero object into its <code>heroes</code> array for presentation to the user.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/toh/hero-list.component.ts (addHero)\">// app/toh/hero-list.component.ts (addHero)\n\naddHero (name: string) {\n  if (!name) { return; }\n  this.heroService.addHero(name)\n                   .subscribe(\n                     hero  =&gt; this.heroes.push(hero),\n                     error =&gt;  this.errorMessage = &lt;any&gt;error);\n}\n</pre>\n<h2 id=\"promises\">Fall back to Promises</h2>\n<p>Although the Angular <code>http</code> client API returns an <code>Observable&lt;Response&gt;</code> we can turn it into a <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\">Promise</a> if we prefer. It's easy to do and a promise-based version looks much like the observable-based version in simple cases.</p> <div class=\"l-sub-section\">\n<p>While promises may be more familiar, observables have many advantages. Don't rush to promises until you give observables a chance.</p> </div>\n<p>Let's rewrite the <code>HeroService</code> using promises , highlighting just the parts that are different.</p> <pre language=\"ts\" name=\"app/toh/hero.service.promise.ts (promise-based)\" format=\"linenums\" data-language=\"typescript\">// app/toh/hero.service.promise.ts (promise-based)\n\ngetHeroes (): Promise&lt;Hero[]&gt; {\n  return this.http.get(this.heroesUrl)\n                  .toPromise()\n                  .then(this.extractData)\n                  .catch(this.handleError);\n}\n\naddHero (name: string): Promise&lt;Hero&gt; {\n  let body = JSON.stringify({ name });\n  let headers = new Headers({ 'Content-Type': 'application/json' });\n  let options = new RequestOptions({ headers: headers });\n\n  return this.http.post(this.heroesUrl, body, options)\n             .toPromise()\n             .then(this.extractData)\n             .catch(this.handleError);\n}\n\nprivate extractData(res: Response) {\n  let body = res.json();\n  return body.data || { };\n}\n\nprivate handleError (error: any) {\n  // In a real world app, we might use a remote logging infrastructure\n  // We'd also dig deeper into the error to get a better message\n  let errMsg = (error.message) ? error.message :\n    error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n  console.error(errMsg); // log to console instead\n  return Promise.reject(errMsg);\n}\n</pre>\n<pre language=\"ts\" name=\"app/toh/hero.service.ts (observable-based)\" format=\"linenums\" data-language=\"typescript\">// app/toh/hero.service.ts (observable-based)\n\n  getHeroes (): Observable&lt;Hero[]&gt; {\n    return this.http.get(this.heroesUrl)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  addHero (name: string): Observable&lt;Hero&gt; {\n    let body = JSON.stringify({ name });\n    let headers = new Headers({ 'Content-Type': 'application/json' });\n    let options = new RequestOptions({ headers: headers });\n\n    return this.http.post(this.heroesUrl, body, options)\n                    .map(this.extractData)\n                    .catch(this.handleError);\n  }\n\n  private extractData(res: Response) {\n    let body = res.json();\n    return body.data || { };\n  }\n\n  private handleError (error: any) {\n    // In a real world app, we might use a remote logging infrastructure\n    // We'd also dig deeper into the error to get a better message\n    let errMsg = (error.message) ? error.message :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg); // log to console instead\n    return Observable.throw(errMsg);\n  }\n</pre>\n<p>Converting from an observable to a promise is as simple as calling <code>toPromise(success, fail)</code>.</p> <p>We move the observable's <code>map</code> callback to the first <em>success</em> parameter and its <code>catch</code> callback to the second <em>fail</em> parameter and we're done! Or we can follow the promise <code>then.catch</code> pattern as we do in the second <code>addHero</code> example.</p> <p>Our <code>errorHandler</code> forwards an error message as a failed promise instead of a failed Observable.</p> <p>The diagnostic <em>log to console</em> is just one more <code>then</code> in the promise chain.</p> <p>We have to adjust the calling component to expect a <code>Promise</code> instead of an <code>Observable</code>.</p> <pre language=\"ts\" name=\"app/toh/hero-list.component.promise.ts (promise-based)\" format=\"linenums\" data-language=\"typescript\">// app/toh/hero-list.component.promise.ts (promise-based)\n\ngetHeroes() {\n  this.heroService.getHeroes()\n                   .then(\n                     heroes =&gt; this.heroes = heroes,\n                     error =&gt;  this.errorMessage = &lt;any&gt;error);\n}\n\naddHero (name: string) {\n  if (!name) { return; }\n  this.heroService.addHero(name)\n                   .then(\n                     hero  =&gt; this.heroes.push(hero),\n                     error =&gt;  this.errorMessage = &lt;any&gt;error);\n}\n</pre>\n<pre language=\"ts\" name=\"app/toh/hero-list.component.ts (observable-based)\" format=\"linenums\" data-language=\"typescript\">// app/toh/hero-list.component.ts (observable-based)\n\n  getHeroes() {\n    this.heroService.getHeroes()\n                     .subscribe(\n                       heroes =&gt; this.heroes = heroes,\n                       error =&gt;  this.errorMessage = &lt;any&gt;error);\n  }\n\n  addHero (name: string) {\n    if (!name) { return; }\n    this.heroService.addHero(name)\n                     .subscribe(\n                       hero  =&gt; this.heroes.push(hero),\n                       error =&gt;  this.errorMessage = &lt;any&gt;error);\n  }\n</pre>\n<p>The only obvious difference is that we call <code>then</code> on the returned promise instead of <code>subscribe</code>. We give both methods the same functional arguments. </p> <div class=\"l-sub-section\">\n<p>The less obvious but critical difference is that these two methods return very different results!</p> <p>The promise-based <code>then</code> returns another promise. We can keep chaining more <code>then</code> and <code>catch</code> calls, getting a new promise each time.</p> <p>The <code>subscribe</code> method returns a <code>Subscription</code>. A <code>Subscription</code> is not another <code>Observable</code>. It's the end of the line for observables. We can't call <code>map</code> on it or call <code>subscribe</code> again. The <code>Subscription</code> object has a different purpose, signified by its primary method, <code>unsubscribe</code>.</p> <p>Learn more about observables to understand the implications and consequences of subscriptions.</p> </div>\n<h2 id=\"cors\">Cross-origin requests: Wikipedia example</h2>\n<p>We just learned how to make <code>XMLHttpRequests</code> using the Angular <code>Http</code> service. This is the most common approach for server communication. It doesn't work in all scenarios.</p> <p>For security reasons, web browsers block <code>XHR</code> calls to a remote server whose origin is different from the origin of the web page. The <em>origin</em> is the combination of URI scheme, hostname and port number. This is called the <a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">Same-origin Policy</a>.</p> <div class=\"l-sub-section\">\n<p>Modern browsers do allow <code>XHR</code> requests to servers from a different origin if the server supports the <a href=\"https://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">CORS</a> protocol. If the server requires user credentials, we'll enable them in the <a href=\"#headers\">request headers</a>.</p> </div>\n<p>Some servers do not support CORS but do support an older, read-only alternative called <a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a>. Wikipedia is one such server.</p> <div class=\"l-sub-section\">\n<p>This <a href=\"http://stackoverflow.com/questions/2067472/what-is-jsonp-all-about/2067584#2067584\">StackOverflow answer</a> covers many details of JSONP.</p> </div>\n<h3 id=\"search-wikipedia\">Search wikipedia</h3> <p>Let's build a simple search that shows suggestions from wikipedia as we type in a text box.</p> <img src=\"https://angular.io/resources/images/devguide/server-communication/wiki-1.gif\" alt=\"Wikipedia search app (v.1)\" width=\"250\"><p>Wikipedia offers a modern <code>CORS</code> API and a legacy <code>JSONP</code> search API. Let's use the latter for this example. The Angular <code>Jsonp</code> service both extends the <code>Http</code> service for JSONP and restricts us to <code>GET</code> requests. All other HTTP methods throw an error because JSONP is a read-only facility. </p> <p>As always, we wrap our interaction with an Angular data access client service inside a dedicated service, here called <code>WikipediaService</code>.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/wiki/wikipedia.service.ts\">// app/wiki/wikipedia.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Jsonp, URLSearchParams } from '@angular/http';\n\n@Injectable()\nexport class WikipediaService {\n  constructor(private jsonp: Jsonp) {}\n\n  search (term: string) {\n\n    let wikiUrl = 'http://en.wikipedia.org/w/api.php';\n\n    let params = new URLSearchParams();\n    params.set('search', term); // the user's search value\n    params.set('action', 'opensearch');\n    params.set('format', 'json');\n    params.set('callback', 'JSONP_CALLBACK');\n\n    // TODO: Add error handling\n    return this.jsonp\n               .get(wikiUrl, { search: params })\n               .map(request =&gt; &lt;string[]&gt; request.json()[1]);\n  }\n}\n</pre>\n<p>The constructor expects Angular to inject its <code>jsonp</code> service. We made that service available by importing the <code>JsonpModule</code> into our root NgModule.</p> <h3 id=\"query-parameters\">Search parameters</h3> <p>The <a href=\"https://www.mediawiki.org/wiki/API:Opensearch\">Wikipedia 'opensearch' API</a> expects four parameters (key/value pairs) to arrive in the request URL's query string. The keys are <code>search</code>, <code>action</code>, <code>format</code>, and <code>callback</code>. The value of the <code>search</code> key is the user-supplied search term to find in Wikipedia. The other three are the fixed values \"opensearch\", \"json\", and \"JSONP_CALLBACK\" respectively.</p> <div class=\"l-sub-section\">\n<p>The <code>JSONP</code> technique requires that we pass a callback function name to the server in the query string: <code>callback=JSONP_CALLBACK</code>. The server uses that name to build a JavaScript wrapper function in its response which Angular ultimately calls to extract the data. All of this happens under the hood.</p> </div>\n<p>If we're looking for articles with the word \"Angular\", we could construct the query string by hand and call <code>jsonp</code> like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">let queryString =\n  `?search=${term}&amp;action=opensearch&amp;format=json&amp;callback=JSONP_CALLBACK`;\n\nreturn this.jsonp\n           .get(wikiUrl + queryString)\n           .map(request =&gt; &lt;string[]&gt; request.json()[1]);\n</pre>\n<p>In more parameterized examples we might prefer to build the query string with the Angular <code>URLSearchParams</code> helper as shown here:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/wiki/wikipedia.service.ts (search parameters)\">// app/wiki/wikipedia.service.ts (search parameters)\n\nlet params = new URLSearchParams();\nparams.set('search', term); // the user's search value\nparams.set('action', 'opensearch');\nparams.set('format', 'json');\nparams.set('callback', 'JSONP_CALLBACK');\n</pre>\n<p>This time we call <code>jsonp</code> with <em>two</em> arguments: the <code>wikiUrl</code> and an options object whose <code>search</code> property is the <code>params</code> object.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/wiki/wikipedia.service.ts (call jsonp)\">// app/wiki/wikipedia.service.ts (call jsonp)\n\n// TODO: Add error handling\nreturn this.jsonp\n           .get(wikiUrl, { search: params })\n           .map(request =&gt; &lt;string[]&gt; request.json()[1]);\n</pre>\n<p><code>Jsonp</code> flattens the <code>params</code> object into the same query string we saw earlier before putting the request on the wire.</p> <h3 id=\"wikicomponent\">The WikiComponent</h3> <p>Now that we have a service that can query the Wikipedia API, we turn to the component that takes user input and displays search results.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/wiki/wiki.component.ts\">// app/wiki/wiki.component.ts\n\nimport { Component }        from '@angular/core';\nimport { Observable }       from 'rxjs/Observable';\n\nimport { WikipediaService } from './wikipedia.service';\n\n@Component({\n  selector: 'my-wiki',\n  template: `\n    &lt;h1&gt;Wikipedia Demo&lt;/h1&gt;\n    &lt;p&gt;&lt;i&gt;Fetches after each keystroke&lt;/i&gt;&lt;/p&gt;\n\n    &lt;input #term (keyup)=\"search(term.value)\"/&gt;\n\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let item of items | async\"&gt;{{item}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  providers: [WikipediaService]\n})\nexport class WikiComponent {\n  items: Observable&lt;string[]&gt;;\n\n  constructor (private wikipediaService: WikipediaService) {}\n\n  search (term: string) {\n    this.items = this.wikipediaService.search(term);\n  }\n}\n</pre>\n<p>The component presents an <code>&lt;input&gt;</code> element <em>search box</em> to gather search terms from the user. and calls a <code>search(term)</code> method after each <code>keyup</code> event.</p> <p>The <code>search(term)</code> method delegates to our <code>WikipediaService</code> which returns an observable array of string results (<code>Observable&lt;string[]&gt;</code>). Instead of subscribing to the observable inside the component as we did in the <code>HeroListComponent</code>, we forward the observable result to the template (via <code>items</code>) where the <a href=\"pipes#async-pipe\">async pipe</a> in the <code>ngFor</code> handles the subscription.</p> <div class=\"l-sub-section\">\n<p>We often use the <a href=\"pipes#async-pipe\">async pipe</a> in read-only components where the component has no need to interact with the data. We couldn't use the pipe in the <code>HeroListComponent</code> because the \"add hero\" feature pushes newly created heroes into the list.</p> </div>\n<h2 id=\"our-wasteful-app\">Our wasteful app</h2> <p>Our wikipedia search makes too many calls to the server. It is inefficient and potentially expensive on mobile devices with limited data plans.</p> <h3 id=\"1-wait-for-the-user-to-stop-typing\">1. Wait for the user to stop typing</h3> <p>At the moment we call the server after every key stroke. The app should only make requests when the user <em>stops typing</em> . Here's how it <em>should</em> work — and <em>will</em> work — when we're done refactoring:</p> <img src=\"https://angular.io/resources/images/devguide/server-communication/wiki-2.gif\" alt=\"Wikipedia search app (v.2)\" width=\"250\"><h3 id=\"2-search-when-the-search-term-changes\">2. Search when the search term changes</h3> <p>Suppose the user enters the word <em>angular</em> in the search box and pauses for a while. The application issues a search request for <em>Angular</em>.</p> <p>Then the user backspaces over the last three letters, <em>lar</em>, and immediately re-types <em>lar</em> before pausing once more. The search term is still \"angular\". The app shouldn't make another request.</p> <h3 id=\"3-cope-with-out-of-order-responses\">3. Cope with out-of-order responses</h3> <p>The user enters <em>angular</em>, pauses, clears the search box, and enters <em>http</em>. The application issues two search requests, one for <em>angular</em> and one for <em>http</em>. </p> <p>Which response will arrive first? We can't be sure. A load balancer could dispatch the requests to two different servers with different response times. The results from the first <em>angular</em> request might arrive after the later <em>http</em> results. The user will be confused if we display the <em>angular</em> results to the <em>http</em> query.</p> <p>When there are multiple requests in-flight, the app should present the responses in the original request order. That won't happen if <em>angular</em> results arrive last.</p>  <h2 id=\"more-fun-with-observables\">More fun with Observables</h2> <p>We can address these problems and improve our app with the help of some nifty observable operators. </p> <p>We could make our changes to the <code>WikipediaService</code>. But we sense that our concerns are driven by the user experience so we update the component class instead.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/wiki/wiki-smart.component.ts\">// app/wiki/wiki-smart.component.ts\n\nimport { Component }        from '@angular/core';\nimport { Observable }       from 'rxjs/Observable';\nimport { Subject }          from 'rxjs/Subject';\n\nimport { WikipediaService } from './wikipedia.service';\n\n@Component({\n  selector: 'my-wiki-smart',\n  template: `\n    &lt;h1&gt;Smarter Wikipedia Demo&lt;/h1&gt;\n    &lt;p&gt;&lt;i&gt;Fetches when typing stops&lt;/i&gt;&lt;/p&gt;\n\n    &lt;input #term (keyup)=\"search(term.value)\"/&gt;\n\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let item of items | async\"&gt;{{item}}&lt;/li&gt;\n    &lt;/ul&gt;\n  `,\n  providers: [WikipediaService]\n})\nexport class WikiSmartComponent {\n\n  constructor (private wikipediaService: WikipediaService) { }\n\n  private searchTermStream = new Subject&lt;string&gt;();\n\n  search(term: string) { this.searchTermStream.next(term); }\n\n  items: Observable&lt;string[]&gt; = this.searchTermStream\n    .debounceTime(300)\n    .distinctUntilChanged()\n    .switchMap((term: string) =&gt; this.wikipediaService.search(term));\n}\n</pre>\n<p>We made no changes to the template or metadata, confining them all to the component class. Let's review those changes.</p> <h3 id=\"create-a-stream-of-search-terms\">Create a stream of search terms</h3> <p>We're binding to the search box <code>keyup</code> event and calling the component's <code>search</code> method after each keystroke.</p> <p>We turn these events into an observable stream of search terms using a <code>Subject</code> which we import from the RxJS observable library:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Subject }          from 'rxjs/Subject';\n</pre>\n<p>Each search term is a string, so we create a new <code>Subject</code> of type <code>string</code> called <code>searchTermStream</code>. After every keystroke, the <code>search</code> method adds the search box value to that stream via the subject's <code>next</code> method.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private searchTermStream = new Subject&lt;string&gt;();\n\nsearch(term: string) { this.searchTermStream.next(term); }\n</pre>\n<h3 id=\"listen-for-search-terms\">Listen for search terms</h3> <p>Earlier, we passed each search term directly to the service and bound the template to the service results. Now we listen to the <em>stream of terms</em>, manipulating the stream before it reaches the <code>WikipediaService</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">items: Observable&lt;string[]&gt; = this.searchTermStream\n  .debounceTime(300)\n  .distinctUntilChanged()\n  .switchMap((term: string) =&gt; this.wikipediaService.search(term));\n</pre>\n<p>We wait for the user to stop typing for at least 300 milliseconds (<a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/debounce.md\">debounceTime</a>). Only changed search values make it through to the service (<a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/distinctuntilchanged.md\">distinctUntilChanged</a>).</p> <p>The <code>WikipediaService</code> returns a separate observable of string arrays (<code>Observable&lt;string[]&gt;</code>) for each request. We could have multiple requests <em>in flight</em>, all awaiting the server's reply, which means multiple <em>observables-of-strings</em> could arrive at any moment in any order.</p> <p>The <a href=\"https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/operators/flatmaplatest.md\">switchMap</a> (formerly known as <code>flatMapLatest</code>) returns a new observable that combines these <code>WikipediaService</code> observables, re-arranges them in their original request order, and delivers to subscribers only the most recent search results. </p> <p>The displayed list of search results stays in sync with the user's sequence of search terms.</p> <div class=\"l-sub-section\">\n<p>We added the <code>debounceTime</code>, <code>distinctUntilChanged</code>, and <code>switchMap</code> operators to the RxJS <code>Observable</code> class in <code>rxjs-operators</code> as <a href=\"#rxjs\">described above</a></p> </div>\n<h2 id=\"in-mem-web-api\">Appendix: Tour of Heroes in-memory server</h2> <p>If we only cared to retrieve data, we could tell Angular to get the heroes from a <code>heroes.json</code> file like this one:</p> <pre language=\"json\" format=\".\" data-language=\"json\" name=\"app/heroes.json\">// app/heroes.json\n\n{\n  \"data\": [\n    { \"id\": \"1\", \"name\": \"Windstorm\" },\n    { \"id\": \"2\", \"name\": \"Bombasto\" },\n    { \"id\": \"3\", \"name\": \"Magneta\" },\n    { \"id\": \"4\", \"name\": \"Tornado\" }\n  ]\n}\n</pre>\n<div class=\"l-sub-section\">\n<p>We wrap the heroes array in an object with a <code>data</code> property for the same reason that a data server does: to mitigate the <a href=\"http://stackoverflow.com/questions/3503102/what-are-top-level-json-arrays-and-why-are-they-a-security-risk\">security risk</a> posed by top-level JSON arrays. </p> </div>\n<p>We'd set the endpoint to the JSON file like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private heroesUrl = 'app/heroes.json'; // URL to JSON file\n</pre>\n<p>The <em>get heroes</em> scenario would work. But we want to <em>save</em> data too. We can't save changes to a JSON file. We need a web API server. We didn't want the hassle of setting up and maintaining a real server for this chapter. So we turned to an <em>in-memory web API simulator</em> instead.</p> <div class=\"l-sub-section\">\n<p>The in-memory web api is not part of the Angular core. It's an optional service in its own <code>angular2-in-memory-web-api</code> library that we installed with npm (see <code>package.json</code>) and registered for module loading by SystemJS (see <code>systemjs.config.js</code>)</p> </div>\n<p>The in-memory web API gets its data from a custom application class with a <code>createDb()</code> method that returns a map whose keys are collection names and whose values are arrays of objects in those collections.</p> <p>Here's the class we created for this sample based on the JSON data:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/hero-data.ts\">// app/hero-data.ts\n\nexport class HeroData {\n  createDb() {\n    let heroes = [\n      { id: '1', name: 'Windstorm' },\n      { id: '2', name: 'Bombasto' },\n      { id: '3', name: 'Magneta' },\n      { id: '4', name: 'Tornado' }\n    ];\n    return {heroes};\n  }\n}\n</pre>\n<p>Ensure that the <code>HeroService</code> endpoint refers to the web API:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">private heroesUrl = 'app/heroes';  // URL to web API\n</pre>\n<p>Finally, we need to redirect client HTTP requests to the in-memory web API.</p> <p>This redirection is easy to configure because Angular's <code>http</code> service delegates the client/server communication tasks to a helper service called the <code>XHRBackend</code>. </p> <p>To enable our server simulation, we replace the default <code>XHRBackend</code> service with the in-memory web API service using standard Angular provider registration techniques. We initialize the in-memory web API with <em>seed data</em> from the mock hero dataset at the same time.</p> <p>Here is the revised (and final) version of <span ngio-ex>app/app.module.ts&gt;</span> demonstrating these steps.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.module.ts (excerpt)\">// app/app.module.ts (excerpt)\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule, JsonpModule, XHRBackend } from '@angular/http';\n\nimport { InMemoryBackendService, SEED_DATA } from 'angular2-in-memory-web-api';\nimport { HeroData } from './hero-data';\nimport { AppComponent } from './app.component';\n\nimport { HeroListComponent }        from './toh/hero-list.component';\nimport { HeroListPromiseComponent } from './toh/hero-list.component.promise';\n\nimport { WikiComponent }      from './wiki/wiki.component';\nimport { WikiSmartComponent } from './wiki/wiki-smart.component';\n\n@NgModule({\n  imports: [\n    BrowserModule,\n    FormsModule,\n    HttpModule,\n    JsonpModule\n  ],\n  providers: [\n    { provide: XHRBackend, useClass: InMemoryBackendService }, // in-mem server\n    { provide: SEED_DATA,  useClass: HeroData }                // in-mem server data\n  ],\n  declarations: [\n    AppComponent,\n    HeroListComponent,\n    HeroListPromiseComponent,\n    WikiComponent,\n    WikiSmartComponent\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>See the full source code in the <live-example></live-example>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/server-communication.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/server-communication.html</a>\n  </p>\n</div>\n","cookbook/component-relative-paths":"<h1 class=\"hero-title text-display-1 \">Component-relative Paths</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Use relative URLs for component templates and styles.</p></div>\n<h2 id=\"write-component-relative-urls-to-component-templates-and-style-files\">Write <em>Component-Relative</em> URLs to component templates and style files</h2> <p>Our components often refer to external template and style files. We identify those files with a URL in the <code>templateUrl</code> and <code>styleUrls</code> properties of the <code>@Component</code> metadata as seen here:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'absolute-path',\n  templateUrl: 'app/some.component.html',\n  styleUrls:  ['app/some.component.css']\n})\n</pre>\n<p>By default, we <em>must</em> specify the full path back to the application root. We call this an <strong><em>absolute path</em></strong> because it is <em>absolute</em> with respect to the application root.</p> <p>There are two problems with an <em>absolute path</em>:</p> <ol> <li>\n<p>We have to remember the full path back to the application root.</p> </li> <li>\n<p>We have to update the URL when we move the component around in the application files structure.</p> </li> </ol> <p>It would be much easier to write and maintain our application components if we could specify template and style locations <em>relative</em> to their component class file.</p> <p><em>We can!</em></p> <div class=\"alert is-important\">\n<p>We can if we build our application as <code>commonjs</code> modules and load those modules with a suitable package loader such as <code>systemjs</code> or <code>webpack</code>. Learn why <a href=\"#why-default\">below</a>.</p> <p>The Angular 2 CLI uses these technologies and defaults to the <em>component-relative path</em> approach described here. CLI users can skip this chapter or read on to understand how it works.</p> </div>\n<h2 id=\"_component-relative_-paths\">\n<em>Component-Relative</em> Paths</h2> <p>Our goal is to specify template and style URLs <em>relative</em> to their component class files, hence the term <strong><em>component-relative path</em></strong>.</p> <p>The key to success is following a convention that puts related component files in well-known locations.</p> <p>We recommend keeping component template and component-specific style files as <em>siblings</em> of their companion component class files. Here we see the three files for <code>SomeComponent</code> sitting next to each other in the <code>app</code> folder. </p> <div class=\"filetree\"><div class=\"file\">app<div class=\"children\">\n<div class=\"file\">some.component.css</div>\n<div class=\"file\">some.component.html</div>\n<div class=\"file\">some.component.ts</div>\n</div>\n<div class=\"file\">...</div>\n</div></div>\n<p>We'll have more files and folders — and greater folder depth — as our application grows. We'll be fine as long as the component files travel together as the inseparable siblings they are.</p> <h3 id=\"set-the-moduleid-\">Set the <em>moduleId</em>\n</h3> <p>Having adopted this file structure convention, we can specify locations of the template and style files relative to the component class file simply by setting the <code>moduleId</code> property of the <code>@Component</code> metadata like this</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">moduleId: module.id,\n</pre>\n<p>We strip the <code>app/</code> base path from the <code>templateUrl</code> and <code>styleUrls</code>. The result looks like this:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  moduleId: module.id,\n  selector: 'relative-path',\n  templateUrl: 'some.component.html',\n  styleUrls:  ['some.component.css']\n})\n</pre>\n<div class=\"alert is-helpful\">\n<p>Webpack users may prefer <a href=\"#webpack\">an alternative approach</a> that uses <code>require</code>.</p> </div>\n<h2 id=\"source\">Source</h2> <p><strong>We can see the <live-example name=\"cb-component-relative-paths\"></live-example></strong> and download the source code from there or simply read the pertinent source here.</p> <pre language=\"ts\" name=\"app/some.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/some.component.ts\n\nimport { Component } from '@angular/core';\n\n///////// Using Absolute Paths ///////\n\n@Component({\n  selector: 'absolute-path',\n  templateUrl: 'app/some.component.html',\n  styleUrls:  ['app/some.component.css']\n})\nexport class SomeAbsoluteComponent {\n  class = 'absolute';\n  type = 'Absolute template &amp; style URLs';\n  path = 'app/path.component.html';\n}\n\n///////// Using Relative Paths ///////\n\n@Component({\n  moduleId: module.id,\n  selector: 'relative-path',\n  templateUrl: 'some.component.html',\n  styleUrls:  ['some.component.css']\n})\n\nexport class SomeRelativeComponent {\n  class = 'relative';\n  type = 'Component-relative template &amp; style URLs';\n  path = 'path.component.html';\n\n}\n</pre>\n<pre language=\"html\" name=\"app/some.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- app/some.component.html --&gt;\n\n&lt;div class={{class}}&gt;\n  {{type}}&lt;br&gt;{{path}}\n&lt;/div&gt;\n</pre>\n<pre language=\"css\" name=\"app/some.component.css\" format=\"linenums\" data-language=\"css\">/* app/some.component.css */\n\ndiv.absolute {\n  background: beige;\n  border: 1px solid darkred;\n  color: red;\n  margin: 8px;\n  max-width: 20em;\n  padding: 4px;\n  text-align: center;\n}\n\ndiv.relative {\n  background: powderblue;\n  border: 1px solid darkblue;\n  color: Blue;\n  font-style: italic;\n  margin: 8px;\n  max-width: 20em;\n  padding: 4px;\n  text-align: center;\n}\n</pre>\n<pre language=\"ts\" name=\"app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\n\nimport { SomeAbsoluteComponent, SomeRelativeComponent } from './some.component';\n\n@Component({\nselector: 'my-app',\ntemplate:\n  `&lt;h1&gt;Absolute &amp; &lt;i&gt;Component-Relative&lt;/i&gt; Paths&lt;/h1&gt;\n  &lt;absolute-path&gt;&lt;/absolute-path&gt;\n  &lt;relative-path&gt;&lt;/relative-path&gt;\n  `,\n  directives: [SomeAbsoluteComponent, SomeRelativeComponent]\n})\nexport class AppComponent {}\n</pre>\n<h2 id=\"why-default\">Appendix: why <em>component-relative</em> is not the default</h2> <p>A <em>component-relative</em> path is obviously superior to an <em>absolute</em> path. Why did Angular default to the <em>absolute</em> path? Why do <em>we</em> have to set the <code>moduleId</code>? Why can't Angular set it?</p> <p>First, let's look at what happens if we use a relative path and omit the <code>moduleId</code>.</p> <p><code>EXCEPTION: Failed to load some.component.html</code></p> <p>Angular can't find the file so it throws an error.</p> <p>Why can't Angular calculate the template and style URLs from the component file's location? </p> <p>Because the location of the component can't be determined without the developer's help. Angular apps can be loaded in many ways: from individual files, from SystemJS packages, or from CommonJS packages, to name a few. We might generate modules in any of several formats. We might not be writing modular code at all!</p> <p>With this diversity of packaging and module load strategies, it's not possible for Angular to know with certainty where these files reside at runtime.</p> <p>The only location Angular can be sure of is the URL of the <code>index.html</code> home page, the application root. So by default it resolves template and style paths relative to the URL of <code>index.html</code>. That's why we previously wrote our file URLs with an <code>app/</code> base path prefix.</p> <p>But <em>if</em> we follow the recommended guidelines and we write modules in <code>commonjs</code> format and we use a module loader that <em>plays nice</em>, <em>then</em> we — the developers of the application — know that the semi-global <code>module.id</code> variable is available and contains the absolute URL of the component class module file.</p> <p>That knowledge enables us to tell Angular where the <em>component</em> file is by setting the <code>moduleId</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">moduleId: module.id,\n</pre>\n<h2 id=\"webpack\">Webpack: load templates and styles with <em>require</em>\n</h2> <p>Webpack developers have an alternative to <code>moduleId</code>.</p> <p>They can load templates and styles at runtime by setting the component metadata <code>template</code> and <code>style</code> properties with <code>require</code> statements that reference <em>component-relative</em> URLS.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component } from '@angular/core';\n\nimport '../../public/css/styles.css';\n\n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent { }\n</pre>\n<p>See the <a href=\"../guide/webpack\">Introduction to Webpack</a>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/component-relative-paths.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/component-relative-paths.html</a>\n  </p>\n</div>\n","cookbook/rc4-to-rc5":"<h1 class=\"hero-title text-display-1 \">RC4 to RC5 Migration</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Migrate your RC4 app to RC5 in minutes.</p></div>\n<h1 id=\"angular-modules-ngmodules-have-landed-in-angular-rc5-\">Angular Modules (NgModules) have landed in Angular RC5!</h1> <p><em>Angular Modules</em>, also known as <em>NgModules</em>, are the powerful new way to organize and bootstrap your Angular application. </p> <div class=\"l-sub-section\">\n<p>Read more in the <a href=\"https://angularjs.blogspot.com\">\"RC5 and NgModules\" announcement</a>.</p> <p>Learn the details of NgModule in the <a href=\"../guide/ngmodule\">Angular Module</a> chapter.</p> </div>\n<p>The new <code>@NgModule</code> decorator gives you module-level components, directives, and pipes without the need to specify them repeatedly in every component of your application. </p> <p>The <code>@NgModule</code> metadata give the Angular compiler the context needed so that you can use the same code regardless of whether you are running Angular in <a href=\"../glossary#aot\">Ahead of Time</a> or <a href=\"../glossary#jit\">Just in Time</a> mode.</p> <h2 id=\"how-do-i-use-them-\">How do I use them?</h2> <p>If you were previously writing an Angular application, your app should continue to work in RC5. We’ve worked hard to ensure that applications that worked with RC4 continue to work while you migrate. For this to work, we’re doing 2 things automatically for you:</p> <ul> <li>We create an implicit <code>NgModule</code> for you as part of the <code>bootstrap()</code> command</li> <li>We automatically hoist your components, pipes, and directives</li> </ul> <p>While your application will continue to work today, it’s important that you update your application to ensure future updates and deprecations don’t negatively affect you. To make it easier, you can think of the process as having 5 steps.</p> <ol> <li>\n<p><strong>Update to RC5</strong> - Your application should continue to work without modification, but it’s important that you are running the latest version of Angular.</p> </li> <li>\n<p><strong>Create an <em>NgModule</em></strong> - Create the root <code>NgModule</code> that you’ll use to bootstrap your application.</p> </li> <li>\n<p><strong>Update your bootstrap</strong> - Bootstrap that module instead of your root component</p> </li> <li>\n<p><strong>Update your 3rd party libraries</strong> - Take advantage of the latest from Forms, Material, Http, and more</p> </li> <li>\n<p><strong>Cleanup</strong> - Clean up your code. The deprecated classes, methods and properties will be removed from Angular very soon.</p> </li> </ol> <p>Prefer to look at code and diffs? Check out the upgrade in <a href=\"https://github.com/StephenFluin/ngmodule-migration/commit/9f9c6ae099346e491fc31d77bf65ed440e1f164c\">one commit</a>.</p> <h2 id=\"1-update-to-rc5\">1. Update to RC5</h2> <p>If you use npm, you should be able to either update your <code>package.json</code> file and run <code>npm install</code>. Or alternatively you can run the following command:</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">npm install @angular/{core,common,compiler,platform-browser,platform-browser-dynamic} --save\n</pre>\n<p>Update your optional libraries</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">npm install @angular/router\nnpm install @angular/forms\nnpm install @angular2-material/{core,button,card,...}@latest\n</pre>\n<p>Update the Angular CLI if you're using that tool</p> <pre format=\".\" language=\"bash\" data-language=\"bash\">npm install angular-cli @angular/tsc-wrapped --save-dev\n</pre>\n<h2 id=\"2-create-an-_ngmodule_\">2. Create an <em>NgModule</em>\n</h2> <p>Create a new file called app.module.ts. Populate it with your root component as follows:</p> <pre format=\".\" language=\"javascript\" data-language=\"javascript\">import { NgModule }       from '@angular/core';\nimport { BrowserModule  } from '@angular/platform-browser';\nimport { AppComponent }   from './app.component';\n\n@NgModule({\n    declarations: [AppComponent],\n    imports:      [BrowserModule],\n    bootstrap:    [AppComponent],\n})\nexport class AppModule {}\n</pre>\n<h2 id=\"3-update-your-bootstrap\">3. Update your bootstrap</h2> <p>Update your <code>main.ts</code> file to bootstrap using the \"Just in Time\" (JIT) compiler.</p> <pre format=\".\" language=\"javascript\" data-language=\"javascript\">import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule }              from './app/app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<h2 id=\"4-import-library-modules-in-your-_ngmodule_\">4. Import library modules in your <em>NgModule</em>\n</h2> <p>Remove the Angular and 3rd party library providers from your <code>AppComponent</code> providers and switch to <code>NgModule</code> imports as seen in this example.</p> <pre format=\".\" language=\"javascript\" data-language=\"javascript\">imports: [\n    BrowserModule, \n    // Router\n    RouterModule.forRoot(config), \n    // Forms\n    FormsModule, \n    // Material Design\n    MdSlideToggleModule, \n    MdButtonModule, \n    MdToolbarModule, \n    MdCardModule, \n    MdInputModule,\n],\n</pre>\n<h2 id=\"5-cleanup\">5. Cleanup</h2> <p>For RC5, you can leave your components, directives and pipes in the <code>directives</code> and <code>pipes</code> properties of your <code>@Component</code> metadata. In fact, we automatically hoist (add) them to the NgModule to which they belong.</p> <div class=\"alert is-important\">\n<p>This option is temporary for backward compatibility. It will be removed in the final release of Angular 2.0.</p> <p>Get ahead of the game and start moving your component <code>directives</code> and <code>pipes</code> into module <code>declarations</code> as soon as possible. We intend to delete <em>all</em> deprecated class, methods, and properties in the next RC.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/rc4-to-rc5.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/rc4-to-rc5.html</a>\n  </p>\n</div>\n","cookbook/set-document-title":"<h1 class=\"hero-title text-display-1 \">Set the Document Title</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Setting the document or window title using the Title service.</p></div>\n<p>Our app should be able to make the browser title bar say whatever we want it to say. This cookbook explains how to do it.</p> <p><strong>See the <live-example name=\"cb-set-document-title\"></live-example></strong>.</p> <div class=\"l-sub-section\">\n<img src=\"https://angular.io/resources/images/devguide/plunker-separate-window-button.png\" alt=\"pop out the window\" align=\"right\" style=\"\"><p>To see the browser Title bar changes, pop out the preview window by clicking the blue 'X' button in the upper right corner.</p> </div>\n<h2 id=\"the-problem-with-lt-title-gt-\">The problem with <em>&lt;title&gt;</em>\n</h2> <p>The obvious approach is to bind a property of the component to the HTML <code>&lt;title&gt;</code> like this:</p> <pre format=\"\">&lt;title&gt;{{This_Does_Not_Work}}&lt;/title&gt;</pre>\n<p>Sorry but that won't work. The root component of our application is an element contained within the <code>&lt;body&gt;</code> tag. The HTML <code>&lt;title&gt;</code> is in the document <code>&lt;head&gt;</code>, outside the body, making it inaccessible to Angular data binding.</p> <p>We could grab the browser <code>document</code> object and set the title manually. That's dirty and undermines our chances of running the app outside of a browser someday.</p> <div class=\"l-sub-section\">\n<p>Running your app outside a browser means that you can take advantage of server-side pre-rendering for near-instant first app render times and for SEO. It means you could run from inside a Web Worker to improve your app's responsiveness by using multiple threads. And it means that you could run your app inside Electron.js or Windows Universal to deliver it to the desktop.</p> </div>\n<h2 id=\"use-the-title-service\">Use the <em>Title</em> service</h2> <p>Fortunately, Angular 2 bridges the gap by providing a <code>Title</code> service as part of the <em>Browser platform</em>. The <a href=\"../api/platform-browser/index/title-class\">Title</a> service is a simple class that provides an API for getting and setting the current HTML document title:</p> <ul> <li>\n<code>getTitle() : string</code> — Gets the title of the current HTML document.</li> <li>\n<code>setTitle( newTitle : string )</code> — Sets the title of the current HTML document. </li> </ul> <p>Let's inject the <code>Title</code> service into the root <code>AppComponent</code> and expose a bindable <code>setTitle</code> method that calls it:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/app.component.ts (class)\">// app/app.component.ts (class)\n\nexport class AppComponent {\n  public constructor(private titleService: Title ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n</pre>\n<p>We bind that method to three anchor tags and, voilà!</p> <img src=\"https://angular.io/resources/images/cookbooks/set-document-title/set-title-anim.gif\" alt=\"Set title\"><p>Here's the complete solution</p> <pre language=\"ts\" name=\"app/main.ts\" format=\"linenums\" data-language=\"typescript\">// app/main.ts\n\nimport { browserDynamicPlatform } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nbrowserDynamicPlatform().bootstrapModule(AppModule);\n</pre>\n<pre language=\"ts\" name=\"app/app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.module.ts\n\nimport { NgModule } from '@angular/core';\nimport { BrowserModule, Title }  from '@angular/platform-browser';\n\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  imports: [\n    BrowserModule\n  ],\n  declarations: [\n    AppComponent\n  ],\n  providers: [\n    Title\n  ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<pre language=\"ts\" name=\"app/app.component.ts\" format=\"linenums\" data-language=\"typescript\">// app/app.component.ts\n\n// Import the native Angular services.\nimport { Component } from '@angular/core';\nimport { Title }     from '@angular/platform-browser';\n\n@Component({\nselector: 'my-app',\ntemplate:\n  `&lt;p&gt;\n    Select a title to set on the current HTML document:\n  &lt;/p&gt;\n\n  &lt;ul&gt;\n    &lt;li&gt;&lt;a (click)=\"setTitle( 'Good morning!' )\"&gt;Good morning&lt;/a&gt;.&lt;/li&gt;\n    &lt;li&gt;&lt;a (click)=\"setTitle( 'Good afternoon!' )\"&gt;Good afternoon&lt;/a&gt;.&lt;/li&gt;\n    &lt;li&gt;&lt;a (click)=\"setTitle( 'Good evening!' )\"&gt;Good evening&lt;/a&gt;.&lt;/li&gt;\n  &lt;/ul&gt;\n  `\n})\nexport class AppComponent {\n  public constructor(private titleService: Title ) { }\n\n  public setTitle( newTitle: string) {\n    this.titleService.setTitle( newTitle );\n  }\n}\n</pre>\n<h2 id=\"why-we-provide-the-title-service-in-bootstrap-\">Why we provide the <em>Title</em> service in <em>bootstrap</em>\n</h2> <p>We generally recommended providing application-wide services in the root application component, <code>AppComponent</code>.</p> <p>Here we recommend registering the title service during bootstrapping, a location we reserve for configuring the runtime Angular environment.</p> <p>That's exactly what we're doing. The <code>Title</code> service is part of the Angular <em>browser platform</em>. If we bootstrap our application into a different platform, we'll have to provide a different <code>Title</code> service that understands the concept of a \"document title\" for that specific platform. Ideally the application itself neither knows nor cares about the runtime environment.</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/set-document-title.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/set-document-title.html</a>\n  </p>\n</div>\n","guide/typescript-configuration":"<h1 class=\"hero-title text-display-1 \">TypeScript Configuration</h1>\n\n<div class=\"banner\"><p class=\"text-body\">TypeScript configuration for Angular 2 developers</p></div>\n<p>TypeScript is a primary language for Angular application development.</p> <p>TypeScript is a dialect of JavaScript with design-time support for type-safety and tooling.</p> <p>Browsers can't execute TypeScript directly. It has to be \"transpiled\" into JavaScript with the <em>tsc</em> compiler and that effort requires some configuration.</p> <p>This chapter covers some aspects of TypeScript configuration and the TypeScript environment that are important to Angular developers.</p> <ul> <li>\n<a href=\"#tsconfig\">tsconfig.json</a> - TypeScript compiler configuration.</li> <li>\n<a href=\"#typings\">typings</a> - TypesScript declaration files.</li> </ul> <h2 id=\"tsconfig\"><em>tsconfig.json</em></h2> <p>We typically add a TypeScript configuration file (<code>tsconfig.json</code>) to our project to guide the compiler as it generates JavaScript files.</p> <div class=\"l-sub-section\">\n<p>Get details about <code>tsconfig.json</code> from the official <a href=\"http://www.typescriptlang.org/docs/handbook/tsconfig-json.html\">TypeScript wiki</a>.</p> </div>\n<p>We created the following <code>tsconfig.json</code> for the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>:</p> <pre language=\"json\" format=\".\" data-language=\"json\" name=\"tsconfig.json\">// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": false\n  }\n}\n</pre>\n<p>The options and flags in this file are essential for Angular 2 applications.</p>  <h3 id=\"-noimplicitany-and-suppressimplicitanyindexerrors-\">\n<em>noImplicitAny</em> and <em>suppressImplicitAnyIndexErrors</em>\n</h3> <p>TypeScript developers disagree about whether the <code>noImplicitAny</code> flag should be <code>true</code> or <code>false</code>. There is no correct answer and we can change the flag later. But our choice now can make a difference in larger projects so it merits discussion.</p> <p>When the <code>noImplicitAny</code> flag is <code>false</code> (the default), the compiler silently defaults the type of a variable to <code>any</code> if it cannot infer the type based on how the variable is used. That's what we mean by <em>implicit <code>any</code></em>.</p> <p>We initialized the <code>noImplicitAny</code> flag to <code>false</code> in the QuickStart to make learning TypeScript development easier.</p> <p>When the <code>noImplicitAny</code> flag is <code>true</code> and the TypeScript compiler cannot infer the type, it still generates the JavaScript files. But it also <strong>reports an error</strong>. Many seasoned developers prefer this stricter setting because type checking catches more unintentional errors at compile time.</p> <p>We can set a variable's type to <code>any</code> even when the <code>noImplicitAny</code> flag is <code>true</code>. We do so when that seems like the best choice for the situation, deliberately and explicitly, after giving the matter some thought.</p> <p>If we set the <code>noImplicitAny</code> flag to <code>true</code>, we may get <em>implicit index errors</em> as well. Most developers feel that <em>this particular error</em> is more annoying than helpful. We can suppress them with the following additional flag.</p> <pre format=\".\">\"suppressImplicitAnyIndexErrors\":true\n\n</pre>\n<h2 id=\"typings\">TypeScript Typings</h2> <p>Many JavaScript libraries such as jQuery, the Jasmine testing library, and Angular itself, extend the JavaScript environment with features and syntax that the TypeScript compiler doesn't recognize natively. When the compiler doesn't recognize something, it throws an error. </p> <p>We use <a href=\"http://www.typescriptlang.org/Handbook#writing-dts-files\">TypeScript type definition files</a> — <em>d.ts files</em> — to tell the compiler about the libraries we load.</p> <p>TypeScript-aware editors leverage these same definition files to display type information about library features.</p> <p>Many libraries include their definition files in their npm packages where both the TypeScript compiler and editors can find them. Angular is one such library. Peek into the <code>node_modules/@angular/core/</code> folder of any Angular application to see several <code>...d.ts</code> files that describe parts of Angular.</p> <p><strong>We need do nothing to get <em>typings</em> files for library packages which include <em>d.ts</em> files — as all Angular packages do.</strong></p> <h3 id=\"installable-typings-files\">Installable typings files</h3> <p>Sadly, many libraries — jQuery, Jasmine, and Lodash among them — do <em>not</em> include <code>d.ts</code> files in their npm packages. Fortunately, either their authors or community contributors have created separate <em>d.ts</em> files for these libraries and published them in well-known locations. The <em>typings</em> tool can find and fetch these files for us.</p> <p>We installed the <a href=\"https://github.com/typings/typings/blob/master/README.md\">typings</a> tool with npm (it's listed among the <em>devDependencies</em> in the <code>package.json</code>) and added an npm script to run that tool automatically after <em>npm</em> installation completes.</p> <pre language=\"json\" format=\".\" data-language=\"json\" name=\"package.json (postinstall)\">// package.json (postinstall)\n\n{\n  \"scripts\": {\n    \"postinstall\": \"typings install\"\n  }\n}</pre>\n<p>This <em>typings</em> tool command installs the <em>d.ts</em> files that we identify in a <code>typings.json</code> file into the <strong>typings</strong> folder. We created a <code>typings.json</code> file in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">QuickStart</a>:</p> <pre language=\"json\" format=\".\" data-language=\"json\" name=\"typings.json\">// typings.json\n\n{\n  \"globalDependencies\": {\n    \"core-js\": \"registry:dt/core-js#0.0.0+20160602141332\",\n    \"jasmine\": \"registry:dt/jasmine#2.2.0+20160621224255\",\n    \"node\": \"registry:dt/node#6.0.0+20160807145350\"\n  }\n}\n</pre>\n<p>We identified three <em>typings</em> file in the QuickStart, the <em>d.ts</em> files for</p> <ul> <li>\n<p><a href=\"https://github.com/zloirock/core-js/blob/master/README.md\">core-js</a> that brings ES2015/ES6 capabilities to our ES5 browsers</p> </li> <li>\n<p><a href=\"http://jasmine.github.io/\">jasmine</a> typings for the Jasmine test framework</p> </li> <li>\n<p><a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/node/node.d.ts\">node</a> for code that references objects in the nodejs environment; see the <a href=\"webpack\">webpack</a> chapter for an example.</p> </li> </ul> <p>QuickStart itself doesn't require these typings but many of the documentation samples do. Most of us would be disappointed if we couldn't code against typical ES2015 features or support testing right out-of-the-box.</p> <p>We can also run the <em>typings</em> tool ourselves. The following command (re)installs the typings files, as is sometimes necessary when the <code>postInstall</code> hook fails to do so.</p> <pre format=\"\">npm run typings install</pre>\n<p>This command lists the installed typings files:</p> <pre format=\"\">npm run typings list</pre>\n<p>The following command installs or updates the typings file for the Jasmine test library from the <em>DefinitelyTyped</em> repository and updates the <code>typings.config</code> so we that we get it automatically the next time we install typings.</p> <pre format=\"\">npm run typings -- install dt~jasmine --save --global</pre>\n<div class=\"l-sub-section\">\n<p>The <a href=\"https://docs.npmjs.com/cli/run-script\">–– option</a> is important; it tells npm to pass all arguments to the right of <code>--</code> to the <em>typings</em> command.</p> <p>Learn about the features of the <em>typings</em> tool at its <a href=\"https://github.com/typings/typings/blob/master/README.md\">site on github</a>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/typescript-configuration.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/typescript-configuration.html</a>\n  </p>\n</div>\n","cookbook/a1-a2-quick-reference":"<h1 class=\"hero-title text-display-1 \">Angular 1 to 2 Quick Reference</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Learn how Angular 1 concepts and techniques map to Angular 2</p></div>\n<p>There are many conceptual and syntactical differences between Angular 1 and Angular 2. This chapter provides a quick reference guide to some of the common Angular 1 syntax and its equivalent in Angular 2.</p> <p><strong>See the Angular 2 syntax in this <live-example name=\"cb-a1-a2-quick-reference\"></live-example></strong>.</p> <h2 id=\"contents\">Contents</h2> <p>This chapter covers</p> <ul> <li>\n<p><a href=\"#template-basics\">Template Basics</a> - binding and local variables</p> </li> <li>\n<p><a href=\"#template-directives\">Template Directives</a> - built-in directives <code>ngIf</code> and <code>ngClass</code></p> </li> <li>\n<p><a href=\"#filters-pipes\">Filters/Pipes</a> - built-in <em>filters</em>, known as <em>pipes</em> in Angular 2</p> </li> <li>\n<p><a href=\"#controllers-components\">Modules/Controllers/Components</a> - <em>modules</em> are <em>modules</em> but different and <em>controllers</em> are <em>components</em> in Angular 2.</p> </li> <li>\n<p><a href=\"#style-sheets\">Style Sheets</a> - more options for CSS in Angular 2.</p> </li> </ul> <h2 id=\"template-basics\">Template Basics</h2> <p>Templates are the user-facing part of an Angular application and are written in HTML. The following are some of the key Angular 1 template features with the equivalent template syntax in Angular 2.</p> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"bindings-interpolation\">Bindings/Interpolation</h3> <pre>Your favorite hero is: {{vm.favoriteHero}}</pre>\n<p>In Angular 1, an expression in curly braces denotes one-way binding. This binds the value of the element to a property in the controller associated with this template.</p> <p>When using the <code>controller as</code> syntax, the binding is prefixed with the controller alias (<code>vm</code> or <code>$ctrl</code>) because we have to be specific about the source of the binding.</p> </td>\n<td>\n<h3 id=\"bindings-interpolation\">Bindings/Interpolation</h3> <pre language=\"html\" format=\"\" data-language=\"html\">Your favorite hero is: {{favoriteHero}}\n</pre>\n<p>In Angular 2, a template expression in curly braces still denotes one-way binding. This binds the value of the element to a property of the component. The context of the binding is implied and is always the associated component, so it needs no reference variable.</p> <p>For more information see <a href=\"../guide/template-syntax#interpolation\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"filters\">Filters</h3> <pre>&lt;td&gt;{{movie.title | uppercase}}&lt;/td&gt;</pre>\n<p>To filter output in our templates in Angular 1, we use the pipe character (|) and one or more filters.</p> <p>In this example, we filter the <code>title</code> property to uppercase.</p> </td>\n<td>\n<h3 id=\"pipes\">Pipes</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;td&gt;{{movie.title | uppercase}}&lt;/td&gt;\n</pre>\n<p>In Angular 2, we use similar syntax with the pipe (|) character to filter output, but now we call them <strong>pipes</strong>. Many (but not all) of the built-in filters from Angular 1 are built-in pipes in Angular 2.</p> <p>See the heading <a href=\"#Pipes\">Filters / Pipes</a> below for more information.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"local-variables\">Local variables</h3> <pre format=\"\">&lt;tr ng-repeat=\"movie in vm.movies\"&gt;\n  &lt;td&gt;{{movie.title}}&lt;/td&gt;\n&lt;/tr&gt;</pre>\n<p>Here, <code>movie</code> is a user-defined local variable.</p> </td>\n<td>\n<h3 id=\"input-variables\">Input variables</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;tr *ngFor=\"let movie of movies\"&gt;\n  &lt;td&gt;{{movie.title}}&lt;/td&gt;\n&lt;/tr&gt;\n</pre>\n<p>In Angular 2, we have true template input variables that are explicitly defined using the <code>let</code> keyword.</p> <p>For more information see <a href=\"../guide/template-syntax#ngForMicrosyntax\">ngFor micro-syntax</a>.</p> </td>\n</tr>\n</table>\n <h2 id=\"template-directives\">Template Directives</h2> <p>Angular 1 provides over seventy built-in directives for use in our templates. Many of them are no longer needed in Angular 2 because of its more capable and expressive binding system. The following are some of the key Angular 1 built-in directives and the equivalent feature in Angular 2.</p> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-app\">ng-app</h3> <pre>&lt;body ng-app=\"movieHunter\"&gt;</pre>\n<p>The application startup process is called <strong>bootstrapping</strong>.</p> <p>Although we can bootstrap an Angular 1 app in code, many applications bootstrap declaratively with the <code>ng-app</code> directive, giving it the name of the application's module (<code>movieHunter</code>).</p> </td>\n<td>\n<h3 id=\"bootstrapping\">Bootstrapping</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"main.ts\">// main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<br><pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app.module.ts\">// app.module.ts\n\nimport { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>Angular 2 does not have a bootstrap directive. We always launch the app in code by explicitly bootstrapping the application's root module (<code>AppModule</code>) in <code>main.ts</code> and the application's root component (<code>AppComponent</code>) in <code>app.module.ts</code>.</p> <p>For more information see <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">Quick Start</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-class\">ng-class</h3> <pre format=\"\">&lt;div ng-class=\"{active: isActive}\"&gt;\n&lt;div ng-class=\"{active: isActive,\n                   shazam: isImportant}\"&gt;</pre>\n<p>In Angular 1, the <code>ng-class</code> directive includes/excludes CSS classes based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS class name, and each value defined as a template expression that evaluates to a Boolean value.</p> <p>In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true.</p> <p>We can specify multiple classes as shown in the second example.</p> </td>\n<td>\n<h3 id=\"ngclass\">ngClass</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngClass]=\"{active: isActive}\"&gt;\n&lt;div [ngClass]=\"{active: isActive,\n                 shazam: isImportant}\"&gt;\n&lt;div [class.active]=\"isActive\"&gt;\n</pre>\n<p>In Angular 2, the <code>ngClass</code> directive works similarly. It includes/excludes CSS classes based on an expression.</p> <p>In the first example, the <code>active</code> class is applied to the element if <code>isActive</code> is true.</p> <p>We can specify multiple classes as shown in the second example.</p> <p>Angular 2 also has <strong>class binding</strong>, which is a good way to add or remove a single class as shown in the third example.</p> <p>For more information see <a href=\"../guide/template-syntax#other-bindings\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-click\">ng-click</h3> <pre format=\"\">&lt;button ng-click=\"vm.toggleImage()\"&gt;\n&lt;button ng-click=\"vm.toggleImage($event)\"&gt;</pre>\n<p>In Angular 1, the <code>ng-click</code> directive allows us to specify custom behavior when an element is clicked.</p> <p>In the first example, when the button is clicked, the <code>toggleImage()</code> method in the controller referenced by the <code>vm</code> <code>controller as</code> alias is executed.</p> <p>The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the controller.</p> </td>\n<td>\n<h3 id=\"bind-to-the-click-event\">bind to the <code>click</code> event</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;button (click)=\"toggleImage()\"&gt;\n&lt;button (click)=\"toggleImage($event)\"&gt;\n</pre>\n<p>The Angular 1 event-based directives do not exist in Angular 2. Rather, we define one-way binding from the template view to the component using <strong>event binding</strong>.</p> <p>For event binding, we define the name of the target event within parenthesis and specify a template statement in quotes to the right of the equals. Angular 2 then sets up an event handler for the target event. When the event is raised, the handler executes the template statement.</p> <p>In the first example, when the button is clicked, the <code>toggleImage()</code> method in the associated component is executed.</p> <p>The second example demonstrates passing in the <code>$event</code> object, which provides details about the event to the component.</p> <p>For a list of DOM events, see: <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events\">https://developer.mozilla.org/en-US/docs/Web/Events</a>.</p> <p>For more information see <a href=\"../guide/template-syntax#event-binding\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-controller\">ng-controller</h3> <pre format=\"\">&lt;div ng-controller=\"MovieListCtrl as vm\"&gt;</pre>\n<p>In Angular 1, the <code>ng-controller</code> directive attaches a controller to the view. Using the <code>ng-controller</code> (or defining the controller as part of the routing) ties the view to the controller code associated with that view.</p> </td>\n<td>\n<h3 id=\"component-decorator\">Component decorator</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'movie-list',\n  templateUrl: 'app/movie-list.component.html',\n  styleUrls: ['app/movie-list.component.css'],\n})\n</pre>\n<p>In Angular 2, the template no longer specifies its associated controller. Rather, the component specifies its associated template as part of the component class decorator.</p> <p>For more information see <a href=\"../guide/architecture#component\">Architecture Overview</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-hide\">ng-hide</h3> <p>In Angular 1, the <code>ng-hide</code> directive shows or hides the associated HTML element based on an expression. See <a href=\"#ng-show\">ng-show</a> for more information.</p> </td>\n<td>\n<h3 id=\"bind-to-the-hidden-property\">bind to the <code>hidden</code> property</h3> <p>In Angular 2, we use property binding; there is no built-in <em>hide</em> directive. See <a href=\"#ng-show\">ng-show</a> for more information.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-href\">ng-href</h3> <pre format=\"\">&lt;a ng-href=\"angularDocsUrl\"&gt;Angular Docs&lt;/a&gt;</pre>\n<p>The <code>ng-href</code> directive allows Angular 1 to preprocess the <code>href</code> property so it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</p> <p>In Angular 1, the <code>ng-href</code> is often used to activate a route as part of navigation.</p> <pre format=\"\">&lt;a ng-href=\"#movies\"&gt;Movies&lt;/a&gt;</pre>\n<p>Routing is handled differently in Angular 2.</p> </td>\n<td>\n<h3 id=\"bind-to-the-href-property\">bind to the <code>href</code> property</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;a [href]=\"angularDocsUrl\"&gt;Angular Docs&lt;/a&gt;\n</pre>\n<p>In Angular 2, we use property binding; there is no built-in <em>href</em> directive. We place the element's <code>href</code> property in square brackets and set it to a quoted template expression.</p> <p>For more information on property binding see <a href=\"../guide/template-syntax#property-binding\">Template Syntax</a>.</p> <p>In Angular 2, <code>href</code> is no longer used for routing. Routing uses <code>routerLink</code> as shown in the third example.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;a [routerLink]=\"['/movies']\"&gt;Movies&lt;/a&gt;\n</pre>\n<p>For more information on routing see <a href=\"../guide/router#router-link\">Routing &amp; Navigation</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-if\">ng-if</h3> <pre format=\"\">&lt;table ng-if=\"movies.length\"&gt;</pre>\n<p>In Angular 1, the <code>ng-if</code> directive removes or recreates a portion of the DOM based on an expression. If the expression is false, the element is removed from the DOM.</p> <p>In this example, the <code>table</code> element is removed from the DOM unless the <code>movies</code> array has a length greater than zero.</p> </td>\n<td>\n<h3 id=\"-ngif\">*ngIf</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;table *ngIf=\"movies.length\"&gt;\n</pre>\n<p>The <code>*ngIf</code> directive in Angular 2 works the same as the <code>ng-if</code> directive in Angular 1, it removes or recreates a portion of the DOM based on an expression.</p> <p>In this example, the <code>table</code> element is removed from the DOM unless the <code>movies</code> array has a length.</p> <p>The (*) before <code>ngIf</code> is required in this example. For more information see <a href=\"../guide/structural-directives\">Structural Directives</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-model\">ng-model</h3> <pre format=\"\">&lt;input ng-model=\"vm.favoriteHero\"/&gt;</pre>\n<p>In Angular 1, the <code>ng-model</code> directive binds a form control to a property in the controller associated with the template. This provides <strong>two-way binding</strong> whereby any changes made to the value in the view is synchronized with the model and any changes to the model are synchronized with the value in the view.</p> </td>\n<td>\n<h3 id=\"ngmodel\">ngModel</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;input [(ngModel)]=\"favoriteHero\" /&gt;\n</pre>\n<p>In Angular 2, <strong>two-way binding</strong> is denoted with [()], descriptively referred to as a \"banana in a box\". This syntax is a short-cut for defining both property binding (from the component to the view) and event binding (from the view to the component), thereby giving us two-way binding.</p> <p>For more information on two-way binding with ngModel see <a href=\"../guide/template-syntax#ngModel\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-repeat\">ng-repeat</h3> <pre format=\"\">&lt;tr ng-repeat=\"movie in vm.movies\"&gt;</pre>\n<p>In Angular 1, the <code>ng-repeat</code> directive repeats the associated DOM element for each item from the specified collection.</p> <p>In this example, the table row (<code>tr</code>) element is repeated for each movie object in the collection of movies.</p> </td>\n<td>\n<h3 id=\"-ngfor\">*ngFor</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;tr *ngFor=\"let movie of movies\"&gt;\n</pre>\n<p>The <code>*ngFor</code> directive in Angular 2 is similar to the <code>ng-repeat</code> directive in Angular 1. It repeats the associated DOM element for each item from the specified collection. More accurately, it turns the defined element (<code>tr</code> in this example) and its contents into a template and uses that template to instantiate a view for each item in the list.</p> <p>Notice the other syntax differences: The (*) before <code>ngFor</code> is required; the <code>let</code> keyword identifies <code>movie</code> as an input variable; the list preposition is <code>of</code>, not <code>in</code>.</p> <p>For more information see <a href=\"../guide/structural-directives\">Structural Directives</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-show\">ng-show</h3> <pre format=\"\">&lt;h3 ng-show=\"vm.favoriteHero\"&gt;\n  Your favorite hero is: {{vm.favoriteHero}}\n&lt;/h3&gt;</pre>\n<p>In Angular 1, the <code>ng-show</code> directive shows or hides the associated DOM element based on an expression.</p> <p>In this example, the <code>div</code> element is shown if the <code>favoriteHero</code> variable is truthy.</p> </td>\n<td>\n<h3 id=\"bind-to-the-hidden-property\">bind to the <code>hidden</code> property</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;h3 [hidden]=\"!favoriteHero\"&gt;\n  Your favorite hero is: {{favoriteHero}}\n&lt;/h3&gt;\n</pre>\n<p>In Angular 2, we use property binding; there is no built-in <em>show</em> directive. For hiding and showing elements, we bind to the HTML <code>hidden</code> property.</p> <p>To conditionally display an element, place the element's <code>hidden</code> property in square brackets and set it to a quoted template expression that evaluates to the <em>opposite</em> of <em>show</em>.</p> <p>In this example, the <code>div</code> element is hidden if the <code>favoriteHero</code> variable is not truthy.</p> <p>For more information on property binding see <a href=\"../guide/template-syntax#property-binding\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-src\">ng-src</h3> <pre format=\"\">&lt;img ng-src=\"{{movie.imageurl}}\"&gt;</pre>\n<p>The <code>ng-src</code> directive allows Angular 1 to preprocess the <code>src</code> property so it can replace the binding expression with the appropriate URL before the browser fetches from that URL.</p> </td>\n<td>\n<h3 id=\"bind-to-the-src-property\">bind to the <code>src</code> property</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;img [src]=\"movie.imageurl\"&gt;\n</pre>\n<p>In Angular 2, we use property binding; there is no built-in <em>src</em> directive. We place the <code>src</code> property in square brackets and set it to a quoted template expression.</p> <p>For more information on property binding see <a href=\"../guide/template-syntax#property-binding\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-style\">ng-style</h3> <pre format=\"\">&lt;div ng-style=\"{color: colorPreference}\"&gt;</pre>\n<p>In Angular 1, the <code>ng-style</code> directive sets a CSS style on an HTML element based on an expression. That expression is often a key-value control object with each key of the object defined as a CSS style name, and each value defined as an expression that evaluates to a value appropriate for the style.</p> <p>In the example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</p> </td>\n<td>\n<h3 id=\"ngstyle\">ngStyle</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;div [ngStyle]=\"{color: colorPreference}\"&gt;\n&lt;div [style.color]=\"colorPreference\"&gt;\n</pre>\n<p>In Angular 2, the <code>ngStyle</code> directive works similarly. It sets a CSS style on an HTML element based on an expression.</p> <p>In the first example, the <code>color</code> style is set to the current value of the <code>colorPreference</code> variable.</p> <p>Angular 2 also has <strong>style binding</strong>, which is good way to set a single style. This is shown in the second example.</p> <p>For more information on style binding see <a href=\"../guide/template-syntax#style-binding\">Template Syntax</a>.</p> <p>For more information on the ngStyle directive see <a href=\"../guide/template-syntax#ngStyle\">Template Syntax</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"ng-switch\">ng-switch</h3> <pre format=\"\">&lt;div ng-switch=\"vm.favoriteHero &amp;&amp;\n                vm.checkMovieHero(vm.favoriteHero)\"&gt;\n    &lt;div ng-switch-when=\"true\"&gt;\n      Excellent choice!\n    &lt;/div&gt;\n    &lt;div ng-switch-when=\"false\"&gt;\n      No movie, sorry!\n    &lt;/div&gt;\n    &lt;div ng-switch-default&gt;\n      Please enter your favorite hero.\n    &lt;/div&gt;\n&lt;/div&gt;</pre>\n<p>In Angular 1, the <code>ng-switch</code> directive swaps the contents of an element by selecting one of the templates based on the current value of an expression.</p> <p>In this example, if <code>favoriteHero</code> is not set, the template displays \"Please enter ...\". If the <code>favoriteHero</code> is set, it checks the movie hero by calling a controller method. If that method returns <code>true</code>, the template displays \"Excellent choice!\". If that methods returns <code>false</code>, the template displays \"No movie, sorry!\".</p> </td>\n<td>\n<h3 id=\"ngswitch\">ngSwitch</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;span [ngSwitch]=\"favoriteHero &amp;&amp;\n               checkMovieHero(favoriteHero)\"&gt;\n  &lt;p *ngSwitchCase=\"true\"&gt;\n    Excellent choice!\n  &lt;/p&gt;\n  &lt;p *ngSwitchCase=\"false\"&gt;\n    No movie, sorry!\n  &lt;/p&gt;\n  &lt;p *ngSwitchDefault&gt;\n    Please enter your favorite hero.\n  &lt;/p&gt;\n&lt;/span&gt;\n</pre>\n<p>In Angular 2, the <code>ngSwitch</code> directive works similarly. It displays an element whose <code>*ngSwitchCase</code> matches the current <code>ngSwitch</code> expression value.</p> <p>In this example, if <code>favoriteHero</code> is not set, the <code>ngSwitch</code> value is <code>null</code> and we see the <code>*ngSwitchDefault</code> paragraph, \"Please enter ...\". If the <code>favoriteHero</code> is set, it checks the movie hero by calling a component method. If that method returns <code>true</code>, we see \"Excellent choice!\". If that methods returns <code>false</code>, we see \"No movie, sorry!\".</p> <p>The (*) before <code>ngSwitchCase</code> and <code>ngSwitchDefault</code> is required in this example.</p> <p>For more information on the ngSwitch directive see <a href=\"../guide/template-syntax#ngSwitch\">Template Syntax</a>.</p> </td>\n</tr>\n</table>\n <h2 id=\"filters-pipes\">Filters / Pipes</h2> <p>Angular 2 <strong>pipes</strong> provide formatting and transformation for data in our template, similar to Angular 1 <strong>filters</strong>. Many of the built-in filters in Angular 1 have corresponding pipes in Angular 2. For more information on pipes see <a href=\"../guide/pipes\">Pipes</a>.</p> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"currency\">currency</h3> <pre>&lt;td&gt;{{movie.price | currency}}&lt;/td&gt;</pre>\n<p>Formats a number as a currency.</p> </td>\n<td>\n<h3 id=\"currency\">currency</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;td&gt;{{movie.price | currency:'USD':true}}&lt;/td&gt;\n</pre>\n<p>The Angular 2 <code>currency</code> pipe is similar although some of the parameters have changed.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"date\">date</h3> <pre>&lt;td&gt;{{movie.releaseDate  | date}}&lt;/td&gt;</pre>\n<p>Formats a date to a string based on the requested format.</p> </td>\n<td>\n<h3 id=\"date\">date</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;td&gt;{{movie.releaseDate | date}}&lt;/td&gt;\n</pre>\n<p>The Angular 2 <code>date</code> pipe is similar.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"filter\">filter</h3> <pre>&lt;tr ng-repeat=\"movie in movieList | filter: {title:listFilter}\"&gt;</pre>\n<p>Selects a subset of items from the defined collection based on the filter criteria.</p> </td>\n<td>\n<h3 id=\"none\">none</h3> <p>There is no comparable pipe in Angular 2 for performance reasons. Filtering should be coded in the component. Consider building a custom pipe if the same filtering code will be reused in several templates.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"json\">json</h3> <pre>&lt;pre&gt;{{movie | json}}&lt;/pre&gt;</pre>\n<p>Converts a JavaScript object into a JSON string. This is useful for debugging.</p> </td>\n<td>\n<h3 id=\"json\">json</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;pre&gt;{{movie | json}}&lt;/pre&gt;\n</pre>\n<p>The Angular 2 <code>json</code> pipe does the same thing.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"limitto\">limitTo</h3> <pre>&lt;tr ng-repeat=\"movie in movieList | limitTo:2:0\"&gt;</pre>\n<p>Selects up to the first parameter (2) number of items from the collection starting (optionally) at the beginning index (0).</p> </td>\n<td>\n<h3 id=\"slice\">slice</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;tr *ngFor=\"let movie of movies | slice:0:2\"&gt;\n</pre>\n<p>The <code>SlicePipe</code> does the same thing but the <em>order of the parameters is reversed</em> in keeping with the JavaScript <code>Slice</code> method. The first parameter is the starting index; the second is the limit. As in Angular 1, performance may improve if we code this operation within the component instead.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"lowercase\">lowercase</h3> <pre>&lt;div&gt;{{movie.title | lowercase}}&lt;/div&gt;</pre>\n<p>Converts the string to lowercase.</p> </td>\n<td>\n<h3 id=\"lowercase\">lowercase</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;td&gt;{{movie.title | lowercase}}&lt;/td&gt;\n</pre>\n<p>The Angular 2 <code>lowercase</code> pipe does the same thing.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"number\">number</h3> <pre>&lt;td&gt;{{movie.starRating  | number}}&lt;/td&gt;</pre>\n<p>Formats a number as text.</p> </td>\n<td>\n<h3 id=\"number\">number</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;td&gt;{{movie.starRating | number}}&lt;/td&gt;\n&lt;td&gt;{{movie.starRating | number:'1.1-2'}}&lt;/td&gt;\n&lt;td&gt;{{movie.approvalRating | percent: '1.0-2'}}&lt;/td&gt;\n</pre>\n<p>The Angular 2 <code>number</code> pipe is similar. It provides more functionality when defining the decimal places as shown in the second example above.</p> <p>Angular 2 also has a <code>percent</code> pipe which formats a number as a local percentage as shown in the third example.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"orderby\">orderBy</h3> <pre>&lt;tr ng-repeat=\"movie in movieList | orderBy : 'title'\"&gt;</pre>\n<p>Orders the collection as specified by the expression. In this example, the movieList is ordered by the movie title.</p> </td>\n<td>\n<h3 id=\"none\">none</h3> <p>There is no comparable pipe in Angular 2 for performance reasons. Ordering/sorting the results should be coded in the component. Consider building a custom pipe if the same ordering/sorting code will be reused in several templates.</p> </td>\n</tr>\n</table>\n <h2 id=\"controllers-components\">Modules / Controllers / Components</h2> <p>In both Angular 1 and Angular 2, we use Angular modules to help us organize our application into cohesive blocks of functionality.</p> <p>In Angular 1, we write the code that provides the model and the methods for the view in a <strong>controller</strong>. In Angular 2, we build a <strong>component</strong>.</p> <p>Because much of our Angular 1 code is in JavaScript, JavaScript code is shown in the Angular 1 column. The Angular 2 code is shown using TypeScript.</p> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"iife\">IIFE</h3> <pre>(function () {\n  ...\n}());</pre>\n<p>In Angular 1, we often defined an immediately invoked function expression (or IIFE) around our controller code. This kept our controller code out of the global namespace.</p> </td>\n<td>\n<h3 id=\"none\">none</h3> <p>We don't need to worry about this in Angular 2 because we use ES 2015 modules and modules handle the namespacing for us.</p> <p>For more information on modules see <a href=\"../guide/architecture#module\">Architecture Overview</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"angular-modules\">Angular modules</h3> <pre>angular.module(\"movieHunter\", [\"ngRoute\"]);</pre>\n<p>In Angular 1, we define an Angular module, which keeps track of our controllers, services, and other code. The second argument defines the list of other modules that this module depends upon.</p> </td>\n<td>\n<h3 id=\"angular-modules\">Angular modules</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppComponent }  from './app.component';\n\n@NgModule({\n  imports: [ BrowserModule ],\n  declarations: [ AppComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule { }\n</pre>\n<p>Angular 2 modules, defined with the <code>NgModule</code> decorator, serve the same purpose:</p> <ul> <li>\n<code>imports</code>: specifies the list of other modules that this module depends upon</li> <li>\n<code>declaration</code>: keeps track of our components, pipes, and directives.</li> </ul> <p>For more information on modules see <a href=\"../guide/ngmodule\">Angular Modules</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"controller-registration\">Controller registration</h3> <pre>angular\n  .module(\"movieHunter\")\n  .controller(\"MovieListCtrl\",\n              [\"movieService\",\n               MovieListCtrl]);</pre>\n<p>In Angular 1, we have code in each controller that looks up an appropriate Angular module and registers the controller with that module.</p> <p>The first argument is the controller name. The second argument defines the string names of all dependencies injected into this controller, and a reference to the controller function.</p> </td>\n<td>\n<h3 id=\"component-decorator\">Component Decorator</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'movie-list',\n  templateUrl: 'app/movie-list.component.html',\n  styleUrls: ['app/movie-list.component.css'],\n})\n</pre>\n<p>In Angular 2, we add a decorator to the component class to provide any required metadata. The Component decorator declares that the class is a component and provides metadata about that component, such as its selector (or tag) and its template.</p> <p>This is how we associate a template with code, which is defined in the component class.</p> <p>For more information on components see <a href=\"../guide/architecture#component\">Architecture Overview</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"controller-function\">Controller function</h3> <pre>function MovieListCtrl(movieService) {\n}</pre>\n<p>In Angular 1, we write the code for the model and methods in a controller function.</p> </td>\n<td>\n<h3 id=\"component-class\">Component class</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export class MovieListComponent {\n}\n</pre>\n<p>In Angular 2, we create a component class.</p> <p>NOTE: If you are using TypeScript with Angular 1 then the only difference here is that the component class must be exported using the <code>export</code> keyword.</p> <p>For more information on components see <a href=\"../guide/architecture#component\">Architecture Overview</a>.</p> </td>\n</tr>\n<tr>\n<td>\n<h3 id=\"dependency-injection\">Dependency injection</h3> <pre>MovieListCtrl.$inject = ['MovieService'];\nfunction MovieListCtrl(movieService) {\n}</pre>\n<p>In Angular 1, we pass in any dependencies as controller function arguments. In this example, we inject a <code>MovieService</code>.</p> <p>We also guard against minification problems by telling Angular explicitly that it should inject an instance of the <code>MovieService</code> in the first parameter.</p> </td>\n<td>\n<h3 id=\"dependency-injection\">Dependency injection</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">constructor(movieService: MovieService) {\n}\n</pre>\n<p>In Angular 2, we pass in dependencies as arguments to the component class constructor. In this example, we inject a <code>MovieService</code>. The first parameter's TypeScript type tells Angular what to inject even after minification.</p> <p>For more information on dependency injection see <a href=\"../guide/architecture#dependency-injection\">Architecture Overview</a>.</p> </td>\n</tr>\n</table>\n <h2 id=\"style-sheets\">Style Sheets</h2> <p>Style sheets give our application a nice look. In Angular 1, we specify the style sheets for our entire application. As the application grows over time, the styles for the many parts of the application are merged, which can cause unexpected results. In Angular 2, we can still define style sheets for our entire application. But now we can also encapculate a style sheet within a specific component.</p> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"link-tag\">Link tag</h3> <pre>&lt;link href=\"styles.css\" rel=\"stylesheet\" /&gt;</pre>\n<p>In Angular 1, we use a <code>link</code> tag in the head section of our <code>index.html</code> file to define the styles for our application.</p> </td>\n<td>\n<h3 id=\"link-tag\">Link tag</h3> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;link rel=\"stylesheet\" href=\"styles.css\"&gt;\n</pre>\n<p>In Angular 2, we can continue to use the link tag to define the styles for our application in the <code>index.html</code> file. But we can now also encapsulate styles for our components.</p> <h3 id=\"styleurls\">StyleUrls</h3> <p>In Angular 2, we can use the <code>styles</code> or <code>styleUrls</code> property of the <code>@Component</code> metadata to define a style sheet for a particular component.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">styleUrls: ['app/movie-list.component.css'],\n</pre>\n<p>This allows us to set appropriate styles for individual components that won’t leak into other parts of the application.</p> </td>\n</tr>\n</table>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/a1-a2-quick-reference.html</a>\n  </p>\n</div>\n","cookbook/visual-studio-2015":"<h1 class=\"hero-title text-display-1 \">Visual Studio 2015 QuickStart</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Use Visual Studio 2015 with the QuickStart files</p></div>\n<p>Some developers prefer Visual Studio as their Interactive Development Environment (IDE).</p> <p>This cookbook describes the steps required to set up and use the Angular 2 QuickStart files in Visual Studio 2015 within an ASP.NET 4.x project.</p> <div class=\"l-sub-section\">\n<p>There is no <em>live example</em> for this cookbook because it describes Visual Studio, not the application.</p> </div>\n<h2 id=\"asp-net-4\">ASP.NET 4.x Project</h2> <p>The steps for setting up the QuickStart files with an ASP.NET 4.x project in Visual Studio 2015 are as follows:</p> <ul> <li>\n<a href=\"#prereq\">Prerequisite</a>: Install Node.js</li> <li>\n<a href=\"#download\">Step 1</a>: Download the QuickStart files</li> <li>\n<a href=\"#setup-vs\">Step 2</a>: Set up Visual Studio for TypeScript</li> <li>\n<a href=\"#create-project\">Step 3</a>: Create the Visual Studio ASP.NET project</li> <li>\n<a href=\"#copy\">Step 4</a>: Copy the QuickStart files into the ASP.NET project folder</li> <li>\n<a href=\"#restore\">Step 5</a>: Restore required packages</li> <li>\n<a href=\"#edit-config\">Step 6</a>: Edit the TypeScript configuration file</li> <li>\n<a href=\"#build-and-run\">Step 7</a>: Build and run the app</li> </ul> <h2 id=\"prereq\">Prerequisite: Node.js</h2>\n<p>Install <strong><a href=\"https://nodejs.org/en/download/\">Node.js® and npm</a></strong> if they are not already on your machine.</p> <div class=\"l-sub-section\">\n<p><strong>Verify that you are running node version <code>4.4.x</code> - <code>5.x.x</code>, and npm <code>3.x.x</code></strong> by running <code>node -v</code> and <code>npm -v</code> in a terminal/console window. Older versions produce errors.</p> </div>\n<h2 id=\"download\">Step 1: Download the QuickStart files</h2>\n<p><a href=\"https://github.com/angular/quickstart\">Download the QuickStart source</a> from github. If you downloaded as a zip file, extract the files.</p> <h2 id=\"setup-vs\">Step 2: Set up Visual Studio for TypeScript</h2>\n<p>Ensure you have the latest version of Visual Studio 2015 installed. Then open Visual Studio and install the latest set of TypeScript tools as follows:</p> <ul> <li>Open <code>Tools</code> | <code>Extensions and Updates</code>.</li> <li>Select <code>Online</code> in the tree on the left.</li> <li>Search for <code>TypeScript</code> using the search box in the upper right.</li> <li>Select the most current available TypeScript version.</li> <li>Download and install the package.</li> </ul> <h2 id=\"create-project\">Step 3: Create the Visual Studio ASP.NET project</h2>\n<p>Create the ASP.NET 4.x project as follows:</p> <ul> <li>In Visual Studio, select <code>File</code> | <code>New</code> | <code>Project</code> from the menu.</li> <li>In the template tree, select <code>Templates</code> | <code>Visual C#</code> (or <code>Visual Basic</code>) | <code>Web</code>.</li> <li>Select the <code>ASP.NET Web Application</code> template, give the project a name, and click OK.</li> <li>Select the desired ASP.NET 4.5.2 template and click OK.</li> </ul> <div class=\"l-sub-section\">\n<p>In this cookbook we'll select the <code>Empty</code> template with no added folders, no authentication and no hosting. Pick the template and options appropriate for your project.</p> </div>\n<h2 id=\"copy\">Step 4: Copy the QuickStart files into the ASP.NET project folder</h2>\n<p>Copy the QuickStart files we downloaded from github into the folder containing the <code>.csproj</code> file. Include the files in the Visual Studio project as follows:</p> <ul> <li>Click the <code>Show All Files</code> button in Solution Explorer to reveal all of the hidden files in the project.</li> <li>Right-click on each folder/file to be included in the project and select <code>Include in Project</code>. Minimally, include the following folder/files:<ul> <li>app folder (answer <em>No</em> if asked to search for TypeScript Typings)</li> <li>styles.css</li> <li>index.html</li> <li>package.json</li> <li>tsconfig.json</li> <li>typings.json</li> </ul> </li> </ul> <h2 id=\"restore\">Step 5: Restore the required packages</h2>\n<p>Restore the packages required for an Angular application as follows:</p> <ul> <li>Right-click on the <code>package.json</code> file in Solution Explorer and select <code>Restore Packages</code>. <br>This uses <code>npm</code> to install all of the packages defined in the <code>package.json</code> file. It may take some time.</li> <li>If desired, open the Output window (<code>View</code> | <code>Output</code>) to watch the npm commands execute.</li> <li>Ignore the warnings.</li> <li>When the restore is finished, a message should say: <code>npm command completed with exit code 0</code>.</li> <li>Click the <code>Refresh</code> icon in Solution Explorer.</li> <li>\n<strong>Do not</strong> include the <code>node_modules</code> folder in the project. Let it be a hidden project project folder.</li> </ul> <div class=\"alert is-important\">\n<p>An error such as \"<em>@angular/compiler is not in the npm registry</em>\" suggests that Visual Studio 2015 is using an older version of npm. Update to the latest installed version of npm:</p> <ul> <li>\n<code>Tools</code> | <code>Options</code> to open the Options dialog.</li> <li>In the tree on the left, select <code>Projects and Solutions</code> | <code>External Web Tools</code>.</li> <li>On the right, move the <code>$(PATH)</code> entry above the <code>$(DevEnvDir</code>) entries. This tells Visual Studio to use the external tools (such as npm) found in your path before using its own version of the external tools.</li> <li>Click OK to close the dialog.</li> <li>Restart Visual Studio for this change to take effect.</li> </ul> </div>\n<h2 id=\"edit-config\">Step 6: Edit the TypeScript configuration file</h2>\n<p>For Visual Studio 2015 we must add <code>\"compileOnSave\": true</code> to the TypeScript configuration (<code>tsconfig.json</code>) file as shown here. </p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"tsconfig.json (scripts)\">// tsconfig.json (scripts)\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": true,\n    \"suppressImplicitAnyIndexErrors\": true\n  },\n  \"compileOnSave\": true\n}\n</pre>\n<p>After making this change, <strong>exit</strong> Visual Studio and reopen it to reload the project. </p> <h2 id=\"build-and-run\">Step 7: Build and run the app</h2>\n<p>Click the Run button or press F5 to build and run the application.</p> <p>This launches the default browser and runs the QuickStart sample application.</p> <p>Try editing any of the project files. <em>Save</em> and refresh the browser to see the changes. </p> <div class=\"alert is-important\">\n<p>Compiler errors such as \"<em>Property ‘map’ does not exist on type ‘Observable<response>’</response></em>\" and \"<em>Observable cannot be found</em>\" indicate an old release of Visual Studio. Exit Visual Studio and follow the <a href=\"https://github.com/Microsoft/TypeScript/issues/8518\">instructions here</a>.</p> <p>You'll be asked to replace the file</p> <pre>c:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\IDE\\CommonExtensions\\Microsoft\\TypeScript.typescriptServices.js\n</pre>\n<p>This operation requires admin privileges.</p> </div>\n<h2 id=\"routing\">Note on Routing Applications</h2>\n<p>If this application used the Angular router, a browser refresh could return a <em>404 - Page Not Found</em>. Look at the address bar. Does it contain a navigation url (a \"deep link\")? We'll have to configure the server to return <code>index.html</code> for these requests. Until we do, remove the navigation path and refresh again. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/visual-studio-2015.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/visual-studio-2015.html</a>\n  </p>\n</div>\n","api/common/index/commonmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CommonModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CommonModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The module that includes all the basic Angular directives like <a href=\"ngif-directive\"><code>NgIf</code></a>, ${link NgFor}, ...</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CommonModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({declarations: [COMMON_DIRECTIVES, COMMON_PIPES], exports: [COMMON_DIRECTIVES, COMMON_PIPES]})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/index.ts#L18-L30\">@angular/common/index.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/CommonModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/CommonModule-class.html</a>\n  </p>\n</div>\n","api/common/index/controlarray-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlArray</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlArray {\n  constructor(controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)\n  \n  \n  controls : AbstractControl[]\n  at(index: number) : AbstractControl\n  push(control: AbstractControl) : void\n  insert(index: number, control: AbstractControl) : void\n  removeAt(index: number) : void\n  length : number\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form, of variable length, that can contain other controls.</p> <p>A <code>ControlArray</code> aggregates the values of each <a href=\"control-class\"><code>Control</code></a> in the group. The status of a <code>ControlArray</code> depends on the status of its children. If one of the controls in a group is invalid, the entire array is invalid. Similarly, if a control changes its value, the entire array changes as well.</p> <p><code>ControlArray</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"control-class\"><code>Control</code></a> and <a href=\"controlgroup-class\"><code>ControlGroup</code></a>. <a href=\"controlgroup-class\"><code>ControlGroup</code></a> can also contain other controls, but is of fixed length.</p> <h2 id=\"adding-or-removing-controls\">Adding or removing controls</h2> <p>To change the controls in the array, use the <code>push</code>, <code>insert</code>, or <code>removeAt</code> methods in <code>ControlArray</code> itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of <code>AbstractControl</code>s used to instantiate the <code>ControlArray</code> directly, as that will result in strange and unexpected behavior such as broken change detection.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-23desopbnnbpbhzt1br4-p-preview-\">Example (<a href=\"http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview\">live demo</a>)</h3> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ControlArray</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : AbstractControl[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('at') }\" class=\"prettyprint no-bg\" id=\"at-anchor\">at(index: number) : AbstractControl</pre>\n<p>Get the <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('push') }\" class=\"prettyprint no-bg\" id=\"push-anchor\">push(control: AbstractControl) : void</pre>\n<p>Insert a new <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the end of the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('insert') }\" class=\"prettyprint no-bg\" id=\"insert-anchor\">insert(index: number, control: AbstractControl) : void</pre>\n<p>Insert a new <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeAt') }\" class=\"prettyprint no-bg\" id=\"removeAt-anchor\">removeAt(index: number) : void</pre>\n<p>Remove the control at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('length') }\" class=\"prettyprint no-bg\" id=\"length-anchor\">length : number</pre>\n<p>Length of the control array.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/model.ts#L453-L538\">@angular/common/src/forms-deprecated/model.ts (line 453)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/ControlArray-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/ControlArray-class.html</a>\n  </p>\n</div>\n","cookbook/dynamic-form":"<h1 class=\"hero-title text-display-1 \">Dynamic Forms</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Render dynamic forms with FormGroup</p></div>\n<p>We can't always justify the cost and time to build handcrafted forms, especially if we'll need a great number of them, they're similar to each other, and they change frequently to meet rapidly changing business and regulatory requirements.</p> <p>It may be more economical to create the forms dynamically, based on metadata that describe the business object model.</p> <p>In this cookbook we show how to use <code>formGroup</code> to dynamically render a simple form with different control types and validation. It's a primitive start. It might evolve to support a much richer variety of questions, more graceful rendering, and superior user experience. All such greatness has humble beginnings.</p> <p>In our example we use a dynamic form to build an online application experience for heroes seeking employment. The agency is constantly tinkering with the application process. We can create the forms on the fly <em>without changing our application code</em>. </p> <h2 id=\"toc\">Table of contents</h2> <p> <a href=\"#bootstrap\">Bootstrap</a></p> <p> <a href=\"#object-model\">Question Model</a></p> <p> <a href=\"#form-component\">Form Component</a></p> <p> <a href=\"#questionnaire-metadata\">Questionnaire Metadata</a></p> <p> <a href=\"#dynamic-template\">Dynamic Template</a></p> <p><strong>See the <live-example name=\"cb-dynamic-form\"></live-example></strong>.</p> <h2 id=\"bootstrap\">Bootstrap</h2> <p>We start by creating an <code>NgModule</code> called <code>AppModule</code>.</p> <p>In our example we will be using Reactive Forms. </p> <p>Reactive Forms belongs to a different <code>NgModule</code> called <code>ReactiveFormsModule</code>, so in order to access any Reactive Forms directives, we have to import <code>ReactiveFormsModule</code> from <code>AppModule</code>. </p> <p>We bootstrap our <code>AppModule</code> in main.ts.</p> <pre language=\"ts\" name=\"app.module.ts\" format=\"linenums\" data-language=\"typescript\">// app.module.ts\n\nimport { BrowserModule }                from '@angular/platform-browser';\nimport { ReactiveFormsModule }          from '@angular/forms';\nimport { NgModule }                     from '@angular/core';\n\nimport { AppComponent }                 from './app.component';\nimport { DynamicFormComponent }         from './dynamic-form.component';\nimport { DynamicFormQuestionComponent } from './dynamic-form-question.component';\n\n@NgModule({\n  imports: [ BrowserModule, ReactiveFormsModule ],\n  declarations: [ AppComponent, DynamicFormComponent, DynamicFormQuestionComponent ],\n  bootstrap: [ AppComponent ]\n})\nexport class AppModule {\n  constructor() {\n  }\n}\n</pre>\n<pre language=\"ts\" name=\"main.ts\" format=\"linenums\" data-language=\"typescript\">// main.ts\n\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n</pre>\n<h2 id=\"object-model\">Question Model</h2> <p>The next step is to define an object model that can describe all scenarios needed by the form functionality. The hero application process involves a form with a lot of questions. The \"question\" is the most fundamental object in the model.</p> <p>We have created <code>QuestionBase</code> as the most fundamental question class.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/question-base.ts\">// app/question-base.ts\n\nexport class QuestionBase&lt;T&gt;{\n  value: T;\n  key: string;\n  label: string;\n  required: boolean;\n  order: number;\n  controlType: string;\n\n  constructor(options: {\n      value?: T,\n      key?: string,\n      label?: string,\n      required?: boolean,\n      order?: number,\n      controlType?: string\n    } = {}) {\n    this.value = options.value;\n    this.key = options.key || '';\n    this.label = options.label || '';\n    this.required = !!options.required;\n    this.order = options.order === undefined ? 1 : options.order;\n    this.controlType = options.controlType || '';\n  }\n}\n</pre>\n<p>From this base we derived two new classes in <code>TextboxQuestion</code> and <code>DropdownQuestion</code> that represent Textbox and Dropdown questions. The idea is that the form will be bound to specific question types and render the appropriate controls dynamically. </p> <p><code>TextboxQuestion</code> supports multiple html5 types like text, email, url etc via the <code>type</code> property.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/question-textbox.ts\">// app/question-textbox.ts\n\nimport { QuestionBase } from './question-base';\n\nexport class TextboxQuestion extends QuestionBase&lt;string&gt; {\n  controlType = 'textbox';\n  type: string;\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.type = options['type'] || '';\n  }\n}\n</pre>\n<p><code>DropdownQuestion</code> presents a list of choices in a select box.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/question-dropdown.ts\">// app/question-dropdown.ts\n\nimport { QuestionBase } from './question-base';\n\nexport class DropdownQuestion extends QuestionBase&lt;string&gt; {\n  controlType = 'dropdown';\n  options: {key: string, value: string}[] = [];\n\n  constructor(options: {} = {}) {\n    super(options);\n    this.options = options['options'] || [];\n  }\n}\n</pre>\n<p>Next we have defined <code>QuestionControlService</code>, a simple service for transforming our questions to a <code>FormGroup</code>. In a nutshell, the form group consumes the metadata from the question model and allows us to specify default values and validation rules.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/question-control.service.ts\">// app/question-control.service.ts\n\nimport { Injectable }   from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\n\nimport { QuestionBase } from './question-base';\n\n@Injectable()\nexport class QuestionControlService {\n  constructor() { }\n\n  toFormGroup(questions: QuestionBase&lt;any&gt;[] ) {\n    let group: any = {};\n\n    questions.forEach(question =&gt; {\n      group[question.key] = question.required ? new FormControl(question.value || '', Validators.required)\n                                              : new FormControl(question.value || '');\n    });\n    return new FormGroup(group);\n  }\n}\n</pre>\n<h2 id=\"form-component\">Question form components</h2> <p>Now that we have defined the complete model we are ready to create components to represent the dynamic form.</p> <p><code>DynamicFormComponent</code> is the entry point and the main container for the form. </p> <pre language=\"html\" name=\"dynamic-form.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- dynamic-form.component.html --&gt;\n\n&lt;div&gt;\n  &lt;form (ngSubmit)=\"onSubmit()\" [formGroup]=\"form\"&gt;\n\n    &lt;div *ngFor=\"let question of questions\" class=\"form-row\"&gt;\n      &lt;df-question [question]=\"question\" [form]=\"form\"&gt;&lt;/df-question&gt;\n    &lt;/div&gt;\n\n    &lt;div class=\"form-row\"&gt;\n      &lt;button type=\"submit\" [disabled]=\"!form.valid\"&gt;Save&lt;/button&gt;\n    &lt;/div&gt;\n  &lt;/form&gt;\n\n  &lt;div *ngIf=\"payLoad\" class=\"form-row\"&gt;\n    &lt;strong&gt;Saved the following values&lt;/strong&gt;&lt;br&gt;{{payLoad}}\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"ts\" name=\"dynamic-form.component.ts\" format=\"linenums\" data-language=\"typescript\">// dynamic-form.component.ts\n\nimport { Component, Input, OnInit }  from '@angular/core';\nimport { FormGroup }                 from '@angular/forms';\n\nimport { QuestionBase }              from './question-base';\nimport { QuestionControlService }    from './question-control.service';\n\n@Component({\n  selector: 'dynamic-form',\n  templateUrl: 'app/dynamic-form.component.html',\n  providers: [ QuestionControlService ]\n})\nexport class DynamicFormComponent implements OnInit {\n\n  @Input() questions: QuestionBase&lt;any&gt;[] = [];\n  form: FormGroup;\n  payLoad = '';\n\n  constructor(private qcs: QuestionControlService) {  }\n\n  ngOnInit() {\n    this.form = this.qcs.toFormGroup(this.questions);\n  }\n\n  onSubmit() {\n    this.payLoad = JSON.stringify(this.form.value);\n  }\n}\n</pre>\n<p>It presents a list of questions, each question bound to a <code>&lt;df-question&gt;</code> component element. The <code>&lt;df-question&gt;</code> tag matches the <code>DynamicFormQuestionComponent</code>, the component responsible for rendering the details of each <em>individual</em> question based on values in the data-bound question object. </p> <pre language=\"html\" name=\"dynamic-form-question.component.html\" format=\"linenums\" data-language=\"html\">&lt;!-- dynamic-form-question.component.html --&gt;\n\n&lt;div [formGroup]=\"form\"&gt;\n  &lt;label [attr.for]=\"question.key\"&gt;{{question.label}}&lt;/label&gt;\n\n  &lt;div [ngSwitch]=\"question.controlType\"&gt;\n\n    &lt;input *ngSwitchCase=\"'textbox'\" [formControlName]=\"question.key\"\n            [id]=\"question.key\" [type]=\"question.type\"&gt;\n\n    &lt;select [id]=\"question.key\" *ngSwitchCase=\"'dropdown'\" [formControlName]=\"question.key\"&gt;\n      &lt;option *ngFor=\"let opt of question.options\" [value]=\"opt.key\"&gt;{{opt.value}}&lt;/option&gt;\n    &lt;/select&gt;\n\n  &lt;/div&gt; \n\n  &lt;div class=\"errorMessage\" *ngIf=\"!isValid\"&gt;{{question.label}} is required&lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<pre language=\"ts\" name=\"dynamic-form-question.component.ts\" format=\"linenums\" data-language=\"typescript\">// dynamic-form-question.component.ts\n\nimport { Component, Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\n\nimport { QuestionBase }     from './question-base';\n\n@Component({\n  selector: 'df-question',\n  templateUrl: 'app/dynamic-form-question.component.html'\n})\nexport class DynamicFormQuestionComponent {\n  @Input() question: QuestionBase&lt;any&gt;;\n  @Input() form: FormGroup;\n  get isValid() { return this.form.controls[this.question.key].valid; }\n}\n</pre>\n<p>Notice this component can present any type of question in our model. We only have two types of questions at this point but we can imagine many more. The <code>ngSwitch</code> determines which type of question to display.</p> <p>In both components we're relying on Angular's <strong>formGroup</strong> to connect the template HTML to the underlying control objects, populated from the question model with display and validation rules.</p> <p><code>formControlName</code> and <code>formGroup</code> are directives defined in <code>ReactiveFormsModule</code>. Our templates can can access these directives directly since we imported <code>ReactiveFormsModule</code> from <code>AppModule</code>. </p> <h2 id=\"questionnaire-metadata\">Questionnaire data</h2> <p><code>DynamicFormComponent</code> expects the list of questions in the form of an array bound to <code>@Input() questions</code>.</p> <p> The set of questions we have defined for the job application is returned from the <code>QuestionService</code>. In a real app we'd retrieve these questions from storage.</p> <p> The key point is that we control the hero job application questions entirely through the objects returned from <code>QuestionService</code>. Questionnaire maintenance is a simple matter of adding, updating, and removing objects from the <code>questions</code> array.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/question.service.ts\">// app/question.service.ts\n\nimport { Injectable }       from '@angular/core';\n\nimport { DropdownQuestion } from './question-dropdown';\nimport { QuestionBase }     from './question-base';\nimport { TextboxQuestion }  from './question-textbox';\n\n@Injectable()\nexport class QuestionService {\n\n  // Todo: get from a remote source of question metadata\n  // Todo: make asynchronous\n  getQuestions() {\n\n    let questions: QuestionBase&lt;any&gt;[] = [\n\n      new DropdownQuestion({\n        key: 'brave',\n        label: 'Bravery Rating',\n        options: [\n          {key: 'solid',  value: 'Solid'},\n          {key: 'great',  value: 'Great'},\n          {key: 'good',   value: 'Good'},\n          {key: 'unproven', value: 'Unproven'}\n        ],\n        order: 3\n      }),\n\n      new TextboxQuestion({\n        key: 'firstName',\n        label: 'First name',\n        value: 'Bombasto',\n        required: true,\n        order: 1\n      }),\n\n      new TextboxQuestion({\n        key: 'emailAddress',\n        label: 'Email',\n        type: 'email',\n        order: 2\n      })\n    ];\n\n    return questions.sort((a, b) =&gt; a.order - b.order);\n  }\n}\n</pre>\n<p>Finally, we display an instance of the form in the <code>AppComponent</code> shell.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.component.ts\">// app.component.ts\n\nimport { Component }       from '@angular/core';\n\nimport { QuestionService } from './question.service';\n\n@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Job Application for Heroes&lt;/h2&gt;\n      &lt;dynamic-form [questions]=\"questions\"&gt;&lt;/dynamic-form&gt;\n    &lt;/div&gt;\n  `,\n  providers:  [QuestionService]\n})\nexport class AppComponent {\n  questions: any[];\n\n  constructor(service: QuestionService) {\n    this.questions = service.getQuestions();\n  }\n}\n</pre>\n<h2 id=\"dynamic-template\">Dynamic Template</h2> <p>Although in this example we're modelling a job application for heroes, there are no references to any specific hero question outside the objects returned by <code>QuestionService</code>. </p> <p>This is very important since it allows us to repurpose the components for any type of survey as long as it's compatible with our <em>question</em> object model. The key is the dynamic data binding of metadata used to render the form without making any hardcoded assumptions about specific questions. In addition to control metadata, we are also adding validation dynamically.</p> <p>The <em>Save</em> button is disabled until the form is in a valid state. When the form is valid, we can click <em>Save</em> and the app renders the current form values as JSON. This proves that any user input is bound back to the data model. Saving and retrieving the data is an exercise for another time.</p> <p>The final form looks like this:</p> <img src=\"https://angular.io/resources/images/cookbooks/dynamic-form/dynamic-form.png\" alt=\"Dynamic-Form\"><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/dynamic-form.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/dynamic-form.html</a>\n  </p>\n</div>\n","cookbook/ts-to-js":"<h1 class=\"hero-title text-display-1 \">TypeScript to JavaScript</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Convert Angular 2 TypeScript examples into ES5 JavaScript</p></div>\n<p>Everything that we can do in Angular 2 in TypeScript, we can also do in JavaScript. Translating from one language to the other is mostly a matter of changing the way we organize our code and the way we access Angular 2 APIs.</p> <p>Since TypeScript is a popular language option in Angular 2, many of the code examples you see on the Internet as well as on this site are written in TypeScript. This cookbook contains recipes for translating these kinds of code examples to ES5, so that they can be applied to Angular 2 JavaScript applications.</p> <h2 id=\"toc\">Table of contents</h2> <p><a href=\"#modularity\">Modularity: imports and exports</a></p> <p><a href=\"#class-metadata\">Classes and Class Metadata</a></p> <p><a href=\"#property-metadata\">Input and Output Metadata</a></p> <p><a href=\"#dependency-injection\">Dependency Injection</a></p> <p><a href=\"#other-property-metadata\">Host and Query Metadata</a></p> <p><strong>Run and compare the live <live-example name=\"cb-ts-to-js\">TypeScript</live-example> and <live-example name=\"cb-ts-to-js\" lang=\"js\">JavaScript</live-example> code shown in this cookbook.</strong></p> <h2 id=\"modularity\">Importing and Exporting</h2> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>TypeScript</th>\n<th>ES5 JavaScript</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"importing-angular-2-code\">Importing Angular 2 Code</h3> <p>In TypeScript code, Angular 2 classes, functions, and other members are imported with TypeScript <code>import</code> statements:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { bootstrap }\n  from '@angular/platform-browser-dynamic';\nimport {\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\n</pre>\n</td>\n<td>\n<h3 id=\"accessing-angular-2-code-through-the-ng-global\">Accessing Angular 2 Code through the ng global</h3> <p>In JavaScript code, when using <a href=\"#\">the Angular 2 packages</a>, we can access Angular code through the global <code>ng</code> object. In the nested members of this object we'll find everything we would import from <code>angular2</code> in TypeScript:</p> <pre language=\"js\" format=\"\" data-language=\"js\">var bootstrap =\n  ng.platformBrowserDynamic.bootstrap;\nvar LocationStrategy =\n  ng.common.LocationStrategy;\nvar HashLocationStrategy =\n  ng.common.HashLocationStrategy;\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"importing-and-exporting-application-code\">Importing and Exporting Application Code</h3> <p>Each file in an Angular 2 TypeScript application constitutes a TypeScript module. When we want to make something from a module available to other modules, we <code>export</code> it.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n</pre>\n<p>In other modules we can then <code>import</code> things that have been exported elsewhere.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HeroComponent } from './hero.component';\n</pre>\n</td>\n<td>\n<h3 id=\"sharing-application-code\">Sharing Application Code</h3> <p>In an Angular 2 JavaScript application, we load each file to the page using a <code>&lt;script&gt;</code> tag. Each file can make things available to other files via the shared global <code>window</code> scope.</p> <p>We often introduce an application namespace object (such as <code>\"app\"</code>) onto <code>window</code> and attach everything we need to share to that namespace object. We also wrap our code in an <a href=\"https://en.wikipedia.org/wiki/Immediately-invoked_function_expression\">Immediately Invoked Function Expression (IIFE)</a>. These practices together prevent our code from polluting the global scope.</p> <pre language=\"js\" format=\"\" data-language=\"js\">(function(app) {\n  function HeroComponent() {\n    this.title = \"Hero Detail\";\n  }\n\n  app.HeroComponent = HeroComponent;\n\n})(window.app = window.app || {});\n</pre>\n<p>We can then access anything from this shared namespace in other files.</p> <pre language=\"js\" format=\"\" data-language=\"js\">(function(app) {\n  var HeroComponent = app.HeroComponent;\n})(window.app = window.app || {});\n</pre>\n<p>Note that the order of <code>&lt;script&gt;</code> tags on the page is significant. We must load a file that defines a shared member before a file that uses that member.</p> </td>\n</tr>\n</table>\n<div class=\"alert is-helpful\">\n<p>Alternatively, we can use a module loader such as Webpack or Browserify in an Angular 2 JavaScript project. In such a project, we would use CommonJS modules and the <code>require</code> function to load Angular 2 framework code. We would then use <code>module.exports</code> and <code>require</code> to export and import application code.</p> </div>\n<h2 id=\"class-metadata\">Classes and Class Metadata</h2> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>TypeScript</th>\n<th>ES5 JavaScript</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"classes\">Classes</h3> <p>We put most of our Angular 2 TypeScript code into TypeScript classes.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">export class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"constructors-and-prototypes\">Constructors and Prototypes</h3> <p>ES5 JavaScript has no classes. We use the constructor pattern instead which works with Angular 2 as well as classes do.</p> <pre language=\"js\" format=\"\" data-language=\"js\">function HeroComponent() {\n  this.title = \"Hero Detail\";\n}\n\nHeroComponent.prototype.getName =\n  function() {return 'Windstorm';};\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"metadata-with-decorators\">Metadata with Decorators</h3> <p>Most Angular 2 classes have one or more TypeScript <em>decorators</em> attached to provide configuration and metadata. For example, a component must have a <a href=\"../api/core/index/component-decorator\"><code>@Component</code></a> decorator.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-view',\n  template:\n    '&lt;h1&gt;Hero: {{getName()}}&lt;/h1&gt;'\n})\nexport class HeroComponent {\n  title = 'Hero Detail';\n  getName() {return 'Windstorm'; }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"metadata-with-the-annotations-array\">Metadata with the Annotations Array</h3> <p>In JavaScript, we can attach an <code>annotations</code> array to a constructor to provide metadata. Each item in the array corresponds to a TypeScript decorator.</p> <p>In the following example, we create a new instance of <code>Component</code> that corresponds to the <a href=\"../api/core/index/component-decorator\"><code>@Component</code></a> TypeScript decorator.</p> <pre language=\"js\" format=\"\" data-language=\"js\">  function HeroComponent() {\n    this.title = \"Hero Detail\";\n  }\n\n  HeroComponent.annotations = [\n    new ng.core.Component({\n      selector: 'hero-view',\n      template:\n        '&lt;h1&gt;Hero: {{getName()}}&lt;/h1&gt;'\n    })\n  ];\n  HeroComponent.prototype.getName =\n    function() {return 'Windstorm';};\n</pre>\n<h3 id=\"metadata-with-the-class-convenience-api\">Metadata with The Class Convenience API</h3> <p>The pattern of creating a constructor and decorating it with metadata is so common that Angular provides an alternative convenience API for it. This API lets us define everything in a single expression.</p> <p>With this API we first call the <code>ng.core.Component</code> function, followed by a chained <code>Class</code> method call. The argument to <code>Class</code> is an object that defines the constructor and the instance methods of the component:</p> <pre language=\"js\" format=\"\" data-language=\"js\">var HeroComponent = ng.core.Component({\n    selector: 'hero-view-2',\n    template:\n      '&lt;h1&gt;Name: {{getName()}}&lt;/h1&gt;',\n  })\n  .Class({\n    constructor: function() {\n    },\n    getName: function() {\n      return 'Windstorm';\n    }\n  });\n</pre>\n<p>Similar APIs are also available for other decorators. You can define a directive:</p> <pre>var MyDirective = ng.core.Directive({\n  ...\n}).Class({\n  ...\n});\n</pre>\n<p>Or a pipe:</p> <pre>var MyPipe = ng.core.Pipe({\n  name: 'myPipe'\n}).Class({\n  ...\n});\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"interfaces\">Interfaces</h3> <p>When defining classes that need to implement a certain method, it is common to use TypeScript interfaces that enforce that the method signature is correct. Component lifecycle methods like <code>ngOnInit</code> are one example of this pattern. <code>ngOnInit</code> is defined in the <code>OnInit</code> interface.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { Component, OnInit } from '@angular/core';\nclass HeroComponent\n    implements OnInit {\n  name: string;\n  ngOnInit() {\n    this.name = 'Windstorm';\n  }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"implementing-methods-without-interfaces\">Implementing Methods without Interfaces</h3> <p>TypeScript interfaces are purely for developer convenience and are not used by Angular 2 at runtime. This means that in JavaScript code we don't need to substitute anything for interfaces. We can just implement the methods.</p> <pre language=\"js\" format=\"\" data-language=\"js\">function HeroComponent() {}\nHeroComponent.prototype.ngOnInit =\n  function() {\n    this.name = 'Windstorm';\n  };\n</pre>\n</td>\n</tr>\n</table>\n<h2 id=\"property-metadata\">Input and Output Metadata</h2> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>TypeScript</th>\n<th>ES5 JavaScript</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"input-and-output-decorators\">Input and Output Decorators</h3> <p>In TypeScript, property decorators are often used to provide additional metadata for components and directives.</p> <p>For <a href=\"../guide/template-syntax#inputs-outputs\">inputs and outputs</a>, we use <a href=\"../api/core/index/input-var\"><code>@Input</code></a> and <a href=\"../api/core/index/output-var\"><code>@Output</code></a> property decorators. They may optionally specify input and output binding names if we want them to be different from the class property names.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'my-confirm',\n  template: `\n    &lt;button (click)=\"onOkClick()\"&gt;\n      {{okMsg}}\n    &lt;/button&gt;\n    &lt;button (click)=\"onNotOkClick()\"&gt;\n      {{notOkMsg}}\n    &lt;/button&gt;\n  `\n})\nclass ConfirmComponent {\n  @Input() okMsg: string;\n  @Input('cancelMsg') notOkMsg: string;\n  @Output() ok =\n    new EventEmitter();\n  @Output('cancel') notOk =\n    new EventEmitter();\n\n  onOkClick() {\n    this.ok.next(true);\n  }\n  onNotOkClick() {\n    this.notOk.next(true);\n  }\n}\n</pre>\n<div class=\"alert is-helpful\">\n<p>In TypeScript we can also use the <code>inputs</code> and <code>outputs</code> array metadata instead of the <code>@Input</code> and <code>@Output</code> property decorators.</p> </div>\n</td>\n<td>\n<h3 id=\"inputs-and-outputs-in-component-metadata\">Inputs and Outputs in Component Metadata</h3> <p>There is no equivalent of a property decorator in ES5 JavaScript. Instead, we add comparable information to the <code>Component</code> (or <code>Directive</code>) metadata.</p> <p>In this example, we add <code>inputs</code> and <code>outputs</code> array attributes containing the input and output property names. If we need a binding name that is different from the property itself, we use the <code>propertyName: bindingName</code> syntax.</p> <pre language=\"js\" format=\"\" data-language=\"js\">var ConfirmComponent = ng.core.Component({\n  selector: 'my-confirm',\n  inputs: [\n    'okMsg',\n    'notOkMsg: cancelMsg'\n  ],\n  outputs: [\n    'ok',\n    'notOk: cancel'\n  ],\n  template:\n    '&lt;button (click)=\"onOkClick()\"&gt;' +\n      '{{okMsg}}' +\n    '&lt;/button&gt;' +\n    '&lt;button (click)=\"onNotOkClick()\"&gt;' +\n      '{{notOkMsg}}' +\n    '&lt;/button&gt;'\n}).Class({\n  constructor: function() {\n    this.ok = new ng.core.EventEmitter();\n    this.notOk = new ng.core.EventEmitter();\n  },\n  onOkClick: function() {\n    this.ok.next(true);\n  },\n  onNotOkClick: function() {\n    this.notOk.next(true);\n  }\n});\n</pre>\n</td>\n</tr>\n</table>\n<h2 id=\"dependency-injection\">Dependency Injection</h2> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>TypeScript</th>\n<th>ES5 JavaScript</th>\n</tr>\n<tr>\n<td>\n<h3 id=\"injection-by-type\">Injection by Type</h3> <p>Angular 2 can often use TypeScript type information to determine what needs to be injected.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'hero-di',\n  template: `&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;`\n})\nclass HeroComponent {\n  name: string;\n  constructor(dataService: DataService) {\n    this.name = dataService.getHeroName();\n  }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"injection-with-parameter-tokens\">Injection with Parameter Tokens</h3> <p>Since no type information is available in ES5 JavaScript, we must identify \"injectables\" in some other way.</p> <p>We attach a <code>parameters</code> array to the constructor function. Each array item is the dependency injection token that identifies the thing to be injected. Often the token is the constructor function for the class-like dependency.</p> <pre language=\"js\" format=\"\" data-language=\"js\">app.HeroDIComponent = HeroComponent;\n\nfunction HeroComponent(dataService) {\n  this.name = dataService.getHeroName();\n}\nHeroComponent.parameters = [\n  app.DataService\n];\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-di',\n    template: '&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;'\n  })\n];\n</pre>\n<p>When using the class convenience API, we can also supply the parameter tokens by wrapping the constructor in an array.</p> <pre language=\"js\" format=\"\" data-language=\"js\">var HeroComponent = ng.core.Component({\n  selector: 'hero-di-inline',\n  template: '&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;'\n})\n.Class({\n  constructor:\n    [app.DataService, \n     function(service) {\n       this.name = service.getHeroName();\n     }]\n});\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"injection-with-the-inject-decorator\">Injection with the @Inject decorator</h3> <p>When the thing being injected doesn't correspond directly to a type, we use the <code>@Inject()</code> decorator to supply the injection token.</p> <p>In this example, we're injecting a string identified by the \"heroName\" token.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'hero-di-inject',\n  template: `&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;`\n})\nclass HeroComponent {\n  constructor(\n    @Inject('heroName')\n      private name: string) {\n  }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"injection-with-plain-string-tokens\">Injection with plain string tokens</h3> <p>In JavaScript we add the token string to the injection parameters array.</p> <pre language=\"js\" format=\"\" data-language=\"js\">function HeroComponent(name) {\n  this.name = name;\n}\nHeroComponent.parameters = [\n  'heroName'\n];\nHeroComponent.annotations = [\n  new ng.core.Component({\n    selector: 'hero-di-inject',\n    template: '&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;'\n  })\n];\n</pre>\n<p>Alternatively, we can create a token with the <code>Inject</code> method and add that to the constructor array in the annotations like this:</p> <pre language=\"js\" format=\"\" data-language=\"js\">var HeroComponent = ng.core.Component({\n  selector: 'hero-di-inline2',\n  template: '&lt;h1&gt;Hero: {{name}}&lt;/h1&gt;'\n})\n.Class({\n  constructor:\n    [new ng.core.Inject('heroName'), \n     function(name) {\n       this.name = name;\n     }]\n});\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"additional-injection-decorators\">Additional Injection Decorators</h3> <p>We can attach additional decorators to constructor parameters to qualify the injection behavior. We can mark optional dependencies with the <a href=\"../api/core/index/optional-var\"><code>@Optional</code></a>, inject host element attributes with <a href=\"../api/core/index/attribute-var\"><code>@Attribute</code></a>, inject content child queries with <a href=\"../api/core/index/query-var\"><code>@Query</code></a> and inject view child queries with <a href=\"../api/core/index/viewquery-var\"><code>@ViewQuery</code></a>).</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'hero-title',\n  template: `\n    &lt;h1&gt;{{titlePrefix}} {{title}}&lt;/h1&gt;\n    &lt;button (click)=\"ok()\"&gt;OK&lt;/button&gt;\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  `\n})\nclass TitleComponent {\n  constructor(\n    @Inject('titlePrefix')\n    @Optional()\n      private titlePrefix: string,\n    @Attribute('title')\n      private title: string,\n    @Query('okMsg')\n      private msg: QueryList&lt;ElementRef&gt;) {\n  }\n\n  ok() {\n    let msgEl =\n      this.msg.first.nativeElement;\n    msgEl.textContent = 'OK!';\n  }\n}\n</pre>\n</td>\n<td>\n<h3 id=\"additional-injection-metadata-with-nested-arrays\">Additional Injection Metadata with Nested Arrays</h3> <p>To achieve the same effect in JavaScript, use the constructor array notation in which the injection information precedes the constructor function itself.</p> <p>Use the injection support functions <code>Attribute</code>, <code>Host</code>, <code>Optional</code>, <code>Self</code>, <code>SkipSelf</code>, <code>Query</code> and <code>ViewQuery</code> to qualify dependency injection behavior.</p> <p>Use a nested array to combine injection functions.</p> <pre language=\"js\" format=\"\" data-language=\"js\">var TitleComponent = ng.core.Component({\n  selector: 'hero-title',\n  template:\n    '&lt;h1&gt;{{titlePrefix}} {{title}}&lt;/h1&gt;' +\n    '&lt;button (click)=\"ok()\"&gt;OK&lt;/button&gt;' +\n    '&lt;ng-content&gt;&lt;/ng-content&gt;'\n}).Class({\n  constructor: [\n    [\n      new ng.core.Optional(),\n      new ng.core.Inject('titlePrefix')\n    ],\n    new ng.core.Attribute('title'),\n    [\n      new ng.core.Query('okMsg'),\n      ng.core.ElementRef\n    ],\n    function(titlePrefix, title, msg) {\n      this.titlePrefix = titlePrefix;\n      this.title  = title;\n      this.msg = msg;\n    }\n  ],\n  ok: function() {\n    var msgEl =\n      this.msg.first.nativeElement;\n    msgEl.textContent = 'OK!';\n  }\n});\n</pre>\n<p>We can apply other additional parameter decorators such as <a href=\"../api/core/index/host-var\"><code>@Host</code></a> and <a href=\"../api/core/index/skipself-var\"><code>@SkipSelf</code></a> in the same way - by adding <code>new ng.core.Host()</code> or <code>ng.core.SkipSelf()</code> in the parameters array.</p> </td>\n</tr>\n</table>\n<h2 id=\"other-property-metadata\">Host and Query Metadata</h2> <table width=\"100%\">\n<col width=\"50%\">\n<col width=\"50%\">\n<tr>\n<th>TypeScript</th>\n<th>ES5 JavaScript </th>\n</tr>\n<tr>\n<td>\n<h3 id=\"host-decorators\">Host Decorators</h3> <p>We can use host property decorators to bind a host element to a component or directive. The <a href=\"../api/core/index/hostbinding-var\"><code>@HostBinding</code></a> decorator binds host element properties to component data properties. The <a href=\"../api/core/index/hostlistener-var\"><code>@HostListener</code></a> decorator bimds host element events to component event handlers.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'heroes-bindings',\n  template: `&lt;h1 [class.active]=\"active\"&gt;\n    Tour of Heroes\n  &lt;/h1&gt;`\n})\nclass HeroesComponent {\n  @HostBinding() title = 'Tooltip content';\n  @HostBinding('class.heading')\n    hClass = true;\n  active: boolean;\n\n  constructor() {}\n\n  @HostListener('click')\n  clicked() {\n    this.active = !this.active;\n  }\n\n  @HostListener('dblclick', ['$event'])\n  doubleClicked(evt: Event) {\n    this.active = true;\n  }\n}\n</pre>\n<div class=\"alert is-helpful\">\n<p>In TypeScript we can also use <code>host</code> metadata instead of the <code>@HostBinding</code> and <code>@HostListener</code> property decorators.</p> </div>\n</td>\n<td>\n<h3 id=\"host-metadata\">Host Metadata</h3> <p>We add a <code>host</code> attribute to the component metadata to achieve the same effect as <code>@HostBinding</code> and <code>@HostListener</code>. </p> <p>The <code>host</code> value is an object whose properties are host property and listener bindings:</p> <ul> <li>Each key follows regular Angular 2 binding syntax: <code>[property]</code> for host bindings or <code>(event)</code> for host listeners.</li> <li>Each value identifies the corresponding component property or method.</li> </ul> <pre language=\"js\" format=\"\" data-language=\"js\">var HeroesComponent = ng.core.Component({\n  selector: 'heroes-bindings',\n  template: '&lt;h1 [class.active]=\"active\"&gt;' +\n    'Tour of Heroes' +\n  '&lt;/h1&gt;',\n  host: {\n    '[title]': 'title',\n    '[class.heading]': 'hClass',\n    '(click)': 'clicked()',\n    '(dblclick)': 'doubleClicked($event)'\n  }\n}).Class({\n  constructor: function() {\n    this.title = 'Tooltip content';\n    this.hClass = true;\n  },\n  clicked: function() {\n    this.active = !this.active;\n  },\n  doubleClicked: function(evt) {\n    this.active = true;\n  }\n});\n</pre>\n</td>\n</tr>\n<tr>\n<td>\n<h3 id=\"query-decorators\">Query Decorators</h3> <p>There are several property decorators for querying the descendants of a component or directive.</p> <p>The <a href=\"../api/core/index/viewchild-var\"><code>@ViewChild</code></a> and <a href=\"../api/core/index/viewchildren-var\"><code>@ViewChildren</code></a> property decorators allow a component to query instances of other components that are used in its view.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'heroes-queries',\n  template: `\n    &lt;a-hero *ngFor=\"let hero of heroData\"\n          [hero]=\"hero\"&gt;\n      &lt;active-label&gt;&lt;/active-label&gt;\n    &lt;/a-hero&gt;\n    &lt;button (click)=\"activate()\"&gt;\n      Activate\n    &lt;/button&gt;\n  `\n})\nclass HeroesQueriesComponent {\n  heroData = [\n    {id: 1, name: 'Windstorm'},\n    {id: 2, name: 'Superman'}\n  ];\n\n  @ViewChildren(HeroComponent)\n  heroCmps: QueryList&lt;HeroComponent&gt;;\n\n  activate() {\n    this.heroCmps.forEach(\n      (cmp) =&gt; cmp.activate()\n    );\n  }\n}\n</pre>\n<p>The <a href=\"../api/core/index/contentchild-var\"><code>@ContentChild</code></a> and <a href=\"../api/core/index/contentchildren-var\"><code>@ContentChildren</code></a> property decorators allow a component to query instances of other components that have been projected into its view from elsewhere.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">@Component({\n  selector: 'a-hero',\n  template: `&lt;h2 [class.active]=active&gt;\n    {{hero.name}}\n    &lt;ng-content&gt;&lt;/ng-content&gt;\n  &lt;/h2&gt;`\n})\nclass HeroComponent {\n  @Input() hero: any;\n  active: boolean;\n\n  @ContentChild(ActiveLabelComponent)\n  label: ActiveLabelComponent;\n\n  activate() {\n    this.active = true;\n    this.label.activate();\n  }\n}\n</pre>\n<div class=\"alert is-helpful\">\n<p>In TypeScript we can also use the <code>queries</code> metadata instead of the <code>@ViewChild</code> and <code>@ContentChild</code> property decorators. </p> </div>\n</td>\n<td>\n<h3 id=\"query-metadata\">Query Metadata</h3> <p>We access a component's view children by adding a <code>queries</code> attribute to the component metadata. It should be an object where:</p> <ul> <li>Each key is the name of a component property that will hold the view children</li> <li>Each value is an instance of either <code>ViewChild</code> or <code>ViewChildren</code>.</li> </ul> <pre language=\"js\" format=\"\" data-language=\"js\">var AppComponent = ng.core.Component({\n  selector: 'heroes-queries',\n  template:\n    '&lt;a-hero *ngFor=\"let hero of heroData\"' +\n          '[hero]=\"hero\"&gt;' +\n      '&lt;active-label&gt;&lt;/active-label&gt;' +\n    '&lt;/a-hero&gt;' +\n    '&lt;button (click)=\"activate()\"&gt;' +\n      'Activate' +\n    '&lt;/button&gt;',    \n  queries: {\n    heroCmps: new ng.core.ViewChildren(\n                    HeroComponent)\n  }\n}).Class({\n  constructor: function() {\n    this.heroData = [\n      {id: 1, name: 'Windstorm'},\n      {id: 2, name: 'Superman'}\n    ];\n  },\n  activate: function() {\n    this.heroCmps.forEach(function(cmp) {\n      cmp.activate();\n    });\n  }\n});\n</pre>\n<p>We add <em>content</em> child queries to the same <code>queries</code> attribute in the same manner, using instances of <code>ContentChild</code> or <code>ContentChildren</code>:</p> <pre language=\"js\" format=\"\" data-language=\"js\">var HeroComponent = ng.core.Component({\n  selector: 'a-hero',\n  template: '&lt;h2 [class.active]=active&gt;' +\n    '{{hero.name}} ' +\n    '&lt;ng-content&gt;&lt;/ng-content&gt;' +\n  '&lt;/h2&gt;',\n  inputs: ['hero'],\n  queries: {\n    label: new ng.core.ContentChild(\n                 ActiveLabelComponent)\n  }\n}).Class({\n  constructor: [function() { }],\n  activate: function() {\n    this.active = true;\n    this.label.activate();\n  }\n});\napp.HeroQueriesComponent = HeroComponent;\n</pre>\n</td>\n</tr>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/cookbook/ts-to-js.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/cookbook/ts-to-js.html</a>\n  </p>\n</div>\n","api/common/index/controlvalueaccessor-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlValueAccessor {\n  writeValue(obj: any) : void\n  registerOnChange(fn: any) : void\n  registerOnTouched(fn: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A bridge between a control and a native element.</p> <p>A <code>ControlValueAccessor</code> abstracts the operations of writing a new value to a DOM element representing an input control.</p> <p>Please see <a href=\"defaultvalueaccessor-directive\"><code>DefaultValueAccessor</code></a> for more information.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(obj: any) : void</pre>\n<p>Write a new value to the element.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: any) : void</pre>\n<p>Set the function to be called when the control receives a change event.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: any) : void</pre>\n<p>Set the function to be called when the control receives a touch event.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/control_value_accessor.ts#L9-L36\">@angular/common/src/forms-deprecated/directives/control_value_accessor.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/ControlValueAccessor-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/ControlValueAccessor-interface.html</a>\n  </p>\n</div>\n","api/common/index/currencypipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CurrencyPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CurrencyPipe {\n  transform(value: any, currencyCode?: string, symbolDisplay?: boolean, digits?: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>WARNING: this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an polyfill, for example: [<a href=\"https://github.com/andyearnshaw/Intl.js/\">https://github.com/andyearnshaw/Intl.js/</a>].</p> <p>Formats a number as local currency.</p> <h3 id=\"usage\">Usage</h3> <pre><code>expression | currency[:currencyCode[:symbolDisplay[:digitInfo]]]\n</code></pre>\n<p>where <code>currencyCode</code> is the ISO 4217 currency code, such as \"USD\" for the US dollar and \"EUR\" for the euro. <code>symbolDisplay</code> is a boolean indicating whether to use the currency symbol (e.g. $) or the currency code (e.g. USD) in the output. The default for this value is <code>false</code>. For more information about <code>digitInfo</code> see <a href=\"decimalpipe-class\"><code>DecimalPipe</code></a></p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'currency-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;A: {{a | currency:'USD':false}}&lt;/p&gt;\n    &lt;p&gt;B: {{b | currency:'USD':true:'4.2-2'}}&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class CurrencyPipeExample {\n  a: number = 0.259;\n  b: number = 1.3495;\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CurrencyPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'currency'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, currencyCode?: string, symbolDisplay?: boolean, digits?: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/number_pipe.ts#L122-L156\">@angular/common/src/pipes/number_pipe.ts (line 122)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/CurrencyPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/CurrencyPipe-class.html</a>\n  </p>\n</div>\n","guide/upgrade":"<h1 class=\"hero-title text-display-1 \">Upgrading from 1.x</h1>\n\n<div class=\"banner\"><p class=\"text-body\">Angular 1 applications can be incrementally upgraded to Angular 2.</p></div>\n<div class=\"alert is-important\">\n<p>This guide is still in the process of being updated to RC5 and it's samples may not work correctly.</p> </div>\n<p>Having an existing Angular 1 application doesn't mean that we can't begin enjoying everything Angular 2 has to offer. That's because Angular 2 comes with built-in tools for migrating Angular 1 projects over to the Angular 2 platform.</p> <p>Some applications will be easier to upgrade than others, and there are ways in which we can make it easier for ourselves. It is possible to prepare and align Angular 1 applications with Angular 2 even before beginning the upgrade process. These preparation steps are all about making the code more decoupled, more maintainable, and up to speed with modern development tools. That means the preparation work will not only make the eventual upgrade easier, but will also generally improve our Angular 1 applications.</p> <p>One of the keys to a successful upgrade is to do it incrementally, by running the two frameworks side by side in the same application, and porting Angular 1 components to Angular 2 one by one. This makes it possible to upgrade even large and complex applications without disrupting other business, because the work can be done collaboratively and spread over a period of time. The <code>upgrade</code> module in Angular 2 has been designed to make incremental upgrading seamless.</p> <ol> <li>\n<a href=\"#preparation\">Preparation</a><ol> <li><a href=\"#following-the-angular-style-guide\">Following The Angular Style Guide</a></li> <li><a href=\"#using-a-module-loader\">Using a Module Loader</a></li> <li><a href=\"#migrating-to-typescript\">Migrating to TypeScript</a></li> <li><a href=\"#using-component-directives\">Using Component Directives</a></li> </ol> </li> <li>\n<a href=\"#upgrading-with-the-upgrade-adapter\">Upgrading with The Upgrade Adapter</a><ol> <li><a href=\"#how-the-upgrade-adapter-works\">How The Upgrade Adapter Works</a></li> <li><a href=\"#bootstrapping-hybrid-angular-1-2-applications\">Bootstrapping Hybrid Angular 1+2 Applications</a></li> <li><a href=\"#using-angular-2-components-from-angular-1-code\">Using Angular 2 Components from Angular 1 Code</a></li> <li><a href=\"#using-angular-1-component-directives-from-angular-2-code\">Using Angular 1 Component Directives from Angular 2 Code</a></li> <li><a href=\"#projecting-angular-1-content-into-angular-2-components\">Projecting Angular 1 Content into Angular 2 Components</a></li> <li><a href=\"#transcluding-angular-2-content-into-angular-1-component-directives\">Transcluding Angular 2 Content into Angular 1 Component Directives</a></li> <li><a href=\"#making-angular-1-dependencies-injectable-to-angular-2\">Making Angular 1 Dependencies Injectable to Angular 2</a></li> <li><a href=\"#making-angular-2-dependencies-injectable-to-angular-1\">Making Angular 2 Dependencies Injectable to Angular 1</a></li> </ol> </li> <li>\n<a href=\"#phonecat-upgrade-tutorial\">PhoneCat Upgrade Tutorial</a><ol> <li><a href=\"#switching-to-typescript\">Switching to TypeScript</a></li> <li><a href=\"#installing-angular-2\">Installing Angular 2</a></li> <li><a href=\"#bootstrapping-a-hybrid-1-2-phonecat\">Bootstrapping A Hybrid 1+2 PhoneCat</a></li> <li><a href=\"#upgrading-the-phone-service\">Upgrading the Phone service</a></li> <li><a href=\"#upgrading-components\">Upgrading Components</a></li> <li><a href=\"#switching-to-the-angular-2-router-and-bootstrap\">Switching To The Angular 2 Router And Bootstrap</a></li> <li><a href=\"#saying-goodbye-to-angular-1\">Saying Goodbye to Angular 1</a></li> </ol> </li> <li><a href=\"#appendix-upgrading-phonecat-tests\">Appendix: Upgrading PhoneCat Tests</a></li> </ol> <h1 id=\"preparation\">Preparation</h1> <p>There are many ways to structure Angular 1 applications. When we begin to upgrade these applications to Angular 2, some will turn out to be much more easy to work with than others. There are a few key techniques and patterns that we can apply to future proof our apps even before we begin the migration.</p> <h2 id=\"following-the-angular-style-guide\">Following The Angular Style Guide</h2> <p>The <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\">Angular 1 Style Guide</a> collects patterns and practices that have been proven to result in cleaner and more maintainable Angular 1 applications. It contains a wealth of information about how to write and organize Angular code - and equally importantly - how <strong>not</strong> to write and organize Angular code.</p> <p>Angular 2 is a reimagined version of the best parts of Angular 1. In that sense, its goals are the same as the Angular Style Guide's: To preserve the good parts of Angular 1, and to avoid the bad parts. There's a lot more to Angular 2 than just that of course, but this does mean that <em>following the style guide helps make your Angular 1 app more closely aligned with Angular 2</em>.</p> <p>There are a few rules in particular that will make it much easier to do <em>an incremental upgrade</em> using the Angular 2 <code>upgrade</code> module:</p> <ul> <li>The <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\">Rule of 1</a> states that there should be one component per file. This not only makes components easy to navigate and find, but will also allow us to migrate them between languages and frameworks one at a time. In this example application, each controller, component, service, and filter is in its own source file.</li> <li>The <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#folders-by-feature-structure\">Folders-by-Feature Structure</a> and <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity\">Modularity</a> rules define similar principles on a higher level of abstraction: Different parts of the application should reside in different directories and Angular modules.</li> </ul> <p>When an application is laid out feature per feature in this way, it can also be migrated one feature at a time. For applications that don't already look like this, applying the rules in the Angular style guide is a highly recommended preparation step. And this is not just for the sake of the upgrade - it is just solid advice in general!</p> <h2 id=\"using-a-module-loader\">Using a Module Loader</h2> <p>When we break application code down into one component per file, we often end up with a project structure with a large number of relatively small files. This is a much neater way to organize things than a small number of large files, but it doesn't work that well if you have to load all those files to the HTML page with &lt;script&gt; tags. Especially when you also have to maintain those tags in the correct order. That's why it's a good idea to start using a <em>module loader</em>.</p> <p>Using a module loader such as <a href=\"https://github.com/systemjs/systemjs\">SystemJS</a>, <a href=\"http://webpack.github.io/\">Webpack</a>, or <a href=\"http://browserify.org/\">Browserify</a> allows us to use the built-in module systems of the TypeScript or ES2015 languages in our apps. We can use the <code>import</code> and <code>export</code> features that explicitly specify what code can and will be shared between different parts of the application. For ES5 applications we can use CommonJS style <code>require</code> and <code>module.exports</code> features. In both cases, the module loader will then take care of loading all the code the application needs in the correct order.</p> <p>When we then take our applications into production, module loaders also make it easier to package them all up into production bundles with batteries included.</p> <h2 id=\"migrating-to-typescript\">Migrating to TypeScript</h2> <p>If part of our Angular 2 upgrade plan is to also take TypeScript into use, it makes sense to bring in the TypeScript compiler even before the upgrade itself begins. This means there's one less thing to learn and think about during the actual upgrade. It also means we can start using TypeScript features in our Angular 1 code.</p> <p>Since TypeScript is a superset of ECMAScript 2015, which in turn is a superset of ECMAScript 5, \"switching\" to TypeScript doesn't necessarily require anything more than installing the TypeScript compiler and switching renaming files from <code>*.js</code> to <code>*.ts</code>. But just doing that is not hugely useful or exciting, of course. Additional steps like the following can give us much more bang for the buck:</p> <ul> <li>For applications that use a module loader, TypeScript imports and exports (which are really ECMAScript 2015 imports and exports) can be used to organize code into modules.</li> <li>Type annotations can be gradually added to existing functions and variables to pin down their types and get benefits like build-time error checking, great autocompletion support and inline documentation.</li> <li>JavaScript features new to ES2015, like arrow functions, <code>let</code>s and <code>const</code>s, default function parameters, and destructuring assignments can also be gradually added to make the code more expressive.</li> <li>Services and controllers can be turned into <em>classes</em>. That way they'll be a step closer to becoming Angular 2 service and component classes, which will make our life easier once we do the upgrade.</li> </ul> <h2 id=\"using-component-directives\">Using Component Directives</h2> <p>In Angular 2, components are the main primitive from which user interfaces are built. We define the different parts of our UIs as components, and then compose the UI by using components in our templates.</p> <p>You can also do this in Angular 1, using <em>component directives</em>. These are directives that define their own templates, controllers, and input/output bindings - the same things that Angular 2 components define. Applications built with component directives are much easier to migrate to Angular 2 than applications built with lower-level features like <code>ng-controller</code>, <code>ng-include</code>, and scope inheritance.</p> <p>To be Angular 2 compatible, an Angular 1 component directive should configure these attributes:</p> <ul> <li>\n<code>restrict: 'E'</code>. Components are usually used as elements.</li> <li>\n<code>scope: {}</code> - an isolate scope. In Angular 2, components are always isolated from their surroundings, and we should do this in Angular 1 too.</li> <li>\n<code>bindToController: {}</code>. Component inputs and outputs should be bound to the controller instead of using the <code>$scope</code>.</li> <li>\n<code>controller</code> and <code>controllerAs</code>. Components have their own controllers.</li> <li>\n<code>template</code> or <code>templateUrl</code>. Components have their own templates.</li> </ul> <p>Component directives may also use the following attributes:</p> <ul> <li>\n<code>transclude: true</code>, if the component needs to transclude content from elsewhere.</li> <li>\n<code>require</code>, if the component needs to communicate with some parent component's controller.</li> </ul> <p>Component directives <strong>may not</strong> use the following attributes:</p> <ul> <li>\n<code>compile</code>. This will not be supported in Angular 2.</li> <li>\n<code>replace: true</code>. Angular 2 never replaces a component element with the component template. This attribute is also deprecated in Angular 1.</li> <li>\n<code>priority</code> and <code>terminal</code>. While Angular 1 components may use these, they are not used in Angular 2 and it is better not to write code that relies on them.</li> </ul> <p>An Angular 1 component directive that is fully aligned with the Angular 2 architecture may look something like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">export function heroDetailDirective() {\n  return {\n    restrict: 'E',\n    scope: {},\n    bindToController: {\n      hero: '=',\n      deleted: '&amp;'\n    },\n    template: `\n      &lt;h2&gt;{{ctrl.hero.name}} details!&lt;/h2&gt;\n      &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{ctrl.hero.id}}&lt;/div&gt;\n      &lt;button ng-click=\"ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n    `,\n    controller: function() {\n      this.onDelete = () =&gt; {\n        this.deleted({hero: this.hero});\n      };\n    },\n    controllerAs: 'ctrl'\n  };\n}\n</pre>\n<p>Angular 1.5 introduces the <a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">component API</a> that makes it easier to define directives like these. It is a good idea to use this API for component directives for several reasons:</p> <ul> <li>It requires less boilerplate code.</li> <li>It enforces the use of component best practices like <code>controllerAs</code>.</li> <li>It has good default values for directive attributes like <code>scope</code> and <code>restrict</code>.</li> </ul> <p>The component directive example from above looks like this when expressed using the component API:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">export const heroDetail = {\n  bindings: {\n    hero: '&lt;',\n    deleted: '&amp;'\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{$ctrl.hero.id}}&lt;/div&gt;\n    &lt;button ng-click=\"$ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n  `,\n  controller: function() {\n    this.onDelete = () =&gt; {\n      this.deleted(this.hero);\n    };\n  }\n};\n</pre>\n<p>Controller lifecycle hook methods <code>$onInit()</code>, <code>$onDestroy()</code>, and <code>$onChanges()</code> are another convenient feature that Angular 1.5 introduces. They all have nearly exact <a href=\"lifecycle-hooks\">equivalents in Angular 2</a>, so organizing component lifecycle logic around them will ease the eventual Angular 2 upgrade process.</p> <h1 id=\"upgrading-with-the-upgrade-adapter\">Upgrading with The Upgrade Adapter</h1> <p>The <code>upgrade</code> module in Angular 2 is a very useful tool for upgrading anything but the smallest of applications. With it we can mix and match Angular 1 and 2 components in the same application and have them interoperate seamlessly. That means we don't have to do the upgrade work all at once, since there's a natural coexistence between the two frameworks during the transition period.</p> <h2 id=\"how-the-upgrade-adapter-works\">How The Upgrade Adapter Works</h2> <p>The primary tool provided by the upgrade module is called the <code>UpgradeAdapter</code>. This is a service that can bootstrap and manage hybrid applications that support both Angular 2 and Angular 1 code.</p> <p>When we use <code>UpgradeAdapter</code>, what we're really doing is <em>running both versions of Angular at the same time</em>. All Angular 2 code is running in the Angular 2 framework, and Angular 1 code in the Angular 1 framework. Both of these are the actual, fully featured versions of the frameworks. There is no emulation going on, so we can expect to have all the features and natural behavior of both frameworks.</p> <p>What happens on top of this is that components and services managed by one framework can interoperate with those from the other framework. This happens in three main areas: Dependency injection, the DOM, and change detection.</p> <h3 id=\"dependency-injection\">Dependency Injection</h3> <p>Dependency injection is front and center in both Angular 1 and Angular 2, but there are some key differences between the two frameworks in how it actually works.</p> <table>\n<tr>\n<th>Angular 1</th>\n<th>Angular 2</th>\n</tr>\n<tr>\n<td>\n<p>Dependency injection tokens are always strings</p> </td>\n<td>\n<p>Tokens <a href=\"dependency-injection\">can have different types</a>. They are often classes. They may also be strings.</p> </td>\n</tr>\n<tr>\n<td>\n<p>There is exactly one injector. Even in multi-module applications, everything is poured into one big namespace.</p> </td>\n<td>\n<p>There is a <a href=\"hierarchical-dependency-injection\">tree hierarchy of injectors</a>, with a root injector and an additional injector for each component.</p> </td>\n</tr>\n</table>\n<p>Even accounting for these differences we can still have dependency injection interoperability. The <code>UpgradeAdapter</code> resolves the differences and makes everything work seamlessly:</p> <ul> <li>We can make Angular 1 services available for injection to Angular 2 code by <em>upgrading</em> them. The same singleton instance of each service is shared between the frameworks. In Angular 2 these services will always be in the <em>root injector</em> and available to all components. They will always have <em>string tokens</em> - the same tokens that they have in Angular 1.</li> <li>We can also make Angular 2 services available for injection to Angular 1 code by <em>downgrading</em> them. Only services from the Angular 2 root injector can be downgraded. Again, the same singleton instances are shared between the frameworks. When we register a downgrade, we explicitly specify a <em>string token</em> that we want to use in Angular 1.</li> </ul> <img src=\"https://angular.io/resources/images/devguide/upgrade/injectors.png\" alt=\"The two injectors in a hybrid application\" width=\"700\"><h3 id=\"components-and-the-dom\">Components and the DOM</h3> <p>What we'll find in the DOM of a hybrid application are components and directives from both Angular 1 and Angular 2. These components communicate with each other by using the input and output bindings of their respective frameworks, which the <code>UpgradeAdapter</code> bridges together. They may also communicate through shared injected dependencies, as described above.</p> <p>There are two key things to understand about what happens in the DOM of a hybrid application:</p> <ol> <li>Every element in the DOM is owned by exactly one of the two frameworks. The other framework ignores it. If an element is owned by Angular 1, Angular 2 treats it as if it didn't exist, and vice versa.</li> <li>The root of the application <em>is always an Angular 1 template</em>.</li> </ol> <p>So a hybrid application begins life as an Angular 1 application, and it is Angular 1 that processes its root template. Angular 2 then steps into the picture when an Angular 2 component is used somewhere in the application templates. That component's view will then be managed by Angular 2, and it may use any number of Angular 2 components and directives.</p> <p>Beyond that, we may interleave the two frameworks as much as we need to. We always cross the boundary between the two frameworks by one of two ways:</p> <ol> <li>By using a component from the other framework: An Angular 1 template using an Angular 2 component, or an Angular 2 template using an Angular 1 component.</li> <li>By transcluding or projecting content from the other framework. The <code>UpgradeAdapter</code> bridges the related concepts of Angular 1 transclusion and Angular 2 content projection together.</li> </ol> <img src=\"https://angular.io/resources/images/devguide/upgrade/dom.png\" alt=\"DOM element ownership in a hybrid application\" width=\"500\"><p>Whenever we use a component that belongs to the other framework, a switch between framework boundaries occurs. However, that switch only happens to the <em>children</em> of the component element. Consider a situation where we use an Angular 2 component from Angular 1 like this:</p> <pre><code>&lt;ng2-component&gt;&lt;/ng2-component&gt;\n</code></pre>\n<p>The DOM element <code>&lt;ng2-component&gt;</code> will remain to be an Angular 1 managed element, because it's defined in an Angular 1 template. That also means you can apply additional Angular 1 directives to it, but <em>not</em> Angular 2 directives. It is only in the template of the <code>Ng2Component</code> component where Angular 2 steps in. This same rule also applies when you use Angular 1 component directives from Angular 2.</p> <h3 id=\"change-detection\">Change Detection</h3> <p>Change detection in Angular 1 is all about <code>scope.$apply()</code>. After every event that occurs, <code>scope.$apply()</code> gets called. This is done either automatically by the framework, or in some cases manually by our own code. It is the point in time when change detection occurs and data bindings get updated.</p> <p>In Angular 2 things are different. While change detection still occurs after every event, no one needs to call <code>scope.$apply()</code> for that to happen. This is because all Angular 2 code runs inside something called the <a href=\"../api/core/index/ngzone-class\">Angular zone</a>. Angular always knows when the code finishes, so it also knows when it should kick off change detection. The code itself doesn't have to call <code>scope.$apply()</code> or anything like it.</p> <p>In the case of hybrid applications, the <code>UpgradeAdapter</code> bridges the Angular 1 and Angular 2 approaches. Here's what happens:</p> <ul> <li>Everything that happens in the application runs inside the Angular 2 zone. This is true whether the event originated in Angular 1 or Angular 2 code. The zone triggers Angular 2 change detection after every event.</li> <li>The <code>UpgradeAdapter</code> will invoke the Angular 1 <code>$rootScope.$apply()</code> after every turn of the Angular zone. This also triggers Angular 1 change detection after every event.</li> </ul> <img src=\"https://angular.io/resources/images/devguide/upgrade/change_detection.png\" alt=\"Change detection in a hybrid application\" width=\"600\"><p>What this means in practice is that we do not need to call <code>$apply()</code> in our code, regardless of whether it is in Angular 1 on Angular 2. The <code>UpgradeAdapter</code> does it for us. We <em>can</em> still call <code>$apply()</code> so there is no need to remove such calls from existing code. Those calls just don't have any effect in a hybrid application.</p> <p>When we downgrade an Angular 2 component and then use it from Angular 1, the component's inputs will be watched using Angular 1 change detection. When those inputs change, the corresponding properties in the component are set. We can also hook into the changes by implementing the <a href=\"../api/core/index/onchanges-class\">OnChanges</a> interface in the component, just like we could if it hadn't been downgraded.</p> <p>Correspondingly, when we upgrade an Angular 1 component and use it from Angular 2, all the bindings defined for the component directive's <code>scope</code> (or <code>bindToController</code>) will be hooked into Angular 2 change detection. They will be treated as regular Angular 2 inputs and set onto the scope (or controller) when they change.</p> <h2 id=\"bootstrapping-hybrid-angular-1-2-applications\">Bootstrapping Hybrid Angular 1+2 Applications</h2> <p>The first step to upgrading an application using the <code>UpgradeAdapter</code> is always to bootstrap it as a hybrid that supports both Angular 1 and Angular 2.</p> <p>Pure Angular 1 applications can be bootstrapped in two ways: By using an <code>ng-app</code> directive somewhere on the HTML page, or by calling <a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\">angular.bootstrap</a> from JavaScript. In Angular 2, only the second method is possible - there is no <code>ng-app</code> in Angular 2. This is also the case for hybrid applications. Therefore, it is a good preliminary step to switch Angular 1 applications to use the JavaScript bootstrap method even before switching them to hybrid mode.</p> <p>Say we have an <code>ng-app</code> driven bootstrap such as this one:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\">&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.3/angular.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"app/1-ng-app/app.module.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n  &lt;body <span class=\"otl\">ng-app=\"heroApp\" ng-strict-di</span>&gt;\n    &lt;div id=\"message\" ng-controller=\"MainCtrl as mainCtrl\"&gt;\n      {{ mainCtrl.message }}\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>We can remove the <code>ng-app</code> and <code>ng-strict-di</code> directives from the HTML and instead switch to calling <code>angular.bootstrap</code> from JavaScript, which will result in the same thing:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">angular.bootstrap(document.body, ['heroApp'], {strictDi: true});\n</pre>\n<p>To then switch the application into hybrid mode, we must first install Angular 2 to the project. Follow the instructions in <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">the QuickStart</a> for some pointers on this. When we have Angular 2 installed, we can import and instantiate the <code>UpgradeAdapter</code>, and then call its <code>bootstrap</code> method. It is designed to take the exact same arguments as <a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\">angular.bootstrap</a> so that it is easy to make the switch:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { UpgradeAdapter } from '@angular/upgrade';\n\n/* . . . */\n\nconst upgradeAdapter = new UpgradeAdapter();\n\nupgradeAdapter.bootstrap(document.body, ['heroApp'], {strictDi: true});\n</pre>\n<p>At this point we'll be running a hybrid Angular 1+2 application! All the existing Angular 1 code will work as it always did, but we are now ready to run Angular 2 code as well.</p> <div class=\"alert is-helpful\">\n<p>One notable difference between <code>angular.bootstrap</code> and <code>upgradeAdapter.bootstrap</code> is that the latter works <em>asynchronously</em>. This means that we cannot assume that the application has been instantiated immediately after the bootstrap call returns.</p> </div>\n<p>As we begin to migrate components to Angular 2, we'll be using the <code>UpgradeAdapter</code> for more than just bootstrapping. It'll be important to use the <strong>same</strong> instance of the adapter across the whole application, because it stores internal information about what's going on in the application. It'll be useful to have a module for a shared <code>UpgradeAdapter</code> instance in the project:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"upgrade_adapter.ts\">// upgrade_adapter.ts\n\nimport { UpgradeAdapter } from '@angular/upgrade';\nexport const upgradeAdapter = new UpgradeAdapter();\n</pre>\n<p>This shared instance can then be pulled in to all the modules that need it:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { upgradeAdapter } from './upgrade_adapter';\n\n/* . . . */\n\nupgradeAdapter.bootstrap(document.body, ['heroApp'], {strictDi: true});\n</pre>\n<h2 id=\"using-angular-2-components-from-angular-1-code\">Using Angular 2 Components from Angular 1 Code</h2> <img src=\"https://angular.io/resources/images/devguide/upgrade/a1-to-a2.png\" alt=\"Using an Angular 2 component from Angular 1 code\" align=\"left\" style=\"width:250px\"><p>Once we're running a hybrid app, we can start the gradual process of upgrading code. One of the more common patterns for doing that is to use an Angular 2 component in an Angular 1 context. This could be a completely new component or one that was previously Angular 1 but has been rewritten for Angular 2.</p> <p>Say we have a simple Angular 2 component that shows information about a hero:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nimport { Component } from '@angular/core';\n\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;Windstorm details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;1&lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent {\n\n}\n</pre>\n<p>If we want to use this component from Angular 1, we need to <em>downgrade</em> it using the upgrade adapter. What we get when we do that is an Angular 1 <em>directive</em>, which we can then register into our Angular 1 module:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { HeroDetailComponent } from './hero-detail.component';\n\n/* . . . */\n\nangular.module('heroApp', [])\n  .directive('heroDetail', upgradeAdapter.downgradeNg2Component(HeroDetailComponent));\n</pre>\n<p>What we have here is an Angular 1 directive called <code>heroDetail</code>, which we can use like any other directive in our Angular 1 templates.</p> <pre language=\"html\" format=\"\" data-language=\"html\">&lt;hero-detail&gt;&lt;/hero-detail&gt;\n</pre>\n<div class=\"alert is-helpful\">\n<p>Note that since Angular 1 directives are matched based on their name, <em>the selector metadata of the Angular 2 component is not used in Angular 1</em>. It is matched as an element directive (<code>restrict: 'E'</code>) called <code>heroDetail</code>.</p> </div>\n<p>Most components are not quite this simple, of course. Many of them have <em>inputs and outputs</em> that connect them to the outside world. An Angular 2 hero detail component with inputs and outputs might look like this:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Hero } from '../hero';\n\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{hero.id}}&lt;/div&gt;\n    &lt;button (click)=\"onDelete()\"&gt;Delete&lt;/button&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n  @Output() deleted = new EventEmitter&lt;Hero&gt;();\n  onDelete() {\n    this.deleted.emit(this.hero);\n  }\n}\n</pre>\n<p>These inputs and outputs can be supplied from the Angular 1 template, and the <code>UpgradeAdapter</code> takes care of bridging them over:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\">&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"mainCtrl.hero\"\n               (deleted)=\"mainCtrl.onDelete($event)\"&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n</pre>\n<p>Note that even though we are in an Angular 1 template, <strong>we're using Angular 2 attribute syntax to bind the inputs and outputs</strong>. This is a requirement for downgraded components. The expressions themselves are still regular Angular 1 expressions.</p> <div class=\"callout is-important\">\n<header>Use kebab-case for downgraded component attributes</header><p>There's one notable exception to the rule of using Angular 2 attribute syntax for downgraded components. It has to do with input or output names that consist of multiple words. In Angular 2 we would bind these attributes using camelCase:</p> <pre format=\"\">[myHero]=\"hero\"</pre>\n<p>But when using them from Angular 1 templates, we need to use kebab-case:</p> <pre format=\"\">[my-hero]=\"hero\"\n</pre>\n</div>\n<p>The <code>$event</code> variable can be used in outputs to gain access to the object that was emitted. In this case it will be the <code>Hero</code> object, because that is what was passed to <code>this.deleted.emit()</code>.</p> <p>Since this is an Angular 1 template, we can still use other Angular 1 directives on the element, even though it has Angular 2 binding attributes on it. For example, we can easily make multiple copies of the component using <code>ng-repeat</code>:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\">&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"hero\"\n               (deleted)=\"mainCtrl.onDelete($event)\"\n               ng-repeat=\"hero in mainCtrl.heroes\"&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n</pre>\n<h2 id=\"using-angular-1-component-directives-from-angular-2-code\">Using Angular 1 Component Directives from Angular 2 Code</h2> <img src=\"https://angular.io/resources/images/devguide/upgrade/a2-to-a1.png\" alt=\"Using an Angular 1 component from Angular 2 code\" align=\"left\" style=\"width:250px\"><p>So, we can write an Angular 2 component and then use it from Angular 1 code. This is very useful when we start our migration from lower-level components and work our way up. But in some cases it is more convenient to do things in the opposite order: To start with higher-level components and work our way down. This too can be done using the <code>UpgradeAdapter</code>. We can <em>upgrade</em> Angular 1 component directives and then use them from Angular 2.</p> <p>Not all kinds of Angular 1 directives can be upgraded. The directive really has to be a <em>component directive</em>, with the characteristics <a href=\"#using-component-directives\">described in the preparation guide above</a>. Our safest bet for ensuring compatibility is using the <a href=\"https://docs.angularjs.org/api/ng/type/angular.Module\">component API</a> introduced in Angular 1.5.</p> <p>A simple example of an upgradable component is one that just has a template and a controller:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nexport const heroDetail = {\n  template: `\n    &lt;h2&gt;Windstorm details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;1&lt;/div&gt;\n  `,\n  controller: function() {\n  }\n};\n</pre>\n<p>We can <em>upgrade</em> this component to Angular 2 using the <code>UpgradeAdapter</code>'s <code>upgradeNg1Component</code> method. It takes the name of an Angular 1 component directive and returns an Angular 2 <strong>component class</strong>. When we then want to use it from an Angular 2 component, we list it the in the <code>directives</code> metadata of the component and then just use it in the Angular 2 template:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"container.component.ts\">// container.component.ts\n\nimport { Component } from '@angular/core';\nimport { upgradeAdapter } from './upgrade_adapter';\n\nconst HeroDetail = upgradeAdapter.upgradeNg1Component('heroDetail');\n\n@Component({\n  selector: 'my-container',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;hero-detail&gt;&lt;/hero-detail&gt;\n  `,\n  directives: [HeroDetail]\n})\nexport class ContainerComponent {\n\n}\n</pre>\n<div class=\"alert is-helpful\">\n<p>Upgraded components always have an element selector, which is based on the original name of the original Angular 1 component directive.</p> </div>\n<p>An upgraded component may also have inputs and outputs, as defined by the scope/controller bindings of the original Angular 1 component directive. When we use the component from an Angular 2 template, we provide the inputs and outputs using <strong>Angular 2 template syntax</strong>, with the following rules:</p> <table>\n<tr>\n<th></th>\n<th>Binding definition</th>\n<th>Template syntax</th>\n</tr>\n<tr>\n<th>Attribute binding</th>\n<td>\n<p><code>myAttribute: '@myAttribute'</code></p> </td>\n<td>\n<p><code>&lt;my-component myAttribute=\"value\"&gt;</code></p> </td>\n</tr>\n<tr>\n<th>Expression binding</th>\n<td>\n<p><code>myOutput: '&amp;myOutput'</code></p> </td>\n<td>\n<p><code>&lt;my-component (myOutput)=\"action()\"&gt;</code></p> </td>\n</tr>\n<tr>\n<th>One-way binding</th>\n<td>\n<p><code>myValue: '&lt;myValue'</code></p> </td>\n<td>\n<p><code>&lt;my-component [myValue]=\"anExpression\"&gt;</code></p> </td>\n</tr>\n<tr>\n<th>Two-way binding</th>\n<td>\n<p><code>myValue: '=myValue'</code></p> </td>\n<td>\n<p>As a two-way binding: <code>&lt;my-component [(myValue)]=\"anExpression\"&gt;</code>. Since most Angular 1 two-way bindings actually only need a one-way binding in practice, <code>&lt;my-component [myValue]=\"anExpression\"&gt;</code> is often enough.</p> </td>\n</tr>\n</table>\n<p>As an example, say we have a hero detail Angular 1 component directive with one input and one output:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nexport const heroDetail = {\n  bindings: {\n    hero: '&lt;',\n    deleted: '&amp;'\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}} details!&lt;/h2&gt;\n    &lt;div&gt;&lt;label&gt;id: &lt;/label&gt;{{$ctrl.hero.id}}&lt;/div&gt;\n    &lt;button ng-click=\"$ctrl.onDelete()\"&gt;Delete&lt;/button&gt;\n  `,\n  controller: function() {\n    this.onDelete = () =&gt; {\n      this.deleted(this.hero);\n    };\n  }\n};\n</pre>\n<p>We can upgrade this component to Angular 2, and then provide the input and output using Angular 2 template syntax:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"container.component.ts\">// container.component.ts\n\nimport { Component } from '@angular/core';\nimport { upgradeAdapter } from './upgrade_adapter';\nimport { Hero } from '../hero';\n\nconst HeroDetail = upgradeAdapter.upgradeNg1Component('heroDetail');\n\n@Component({\n  selector: 'my-container',\n  template: `\n    &lt;h1&gt;Tour of Heroes&lt;/h1&gt;\n    &lt;hero-detail [hero]=\"hero\"\n                 (deleted)=\"heroDeleted($event)\"&gt;\n    &lt;/hero-detail&gt;\n  `,\n  directives: [HeroDetail]\n})\nexport class ContainerComponent {\n  hero = new Hero(1, 'Windstorm');\n  heroDeleted(hero: Hero) {\n    hero.name = 'Ex-' + hero.name;\n  }\n}\n</pre>\n<h2 id=\"projecting-angular-1-content-into-angular-2-components\">Projecting Angular 1 Content into Angular 2 Components</h2> <img src=\"https://angular.io/resources/images/devguide/upgrade/a1-to-a2-with-projection.png\" alt=\"Projecting Angular 1 content into Angular 2\" align=\"left\" style=\"width:250px\"><p>When we are using a downgraded Angular 2 component from an Angular 1 template, the need may arise to <em>transclude</em> some content into it. This is also possible. While there is no such thing as transclusion in Angular 2, there is a very similar concept called <em>content projection</em>. The <code>UpgradeAdapter</code> is able to make these two features interoperate.</p> <p>Angular 2 components that support content projection make use of an <code>&lt;ng-content&gt;</code> tag within them. Here's an example of such a component:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nimport { Component, Input } from '@angular/core';\nimport { Hero } from '../hero';\n\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.name}}&lt;/h2&gt;\n    &lt;div&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n  `\n})\nexport class HeroDetailComponent {\n  @Input() hero: Hero;\n}\n</pre>\n<p>When using the component from Angular 1, we can supply contents for it. Just like they would be transcluded in Angular 1, they get projected to the location of the <code>&lt;ng-content&gt;</code> tag in Angular 2:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\">&lt;div ng-controller=\"MainController as mainCtrl\"&gt;\n  &lt;hero-detail [hero]=\"mainCtrl.hero\"&gt;\n    &lt;!-- Everything here will get projected --&gt;\n    &lt;p&gt;{{mainCtrl.hero.description}}&lt;/p&gt;\n  &lt;/hero-detail&gt;\n&lt;/div&gt;\n</pre>\n<div class=\"alert is-helpful\">\n<p>When Angular 1 content gets projected inside an Angular 2 component, it still remains in \"Angular 1 land\" and is managed by the Angular 1 framework.</p> </div>\n<h2 id=\"transcluding-angular-2-content-into-angular-1-component-directives\">Transcluding Angular 2 Content into Angular 1 Component Directives</h2> <img src=\"https://angular.io/resources/images/devguide/upgrade/a2-to-a1-with-transclusion.png\" alt=\"Projecting Angular 2 content into Angular 1\" align=\"left\" style=\"width:250px\"><p>Just like we can project Angular 1 content into Angular 2 components, we can <em>transclude</em> Angular 2 content into Angular 1 components, whenever we are using upgraded versions from them.</p> <p>When an Angular 1 component directive supports transclusion, it may use the <code>ng-transclude</code> directive in its template to mark the transclusion point:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nexport const heroDetailComponent = {\n  bindings: {\n    hero: '='\n  },\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.name}}&lt;/h2&gt;\n    &lt;div&gt;\n      &lt;ng-transclude&gt;&lt;/ng-transclude&gt;\n    &lt;/div&gt;\n  `\n};\n</pre>\n<div class=\"alert is-helpful\">\n<p>The directive also needs to have the <code>transclude: true</code> option enabled. It is on by default for component directives defined with the 1.5 component API.</p> </div>\n<p>If we upgrade this component and use it from Angular 2, we can populate the component tag with contents that will then get transcluded:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"container.component.ts\">// container.component.ts\n\nimport { Component } from '@angular/core';\nimport { upgradeAdapter } from './upgrade_adapter';\nimport { Hero } from '../hero';\n\nconst HeroDetail = upgradeAdapter.upgradeNg1Component('heroDetail');\n\n@Component({\n  selector: 'my-container',\n  template: `\n    &lt;hero-detail [hero]=\"hero\"&gt;\n      &lt;!-- Everything here will get transcluded --&gt;\n      &lt;p&gt;{{hero.description}}&lt;/p&gt;\n    &lt;/hero-detail&gt;\n  `,\n  directives: [HeroDetail]\n})\nexport class ContainerComponent {\n  hero = new Hero(1, 'Windstorm', 'Specific powers of controlling winds');\n}\n</pre>\n<h2 id=\"making-angular-1-dependencies-injectable-to-angular-2\">Making Angular 1 Dependencies Injectable to Angular 2</h2> <p>When running a hybrid app, we may bump into situations where we need to have some Angular 1 dependencies to be injected to Angular 2 code. This may be because we have some business logic still in Angular 1 services, or because we need some of Angular 1's built-in services like <code>$location</code> or <code>$timeout</code>.</p> <p>In these situations, it is possible to <em>upgrade</em> an Angular 1 provider to Angular 2. This makes it possible to then inject it somewhere in Angular 2 code. For example, we might have a service called <code>HeroesService</code> in Angular 1:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"heroes.service.ts\">// heroes.service.ts\n\nimport { Hero } from '../hero';\n\nexport class HeroesService {\n  get() {\n    return [\n      new Hero(1, 'Windstorm'),\n      new Hero(2, 'Spiderman')\n    ];\n  }\n}\n</pre>\n<p>We can upgrade the service using the <code>UpgradeAdapter</code>'s <code>upgradeNg1Provider</code> method by giving it the name of the service. This adds the service into Angular 2's root injector.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts\">// app.module.ts\n\nangular.module('heroApp', [])\n  .service('heroes', HeroesService)\n  .directive('heroDetail',\n    upgradeAdapter.downgradeNg2Component(HeroDetailComponent));\n\nupgradeAdapter.upgradeNg1Provider('heroes');\n</pre>\n<p>We can then inject it in Angular 2 using a string token that matches its original name in Angular 1:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nimport { Component, Inject } from '@angular/core';\nimport { HeroesService } from './heroes.service';\nimport { Hero } from '../hero';\n\n@Component({\n  selector: 'hero-detail',\n  template: `\n    &lt;h2&gt;{{hero.id}}: {{hero.name}}&lt;/h2&gt;\n  `\n})\nexport class HeroDetailComponent {\n  hero: Hero;\n  constructor(@Inject('heroes') heroes: HeroesService) {\n    this.hero = heroes.get()[0];\n  }\n}\n</pre>\n<div class=\"alert is-helpful\">\n<p>In this example we upgraded a service class, which has the added benefit that we can use a TypeScript type annotation when we inject it. While it doesn't affect how the dependency is handled, it enables the benefits of static type checking. This is not required though, and any Angular 1 service, factory, or provider can be upgraded.</p> </div>\n<h2 id=\"making-angular-2-dependencies-injectable-to-angular-1\">Making Angular 2 Dependencies Injectable to Angular 1</h2> <p>In addition to upgrading Angular 1 dependencies, we can also <em>downgrade</em> Angular 2 dependencies, so that we can use them from Angular 1. This can be useful when we start migrating services to Angular 2 or creating new services in Angular 2 while we still have components written in Angular 1.</p> <p>For example, we might have an Angular 2 service called <code>Heroes</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"heroes.ts\">// heroes.ts\n\nimport { Injectable } from '@angular/core';\nimport { Hero } from '../hero';\n\n@Injectable()\nexport class Heroes {\n  get() {\n    return [\n      new Hero(1, 'Windstorm'),\n      new Hero(2, 'Spiderman')\n    ];\n  }\n}\n</pre>\n<p>We can again use the <code>UpgradeAdapter</code> for this, but first we need to register <code>Heroes</code> to the Angular 2 injector itself. In a pure Angular 2 application we would do this when we bootstrap the app, as described in the <a href=\"#\">dependency injection guide</a>. But since hybrid applications are bootstrapped using the <code>UpgradeAdapter</code>, we also need to register our Angular 2 providers using <code>UpgradeAdapter</code>. It has a method called <code>addProvider</code> for this purpose.</p> <p>Once we've registered the Angular 2 provider, we can turn <code>Heroes</code> into an <em>Angular 1 factory function</em> using <code>upgradeAdapter.downgradeNg2Provider()</code>. We can then plug the factory into an Angular 1 module, at which point we also choose what the name of the dependency will be in Angular 1:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app.module.ts\">// app.module.ts\n\nupgradeAdapter.addProvider(Heroes);\n\nangular.module('heroApp', [])\n  .factory('heroes', upgradeAdapter.downgradeNg2Provider(Heroes))\n  .component('heroDetail', heroDetailComponent);\n</pre>\n<p>After this, the service is injectable anywhere in our Angular 1 code:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"hero-detail.component.ts\">// hero-detail.component.ts\n\nexport const heroDetailComponent = {\n  template: `\n    &lt;h2&gt;{{$ctrl.hero.id}}: {{$ctrl.hero.name}}&lt;/h2&gt;\n  `,\n  controller: ['heroes', function(heroes: Heroes) {\n    this.hero = heroes.get()[0];\n  }]\n};\n</pre>\n<h1 id=\"phonecat-upgrade-tutorial\">PhoneCat Upgrade Tutorial</h1> <p>In this section and we will look at a complete example of preparing and upgrading an application using the <code>upgrade</code> module. The app we're going to work on is <a href=\"https://github.com/angular/angular-phonecat\">Angular PhoneCat</a> from <a href=\"https://docs.angularjs.org/tutorial\">the original Angular 1 tutorial</a>, which is where many of us began our Angular adventures. Now we'll see how to bring that application to the brave new world of Angular 2.</p> <p>During the process we'll learn how to apply the steps outlined in the <a href=\"#preparation\">preparation guide</a> in practice: We'll align the application with Angular 2 and also take TypeScript into use.</p> <p>To follow along with the tutorial, clone the <a href=\"https://github.com/angular/angular-phonecat\">angular-phonecat</a> repository and apply the steps as we go.</p> <p>In terms of project structure, this is where our work begins:</p> <div class=\"filetree\">\n<div class=\"file\">angular-phonecat</div>\n<div class=\"children\">\n<div class=\"file\">bower.json</div>\n<div class=\"file\">karma.conf.js</div>\n<div class=\"file\">package.json</div>\n<div class=\"file\">app</div>\n<div class=\"children\">\n<div class=\"file\">core</div>\n<div class=\"children\">\n<div class=\"file\">checkmark</div>\n<div class=\"children\">\n<div class=\"file\">checkmark.filter.js</div>\n<div class=\"file\">checkmark.filter.spec.js</div>\n</div>\n<div class=\"file\">phone</div>\n<div class=\"children\">\n<div class=\"file\">phone.module.js</div>\n<div class=\"file\">phone.service.js</div>\n<div class=\"file\">phone.service.spec.js</div>\n</div>\n<div class=\"file\">core.module.js</div>\n</div>\n<div class=\"file\">phone-detail</div>\n<div class=\"children\">\n<div class=\"file\">phone-detail.component.js</div>\n<div class=\"file\">phone-detail.component.spec.js</div>\n<div class=\"file\">phone-detail.module.js</div>\n<div class=\"file\">phone-detail.template.html</div>\n</div>\n<div class=\"file\">phone-list</div>\n<div class=\"children\">\n<div class=\"file\">phone-list.component.js</div>\n<div class=\"file\">phone-list.component.spec.js</div>\n<div class=\"file\">phone-list.module.js</div>\n<div class=\"file\">phone-list.template.html</div>\n</div>\n<div class=\"file\">img</div>\n<div class=\"children\"><div class=\"file\"> ...</div></div>\n<div class=\"file\">phones</div>\n<div class=\"children\"><div class=\"file\"> ...</div></div>\n<div class=\"file\">app.animations.js</div>\n<div class=\"file\">app.config.js</div>\n<div class=\"file\">app.css</div>\n<div class=\"file\">app.module.js</div>\n<div class=\"file\">index.html</div>\n</div>\n<div class=\"file\">e2e-tests</div>\n<div class=\"children\">\n<div class=\"file\">protractor-conf.js</div>\n<div class=\"file\">scenarios.js</div>\n</div>\n</div>\n</div>\n<p>This is actually a pretty good starting point. The code uses the Angular 1.5 component API and the organization follows the <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md\">Angular 1 Style Guide</a>, which is an important <a href=\"#following-the-angular-style-guide\">preparation step</a> before a successful upgrade.</p> <ul> <li>Each component, service, and filter is in its own source file, as per the <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#single-responsibility\">Rule of 1</a>.</li> <li>The <code>core</code>, <code>phone-detail</code>, and <code>phone-list</code> modules are each in their own subdirectory. Those subdirectories contain the JavaScript code as well as the HTML templates that go with each particular feature. This is in line with the <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#style-y152\">Folders-by-Feature Structure</a> and <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#modularity\">Modularity</a> rules.</li> <li>Unit tests are located side-by-side with application code where they are easily found, as described in the rules for <a href=\"https://github.com/johnpapa/angular-styleguide/blob/master/a1/README.md#style-y197\">Organizing Tests</a>.</li> </ul> <h2 id=\"switching-to-typescript\">Switching to TypeScript</h2> <p>Since we're going to be writing our Angular 2 code in TypeScript, it makes sense to bring in the TypeScript compiler even before we begin upgrading.</p> <p>We will also start to gradually phase out the Bower package manager in favor of NPM. We'll install all new dependencies using NPM, and will eventually be able to remove Bower from the project.</p> <p>Let's begin by installing TypeScript to the project. While we're at it, let's also install the <a href=\"https://github.com/typings/typings\">Typings type definition manager</a>. It will allow us to install type definitions for libraries that don't come with prepackaged types.</p> <pre format=\"\">npm i typescript typings --save-dev\n</pre>\n<p>Let's also add run scripts for the <code>tsc</code> TypeScript compiler and the <code>typings</code> tool to <code>package.json</code>:</p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"package.json\">// package.json\n\n{\n  \"scripts\": {\n    \"tsc\": \"tsc\",\n    \"tsc:w\": \"tsc -w\",\n    \"typings\": \"typings\"\n  }\n}</pre>\n<p>We can now use Typings to install type definitions for the existing libraries that we're using: Angular 1 and the Jasmine unit test framework.</p> <pre format=\"\">npm run typings install dt~jquery dt~angular dt~angular-route \\\n  dt~angular-resource dt~angular-mocks dt~angular-animate \\\n  dt~jasmine -- --save --global\n</pre>\n<p>This will add these typings into a <code>typings.json</code> configuration file as well as download them into the <code>typings directory</code>.</p> <p>We should also configure the TypeScript compiler so that it can understand our project. We'll add a <code>tsconfig.json</code> file to the project directory, just like we do in the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">Quickstart</a>. It instructs the TypeScript compiler how to interpret our source files.</p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"tsconfig.json\">// tsconfig.json\n\n{\n  \"compilerOptions\": {\n    \"target\": \"es5\",\n    \"module\": \"commonjs\",\n    \"moduleResolution\": \"node\",\n    \"sourceMap\": true,\n    \"emitDecoratorMetadata\": true,\n    \"experimentalDecorators\": true,\n    \"removeComments\": false,\n    \"noImplicitAny\": false,\n    \"suppressImplicitAnyIndexErrors\": true\n  }\n}\n</pre>\n<p>We are telling the TypeScript compiler to turn our TypeScript files to ES5 code bundled into CommonJS modules.</p> <p>We can now launch the TypeScript compiler from the command line. It will watch our <code>.ts</code> source files and compile them to JavaScript on the fly. Those compiled <code>.js</code> files are then loaded into the browser by SystemJS. This is a process we'll want to have continuously running in the background as we go along.</p> <pre format=\"\">npm run tsc:w\n</pre>\n<p>The next thing we'll do is convert our JavaScript files to TypeScript. Since TypeScript is a superset of ECMAScript 2015, which in turn is a superset of ECMAScript 5, we can simply switch the file extensions from <code>.js</code> to <code>.ts</code> and everything will work just like it did before. As the TypeScript compiler runs, it emits the corresponding <code>.js</code> file for every <code>.ts</code> file and the compiled JavaScript is what actually gets executed. If you start the project HTTP server with <code>npm start</code>, you should see the fully functional application in your browser.</p> <p>Now that we have TypeScript though, we can start benefiting from some of its features. There's a lot of value the language can provide to Angular 1 applications.</p> <p>For one thing, TypeScript is a superset of ES2015. Any app that has previously been written in ES5 - like the PhoneCat example has - can with TypeScript start incorporating all of the JavaScript features that are new to ES2015. These include things like <code>let</code>s and <code>const</code>s, arrow functions, default function parameters, and destructuring assignments.</p> <p>Another thing we can do is start adding <em>type safety</em> to our code. This has actually partially already happened because of the Angular 1 typings we installed. TypeScript are checking that we are calling Angular 1 APIs correctly when we do things like register components to Angular modules.</p> <p>But we can also start adding <em>type annotations</em> for our own code to get even more out of TypeScript's type system. For instance, we can annotate the checkmark filter so that it explicitly expects booleans as arguments. This makes it clearer what the filter is supposed to do.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/checkmark/checkmark.filter.ts\">// app/core/checkmark/checkmark.filter.ts\n\n\nangular.\n  module('core').\n  filter('checkmark', function() {\n    return function(input: boolean) {\n      return input ? '\\u2713' : '\\u2718';\n    };\n  });\n</pre>\n<p>In the <code>Phone</code> service we can explicitly annotate the <code>$resource</code> service dependency as an <code>angular.resource.IResourceService</code> - a type defined by the Angular 1 typings.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/phone/phone.service.ts\">// app/core/phone/phone.service.ts\n\nangular.\n  module('core.phone').\n  factory('Phone', ['$resource',\n    function($resource: angular.resource.IResourceService) {\n      return $resource('phones/:phoneId.json', {}, {\n        query: {\n          method: 'GET',\n          params: {phoneId: 'phones'},\n          isArray: true\n        }\n      });\n    }\n  ]);\n</pre>\n<p>We can apply the same trick to the application's route configuration file in <code>app.config.ts</code>, where we are using the location and route services. By annotating them accordingly TypeScript can verify we're calling their APIs with the correct kinds of arguments.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.config.ts\">// app/app.config.ts\n\nangular.\n  module('phonecatApp').\n  config(['$locationProvider', '$routeProvider',\n    function config($locationProvider: angular.ILocationProvider,\n                    $routeProvider: angular.route.IRouteProvider) {\n      $locationProvider.hashPrefix('!');\n\n      $routeProvider.\n        when('/phones', {\n          template: '&lt;phone-list&gt;&lt;/phone-list&gt;'\n        }).\n        when('/phones/:phoneId', {\n          template: '&lt;phone-detail&gt;&lt;/phone-detail&gt;'\n        }).\n        otherwise('/phones');\n    }\n  ]);\n</pre>\n<div class=\"l-sub-section\">\n<p>The <a href=\"https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/angularjs\">Angular 1.x type definitions</a> we installed with Typings are not officially maintained by the Angular team, but are quite comprehensive. It is possible to make an Angular 1.x application fully type-annotated with the help of these definitions.</p> <p>If this is something we wanted to do, it would be a good idea to enable the <code>noImplicitAny</code> configuration option in <code>tsconfig.json</code>. This would cause the TypeScript compiler to display a warning when there's any code that does not yet have type annotations. We could use it as a guide to inform us about how close we are to having a fully annotated project.</p> </div>\n<p>Another TypeScript feature we can make use of is <em>classes</em>. In particular, we can turn our component controllers into classes. That way they'll be a step closer to becoming Angular 2 component classes, which will make our life easier once we do the upgrade.</p> <p>Angular 1 expects controllers to be constructor functions. That's exactly what ES2015/TypeScript classes are under the hood, so that means we can just plug in a class as a component controller and Angular 1 will happily use it.</p> <p>Here's what our new class for the phone list component controller looks like:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.ts\">// app/phone-list/phone-list.component.ts\n\nclass PhoneListController {\n  phones: any[];\n  orderProp: string;\n  query: string;\n\n  static $inject = ['Phone'];\n  constructor(Phone: any) {\n    this.phones = Phone.query();\n    this.orderProp = 'age';\n  }\n\n}\n\nangular.\n  module('phoneList').\n  component('phoneList', {\n    templateUrl: 'phone-list/phone-list.template.html',\n    controller: PhoneListController\n  });\n</pre>\n<p>What was previously done in the controller function is now done in the class constructor function. The dependency injection annotations are attached to the class using a static property <code>$inject</code>. At runtime this becomes the <code>PhoneListController.$inject</code> property.</p> <p>The class additionally declares three members: The array of phones, the name of the current sort key, and the search query. These are all things we have already been attaching to the controller but that weren't explicitly declared anywhere. The last one of these isn't actually used in the TypeScript code since it's only referred to in the template, but for the sake of clarity we want to define all the members our controller will have.</p> <p>In the Phone detail controller we'll have two members: One for the phone that the user is looking at and another for the URL of the currently displayed image:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.ts\">// app/phone-detail/phone-detail.component.ts\n\nclass PhoneDetailController {\n  phone: any;\n  mainImageUrl: string;\n\n  static $inject = ['$routeParams', 'Phone'];\n  constructor($routeParams: angular.route.IRouteParamsService, Phone: any) {\n    let phoneId = $routeParams['phoneId'];\n    this.phone = Phone.get({phoneId}, (phone: any) =&gt; {\n      this.setImage(phone.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\nangular.\n  module('phoneDetail').\n  component('phoneDetail', {\n    templateUrl: 'phone-detail/phone-detail.template.html',\n    controller: PhoneDetailController\n  });\n</pre>\n<p>This makes our controller code look a lot more like Angular 2 already. We're all set to actually introduce Angular 2 into the project.</p> <p>If we had any Angular 1 services in the project, those would also be a good candidate for converting to classes, since like controllers, they're also constructor functions. But we only have the <code>Phone</code> factory in this project, and that's a bit special since it's an <code>ngResource</code> factory. So we won't be doing anything to it in the preparation stage. We'll instead turn it directly into an Angular 2 service.</p> <h2 id=\"installing-angular-2\">Installing Angular 2</h2> <p>Having completed our preparation work, let's get going with the Angular 2 upgrade of PhoneCat. We'll do this incrementally with the help of the <a href=\"#upgrading-with-the-upgrade-adapter\">upgrade module</a> that comes with Angular 2. By the time we're done, we'll be able to remove Angular 1 from the project completely, but the key is to do this piece by piece without breaking the application.</p> <div class=\"alert is-important\">The project also contains some animations, which we are not yet upgrading in this version of the guide. This will change in a later release.</div>\n<p>Let's install Angular 2 into the project, along with the SystemJS module loader. Take a look into the <a href=\"https://angular.io/docs/ts/latest/quickstart.html\">Quickstart</a> guide and get the following configurations from there:</p> <ul> <li>Add Angular 2 and the other new dependencies to <code>package.json</code>\n</li> <li>Add the new typings into <code>typings.json</code>\n</li> <li>The SystemJS configuration file <code>systemjs.config.js</code> to the project root directory.</li> </ul> <p>Once these are done, run:</p> <pre format=\"\">npm install\nnpm run typings install\n</pre>\n<p>We can soon load Angular 2 dependencies into the application via <code>index.html</code>, but first we need to do some directory path adjustments. This is because we're going to need to load files from <code>node_modules</code> and the project root, whereas so far in this project everything has been loaded from the <code>/app</code> directory.</p> <p>Move the <code>app/index.html</code> file to the project root directory. Then change the development server root path in <code>package.json</code> to also point to the project root instead of <code>app</code>:</p> <pre language=\"json\" format=\"linenums\" data-language=\"json\" name=\"package.json\">// package.json\n\n{\n  \"scripts\": {\n    \"start\": \"http-server -a localhost -p 8000 -c-1 ./\"\n  }\n}</pre>\n<p>Now we're able to serve everything from the project root to the web browser. But we do <em>not</em> want to have to change all the image and data paths used in the application code to match our development setup. For that reason, we'll add a <code>&lt;base&gt;</code> tag to <code>index.html</code>, which will cause relative URLs to be resolved back to the <code>/app</code> directory:</p> <pre language=\"html\" format=\"\" data-language=\"html\" name=\"index.html\">&lt;!-- index.html --&gt;\n\n&lt;base href=\"/app/\"&gt;\n</pre>\n<p>Now we can load Angular 2 via SystemJS. We'll add the Angular 2 polyfills and the SystemJS config to the end of the <code>&lt;head&gt;</code> section, and then we'll use <code>System.import</code> to load the actual application:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"index.html\">&lt;!-- index.html --&gt;\n\n&lt;script src=\"/node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n&lt;script src=\"/systemjs.config.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  System.import('/app');\n&lt;/script&gt;\n</pre>\n<p>In the <code>systemjs.config.js</code> file we got from the Quickstart we also need to make a couple of adjustments because of our project structure. We want to point the browser to the project root when loading things through SystemJS, instead of using the <code>&lt;base&gt;</code> URL:</p> <pre language=\"js\" format=\"linenums\" data-language=\"js\" name=\"systemjs.config.js\">// systemjs.config.js\n\nvar map = {\n  'app':                        '/app', // 'dist',\n\n  '@angular':                   '/node_modules/@angular',\n  'angular2-in-memory-web-api': '/node_modules/angular2-in-memory-web-api',\n  'rxjs':                       '/node_modules/rxjs'\n};\n\nvar packages = {\n  '/app':                       { main: 'main.js',  defaultExtension: 'js' },\n  'rxjs':                       { defaultExtension: 'js' },\n  'angular2-in-memory-web-api': { main: 'index.js', defaultExtension: 'js' },\n};\n</pre>\n<h2 id=\"bootstrapping-a-hybrid-1-2-phonecat\">Bootstrapping A Hybrid 1+2 PhoneCat</h2> <p>What we'll do next is bootstrap the application as a <em>hybrid application</em> that supports both Angular 1 and Angular 2 components. Once we've done that we can start converting the individual pieces to Angular 2.</p> <p>To bootstrap a hybrid application, we first need to initialize an <code>UpgradeAdapter</code>, which <a href=\"#upgrading-with-the-upgrade-adapter\">provides the glue</a> that joins the two versions of the framework together. Let's import the <code>UpgradeAdapter</code> class into a new file <code>app/main.ts</code>. This file has been configured as the application entrypoint in <code>systemjs.config.js</code>, so it is already being loaded by the browser.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport { UpgradeAdapter } from '@angular/upgrade';\n</pre>\n<p>We can then make an adapter by instantiating the class:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">let upgradeAdapter = new UpgradeAdapter();\n</pre>\n<p>Our application is currently bootstrapped using the Angular 1 <code>ng-app</code> directive attached to the <code>&lt;html&gt;</code> element of the host page. This will no longer work with Angular 2. We should switch to a JavaScript-driven bootstrap instead. So, remove the <code>ng-app</code> attribute from <code>index.html</code>, and instead add this to <code>main.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">upgradeAdapter.bootstrap(document.documentElement, ['phonecatApp']);\n</pre>\n<p>The arguments used here are the root element of the application (which is the same element we had <code>ng-app</code> on earlier), and the Angular 1.x modules that we want to load. Since we're bootstrapping the app through an <code>UpgradeAdapter</code>, we're actually now running the app as a hybrid Angular 1+2 app.</p> <p>This means we are now running both Angular 1 and 2 at the same time. That's pretty exciting! We're not running any actual Angular 2 components yet though, so let's do that next.</p> <h2 id=\"upgrading-the-phone-service\">Upgrading the Phone service</h2> <p>The first piece we'll port over to Angular 2 is the <code>Phone</code> service, which resides in <code>app/core/phone/phone.service.ts</code> and makes it possible for components to load phone information from the server. Right now it's implemented with ngResource and we're using it for two things:</p> <ul> <li>For loading the list of all phones into the phone list component</li> <li>For loading the details of a single phone into the phone detail component.</li> </ul> <p>We can replace this implementation with an Angular 2 service class, while keeping our controllers in Angular 1 land. In the new version we'll just use the <code>Http</code> service from Angular 2 instead of ngResource.</p> <p>Before the <code>Http</code> service is available for injection, we need to register it into our application's dependency injector. We should import the <code>HTTP_PROVIDERS</code> constant in <code>main.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">import { HTTP_PROVIDERS } from '@angular/http';\n</pre>\n<p>In a regular Angular 2 application we would now pass <code>HTTP_PROVIDERS</code> into the application bootstrap function. But we can't do that in a hybrid application such as the one we're working on. That's because the <code>bootstrap</code> method of <code>UpgradeAdapter</code> expects Angular 1 modules as dependencies, not Angular 2 providers.</p> <p>What we must do instead is register <code>HTTP_PROVIDERS</code> into the <code>UpgradeAdapter</code> separately. It has a method called <code>addProvider</code> for that purpose:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">upgradeAdapter.addProvider(HTTP_PROVIDERS);\n</pre>\n<p>Now we're ready to upgrade the Phone service itself. We replace the ngResource-based service in <code>phone.service.ts</code> with a TypeScript class decorated as <code>@Injectable</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/phone/phone.service.ts\">// app/core/phone/phone.service.ts\n\n@Injectable()\nexport class Phone {\n/* . . . */\n}\n</pre>\n<p>The <code>@Injectable</code> decorator will attach some dependency injection metadata to the class, letting Angular 2 know about its dependencies. As described by our <a href=\"dependency-injection\">Dependency Injection Guide</a>, this is a marker decorator we need to use for classes that have no other Angular 2 decorators but still need to have their dependencies injected.</p> <p>In its constructor the class expects to get the <code>Http</code> service. It will be injected to it and it is stored as a private field. The service is then used in the two instance methods, one of which loads the list of all phones, and the other the details of a particular phone:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Injectable()\nexport class Phone {\n  constructor(private http: Http) { }\n  query(): Observable&lt;PhoneData[]&gt; {\n    return this.http.get(`phones/phones.json`)\n      .map((res: Response) =&gt; res.json());\n  }\n  get(id: string): Observable&lt;PhoneData&gt; {\n    return this.http.get(`phones/${id}.json`)\n      .map((res: Response) =&gt; res.json());\n  }\n}\n</pre>\n<p>The methods now return Observables of type <code>PhoneData</code> and <code>PhoneData[]</code>. This is a type we don't have yet, so let's add a simple interface for it:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/phone/phone.service.ts\">// app/core/phone/phone.service.ts\n\nexport interface PhoneData {\n  name: string;\n  snippet: string;\n  images: string[];\n}\n</pre>\n<p>Here's the full, final code for the service:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/phone/phone.service.ts\">// app/core/phone/phone.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { Http, Response } from '@angular/http';\nimport { Observable } from 'rxjs/Rx';\n\nimport 'rxjs/add/operator/map';\n\nexport interface PhoneData {\n  name: string;\n  snippet: string;\n  images: string[];\n}\n\n@Injectable()\nexport class Phone {\n  constructor(private http: Http) { }\n  query(): Observable&lt;PhoneData[]&gt; {\n    return this.http.get(`phones/phones.json`)\n      .map((res: Response) =&gt; res.json());\n  }\n  get(id: string): Observable&lt;PhoneData&gt; {\n    return this.http.get(`phones/${id}.json`)\n      .map((res: Response) =&gt; res.json());\n  }\n}\n</pre>\n<p>Notice that we're importing the <code>map</code> operator of the RxJS <code>Observable</code> separately. We need to do this for all RxJS operators that we want to use, since Angular 2 does not load all of them by default.</p> <p>The new <code>Phone</code> service now has the same features that the original, ngResource based service did. Now we just need to register the new service into the application, so that our Angular 1 components will be able to use it.</p> <p><code>UpgradeAdapter</code> has a <code>downgradeNg2Provider</code> method for the purpose of making Angular 2 services available to Angular 1 code. We can use it to plug in our <code>Phone</code> service:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport { Phone } from './core/phone/phone.service';\n\n/* . . . */\n\nupgradeAdapter.addProvider(Phone);\n\n/* . . . */\n\nangular.module('core.phone')\n  .factory('phone', upgradeAdapter.downgradeNg2Provider(Phone));\n</pre>\n<p>Note that we actually needed to do two registrations here:</p> <ol> <li>Register <code>Phone</code> as an <strong>Angular 2 provider</strong> with the <code>addProvider</code> method. That's the same method that we used earlier for <code>HTTP_PROVIDERS</code>.</li> <li>Register an <strong>Angular 1 factory</strong> called <code>phone</code>, which will be a <em>downgraded</em> version of the <code>Phone</code> Angular 2 service.</li> </ol> <p>Now that we are loading <code>phone.service.ts</code> through an import that is resolved by SystemJS, we should <strong>remove the &lt;script&gt; tag</strong> for the service from <code>index.html</code>. This is something we'll do to all our components as we upgrade them. Simultaneously with the Angular 1 to 2 upgrade we're also migrating our code from scripts to modules.</p> <p>At this point we can switch our two components to use the new service instead of the old one. We <code>$inject</code> it as the downgraded <code>phone</code> factory, but it's really an instance of the <code>Phone</code> class and we can annotate its type accordingly:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.ts\">// app/phone-list/phone-list.component.ts\n\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\nclass PhoneListController {\n  phones: PhoneData[];\n  orderProp: string;\n\n  static $inject = ['phone'];\n  constructor(phone: Phone) {\n    phone.query().subscribe(phones =&gt; {\n      this.phones = phones;\n    });\n    this.orderProp = 'age';\n  }\n\n}\n\nangular.\n  module('phoneList').\n  component('phoneList', {\n    templateUrl: 'app/phone-list/phone-list.template.html',\n    controller: PhoneListController\n  });\n</pre>\n<pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.ts\">// app/phone-detail/phone-detail.component.ts\n\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\nclass PhoneDetailController {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  static $inject = ['$routeParams', 'phone'];\n  constructor($routeParams: angular.route.IRouteParamsService, phone: Phone) {\n    let phoneId = $routeParams['phoneId'];\n    phone.get(phoneId).subscribe(data =&gt; {\n      this.phone = data;\n      this.setImage(data.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n\nangular.\n  module('phoneDetail').\n  component('phoneDetail', {\n    templateUrl: 'phone-detail/phone-detail.template.html',\n    controller: PhoneDetailController\n  });\n</pre>\n<p>What we have here are two Angular 1 components using an Angular 2 service! The components don't need to be aware of this, though the fact that the service returns Observables and not Promises is a bit of a giveaway. In any case, what we've achieved is a migration of a service to Angular 2 without having to yet migrate the components that use it.</p> <div class=\"alert is-helpful\">\n<p>We could also use the <code>toPromise</code> method of <code>Observable</code> to turn those Observables into Promises in the service. This can in many cases further reduce the amount of changes needed in the component controllers.</p> </div>\n<h2 id=\"upgrading-components\">Upgrading Components</h2> <p>Next, let's upgrade our Angular 1 components to Angular 2 components. We'll do it one at a time, while still keeping the application in hybrid mode. As we make these conversions, we'll also be defining our first Angular 2 <em>pipes</em>.</p> <p>Let's look at the phone list component first. Right now it contains a TypeScript controller class and a component definition object. We can morph this into an Angular 2 component by just renaming the controller class and turning the Angular 1 component definition object into an Angular 2 <code>@Component</code> decorator. We can then also remove the static <code>$inject</code> property from the class:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.ts\">// app/phone-list/phone-list.component.ts\n\nimport { Component } from '@angular/core';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\n@Component({\n  selector: 'phone-list',\n  templateUrl: 'phone-list/phone-list.template.html'\n})\nexport class PhoneListComponent {\n  phones: PhoneData[];\n  query: string;\n  orderProp: string;\n\n  constructor(phone: Phone) {\n    phone.query().subscribe(phones =&gt; {\n      this.phones = phones;\n    });\n    this.orderProp = 'age';\n  }\n}\n</pre>\n<p>The <code>selector</code> attribute is a CSS selector that defines where on the page the component should go. In Angular 1 we do matching based on component names, but in Angular 2 we have these explicit selectors. This one will match elements with the name <code>phone-list</code>, just like the Angular 1 version did.</p> <p>We now also need to convert the template of this component into Angular 2 syntax. In the search controls we need to use Angular 2 syntax for the two <code>ngModel</code>s. We should also no longer use the <code>$ctrl</code> prefix in expressions:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/phone-list/phone-list.template.html\">&lt;!-- app/phone-list/phone-list.template.html --&gt;\n\n&lt;p&gt;\n  Search:\n  &lt;input [(ngModel)]=\"query\" /&gt;\n&lt;/p&gt;\n\n&lt;p&gt;\n  Sort by:\n  &lt;select [(ngModel)]=\"orderProp\"&gt;\n    &lt;option value=\"name\"&gt;Alphabetical&lt;/option&gt;\n    &lt;option value=\"age\"&gt;Newest&lt;/option&gt;\n  &lt;/select&gt;\n&lt;/p&gt;\n</pre>\n<p>In the list we need to replace the <code>ng-repeat</code> with an <code>*ngFor</code> and the <code>let var of iterable</code> syntax, which is <a href=\"template-syntax#directives\">described in our Template Syntax guide</a>. For the images, we can replace <code>ng-src</code> with a binding to the standard <code>src</code> property.</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/phone-list/phone-list.template.html\">&lt;!-- app/phone-list/phone-list.template.html --&gt;\n\n&lt;ul class=\"phones\"&gt;\n  &lt;li *ngFor=\"let phone of getPhones()\"\n      class=\"thumbnail phone-list-item\"&gt;\n    &lt;a href=\"/#!/phones/{{phone.id}}\" class=\"thumb\"&gt;\n      &lt;img [src]=\"phone.imageUrl\" [alt]=\"phone.name\" /&gt;\n    &lt;/a&gt;\n    &lt;a href=\"/#!/phones/{{phone.id}}\" class=\"name\"&gt;{{phone.name}}&lt;/a&gt;\n    &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Another thing that we've done here is that we've removed the use of <code>filter</code> and <code>orderBy</code> filters, and replaced them with a call to the <code>getPhones()</code> controller method. The built-in Angular filters <code>filter</code> and <code>orderBy</code> do not exist in Angular 2, so we need to do the filtering and sorting ourselves. We could define our own Angular 2 pipes for this purpose, but in this case it is more convenient to just implement the filtering and ordering logic in the component itself. We expect the <code>getPhones()</code> method to return a collection where the current filtering and ordering has been applied.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.ts\">// app/phone-list/phone-list.component.ts\n\ngetPhones(): PhoneData[] {\n  return this.sortPhones(this.filterPhones(this.phones));\n}\n\nprivate filterPhones(phones: PhoneData[]) {\n  if (phones &amp;&amp; this.query) {\n    return phones.filter(phone =&gt; {\n      let name = phone.name.toLowerCase();\n      let snippet = phone.snippet.toLowerCase();\n      return name.indexOf(this.query) &gt;= 0 || snippet.indexOf(this.query) &gt;= 0;\n    });\n  }\n  return phones;\n}\n\nprivate sortPhones(phones: PhoneData[]) {\n    if (phones &amp;&amp; this.orderProp) {\n        return phones\n          .slice(0) // Make a copy\n          .sort((a, b) =&gt; {\n             if (a[this.orderProp] &lt; b[this.orderProp]) {\n               return -1;\n             } else if ([b[this.orderProp] &lt; a[this.orderProp]]) {\n               return 1;\n             } else {\n               return 0;\n             }\n          });\n    }\n    return phones;\n}\n</pre>\n<p>In the entrypoint file <code>main.ts</code> we're going to plug this component into our application. Instead of registering a component, we register a <code>phoneList</code> <em>directive</em>. The directive is a downgraded version of our Angular 2 component, and the <code>UpgradeAdapter</code> handles the bridging between the two:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport { PhoneListComponent } from './phone-list/phone-list.component';\n\n/* . . . */\n\nangular.module('phoneList')\n  .directive(\n    'phoneList',\n    &lt;angular.IDirectiveFactory&gt;\n      upgradeAdapter.downgradeNg2Component(PhoneListComponent)\n  );\n</pre>\n<p>The <code>&lt;angular.IDirectiveFactory&gt;</code> type annotation here is to let the TypeScript compiler know that the return value of the downgrade method call will be something that can be used as a directive factory.</p> <p>At this point, also remove the &lt;script&gt; tag for the phone list component from <code>index.html</code>.</p> <p>Now we can start looking at our other component, which is the one for the phone details. Set the contents of <code>phone-detail.component.ts</code> as follows:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.ts\">// app/phone-detail/phone-detail.component.ts\n\nimport { Component, Inject } from '@angular/core';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n@Component({\n  selector: 'phone-detail',\n  templateUrl: 'phone-detail/phone-detail.template.html',\n})\nexport class PhoneDetailComponent {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  constructor(@Inject('$routeParams')\n                $routeParams: angular.route.IRouteParamsService,\n              phone: Phone) {\n    phone.get($routeParams['phoneId']).subscribe(phone =&gt; {\n      this.phone = phone;\n      this.setImage(phone.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n</pre>\n<p>This is pretty similar to what we did with the phone list. The one new change here is the use of <code>@Inject</code> for the <code>$routeParams</code> dependency. It tells the Angular 2 injector what this dependency should map to. We have a dependency called <code>$routeParams</code> in the Angular 1 injector, where it is provided by the Angular 1 router. That is what we were already using when <code>PhoneDetails</code> was still an Angular 1 controller.</p> <p>The things is though, Angular 1 dependencies are not made automatically available to Angular 2 components, so if we were to run this now, it would not work. We need to explicitly tell the <code>UpgradeAdapter</code> to upgrade <code>$routeParams</code> so that it is available for injection in Angular 2. We can do it in <code>main.ts</code>:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nupgradeAdapter.upgradeNg1Provider('$routeParams');\n</pre>\n<p>We now also need to convert the template of this component into Angular 2 syntax. Here is the new template in its entirety:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/phone-detail/phone-detail.template.html\">&lt;!-- app/phone-detail/phone-detail.template.html --&gt;\n\n&lt;div *ngIf=\"phone\"&gt;\n  &lt;div class=\"phone-images\"&gt;\n    &lt;img [src]=\"img\" class=\"phone\"\n        [ngClass]=\"{selected: img === mainImageUrl}\"\n        *ngFor=\"let img of phone.images\" /&gt;\n  &lt;/div&gt;\n\n  &lt;h1&gt;{{phone.name}}&lt;/h1&gt;\n\n  &lt;p&gt;{{phone.description}}&lt;/p&gt;\n\n  &lt;ul class=\"phone-thumbs\"&gt;\n    &lt;li *ngFor=\"let img of phone.images\"&gt;\n      &lt;img [src]=\"img\" (click)=\"setImage(img)\" /&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n\n  &lt;ul class=\"specs\"&gt;\n    &lt;li&gt;\n      &lt;span&gt;Availability and Networks&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Availability&lt;/dt&gt;\n        &lt;dd *ngFor=\"let availability of phone.availability\"&gt;{{availability}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Battery&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Type&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.type}}&lt;/dd&gt;\n        &lt;dt&gt;Talk Time&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.talkTime}}&lt;/dd&gt;\n        &lt;dt&gt;Standby time (max)&lt;/dt&gt;\n        &lt;dd&gt;{{phone.battery?.standbyTime}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Storage and Memory&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;RAM&lt;/dt&gt;\n        &lt;dd&gt;{{phone.storage?.ram}}&lt;/dd&gt;\n        &lt;dt&gt;Internal Storage&lt;/dt&gt;\n        &lt;dd&gt;{{phone.storage?.flash}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Connectivity&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Network Support&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.cell}}&lt;/dd&gt;\n        &lt;dt&gt;WiFi&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.wifi}}&lt;/dd&gt;\n        &lt;dt&gt;Bluetooth&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.bluetooth}}&lt;/dd&gt;\n        &lt;dt&gt;Infrared&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.infrared | checkmark}}&lt;/dd&gt;\n        &lt;dt&gt;GPS&lt;/dt&gt;\n        &lt;dd&gt;{{phone.connectivity?.gps | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Android&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;OS Version&lt;/dt&gt;\n        &lt;dd&gt;{{phone.android?.os}}&lt;/dd&gt;\n        &lt;dt&gt;UI&lt;/dt&gt;\n        &lt;dd&gt;{{phone.android?.ui}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Size and Weight&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Dimensions&lt;/dt&gt;\n        &lt;dd *ngFor=\"let dim of phone.sizeAndWeight?.dimensions\"&gt;{{dim}}&lt;/dd&gt;\n        &lt;dt&gt;Weight&lt;/dt&gt;\n        &lt;dd&gt;{{phone.sizeAndWeight?.weight}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Display&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Screen size&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.screenSize}}&lt;/dd&gt;\n        &lt;dt&gt;Screen resolution&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.screenResolution}}&lt;/dd&gt;\n        &lt;dt&gt;Touch screen&lt;/dt&gt;\n        &lt;dd&gt;{{phone.display?.touchScreen | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Hardware&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;CPU&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.cpu}}&lt;/dd&gt;\n        &lt;dt&gt;USB&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.usb}}&lt;/dd&gt;\n        &lt;dt&gt;Audio / headphone jack&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.audioJack}}&lt;/dd&gt;\n        &lt;dt&gt;FM Radio&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.fmRadio | checkmark}}&lt;/dd&gt;\n        &lt;dt&gt;Accelerometer&lt;/dt&gt;\n        &lt;dd&gt;{{phone.hardware?.accelerometer | checkmark}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Camera&lt;/span&gt;\n      &lt;dl&gt;\n        &lt;dt&gt;Primary&lt;/dt&gt;\n        &lt;dd&gt;{{phone.camera?.primary}}&lt;/dd&gt;\n        &lt;dt&gt;Features&lt;/dt&gt;\n        &lt;dd&gt;{{phone.camera?.features?.join(', ')}}&lt;/dd&gt;\n      &lt;/dl&gt;\n    &lt;/li&gt;\n    &lt;li&gt;\n      &lt;span&gt;Additional Features&lt;/span&gt;\n      &lt;dd&gt;{{phone.additionalFeatures}}&lt;/dd&gt;\n    &lt;/li&gt;\n  &lt;/ul&gt;\n&lt;/div&gt;\n</pre>\n<p>There are several notable changes here:</p> <ul> <li>We've removed the <code>$ctrl.</code> prefix from all expressions.</li> <li>Just like we did in the phone list, we've replaced <code>ng-src</code> with property bindings for the standard <code>src</code> property.</li> <li>We're using the property binding syntax around <code>ng-class</code>. Though Angular 2 does have <a href=\"template-syntax#directives\">a very similar <code>ngClass</code></a> as Angular 1 does, its value is not magically evaluated as an expression. In Angular 2 we always specify in the template when an attribute's value is a property expression, as opposed to a literal string.</li> <li>We've replaced <code>ng-repeat</code>s with <code>*ngFor</code>s.</li> <li>We've replaced <code>ng-click</code> with an event binding for the standard <code>click</code>.</li> <li>We've wrapped the whole template in an <code>ngIf</code> that causes it only to be rendered when there is a phone present. We need this because when the component first loads, we don't have <code>phone</code> yet and the expressions will refer to a non-existing value. Unlike in Angular 1, Angular 2 expressions do not fail silently when we try to refer to properties on undefined objects. We need to be explicit about cases where this is expected.</li> </ul> <p>In <code>main.ts</code> we'll now register a <code>phoneDetail</code> directive instead of a component. The directive is a downgraded version of the <code>PhoneDetail</code> Angular 2 component.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\n\n/* . . . */\n\nangular.module('phoneDetail')\n  .directive(\n    'phoneDetail',\n    &lt;angular.IDirectiveFactory&gt;\n      upgradeAdapter.downgradeNg2Component(PhoneDetailComponent)\n  );\n</pre>\n<p>We should now also remove the phone detail component &lt;script&gt; tag from <code>index.html</code>.</p> <p>There's one additional step we need to take, which is to upgrade the <code>checkmark</code> filter that the template is using. We need an Angular 2 pipe instead of an Angular 1 filter.</p> <p>While there is no upgrade method in the upgrade adapter for filters, we can just turn the filter function into a class that fulfills the contract for Angular 2 Pipes. The implementation is the same as before. It just comes in a different kind of packaging. While changing it, also rename the file to <code>checkmark.pipe.ts</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/core/checkmark/checkmark.pipe.ts\">// app/core/checkmark/checkmark.pipe.ts\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({name: 'checkmark'})\nexport class CheckmarkPipe implements PipeTransform {\n\n  transform(input: boolean) {\n    return input ? '\\u2713' : '\\u2718';\n  }\n\n}\n</pre>\n<p>In the component we should now import and declare our newly created pipe (as well as remove the filter &lt;script&gt; tag from <code>index.html</code>):</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.ts\">// app/phone-detail/phone-detail.component.ts\n\nimport { CheckmarkPipe } from '../core/checkmark/checkmark.pipe';\n\n@Component({\n  selector: 'phone-detail',\n  templateUrl: 'phone-detail/phone-detail.template.html',\n  pipes: [ CheckmarkPipe ]\n})\n</pre>\n<h2 id=\"switching-to-the-angular-2-router-and-bootstrap\">Switching To The Angular 2 Router And Bootstrap</h2> <p>At this point we've replaced all our Angular 1 application components with their Angular 2 counterparts. The application is still bootstrapped as a hybrid, but there isn't really any need for that anymore, and we can begin to pull out the last remnants of Angular 1.</p> <p>There are just two more things to do: We need to switch the router to the Angular 2 one, and then bootstrap the app as a pure Angular 2 app.</p> <p>Let's do the routing part first. Angular 2 comes with an <a href=\"router\">all-new router</a> that we can use for this.</p> <p>Angular 2 applications all have a <em>root component</em>, which, among other things, is where we should plug in the router. We don't yet have such a root component, because our app is still managed as an Angular 1 app. Let's change this now and add an <code>AppComponent</code> class into a new file <code>app.component.ts</code>:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/app.component.ts\">// app/app.component.ts\n\nimport { Component } from '@angular/core';\nimport { RouteConfig, ROUTER_DIRECTIVES } from '@angular/router-deprecated';\nimport { PhoneListComponent } from './phone-list/phone-list.component';\nimport { PhoneDetailComponent } from './phone-detail/phone-detail.component';\n\n@RouteConfig([\n  {path: '/phones', name: 'Phones', component: PhoneListComponent},\n  {path: '/phones/:phoneId', name: 'Phone', component: PhoneDetailComponent},\n  {path: '/', redirectTo: ['Phones']}\n])\n@Component({\n  selector: 'phonecat-app',\n  template: '&lt;router-outlet&gt;&lt;/router-outlet&gt;',\n  directives: [ROUTER_DIRECTIVES]\n})\nexport class AppComponent {\n}\n</pre>\n<p>This is a component that plugs in to an <code>&lt;phonecat-app&gt;</code> element on the page, and has a simple template that only includes the router outlet component of the Angular router. This means that the component just renders the contents of the current route and nothing else. The <code>@RouteConfig</code> decorator defines the Angular 2 counterparts of our two routes. They refer directly to the two components.</p> <p>We should put this <code>&lt;phonecat-app&gt;</code> element in the HTML so that the root component has something to attach to. It replaces the old Angular 1 <code>ng-view</code> directive:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"index.html\">&lt;!-- index.html --&gt;\n\n  &lt;body&gt;\n    &lt;phonecat-app&gt;&lt;/phonecat-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>In the <code>PhoneDetail</code> component we now need to change how the phone id parameter is received. There will be no more <code>$routeParams</code> injection available, because that comes from the Angular 1 router. Instead, what we have is a <code>RouteParams</code> object provided by the Angular 2 router. We use it to obtain the <code>phoneId</code> from the params:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.ts\">// app/phone-detail/phone-detail.component.ts\n\nimport { Component } from '@angular/core';\nimport { RouteParams } from '@angular/router-deprecated';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\nimport { CheckmarkPipe } from '../core/checkmark/checkmark.pipe';\n\n@Component({\n  selector: 'phone-detail',\n  templateUrl: 'phone-detail/phone-detail.template.html',\n  pipes: [ CheckmarkPipe ]\n})\nexport class PhoneDetailComponent {\n  phone: PhoneData;\n  mainImageUrl: string;\n\n  constructor(routeParams: RouteParams, phone: Phone) {\n    phone.get(routeParams.get('phoneId')).subscribe(phone =&gt; {\n      this.phone = phone;\n      this.setImage(phone.images[0]);\n    });\n  }\n\n  setImage(imageUrl: string) {\n    this.mainImageUrl = imageUrl;\n  }\n}\n</pre>\n<p>With that, we're ready to switch the bootstrap method of the application from that of the <code>UpgradeAdapter</code> to the main Angular 2 <code>bootstrap</code>. Let's import it together with the router, the new app component, and everything else in <code>main.ts</code></p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {\n  LocationStrategy,\n  HashLocationStrategy,\n  APP_BASE_HREF\n} from '@angular/common';\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nimport { FormsModule } from '@angular/forms';\nimport { HTTP_PROVIDERS } from '@angular/http';\nimport { ROUTER_PROVIDERS } from '@angular/router-deprecated';\nimport { Phone } from './core/phone/phone.service';\nimport { AppComponent } from './app.component';\n</pre>\n<p>We'll now use the regular Angular 2 <code>bootstrap</code> function to bootstrap the app instead of using <code>UpgradeAdapter</code>. The first argument to <code>bootstrap</code> is the application's root component <code>AppComponent</code>, and the second is an array of the Angular 2 providers that we want to make available for injection. In that array we include all the things we have been registering with <code>upgradeAdapter.addProvider</code> until now, as well as the providers and directives of the router:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">bootstrap(AppComponent, {\n  imports: [FormsModule],\n  providers: [\n    HTTP_PROVIDERS,\n    ROUTER_PROVIDERS,\n    { provide: APP_BASE_HREF, useValue: '!' },\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\n    Phone\n  ]\n});\n</pre>\n<p>We also configure a couple of things for the router here so that the application URL paths match exactly those we had in the Angular 1 app: We want the hash location strategy with the <code>!</code> prefix: <code>#!/phones</code>.</p> <p>At this point we are running a pure Angular 2 application!</p> <p>But there's actually one more cool thing we can do with the new router. We no longer have to hardcode the links to phone details from the phone list, because the Angular 2 router is able to generate them for us with its <code>routerLink</code> directive. We just need to refer to the route names we used in the <code>@RouteConfig</code>:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"app/phone-list/phone-list.template.html\">&lt;!-- app/phone-list/phone-list.template.html --&gt;\n\n&lt;ul class=\"phones\"&gt;\n  &lt;li *ngFor=\"let phone of getPhones()\"\n      class=\"thumbnail phone-list-item\"&gt;\n    &lt;a [routerLink]=\"['/Phone', {phoneId: phone.id}]\" class=\"thumb\"&gt;\n      &lt;img [src]=\"phone.imageUrl\" [alt]=\"phone.name\" /&gt;\n    &lt;/a&gt;\n    &lt;a [routerLink]=\"['/Phone', {phoneId: phone.id}]\" class=\"name\"&gt;{{phone.name}}&lt;/a&gt;\n    &lt;p&gt;{{phone.snippet}}&lt;/p&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>For this to work the directive just needs to be declared in the component:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import { Component } from '@angular/core';\nimport { RouterLink } from '@angular/router-deprecated';\nimport { Phone, PhoneData } from '../core/phone/phone.service';\n\n@Component({\n  selector: 'phone-list',\n  templateUrl: 'phone-list/phone-list.template.html',\n  directives: [ RouterLink ]\n})\n</pre>\n<h2 id=\"saying-goodbye-to-angular-1\">Saying Goodbye to Angular 1</h2> <p>It is time to take off the training wheels and let our application begin its new life as a pure, shiny Angular 2 app. The remaining tasks all have to do with removing code - which of course is every programmer's favorite task!</p> <p>If you haven't already, remove all references to the <code>UpgradeAdapter</code> from <code>main.ts</code>. Also remove the Angular 1 bootstrap code.</p> <p>When you're done, this is what <code>main.ts</code> should look like:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/main.ts\">// app/main.ts\n\nimport {\n  LocationStrategy,\n  HashLocationStrategy,\n  APP_BASE_HREF\n} from '@angular/common';\nimport { bootstrap } from '@angular/platform-browser-dynamic';\nimport { FormsModule } from '@angular/forms';\nimport { HTTP_PROVIDERS } from '@angular/http';\nimport { ROUTER_PROVIDERS } from '@angular/router-deprecated';\nimport { Phone } from './core/phone/phone.service';\nimport { AppComponent } from './app.component';\n\nbootstrap(AppComponent, {\n  imports: [FormsModule],\n  providers: [\n    HTTP_PROVIDERS,\n    ROUTER_PROVIDERS,\n    { provide: APP_BASE_HREF, useValue: '!' },\n    { provide: LocationStrategy, useClass: HashLocationStrategy },\n    Phone\n  ]\n});\n</pre>\n<p>You may also completely remove the following files. They are Angular 1 module configuration files and not needed in Angular 2:</p> <ul> <li><code>app/app.module.ts</code></li> <li><code>app/app.config.ts</code></li> <li><code>app/core/core.module.ts</code></li> <li><code>app/core/phone/phone.module.ts</code></li> <li><code>app/phone-detail/phone-detail.module.ts</code></li> <li><code>app/phone-list/phone-list.module.ts</code></li> </ul> <p>The external typings for Angular 1 may be uninstalled as well. The only ones we still need are for Jasmine and Angular 2 polyfills.</p> <pre format=\"\">npm run typings uninstall jquery -- --save --global\nnpm run typings uninstall angular -- --save --global\nnpm run typings uninstall angular-route -- --save --global\nnpm run typings uninstall angular-resource -- --save --global\nnpm run typings uninstall angular-mocks -- --save --global\nnpm run typings uninstall angular-animate -- --save --global\n</pre>\n<p>Finally, from <code>index.html</code>, remove all references to Angular 1 scripts, the Angular 2 upgrade module, and jQuery. When we're done, this is what it should look like:</p> <pre language=\"html\" format=\"linenums\" data-language=\"html\" name=\"index.html\">&lt;!-- index.html --&gt;\n\n&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;base href=\"/app/\"&gt;\n    &lt;title&gt;Google Phone Gallery&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.min.css\" /&gt;\n    &lt;link rel=\"stylesheet\" href=\"app.css\" /&gt;\n\n    &lt;script src=\"/node_modules/core-js/client/shim.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/zone.js/dist/zone.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/reflect-metadata/Reflect.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/node_modules/systemjs/dist/system.src.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"/systemjs.config.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\n      System.import('/app');\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;phonecat-app&gt;&lt;/phonecat-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>That is the last we'll see of Angular 1! It has served us well but now it's time to say goodbye.</p> <h1 id=\"appendix-upgrading-phonecat-tests\">Appendix: Upgrading PhoneCat Tests</h1> <p>Tests can not only be retained through an upgrade process, but they can also be used as a valuable safety measure when ensuring that the application does not break during the upgrade. E2E tests are especially useful for this purpose.</p> <h2 id=\"e2e-tests\">E2E Tests</h2> <p>The PhoneCat project has both E2E Protractor tests and some Karma unit tests in it. Of these two, E2E tests can be dealt with much more easily: By definition, E2E tests access our application from the <em>outside</em> by interacting with the various UI elements the app puts on the screen. E2E tests aren't really that concerned with the internal structure of the application components. That also means that although we modify our project quite a bit during the upgrade, the E2E test suite should keep passing with just minor modifications. This is because we don't change how the application behaves from the user's point of view.</p> <p>During TypeScript conversion, there is nothing we have to do to keep E2E tests working. It is only when we start to upgrade components and their template to Angular 2 that we need to make some changes. This is because the E2E tests have matchers that are specific to Angular 1. For PhoneCat we need to make the following changes in order to make things work with Angular 2:</p> <table>\n<tr>\n<th>Previous code</th>\n<th>New code</th>\n<th>Notes</th>\n</tr>\n<tr>\n<td>\n<p><code>by.repeater('phone in $ctrl.phones').column('phone.name')</code></p> </td>\n<td>\n<p><code>by.css('.phones .name')</code></p> </td>\n<td>\n<p>The repeater matcher relies on Angular 1 <code>ng-repeat</code></p> </td>\n</tr>\n<tr>\n<td>\n<p><code>by.repeater('phone in $ctrl.phones')</code></p> </td>\n<td>\n<p><code>by.css('.phones li')</code></p> </td>\n<td>\n<p>The repeater matcher relies on Angular 1 <code>ng-repeat</code></p> </td>\n</tr>\n<tr>\n<td>\n<p><code>by.model('$ctrl.query')</code></p> </td>\n<td>\n<p><code>by.css('input')</code></p> </td>\n<td>\n<p>The model matcher relies on Angular 1 <code>ng-model</code></p> </td>\n</tr>\n<tr>\n<td>\n<p><code>by.model('$ctrl.orderProp')</code></p> </td>\n<td>\n<p><code>by.css('select')</code></p> </td>\n<td>\n<p>The model matcher relies on Angular 1 <code>ng-model</code></p> </td>\n</tr>\n<tr>\n<td>\n<p><code>by.binding('$ctrl.phone.name')</code></p> </td>\n<td>\n<p><code>by.css('h1')</code></p> </td>\n<td>\n<p>The binding matcher relies on Angular 1 data binding</p> </td>\n</tr>\n</table>\n<p>When the bootstrap method is switched from that of <code>UpgradeAdapter</code> to pure Angular 2, Angular 1 ceases to exist on the page completely. At this point we need to tell Protractor that it should not be looking for an Angular 1 app anymore, but instead it should find <em>Angular 2 apps</em> from the page. The following change is then needed in <code>protractor-conf.js</code>:</p> <pre format=\"\">useAllAngular2AppRoots: true,\n</pre>\n<p>Also, there are a couple of Protractor API calls in the PhoneCat test code that are using the Angular 1 <code>$location</code> service under the hood. As that service is no longer there after the upgrade, we need to replace those calls with ones that use WebDriver's generic URL APIs instead. The first of these is the redirection spec:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"e2e-tests/scenarios.ts\">// e2e-tests/scenarios.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-3-final/e2e-spec-redirect.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<p>And the second is the phone links spec:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"e2e-tests/scenarios.ts\">// e2e-tests/scenarios.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-3-final/e2e-spec-links.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<h2 id=\"unit-tests\">Unit Tests</h2> <p>For unit tests, on the other hand, more conversion work is needed. Effectively they need to be <em>upgraded</em> along with the production code.</p> <p>During TypeScript conversion no changes are strictly necessary. But it may be a good idea to convert the unit test code into TypeScript as well, as the same benefits we from TypeScript in production code also applies to tests.</p> <p>For instance, in the phone detail component spec we can use not only ES2015 features like arrow functions and block-scoped variables, but also type definitions for some of the Angular 1 services we're consuming:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.spec.ts\">// app/phone-detail/phone-detail.component.spec.ts\n\ndescribe('phoneDetail', () =&gt; {\n\n  // Load the module that contains the `phoneDetail` component before each test\n  beforeEach(angular.mock.module('phoneDetail'));\n\n  // Test the controller\n  describe('PhoneDetailController', () =&gt; {\n    let $httpBackend: angular.IHttpBackendService;\n    let ctrl: any;\n    let xyzPhoneData = {\n      name: 'phone xyz',\n      images: ['image/url1.png', 'image/url2.png']\n    };\n\n    beforeEach(inject(($componentController: any,\n                       _$httpBackend_: angular.IHttpBackendService,\n                       $routeParams: angular.route.IRouteParamsService) =&gt; {\n      $httpBackend = _$httpBackend_;\n      $httpBackend.expectGET('phones/xyz.json').respond(xyzPhoneData);\n\n      $routeParams['phoneId'] = 'xyz';\n\n      ctrl = $componentController('phoneDetail');\n    }));\n\n    it('should fetch the phone details', () =&gt; {\n      jasmine.addCustomEqualityTester(angular.equals);\n\n      expect(ctrl.phone).toEqual({});\n\n      $httpBackend.flush();\n      expect(ctrl.phone).toEqual(xyzPhoneData);\n    });\n\n  });\n\n});\n</pre>\n<p>Once we start the upgrade process and bring in SystemJS, configuration changes are needed for Karma. We need to let SystemJS load all the new Angular 2 code, which can be done with the following kind of shim file:</p> <pre language=\"js\" format=\"linenums\" data-language=\"js\" name=\"karma-test-shim.js\">// karma-test-shim.js\n\n// /*global jasmine, __karma__, window*/\nError.stackTraceLimit = Infinity;\njasmine.DEFAULT_TIMEOUT_INTERVAL = 1000;\n\n__karma__.loaded = function () {\n};\n\nfunction isJsFile(path) {\n  return path.slice(-3) == '.js';\n}\n\nfunction isSpecFile(path) {\n  return /\\.spec\\.js$/.test(path);\n}\n\nfunction isBuiltFile(path) {\n  var builtPath = '/base/app/';\n  return isJsFile(path) &amp;&amp; (path.substr(0, builtPath.length) == builtPath);\n}\n\nvar allSpecFiles = Object.keys(window.__karma__.files)\n  .filter(isSpecFile)\n  .filter(isBuiltFile);\n\nSystem.config({\n  baseURL: '/base',\n  packageWithIndex: true // sadly, we can't use umd packages (yet?)\n});\n\nSystem.import('systemjs.config.js')\n  .then(function () {\n    return Promise.all([\n      System.import('@angular/core/testing'),\n      System.import('@angular/platform-browser-dynamic/testing')\n    ])\n  })\n  .then(function (providers) {\n    var testing = providers[0];\n    var testingBrowser = providers[1];\n\n    testing.setBaseTestProviders(\n      testingBrowser.TEST_BROWSER_DYNAMIC_PLATFORM_PROVIDERS,\n      testingBrowser.TEST_BROWSER_DYNAMIC_APPLICATION_PROVIDERS);\n\n  })\n  .then(function() {\n    // Finally, load all spec files.\n    // This will run the tests directly.\n    return Promise.all(\n      allSpecFiles.map(function (moduleName) {\n        return System.import(moduleName);\n      }));\n  })\n  .then(__karma__.start, __karma__.error);\n</pre>\n<p>The shim first loads the SystemJS configuration, then Angular 2's test support libraries, and then the application's spec files themselves.</p> <p>Karma configuration should then be changed so that it uses the application root dir as the base directory, instead of <code>app</code>.</p> <pre language=\"js\" format=\"\" data-language=\"js\" name=\"karma.conf.js\">// karma.conf.js\n\nbasePath: './',\n</pre>\n<p>Once this is done, we can load SystemJS and other dependencies, and also switch the configuration for loading application files so that they are <em>not</em> included to the page by Karma. We'll let the shim and SystemJS load them.</p> <pre language=\"js\" format=\"linenums\" data-language=\"js\" name=\"karma.conf.js\">// karma.conf.js\n\n// System.js for module loading\n'node_modules/systemjs/dist/system.src.js',\n\n// Polyfills\n'node_modules/core-js/client/shim.js',\n\n// Reflect and Zone.js\n'node_modules/reflect-metadata/Reflect.js',\n'node_modules/zone.js/dist/zone.js',\n'node_modules/zone.js/dist/jasmine-patch.js',\n'node_modules/zone.js/dist/async-test.js',\n'node_modules/zone.js/dist/fake-async-test.js',\n\n// RxJs.\n{ pattern: 'node_modules/rxjs/**/*.js', included: false, watched: false },\n{ pattern: 'node_modules/rxjs/**/*.js.map', included: false, watched: false },\n\n// Angular 2 itself and the testing library\n{pattern: 'node_modules/@angular/**/*.js', included: false, watched: false},\n{pattern: 'node_modules/@angular/**/*.js.map', included: false, watched: false},\n\n{pattern: 'systemjs.config.js', included: false, watched: false},\n'karma-test-shim.js',\n\n{pattern: 'app/**/*.module.js', included: false, watched: true},\n{pattern: 'app/*!(.module|.spec).js', included: false, watched: true},\n{pattern: 'app/!(bower_components)/**/*!(.module|.spec).js', included: false, watched: true},\n{pattern: 'app/**/*.spec.js', included: false, watched: true},\n\n{pattern: '**/*.html', included: false, watched: true},\n</pre>\n<p>Since the HTML templates of Angular 2 components will be loaded as well, we need to help Karma out a bit so that it can route them to the right paths:</p> <pre language=\"js\" format=\"linenums\" data-language=\"js\" name=\"karma.conf.js\">// karma.conf.js\n\n// proxied base paths for loading assets\nproxies: {\n  // required for component assets fetched by Angular's compiler\n  \"/phone-detail\": '/base/app/phone-detail',\n  \"/phone-list\": '/base/app/phone-list'\n},\n</pre>\n<p>The unit test files themselves also need to be switched to Angular 2 when their production counterparts are switched. The specs for the checkmark pipe are probably the most straightforward, as the pipe has no dependencies:</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/core/checkmark/checkmark.pipe.spec.ts\">// app/core/checkmark/checkmark.pipe.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-2-hybrid/ts/app/core/checkmark/checkmark.pipe.spec.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<p>The unit test for the phone service is a bit more involved. We need to switch from the mocked-out Angular 1 <code>$httpBackend</code> to a mocked-out Angular 2 Http backend.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/core/phone/phone.service.spec.ts\">// app/core/phone/phone.service.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-2-hybrid/ts/app/core/phone/phone.service.spec.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<p>For the component specs we can mock out the <code>Phone</code> service itself, and have it provide canned phone data. We use Angular's component unit testing APIs for both components.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.spec.ts\">// app/phone-detail/phone-detail.component.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-2-hybrid/ts/app/phone-detail/phone-detail.component.spec.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.spec.ts\">// app/phone-list/phone-list.component.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-2-hybrid/ts/app/phone-list/phone-list.component.spec.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<p>Finally, we need to revisit both of the component tests when we switch to the Angular 2 router. For the details component we need to provide an Angular 2 <code>RouteParams</code> object instead of using the Angular 1 <code>$routeParams</code>.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/phone-detail/phone-detail.component.spec.ts\">// app/phone-detail/phone-detail.component.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-3-final/ts/app/phone-detail/phone-detail.component.spec-routeparams.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre>\n<p>And for the phone list component we need to set up a few things for the router itself so that the route link directive will work.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\" name=\"app/phone-list/phone-list.component.spec.ts\">// app/phone-list/phone-list.component.spec.ts\n\nBAD FILENAME: ../../../_fragments/upgrade-phonecat-3-final/ts/app/phone-list/phone-list.component.spec-routestuff.ts.md   Current path: docs,ts,latest,guide,upgrade PathToDocs: ../../../</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/guide/upgrade.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/guide/upgrade.html</a>\n  </p>\n</div>\n","api/common/index/datepipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DatePipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DatePipe {\n  transform(value: any, pattern?: string) : string\n  supports(obj: any) : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Formats a date value to a string based on the requested format.</p> <p>WARNINGS:</p> <ul> <li>this pipe is marked as pure hence it will not be re-evaluated when the input is mutated. Instead users should treat the date as an immutable object and change the reference when the pipe needs to re-run (this is to avoid reformatting the date on every change detection run which would be an expensive operation).</li> <li>this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera browsers.</li> </ul> <h2 id=\"usage\">Usage</h2> <pre><code>expression | date[:format]\n</code></pre>\n<p>where <code>expression</code> is a date object or a number (milliseconds since UTC epoch) or an ISO string (<a href=\"https://www.w3.org/TR/NOTE-datetime\">https://www.w3.org/TR/NOTE-datetime</a>) and <code>format</code> indicates which date/time components to include:</p> <table> <thead> <tr> <th>Component</th> <th style=\"text-align:center\">Symbol</th> <th>Short Form</th> <th>Long Form</th> <th>Numeric</th> <th>2-digit</th> </tr> </thead> <tbody> <tr> <td>era</td> <td style=\"text-align:center\">G</td> <td>G (AD)</td> <td>GGGG (Anno Domini)</td> <td>-</td> <td>-</td> </tr> <tr> <td>year</td> <td style=\"text-align:center\">y</td> <td>-</td> <td>-</td> <td>y (2015)</td> <td>yy (15)</td> </tr> <tr> <td>month</td> <td style=\"text-align:center\">M</td> <td>MMM (Sep)</td> <td>MMMM (September)</td> <td>M (9)</td> <td>MM (09)</td> </tr> <tr> <td>day</td> <td style=\"text-align:center\">d</td> <td>-</td> <td>-</td> <td>d (3)</td> <td>dd (03)</td> </tr> <tr> <td>weekday</td> <td style=\"text-align:center\">E</td> <td>EEE (Sun)</td> <td>EEEE (Sunday)</td> <td>-</td> <td>-</td> </tr> <tr> <td>hour</td> <td style=\"text-align:center\">j</td> <td>-</td> <td>-</td> <td>j (13)</td> <td>jj (13)</td> </tr> <tr> <td>hour12</td> <td style=\"text-align:center\">h</td> <td>-</td> <td>-</td> <td>h (1 PM)</td> <td>hh (01 PM)</td> </tr> <tr> <td>hour24</td> <td style=\"text-align:center\">H</td> <td>-</td> <td>-</td> <td>H (13)</td> <td>HH (13)</td> </tr> <tr> <td>minute</td> <td style=\"text-align:center\">m</td> <td>-</td> <td>-</td> <td>m (5)</td> <td>mm (05)</td> </tr> <tr> <td>second</td> <td style=\"text-align:center\">s</td> <td>-</td> <td>-</td> <td>s (9)</td> <td>ss (09)</td> </tr> <tr> <td>timezone</td> <td style=\"text-align:center\">z</td> <td>-</td> <td>z (Pacific Standard Time)</td> <td>-</td> <td>-</td> </tr> <tr> <td>timezone</td> <td style=\"text-align:center\">Z</td> <td>Z (GMT-8:00)</td> <td>-</td> <td>-</td> <td>-</td> </tr> </tbody> </table> <p>In javascript, only the components specified will be respected (not the ordering, punctuations, ...) and details of the formatting will be dependent on the locale.</p> <p><code>format</code> can also be one of the following predefined formats:</p> <ul> <li>\n<code>'medium'</code>: equivalent to <code>'yMMMdjms'</code> (e.g. Sep 3, 2010, 12:05:08 PM for en-US)</li> <li>\n<code>'short'</code>: equivalent to <code>'yMdjm'</code> (e.g. 9/3/2010, 12:05 PM for en-US)</li> <li>\n<code>'fullDate'</code>: equivalent to <code>'yMMMMEEEEd'</code> (e.g. Friday, September 3, 2010 for en-US)</li> <li>\n<code>'longDate'</code>: equivalent to <code>'yMMMMd'</code> (e.g. September 3, 2010)</li> <li>\n<code>'mediumDate'</code>: equivalent to <code>'yMMMd'</code> (e.g. Sep 3, 2010 for en-US)</li> <li>\n<code>'shortDate'</code>: equivalent to <code>'yMd'</code> (e.g. 9/3/2010 for en-US)</li> <li>\n<code>'mediumTime'</code>: equivalent to <code>'jms'</code> (e.g. 12:05:08 PM for en-US)</li> <li>\n<code>'shortTime'</code>: equivalent to <code>'jm'</code> (e.g. 12:05 PM for en-US)</li> </ul> <p>Timezone of the formatted text will be the local system timezone of the end-users machine.</p> <h3 id=\"examples\">Examples</h3> <p>Assuming <code>dateObj</code> is (year: 2015, month: 6, day: 15, hour: 21, minute: 43, second: 11) in the <em>local</em> time and locale is 'en-US':</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">{{ dateObj | date }}               // output is 'Jun 15, 2015'\n{{ dateObj | date:'medium' }}      // output is 'Jun 15, 2015, 9:43:11 PM'\n{{ dateObj | date:'shortTime' }}   // output is '9:43 PM'\n{{ dateObj | date:'mmss' }}        // output is '43:11'\n</pre>\n<pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'date-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;Today is {{today | date}}&lt;/p&gt;\n    &lt;p&gt;Or if you prefer, {{today | date:'fullDate'}}&lt;/p&gt;\n    &lt;p&gt;The time is {{today | date:'jmZ'}}&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class DatePipeExample {\n  today: number = Date.now();\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DatePipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'date', pure: true})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, pattern?: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('supports') }\" class=\"prettyprint no-bg\" id=\"supports-anchor\">supports(obj: any) : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/date_pipe.ts#L16-L126\">@angular/common/src/pipes/date_pipe.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/DatePipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/DatePipe-class.html</a>\n  </p>\n</div>\n","api/common/index/defaultvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">DefaultValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DefaultValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (_: any) =&gt; void) : void\n  registerOnTouched(fn: () =&gt; void) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>input:not([type=checkbox])[ngControl]</code></p>\n<p class=\"selector\"><code>textarea[ngControl]</code></p>\n<p class=\"selector\"><code>input:not([type=checkbox])[ngFormControl]</code></p>\n<p class=\"selector\"><code>textarea[ngFormControl]</code></p>\n<p class=\"selector\"><code>input:not([type=checkbox])[ngModel]</code></p>\n<p class=\"selector\"><code>textarea[ngModel]</code></p>\n<p class=\"selector\"><code>[ngDefaultControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The default accessor for writing a value and listening to changes that is used by the <a href=\"ngmodel-directive\"><code>NgModel</code></a>, <a href=\"ngformcontrol-directive\"><code>NgFormControl</code></a>, and <a href=\"ngcontrolname-directive\"><code>NgControlName</code></a> directives.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input type=\"text\" ngControl=\"searchQuery\"&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive DefaultValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (_: any) =&gt; void) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; void) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/default_value_accessor.ts#L19-L54\">@angular/common/src/forms-deprecated/directives/default_value_accessor.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/DefaultValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/DefaultValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/common/index/abstractcontroldirective-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractControlDirective</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractControlDirective {\n  control : AbstractControl\n  value : any\n  valid : boolean\n  errors : {[key: string]: any}\n  pristine : boolean\n  dirty : boolean\n  touched : boolean\n  untouched : boolean\n  path : string[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Base class for control directives.</p> <p>Only used internally in the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractControlDirective</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : AbstractControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valid') }\" class=\"prettyprint no-bg\" id=\"valid-anchor\">valid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('errors') }\" class=\"prettyprint no-bg\" id=\"errors-anchor\">errors : {[key: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pristine') }\" class=\"prettyprint no-bg\" id=\"pristine-anchor\">pristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dirty') }\" class=\"prettyprint no-bg\" id=\"dirty-anchor\">dirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('touched') }\" class=\"prettyprint no-bg\" id=\"touched-anchor\">touched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('untouched') }\" class=\"prettyprint no-bg\" id=\"untouched-anchor\">untouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/abstract_control_directive.ts#L11-L41\">@angular/common/src/forms-deprecated/directives/abstract_control_directive.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/AbstractControlDirective-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/AbstractControlDirective-class.html</a>\n  </p>\n</div>\n","api/common/index/common_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">COMMON_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export COMMON_DIRECTIVES</pre>\n<p>A collection of Angular core directives that are likely to be used in each and every Angular application. This includes core directives (e.g., NgIf and NgFor), and forms directives (e.g., NgModel).</p> <p>This collection can be used to quickly enumerate all the built-in directives in the <code>directives</code> property of the <code>@Component</code> decorator.</p> <h3 id=\"example\">Example</h3> <p>Instead of writing:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm} from\n'@angular/common';\nimport {OtherDirective} from './myDirectives';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, NgModel, NgForm,\nOtherDirective]\n})\nexport class MyComponent {\n  ...\n}\n</pre>\n<p>one could import all the common directives at once:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {COMMON_DIRECTIVES} from '@angular/common';\nimport {OtherDirective} from './myDirectives';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [COMMON_DIRECTIVES, OtherDirective]\n})\nexport class MyComponent {\n  ...\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/common_directives.ts#L58-L58\">@angular/common/src/common_directives.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/COMMON_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/COMMON_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/common/index/decimalpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DecimalPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DecimalPipe {\n  transform(value: any, digits?: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>WARNING: this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an polyfill, for example: [<a href=\"https://github.com/andyearnshaw/Intl.js/\">https://github.com/andyearnshaw/Intl.js/</a>].</p> <p>Formats a number as local text. i.e. group sizing and separator and other locale-specific configurations are based on the active locale.</p> <h3 id=\"usage\">Usage</h3> <pre><code>expression | number[:digitInfo]\n</code></pre>\n<p>where <code>expression</code> is a number and <code>digitInfo</code> has the following format:</p> <pre><code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}\n</code></pre>\n<ul> <li>minIntegerDigits is the minimum number of integer digits to use. Defaults to 1.</li> <li>minFractionDigits is the minimum number of digits after fraction. Defaults to 0.</li> <li>maxFractionDigits is the maximum number of digits after fraction. Defaults to 3.</li> </ul> <p>For more information on the acceptable range for each of these numbers and other details see your native internationalization library.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'number-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;e (no formatting): {{e}}&lt;/p&gt;\n    &lt;p&gt;e (3.1-5): {{e | number:'3.1-5'}}&lt;/p&gt;\n    &lt;p&gt;pi (no formatting): {{pi}}&lt;/p&gt;\n    &lt;p&gt;pi (3.5-5): {{pi | number:'3.5-5'}}&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class NumberPipeExample {\n  pi: number = 3.141;\n  e: number = 2.718281828459045;\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DecimalPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'number'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, digits?: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/number_pipe.ts#L60-L96\">@angular/common/src/pipes/number_pipe.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/DecimalPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/form_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">FORM_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export FORM_DIRECTIVES</pre>\n<p>A list of all the form directives used as part of a <code>@Component</code> annotation.</p> <p> This is a shorthand for importing them each individually.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  directives: [FORM_DIRECTIVES]\n})\nclass MyApp {}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives.ts#L61-L84\">@angular/common/src/forms-deprecated/directives.ts (line 61)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/FORM_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/FORM_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/common/index/asyncpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AsyncPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AsyncPipe {\n  constructor(_ref: ChangeDetectorRef)\n  \n  \n  ngOnDestroy() : void\n  transform(obj: Observable&lt;any&gt;|Promise&lt;any&gt;|EventEmitter&lt;any&gt;) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The <code>async</code> pipe subscribes to an <code>Observable</code> or <code>Promise</code> and returns the latest value it has emitted. When a new value is emitted, the <code>async</code> pipe marks the component to be checked for changes. When the component gets destroyed, the <code>async</code> pipe unsubscribes automatically to avoid potential memory leaks.</p> <h2 id=\"usage\">Usage</h2> <pre><code>object | async\n</code></pre>\n<p>where <code>object</code> is of type <code>Observable</code> or of type <code>Promise</code>.</p> <h2 id=\"examples\">Examples</h2> <p>This example binds a <code>Promise</code> to the view. Clicking the <code>Resolve</code> button resolves the promise.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'async-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;Wait for it... {{ greeting | async }}&lt;/p&gt;\n    &lt;button (click)=\"clicked()\"&gt;{{ arrived ? 'Reset' : 'Resolve' }}&lt;/button&gt;\n  &lt;/div&gt;`\n})\nexport class AsyncPipeExample {\n  greeting: Promise&lt;string&gt; = null;\n  arrived: boolean = false;\n\n  private resolve: Function = null;\n\n  constructor() { this.reset(); }\n\n  reset() {\n    this.arrived = false;\n    this.greeting = new Promise&lt;string&gt;((resolve, reject) =&gt; { this.resolve = resolve; });\n  }\n\n  clicked() {\n    if (this.arrived) {\n      this.reset();\n    } else {\n      this.resolve('hi there!');\n      this.arrived = true;\n    }\n  }\n}\n</pre>\n<p>It's also possible to use <code>async</code> with Observables. The example below binds the <code>time</code> Observable to the view. Every 500ms, the <code>time</code> Observable updates the view with the current time.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'task-cmp', template: 'Time: {{ time | async }}'})\nclass Task {\n  time = new Observable&lt;number&gt;((observer: Subscriber&lt;number&gt;) =&gt; {\n    setInterval(() =&gt; observer.next(new Date().getTime()), 500);\n  });\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AsyncPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'async', pure: false})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_ref: ChangeDetectorRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(obj: Observable&lt;any&gt;|Promise&lt;any&gt;|EventEmitter&lt;any&gt;) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/async_pipe.ts#L42-L151\">@angular/common/src/pipes/async_pipe.ts (line 42)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/AsyncPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/AsyncPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/common_pipes-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">COMMON_PIPES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export COMMON_PIPES</pre>\n<p>A collection of Angular core pipes that are likely to be used in each and every application.</p> <p>This collection can be used to quickly enumerate all the built-in pipes in the <code>pipes</code> property of the <code>@Component</code> decorator.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/common_pipes.ts#L35-L48\">@angular/common/src/pipes/common_pipes.ts (line 35)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/COMMON_PIPES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/COMMON_PIPES-let.html</a>\n  </p>\n</div>\n","api/common/index/form-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Form</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Form {\n  addControl(dir: NgControl) : void\n  removeControl(dir: NgControl) : void\n  getControl(dir: NgControl) : Control\n  addControlGroup(dir: NgControlGroup) : void\n  removeControlGroup(dir: NgControlGroup) : void\n  getControlGroup(dir: NgControlGroup) : ControlGroup\n  updateModel(dir: NgControl, value: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface that <a href=\"ngformmodel-directive\"><code>NgFormModel</code></a> and <a href=\"ngform-directive\"><code>NgForm</code></a> implement.</p> <p>Only used by the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Form</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgControl) : void</pre>\n<p>Add a control to this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgControl) : void</pre>\n<p>Remove a control from this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgControl) : Control</pre>\n<p>Look up the <a href=\"control-class\"><code>Control</code></a> associated with a particular <a href=\"ngcontrol-class\"><code>NgControl</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControlGroup') }\" class=\"prettyprint no-bg\" id=\"addControlGroup-anchor\">addControlGroup(dir: NgControlGroup) : void</pre>\n<p>Add a group of controls to this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControlGroup') }\" class=\"prettyprint no-bg\" id=\"removeControlGroup-anchor\">removeControlGroup(dir: NgControlGroup) : void</pre>\n<p>Remove a group of controls from this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControlGroup') }\" class=\"prettyprint no-bg\" id=\"getControlGroup-anchor\">getControlGroup(dir: NgControlGroup) : ControlGroup</pre>\n<p>Look up the <a href=\"controlgroup-class\"><code>ControlGroup</code></a> associated with a particular <a href=\"ngcontrolgroup-directive\"><code>NgControlGroup</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n<p>Update the model for a particular control with a new value.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/form_interface.ts#L12-L57\">@angular/common/src/forms-deprecated/directives/form_interface.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/Form-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/Form-interface.html</a>\n  </p>\n</div>\n","api/common/index/hashlocationstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HashLocationStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HashLocationStrategy {\n  constructor(_platformLocation: PlatformLocation, _baseHref?: string)\n  \n  \n  onPopState(fn: UrlChangeListener) : void\n  getBaseHref() : string\n  path(includeHash?: boolean) : string\n  prepareExternalUrl(internal: string) : string\n  pushState(state: any, title: string, path: string, queryParams: string)\n  replaceState(state: any, title: string, path: string, queryParams: string)\n  forward() : void\n  back() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>HashLocationStrategy</code> is a <a href=\"locationstrategy-class\"><code>LocationStrategy</code></a> used to configure the <a href=\"location-class\"><code>Location</code></a> service to represent its state in the <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax\">hash fragment</a> of the browser's URL.</p> <p>For instance, if you call <code>location.go('/foo')</code>, the browser's URL will become <code>example.com#/foo</code>.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component, provide} from '@angular/core';\nimport {\n  Location,\n  LocationStrategy,\n  HashLocationStrategy\n} from '@angular/common';\nimport {\n  ROUTER_DIRECTIVES,\n  ROUTER_PROVIDERS,\n  RouteConfig\n} from '@angular/router';\n\n@Component({directives: [ROUTER_DIRECTIVES]})\n@RouteConfig([\n {...},\n])\nclass AppCmp {\n  constructor(location: Location) {\n    location.go('/foo');\n  }\n}\n\nbootstrap(AppCmp, [\n  ROUTER_PROVIDERS,\n  {provide: LocationStrategy, useClass: HashLocationStrategy}\n]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HashLocationStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_platformLocation: PlatformLocation, _baseHref?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHref') }\" class=\"prettyprint no-bg\" id=\"getBaseHref-anchor\">getBaseHref() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path(includeHash?: boolean) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(internal: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(state: any, title: string, path: string, queryParams: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(state: any, title: string, path: string, queryParams: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/hash_location_strategy.ts#L15-L113\">@angular/common/src/location/hash_location_strategy.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/HashLocationStrategy-class.html</a>\n  </p>\n</div>\n","api/common/index/i18nselectpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">I18nSelectPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class I18nSelectPipe {\n  transform(value: string, mapping: {[key: string]: string}) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Generic selector that displays the string that matches the current value.</p> <h2 id=\"usage\">Usage</h2> <p> expression | i18nSelect:mapping</p> <p> where <code>mapping</code> is an object that indicates the text that should be displayed for different values of the provided <code>expression</code>.</p> <h2 id=\"example\">Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div&gt;\n  {{ gender | i18nSelect: inviteMap }}\n&lt;/div&gt;\n\nclass MyApp {\n  gender: string = 'male';\n  inviteMap: any = {\n    'male': 'Invite him.',\n    'female': 'Invite her.',\n    'other': 'Invite them.'\n  }\n  ...\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class I18nSelectPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'i18nSelect', pure: true})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: string, mapping: {[key: string]: string}) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/i18n_select_pipe.ts#L11-L55\">@angular/common/src/pipes/i18n_select_pipe.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/I18nSelectPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/I18nSelectPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/jsonpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">JsonPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class JsonPipe {\n  transform(value: any) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Transforms any input value using <code>JSON.stringify</code>. Useful for debugging.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'json-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;Without JSON pipe:&lt;/p&gt;\n    &lt;pre&gt;{{object}}&lt;/pre&gt;\n    &lt;p&gt;With JSON pipe:&lt;/p&gt;\n    &lt;pre&gt;{{object | json}}&lt;/pre&gt;\n  &lt;/div&gt;`\n})\nexport class JsonPipeExample {\n  object: Object = {foo: 'bar', baz: 'qux', nested: {xyz: 3, numbers: [1, 2, 3, 4, 5]}};\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class JsonPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'json', pure: false})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/json_pipe.ts#L11-L26\">@angular/common/src/pipes/json_pipe.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/JsonPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/JsonPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/abstractcontrol-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractControl {\n  constructor(validator: ValidatorFn, asyncValidator: AsyncValidatorFn)\n  \n  \n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  value : any\n  status : string\n  valid : boolean\n  errors : {[key: string]: any}\n  pristine : boolean\n  dirty : boolean\n  touched : boolean\n  untouched : boolean\n  valueChanges : Observable&lt;any&gt;\n  statusChanges : Observable&lt;any&gt;\n  pending : boolean\n  markAsTouched() : void\n  markAsDirty({onlySelf}?: {onlySelf?: boolean}) : void\n  markAsPending({onlySelf}?: {onlySelf?: boolean}) : void\n  setParent(parent: ControlGroup|ControlArray) : void\n  updateValueAndValidity({onlySelf, emitEvent}?: {onlySelf?: boolean, emitEvent?: boolean}) : void\n  setErrors(errors: {[key: string]: any}, {emitEvent}?: {emitEvent?: boolean}) : void\n  find(path: Array&lt;string|number&gt;|string) : AbstractControl\n  getError(errorCode: string, path?: string[]) : any\n  hasError(errorCode: string, path?: string[]) : boolean\n  root : AbstractControl\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(validator: ValidatorFn, asyncValidator: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('status') }\" class=\"prettyprint no-bg\" id=\"status-anchor\">status : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valid') }\" class=\"prettyprint no-bg\" id=\"valid-anchor\">valid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('errors') }\" class=\"prettyprint no-bg\" id=\"errors-anchor\">errors : {[key: string]: any}</pre>\n<p>Returns the errors of this control.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pristine') }\" class=\"prettyprint no-bg\" id=\"pristine-anchor\">pristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dirty') }\" class=\"prettyprint no-bg\" id=\"dirty-anchor\">dirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('touched') }\" class=\"prettyprint no-bg\" id=\"touched-anchor\">touched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('untouched') }\" class=\"prettyprint no-bg\" id=\"untouched-anchor\">untouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valueChanges') }\" class=\"prettyprint no-bg\" id=\"valueChanges-anchor\">valueChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('statusChanges') }\" class=\"prettyprint no-bg\" id=\"statusChanges-anchor\">statusChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pending') }\" class=\"prettyprint no-bg\" id=\"pending-anchor\">pending : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsTouched') }\" class=\"prettyprint no-bg\" id=\"markAsTouched-anchor\">markAsTouched() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsDirty') }\" class=\"prettyprint no-bg\" id=\"markAsDirty-anchor\">markAsDirty({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsPending') }\" class=\"prettyprint no-bg\" id=\"markAsPending-anchor\">markAsPending({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setParent') }\" class=\"prettyprint no-bg\" id=\"setParent-anchor\">setParent(parent: ControlGroup|ControlArray) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateValueAndValidity') }\" class=\"prettyprint no-bg\" id=\"updateValueAndValidity-anchor\">updateValueAndValidity({onlySelf, emitEvent}?: {onlySelf?: boolean, emitEvent?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setErrors') }\" class=\"prettyprint no-bg\" id=\"setErrors-anchor\">setErrors(errors: {[key: string]: any}, {emitEvent}?: {emitEvent?: boolean}) : void</pre>\n<p>Sets errors on a control.</p> <p>This is used when validations are run not automatically, but manually by the user.</p> <p>Calling <code>setErrors</code> will also update the validity of the parent control.</p> <h2 id=\"usage\">Usage</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var login = new Control(\"someLogin\");\nlogin.setErrors({\n  \"notUnique\": true\n});\n\nexpect(login.valid).toEqual(false);\nexpect(login.errors).toEqual({\"notUnique\": true});\n\nlogin.updateValue(\"someOtherLogin\");\n\nexpect(login.valid).toEqual(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('find') }\" class=\"prettyprint no-bg\" id=\"find-anchor\">find(path: Array&lt;string|number&gt;|string) : AbstractControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getError') }\" class=\"prettyprint no-bg\" id=\"getError-anchor\">getError(errorCode: string, path?: string[]) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hasError') }\" class=\"prettyprint no-bg\" id=\"hasError-anchor\">hasError(errorCode: string, path?: string[]) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('root') }\" class=\"prettyprint no-bg\" id=\"root-anchor\">root : AbstractControl</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/model.ts#L60-L262\">@angular/common/src/forms-deprecated/model.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/AbstractControl-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/AbstractControl-class.html</a>\n  </p>\n</div>\n","api/common/index/i18npluralpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">I18nPluralPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class I18nPluralPipe {\n  constructor(_localization: NgLocalization)\n  \n  \n  transform(value: number, pluralMap: {[count: string]: string}) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Maps a value to a string that pluralizes the value properly.</p> <h2 id=\"usage\">Usage</h2> <p> expression | i18nPlural:mapping</p> <p> where <code>expression</code> is a number and <code>mapping</code> is an object that mimics the ICU format, see <a href=\"http://userguide.icu-project.org/formatparse/messages\">http://userguide.icu-project.org/formatparse/messages</a></p> <h2 id=\"example\">Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyLocalization extends NgLocalization {\n  getPluralCategory(value: any) {\n    if(value &gt; 1) {\n      return 'other';\n    }\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;div&gt;\n      {{ messages.length | i18nPlural: messageMapping }}\n    &lt;/div&gt;\n  `,\n  providers: [{provide: NgLocalization, useClass: MyLocalization}]\n})\n\nclass MyApp {\n  messages: any[];\n  messageMapping: {[k:string]: string} = {\n    '=0': 'No messages.',\n    '=1': 'One message.',\n    'other': '# messages.'\n  }\n  ...\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class I18nPluralPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'i18nPlural', pure: true})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_localization: NgLocalization)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: number, pluralMap: {[count: string]: string}) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/i18n_plural_pipe.ts#L14-L75\">@angular/common/src/pipes/i18n_plural_pipe.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/I18nPluralPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/I18nPluralPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/lowercasepipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">LowerCasePipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class LowerCasePipe {\n  transform(value: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Transforms text to lowercase.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'lowerupper-example',\n  template: `&lt;div&gt;\n    &lt;label&gt;Name: &lt;/label&gt;&lt;input #name (keyup)=\"change(name.value)\" type=\"text\"&gt;\n    &lt;p&gt;In lowercase: &lt;pre&gt;'{{value | lowercase}}'&lt;/pre&gt;&lt;/p&gt;\n    &lt;p&gt;In uppercase: &lt;pre&gt;'{{value | uppercase}}'&lt;/pre&gt;&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class LowerUpperPipeExample {\n  value: string;\n  change(value: string) { this.value = value; }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class LowerCasePipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'lowercase'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/lowercase_pipe.ts#L11-L32\">@angular/common/src/pipes/lowercase_pipe.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/LowerCasePipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/LowerCasePipe-class.html</a>\n  </p>\n</div>\n","api/common/index/core_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">CORE_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export CORE_DIRECTIVES</pre>\n<p>A collection of Angular core directives that are likely to be used in each and every Angular application.</p> <p>This collection can be used to quickly enumerate all the built-in directives in the <code>directives</code> property of the <code>@Component</code> annotation.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-yakgwpcdukg0qfzx5m8g-p-preview-\">Example (<a href=\"http://plnkr.co/edit/yakGwpCdUkg0qfzX5m8g?p=preview\">live demo</a>)</h3> <p>Instead of writing:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault} from '@angular/common';\nimport {OtherDirective} from './myDirectives';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [NgClass, NgIf, NgFor, NgSwitch, NgSwitchWhen, NgSwitchDefault, OtherDirective]\n})\nexport class MyComponent {\n  ...\n}\n</pre>\n<p>one could import all the core directives at once:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {CORE_DIRECTIVES} from '@angular/common';\nimport {OtherDirective} from './myDirectives';\n\n@Component({\n  selector: 'my-component',\n  templateUrl: 'myComponent.html',\n  directives: [CORE_DIRECTIVES, OtherDirective]\n})\nexport class MyComponent {\n  ...\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/core_directives.ts#L61-L72\">@angular/common/src/directives/core_directives.ts (line 61)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/CORE_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/CORE_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/common/index/maxlengthvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">MaxLengthValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MaxLengthValidator {\n  constructor(maxLength: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[maxlength][ngControl]</code></p>\n<p class=\"selector\"><code>[maxlength][ngFormControl]</code></p>\n<p class=\"selector\"><code>[maxlength][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive which installs the <a href=\"maxlengthvalidator-directive\"><code>MaxLengthValidator</code></a> for any <code>ngControl,</code>ngFormControl<code>,\nor control with</code>ngModel<code>that also has a</code>maxlength` attribute.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive MaxLengthValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(maxLength: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/validators.ts#L114-L134\">@angular/common/src/forms-deprecated/directives/validators.ts (line 114)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/MaxLengthValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/MaxLengthValidator-directive.html</a>\n  </p>\n</div>\n","api/common/index/location-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Location</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Location {\n  normalizeQueryParams(params: string) : string\n  joinWithSlash(start: string, end: string) : string\n  stripTrailingSlash(url: string) : string\n  constructor(platformStrategy: LocationStrategy)\n  \n  \n  path(includeHash?: boolean) : string\n  isCurrentPathEqualTo(path: string, query?: string) : boolean\n  normalize(url: string) : string\n  prepareExternalUrl(url: string) : string\n  go(path: string, query?: string) : void\n  replaceState(path: string, query?: string) : void\n  forward() : void\n  back() : void\n  subscribe(onNext: (value: any) =&gt; void, onThrow?: (exception: any) =&gt; void, onReturn?: () =&gt; void) : Object\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>Location</code> is a service that applications can use to interact with a browser's URL. Depending on which <a href=\"locationstrategy-class\"><code>LocationStrategy</code></a> is used, <code>Location</code> will either persist to the URL's path or the URL's hash segment.</p> <p>Note: it's better to use <a href=\"../../router/index/router-class#navigate\"><code>Router</code></a> service to trigger route changes. Use <code>Location</code> only if you need to interact with or create normalized URLs outside of routing.</p> <p><code>Location</code> is responsible for normalizing the URL against the application's base href. A normalized URL is absolute from the URL host, includes the application's base href, and has no trailing slash:</p> <ul> <li>\n<code>/my/app/user/123</code> is normalized</li> <li>\n<code>my/app/user/123</code> <strong>is not</strong> normalized</li> <li>\n<code>/my/app/user/123/</code> <strong>is not</strong> normalized</li> </ul> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {\n  ROUTER_DIRECTIVES,\n  ROUTER_PROVIDERS,\n  RouteConfig\n} from '@angular/router';\n\n@Component({directives: [ROUTER_DIRECTIVES]})\n@RouteConfig([\n {...},\n])\nclass AppCmp {\n  constructor(location: Location) {\n    location.go('/foo');\n  }\n}\n\nbootstrap(AppCmp, [ROUTER_PROVIDERS]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Location</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(platformStrategy: LocationStrategy)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('normalizeQueryParams') }\" class=\"prettyprint no-bg\" id=\"normalizeQueryParams-anchor\">normalizeQueryParams(params: string) : string</pre>\n<p>Given a string of url parameters, prepend with '?' if needed, otherwise return parameters as is.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('joinWithSlash') }\" class=\"prettyprint no-bg\" id=\"joinWithSlash-anchor\">joinWithSlash(start: string, end: string) : string</pre>\n<p>Given 2 parts of a url, join them with a slash if needed.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('stripTrailingSlash') }\" class=\"prettyprint no-bg\" id=\"stripTrailingSlash-anchor\">stripTrailingSlash(url: string) : string</pre>\n<p>If url has a trailing slash, remove it, otherwise return url as is.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path(includeHash?: boolean) : string</pre>\n<p>Returns the normalized URL path.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isCurrentPathEqualTo') }\" class=\"prettyprint no-bg\" id=\"isCurrentPathEqualTo-anchor\">isCurrentPathEqualTo(path: string, query?: string) : boolean</pre>\n<p>Normalizes the given path and compares to the current normalized path.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('normalize') }\" class=\"prettyprint no-bg\" id=\"normalize-anchor\">normalize(url: string) : string</pre>\n<p>Given a string representing a URL, returns the normalized URL path without leading or trailing slashes</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(url: string) : string</pre>\n<p>Given a string representing a URL, returns the platform-specific external URL path. If the given URL doesn't begin with a leading slash (<code>'/'</code>), this method adds one before normalizing. This method will also add a hash if <code>HashLocationStrategy</code> is used, or the <code>APP_BASE_HREF</code> if the <code>PathLocationStrategy</code> is in use.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('go') }\" class=\"prettyprint no-bg\" id=\"go-anchor\">go(path: string, query?: string) : void</pre>\n<p>Changes the browsers URL to the normalized version of the given URL, and pushes a new item onto the platform's history.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(path: string, query?: string) : void</pre>\n<p>Changes the browsers URL to the normalized version of the given URL, and replaces the top item on the platform's history stack.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n<p>Navigates forward in the platform's history.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre>\n<p>Navigates back in the platform's history.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('subscribe') }\" class=\"prettyprint no-bg\" id=\"subscribe-anchor\">subscribe(onNext: (value: any) =&gt; void, onThrow?: (exception: any) =&gt; void, onReturn?: () =&gt; void) : Object</pre>\n<p>Subscribe to the platform's <code>popState</code> events.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/location.ts#L11-L190\">@angular/common/src/location/location.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/Location-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/Location-class.html</a>\n  </p>\n</div>\n","api/common/index/locationstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">LocationStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class LocationStrategy {\n  path(includeHash?: boolean) : string\n  prepareExternalUrl(internal: string) : string\n  pushState(state: any, title: string, url: string, queryParams: string) : void\n  replaceState(state: any, title: string, url: string, queryParams: string) : void\n  forward() : void\n  back() : void\n  onPopState(fn: UrlChangeListener) : void\n  getBaseHref() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>LocationStrategy</code> is responsible for representing and reading route state from the browser's URL. Angular provides two strategies: <a href=\"hashlocationstrategy-class\"><code>HashLocationStrategy</code></a> and <a href=\"pathlocationstrategy-class\"><code>PathLocationStrategy</code></a> (default).</p> <p>This is used under the hood of the <a href=\"location-class\"><code>Location</code></a> service.</p> <p>Applications should use the <a href=\"../../router/index/router-class\"><code>Router</code></a> or <a href=\"location-class\"><code>Location</code></a> services to interact with application route state.</p> <p>For instance, <a href=\"hashlocationstrategy-class\"><code>HashLocationStrategy</code></a> produces URLs like <code>http://example.com#/foo</code>, and <a href=\"pathlocationstrategy-class\"><code>PathLocationStrategy</code></a> produces <code>http://example.com/foo</code> as an equivalent URL.</p> <p>See these two classes for more.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class LocationStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path(includeHash?: boolean) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(internal: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(state: any, title: string, url: string, queryParams: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(state: any, title: string, url: string, queryParams: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHref') }\" class=\"prettyprint no-bg\" id=\"getBaseHref-anchor\">getBaseHref() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/location_strategy.ts#L10-L39\">@angular/common/src/location/location_strategy.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/LocationStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/LocationStrategy-class.html</a>\n  </p>\n</div>\n","api/common/index/minlengthvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">MinLengthValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MinLengthValidator {\n  constructor(minLength: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[minlength][ngControl]</code></p>\n<p class=\"selector\"><code>[minlength][ngFormControl]</code></p>\n<p class=\"selector\"><code>[minlength][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive which installs the <a href=\"minlengthvalidator-directive\"><code>MinLengthValidator</code></a> for any <code>ngControl</code>, <code>ngFormControl</code>, or control with <code>ngModel</code> that also has a <code>minlength</code> attribute.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive MinLengthValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(minLength: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/validators.ts#L81-L101\">@angular/common/src/forms-deprecated/directives/validators.ts (line 81)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/MinLengthValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/MinLengthValidator-directive.html</a>\n  </p>\n</div>\n","api/common/index/checkboxcontrolvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">CheckboxControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CheckboxControlValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (_: any) =&gt; {}) : void\n  registerOnTouched(fn: () =&gt; {}) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>input[type=checkbox][ngControl]</code></p>\n<p class=\"selector\"><code>input[type=checkbox][ngFormControl]</code></p>\n<p class=\"selector\"><code>input[type=checkbox][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The accessor for writing a value and listening to changes on a checkbox input element.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input type=\"checkbox\" ngControl=\"rememberLogin\"&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive CheckboxControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (_: any) =&gt; {}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; {}) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/checkbox_value_accessor.ts#L17-L46\">@angular/common/src/forms-deprecated/directives/checkbox_value_accessor.ts (line 17)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/CheckboxControlValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/CheckboxControlValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/common/index/control-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Control</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Control {\n  constructor(value?: any, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)\n  \n  \n  updateValue(value: any, {onlySelf, emitEvent, emitModelToViewChange}?: {?: boolean,?: boolean,?: boolean}) : void\n  registerOnChange(fn: Function) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form that cannot be divided into other controls. <code>Control</code>s have values and validation state, which is determined by an optional validation function.</p> <p><code>Control</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"controlgroup-class\"><code>ControlGroup</code></a> and <a href=\"controlarray-class\"><code>ControlArray</code></a>.</p> <h2 id=\"usage\">Usage</h2> <p>By default, a <code>Control</code> is created for every <code>&lt;input&gt;</code> or other form component. With <a href=\"ngformcontrol-directive\"><code>NgFormControl</code></a> or <a href=\"ngformmodel-directive\"><code>NgFormModel</code></a> an existing <a href=\"control-class\"><code>Control</code></a> can be bound to a DOM element instead. This <code>Control</code> can be configured with a custom validation function.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-23desopbnnbpbhzt1br4-p-preview-\">Example (<a href=\"http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview\">live demo</a>)</h3> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Control</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(value?: any, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateValue') }\" class=\"prettyprint no-bg\" id=\"updateValue-anchor\">updateValue(value: any, {onlySelf, emitEvent, emitModelToViewChange}?: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean\n  }) : void</pre>\n<p>Set the value of the control to <code>value</code>.</p> <p>If <code>onlySelf</code> is <code>true</code>, this change will only affect the validation of this <code>Control</code> and not its parent component. If <code>emitEvent</code> is <code>true</code>, this change will cause a <code>valueChanges</code> event on the <code>Control</code> to be emitted. Both of these options default to <code>false</code>.</p> <p>If <code>emitModelToViewChange</code> is <code>true</code>, the view will be notified about the new value via an <code>onChange</code> event. This is the default behavior if <code>emitModelToViewChange</code> is not specified.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: Function) : void</pre>\n<p>Register a listener for change events.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/model.ts#L262-L331\">@angular/common/src/forms-deprecated/model.ts (line 262)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/Control-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/Control-class.html</a>\n  </p>\n</div>\n","api/common/index/ngclass-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgClass</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgClass {\n  constructor(_iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer)\n  \n  \n  initialClasses \n  ngClass \n  ngDoCheck() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngClass]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The <code>NgClass</code> directive conditionally adds and removes CSS classes on an HTML element based on an expression's evaluation result.</p> <p>The result of an expression evaluation is interpreted differently depending on type of the expression evaluation result:</p> <ul> <li>\n<code>string</code> - all the CSS classes listed in a string (space delimited) are added</li> <li>\n<code>Array</code> - all the CSS classes (Array elements) are added</li> <li>\n<code>Object</code> - each key corresponds to a CSS class name while values are interpreted as expressions evaluating to <code>Boolean</code>. If a given expression evaluates to <code>true</code> a corresponding CSS class is added - otherwise it is removed.</li> </ul> <p>While the <code>NgClass</code> directive can interpret expressions evaluating to <code>string</code>, <code>Array</code> or <code>Object</code>, the <code>Object</code>-based version is the most often used and has an advantage of keeping all the CSS class names in a template.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-a4ydtmwywhj33uqfpppn-p-preview-\">Example (<a href=\"http://plnkr.co/edit/a4YdtmWywhJ33uqfpPPn?p=preview\">live demo</a>):</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {NgClass} from '@angular/common';\n\n@Component({\n  selector: 'toggle-button',\n  inputs: ['isDisabled'],\n  template: `\n     &lt;div class=\"button\" [ngClass]=\"{active: isOn, disabled: isDisabled}\"\n         (click)=\"toggle(!isOn)\"&gt;\n         Click me!\n     &lt;/div&gt;`,\n  styles: [`\n    .button {\n      width: 120px;\n      border: medium solid black;\n    }\n\n    .active {\n      background-color: red;\n   }\n\n    .disabled {\n      color: gray;\n      border: medium solid gray;\n    }\n  `],\n  directives: [NgClass]\n})\nclass ToggleButton {\n  isOn = false;\n  isDisabled = false;\n\n  toggle(newState) {\n    if (!this.isDisabled) {\n      this.isOn = newState;\n    }\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgClass</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_iterableDiffers: IterableDiffers, _keyValueDiffers: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initialClasses') }\" class=\"prettyprint no-bg\" id=\"initialClasses-anchor\">initialClasses</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClass') }\" class=\"prettyprint no-bg\" id=\"ngClass-anchor\">ngClass</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngDoCheck') }\" class=\"prettyprint no-bg\" id=\"ngDoCheck-anchor\">ngDoCheck() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_class.ts#L12-L189\">@angular/common/src/directives/ng_class.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgClass-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgClass-directive.html</a>\n  </p>\n</div>\n","api/common/index/controlcontainer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlContainer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlContainer {\n  name : string\n  formDirective : Form\n  path : string[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive that contains multiple <a href=\"ngcontrol-class\"><code>NgControl</code></a>s.</p> <p>Only used by the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ControlContainer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n<p>Get the form to which this container belongs.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n<p>Get the path to this container.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/control_container.ts#L10-L32\">@angular/common/src/forms-deprecated/directives/control_container.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/ControlContainer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/ControlContainer-class.html</a>\n  </p>\n</div>\n","api/common/index/ngcontrolgroup-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControlGroup</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControlGroup {\n  constructor(parent: ControlContainer, _validators: any[], _asyncValidators: any[])\n  \n  \n  ngOnInit() : void\n  ngOnDestroy() : void\n  control : ControlGroup\n  path : string[]\n  formDirective : Form\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngControlGroup]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Inputs</h2>\n<div class=\"code-margin\">\n<code>ngControlGroup</code> bound to <code>.name</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates and binds a control group to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"ngform-directive\"><code>NgForm</code></a> or <a href=\"ngformmodel-directive\"><code>NgFormModel</code></a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-7ej11ugeaggviym6t5nq-p-preview-\">Example (<a href=\"http://plnkr.co/edit/7EJ11uGeaggViYM6T5nq?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Angular Control &amp;amp; ControlGroup Example&lt;/h2&gt;\n      &lt;form #f=\"ngForm\"&gt;\n        &lt;div ngControlGroup=\"name\" #cgName=\"ngForm\"&gt;\n          &lt;h3&gt;Enter your name:&lt;/h3&gt;\n          &lt;p&gt;First: &lt;input ngControl=\"first\" required&gt;&lt;/p&gt;\n          &lt;p&gt;Middle: &lt;input ngControl=\"middle\"&gt;&lt;/p&gt;\n          &lt;p&gt;Last: &lt;input ngControl=\"last\" required&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;h3&gt;Name value:&lt;/h3&gt;\n        &lt;pre&gt;{{valueOf(cgName)}}&lt;/pre&gt;\n        &lt;p&gt;Name is {{cgName?.control?.valid ? \"valid\" : \"invalid\"}}&lt;/p&gt;\n        &lt;h3&gt;What's your favorite food?&lt;/h3&gt;\n        &lt;p&gt;&lt;input ngControl=\"food\"&gt;&lt;/p&gt;\n        &lt;h3&gt;Form value&lt;/h3&gt;\n        &lt;pre&gt;{{valueOf(f)}}&lt;/pre&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  `\n})\nexport class App {\n  valueOf(cg: NgControlGroup): string {\n    if (cg.control == null) {\n      return null;\n    }\n    return JSON.stringify(cg.control.value, null, 2);\n  }\n}\n</pre>\n<p>This example declares a control group for a user's name. The value and validation state of this group can be accessed separately from the overall form.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgControlGroup</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(parent: ControlContainer, _validators: any[], _asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnInit') }\" class=\"prettyprint no-bg\" id=\"ngOnInit-anchor\">ngOnInit() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : ControlGroup</pre>\n<p>Get the <a href=\"controlgroup-class\"><code>ControlGroup</code></a> backing this binding.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n<p>Get the path to this control group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n<p>Get the <a href=\"form-interface\"><code>Form</code></a> to which this group belongs.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_control_group.ts#L22-L111\">@angular/common/src/forms-deprecated/directives/ng_control_group.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgControlGroup-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgControlGroup-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngcontrolstatus-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControlStatus</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControlStatus {\n  constructor(cd: NgControl)\n  \n  \n  ngClassUntouched : boolean\n  ngClassTouched : boolean\n  ngClassPristine : boolean\n  ngClassDirty : boolean\n  ngClassValid : boolean\n  ngClassInvalid : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngControl]</code></p>\n<p class=\"selector\"><code>[ngModel]</code></p>\n<p class=\"selector\"><code>[ngFormControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Directive automatically applied to Angular forms that sets CSS classes based on control status (valid/invalid/dirty/etc).</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgControlStatus</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(cd: NgControl)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassUntouched') }\" class=\"prettyprint no-bg\" id=\"ngClassUntouched-anchor\">ngClassUntouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassTouched') }\" class=\"prettyprint no-bg\" id=\"ngClassTouched-anchor\">ngClassTouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassPristine') }\" class=\"prettyprint no-bg\" id=\"ngClassPristine-anchor\">ngClassPristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassDirty') }\" class=\"prettyprint no-bg\" id=\"ngClassDirty-anchor\">ngClassDirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassValid') }\" class=\"prettyprint no-bg\" id=\"ngClassValid-anchor\">ngClassValid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassInvalid') }\" class=\"prettyprint no-bg\" id=\"ngClassInvalid-anchor\">ngClassInvalid : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_control_status.ts#L13-L56\">@angular/common/src/forms-deprecated/directives/ng_control_status.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgControlStatus-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgControlStatus-directive.html</a>\n  </p>\n</div>\n","api/common/index/controlgroup-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlGroup</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlGroup {\n  constructor(controls: {[key: string]: AbstractControl}, optionals?: {[key: string]: boolean}, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)\n  \n  \n  controls : {[key: string]: AbstractControl}\n  registerControl(name: string, control: AbstractControl) : void\n  addControl(name: string, control: AbstractControl) : void\n  removeControl(name: string) : void\n  include(controlName: string) : void\n  exclude(controlName: string) : void\n  contains(controlName: string) : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form, of fixed length, that can contain other controls.</p> <p>A <code>ControlGroup</code> aggregates the values of each <a href=\"control-class\"><code>Control</code></a> in the group. The status of a <code>ControlGroup</code> depends on the status of its children. If one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control changes its value, the entire group changes as well.</p> <p><code>ControlGroup</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"control-class\"><code>Control</code></a> and <a href=\"controlarray-class\"><code>ControlArray</code></a>. <a href=\"controlarray-class\"><code>ControlArray</code></a> can also contain other controls, but is of variable length.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-23desopbnnbpbhzt1br4-p-preview-\">Example (<a href=\"http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview\">live demo</a>)</h3> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ControlGroup</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(controls: {[key: string]: AbstractControl}, optionals?: {[key: string]: boolean}, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : {[key: string]: AbstractControl}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerControl') }\" class=\"prettyprint no-bg\" id=\"registerControl-anchor\">registerControl(name: string, control: AbstractControl) : void</pre>\n<p>Register a control with the group's list of controls.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(name: string, control: AbstractControl) : void</pre>\n<p>Add a control to this group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(name: string) : void</pre>\n<p>Remove a control from this group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('include') }\" class=\"prettyprint no-bg\" id=\"include-anchor\">include(controlName: string) : void</pre>\n<p>Mark the named control as non-optional.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exclude') }\" class=\"prettyprint no-bg\" id=\"exclude-anchor\">exclude(controlName: string) : void</pre>\n<p>Mark the named control as optional.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('contains') }\" class=\"prettyprint no-bg\" id=\"contains-anchor\">contains(controlName: string) : boolean</pre>\n<p>Check whether there is a control with the given name in the group.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/model.ts#L331-L453\">@angular/common/src/forms-deprecated/model.ts (line 331)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/ControlGroup-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/ControlGroup-class.html</a>\n  </p>\n</div>\n","api/common/index/ng_async_validators-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_ASYNC_VALIDATORS: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_ASYNC_VALIDATORS</pre>\n<p>Providers for asynchronous validators to be used for <a href=\"control-class\"><code>Control</code></a>s in a form.</p> <p>Provide this using <code>multi: true</code> to add validators.</p> <p>See <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> for more details.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/validators.ts#L41-L41\">@angular/common/src/forms-deprecated/validators.ts (line 41)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NG_ASYNC_VALIDATORS-let.html</a>\n  </p>\n</div>\n","api/common/index/ng_value_accessor-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_VALUE_ACCESSOR: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_VALUE_ACCESSOR</pre>\n<p>Used to provide a <a href=\"controlvalueaccessor-interface\"><code>ControlValueAccessor</code></a> for form controls.</p> <p>See <a href=\"defaultvalueaccessor-directive\"><code>DefaultValueAccessor</code></a> for how to implement one.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/control_value_accessor.ts#L44-L44\">@angular/common/src/forms-deprecated/directives/control_value_accessor.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NG_VALUE_ACCESSOR-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NG_VALUE_ACCESSOR-let.html</a>\n  </p>\n</div>\n","api/common/index/ngfor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgFor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgFor {\n  constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef&lt;NgForRow&gt;, _iterableDiffers: IterableDiffers, _cdr: ChangeDetectorRef)\n  \n  \n  ngForOf : any\n  ngForTrackBy : TrackByFn\n  ngForTemplate \n  ngOnChanges(changes: SimpleChanges) : void\n  ngDoCheck()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngFor][ngForOf]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The <code>NgFor</code> directive instantiates a template once per item from an iterable. The context for each instantiated template inherits from the outer context with the given loop variable set to the current item from the iterable.</p> <h3 id=\"local-variables\">Local Variables</h3> <p><code>NgFor</code> provides several exported values that can be aliased to local variables:</p> <ul> <li>\n<code>index</code> will be set to the current loop iteration for each template context.</li> <li>\n<code>first</code> will be set to a boolean value indicating whether the item is the first one in the iteration.</li> <li>\n<code>last</code> will be set to a boolean value indicating whether the item is the last one in the iteration.</li> <li>\n<code>even</code> will be set to a boolean value indicating whether this item has an even index.</li> <li>\n<code>odd</code> will be set to a boolean value indicating whether this item has an odd index.</li> </ul> <h3 id=\"change-propagation\">Change Propagation</h3> <p>When the contents of the iterator changes, <code>NgFor</code> makes the corresponding changes to the DOM:</p> <ul> <li>When an item is added, a new instance of the template is added to the DOM.</li> <li>When an item is removed, its template instance is removed from the DOM.</li> <li>When items are reordered, their respective templates are reordered in the DOM.</li> <li>Otherwise, the DOM element for that item will remain the same.</li> </ul> <p>Angular uses object identity to track insertions and deletions within the iterator and reproduce those changes in the DOM. This has important implications for animations and any stateful controls (such as <code>&lt;input&gt;</code> elements which accept user input) that are present. Inserted rows can be animated in, deleted rows can be animated out, and unchanged rows retain any unsaved state such as user input.</p> <p>It is possible for the identities of elements in the iterator to change while the data does not. This can happen, for example, if the iterator produced from an RPC to the server, and that RPC is re-run. Even if the data hasn't changed, the second response will produce objects with different identities, and Angular will tear down the entire DOM and rebuild it (as if all old elements were deleted and all new elements inserted). This is an expensive operation and should be avoided if possible.</p> <h3 id=\"syntax\">Syntax</h3> <ul> <li><code>&lt;li *ngFor=\"let item of items; let i = index\"&gt;...&lt;/li&gt;</code></li> <li><code>&lt;li template=\"ngFor let item of items; let i = index\"&gt;...&lt;/li&gt;</code></li> <li><code>&lt;template ngFor let-item [ngForOf]=\"items\" let-i=\"index\"&gt;&lt;li&gt;...&lt;/li&gt;&lt;/template&gt;</code></li> </ul> <h3 id=\"example\">Example</h3> <p>See a <a href=\"http://plnkr.co/edit/KVuXxDp0qinGDyo307QW?p=preview\">live demo</a> for a more detailed example.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgFor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef&lt;NgForRow&gt;, _iterableDiffers: IterableDiffers, _cdr: ChangeDetectorRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngForOf') }\" class=\"prettyprint no-bg\" id=\"ngForOf-anchor\">ngForOf : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngForTrackBy') }\" class=\"prettyprint no-bg\" id=\"ngForTrackBy-anchor\">ngForTrackBy : TrackByFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngForTemplate') }\" class=\"prettyprint no-bg\" id=\"ngForTemplate-anchor\">ngForTemplate</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngDoCheck') }\" class=\"prettyprint no-bg\" id=\"ngDoCheck-anchor\">ngDoCheck()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_for.ts#L24-L157\">@angular/common/src/directives/ng_for.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgFor-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngform-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgForm</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgForm {\n  constructor(validators: any[], asyncValidators: any[])\n  \n  \n  form : ControlGroup\n  ngSubmit : EventEmitter\n  submitted : boolean\n  formDirective : Form\n  control : ControlGroup\n  path : string[]\n  controls : {[key: string]: AbstractControl}\n  addControl(dir: NgControl) : void\n  getControl(dir: NgControl) : Control\n  removeControl(dir: NgControl) : void\n  addControlGroup(dir: NgControlGroup) : void\n  removeControlGroup(dir: NgControlGroup) : void\n  getControlGroup(dir: NgControlGroup) : ControlGroup\n  updateModel(dir: NgControl, value: any) : void\n  onSubmit() : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>form:not([ngNoForm]):not([ngFormModel])</code></p>\n<p class=\"selector\"><code>ngForm</code></p>\n<p class=\"selector\"><code>[ngForm]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngSubmit</code> bound to <code>NgForm.ngSubmit</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>If <code>NgForm</code> is bound in a component, <code>&lt;form&gt;</code> elements in that component will be upgraded to use the Angular form system.</p> <h3 id=\"typical-use\">Typical Use</h3> <p>Include <code>FORM_DIRECTIVES</code> in the <code>directives</code> section of a <a href=\"../../core/index/component-decorator\"><code>Component</code></a> annotation to use <code>NgForm</code> and its associated controls.</p> <h3 id=\"structure\">Structure</h3> <p>An Angular form is a collection of <code>Control</code>s in some hierarchy. <code>Control</code>s can be at the top level or can be organized in <code>ControlGroup</code>s or <code>ControlArray</code>s. This hierarchy is reflected in the form's <code>value</code>, a JSON object that mirrors the form structure.</p> <h3 id=\"submission\">Submission</h3> <p>The <code>ngSubmit</code> event signals when the user triggers a form submission.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ltdgyj4p0iy64ar71epl-p-preview-\">Example (<a href=\"http://plnkr.co/edit/ltdgYj4P0iY64AR71EpL?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;p&gt;Submit the form to see the data object Angular builds&lt;/p&gt;\n      &lt;h2&gt;NgForm demo&lt;/h2&gt;\n      &lt;form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f.value)\"&gt;\n        &lt;h3&gt;Control group: credentials&lt;/h3&gt;\n        &lt;div ngControlGroup=\"credentials\"&gt;\n          &lt;p&gt;Login: &lt;input type=\"text\" ngControl=\"login\"&gt;&lt;/p&gt;\n          &lt;p&gt;Password: &lt;input type=\"password\" ngControl=\"password\"&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;h3&gt;Control group: person&lt;/h3&gt;\n        &lt;div ngControlGroup=\"person\"&gt;\n          &lt;p&gt;First name: &lt;input type=\"text\" ngControl=\"firstName\"&gt;&lt;/p&gt;\n          &lt;p&gt;Last name: &lt;input type=\"text\" ngControl=\"lastName\"&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Submit Form&lt;/button&gt;\n      &lt;p&gt;Form data submitted:&lt;/p&gt;\n      &lt;/form&gt;\n      &lt;pre&gt;{{data}}&lt;/pre&gt;\n    &lt;/div&gt;\n`,\n  directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]\n})\nexport class App {\n  constructor() {}\n\n  data: string;\n\n  onSubmit(data) {\n    this.data = JSON.stringify(data, null, 2);\n  }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgForm</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(validators: any[], asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSubmit') }\" class=\"prettyprint no-bg\" id=\"ngSubmit-anchor\">ngSubmit : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('submitted') }\" class=\"prettyprint no-bg\" id=\"submitted-anchor\">submitted : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : {[key: string]: AbstractControl}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgControl) : Control</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControlGroup') }\" class=\"prettyprint no-bg\" id=\"addControlGroup-anchor\">addControlGroup(dir: NgControlGroup) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControlGroup') }\" class=\"prettyprint no-bg\" id=\"removeControlGroup-anchor\">removeControlGroup(dir: NgControlGroup) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControlGroup') }\" class=\"prettyprint no-bg\" id=\"getControlGroup-anchor\">getControlGroup(dir: NgControlGroup) : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onSubmit') }\" class=\"prettyprint no-bg\" id=\"onSubmit-anchor\">onSubmit() : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_form.ts#L30-L202\">@angular/common/src/forms-deprecated/directives/ng_form.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgForm-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgForm-directive.html</a>\n  </p>\n</div>\n","api/common/index/form_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">FORM_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export FORM_PROVIDERS</pre>\n<p>Shorthand set of providers used for building Angular forms.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">bootstrap(MyApp, [FORM_PROVIDERS]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated.ts#L60-L60\">@angular/common/src/forms-deprecated.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/FORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/FORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/common/index/ngformcontrol-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgFormControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgFormControl {\n  constructor(_validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  form : Control\n  update : EventEmitter\n  model : any\n  viewModel : any\n  ngOnChanges(changes: SimpleChanges) : void\n  path : string[]\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  control : Control\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngFormControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngModelChange</code> bound to <code>NgFormControl.update</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Inputs</h2>\n<div class=\"code-margin\">\n<code>ngFormControl</code> bound to <code>NgFormControl.form</code>\n</div> <div class=\"code-margin\">\n<code>ngModel</code> bound to <code>NgFormControl.model</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds an existing <a href=\"control-class\"><code>Control</code></a> to a DOM element.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-jcqlz2tth22bzz2ucnat-p-preview-\">Example (<a href=\"http://plnkr.co/edit/jcQlZ2tTh22BZZ2ucNAT?p=preview\">live demo</a>)</h3> <p>In this example, we bind the control to an input element. When the value of the input element changes, the value of the control will reflect that change. Likewise, if the value of the control changes, the input element reflects that change.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;NgFormControl Example&lt;/h2&gt;\n      &lt;form&gt;\n        &lt;p&gt;Element with existing control: &lt;input type=\"text\"\n[ngFormControl]=\"loginControl\"&gt;&lt;/p&gt;\n        &lt;p&gt;Value of existing control: {{loginControl.value}}&lt;/p&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  `,\n  directives: [CORE_DIRECTIVES, FORM_DIRECTIVES]\n})\nexport class App {\n  loginControl: Control = new Control('');\n}\n </pre>\n<h3 id=\"ngmodel\">ngModel</h3> <p>We can also use <code>ngModel</code> to bind a domain model to the form.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-yhmluho7dngt8xvtjtdh-p-preview-\">Example (<a href=\"http://plnkr.co/edit/yHMLuHO7DNgT8XvtjTDH?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"login-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: \"&lt;input type='text' [ngFormControl]='loginControl' [(ngModel)]='login'&gt;\"\n     })\nclass LoginComp {\n loginControl: Control = new Control('');\n login:string;\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgFormControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : Control</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewModel') }\" class=\"prettyprint no-bg\" id=\"viewModel-anchor\">viewModel : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : Control</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_form_control.ts#L24-L127\">@angular/common/src/forms-deprecated/directives/ng_form_control.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgFormControl-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgFormControl-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngif-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgIf</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgIf {\n  constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef&lt;Object&gt;)\n  \n  \n  ngIf \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngIf]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Removes or recreates a portion of the DOM tree based on an {expression}.</p> <p>If the expression assigned to <code>ngIf</code> evaluates to a false value then the element is removed from the DOM, otherwise a clone of the element is reinserted into the DOM.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-fe0kgemfbtmqoy31b4tw-p-preview-\">Example (<a href=\"http://plnkr.co/edit/fe0kgemFBtmQOY31b4tw?p=preview\">live demo</a>):</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div *ngIf=\"errorCount &gt; 0\" class=\"error\"&gt;\n  &lt;!-- Error message displayed when the errorCount property on the current context is greater\nthan 0. --&gt;\n  {{errorCount}} errors detected\n&lt;/div&gt;\n</pre>\n<h3 id=\"syntax\">Syntax</h3> <ul> <li><code>&lt;div *ngIf=\"condition\"&gt;...&lt;/div&gt;</code></li> <li><code>&lt;div template=\"ngIf condition\"&gt;...&lt;/div&gt;</code></li> <li><code>&lt;template [ngIf]=\"condition\"&gt;&lt;div&gt;...&lt;/div&gt;&lt;/template&gt;</code></li> </ul> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgIf</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_viewContainer: ViewContainerRef, _templateRef: TemplateRef&lt;Object&gt;)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngIf') }\" class=\"prettyprint no-bg\" id=\"ngIf-anchor\">ngIf</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_if.ts#L11-L56\">@angular/common/src/directives/ng_if.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgIf-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgIf-directive.html</a>\n  </p>\n</div>\n","api/common/index/deprecatedformsmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DeprecatedFormsModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DeprecatedFormsModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The ng module for the deprecated forms API.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DeprecatedFormsModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  providers: [\n    FORM_PROVIDERS,\n  ],\n  declarations: FORM_DIRECTIVES,\n  exports: FORM_DIRECTIVES\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated.ts#L60-L75\">@angular/common/src/forms-deprecated.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/DeprecatedFormsModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/DeprecatedFormsModule-class.html</a>\n  </p>\n</div>\n","api/common/index/formbuilder-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormBuilder</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormBuilder {\n  group(controlsConfig: {[key: string]: any}, extra?: {[key: string]: any}) : ControlGroup\n  control(value: Object, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : Control\n  array(controlsConfig: any[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : ControlArray\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a form object from a user-specified configuration.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-engzo8euiecznenszcvr-p-preview-\">Example (<a href=\"http://plnkr.co/edit/ENgZo8EuIECZNensZCVr?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  viewProviders: [FORM_BINDINGS]\n  template: `\n    &lt;form [ngFormModel]=\"loginForm\"&gt;\n      &lt;p&gt;Login &lt;input ngControl=\"login\"&gt;&lt;/p&gt;\n      &lt;div ngControlGroup=\"passwordRetry\"&gt;\n        &lt;p&gt;Password &lt;input type=\"password\" ngControl=\"password\"&gt;&lt;/p&gt;\n        &lt;p&gt;Confirm password &lt;input type=\"password\" ngControl=\"passwordConfirmation\"&gt;&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;h3&gt;Form value:&lt;/h3&gt;\n    &lt;pre&gt;{{value}}&lt;/pre&gt;\n  `,\n  directives: [FORM_DIRECTIVES]\n})\nexport class App {\n  loginForm: ControlGroup;\n\n  constructor(builder: FormBuilder) {\n    this.loginForm = builder.group({\n      login: [\"\", Validators.required],\n      passwordRetry: builder.group({\n        password: [\"\", Validators.required],\n        passwordConfirmation: [\"\", Validators.required, asyncValidator]\n      })\n    });\n  }\n\n  get value(): string {\n    return JSON.stringify(this.loginForm.value, null, 2);\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormBuilder</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('group') }\" class=\"prettyprint no-bg\" id=\"group-anchor\">group(controlsConfig: {[key: string]: any}, extra?: {[key: string]: any}) : ControlGroup</pre>\n<p>Construct a new <a href=\"controlgroup-class\"><code>ControlGroup</code></a> with the given map of configuration. Valid keys for the <code>extra</code> parameter map are <code>optionals</code> and <code>validator</code>.</p> <p>See the <a href=\"controlgroup-class\"><code>ControlGroup</code></a> constructor for more details.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control(value: Object, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : Control</pre>\n<p>Construct a new <a href=\"control-class\"><code>Control</code></a> with the given <code>value</code>,<code>validator</code>, and <code>asyncValidator</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('array') }\" class=\"prettyprint no-bg\" id=\"array-anchor\">array(controlsConfig: any[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : ControlArray</pre>\n<p>Construct an array of <a href=\"control-class\"><code>Control</code></a>s from the given <code>controlsConfig</code> array of configuration, with the given optional <code>validator</code> and <code>asyncValidator</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/form_builder.ts#L15-L123\">@angular/common/src/forms-deprecated/form_builder.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/FormBuilder-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/FormBuilder-class.html</a>\n  </p>\n</div>\n","api/common/index/ngformmodel-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgFormModel</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgFormModel {\n  constructor(_validators: any[], _asyncValidators: any[])\n  \n  \n  form : ControlGroup\n  directives : NgControl[]\n  ngSubmit : EventEmitter\n  ngOnChanges(changes: SimpleChanges) : void\n  submitted : boolean\n  formDirective : Form\n  control : ControlGroup\n  path : string[]\n  addControl(dir: NgControl) : void\n  getControl(dir: NgControl) : Control\n  removeControl(dir: NgControl) : void\n  addControlGroup(dir: NgControlGroup)\n  removeControlGroup(dir: NgControlGroup)\n  getControlGroup(dir: NgControlGroup) : ControlGroup\n  updateModel(dir: NgControl, value: any) : void\n  onSubmit() : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngFormModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngSubmit</code> bound to <code>NgFormModel.ngSubmit</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Inputs</h2>\n<div class=\"code-margin\">\n<code>ngFormModel</code> bound to <code>NgFormModel.form</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds an existing control group to a DOM element.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-jqrvirudy8anjxtmujtp-p-preview-\">Example (<a href=\"http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview\">live demo</a>)</h3> <p>In this example, we bind the control group to the form element, and we bind the login and password controls to the login and password elements.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;NgFormModel Example&lt;/h2&gt;\n      &lt;form [ngFormModel]=\"loginForm\"&gt;\n        &lt;p&gt;Login: &lt;input type=\"text\" ngControl=\"login\"&gt;&lt;/p&gt;\n        &lt;p&gt;Password: &lt;input type=\"password\" ngControl=\"password\"&gt;&lt;/p&gt;\n      &lt;/form&gt;\n      &lt;p&gt;Value:&lt;/p&gt;\n      &lt;pre&gt;{{value}}&lt;/pre&gt;\n    &lt;/div&gt;\n  `,\n  directives: [FORM_DIRECTIVES]\n})\nexport class App {\n  loginForm: ControlGroup;\n\n  constructor() {\n    this.loginForm = new ControlGroup({\n      login: new Control(\"\"),\n      password: new Control(\"\")\n    });\n  }\n\n  get value(): string {\n    return JSON.stringify(this.loginForm.value, null, 2);\n  }\n}\n </pre>\n<p>We can also use ngModel to bind a domain model to the form.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"login-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: `\n       &lt;form [ngFormModel]='loginForm'&gt;\n         Login &lt;input type='text' ngControl='login' [(ngModel)]='credentials.login'&gt;\n         Password &lt;input type='password' ngControl='password'\n                         [(ngModel)]='credentials.password'&gt;\n         &lt;button (click)=\"onLogin()\"&gt;Login&lt;/button&gt;\n       &lt;/form&gt;`\n     })\nclass LoginComp {\n credentials: {login: string, password: string};\n loginForm: ControlGroup;\n\n constructor() {\n   this.loginForm = new ControlGroup({\n     login: new Control(\"\"),\n     password: new Control(\"\")\n   });\n }\n\n onLogin(): void {\n   // this.credentials.login === 'some login'\n   // this.credentials.password === 'some password'\n }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgFormModel</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_validators: any[], _asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directives') }\" class=\"prettyprint no-bg\" id=\"directives-anchor\">directives : NgControl[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSubmit') }\" class=\"prettyprint no-bg\" id=\"ngSubmit-anchor\">ngSubmit : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('submitted') }\" class=\"prettyprint no-bg\" id=\"submitted-anchor\">submitted : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgControl) : Control</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControlGroup') }\" class=\"prettyprint no-bg\" id=\"addControlGroup-anchor\">addControlGroup(dir: NgControlGroup)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControlGroup') }\" class=\"prettyprint no-bg\" id=\"removeControlGroup-anchor\">removeControlGroup(dir: NgControlGroup)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControlGroup') }\" class=\"prettyprint no-bg\" id=\"getControlGroup-anchor\">getControlGroup(dir: NgControlGroup) : ControlGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onSubmit') }\" class=\"prettyprint no-bg\" id=\"onSubmit-anchor\">onSubmit() : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_form_model.ts#L29-L212\">@angular/common/src/forms-deprecated/directives/ng_form_model.ts (line 29)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgFormModel-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgFormModel-directive.html</a>\n  </p>\n</div>\n","api/common/index/nglocalization-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgLocalization</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgLocalization {\n  getPluralCategory(value: any) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgLocalization</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getPluralCategory') }\" class=\"prettyprint no-bg\" id=\"getPluralCategory-anchor\">getPluralCategory(value: any) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/localization.ts#L1-L12\">@angular/common/src/localization.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgLocalization-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgLocalization-class.html</a>\n  </p>\n</div>\n","api/common/index/ngmodel-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModel</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModel {\n  constructor(_validators: any[], _asyncValidators: any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  update : EventEmitter\n  model : any\n  viewModel : any\n  ngOnChanges(changes: SimpleChanges)\n  control : Control\n  path : string[]\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngModel]:not([ngControl]):not([ngFormControl])</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngModelChange</code> bound to <code>NgModel.update</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Inputs</h2>\n<div class=\"code-margin\">\n<code>ngModel</code> bound to <code>NgModel.model</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds a domain model to a form control.</p> <h3 id=\"usage\">Usage</h3> <p><code>ngModel</code> binds an existing domain model to a form control. For a two-way binding, use <code>[(ngModel)]</code> to ensure the model updates in both directions.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-r3ux5qdauqfo2vyr0uzh-p-preview-\">Example (<a href=\"http://plnkr.co/edit/R3UX5qDaUqFO2VYR0UzH?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"search-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: `&lt;input type='text' [(ngModel)]=\"searchQuery\"&gt;`\n     })\nclass SearchComp {\n searchQuery: string;\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgModel</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_validators: any[], _asyncValidators: any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewModel') }\" class=\"prettyprint no-bg\" id=\"viewModel-anchor\">viewModel : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : Control</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_model.ts#L23-L99\">@angular/common/src/forms-deprecated/directives/ng_model.ts (line 23)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgModel-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgModel-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngplural-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgPlural</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgPlural {\n  constructor(_localization: NgLocalization)\n  \n  \n  ngPlural \n  addCase(value: string, switchView: SwitchView) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngPlural]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>ngPlural</code> is an i18n directive that displays DOM sub-trees that match the switch expression value, or failing that, DOM sub-trees that match the switch expression's pluralization category.</p> <p>To use this directive, you must provide an extension of <code>NgLocalization</code> that maps values to category names. You then define a container element that sets the <code>[ngPlural]</code> attribute to a switch expression.</p> <ul> <li>Inner elements defined with an <code>[ngPluralCase]</code> attribute will display based on their expression.</li> <li>If <code>[ngPluralCase]</code> is set to a value starting with <code>=</code>, it will only display if the value matches the switch expression exactly.</li> <li>Otherwise, the view will be treated as a \"category match\", and will only display if exact value matches aren't found and the value maps to its category using the <code>getPluralCategory</code> function provided.</li> </ul> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class MyLocalization extends NgLocalization {\n   getPluralCategory(value: any) {\n      if(value &lt; 5) {\n         return 'few';\n      }\n   }\n}\n\n@Component({\n   selector: 'app',\n   providers: [{provide: NgLocalization, useClass: MyLocalization}]\n})\n@View({\n  template: `\n    &lt;p&gt;Value = {{value}}&lt;/p&gt;\n    &lt;button (click)=\"inc()\"&gt;Increment&lt;/button&gt;\n\n    &lt;div [ngPlural]=\"value\"&gt;\n      &lt;template ngPluralCase=\"=0\"&gt;there is nothing&lt;/template&gt;\n      &lt;template ngPluralCase=\"=1\"&gt;there is one&lt;/template&gt;\n      &lt;template ngPluralCase=\"few\"&gt;there are a few&lt;/template&gt;\n      &lt;template ngPluralCase=\"other\"&gt;there is some number&lt;/template&gt;\n    &lt;/div&gt;\n  `,\n  directives: [NgPlural, NgPluralCase]\n})\nexport class App {\n  value = 'init';\n\n  inc() {\n    this.value = this.value === 'init' ? 0 : this.value + 1;\n  }\n}\n\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgPlural</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_localization: NgLocalization)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngPlural') }\" class=\"prettyprint no-bg\" id=\"ngPlural-anchor\">ngPlural</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addCase') }\" class=\"prettyprint no-bg\" id=\"addCase-anchor\">addCase(value: string, switchView: SwitchView) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_plural.ts#L14-L106\">@angular/common/src/directives/ng_plural.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgPlural-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgPlural-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngselectoption-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgSelectOption</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgSelectOption {\n  constructor(_element: ElementRef, _renderer: Renderer, _select: SelectControlValueAccessor)\n  \n  \n  id : string\n  ngValue \n  value \n  ngOnDestroy()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>option</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marks <code>&lt;option&gt;</code> as dynamic, so Angular can be notified when options change.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;select ngControl=\"city\"&gt;\n  &lt;option *ngFor=\"let c of cities\" [value]=\"c\"&gt;&lt;/option&gt;\n&lt;/select&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgSelectOption</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_element: ElementRef, _renderer: Renderer, _select: SelectControlValueAccessor)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngValue') }\" class=\"prettyprint no-bg\" id=\"ngValue-anchor\">ngValue</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/select_control_value_accessor.ts#L90-L140\">@angular/common/src/forms-deprecated/directives/select_control_value_accessor.ts (line 90)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgSelectOption-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgSelectOption-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngstyle-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgStyle</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgStyle {\n  constructor(_differs: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer)\n  \n  \n  ngStyle \n  ngDoCheck()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngStyle]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The <code>NgStyle</code> directive changes styles based on a result of expression evaluation.</p> <p>An expression assigned to the <code>ngStyle</code> property must evaluate to an object and the corresponding element styles are updated based on changes to this object. Style names to update are taken from the object's keys, and values - from the corresponding object's values.</p> <h3 id=\"syntax\">Syntax</h3> <ul> <li><code>&lt;div [ngStyle]=\"{'font-style': styleExp}\"&gt;&lt;/div&gt;</code></li> <li><code>&lt;div [ngStyle]=\"{'max-width.px': widthExp}\"&gt;&lt;/div&gt;</code></li> <li>\n<code>&lt;div [ngStyle]=\"styleExp\"&gt;&lt;/div&gt;</code> - here the <code>styleExp</code> must evaluate to an object</li> </ul> <h3 id=\"example-live-demo-http-plnkr-co-edit-yamgs6gkuh9gqwnqhcym-p-preview-\">Example (<a href=\"http://plnkr.co/edit/YamGS6GkUh9GqWNQhCyM?p=preview\">live demo</a>):</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {NgStyle} from '@angular/common';\n\n@Component({\n selector: 'ngStyle-example',\n template: `\n   &lt;h1 [ngStyle]=\"{'font-style': style, 'font-size': size, 'font-weight': weight}\"&gt;\n     Change style of this text!\n   &lt;/h1&gt;\n\n   &lt;hr&gt;\n\n   &lt;label&gt;Italic: &lt;input type=\"checkbox\" (change)=\"changeStyle($event)\"&gt;&lt;/label&gt;\n   &lt;label&gt;Bold: &lt;input type=\"checkbox\" (change)=\"changeWeight($event)\"&gt;&lt;/label&gt;\n   &lt;label&gt;Size: &lt;input type=\"text\" [value]=\"size\" (change)=\"size = $event.target.value\"&gt;&lt;/label&gt;\n `,\n directives: [NgStyle]\n})\nexport class NgStyleExample {\n   style = 'normal';\n   weight = 'normal';\n   size = '20px';\n\n   changeStyle($event: any) {\n     this.style = $event.target.checked ? 'italic' : 'normal';\n   }\n\n   changeWeight($event: any) {\n     this.weight = $event.target.checked ? 'bold' : 'normal';\n   }\n}\n</pre>\n<p>In this example the <code>font-style</code>, <code>font-size</code> and <code>font-weight</code> styles will be updated based on the <code>style</code> property's value changes.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgStyle</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_differs: KeyValueDiffers, _ngEl: ElementRef, _renderer: Renderer)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngStyle') }\" class=\"prettyprint no-bg\" id=\"ngStyle-anchor\">ngStyle</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngDoCheck') }\" class=\"prettyprint no-bg\" id=\"ngDoCheck-anchor\">ngDoCheck()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_style.ts#L11-L112\">@angular/common/src/directives/ng_style.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgStyle-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgStyle-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngpluralcase-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgPluralCase</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgPluralCase {\n  constructor(value: string, template: TemplateRef&lt;Object&gt;, viewContainer: ViewContainerRef, ngPlural: NgPlural)\n  \n  \n  value : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngPluralCase]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgPluralCase</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(value: string, template: TemplateRef&lt;Object&gt;, viewContainer: ViewContainerRef, ngPlural: NgPlural)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_plural.ts#L106-L118\">@angular/common/src/directives/ng_plural.ts (line 106)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgPluralCase-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgPluralCase-directive.html</a>\n  </p>\n</div>\n","api/common/index/pathlocationstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">PathLocationStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PathLocationStrategy {\n  constructor(_platformLocation: PlatformLocation, href?: string)\n  \n  \n  onPopState(fn: UrlChangeListener) : void\n  getBaseHref() : string\n  prepareExternalUrl(internal: string) : string\n  path(includeHash?: boolean) : string\n  pushState(state: any, title: string, url: string, queryParams: string)\n  replaceState(state: any, title: string, url: string, queryParams: string)\n  forward() : void\n  back() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>PathLocationStrategy</code> is a <a href=\"locationstrategy-class\"><code>LocationStrategy</code></a> used to configure the <a href=\"location-class\"><code>Location</code></a> service to represent its state in the <a href=\"https://en.wikipedia.org/wiki/Uniform_Resource_Locator#Syntax\">path</a> of the browser's URL.</p> <p><code>PathLocationStrategy</code> is the default binding for <a href=\"locationstrategy-class\"><code>LocationStrategy</code></a> provided in <a href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_PROVIDERS-let.html\"><code>ROUTER_PROVIDERS</code></a>.</p> <p>If you're using <code>PathLocationStrategy</code>, you must provide a <a href=\"app_base_href-let\"><code>APP_BASE_HREF</code></a> or add a base element to the document. This URL prefix that will be preserved when generating and recognizing URLs.</p> <p>For instance, if you provide an <code>APP_BASE_HREF</code> of <code>'/my/app'</code> and call <code>location.go('/foo')</code>, the browser's URL will become <code>example.com/my/app/foo</code>.</p> <p>Similarly, if you add <code>&lt;base href='/my/app'/&gt;</code> to the document and call <code>location.go('/foo')</code>, the browser's URL will become <code>example.com/my/app/foo</code>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class PathLocationStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_platformLocation: PlatformLocation, href?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHref') }\" class=\"prettyprint no-bg\" id=\"getBaseHref-anchor\">getBaseHref() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(internal: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path(includeHash?: boolean) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(state: any, title: string, url: string, queryParams: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(state: any, title: string, url: string, queryParams: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/path_location_strategy.ts#L16-L94\">@angular/common/src/location/path_location_strategy.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/PathLocationStrategy-class.html</a>\n  </p>\n</div>\n","api/common/index/ngswitch-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgSwitch</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgSwitch {\n  ngSwitch \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngSwitch]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Adds or removes DOM sub-trees when their match expressions match the switch expression.</p> <p>Elements within <code>NgSwitch</code> but without <code>NgSwitchCase</code> or <code>NgSwitchDefault</code> directives will be preserved at the location as specified in the template.</p> <p><code>NgSwitch</code> simply inserts nested elements based on which match expression matches the value obtained from the evaluated switch expression. In other words, you define a container element (where you place the directive with a switch expression on the <code>[ngSwitch]=\"...\"</code> attribute), define any inner elements inside of the directive and place a <code>[ngSwitchCase]</code> attribute per element.</p> <p>The <code>ngSwitchCase</code> property is used to inform <code>NgSwitch</code> which element to display when the expression is evaluated. If a matching expression is not found via a <code>ngSwitchCase</code> property then an element with the <code>ngSwitchDefault</code> attribute is displayed.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-dqmtii95cbuqwrl3lyas-p-preview-\">Example (<a href=\"http://plnkr.co/edit/DQMTII95CbuqWrl3lYAs?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'app',\n  template: `\n    &lt;p&gt;Value = {{value}}&lt;/p&gt;\n    &lt;button (click)=\"inc()\"&gt;Increment&lt;/button&gt;\n\n    &lt;div [ngSwitch]=\"value\"&gt;\n      &lt;p *ngSwitchCase=\"'init'\"&gt;increment to start&lt;/p&gt;\n      &lt;p *ngSwitchCase=\"0\"&gt;0, increment again&lt;/p&gt;\n      &lt;p *ngSwitchCase=\"1\"&gt;1, increment again&lt;/p&gt;\n      &lt;p *ngSwitchCase=\"2\"&gt;2, stop incrementing&lt;/p&gt;\n      &lt;p *ngSwitchDefault&gt;&amp;gt; 2, STOP!&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- alternate syntax --&gt;\n\n    &lt;p [ngSwitch]=\"value\"&gt;\n      &lt;template ngSwitchCase=\"init\"&gt;increment to start&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"0\"&gt;0, increment again&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"1\"&gt;1, increment again&lt;/template&gt;\n      &lt;template [ngSwitchCase]=\"2\"&gt;2, stop incrementing&lt;/template&gt;\n      &lt;template ngSwitchDefault&gt;&amp;gt; 2, STOP!&lt;/template&gt;\n    &lt;/p&gt;\n  `,\n  directives: [NgSwitch, NgSwitchCase, NgSwitchDefault]\n})\nexport class App {\n  value = 'init';\n\n  inc() {\n    this.value = this.value === 'init' ? 0 : this.value + 1;\n  }\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgSwitch</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSwitch') }\" class=\"prettyprint no-bg\" id=\"ngSwitch-anchor\">ngSwitch</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_switch.ts#L26-L175\">@angular/common/src/directives/ng_switch.ts (line 26)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgSwitch-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgSwitch-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngswitchcase-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgSwitchCase</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgSwitchCase {\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef&lt;Object&gt;, ngSwitch: NgSwitch)\n  \n  \n  ngSwitchCase \n  ngSwitchWhen \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngSwitchCase]</code></p>\n<p class=\"selector\"><code>[ngSwitchWhen]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Insert the sub-tree when the <code>ngSwitchCase</code> expression evaluates to the same value as the enclosing switch expression.</p> <p>If multiple match expression match the switch expression value, all of them are displayed.</p> <p>See <a href=\"ngswitch-directive\"><code>NgSwitch</code></a> for more details and example.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgSwitchCase</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef&lt;Object&gt;, ngSwitch: NgSwitch)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSwitchCase') }\" class=\"prettyprint no-bg\" id=\"ngSwitchCase-anchor\">ngSwitchCase</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSwitchWhen') }\" class=\"prettyprint no-bg\" id=\"ngSwitchWhen-anchor\">ngSwitchWhen</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_switch.ts#L175-L218\">@angular/common/src/directives/ng_switch.ts (line 175)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgSwitchCase-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgSwitchCase-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngswitchdefault-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgSwitchDefault</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgSwitchDefault {\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef&lt;Object&gt;, sswitch: NgSwitch)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngSwitchDefault]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Default case statements are displayed when no match expression matches the switch expression value.</p> <p>See <a href=\"ngswitch-directive\"><code>NgSwitch</code></a> for more details and example.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgSwitchDefault</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef&lt;Object&gt;, sswitch: NgSwitch)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_switch.ts#L218-L235\">@angular/common/src/directives/ng_switch.ts (line 218)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgSwitchDefault-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgSwitchDefault-directive.html</a>\n  </p>\n</div>\n","api/common/index/ngtemplateoutlet-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgTemplateOutlet</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgTemplateOutlet {\n  constructor(_viewContainerRef: ViewContainerRef)\n  \n  \n  ngOutletContext \n  ngTemplateOutlet \n  ngOnChanges()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngTemplateOutlet]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates and inserts an embedded view based on a prepared <code>TemplateRef</code>. You can attach a context object to the <code>EmbeddedViewRef</code> by setting <code>[ngOutletContext]</code>. <code>[ngOutletContext]</code> should be an object, the object's keys will be the local template variables available within the <code>TemplateRef</code>.</p> <p>Note: using the key <code>$implicit</code> in the context object will set it's value as default.</p> <h3 id=\"syntax\">Syntax</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;template [ngTemplateOutlet]=\"templateRefExpression\"\n          [ngOutletContext]=\"objectExpression\"&gt;\n&lt;/template&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgTemplateOutlet</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_viewContainerRef: ViewContainerRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOutletContext') }\" class=\"prettyprint no-bg\" id=\"ngOutletContext-anchor\">ngOutletContext</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngTemplateOutlet') }\" class=\"prettyprint no-bg\" id=\"ngTemplateOutlet-anchor\">ngTemplateOutlet</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/directives/ng_template_outlet.ts#L9-L52\">@angular/common/src/directives/ng_template_outlet.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgTemplateOutlet-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgTemplateOutlet-directive.html</a>\n  </p>\n</div>\n","api/common/index/patternvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">PatternValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PatternValidator {\n  constructor(pattern: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[pattern][ngControl]</code></p>\n<p class=\"selector\"><code>[pattern][ngFormControl]</code></p>\n<p class=\"selector\"><code>[pattern][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A Directive that adds the <code>pattern</code> validator to any controls marked with the <code>pattern</code> attribute, via the <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> binding. Uses attribute value as the regex to validate Control value against. Follows pattern attribute semantics; i.e. regex must match entire Control value.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input [ngControl]=\"fullName\" pattern=\"[a-zA-Z ]*\"&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive PatternValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(pattern: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/validators.ts#L141-L169\">@angular/common/src/forms-deprecated/directives/validators.ts (line 141)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/PatternValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/PatternValidator-directive.html</a>\n  </p>\n</div>\n","api/common/index/percentpipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">PercentPipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PercentPipe {\n  transform(value: any, digits?: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>WARNING: this pipe uses the Internationalization API. Therefore it is only reliable in Chrome and Opera browsers. For other browsers please use an polyfill, for example: [<a href=\"https://github.com/andyearnshaw/Intl.js/\">https://github.com/andyearnshaw/Intl.js/</a>].</p> <p>Formats a number as local percent.</p> <h3 id=\"usage\">Usage</h3> <pre><code>expression | percent[:digitInfo]\n</code></pre>\n<p>For more information about <code>digitInfo</code> see <a href=\"decimalpipe-class\"><code>DecimalPipe</code></a></p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'percent-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;A: {{a | percent}}&lt;/p&gt;\n    &lt;p&gt;B: {{b | percent:'4.3-5'}}&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class PercentPipeExample {\n  a: number = 0.259;\n  b: number = 1.3495;\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class PercentPipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'percent'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, digits?: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/number_pipe.ts#L96-L122\">@angular/common/src/pipes/number_pipe.ts (line 96)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/PercentPipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/PercentPipe-class.html</a>\n  </p>\n</div>\n","api/common/index/platformlocation-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">PlatformLocation</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PlatformLocation {\n  getBaseHrefFromDOM() : string\n  onPopState(fn: UrlChangeListener) : void\n  onHashChange(fn: UrlChangeListener) : void\n  pathname : string\n  search : string\n  hash : string\n  replaceState(state: any, title: string, url: string) : void\n  pushState(state: any, title: string, url: string) : void\n  forward() : void\n  back() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class PlatformLocation</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHrefFromDOM') }\" class=\"prettyprint no-bg\" id=\"getBaseHrefFromDOM-anchor\">getBaseHrefFromDOM() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onHashChange') }\" class=\"prettyprint no-bg\" id=\"onHashChange-anchor\">onHashChange(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pathname') }\" class=\"prettyprint no-bg\" id=\"pathname-anchor\">pathname : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('search') }\" class=\"prettyprint no-bg\" id=\"search-anchor\">search : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hash') }\" class=\"prettyprint no-bg\" id=\"hash-anchor\">hash : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(state: any, title: string, url: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(state: any, title: string, url: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/platform_location.ts#L1-L51\">@angular/common/src/location/platform_location.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/PlatformLocation-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/PlatformLocation-class.html</a>\n  </p>\n</div>\n","api/common/index/ng_validators-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_VALIDATORS: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_VALIDATORS</pre>\n<p>Providers for validators to be used for <a href=\"control-class\"><code>Control</code></a>s in a form.</p> <p>Provide this using <code>multi: true</code> to add validators.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">bootstrap(MyApp, [{provide: NG_VALIDATORS, useValue: myValidator, multi: true}]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/validators.ts#L29-L29\">@angular/common/src/forms-deprecated/validators.ts (line 29)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NG_VALIDATORS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NG_VALIDATORS-let.html</a>\n  </p>\n</div>\n","api/common/index/replacepipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReplacePipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>The current pipe has limited functionality. The pipe api is not meant to be able express complex yet generic value transformations. We recommend that these transformations happen in the component logic instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReplacePipe {\n  transform(value: any, pattern: string|RegExp, replacement: Function|string) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a new String with some or all of the matches of a pattern replaced by a replacement.</p> <p>The pattern to be matched is specified by the 'pattern' parameter.</p> <p>The replacement to be set is specified by the 'replacement' parameter.</p> <p>An optional 'flags' parameter can be set.</p> <h3 id=\"usage\">Usage</h3> <pre><code>expression | replace:pattern:replacement\n</code></pre>\n<p>All behavior is based on the expected behavior of the JavaScript API String.prototype.replace() function.</p> <p>Where the input expression is a [String] or [Number] (to be treated as a string), the <code>pattern</code> is a [String] or [RegExp], the 'replacement' is a [String] or [Function].</p> <p>--Note--: The 'pattern' parameter will be converted to a RegExp instance. Make sure to escape the string properly if you are matching for regular expression special characters like parenthesis, brackets etc.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ReplacePipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'replace'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, pattern: string|RegExp, replacement: Function|string) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/replace_pipe.ts#L11-L87\">@angular/common/src/pipes/replace_pipe.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/ReplacePipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/ReplacePipe-class.html</a>\n  </p>\n</div>\n","api/common/index/requiredvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RequiredValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RequiredValidator {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[required][ngControl]</code></p>\n<p class=\"selector\"><code>[required][ngFormControl]</code></p>\n<p class=\"selector\"><code>[required][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A Directive that adds the <code>required</code> validator to any controls marked with the <code>required</code> attribute, via the <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> binding.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input ngControl=\"fullName\" required&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RequiredValidator</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/validators.ts#L44-L63\">@angular/common/src/forms-deprecated/directives/validators.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/RequiredValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/RequiredValidator-directive.html</a>\n  </p>\n</div>\n","api/common/index/selectcontrolvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">SelectControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SelectControlValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  value : any\n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (value: any) =&gt; any) : void\n  registerOnTouched(fn: () =&gt; any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>select:not([multiple])[ngControl]</code></p>\n<p class=\"selector\"><code>select:not([multiple])[ngFormControl]</code></p>\n<p class=\"selector\"><code>select:not([multiple])[ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The accessor for writing a value and listening to changes on a select element.</p> <p>Note: We have to listen to the 'change' event because 'input' events aren't fired for selects in Firefox and IE: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\">https://bugzilla.mozilla.org/show_bug.cgi?id=1024350</a> <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\">https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/</a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive SelectControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (value: any) =&gt; any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/select_control_value_accessor.ts#L30-L90\">@angular/common/src/forms-deprecated/directives/select_control_value_accessor.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/SelectControlValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/SelectControlValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/common/index/slicepipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SlicePipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SlicePipe {\n  transform(value: any, start: number, end?: number) : any\n  supports(obj: any) : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a new List or String containing only a subset (slice) of the elements.</p> <p>The starting index of the subset to return is specified by the <code>start</code> parameter.</p> <p>The ending index of the subset to return is specified by the optional <code>end</code> parameter.</p> <h3 id=\"usage\">Usage</h3> <pre><code>expression | slice:start[:end]\n</code></pre>\n<p>All behavior is based on the expected behavior of the JavaScript API Array.prototype.slice() and String.prototype.slice()</p> <p>Where the input expression is a [List] or [String], and <code>start</code> is:</p> <ul> <li>\n<strong>a positive integer</strong>: return the item at <em>start</em> index and all items after in the list or string expression.</li> <li>\n<strong>a negative integer</strong>: return the item at <em>start</em> index from the end and all items after in the list or string expression.</li> <li>\n<strong><code>|start|</code> greater than the size of the expression</strong>: return an empty list or string.</li> <li>\n<strong><code>|start|</code> negative greater than the size of the expression</strong>: return entire list or string expression.</li> </ul> <p>and where <code>end</code> is:</p> <ul> <li>\n<strong>omitted</strong>: return all items until the end of the input</li> <li>\n<strong>a positive integer</strong>: return all items before <em>end</em> index of the list or string expression.</li> <li>\n<strong>a negative integer</strong>: return all items before <em>end</em> index from the end of the list or string expression.</li> </ul> <p>When operating on a [List], the returned list is always a copy even when all the elements are being returned.</p> <p>When operating on a blank value, returns it.</p> <h2 id=\"list-example\">List Example</h2> <p>This <code>ngFor</code> example:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'slice-list-example',\n  template: `&lt;div&gt;\n    &lt;li *ngFor=\"let  i of collection | slice:1:3\"&gt;{{i}}&lt;/li&gt;\n  &lt;/div&gt;`\n})\nexport class SlicePipeListExample {\n  collection: string[] = ['a', 'b', 'c', 'd'];\n}\n</pre>\n<p>produces the following:</p> <pre><code>&lt;li&gt;b&lt;/li&gt;\n&lt;li&gt;c&lt;/li&gt;\n</code></pre>\n<h2 id=\"string-examples\">String Examples</h2> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'slice-string-example',\n  template: `&lt;div&gt;\n    &lt;p&gt;{{str}}[0:4]: '{{str | slice:0:4}}' - output is expected to be 'abcd'&lt;/p&gt;\n    &lt;p&gt;{{str}}[4:0]: '{{str | slice:4:0}}' - output is expected to be ''&lt;/p&gt;\n    &lt;p&gt;{{str}}[-4]: '{{str | slice:-4}}' - output is expected to be 'ghij'&lt;/p&gt;\n    &lt;p&gt;{{str}}[-4:-2]: '{{str | slice:-4:-2}}' - output is expected to be 'gh'&lt;/p&gt;\n    &lt;p&gt;{{str}}[-100]: '{{str | slice:-100}}' - output is expected to be 'abcdefghij'&lt;/p&gt;\n    &lt;p&gt;{{str}}[100]: '{{str | slice:100}}' - output is expected to be ''&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class SlicePipeStringExample {\n  str: string = 'abcdefghij';\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SlicePipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'slice', pure: false})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, start: number, end?: number) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('supports') }\" class=\"prettyprint no-bg\" id=\"supports-anchor\">supports(obj: any) : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/slice_pipe.ts#L12-L84\">@angular/common/src/pipes/slice_pipe.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/SlicePipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/SlicePipe-class.html</a>\n  </p>\n</div>\n","api/common/index/uppercasepipe-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UpperCasePipe</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UpperCasePipe {\n  transform(value: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implements uppercase transforms to text.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({\n  selector: 'lowerupper-example',\n  template: `&lt;div&gt;\n    &lt;label&gt;Name: &lt;/label&gt;&lt;input #name (keyup)=\"change(name.value)\" type=\"text\"&gt;\n    &lt;p&gt;In lowercase: &lt;pre&gt;'{{value | lowercase}}'&lt;/pre&gt;&lt;/p&gt;\n    &lt;p&gt;In uppercase: &lt;pre&gt;'{{value | uppercase}}'&lt;/pre&gt;&lt;/p&gt;\n  &lt;/div&gt;`\n})\nexport class LowerUpperPipeExample {\n  value: string;\n  change(value: string) { this.value = value; }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UpperCasePipe</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Pipe({name: 'uppercase'})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/pipes/uppercase_pipe.ts#L11-L31\">@angular/common/src/pipes/uppercase_pipe.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/UpperCasePipe-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/UpperCasePipe-class.html</a>\n  </p>\n</div>\n","api/common/index/urlchangeevent-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">UrlChangeEvent</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UrlChangeEvent {\n  type : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A serializable version of the event from onPopState or onHashChange</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface UrlChangeEvent</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('type') }\" class=\"prettyprint no-bg\" id=\"type-anchor\">type : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/platform_location.ts#L51-L58\">@angular/common/src/location/platform_location.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/UrlChangeEvent-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/UrlChangeEvent-interface.html</a>\n  </p>\n</div>\n","api/common/index/validator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Validator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Validator {\n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface that can be implemented by classes that can act as validators.</p> <h2 id=\"usage\">Usage</h2> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: '[custom-validator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n})\nclass CustomValidatorDirective implements Validator {\n  validate(c: Control): {[key: string]: any} {\n    return {\"custom\": true};\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Validator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/validators.ts#L13-L36\">@angular/common/src/forms-deprecated/directives/validators.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/Validator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/Validator-interface.html</a>\n  </p>\n</div>\n","api/common/index/validators-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Validators</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Validators {\n  required(control: AbstractControl) : {[key: string]: boolean}\n  minLength(minLength: number) : ValidatorFn\n  maxLength(maxLength: number) : ValidatorFn\n  pattern(pattern: string) : ValidatorFn\n  nullValidator(c: AbstractControl) : {[key: string]: boolean}\n  compose(validators: ValidatorFn[]) : ValidatorFn\n  composeAsync(validators: AsyncValidatorFn[]) : AsyncValidatorFn\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Provides a set of validators used by form controls.</p> <p>A validator is a function that processes a <a href=\"control-class\"><code>Control</code></a> or collection of controls and returns a map of errors. A null map means that validation has passed.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var loginControl = new Control(\"\", Validators.required)\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Validators</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('required') }\" class=\"prettyprint no-bg\" id=\"required-anchor\">required(control: AbstractControl) : {[key: string]: boolean}</pre>\n<p>Validator that requires controls to have a non-empty value.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('minLength') }\" class=\"prettyprint no-bg\" id=\"minLength-anchor\">minLength(minLength: number) : ValidatorFn</pre>\n<p>Validator that requires controls to have a value of a minimum length.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('maxLength') }\" class=\"prettyprint no-bg\" id=\"maxLength-anchor\">maxLength(maxLength: number) : ValidatorFn</pre>\n<p>Validator that requires controls to have a value of a maximum length.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pattern') }\" class=\"prettyprint no-bg\" id=\"pattern-anchor\">pattern(pattern: string) : ValidatorFn</pre>\n<p>Validator that requires a control to match a regex to its value.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nullValidator') }\" class=\"prettyprint no-bg\" id=\"nullValidator-anchor\">nullValidator(c: AbstractControl) : {[key: string]: boolean}</pre>\n<p>No-op validator.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compose') }\" class=\"prettyprint no-bg\" id=\"compose-anchor\">compose(validators: ValidatorFn[]) : ValidatorFn</pre>\n<p>Compose multiple validators into a single function that returns the union of the individual error maps.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('composeAsync') }\" class=\"prettyprint no-bg\" id=\"composeAsync-anchor\">composeAsync(validators: AsyncValidatorFn[]) : AsyncValidatorFn</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/validators.ts#L41-L135\">@angular/common/src/forms-deprecated/validators.ts (line 41)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/Validators-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/Validators-class.html</a>\n  </p>\n</div>\n","api/common/index/ngcontrol-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControl {\n  name : string\n  valueAccessor : ControlValueAccessor\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A base class that all control directive extend. It binds a <a href=\"control-class\"><code>Control</code></a> object to a DOM element.</p> <p>Used internally by Angular forms.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valueAccessor') }\" class=\"prettyprint no-bg\" id=\"valueAccessor-anchor\">valueAccessor : ControlValueAccessor</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_control.ts#L13-L32\">@angular/common/src/forms-deprecated/directives/ng_control.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgControl-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgControl-class.html</a>\n  </p>\n</div>\n","api/common/index/radiobuttonstate-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RadioButtonState</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RadioButtonState {\n  constructor(checked: boolean, value: string)\n  \n  \n  checked : boolean\n  value : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The value provided by the forms API for radio buttons.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RadioButtonState</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(checked: boolean, value: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('checked') }\" class=\"prettyprint no-bg\" id=\"checked-anchor\">checked : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/radio_control_value_accessor.ts#L57-L66\">@angular/common/src/forms-deprecated/directives/radio_control_value_accessor.ts (line 57)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/RadioButtonState-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/RadioButtonState-class.html</a>\n  </p>\n</div>\n","api/common/testing/spylocation-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SpyLocation</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SpyLocation {\n  urlChanges : string[]\n  setInitialPath(url: string)\n  setBaseHref(url: string)\n  path() : string\n  isCurrentPathEqualTo(path: string, query?: string) : boolean\n  simulateUrlPop(pathname: string)\n  simulateHashChange(pathname: string)\n  prepareExternalUrl(url: string) : string\n  go(path: string, query?: string)\n  replaceState(path: string, query?: string)\n  forward()\n  back()\n  subscribe(onNext: (value: any) =&gt; void, onThrow?: (error: any) =&gt; void, onReturn?: () =&gt; void) : Object\n  normalize(url: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A spy for <a href=\"../index/location-class\"><code>Location</code></a> that allows tests to fire simulated location events.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SpyLocation</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlChanges') }\" class=\"prettyprint no-bg\" id=\"urlChanges-anchor\">urlChanges : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setInitialPath') }\" class=\"prettyprint no-bg\" id=\"setInitialPath-anchor\">setInitialPath(url: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setBaseHref') }\" class=\"prettyprint no-bg\" id=\"setBaseHref-anchor\">setBaseHref(url: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isCurrentPathEqualTo') }\" class=\"prettyprint no-bg\" id=\"isCurrentPathEqualTo-anchor\">isCurrentPathEqualTo(path: string, query?: string) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('simulateUrlPop') }\" class=\"prettyprint no-bg\" id=\"simulateUrlPop-anchor\">simulateUrlPop(pathname: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('simulateHashChange') }\" class=\"prettyprint no-bg\" id=\"simulateHashChange-anchor\">simulateHashChange(pathname: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(url: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('go') }\" class=\"prettyprint no-bg\" id=\"go-anchor\">go(path: string, query?: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(path: string, query?: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('subscribe') }\" class=\"prettyprint no-bg\" id=\"subscribe-anchor\">subscribe(onNext: (value: any) =&gt; void, onThrow?: (error: any) =&gt; void, onReturn?: () =&gt; void) : Object</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('normalize') }\" class=\"prettyprint no-bg\" id=\"normalize-anchor\">normalize(url: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/common/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/testing/location_mock.ts#L12-L118\">@angular/common/testing/location_mock.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/testing/SpyLocation-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/testing/SpyLocation-class.html</a>\n  </p>\n</div>\n","api/core/index/analyze_for_entry_components-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">ANALYZE_FOR_ENTRY_COMPONENTS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ANALYZE_FOR_ENTRY_COMPONENTS</pre>\n<p>This token can be used to create a virtual provider that will populate the <code>entryComponents</code> fields of components and ng modules based on its <code>useValue</code>. All components that are referenced in the <code>useValue</code> value (either directly or in a nested array or map) will be added to the <code>entryComponents</code> property.</p> <h3 id=\"example\">Example</h3> <p>The following example shows how the router can populate the <code>entryComponents</code> field of an NgModule based on the router configuration which refers to components.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// helper function inside the router\nfunction provideRoutes(routes) {\n  return [\n    {provide: ROUTES, useValue: routes},\n    {provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: routes, multi: true}\n  ];\n}\n\n// user code\nlet routes = [\n  {path: '/root', component: RootComp},\n  {path: /teams', component: TeamsComp}\n];\n\n@NgModule({\n  providers: [provideRoutes(routes)]\n})\nclass ModuleWithRoutes {}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L48-L48\">@angular/core/src/metadata/di.ts (line 48)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ANALYZE_FOR_ENTRY_COMPONENTS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ANALYZE_FOR_ENTRY_COMPONENTS-let.html</a>\n  </p>\n</div>\n","api/core/index/application_common_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">APPLICATION_COMMON_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Include <code>ApplicationModule</code> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export APPLICATION_COMMON_PROVIDERS</pre>\n<p>A default set of providers which should be included in any Angular application, regardless of the platform it runs onto.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_module.ts#L36-L36\">@angular/core/src/application_module.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/APPLICATION_COMMON_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/core/index/app_bootstrap_listener-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">APP_BOOTSTRAP_LISTENER</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export APP_BOOTSTRAP_LISTENER</pre>\n<p>All callbacks provided via this token will be called for every component that is bootstrapped. Signature of the callback:</p> <p><code>(componentRef: ComponentRef) =&gt; void</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_tokens.ts#L58-L58\">@angular/core/src/application_tokens.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/APP_BOOTSTRAP_LISTENER-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/APP_BOOTSTRAP_LISTENER-let.html</a>\n  </p>\n</div>\n","api/core/index/app_id-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">APP_ID</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export APP_ID</pre>\n<p>A DI Token representing a unique string id assigned to the application by Angular and used primarily for prefixing application attributes and CSS styles when <a href=\"viewencapsulation-enum#Emulated\"><code>ViewEncapsulation</code></a> is being used.</p> <p>If you need to avoid randomly generated value to be used as an application id, you can provide a custom value via a DI provider  configuring the root <a href=\"injector-class\"><code>Injector</code></a> using this token.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_tokens.ts#L24-L24\">@angular/core/src/application_tokens.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/APP_ID-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/APP_ID-let.html</a>\n  </p>\n</div>\n","api/common/testing/mocklocationstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">MockLocationStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MockLocationStrategy {\n  constructor()\n  \n  \n  internalBaseHref : string\n  internalPath : string\n  internalTitle : string\n  urlChanges : string[]\n  simulatePopState(url: string) : void\n  path(includeHash?: boolean) : string\n  prepareExternalUrl(internal: string) : string\n  pushState(ctx: any, title: string, path: string, query: string) : void\n  replaceState(ctx: any, title: string, path: string, query: string) : void\n  onPopState(fn: (value: any) =&gt; void) : void\n  getBaseHref() : string\n  back() : void\n  forward() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A mock implementation of <a href=\"../index/locationstrategy-class\"><code>LocationStrategy</code></a> that allows tests to fire simulated location events.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class MockLocationStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('internalBaseHref') }\" class=\"prettyprint no-bg\" id=\"internalBaseHref-anchor\">internalBaseHref : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('internalPath') }\" class=\"prettyprint no-bg\" id=\"internalPath-anchor\">internalPath : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('internalTitle') }\" class=\"prettyprint no-bg\" id=\"internalTitle-anchor\">internalTitle : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlChanges') }\" class=\"prettyprint no-bg\" id=\"urlChanges-anchor\">urlChanges : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('simulatePopState') }\" class=\"prettyprint no-bg\" id=\"simulatePopState-anchor\">simulatePopState(url: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path(includeHash?: boolean) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('prepareExternalUrl') }\" class=\"prettyprint no-bg\" id=\"prepareExternalUrl-anchor\">prepareExternalUrl(internal: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(ctx: any, title: string, path: string, query: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(ctx: any, title: string, path: string, query: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: (value: any) =&gt; void) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHref') }\" class=\"prettyprint no-bg\" id=\"getBaseHref-anchor\">getBaseHref() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/common/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/testing/mock_location_strategy.ts#L12-L79\">@angular/common/testing/mock_location_strategy.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/testing/MockLocationStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/testing/MockLocationStrategy-class.html</a>\n  </p>\n</div>\n","api/core/index/auto_style-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">AUTO_STYLE</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export AUTO_STYLE</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L15-L15\">@angular/core/src/animation/metadata.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AUTO_STYLE-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AUTO_STYLE-let.html</a>\n  </p>\n</div>\n","api/core/index/abstractprovidererror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractProviderError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractProviderError {\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey, constructResolvingMessage: Function)\n  \n  \n  addKey(injector: ReflectiveInjector, key: ReflectiveKey) : void\n  context \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Base class for all errors arising from misconfigured providers.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractProviderError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(injector: ReflectiveInjector, key: ReflectiveKey, constructResolvingMessage: Function)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addKey') }\" class=\"prettyprint no-bg\" id=\"addKey-anchor\">addKey(injector: ReflectiveInjector, key: ReflectiveKey) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('context') }\" class=\"prettyprint no-bg\" id=\"context-anchor\">context</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L37-L73\">@angular/core/src/di/reflective_exceptions.ts (line 37)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AbstractProviderError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AbstractProviderError-class.html</a>\n  </p>\n</div>\n","api/core/index/aftercontentchecked-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AfterContentChecked</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AfterContentChecked {\n  ngAfterContentChecked() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to get notified after every check of your directive's content.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-tgdrytnekqnecipkd7nu-p-preview-\">Example (<a href=\"http://plnkr.co/edit/tGdrytNEKQnecIPkD7NU?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({selector: 'child-cmp', template: `{{where}} child`})\nclass ChildComponent {\n  @Input() where: string;\n}\n\n@Component({selector: 'parent-cmp', template: `&lt;ng-content&gt;&lt;/ng-content&gt;`})\nclass ParentComponent implements AfterContentChecked {\n  @ContentChild(ChildComponent) contentChild: ChildComponent;\n\n  constructor() {\n    // contentChild is not initialized yet\n    console.log(this.getMessage(this.contentChild));\n  }\n\n  ngAfterContentChecked() {\n    // contentChild is updated after the content has been checked\n    console.log('AfterContentChecked: ' + this.getMessage(this.contentChild));\n  }\n\n  private getMessage(cmp: ChildComponent): string {\n    return cmp ? cmp.where + ' child' : 'no child';\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;parent-cmp&gt;\n      &lt;button (click)=\"hasContent = !hasContent\"&gt;Toggle content child&lt;/button&gt;\n      &lt;child-cmp *ngIf=\"hasContent\" where=\"content\"&gt;&lt;/child-cmp&gt;\n    &lt;/parent-cmp&gt;`,\n  directives: [NgIf, ParentComponent, ChildComponent]\n})\nexport class App {\n  hasContent = true;\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AfterContentChecked</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngAfterContentChecked') }\" class=\"prettyprint no-bg\" id=\"ngAfterContentChecked-anchor\">ngAfterContentChecked() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L348-L397\">@angular/core/src/metadata/lifecycle_hooks.ts (line 348)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AfterContentChecked-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AfterContentChecked-class.html</a>\n  </p>\n</div>\n","api/core/index/afterviewchecked-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AfterViewChecked</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AfterViewChecked {\n  ngAfterViewChecked() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to get notified after every check of your component's view.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-0qdghcpqkc25cxhtnzku-p-preview-\">Example (<a href=\"http://plnkr.co/edit/0qDGHcPQkc25CXhTNzKU?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({selector: 'child-cmp', template: `{{where}} child`})\nclass ChildComponent {\n  @Input() where: string;\n}\n\n@Component({\n  selector: 'parent-cmp',\n  template: `\n    &lt;button (click)=\"showView = !showView\"&gt;Toggle view child&lt;/button&gt;\n    &lt;child-cmp *ngIf=\"showView\" where=\"view\"&gt;&lt;/child-cmp&gt;`,\n  directives: [NgIf, ChildComponent]\n})\nclass ParentComponent implements AfterViewChecked {\n  @ViewChild(ChildComponent) viewChild: ChildComponent;\n  showView = true;\n\n  constructor() {\n    // viewChild is not initialized yet\n    console.log(this.getMessage(this.viewChild));\n  }\n\n  ngAfterViewChecked() {\n    // viewChild is updated after the view has been checked\n    console.log('AfterViewChecked: ' + this.getMessage(this.viewChild));\n  }\n\n  private getMessage(cmp: ChildComponent): string {\n    return cmp ? cmp.where + ' child' : 'no child';\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;parent-cmp&gt;&lt;/parent-cmp&gt;`,\n  directives: [ParentComponent]\n})\nexport class App {\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AfterViewChecked</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngAfterViewChecked') }\" class=\"prettyprint no-bg\" id=\"ngAfterViewChecked-anchor\">ngAfterViewChecked() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L445-L496\">@angular/core/src/metadata/lifecycle_hooks.ts (line 445)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AfterViewChecked-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AfterViewChecked-class.html</a>\n  </p>\n</div>\n","api/core/index/afterviewinit-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AfterViewInit</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AfterViewInit {\n  ngAfterViewInit() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to get notified when your component's view has been fully initialized.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-lhtkvmem0fkjgyp4ci1w-p-preview-\">Example (<a href=\"http://plnkr.co/edit/LhTKVMEM0fkJgyp4CI1W?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({selector: 'child-cmp', template: `{{where}} child`})\nclass ChildComponent {\n  @Input() where: string;\n}\n\n@Component({\n  selector: 'parent-cmp',\n  template: `&lt;child-cmp where=\"view\"&gt;&lt;/child-cmp&gt;`,\n  directives: [ChildComponent]\n})\nclass ParentComponent implements AfterViewInit {\n  @ViewChild(ChildComponent) viewChild: ChildComponent;\n\n  constructor() {\n    // viewChild is not initialized yet\n    console.log(this.getMessage(this.viewChild));\n  }\n\n  ngAfterViewInit() {\n    // viewChild is updated after the view has been initialized\n    console.log('ngAfterViewInit: ' + this.getMessage(this.viewChild));\n  }\n\n  private getMessage(cmp: ChildComponent): string {\n    return cmp ? cmp.where + ' child' : 'no child';\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;parent-cmp&gt;&lt;/parent-cmp&gt;`,\n  directives: [ParentComponent]\n})\nexport class App {\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AfterViewInit</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngAfterViewInit') }\" class=\"prettyprint no-bg\" id=\"ngAfterViewInit-anchor\">ngAfterViewInit() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L397-L445\">@angular/core/src/metadata/lifecycle_hooks.ts (line 397)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AfterViewInit-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AfterViewInit-class.html</a>\n  </p>\n</div>\n","api/core/index/animationanimatemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationAnimateMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationAnimateMetadata {\n  constructor(timings: string|number, styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata)\n  \n  \n  timings : string|number\n  styles : AnimationStyleMetadata|AnimationKeyframesSequenceMetadata\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"animate-function\">animate animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationAnimateMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(timings: string|number, styles: AnimationStyleMetadata|AnimationKeyframesSequenceMetadata)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('timings') }\" class=\"prettyprint no-bg\" id=\"timings-anchor\">timings : string|number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : AnimationStyleMetadata|AnimationKeyframesSequenceMetadata</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L83-L98\">@angular/core/src/animation/metadata.ts (line 83)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationAnimateMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationAnimateMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationgroupmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationGroupMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationGroupMetadata {\n  constructor(_steps: AnimationMetadata[])\n  \n  \n  steps : AnimationMetadata[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"group-function\">group animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationGroupMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_steps: AnimationMetadata[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('steps') }\" class=\"prettyprint no-bg\" id=\"steps-anchor\">steps : AnimationMetadata[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L118-L130\">@angular/core/src/animation/metadata.ts (line 118)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationGroupMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationGroupMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/aftercontentinit-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AfterContentInit</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AfterContentInit {\n  ngAfterContentInit() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to get notified when your directive's content has been fully initialized.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-plamxupslqbixpvizhuo-p-preview-\">Example (<a href=\"http://plnkr.co/edit/plamXUpsLQbIXpViZhUO?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'child-cmp',\n  template: `{{where}} child`\n})\nclass ChildComponent {\n  @Input() where: string;\n}\n\n@Component({\n  selector: 'parent-cmp',\n  template: `&lt;ng-content&gt;&lt;/ng-content&gt;`\n})\nclass ParentComponent implements AfterContentInit {\n  @ContentChild(ChildComponent) contentChild: ChildComponent;\n\n  constructor() {\n    // contentChild is not initialized yet\n    console.log(this.getMessage(this.contentChild));\n  }\n\n  ngAfterContentInit() {\n    // contentChild is updated after the content has been checked\n    console.log('AfterContentInit: ' + this.getMessage(this.contentChild));\n  }\n\n  private getMessage(cmp: ChildComponent): string {\n    return cmp ? cmp.where + ' child' : 'no child';\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;parent-cmp&gt;\n      &lt;child-cmp where=\"content\"&gt;&lt;/child-cmp&gt;\n    &lt;/parent-cmp&gt;`,\n  directives: [ParentComponent, ChildComponent]\n})\nexport class App {\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AfterContentInit</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngAfterContentInit') }\" class=\"prettyprint no-bg\" id=\"ngAfterContentInit-anchor\">ngAfterContentInit() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L294-L348\">@angular/core/src/metadata/lifecycle_hooks.ts (line 294)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AfterContentInit-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AfterContentInit-class.html</a>\n  </p>\n</div>\n","api/core/index/animationstylemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationStyleMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationStyleMetadata {\n  constructor(styles: Array&lt;string|{[key: string]: string | number}&gt;, offset?: number)\n  \n  \n  styles : Array&lt;string|{[key: string]: string | number}&gt;\n  offset : number\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"style-function\">style animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationStyleMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(styles: Array&lt;string|{[key: string]: string | number}&gt;, offset?: number)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : Array&lt;string|{[key: string]: string | number}&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('offset') }\" class=\"prettyprint no-bg\" id=\"offset-anchor\">offset : number</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L69-L83\">@angular/core/src/animation/metadata.ts (line 69)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationStyleMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationStyleMetadata-class.html</a>\n  </p>\n</div>\n","api/common/index/ngcontrolname-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControlName</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControlName {\n  constructor(_parent: ControlContainer, _validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  model : any\n  viewModel : any\n  ngOnChanges(changes: SimpleChanges)\n  ngOnDestroy() : void\n  viewToModelUpdate(newValue: any) : void\n  path : string[]\n  formDirective : any\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  control : Control\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngModelChange</code> bound to <code>NgControlName.update</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Inputs</h2>\n<div class=\"code-margin\">\n<code>ngControl</code> bound to <code>.name</code>\n</div> <div class=\"code-margin\">\n<code>ngModel</code> bound to <code>NgControlName.model</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates and binds a control with a specified name to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"ngform-directive\"><code>NgForm</code></a> or <a href=\"ngformmodel-directive\"><code>NgFormModel</code></a>.</p> <h3 id=\"example\">Example</h3> <p>In this example, we create the login and password controls. We can work with each control separately: check its validity, get its value, listen to its changes.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n     selector: \"login-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: `\n       &lt;form #f=\"ngForm\" (submit)='onLogIn(f.value)'&gt;\n         Login &lt;input type='text' ngControl='login' #l=\"ngForm\"&gt;\n         &lt;div *ngIf=\"!l.valid\"&gt;Login is invalid&lt;/div&gt;\n\n         Password &lt;input type='password' ngControl='password'&gt;\n         &lt;button type='submit'&gt;Log in!&lt;/button&gt;\n       &lt;/form&gt;\n     `})\nclass LoginComp {\n onLogIn(value): void {\n   // value === {login: 'some login', password: 'some password'}\n }\n}\n </pre>\n<p>We can also use ngModel to bind a domain model to the form.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n     selector: \"login-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: `\n       &lt;form (submit)='onLogIn()'&gt;\n         Login &lt;input type='text' ngControl='login' [(ngModel)]=\"credentials.login\"&gt;\n         Password &lt;input type='password' ngControl='password'\n                         [(ngModel)]=\"credentials.password\"&gt;\n         &lt;button type='submit'&gt;Log in!&lt;/button&gt;\n       &lt;/form&gt;\n     `})\nclass LoginComp {\n credentials: {login:string, password:string};\n\n onLogIn(): void {\n   // this.credentials.login === \"some login\"\n   // this.credentials.password === \"some password\"\n }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgControlName</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_parent: ControlContainer, _validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewModel') }\" class=\"prettyprint no-bg\" id=\"viewModel-anchor\">viewModel : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : Control</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/forms-deprecated/directives/ng_control_name.ts#L25-L139\">@angular/common/src/forms-deprecated/directives/ng_control_name.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/NgControlName-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/NgControlName-directive.html</a>\n  </p>\n</div>\n","api/common/index/urlchangelistener-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">UrlChangeListener</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UrlChangeListener {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface UrlChangeListener</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/common/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/src/location/platform_location.ts#L58-L63\">@angular/common/src/location/platform_location.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index/UrlChangeListener-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index/UrlChangeListener-interface.html</a>\n  </p>\n</div>\n","api/core/index/animationstatetransitionmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationStateTransitionMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationStateTransitionMetadata {\n  constructor(stateChangeExpr: string, steps: AnimationMetadata)\n  \n  \n  stateChangeExpr : string\n  steps : AnimationMetadata\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"transition-function\">transition animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationStateTransitionMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(stateChangeExpr: string, steps: AnimationMetadata)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('stateChangeExpr') }\" class=\"prettyprint no-bg\" id=\"stateChangeExpr-anchor\">stateChangeExpr : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('steps') }\" class=\"prettyprint no-bg\" id=\"steps-anchor\">steps : AnimationMetadata</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L42-L53\">@angular/core/src/animation/metadata.ts (line 42)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationStateTransitionMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationStateTransitionMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/app_initializer-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">APP_INITIALIZER</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export APP_INITIALIZER</pre>\n<p>A function that will be executed when an application is initialized.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_init.ts#L18-L18\">@angular/core/src/application_init.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/APP_INITIALIZER-let.html</a>\n  </p>\n</div>\n","api/core/index/animationentrymetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationEntryMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationEntryMetadata {\n  constructor(name: string, definitions: AnimationStateMetadata[])\n  \n  \n  name : string\n  definitions : AnimationStateMetadata[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"trigger-function\">trigger animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationEntryMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(name: string, definitions: AnimationStateMetadata[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('definitions') }\" class=\"prettyprint no-bg\" id=\"definitions-anchor\">definitions : AnimationStateMetadata[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L15-L26\">@angular/core/src/animation/metadata.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationEntryMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationEntryMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationkeyframessequencemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationKeyframesSequenceMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationKeyframesSequenceMetadata {\n  constructor(steps: AnimationStyleMetadata[])\n  \n  \n  steps : AnimationStyleMetadata[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"keyframes-function\">keyframes animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationKeyframesSequenceMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(steps: AnimationStyleMetadata[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('steps') }\" class=\"prettyprint no-bg\" id=\"steps-anchor\">steps : AnimationStyleMetadata[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L58-L69\">@angular/core/src/animation/metadata.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationKeyframesSequenceMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationKeyframesSequenceMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationstatedeclarationmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationStateDeclarationMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationStateDeclarationMetadata {\n  constructor(stateNameExpr: string, styles: AnimationStyleMetadata)\n  \n  \n  stateNameExpr : string\n  styles : AnimationStyleMetadata\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"state-function\">state animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationStateDeclarationMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(stateNameExpr: string, styles: AnimationStyleMetadata)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('stateNameExpr') }\" class=\"prettyprint no-bg\" id=\"stateNameExpr-anchor\">stateNameExpr : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : AnimationStyleMetadata</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L31-L42\">@angular/core/src/animation/metadata.ts (line 31)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationStateDeclarationMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationStateDeclarationMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationMetadata {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationMetadata</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L53-L58\">@angular/core/src/animation/metadata.ts (line 53)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationsequencemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationSequenceMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationSequenceMetadata {\n  constructor(_steps: AnimationMetadata[])\n  \n  \n  steps : AnimationMetadata[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata representing the entry of animations. Instances of this class are provided via the animation DSL when the <a href=\"sequence-function\">sequence animation function</a> is called.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationSequenceMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_steps: AnimationMetadata[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('steps') }\" class=\"prettyprint no-bg\" id=\"steps-anchor\">steps : AnimationMetadata[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L106-L118\">@angular/core/src/animation/metadata.ts (line 106)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationSequenceMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationSequenceMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationplayer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationPlayer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationPlayer {\n  onDone(fn: Function) : void\n  init() : void\n  hasStarted() : boolean\n  play() : void\n  pause() : void\n  restart() : void\n  finish() : void\n  destroy() : void\n  reset() : void\n  setPosition(p: any) : void\n  getPosition() : number\n  parentPlayer : AnimationPlayer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationPlayer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDone') }\" class=\"prettyprint no-bg\" id=\"onDone-anchor\">onDone(fn: Function) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('init') }\" class=\"prettyprint no-bg\" id=\"init-anchor\">init() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hasStarted') }\" class=\"prettyprint no-bg\" id=\"hasStarted-anchor\">hasStarted() : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('play') }\" class=\"prettyprint no-bg\" id=\"play-anchor\">play() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pause') }\" class=\"prettyprint no-bg\" id=\"pause-anchor\">pause() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('restart') }\" class=\"prettyprint no-bg\" id=\"restart-anchor\">restart() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('finish') }\" class=\"prettyprint no-bg\" id=\"finish-anchor\">finish() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setPosition') }\" class=\"prettyprint no-bg\" id=\"setPosition-anchor\">setPosition(p: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getPosition') }\" class=\"prettyprint no-bg\" id=\"getPosition-anchor\">getPosition() : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parentPlayer') }\" class=\"prettyprint no-bg\" id=\"parentPlayer-anchor\">parentPlayer : AnimationPlayer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/animation_player.ts#L10-L32\">@angular/core/src/animation/animation_player.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationPlayer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationPlayer-class.html</a>\n  </p>\n</div>\n","api/core/index/attribute-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Attribute: AttributeMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Attribute</pre>\n<p>Specifies that a constant attribute value should be injected.</p> <p>The directive can inject constant string literals of host element attributes.</p> <h3 id=\"example\">Example</h3> <p>Suppose we have an <code>&lt;input&gt;</code> element and want to know its <code>type</code>.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;input type=\"text\"&gt;\n</pre>\n<p>A decorator can inject string literal <code>text</code> like so:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Directive({selector: 'input'})\nclass InputAttrDirective {\n  constructor(@Attribute('type') type: string) {\n    // type would be 'text' in this example\n  }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L763-L763\">@angular/core/src/metadata.ts (line 763)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Attribute-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Attribute-var.html</a>\n  </p>\n</div>\n","api/core/index/animationstatemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationStateMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationStateMetadata {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationStateMetadata</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L26-L31\">@angular/core/src/animation/metadata.ts (line 26)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationStateMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationStateMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/animationwithstepsmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationWithStepsMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationWithStepsMetadata {\n  constructor()\n  \n  \n  steps : AnimationMetadata[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationWithStepsMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('steps') }\" class=\"prettyprint no-bg\" id=\"steps-anchor\">steps : AnimationMetadata[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L98-L106\">@angular/core/src/animation/metadata.ts (line 98)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AnimationWithStepsMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AnimationWithStepsMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/applicationinitstatus-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ApplicationInitStatus</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ApplicationInitStatus {\n  constructor(appInits: (() =&gt; any)[])\n  \n  \n  done : boolean\n  donePromise : Promise&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A class that reflects the state of running <a href=\"app_initializer-let\"><code>APP_INITIALIZER</code></a>s.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ApplicationInitStatus</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(appInits: (() =&gt; any)[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('done') }\" class=\"prettyprint no-bg\" id=\"done-anchor\">done : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('donePromise') }\" class=\"prettyprint no-bg\" id=\"donePromise-anchor\">donePromise : Promise&lt;any&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_init.ts#L18-L49\">@angular/core/src/application_init.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ApplicationInitStatus-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ApplicationInitStatus-class.html</a>\n  </p>\n</div>\n","api/core/index/baseexception-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BaseException</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BaseException {\n  constructor(message?: string)\n  \n  \n  stack : any\n  message : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BaseException</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(message?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('stack') }\" class=\"prettyprint no-bg\" id=\"stack-anchor\">stack : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('message') }\" class=\"prettyprint no-bg\" id=\"message-anchor\">message : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/facade/exceptions.ts#L12-L25\">@angular/core/src/facade/exceptions.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/BaseException-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/BaseException-class.html</a>\n  </p>\n</div>\n","api/core/index/binding-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Binding</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Binding {\n  constructor(token: any, {toClass, toValue, toAlias, toFactory, deps, multi}: {\n    toClass?: Type,\n    toValue?: any,\n    toAlias?: any,\n    toFactory: Function, deps?: Object[], multi?: boolean\n  })\n  \n  \n  toClass \n  toAlias \n  toFactory \n  toValue \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"provider-class\"><code>Provider</code></a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Binding</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(token: any, {toClass, toValue, toAlias, toFactory, deps, multi}: {\n    toClass?: Type,\n    toValue?: any,\n    toAlias?: any,\n    toFactory: Function, deps?: Object[], multi?: boolean\n  })</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toClass') }\" class=\"prettyprint no-bg\" id=\"toClass-anchor\">toClass</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toAlias') }\" class=\"prettyprint no-bg\" id=\"toAlias-anchor\">toAlias</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toFactory') }\" class=\"prettyprint no-bg\" id=\"toFactory-anchor\">toFactory</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toValue') }\" class=\"prettyprint no-bg\" id=\"toValue-anchor\">toValue</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/provider.ts#L207-L250\">@angular/core/src/di/provider.ts (line 207)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Binding-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Binding-class.html</a>\n  </p>\n</div>\n","api/core/index/attributemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AttributeMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AttributeMetadata {\n  constructor(attributeName: string)\n  \n  \n  attributeName : string\n  token : AttributeMetadata\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Specifies that a constant attribute value should be injected.</p> <p>The directive can inject constant string literals of host element attributes.</p> <h3 id=\"example\">Example</h3> <p>Suppose we have an <code>&lt;input&gt;</code> element and want to know its <code>type</code>.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;input type=\"text\"&gt;\n</pre>\n<p>A decorator can inject string literal <code>text</code> like so:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Directive({selector: 'input'})\nclass InputAttrDirective {\n  constructor(@Attribute('type') type: string) {\n    // type would be 'text' in this example\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AttributeMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(attributeName: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attributeName') }\" class=\"prettyprint no-bg\" id=\"attributeName-anchor\">attributeName : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('token') }\" class=\"prettyprint no-bg\" id=\"token-anchor\">token : AttributeMetadata</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L48-L80\">@angular/core/src/metadata/di.ts (line 48)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AttributeMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AttributeMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/compiler_options-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">COMPILER_OPTIONS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export COMPILER_OPTIONS</pre>\n<p>Token to provide CompilerOptions in the platform injector.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L129-L129\">@angular/core/src/linker/compiler.ts (line 129)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/COMPILER_OPTIONS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/COMPILER_OPTIONS-let.html</a>\n  </p>\n</div>\n","api/core/index/applicationref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ApplicationRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ApplicationRef {\n  registerBootstrapListener(listener: (ref: ComponentRef&lt;any&gt;) =&gt; void) : void\n  registerDisposeListener(dispose: () =&gt; void) : void\n  waitForAsyncInitializers() : Promise&lt;any&gt;\n  run(callback: Function) : any\n  bootstrap(componentFactory: ComponentFactory&lt;C&gt;|ConcreteType&lt;C&gt;) : ComponentRef&lt;C&gt;\n  injector : Injector\n  zone : NgZone\n  dispose() : void\n  tick() : void\n  componentTypes : Type[]\n  components : ComponentRef&lt;any&gt;[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A reference to an Angular application running on a page.</p> <p>For more about Angular applications, see the documentation for <a href=\"../../platform-browser-dynamic/index/bootstrap-function\"><code>bootstrap</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ApplicationRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerBootstrapListener') }\" class=\"prettyprint no-bg\" id=\"registerBootstrapListener-anchor\">registerBootstrapListener(listener: (ref: ComponentRef&lt;any&gt;) =&gt; void) : void</pre>\n<p>Register a listener to be called each time <code>bootstrap()</code> is called to bootstrap a new root component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerDisposeListener') }\" class=\"prettyprint no-bg\" id=\"registerDisposeListener-anchor\">registerDisposeListener(dispose: () =&gt; void) : void</pre>\n<p>Register a listener to be called when the application is disposed.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('waitForAsyncInitializers') }\" class=\"prettyprint no-bg\" id=\"waitForAsyncInitializers-anchor\">waitForAsyncInitializers() : Promise&lt;any&gt;</pre>\n<p>Returns a promise that resolves when all asynchronous application initializers are done.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('run') }\" class=\"prettyprint no-bg\" id=\"run-anchor\">run(callback: Function) : any</pre>\n<p>Runs the given callback in the zone and returns the result of the callback. Exceptions will be forwarded to the ExceptionHandler and rethrown.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrap') }\" class=\"prettyprint no-bg\" id=\"bootstrap-anchor\">bootstrap(componentFactory: ComponentFactory&lt;C&gt;|ConcreteType&lt;C&gt;) : ComponentRef&lt;C&gt;</pre>\n<p>Bootstrap a new component at the root level of the application.</p> <h3 id=\"bootstrap-process\">Bootstrap process</h3> <p>When bootstrapping a new root component into an application, Angular mounts the specified application component onto DOM elements identified by the [componentType]'s selector and kicks off automatic change detection to finish initializing the component.</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'my-app', template: 'Hello World'})\nclass MyApp {\n}\n\nvar myPlatformFactory = createPlatformFactory(platformBrowserDynamic, 'myPlatform');\nmyPlatformFactory().bootstrapModule(MyApp);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n<p>Retrieve the application <a href=\"injector-class\"><code>Injector</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('zone') }\" class=\"prettyprint no-bg\" id=\"zone-anchor\">zone : NgZone</pre>\n<p>Retrieve the application <a href=\"ngzone-class\"><code>NgZone</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dispose') }\" class=\"prettyprint no-bg\" id=\"dispose-anchor\">dispose() : void</pre>\n<p>Dispose of this application and all of its components.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('tick') }\" class=\"prettyprint no-bg\" id=\"tick-anchor\">tick() : void</pre>\n<p>Invoke this method to explicitly process change detection and its side-effects.</p> <p>In development mode, <code>tick()</code> also performs a second change detection cycle to ensure that no further changes are detected. If additional changes are picked up during this second cycle, bindings in the app have side-effects that cannot be resolved in a single change detection pass. In this case, Angular throws an error, since an Angular application can only have one change detection pass during which all change detection must complete.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentTypes') }\" class=\"prettyprint no-bg\" id=\"componentTypes-anchor\">componentTypes : Type[]</pre>\n<p>Get a list of component types registered to this application. This list is populated even before the component is created.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('components') }\" class=\"prettyprint no-bg\" id=\"components-anchor\">components : ComponentRef&lt;any&gt;[]</pre>\n<p>Get a list of components registered to this application.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L404-L505\">@angular/core/src/application_ref.ts (line 404)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ApplicationRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ApplicationRef-class.html</a>\n  </p>\n</div>\n","api/core/index/custom_elements_schema-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">CUSTOM_ELEMENTS_SCHEMA: SchemaMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export CUSTOM_ELEMENTS_SCHEMA</pre>\n<p>Defines a schema that will allow any property on elements with a <code>-</code> in their name, which is the common rule for custom elements.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/ng_module.ts#L35-L37\">@angular/core/src/metadata/ng_module.ts (line 35)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/CUSTOM_ELEMENTS_SCHEMA-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/CUSTOM_ELEMENTS_SCHEMA-let.html</a>\n  </p>\n</div>\n","api/core/index/changedetectorref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ChangeDetectorRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ChangeDetectorRef {\n  markForCheck() : void\n  detach() : void\n  detectChanges() : void\n  checkNoChanges() : void\n  reattach() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ChangeDetectorRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markForCheck') }\" class=\"prettyprint no-bg\" id=\"markForCheck-anchor\">markForCheck() : void</pre>\n<p>Marks all <a href=\"changedetectionstrategy-enum#OnPush\"><code>ChangeDetectionStrategy</code></a> ancestors as to be checked.</p>  <p> (<a href=\"http://plnkr.co/edit/GC512b?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'cmp',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `Number of ticks: {{numberOfTicks}}`\n})\nclass Cmp {\n  numberOfTicks = 0;\n\n  constructor(ref: ChangeDetectorRef) {\n    setInterval(() =&gt; {\n      this.numberOfTicks ++\n      // the following is required, otherwise the view will not be updated\n      this.ref.markForCheck();\n    }, 1000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    &lt;cmp&gt;&lt;cmp&gt;\n  `,\n  directives: [Cmp]\n})\nclass App {\n}\n\nbootstrap(App);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detach') }\" class=\"prettyprint no-bg\" id=\"detach-anchor\">detach() : void</pre>\n<p>Detaches the change detector from the change detector tree.</p> <p>The detached change detector will not be checked until it is reattached.</p> <p>This can also be used in combination with <a href=\"changedetectorref-class#detectChanges\"><code>ChangeDetectorRef</code></a> to implement local change detection checks.</p>   <p>The following example defines a component with a large list of readonly data. Imagine the data changes constantly, many times per second. For performance reasons, we want to check and update the list every five seconds. We can do that by detaching the component's change detector and doing a local check every five seconds.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class DataProvider {\n  // in a real application the returned data will be different every time\n  get data() {\n    return [1,2,3,4,5];\n  }\n}\n\n@Component({\n  selector: 'giant-list',\n  template: `\n    &lt;li *ngFor=\"let d of dataProvider.data\"&gt;Data {{d}}&lt;/lig&gt;\n  `,\n  directives: [NgFor]\n})\nclass GiantList {\n  constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {\n    ref.detach();\n    setInterval(() =&gt; {\n      this.ref.detectChanges();\n    }, 5000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  providers: [DataProvider],\n  template: `\n    &lt;giant-list&gt;&lt;giant-list&gt;\n  `,\n  directives: [GiantList]\n})\nclass App {\n}\n\nbootstrap(App);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detectChanges') }\" class=\"prettyprint no-bg\" id=\"detectChanges-anchor\">detectChanges() : void</pre>\n<p>Checks the change detector and its children.</p> <p>This can also be used in combination with <a href=\"changedetectorref-class#detach\"><code>ChangeDetectorRef</code></a> to implement local change detection checks.</p>   <p>The following example defines a component with a large list of readonly data. Imagine, the data changes constantly, many times per second. For performance reasons, we want to check and update the list every five seconds.</p> <p>We can do that by detaching the component's change detector and doing a local change detection check every five seconds.</p> <p>See <a href=\"changedetectorref-class#detach\"><code>ChangeDetectorRef</code></a> for more information.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('checkNoChanges') }\" class=\"prettyprint no-bg\" id=\"checkNoChanges-anchor\">checkNoChanges() : void</pre>\n<p>Checks the change detector and its children, and throws if any changes are detected.</p> <p>This is used in development mode to verify that running change detection doesn't introduce other changes.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reattach') }\" class=\"prettyprint no-bg\" id=\"reattach-anchor\">reattach() : void</pre>\n<p>Reattach the change detector to the change detector tree.</p> <p>This also marks OnPush ancestors as to be checked. This reattached change detector will be checked during the next change detection run.</p>  <p> (<a href=\"http://plnkr.co/edit/aUhZha?p=preview\">live demo</a>)</p> <p>The following example creates a component displaying <code>live</code> data. The component will detach its change detector from the main change detector tree when the component's live property is set to false.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class DataProvider {\n  data = 1;\n\n  constructor() {\n    setInterval(() =&gt; {\n      this.data = this.data * 2;\n    }, 500);\n  }\n}\n\n@Component({\n  selector: 'live-data',\n  inputs: ['live'],\n  template: `Data: {{dataProvider.data}}`\n})\nclass LiveData {\n  constructor(private ref: ChangeDetectorRef, private dataProvider:DataProvider) {}\n\n  set live(value) {\n    if (value)\n      this.ref.reattach();\n    else\n      this.ref.detach();\n  }\n}\n\n@Component({\n  selector: 'app',\n  providers: [DataProvider],\n  template: `\n    Live Update: &lt;input type=\"checkbox\" [(ngModel)]=\"live\"&gt;\n    &lt;live-data [live]=\"live\"&gt;&lt;live-data&gt;\n  `,\n  directives: [LiveData, FORM_DIRECTIVES]\n})\nclass App {\n  live = true;\n}\n\nbootstrap(App);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/change_detector_ref.ts#L1-L203\">@angular/core/src/change_detection/change_detector_ref.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ChangeDetectorRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ChangeDetectorRef-class.html</a>\n  </p>\n</div>\n","api/core/index/attributemetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">AttributeMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AttributeMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"attributemetadata-class\"><code>AttributeMetadata</code></a> factory for creating annotations, decorators or DSL.</p> <h3 id=\"example-as-typescript-decorator\">Example as TypeScript Decorator</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'page', template: 'Title: {{title}}'})\nclass Page {\n  title: string;\n  constructor(@Attribute('title') title: string) { this.title = title; }\n}\n</pre>\n<h3 id=\"example-as-es5-dsl\">Example as ES5 DSL</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = ng\n  .Component({...})\n  .Class({\n    constructor: [new ng.Attribute('title'), function(title) {\n      ...\n    }]\n  })\n</pre>\n<h3 id=\"example-as-es5-annotation\">Example as ES5 annotation</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = function(title) {\n  ...\n};\n\nMyComponent.annotations = [\n  new ng.Component({...})\n]\nMyComponent.parameters = [\n  [new ng.Attribute('title')]\n]\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface AttributeMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L133-L174\">@angular/core/src/metadata.ts (line 133)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/AttributeMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/changedetectionstrategy-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">ChangeDetectionStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ChangeDetectionStrategy {\n  OnPush \n  Default \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Describes within the change detector which strategy will be used the next time change detection is triggered.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum ChangeDetectionStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('OnPush') }\" class=\"prettyprint no-bg\" id=\"OnPush-anchor\">OnPush</pre>\n<p><code>OnPush</code> means that the change detector's mode will be set to <code>CheckOnce</code> during hydration.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Default') }\" class=\"prettyprint no-bg\" id=\"Default-anchor\">Default</pre>\n<p><code>Default</code> means that the change detector's mode will be set to <code>CheckAlways</code> during hydration.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/constants.ts#L9-L26\">@angular/core/src/change_detection/constants.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ChangeDetectionStrategy-enum.html</a>\n  </p>\n</div>\n","api/core/index/classdefinition-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ClassDefinition</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ClassDefinition {\n  extends : Type\n  constructor : Function|any[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares the interface to be used with <a href=\"class-function\"><code>Class</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ClassDefinition</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('extends') }\" class=\"prettyprint no-bg\" id=\"extends-anchor\">extends : Type</pre>\n<p>Optional argument for specifying the superclass.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor-anchor\">constructor : Function|any[]</pre>\n<p>Required constructor function for a class.</p> <p>The function may be optionally wrapped in an <code>Array</code>, in which case additional parameter annotations may be specified. The number of arguments and the number of parameter annotations must match.</p> <p>See <a href=\"class-function\"><code>Class</code></a> for example of usage.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/util/decorators.ts#L11-L40\">@angular/core/src/util/decorators.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ClassDefinition-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ClassDefinition-interface.html</a>\n  </p>\n</div>\n","api/core/index/collectionchangerecord-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CollectionChangeRecord</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CollectionChangeRecord {\n  constructor(item: any, trackById: any)\n  \n  \n  currentIndex : number\n  previousIndex : number\n  item : any\n  trackById : any\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CollectionChangeRecord</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(item: any, trackById: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('currentIndex') }\" class=\"prettyprint no-bg\" id=\"currentIndex-anchor\">currentIndex : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('previousIndex') }\" class=\"prettyprint no-bg\" id=\"previousIndex-anchor\">previousIndex : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('item') }\" class=\"prettyprint no-bg\" id=\"item-anchor\">item : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('trackById') }\" class=\"prettyprint no-bg\" id=\"trackById-anchor\">trackById : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/default_iterable_differ.ts#L588-L626\">@angular/core/src/change_detection/differs/default_iterable_differ.ts (line 588)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/CollectionChangeRecord-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/CollectionChangeRecord-class.html</a>\n  </p>\n</div>\n","api/core/index/class-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">Class</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export Class(clsDef: ClassDefinition) : ConcreteType&lt;any&gt;</pre>\n<p>Provides a way for expressing ES6 classes with parameter annotations in ES5.</p> <h2 id=\"basic-example\">Basic Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var Greeter = ng.Class({\n  constructor: function(name) {\n    this.name = name;\n  },\n\n  greet: function() {\n    alert('Hello ' + this.name + '!');\n  }\n});\n</pre>\n<p>is equivalent to ES6:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Greeter {\n  constructor(name) {\n    this.name = name;\n  }\n\n  greet() {\n    alert('Hello ' + this.name + '!');\n  }\n}\n</pre>\n<p>or equivalent to ES5:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var Greeter = function (name) {\n  this.name = name;\n}\n\nGreeter.prototype.greet = function () {\n  alert('Hello ' + this.name + '!');\n}\n</pre>\n<h3 id=\"example-with-parameter-annotations\">Example with parameter annotations</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyService = ng.Class({\n  constructor: [String, [new Query(), QueryList], function(name, queryList) {\n    ...\n  }]\n});\n</pre>\n<p>is equivalent to ES6:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyService {\n  constructor(name: string, @Query() queryList: QueryList) {\n    ...\n  }\n}\n</pre>\n<h3 id=\"example-with-inheritance\">Example with inheritance</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var Shape = ng.Class({\n  constructor: (color) {\n    this.color = color;\n  }\n});\n\nvar Square = ng.Class({\n  extends: Shape,\n  constructor: function(color, size) {\n    Shape.call(this, color);\n    this.size = size;\n  }\n});\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/util/decorators.ts#L138-L250\">@angular/core/src/util/decorators.ts (line 138)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Class-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Class-function.html</a>\n  </p>\n</div>\n","api/core/index/compiler-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Compiler</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Compiler {\n  compileComponentAsync(component: ConcreteType&lt;T&gt;, ngModule?: Type) : Promise&lt;ComponentFactory&lt;T&gt;&gt;\n  compileComponentSync(component: ConcreteType&lt;T&gt;, ngModule?: Type) : ComponentFactory&lt;T&gt;\n  compileModuleSync(moduleType: ConcreteType&lt;T&gt;) : NgModuleFactory&lt;T&gt;\n  compileModuleAsync(moduleType: ConcreteType&lt;T&gt;) : Promise&lt;NgModuleFactory&lt;T&gt;&gt;\n  compileModuleAndAllComponentsSync(moduleType: ConcreteType&lt;T&gt;) : ModuleWithComponentFactories&lt;T&gt;\n  compileModuleAndAllComponentsAsync(moduleType: ConcreteType&lt;T&gt;) : Promise&lt;ModuleWithComponentFactories&lt;T&gt;&gt;\n  clearCache() : void\n  clearCacheFor(type: Type)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Low-level service for running the angular compiler duirng runtime to create <a href=\"componentfactory-class\"><code>ComponentFactory</code></a>s, which can later be used to create and render a Component instance.</p> <p>Each <code>@NgModule</code> provides an own <code>Compiler</code> to its injector, that will use the directives/pipes of the ng module for compilation of components.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Compiler</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileComponentAsync') }\" class=\"prettyprint no-bg\" id=\"compileComponentAsync-anchor\">compileComponentAsync(component: ConcreteType&lt;T&gt;, ngModule?: Type) : Promise&lt;ComponentFactory&lt;T&gt;&gt;</pre>\n<p>Loads the template and styles of a component and returns the associated <code>ComponentFactory</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileComponentSync') }\" class=\"prettyprint no-bg\" id=\"compileComponentSync-anchor\">compileComponentSync(component: ConcreteType&lt;T&gt;, ngModule?: Type) : ComponentFactory&lt;T&gt;</pre>\n<p>Compiles the given component. All templates have to be either inline or compiled via <code>compileComponentAsync</code> before. Otherwise throws a <a href=\"componentstillloadingerror-class\"><code>ComponentStillLoadingError</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileModuleSync') }\" class=\"prettyprint no-bg\" id=\"compileModuleSync-anchor\">compileModuleSync(moduleType: ConcreteType&lt;T&gt;) : NgModuleFactory&lt;T&gt;</pre>\n<p>Compiles the given NgModule and all of its components. All templates of the components listed in <code>entryComponents</code> have to be inlined. Otherwise throws a <a href=\"componentstillloadingerror-class\"><code>ComponentStillLoadingError</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileModuleAsync') }\" class=\"prettyprint no-bg\" id=\"compileModuleAsync-anchor\">compileModuleAsync(moduleType: ConcreteType&lt;T&gt;) : Promise&lt;NgModuleFactory&lt;T&gt;&gt;</pre>\n<p>Compiles the given NgModule and all of its components</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileModuleAndAllComponentsSync') }\" class=\"prettyprint no-bg\" id=\"compileModuleAndAllComponentsSync-anchor\">compileModuleAndAllComponentsSync(moduleType: ConcreteType&lt;T&gt;) : ModuleWithComponentFactories&lt;T&gt;</pre>\n<p>Same as <a href=\"compilemodulesync\">compileModuleSync</a> put also creates ComponentFactories for all components.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileModuleAndAllComponentsAsync') }\" class=\"prettyprint no-bg\" id=\"compileModuleAndAllComponentsAsync-anchor\">compileModuleAndAllComponentsAsync(moduleType: ConcreteType&lt;T&gt;) : Promise&lt;ModuleWithComponentFactories&lt;T&gt;&gt;</pre>\n<p>Same as <a href=\"compilemoduleasync\">compileModuleAsync</a> put also creates ComponentFactories for all components.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearCache') }\" class=\"prettyprint no-bg\" id=\"clearCache-anchor\">clearCache() : void</pre>\n<p>Clears all caches</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearCacheFor') }\" class=\"prettyprint no-bg\" id=\"clearCacheFor-anchor\">clearCacheFor(type: Type)</pre>\n<p>Clears the cache for the given component/ngModule.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L44-L110\">@angular/core/src/linker/compiler.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Compiler-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Compiler-class.html</a>\n  </p>\n</div>\n","api/core/index/compilerfactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CompilerFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CompilerFactory {\n  createCompiler(options?: CompilerOptions[]) : Compiler\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A factory for creating a Compiler</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CompilerFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createCompiler') }\" class=\"prettyprint no-bg\" id=\"createCompiler-anchor\">createCompiler(options?: CompilerOptions[]) : Compiler</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L129-L138\">@angular/core/src/linker/compiler.ts (line 129)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/CompilerFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/CompilerFactory-class.html</a>\n  </p>\n</div>\n","api/core/index/compileroptions-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">CompilerOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CompilerOptions {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Options for creating a compiler</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias CompilerOptions</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L110-L122\">@angular/core/src/linker/compiler.ts (line 110)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/CompilerOptions-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/CompilerOptions-type-alias.html</a>\n  </p>\n</div>\n","api/core/index/component-decorator":"<h1 class=\"hero-title text-display-1 is-standard-case\">Component: ComponentMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Decorator</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Component(options : ComponentMetadata) : ComponentMetadataFactory</pre>\n<p>Declare reusable UI building blocks for an application.</p> <p>Each Angular component requires a single <code>@Component</code> annotation. The <code>@Component</code> annotation specifies when a component is instantiated, and which properties and hostListeners it binds to.</p> <p>When a component is instantiated, Angular</p> <ul> <li>creates a shadow DOM for the component.</li> <li>loads the selected template into the shadow DOM.</li> <li>creates all the injectable objects configured with <code>providers</code> and <code>viewProviders</code>.</li> </ul> <p>All template expressions and statements are then evaluated against the component instance.</p> <h2 id=\"lifecycle-hooks\">Lifecycle hooks</h2> <p>When the component class implements some <a href=\"../../../guide/lifecycle-hooks\">Lifecycle Hooks</a> the callbacks are called by the change detection at defined points in time during the life of the component.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'greet', template: 'Hello {{name}}!', directives: [CustomDirective]})\nclass Greet {\n  name: string = 'World';\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L355-L356\">@angular/core/src/metadata.ts (line 355)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Component-decorator.html</a>\n  </p>\n</div>\n","api/core/index/componentmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentMetadata {\n  constructor({selector,\n               inputs,\n               outputs,\n               properties,\n               events,\n               host,\n               exportAs,\n               moduleId,\n               providers,\n               viewProviders,\n               changeDetection = ChangeDetectionStrategy.Default,\n               queries,\n               templateUrl,\n               template,\n               styleUrls,\n               styles,\n               animations,\n               directives,\n               pipes,\n               encapsulation,\n               interpolation,\n               entryComponents}?: ComponentMetadataType)\n  \n  \n  changeDetection : ChangeDetectionStrategy\n  viewProviders : any[]\n  moduleId : string\n  templateUrl : string\n  template : string\n  styleUrls : string[]\n  styles : string[]\n  animations : AnimationEntryMetadata[]\n  directives : Array&lt;Type|any[]&gt;\n  pipes : Array&lt;Type|any[]&gt;\n  encapsulation : ViewEncapsulation\n  interpolation : [string, string]\n  entryComponents : Array&lt;Type|any[]&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declare reusable UI building blocks for an application.</p> <p>Each Angular component requires a single <code>@Component</code> annotation. The <code>@Component</code> annotation specifies when a component is instantiated, and which properties and hostListeners it binds to.</p> <p>When a component is instantiated, Angular</p> <ul> <li>creates a shadow DOM for the component.</li> <li>loads the selected template into the shadow DOM.</li> <li>creates all the injectable objects configured with <code>providers</code> and <code>viewProviders</code>.</li> </ul> <p>All template expressions and statements are then evaluated against the component instance.</p> <h2 id=\"lifecycle-hooks\">Lifecycle hooks</h2> <p>When the component class implements some <a href=\"../../../guide/lifecycle-hooks\">Lifecycle Hooks</a> the callbacks are called by the change detection at defined points in time during the life of the component.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'greet', template: 'Hello {{name}}!', directives: [CustomDirective]})\nclass Greet {\n  name: string = 'World';\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({selector,\n               inputs,\n               outputs,\n               properties,\n               events,\n               host,\n               exportAs,\n               moduleId,\n               providers,\n               viewProviders,\n               changeDetection = ChangeDetectionStrategy.Default,\n               queries,\n               templateUrl,\n               template,\n               styleUrls,\n               styles,\n               animations,\n               directives,\n               pipes,\n               encapsulation,\n               interpolation,\n               entryComponents}?: ComponentMetadataType)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('changeDetection') }\" class=\"prettyprint no-bg\" id=\"changeDetection-anchor\">changeDetection : ChangeDetectionStrategy</pre>\n<p>Defines the used change detection strategy.</p> <p>When a component is instantiated, Angular creates a change detector, which is responsible for propagating the component's bindings.</p> <p>The <code>changeDetection</code> property defines, whether the change detection will be checked every time or only when the component tells it to do so.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewProviders') }\" class=\"prettyprint no-bg\" id=\"viewProviders-anchor\">viewProviders : any[]</pre>\n<p>Defines the set of injectable objects that are visible to its view DOM children.</p> <h2 id=\"simple-example\">Simple Example</h2> <p>Here is an example of a class that can be injected:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@Directive({\n  selector: 'needs-greeter'\n})\nclass NeedsGreeter {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n\n@Component({\n  selector: 'greet',\n  viewProviders: [\n    Greeter\n  ],\n  template: `&lt;needs-greeter&gt;&lt;/needs-greeter&gt;`,\n  directives: [NeedsGreeter]\n})\nclass HelloWorld {\n}\n\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('moduleId') }\" class=\"prettyprint no-bg\" id=\"moduleId-anchor\">moduleId : string</pre>\n<p>The module id of the module that contains the component. Needed to be able to resolve relative urls for templates and styles. In CommonJS, this can always be set to <code>module.id</code>, similarly SystemJS exposes <code>__moduleName</code> variable within each module.</p> <h2 id=\"simple-example\">Simple Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'someDir',\n  moduleId: module.id\n})\nclass SomeDir {\n}\n\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('templateUrl') }\" class=\"prettyprint no-bg\" id=\"templateUrl-anchor\">templateUrl : string</pre>\n<p>Specifies a template URL for an Angular component.</p> <p>NOTE: Only one of <code>templateUrl</code> or <code>template</code> can be defined per View.</p>  \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('template') }\" class=\"prettyprint no-bg\" id=\"template-anchor\">template : string</pre>\n<p>Specifies an inline template for an Angular component.</p> <p>NOTE: Only one of <code>templateUrl</code> or <code>template</code> can be defined per View.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styleUrls') }\" class=\"prettyprint no-bg\" id=\"styleUrls-anchor\">styleUrls : string[]</pre>\n<p>Specifies stylesheet URLs for an Angular component.</p>  \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : string[]</pre>\n<p>Specifies an inline stylesheet for an Angular component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animations') }\" class=\"prettyprint no-bg\" id=\"animations-anchor\">animations : AnimationEntryMetadata[]</pre>\n<p>Animations are defined on components via an animation-like DSL. This DSL approach to describing animations allows for a flexibility that both benefits developers and the framework.</p> <p>Animations work by listening on state changes that occur on an element within the template. When a state change occurs, Angular can then take advantage and animate the arc in between. This works similar to how CSS transitions work, however, by having a programmatic DSL, animations are not limited to environments that are DOM-specific. (Angular can also perform optimizations behind the scenes to make animations more performant.)</p> <p>For animations to be available for use, animation state changes are placed within <a href=\"trigger-function\">animation triggers</a> which are housed inside of the <code>animations</code> annotation metadata. Within a trigger both <a href=\"state-function\">state</a> and <a href=\"transition-function\">transition</a> entries can be placed.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'animation-cmp',\n  templateUrl: 'animation-cmp.html',\n  animations: [\n    // this here is our animation trigger that\n    // will contain our state change animations.\n    trigger('myTriggerName', [\n      // the styles defined for the `on` and `off`\n      // states declared below are persisted on the\n      // element once the animation completes.\n      state('on', style({ opacity: 1 }),\n      state('off', style({ opacity: 0 }),\n\n      // this here is our animation that kicks off when\n      // this state change jump is true\n      transition('on =&gt; off', [\n        animate(\"1s\")\n      ])\n    ])\n  ]\n})\n</pre>\n<p>As depicted in the code above, a group of related animation states are all contained within an animation <code>trigger</code> (the code example above called the trigger <code>myTriggerName</code>). When a trigger is created then it can be bound onto an element within the component's template via a property prefixed by an <code>@</code> symbol followed by trigger name and an expression that is used to determine the state value for that trigger.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;!-- animation-cmp.html --&gt;\n&lt;div @myTriggerName=\"expression\"&gt;...&lt;/div&gt;\n</pre>\n<p>For state changes to be executed, the <code>expression</code> value must change value from its existing value to something that we have set an animation to animate on (in the example above we are listening to a change of state between <code>on</code> and <code>off</code>). The <code>expression</code> value attached to the trigger must be something that can be evaluated with the template/component context.</p> <h3 id=\"dsl-animation-functions\">DSL Animation Functions</h3> <p>Please visit each of the animation DSL functions listed below to gain a better understanding of how and why they are used for crafting animations in Angular2:</p> <ul> <li><a href=\"trigger-function\">trigger()</a></li> <li><a href=\"state-function\">state()</a></li> <li><a href=\"transition-function\">transition()</a></li> <li><a href=\"group-function\">group()</a></li> <li><a href=\"sequence-function\">sequence()</a></li> <li><a href=\"style-function\">style()</a></li> <li><a href=\"animate-function\">animate()</a></li> <li><a href=\"keyframes-function\">keyframes()</a></li> </ul> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directives') }\" class=\"prettyprint no-bg\" id=\"directives-anchor\">directives : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pipes') }\" class=\"prettyprint no-bg\" id=\"pipes-anchor\">pipes : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encapsulation') }\" class=\"prettyprint no-bg\" id=\"encapsulation-anchor\">encapsulation : ViewEncapsulation</pre>\n<p>Specify how the template and the styles should be encapsulated. The default is <a href=\"viewencapsulation-enum#Emulated\"><code>ViewEncapsulation.Emulated</code></a> if the view has styles, otherwise <a href=\"viewencapsulation-enum#None\"><code>ViewEncapsulation.None</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('interpolation') }\" class=\"prettyprint no-bg\" id=\"interpolation-anchor\">interpolation : [string, string]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('entryComponents') }\" class=\"prettyprint no-bg\" id=\"entryComponents-anchor\">entryComponents : Array&lt;Type|any[]&gt;</pre>\n<p>Defines the components that should be compiled as well when this component is defined. For each components listed here, Angular will create a <a href=\"componentfactory-class\">ComponentFactory</a> and store it in the <a href=\"componentfactoryresolver-class\">ComponentFactoryResolver</a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L800-L1073\">@angular/core/src/metadata/directives.ts (line 800)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/componentdecorator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentDecorator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentDecorator {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for the <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a> decorator function.</p> <p>See <a href=\"componentfactory-class\"><code>ComponentFactory</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ComponentDecorator</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L38-L47\">@angular/core/src/metadata.ts (line 38)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentDecorator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentDecorator-interface.html</a>\n  </p>\n</div>\n","api/core/index/applicationmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ApplicationModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ApplicationModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>This module includes the providers of @angular/core that are needed to bootstrap components via <code>ApplicationRef</code>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ApplicationModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  providers: [\n    ApplicationRef_,\n    {provide: ApplicationRef, useExisting: ApplicationRef_},\n    ApplicationInitStatus,\n    Compiler,\n    {provide: ComponentResolver, useExisting: Compiler},\n    APP_ID_RANDOM_PROVIDER,\n    ViewUtils,\n    {provide: IterableDiffers, useFactory: _iterableDiffersFactory},\n    {provide: KeyValueDiffers, useFactory: _keyValueDiffersFactory},\n    {provide: DynamicComponentLoader, useClass: DynamicComponentLoader_},\n  ]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_module.ts#L36-L59\">@angular/core/src/application_module.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ApplicationModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ApplicationModule-class.html</a>\n  </p>\n</div>\n","api/core/index/componentfactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentFactory {\n  constructor(selector: string, _viewFactory: Function, _componentType: Type)\n  \n  \n  C \n  selector : string\n  componentType : Type\n  create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any) : ComponentRef&lt;C&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(selector: string, _viewFactory: Function, _componentType: Type)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('C') }\" class=\"prettyprint no-bg\" id=\"C-anchor\">C</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('selector') }\" class=\"prettyprint no-bg\" id=\"selector-anchor\">selector : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentType') }\" class=\"prettyprint no-bg\" id=\"componentType-anchor\">componentType : Type</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(injector: Injector, projectableNodes?: any[][], rootSelectorOrNode?: string|any) : ComponentRef&lt;C&gt;</pre>\n<p>Creates a new component.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/component_factory.ts#L85-L111\">@angular/core/src/linker/component_factory.ts (line 85)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentFactory-class.html</a>\n  </p>\n</div>\n","api/core/index/componentref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentRef {\n  C \n  location : ElementRef\n  injector : Injector\n  instance : C\n  hostView : ViewRef\n  changeDetectorRef : ChangeDetectorRef\n  componentType : Type\n  destroy() : void\n  onDestroy(callback: Function) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents an instance of a Component created via a <a href=\"componentfactory-class\"><code>ComponentFactory</code></a>.</p> <p><code>ComponentRef</code> provides access to the Component Instance as well other objects related to this Component Instance and allows you to destroy the Component Instance via the <a href=\"#destroy\">destroy</a> method.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('C') }\" class=\"prettyprint no-bg\" id=\"C-anchor\">C</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('location') }\" class=\"prettyprint no-bg\" id=\"location-anchor\">location : ElementRef</pre>\n<p>Location of the Host Element of this Component Instance.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n<p>The injector on which the component instance exists.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('instance') }\" class=\"prettyprint no-bg\" id=\"instance-anchor\">instance : C</pre>\n<p>The instance of the Component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hostView') }\" class=\"prettyprint no-bg\" id=\"hostView-anchor\">hostView : ViewRef</pre>\n<p>The <a href=\"viewref-class\"><code>ViewRef</code></a> of the Host View of this Component instance.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('changeDetectorRef') }\" class=\"prettyprint no-bg\" id=\"changeDetectorRef-anchor\">changeDetectorRef : ChangeDetectorRef</pre>\n<p>The <a href=\"changedetectorref-class\"><code>ChangeDetectorRef</code></a> of the Component instance.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentType') }\" class=\"prettyprint no-bg\" id=\"componentType-anchor\">componentType : Type</pre>\n<p>The component type.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n<p>Destroys the component instance and all of the data structures associated with it.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy(callback: Function) : void</pre>\n<p>Allows to register a callback that will be called when the component is destroyed.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/component_factory.ts#L16-L67\">@angular/core/src/linker/component_factory.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentRef-class.html</a>\n  </p>\n</div>\n","api/core/index/componentmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a> factory for creating annotations, decorators or DSL.</p> <h3 id=\"example-as-typescript-decorator\">Example as TypeScript Decorator</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'greet', template: 'Hello {{name}}!', directives: [CustomDirective]})\nclass Greet {\n  name: string = 'World';\n}\n</pre>\n<h3 id=\"example-as-es5-dsl\">Example as ES5 DSL</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = ng\n  .Component({...})\n  .Class({\n    constructor: function() {\n      ...\n    }\n  })\n</pre>\n<h3 id=\"example-as-es5-annotation\">Example as ES5 annotation</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = function() {\n  ...\n};\n\nMyComponent.annotations = [\n  new ng.Component({...})\n]\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ComponentMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L95-L133\">@angular/core/src/metadata.ts (line 95)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/componentmetadatatype-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentMetadataType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentMetadataType {\n  changeDetection : ChangeDetectionStrategy\n  viewProviders : any[]\n  moduleId : string\n  templateUrl : string\n  template : string\n  styleUrls : string[]\n  styles : string[]\n  animations : AnimationEntryMetadata[]\n  directives : Array&lt;Type|any[]&gt;\n  pipes : Array&lt;Type|any[]&gt;\n  encapsulation : ViewEncapsulation\n  interpolation : [string, string]\n  entryComponents : Array&lt;Type|any[]&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for creating <a href=\"componentmetadatatype-interface\"><code>ComponentMetadataType</code></a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ComponentMetadataType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('changeDetection') }\" class=\"prettyprint no-bg\" id=\"changeDetection-anchor\">changeDetection : ChangeDetectionStrategy</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewProviders') }\" class=\"prettyprint no-bg\" id=\"viewProviders-anchor\">viewProviders : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('moduleId') }\" class=\"prettyprint no-bg\" id=\"moduleId-anchor\">moduleId : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('templateUrl') }\" class=\"prettyprint no-bg\" id=\"templateUrl-anchor\">templateUrl : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('template') }\" class=\"prettyprint no-bg\" id=\"template-anchor\">template : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styleUrls') }\" class=\"prettyprint no-bg\" id=\"styleUrls-anchor\">styleUrls : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animations') }\" class=\"prettyprint no-bg\" id=\"animations-anchor\">animations : AnimationEntryMetadata[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directives') }\" class=\"prettyprint no-bg\" id=\"directives-anchor\">directives : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pipes') }\" class=\"prettyprint no-bg\" id=\"pipes-anchor\">pipes : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encapsulation') }\" class=\"prettyprint no-bg\" id=\"encapsulation-anchor\">encapsulation : ViewEncapsulation</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('interpolation') }\" class=\"prettyprint no-bg\" id=\"interpolation-anchor\">interpolation : [string, string]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('entryComponents') }\" class=\"prettyprint no-bg\" id=\"entryComponents-anchor\">entryComponents : Array&lt;Type|any[]&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L780-L800\">@angular/core/src/metadata/directives.ts (line 780)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentMetadataType-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentMetadataType-interface.html</a>\n  </p>\n</div>\n","api/core/index/componentresolver-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentResolver</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"componentfactoryresolver-class\"><code>ComponentFactoryResolver</code></a> together with <a href=\"ngmodule-decorator\"><code>NgModule</code></a>.entryComponents}/<a href=\"component-decorator\"><code>Component</code></a>.entryComponents or <a href=\"analyze_for_entry_components-let\"><code>ANALYZE_FOR_ENTRY_COMPONENTS</code></a> provider for dynamic component creation. Use <a href=\"ngmodulefactoryloader-class\"><code>NgModuleFactoryLoader</code></a> for lazy loading.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentResolver {\n  DynamicCompilationDeprecationMsg : '\n  LazyLoadingDeprecationMsg : '\n  resolveComponent(component: Type|string) : Promise&lt;ComponentFactory&lt;any&gt;&gt;\n  clearCache() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Low-level service for loading <a href=\"componentfactory-class\"><code>ComponentFactory</code></a>s, which can later be used to create and render a Component instance.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentResolver</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('DynamicCompilationDeprecationMsg') }\" class=\"prettyprint no-bg\" id=\"DynamicCompilationDeprecationMsg-anchor\">DynamicCompilationDeprecationMsg : '</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('LazyLoadingDeprecationMsg') }\" class=\"prettyprint no-bg\" id=\"LazyLoadingDeprecationMsg-anchor\">LazyLoadingDeprecationMsg : '</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveComponent') }\" class=\"prettyprint no-bg\" id=\"resolveComponent-anchor\">resolveComponent(component: Type|string) : Promise&lt;ComponentFactory&lt;any&gt;&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearCache') }\" class=\"prettyprint no-bg\" id=\"clearCache-anchor\">clearCache() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/component_resolver.ts#L10-L30\">@angular/core/src/linker/component_resolver.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentResolver-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentResolver-class.html</a>\n  </p>\n</div>\n","api/core/index/componentstillloadingerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentStillLoadingError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentStillLoadingError {\n  constructor(compType: Type)\n  \n  \n  compType : Type\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Indicates that a component is still being loaded in a synchronous compile.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentStillLoadingError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(compType: Type)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compType') }\" class=\"prettyprint no-bg\" id=\"compType-anchor\">compType : Type</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L16-L28\">@angular/core/src/linker/compiler.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentStillLoadingError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentStillLoadingError-class.html</a>\n  </p>\n</div>\n","api/core/index/contentchild-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChild: ContentChildMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ContentChild</pre>\n<p>Configures a content query.</p> <p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'someDir'\n})\nclass SomeDir {\n  @ContentChild(ChildDirective) contentChild;\n  @ContentChild('container_ref') containerChild\n\n  ngAfterContentInit() {\n    // contentChild is set\n    // containerChild is set\n  }\n}\n</pre>\n<pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;container #container_ref&gt;\n  &lt;item&gt;a&lt;/item&gt;\n  &lt;item&gt;b&lt;/item&gt;\n&lt;/container&gt;\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L935-L935\">@angular/core/src/metadata.ts (line 935)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChild-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChild-var.html</a>\n  </p>\n</div>\n","api/core/index/contentchildmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChildMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ContentChildMetadata {\n  constructor(_selector: Type|string, {read = null}?: {read?: any})\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Configures a content query.</p> <p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'someDir'\n})\nclass SomeDir {\n  @ContentChild(ChildDirective) contentChild;\n\n  ngAfterContentInit() {\n    // contentChild is set\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ContentChildMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {read = null}?: {read?: any})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L265-L293\">@angular/core/src/metadata/di.ts (line 265)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChildMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChildMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/contentchildmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChildMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ContentChildMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for <a href=\"contentchild-var\"><code>ContentChild</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ContentChildMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L235-L244\">@angular/core/src/metadata.ts (line 235)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChildMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChildMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/componentfactoryresolver-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentFactoryResolver</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentFactoryResolver {\n  NULL : ComponentFactoryResolver\n  resolveComponentFactory(component: ConcreteType&lt;T&gt;) : ComponentFactory&lt;T&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentFactoryResolver</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('NULL') }\" class=\"prettyprint no-bg\" id=\"NULL-anchor\">NULL : ComponentFactoryResolver</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveComponentFactory') }\" class=\"prettyprint no-bg\" id=\"resolveComponentFactory-anchor\">resolveComponentFactory(component: ConcreteType&lt;T&gt;) : ComponentFactory&lt;T&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/component_factory_resolver.ts#L26-L34\">@angular/core/src/linker/component_factory_resolver.ts (line 26)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ComponentFactoryResolver-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ComponentFactoryResolver-class.html</a>\n  </p>\n</div>\n","api/core/index/contentchildren-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChildren: ContentChildrenMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ContentChildren</pre>\n<p>Configures a content query.</p> <p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'someDir'\n})\nclass SomeDir {\n  @ContentChildren(ChildDirective) contentChildren: QueryList&lt;ChildDirective&gt;;\n\n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L900-L901\">@angular/core/src/metadata.ts (line 900)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChildren-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChildren-var.html</a>\n  </p>\n</div>\n","api/core/index/contentchildrenmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChildrenMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ContentChildrenMetadata {\n  constructor(_selector: Type|string, {descendants = false, read = null}?: {descendants?: boolean, read?: any})\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Configures a content query.</p> <p>Content queries are set before the <code>ngAfterContentInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'someDir'\n})\nclass SomeDir {\n  @ContentChildren(ChildDirective) contentChildren: QueryList&lt;ChildDirective&gt;;\n\n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ContentChildrenMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {descendants = false, read = null}?: {descendants?: boolean, read?: any})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L235-L265\">@angular/core/src/metadata/di.ts (line 235)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChildrenMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChildrenMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/contentchildrenmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ContentChildrenMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ContentChildrenMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for <a href=\"contentchildren-var\"><code>ContentChildren</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ContentChildrenMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L225-L235\">@angular/core/src/metadata.ts (line 225)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ContentChildrenMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ContentChildrenMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/cyclicdependencyerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CyclicDependencyError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CyclicDependencyError {\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when dependencies form a cycle.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-wyqdnos0tzql3ei1ev9j-p-info-\">Example (<a href=\"http://plnkr.co/edit/wYQdNos0Tzql3ei1EV9j?p=info\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  {provide: \"one\", useFactory: (two) =&gt; \"two\", deps: [[new Inject(\"two\")]]},\n  {provide: \"two\", useFactory: (one) =&gt; \"one\", deps: [[new Inject(\"one\")]]}\n]);\n\nexpect(() =&gt; injector.get(\"one\")).toThrowError();\n</pre>\n<p>Retrieving <code>A</code> or <code>B</code> throws a <code>CyclicDependencyError</code> as the graph above cannot be constructed.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CyclicDependencyError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(injector: ReflectiveInjector, key: ReflectiveKey)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L97-L122\">@angular/core/src/di/reflective_exceptions.ts (line 97)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/CyclicDependencyError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/CyclicDependencyError-class.html</a>\n  </p>\n</div>\n","api/core/index/directivedecorator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">DirectiveDecorator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DirectiveDecorator {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for the <a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a> decorator function.</p> <p>See <a href=\"directivemetadatafactory-interface\"><code>DirectiveMetadataFactory</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface DirectiveDecorator</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L28-L38\">@angular/core/src/metadata.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DirectiveDecorator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DirectiveDecorator-interface.html</a>\n  </p>\n</div>\n","api/core/index/directivemetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">DirectiveMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DirectiveMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a> factory for creating annotations, decorators or DSL.</p> <h3 id=\"example-as-typescript-decorator\">Example as TypeScript Decorator</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Directive({selector: 'input'})\nclass InputDirective {\n  constructor() {\n    // Add some logic.\n  }\n}\n</pre>\n<h3 id=\"example-as-es5-dsl\">Example as ES5 DSL</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyDirective = ng\n  .Directive({...})\n  .Class({\n    constructor: function() {\n      ...\n    }\n  })\n</pre>\n<h3 id=\"example-as-es5-annotation\">Example as ES5 annotation</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyDirective = function() {\n  ...\n};\n\nMyDirective.annotations = [\n  new ng.Directive({...})\n]\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface DirectiveMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L56-L95\">@angular/core/src/metadata.ts (line 56)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/directivemetadatatype-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">DirectiveMetadataType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DirectiveMetadataType {\n  selector : string\n  properties : string[]\n  inputs : string[]\n  events : string[]\n  outputs : string[]\n  host : {[key: string]: string}\n  providers : any[]\n  exportAs : string\n  queries : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for creating <a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface DirectiveMetadataType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('selector') }\" class=\"prettyprint no-bg\" id=\"selector-anchor\">selector : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('properties') }\" class=\"prettyprint no-bg\" id=\"properties-anchor\">properties : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('inputs') }\" class=\"prettyprint no-bg\" id=\"inputs-anchor\">inputs : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('events') }\" class=\"prettyprint no-bg\" id=\"events-anchor\">events : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outputs') }\" class=\"prettyprint no-bg\" id=\"outputs-anchor\">outputs : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('host') }\" class=\"prettyprint no-bg\" id=\"host-anchor\">host : {[key: string]: string}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exportAs') }\" class=\"prettyprint no-bg\" id=\"exportAs-anchor\">exportAs : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queries') }\" class=\"prettyprint no-bg\" id=\"queries-anchor\">queries : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L14-L30\">@angular/core/src/metadata/directives.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadataType-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadataType-interface.html</a>\n  </p>\n</div>\n","api/core/index/debugnode-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DebugNode</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DebugNode {\n  constructor(nativeNode: any, parent: DebugNode, _debugInfo: RenderDebugInfo)\n  \n  \n  nativeNode : any\n  listeners : EventListener[]\n  parent : DebugElement\n  injector : Injector\n  componentInstance : any\n  context : any\n  references : {[key: string]: any}\n  providerTokens : any[]\n  source : string\n  inject(token: any) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DebugNode</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(nativeNode: any, parent: DebugNode, _debugInfo: RenderDebugInfo)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nativeNode') }\" class=\"prettyprint no-bg\" id=\"nativeNode-anchor\">nativeNode : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('listeners') }\" class=\"prettyprint no-bg\" id=\"listeners-anchor\">listeners : EventListener[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parent') }\" class=\"prettyprint no-bg\" id=\"parent-anchor\">parent : DebugElement</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentInstance') }\" class=\"prettyprint no-bg\" id=\"componentInstance-anchor\">componentInstance : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('context') }\" class=\"prettyprint no-bg\" id=\"context-anchor\">context : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('references') }\" class=\"prettyprint no-bg\" id=\"references-anchor\">references : {[key: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providerTokens') }\" class=\"prettyprint no-bg\" id=\"providerTokens-anchor\">providerTokens : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('source') }\" class=\"prettyprint no-bg\" id=\"source-anchor\">source : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('inject') }\" class=\"prettyprint no-bg\" id=\"inject-anchor\">inject(token: any) : any</pre>\n<p>Use injector.get(token) instead.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/debug/debug_node.ts#L14-L58\">@angular/core/src/debug/debug_node.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DebugNode-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DebugNode-class.html</a>\n  </p>\n</div>\n","api/core/index/docheck-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DoCheck</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DoCheck {\n  ngDoCheck() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to supplement the default change detection algorithm in your directive.</p> <p><code>ngDoCheck</code> gets called to check the changes in the directives in addition to the default algorithm.</p> <p>The default change detection algorithm looks for differences by comparing bound-property values by reference across change detection runs.</p> <p>Note that a directive typically should not use both <code>DoCheck</code> and <a href=\"onchanges-class\"><code>OnChanges</code></a> to respond to changes on the same input. <code>ngOnChanges</code> will continue to be called when the default change detector detects changes, so it is usually unnecessary to respond to changes on the same input in both hooks. Reaction to the changes have to be handled from within the <code>ngDoCheck</code> callback.</p> <p>You can use <a href=\"keyvaluediffers-class\"><code>KeyValueDiffers</code></a> and <a href=\"iterablediffers-class\"><code>IterableDiffers</code></a> to help add your custom check mechanisms.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-qpnilf0cr2i5bcybheuj-p-preview-\">Example (<a href=\"http://plnkr.co/edit/QpnIlF0CR2i5bcYbHEUJ?p=preview\">live demo</a>)</h3> <p>In the following example <code>ngDoCheck</code> uses an <a href=\"iterablediffers-class\"><code>IterableDiffers</code></a> to detect the updates to the array <code>list</code>:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'custom-check',\n  template: `\n    &lt;p&gt;Changes:&lt;/p&gt;\n    &lt;ul&gt;\n      &lt;li *ngFor=\"let line of logs\"&gt;{{line}}&lt;/li&gt;\n    &lt;/ul&gt;`,\n  directives: [NgFor]\n})\nclass CustomCheckComponent implements DoCheck {\n  @Input() list: any[];\n  differ: any;\n  logs = [];\n\n  constructor(differs: IterableDiffers) {\n    this.differ = differs.find([]).create(null);\n  }\n\n  ngDoCheck() {\n    var changes = this.differ.diff(this.list);\n\n    if (changes) {\n      changes.forEachAddedItem(r =&gt; this.logs.push('added ' + r.item));\n      changes.forEachRemovedItem(r =&gt; this.logs.push('removed ' + r.item))\n    }\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;button (click)=\"list.push(list.length)\"&gt;Push&lt;/button&gt;\n    &lt;button (click)=\"list.pop()\"&gt;Pop&lt;/button&gt;\n    &lt;custom-check [list]=\"list\"&gt;&lt;/custom-check&gt;`,\n  directives: [CustomCheckComponent]\n})\nexport class App {\n  list = [];\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DoCheck</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngDoCheck') }\" class=\"prettyprint no-bg\" id=\"ngDoCheck-anchor\">ngDoCheck() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L133-L202\">@angular/core/src/metadata/lifecycle_hooks.ts (line 133)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DoCheck-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DoCheck-class.html</a>\n  </p>\n</div>\n","api/core/index/eventemitter-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">EventEmitter</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class EventEmitter {\n  constructor(isAsync?: boolean)\n  \n  \n  emit(value?: T)\n  next(value: any)\n  subscribe(generatorOrNext?: any, error?: any, complete?: any) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Use by directives and components to emit custom Events.</p> <h3 id=\"examples\">Examples</h3> <p>In the following example, <code>Zippy</code> alternatively emits <code>open</code> and <code>close</code> events when its title gets clicked:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'zippy',\n  template: `\n  &lt;div class=\"zippy\"&gt;\n    &lt;div (click)=\"toggle()\"&gt;Toggle&lt;/div&gt;\n    &lt;div [hidden]=\"!visible\"&gt;\n      &lt;ng-content&gt;&lt;/ng-content&gt;\n    &lt;/div&gt;\n &lt;/div&gt;`})\nexport class Zippy {\n  visible: boolean = true;\n  @Output() open: EventEmitter&lt;any&gt; = new EventEmitter();\n  @Output() close: EventEmitter&lt;any&gt; = new EventEmitter();\n\n  toggle() {\n    this.visible = !this.visible;\n    if (this.visible) {\n      this.open.emit(null);\n    } else {\n      this.close.emit(null);\n    }\n  }\n}\n</pre>\n<p>The events payload can be accessed by the parameter <code>$event</code> on the components output event handler:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"&gt;&lt;/zippy&gt;\n</pre>\n<p>Uses Rx.Observable but provides an adapter to make it work as specified here: <a href=\"https://github.com/jhusain/observable-spec\">https://github.com/jhusain/observable-spec</a></p> <p>Once a reference implementation of the spec is available, switch to it.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class EventEmitter</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(isAsync?: boolean)</pre>\n<p>Creates an instance of [EventEmitter], which depending on [isAsync], delivers events synchronously or asynchronously.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('emit') }\" class=\"prettyprint no-bg\" id=\"emit-anchor\">emit(value?: T)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('next') }\" class=\"prettyprint no-bg\" id=\"next-anchor\">next(value: any)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('subscribe') }\" class=\"prettyprint no-bg\" id=\"subscribe-anchor\">subscribe(generatorOrNext?: any, error?: any, complete?: any) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/facade/async.ts#L14-L124\">@angular/core/src/facade/async.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/EventEmitter-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/EventEmitter-class.html</a>\n  </p>\n</div>\n","api/core/index/debugelement-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DebugElement</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DebugElement {\n  constructor(nativeNode: any, parent: any, _debugInfo: RenderDebugInfo)\n  \n  \n  name : string\n  properties : {[key: string]: any}\n  attributes : {[key: string]: string}\n  classes : {[key: string]: boolean}\n  styles : {[key: string]: string}\n  childNodes : DebugNode[]\n  nativeElement : any\n  addChild(child: DebugNode)\n  removeChild(child: DebugNode)\n  insertChildrenAfter(child: DebugNode, newChildren: DebugNode[])\n  query(predicate: Predicate&lt;DebugElement&gt;) : DebugElement\n  queryAll(predicate: Predicate&lt;DebugElement&gt;) : DebugElement[]\n  queryAllNodes(predicate: Predicate&lt;DebugNode&gt;) : DebugNode[]\n  children : DebugElement[]\n  triggerEventHandler(eventName: string, eventObj: any)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DebugElement</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(nativeNode: any, parent: any, _debugInfo: RenderDebugInfo)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('properties') }\" class=\"prettyprint no-bg\" id=\"properties-anchor\">properties : {[key: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attributes') }\" class=\"prettyprint no-bg\" id=\"attributes-anchor\">attributes : {[key: string]: string}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('classes') }\" class=\"prettyprint no-bg\" id=\"classes-anchor\">classes : {[key: string]: boolean}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : {[key: string]: string}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('childNodes') }\" class=\"prettyprint no-bg\" id=\"childNodes-anchor\">childNodes : DebugNode[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nativeElement') }\" class=\"prettyprint no-bg\" id=\"nativeElement-anchor\">nativeElement : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addChild') }\" class=\"prettyprint no-bg\" id=\"addChild-anchor\">addChild(child: DebugNode)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeChild') }\" class=\"prettyprint no-bg\" id=\"removeChild-anchor\">removeChild(child: DebugNode)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('insertChildrenAfter') }\" class=\"prettyprint no-bg\" id=\"insertChildrenAfter-anchor\">insertChildrenAfter(child: DebugNode, newChildren: DebugNode[])</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('query') }\" class=\"prettyprint no-bg\" id=\"query-anchor\">query(predicate: Predicate&lt;DebugElement&gt;) : DebugElement</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryAll') }\" class=\"prettyprint no-bg\" id=\"queryAll-anchor\">queryAll(predicate: Predicate&lt;DebugElement&gt;) : DebugElement[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryAllNodes') }\" class=\"prettyprint no-bg\" id=\"queryAllNodes-anchor\">queryAllNodes(predicate: Predicate&lt;DebugNode&gt;) : DebugNode[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('children') }\" class=\"prettyprint no-bg\" id=\"children-anchor\">children : DebugElement[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('triggerEventHandler') }\" class=\"prettyprint no-bg\" id=\"triggerEventHandler-anchor\">triggerEventHandler(eventName: string, eventObj: any)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/debug/debug_node.ts#L58-L148\">@angular/core/src/debug/debug_node.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DebugElement-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DebugElement-class.html</a>\n  </p>\n</div>\n","api/core/index/defaultiterablediffer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DefaultIterableDiffer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DefaultIterableDiffer {\n  constructor(_trackByFn?: TrackByFn)\n  \n  \n  collection \n  length : number\n  forEachItem(fn: Function)\n  forEachOperation(fn: (item: CollectionChangeRecord, previousIndex: number, currentIndex: number) =&gt; void)\n  forEachPreviousItem(fn: Function)\n  forEachAddedItem(fn: Function)\n  forEachMovedItem(fn: Function)\n  forEachRemovedItem(fn: Function)\n  forEachIdentityChange(fn: Function)\n  diff(collection: any) : DefaultIterableDiffer\n  onDestroy()\n  check(collection: any) : boolean\n  isDirty : boolean\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DefaultIterableDiffer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_trackByFn?: TrackByFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('collection') }\" class=\"prettyprint no-bg\" id=\"collection-anchor\">collection</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('length') }\" class=\"prettyprint no-bg\" id=\"length-anchor\">length : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachItem') }\" class=\"prettyprint no-bg\" id=\"forEachItem-anchor\">forEachItem(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachOperation') }\" class=\"prettyprint no-bg\" id=\"forEachOperation-anchor\">forEachOperation(fn: (item: CollectionChangeRecord, previousIndex: number, currentIndex: number) =&gt; void)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachPreviousItem') }\" class=\"prettyprint no-bg\" id=\"forEachPreviousItem-anchor\">forEachPreviousItem(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachAddedItem') }\" class=\"prettyprint no-bg\" id=\"forEachAddedItem-anchor\">forEachAddedItem(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachMovedItem') }\" class=\"prettyprint no-bg\" id=\"forEachMovedItem-anchor\">forEachMovedItem(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachRemovedItem') }\" class=\"prettyprint no-bg\" id=\"forEachRemovedItem-anchor\">forEachRemovedItem(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEachIdentityChange') }\" class=\"prettyprint no-bg\" id=\"forEachIdentityChange-anchor\">forEachIdentityChange(fn: Function)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('diff') }\" class=\"prettyprint no-bg\" id=\"diff-anchor\">diff(collection: any) : DefaultIterableDiffer</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('check') }\" class=\"prettyprint no-bg\" id=\"check-anchor\">check(collection: any) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isDirty') }\" class=\"prettyprint no-bg\" id=\"isDirty-anchor\">isDirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/default_iterable_differ.ts#L25-L588\">@angular/core/src/change_detection/differs/default_iterable_differ.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DefaultIterableDiffer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DefaultIterableDiffer-class.html</a>\n  </p>\n</div>\n","api/core/index/hostbinding-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostBinding: HostBindingMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export HostBinding</pre>\n<p>Declares a host property binding.</p> <p>Angular automatically checks host property bindings during change detection. If a binding changes, it will update the host element of the directive.</p> <p><code>HostBindingMetadata</code> takes an optional parameter that specifies the property name of the host element that will be updated. When not provided, the class property name is used.</p> <h3 id=\"example\">Example</h3> <p>The following example creates a directive that sets the <code>valid</code> and <code>invalid</code> classes on the DOM element that has ngModel directive on it.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({selector: '[ngModel]'})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  @HostBinding('class.valid') get valid() { return this.control.valid; }\n  @HostBinding('class.invalid') get invalid() { return this.control.invalid; }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;input [(ngModel)]=\"prop\"&gt;`,\n  directives: [FORM_DIRECTIVES, NgModelStatus]\n})\nclass App {\n  prop;\n}\n\nbootstrap(App);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1278-L1278\">@angular/core/src/metadata.ts (line 1278)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostBinding-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostBinding-var.html</a>\n  </p>\n</div>\n","api/core/index/directivemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DirectiveMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DirectiveMetadata {\n  constructor({selector, inputs, outputs, properties, events, host, providers, exportAs,\n       queries}?: DirectiveMetadataType)\n  \n  \n  selector : string\n  inputs : string[]\n  properties : string[]\n  outputs : string[]\n  events : string[]\n  host : {[key: string]: string}\n  providers : any[]\n  exportAs : string\n  queries : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Directives allow you to attach behavior to elements in the DOM.</p> <p><a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a>s with an embedded view are called <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>s.</p> <p>A directive consists of a single directive annotation and a controller class. When the directive's <code>selector</code> matches elements in the DOM, the following steps occur:</p> <ol> <li>For each directive, the <code>ElementInjector</code> attempts to resolve the directive's constructor arguments.</li> <li>Angular instantiates directives for each matched element using <code>ElementInjector</code> in a depth-first order, as declared in the HTML.</li> </ol> <h2 id=\"understanding-how-injection-works\">Understanding How Injection Works</h2> <p>There are three stages of injection resolution.</p> <ul> <li>\n<em>Pre-existing Injectors</em>:<ul> <li>The terminal <a href=\"injector-class\"><code>Injector</code></a> cannot resolve dependencies. It either throws an error or, if the dependency was specified as <code>@Optional</code>, returns <code>null</code>.</li> <li>The platform injector resolves browser singleton resources, such as: cookies, title, location, and others.</li> </ul> </li> <li>\n<em>Component Injectors</em>: Each component instance has its own <a href=\"injector-class\"><code>Injector</code></a>, and they follow the same parent-child hierarchy as the component instances in the DOM.</li> <li>\n<em>Element Injectors</em>: Each component instance has a Shadow DOM. Within the Shadow DOM each element has an <code>ElementInjector</code> which follow the same parent-child hierarchy as the DOM elements themselves.</li> </ul> <p>When a template is instantiated, it also must instantiate the corresponding directives in a depth-first order. The current <code>ElementInjector</code> resolves the constructor dependencies for each directive.</p> <p>Angular then resolves dependencies as follows, according to the order in which they appear in the <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>:</p> <ol> <li>Dependencies on the current element</li> <li>Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary</li> <li>Dependencies on component injectors and their parents until it encounters the root component</li> <li>Dependencies on pre-existing injectors</li> </ol> <p>The <code>ElementInjector</code> can inject other directives, element-specific special objects, or it can delegate to the parent injector.</p> <p>To inject other directives, declare the constructor parameter as:</p> <ul> <li>\n<code>directive:DirectiveType</code>: a directive on the current element only</li> <li>\n<code>@Host() directive:DirectiveType</code>: any directive that matches the type between the current element and the Shadow DOM root.</li> <li>\n<code>@Query(DirectiveType) query:QueryList&lt;DirectiveType&gt;</code>: A live collection of direct child directives.</li> <li>\n<code>@QueryDescendants(DirectiveType) query:QueryList&lt;DirectiveType&gt;</code>: A live collection of any child directives.</li> </ul> <p>To inject element-specific special objects, declare the constructor parameter as:</p> <ul> <li>\n<code>element: ElementRef</code> to obtain a reference to logical element in the view.</li> <li>\n<code>viewContainer: ViewContainerRef</code> to control child template instantiation, for <a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a> directives only</li> <li>\n<code>bindingPropagation: BindingPropagation</code> to control change detection in a more granular way.</li> </ul> <h3 id=\"example\">Example</h3> <p>The following example demonstrates how dependency injection resolves constructor arguments in practice.</p> <p>Assume this HTML template:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div dependency=\"1\"&gt;\n  &lt;div dependency=\"2\"&gt;\n    &lt;div dependency=\"3\" my-directive&gt;\n      &lt;div dependency=\"4\"&gt;\n        &lt;div dependency=\"5\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div dependency=\"6\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>With the following <code>dependency</code> decorator and <code>SomeService</code> injectable class.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass SomeService {\n}\n\n@Directive({\n  selector: '[dependency]',\n  inputs: [\n    'id: dependency'\n  ]\n})\nclass Dependency {\n  id:string;\n}\n</pre>\n<p>Let's step through the different ways in which <code>MyDirective</code> could be declared...</p> <h3 id=\"no-injection\">No injection</h3> <p>Here the constructor is declared with no arguments, therefore nothing is injected into <code>MyDirective</code>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor() {\n  }\n}\n</pre>\n<p>This directive would be instantiated with no dependencies.</p> <h3 id=\"component-level-injection\">Component-level injection</h3> <p>Directives can inject any injectable instance from the closest component injector or any of its parents.</p> <p>Here, the constructor declares a parameter, <code>someService</code>, and injects the <code>SomeService</code> type from the parent component's injector.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(someService: SomeService) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a dependency on <code>SomeService</code>.</p> <h3 id=\"injecting-a-directive-from-the-current-element\">Injecting a directive from the current element</h3> <p>Directives can inject other directives declared on the current element.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(dependency: Dependency) {\n    expect(dependency.id).toEqual(3);\n  }\n}\n</pre>\n<p>This directive would be instantiated with <code>Dependency</code> declared at the same element, in this case <code>dependency=\"3\"</code>.</p> <h3 id=\"injecting-a-directive-from-any-ancestor-elements\">Injecting a directive from any ancestor elements</h3> <p>Directives can inject other directives declared on any ancestor element (in the current Shadow DOM), i.e. on the current element, the parent element, or its parents.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Host() dependency: Dependency) {\n    expect(dependency.id).toEqual(2);\n  }\n}\n</pre>\n<p><code>@Host</code> checks the current element, the parent, as well as its parents recursively. If <code>dependency=\"2\"</code> didn't exist on the direct parent, this injection would have returned <code>dependency=\"1\"</code>.</p> <h3 id=\"injecting-a-live-collection-of-direct-child-directives\">Injecting a live collection of direct child directives</h3> <p>A directive can also query for other child directives. Since parent directives are instantiated before child directives, a directive can't simply inject the list of child directives. Instead, the directive injects a <a href=\"querylist-class\"><code>QueryList</code></a>, which updates its contents as children are added, removed, or moved by a directive that uses a <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> such as a <code>ngFor</code>, an <code>ngIf</code>, or an <code>ngSwitch</code>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Query(Dependency) dependencies:QueryList&lt;Dependency&gt;) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a <a href=\"querylist-class\"><code>QueryList</code></a> which contains <code>Dependency</code> 4 and <code>Dependency</code> 6. Here, <code>Dependency</code> 5 would not be included, because it is not a direct child.</p> <h3 id=\"injecting-a-live-collection-of-descendant-directives\">Injecting a live collection of descendant directives</h3> <p>By passing the descendant flag to <code>@Query</code> above, we can include the children of the child elements.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList&lt;Dependency&gt;) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a Query which would contain <code>Dependency</code> 4, 5 and 6.</p> <h3 id=\"optional-injection\">Optional injection</h3> <p>The normal behavior of directives is to return an error when a specified dependency cannot be resolved. If you would like to inject <code>null</code> on unresolved dependency instead, you can annotate that dependency with <code>@Optional()</code>. This explicitly permits the author of a template to treat some of the surrounding directives as optional.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Optional() dependency:Dependency) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a <code>Dependency</code> directive found on the current element. If none can be found, the injector supplies <code>null</code> instead of throwing an error.</p> <h3 id=\"example\">Example</h3> <p>Here we use a decorator directive to simply define basic tool-tip behavior.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: '[tooltip]',\n  inputs: [\n    'text: tooltip'\n  ],\n  host: {\n    '(mouseenter)': 'onMouseEnter()',\n    '(mouseleave)': 'onMouseLeave()'\n  }\n})\nclass Tooltip{\n  text:string;\n  overlay:Overlay; // NOT YET IMPLEMENTED\n  overlayManager:OverlayManager; // NOT YET IMPLEMENTED\n\n  constructor(overlayManager:OverlayManager) {\n    this.overlay = overlay;\n  }\n\n  onMouseEnter() {\n    // exact signature to be determined\n    this.overlay = this.overlayManager.open(text, ...);\n  }\n\n  onMouseLeave() {\n    this.overlay.close();\n    this.overlay = null;\n  }\n}\n</pre>\n<p>In our HTML template, we can then add this behavior to a <code>&lt;div&gt;</code> or any other element with the <code>tooltip</code> selector, like so:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div tooltip=\"some text here\"&gt;&lt;/div&gt;\n</pre>\n<p>Directives can also control the instantiation, destruction, and positioning of inline template elements:</p> <p>A directive uses a <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> to instantiate, insert, move, and destroy views at runtime. The <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> is created as a result of <code>&lt;template&gt;</code> element, and represents a location in the current view where these actions are performed.</p> <p>Views are always created as children of the current <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>, and as siblings of the <code>&lt;template&gt;</code> element. Thus a directive in a child view cannot inject the directive that created it.</p> <p>Since directives that create views via ViewContainers are common in Angular, and using the full <code>&lt;template&gt;</code> element syntax is wordy, Angular also supports a shorthand notation: <code>&lt;li *foo=\"bar\"&gt;</code> and <code>&lt;li template=\"foo: bar\"&gt;</code> are equivalent.</p> <p>Thus,</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;li *foo=\"bar\" title=\"text\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Expands in use to:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;template [foo]=\"bar\"&gt;\n    &lt;li title=\"text\"&gt;&lt;/li&gt;\n  &lt;/template&gt;\n&lt;/ul&gt;\n</pre>\n<p>Notice that although the shorthand places <code>*foo=\"bar\"</code> within the <code>&lt;li&gt;</code> element, the binding for the directive controller is correctly instantiated on the <code>&lt;template&gt;</code> element rather than the <code>&lt;li&gt;</code> element.</p> <h2 id=\"lifecycle-hooks\">Lifecycle hooks</h2> <p>When the directive class implements some <a href=\"../../../guide/lifecycle-hooks\">Lifecycle Hooks</a> the callbacks are called by the change detection at defined points in time during the life of the directive.</p> <h3 id=\"example\">Example</h3> <p>Let's suppose we want to implement the <code>unless</code> behavior, to conditionally include a template.</p> <p>Here is a simple directive that triggers on an <code>unless</code> selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: '[unless]',\n  inputs: ['unless']\n})\nexport class Unless {\n  viewContainer: ViewContainerRef;\n  templateRef: TemplateRef;\n  prevCondition: boolean;\n\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.prevCondition = null;\n  }\n\n  set unless(newCondition) {\n    if (newCondition &amp;&amp; (isBlank(this.prevCondition) || !this.prevCondition)) {\n      this.prevCondition = true;\n      this.viewContainer.clear();\n    } else if (!newCondition &amp;&amp; (isBlank(this.prevCondition) || this.prevCondition)) {\n      this.prevCondition = false;\n      this.viewContainer.create(this.templateRef);\n    }\n  }\n}\n</pre>\n<p>We can then use this <code>unless</code> selector in a template:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;li *unless=\"expr\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Once the directive instantiates the child view, the shorthand notation for the template expands and the result is:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;template [unless]=\"exp\"&gt;\n    &lt;li&gt;&lt;/li&gt;\n  &lt;/template&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Note also that although the <code>&lt;li&gt;&lt;/li&gt;</code> template still exists inside the <code>&lt;template&gt;&lt;/template&gt;</code>, the instantiated view occurs on the second <code>&lt;li&gt;&lt;/li&gt;</code> which is a sibling to the <code>&lt;template&gt;</code> element.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DirectiveMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({selector, inputs, outputs, properties, events, host, providers, exportAs,\n       queries}?: DirectiveMetadataType)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('selector') }\" class=\"prettyprint no-bg\" id=\"selector-anchor\">selector : string</pre>\n<p>The CSS selector that triggers the instantiation of a directive.</p> <p>Angular only allows directives to trigger on CSS selectors that do not cross element boundaries.</p> <p><code>selector</code> may be declared as one of the following:</p> <ul> <li>\n<code>element-name</code>: select by element name.</li> <li>\n<code>.class</code>: select by class name.</li> <li>\n<code>[attribute]</code>: select by attribute name.</li> <li>\n<code>[attribute=value]</code>: select by attribute name and value.</li> <li>\n<code>:not(sub_selector)</code>: select only if the element does not match the <code>sub_selector</code>.</li> <li>\n<code>selector1, selector2</code>: select if either <code>selector1</code> or <code>selector2</code> matches.</li> </ul> <p>Suppose we have a directive with an <code>input[type=text]</code> selector.</p> <p>And the following HTML:</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;form&gt;\n  &lt;input type=\"text\"&gt;\n  &lt;input type=\"radio\"&gt;\n&lt;form&gt;\n</pre>\n<p>The directive would only be instantiated on the <code>&lt;input type=\"text\"&gt;</code> element.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('inputs') }\" class=\"prettyprint no-bg\" id=\"inputs-anchor\">inputs : string[]</pre>\n<p>Enumerates the set of data-bound input properties for a directive</p> <p>Angular automatically updates input properties during change detection.</p> <p>The <code>inputs</code> property defines a set of <code>directiveProperty</code> to <code>bindingProperty</code> configuration:</p> <ul> <li>\n<code>directiveProperty</code> specifies the component property where the value is written.</li> <li>\n<code>bindingProperty</code> specifies the DOM property where the value is read from.</li> </ul> <p>When <code>bindingProperty</code> is not provided, it is assumed to be equal to <code>directiveProperty</code>.</p> <p> (<a href=\"http://plnkr.co/edit/ivhfXY?p=preview\">live demo</a>)</p> <p>The following example creates a component with two data-bound properties.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'bank-account',\n  inputs: ['bankName', 'id: account-id'],\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  bankName: string;\n  id: string;\n\n  // this property is not bound, and won't be automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;bank-account bank-name=\"RBC\" account-id=\"4747\"&gt;&lt;/bank-account&gt;\n  `,\n  directives: [BankAccount]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('properties') }\" class=\"prettyprint no-bg\" id=\"properties-anchor\">properties : string[]</pre>\n<p>Use <code>inputs</code> instead</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outputs') }\" class=\"prettyprint no-bg\" id=\"outputs-anchor\">outputs : string[]</pre>\n<p>Enumerates the set of event-bound output properties.</p> <p>When an output property emits an event, an event handler attached to that event the template is invoked.</p> <p>The <code>outputs</code> property defines a set of <code>directiveProperty</code> to <code>bindingProperty</code> configuration:</p> <ul> <li>\n<code>directiveProperty</code> specifies the component property that emits events.</li> <li>\n<p><code>bindingProperty</code> specifies the DOM property the event handler is attached to.</p> <p>(<a href=\"http://plnkr.co/edit/d5CNq7?p=preview\">live demo</a>)</p> </li> </ul> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: 'interval-dir',\n  outputs: ['everySecond', 'five5Secs: everyFiveSeconds']\n})\nclass IntervalDir {\n  everySecond = new EventEmitter();\n  five5Secs = new EventEmitter();\n\n  constructor() {\n    setInterval(() =&gt; this.everySecond.emit(\"event\"), 1000);\n    setInterval(() =&gt; this.five5Secs.emit(\"event\"), 5000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\"&gt;\n    &lt;/interval-dir&gt;\n  `,\n  directives: [IntervalDir]\n})\nclass App {\n  everySecond() { console.log('second'); }\n  everyFiveSeconds() { console.log('five seconds'); }\n}\nbootstrap(App);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('events') }\" class=\"prettyprint no-bg\" id=\"events-anchor\">events : string[]</pre>\n<p>Use <code>outputs</code> instead</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('host') }\" class=\"prettyprint no-bg\" id=\"host-anchor\">host : {[key: string]: string}</pre>\n<p>Specify the events, actions, properties and attributes related to the host element.</p> <h2 id=\"host-listeners\">Host Listeners</h2> <p>Specifies which DOM events a directive listens to via a set of <code>(event)</code> to <code>method</code> key-value pairs:</p> <ul> <li>\n<code>event</code>: the DOM event that the directive listens to.</li> <li>\n<code>statement</code>: the statement to execute when the event occurs. If the evaluation of the statement returns <code>false</code>, then <code>preventDefault</code>is applied on the DOM event.</li> </ul> <p>To listen to global events, a target must be added to the event name. The target can be <code>window</code>, <code>document</code> or <code>body</code>.</p> <p>When writing a directive event binding, you can also refer to the $event local variable.</p> <p> (<a href=\"http://plnkr.co/edit/DlA5KU?p=preview\">live demo</a>)</p> <p>The following example declares a directive that attaches a click listener to the button and counts clicks.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: 'button[counting]',\n  host: {\n    '(click)': 'onClick($event.target)'\n  }\n})\nclass CountClicks {\n  numberOfClicks = 0;\n\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;button counting&gt;Increment&lt;/button&gt;`,\n  directives: [CountClicks]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n<h2 id=\"host-property-bindings\">Host Property Bindings</h2> <p>Specifies which DOM properties a directive updates.</p> <p>Angular automatically checks host property bindings during change detection. If a binding changes, it will update the host element of the directive.</p> <p> (<a href=\"http://plnkr.co/edit/gNg0ED?p=preview\">live demo</a>)</p> <p>The following example creates a directive that sets the <code>valid</code> and <code>invalid</code> classes on the DOM element that has ngModel directive on it.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: '[ngModel]',\n  host: {\n    '[class.valid]': 'valid',\n    '[class.invalid]': 'invalid'\n  }\n})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  get valid { return this.control.valid; }\n  get invalid { return this.control.invalid; }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;input [(ngModel)]=\"prop\"&gt;`,\n  directives: [FORM_DIRECTIVES, NgModelStatus]\n})\nclass App {\n  prop;\n}\n\nbootstrap(App);\n</pre>\n<h2 id=\"attributes\">Attributes</h2> <p>Specifies static attributes that should be propagated to a host element.</p> <p>In this example using <code>my-button</code> directive (ex.: <code>&lt;div my-button&gt;&lt;/div&gt;</code>) on a host element (here: <code>&lt;div&gt;</code> ) will ensure that this element will get the \"button\" role.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: '[my-button]',\n  host: {\n    'role': 'button'\n  }\n})\nclass MyButton {\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : any[]</pre>\n<p>Defines the set of injectable objects that are visible to a Directive and its light DOM children.</p> <h2 id=\"simple-example\">Simple Example</h2> <p>Here is an example of a class that can be injected:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@Directive({\n  selector: 'greet',\n  providers: [\n    Greeter\n  ]\n})\nclass HelloWorld {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exportAs') }\" class=\"prettyprint no-bg\" id=\"exportAs-anchor\">exportAs : string</pre>\n<p>Defines the name that can be used in the template to assign this directive to a variable.</p> <h2 id=\"simple-example\">Simple Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: 'child-dir',\n  exportAs: 'child'\n})\nclass ChildDir {\n}\n\n@Component({\n  selector: 'main',\n  template: `&lt;child-dir #c=\"child\"&gt;&lt;/child-dir&gt;`,\n  directives: [ChildDir]\n})\nclass MainComponent {\n}\n\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queries') }\" class=\"prettyprint no-bg\" id=\"queries-anchor\">queries : {[key: string]: any}</pre>\n<p>Configures the queries that will be injected into the directive.</p> <p>Content queries are set before the <code>ngAfterContentInit</code> callback is called. View queries are set before the <code>ngAfterViewInit</code> callback is called.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'someDir',\n  queries: {\n    contentChildren: new ContentChildren(ChildDirective),\n    viewChildren: new ViewChildren(ChildDirective)\n  },\n  template: '&lt;child-directive&gt;&lt;/child-directive&gt;',\n  directives: [ChildDirective]\n})\nclass SomeDir {\n  contentChildren: QueryList&lt;ChildDirective&gt;,\n  viewChildren: QueryList&lt;ChildDirective&gt;\n\n  ngAfterContentInit() {\n    // contentChildren is set\n  }\n\n  ngAfterViewInit() {\n    // viewChildren is set\n  }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L30-L780\">@angular/core/src/metadata/directives.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DirectiveMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/gettestability-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">GetTestability</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class GetTestability {\n  addToWindow(registry: TestabilityRegistry) : void\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean) : Testability\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Adapter interface for retrieving the <code>Testability</code> service associated for a particular context.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface GetTestability</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addToWindow') }\" class=\"prettyprint no-bg\" id=\"addToWindow-anchor\">addToWindow(registry: TestabilityRegistry) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('findTestabilityInTree') }\" class=\"prettyprint no-bg\" id=\"findTestabilityInTree-anchor\">findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean) : Testability</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/testability/testability.ts#L139-L152\">@angular/core/src/testability/testability.ts (line 139)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/GetTestability-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/GetTestability-interface.html</a>\n  </p>\n</div>\n","api/core/index/hostlistener-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostListener: HostListenerMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export HostListener</pre>\n<p>Declares a host listener.</p> <p>Angular will invoke the decorated method when the host element emits the specified event.</p> <p>If the decorated method returns <code>false</code>, then <code>preventDefault</code> is applied on the DOM event.</p> <h3 id=\"example\">Example</h3> <p>The following example declares a directive that attaches a click listener to the button and counts clicks.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({selector: 'button[counting]'})\nclass CountClicks {\n  numberOfClicks = 0;\n\n  @HostListener('click', ['$event.target'])\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;button counting&gt;Increment&lt;/button&gt;`,\n  directives: [CountClicks]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1317-L1317\">@angular/core/src/metadata.ts (line 1317)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostListener-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostListener-var.html</a>\n  </p>\n</div>\n","api/core/index/directive-decorator":"<h1 class=\"hero-title text-display-1 is-standard-case\">Directive: DirectiveMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Decorator</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Directive(options : DirectiveMetadata) : DirectiveMetadataFactory</pre>\n<p>Directives allow you to attach behavior to elements in the DOM.</p> <p><a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a>s with an embedded view are called <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>s.</p> <p>A directive consists of a single directive annotation and a controller class. When the directive's <code>selector</code> matches elements in the DOM, the following steps occur:</p> <ol> <li>For each directive, the <code>ElementInjector</code> attempts to resolve the directive's constructor arguments.</li> <li>Angular instantiates directives for each matched element using <code>ElementInjector</code> in a depth-first order, as declared in the HTML.</li> </ol> <h2 id=\"understanding-how-injection-works\">Understanding How Injection Works</h2> <p>There are three stages of injection resolution.</p> <ul> <li>\n<em>Pre-existing Injectors</em>:<ul> <li>The terminal <a href=\"injector-class\"><code>Injector</code></a> cannot resolve dependencies. It either throws an error or, if the dependency was specified as <code>@Optional</code>, returns <code>null</code>.</li> <li>The platform injector resolves browser singleton resources, such as: cookies, title, location, and others.</li> </ul> </li> <li>\n<em>Component Injectors</em>: Each component instance has its own <a href=\"injector-class\"><code>Injector</code></a>, and they follow the same parent-child hierarchy as the component instances in the DOM.</li> <li>\n<em>Element Injectors</em>: Each component instance has a Shadow DOM. Within the Shadow DOM each element has an <code>ElementInjector</code> which follow the same parent-child hierarchy as the DOM elements themselves.</li> </ul> <p>When a template is instantiated, it also must instantiate the corresponding directives in a depth-first order. The current <code>ElementInjector</code> resolves the constructor dependencies for each directive.</p> <p>Angular then resolves dependencies as follows, according to the order in which they appear in the <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>:</p> <ol> <li>Dependencies on the current element</li> <li>Dependencies on element injectors and their parents until it encounters a Shadow DOM boundary</li> <li>Dependencies on component injectors and their parents until it encounters the root component</li> <li>Dependencies on pre-existing injectors</li> </ol> <p>The <code>ElementInjector</code> can inject other directives, element-specific special objects, or it can delegate to the parent injector.</p> <p>To inject other directives, declare the constructor parameter as:</p> <ul> <li>\n<code>directive:DirectiveType</code>: a directive on the current element only</li> <li>\n<code>@Host() directive:DirectiveType</code>: any directive that matches the type between the current element and the Shadow DOM root.</li> <li>\n<code>@Query(DirectiveType) query:QueryList&lt;DirectiveType&gt;</code>: A live collection of direct child directives.</li> <li>\n<code>@QueryDescendants(DirectiveType) query:QueryList&lt;DirectiveType&gt;</code>: A live collection of any child directives.</li> </ul> <p>To inject element-specific special objects, declare the constructor parameter as:</p> <ul> <li>\n<code>element: ElementRef</code> to obtain a reference to logical element in the view.</li> <li>\n<code>viewContainer: ViewContainerRef</code> to control child template instantiation, for <a href=\"directivemetadata-class\"><code>DirectiveMetadata</code></a> directives only</li> <li>\n<code>bindingPropagation: BindingPropagation</code> to control change detection in a more granular way.</li> </ul> <h3 id=\"example\">Example</h3> <p>The following example demonstrates how dependency injection resolves constructor arguments in practice.</p> <p>Assume this HTML template:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div dependency=\"1\"&gt;\n  &lt;div dependency=\"2\"&gt;\n    &lt;div dependency=\"3\" my-directive&gt;\n      &lt;div dependency=\"4\"&gt;\n        &lt;div dependency=\"5\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n      &lt;div dependency=\"6\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</pre>\n<p>With the following <code>dependency</code> decorator and <code>SomeService</code> injectable class.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass SomeService {\n}\n\n@Directive({\n  selector: '[dependency]',\n  inputs: [\n    'id: dependency'\n  ]\n})\nclass Dependency {\n  id:string;\n}\n</pre>\n<p>Let's step through the different ways in which <code>MyDirective</code> could be declared...</p> <h3 id=\"no-injection\">No injection</h3> <p>Here the constructor is declared with no arguments, therefore nothing is injected into <code>MyDirective</code>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor() {\n  }\n}\n</pre>\n<p>This directive would be instantiated with no dependencies.</p> <h3 id=\"component-level-injection\">Component-level injection</h3> <p>Directives can inject any injectable instance from the closest component injector or any of its parents.</p> <p>Here, the constructor declares a parameter, <code>someService</code>, and injects the <code>SomeService</code> type from the parent component's injector.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(someService: SomeService) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a dependency on <code>SomeService</code>.</p> <h3 id=\"injecting-a-directive-from-the-current-element\">Injecting a directive from the current element</h3> <p>Directives can inject other directives declared on the current element.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(dependency: Dependency) {\n    expect(dependency.id).toEqual(3);\n  }\n}\n</pre>\n<p>This directive would be instantiated with <code>Dependency</code> declared at the same element, in this case <code>dependency=\"3\"</code>.</p> <h3 id=\"injecting-a-directive-from-any-ancestor-elements\">Injecting a directive from any ancestor elements</h3> <p>Directives can inject other directives declared on any ancestor element (in the current Shadow DOM), i.e. on the current element, the parent element, or its parents.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Host() dependency: Dependency) {\n    expect(dependency.id).toEqual(2);\n  }\n}\n</pre>\n<p><code>@Host</code> checks the current element, the parent, as well as its parents recursively. If <code>dependency=\"2\"</code> didn't exist on the direct parent, this injection would have returned <code>dependency=\"1\"</code>.</p> <h3 id=\"injecting-a-live-collection-of-direct-child-directives\">Injecting a live collection of direct child directives</h3> <p>A directive can also query for other child directives. Since parent directives are instantiated before child directives, a directive can't simply inject the list of child directives. Instead, the directive injects a <a href=\"querylist-class\"><code>QueryList</code></a>, which updates its contents as children are added, removed, or moved by a directive that uses a <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> such as a <code>ngFor</code>, an <code>ngIf</code>, or an <code>ngSwitch</code>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Query(Dependency) dependencies:QueryList&lt;Dependency&gt;) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a <a href=\"querylist-class\"><code>QueryList</code></a> which contains <code>Dependency</code> 4 and</p> <ol> <li>Here, <code>Dependency</code> 5 would not be included, because it is not a direct child.</li> </ol> <h3 id=\"injecting-a-live-collection-of-descendant-directives\">Injecting a live collection of descendant directives</h3> <p>By passing the descendant flag to <code>@Query</code> above, we can include the children of the child elements.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Query(Dependency, {descendants: true}) dependencies:QueryList&lt;Dependency&gt;) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a Query which would contain <code>Dependency</code> 4, 5 and 6.</p> <h3 id=\"optional-injection\">Optional injection</h3> <p>The normal behavior of directives is to return an error when a specified dependency cannot be resolved. If you would like to inject <code>null</code> on unresolved dependency instead, you can annotate that dependency with <code>@Optional()</code>. This explicitly permits the author of a template to treat some of the surrounding directives as optional.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({ selector: '[my-directive]' })\nclass MyDirective {\n  constructor(@Optional() dependency:Dependency) {\n  }\n}\n</pre>\n<p>This directive would be instantiated with a <code>Dependency</code> directive found on the current element. If none can be found, the injector supplies <code>null</code> instead of throwing an error.</p> <h3 id=\"example\">Example</h3> <p>Here we use a decorator directive to simply define basic tool-tip behavior.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: '[tooltip]',\n  inputs: [\n    'text: tooltip'\n  ],\n  host: {\n    '(mouseenter)': 'onMouseEnter()',\n    '(mouseleave)': 'onMouseLeave()'\n  }\n})\nclass Tooltip{\n  text:string;\n  overlay:Overlay; // NOT YET IMPLEMENTED\n  overlayManager:OverlayManager; // NOT YET IMPLEMENTED\n\n  constructor(overlayManager:OverlayManager) {\n    this.overlayManager = overlayManager;\n  }\n\n  onMouseEnter() {\n    // exact signature to be determined\n    this.overlay = this.overlayManager.open(text, ...);\n  }\n\n  onMouseLeave() {\n    this.overlay.close();\n    this.overlay = null;\n  }\n}\n</pre>\n<p>In our HTML template, we can then add this behavior to a <code>&lt;div&gt;</code> or any other element with the <code>tooltip</code> selector, like so:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div tooltip=\"some text here\"&gt;&lt;/div&gt;\n</pre>\n<p>Directives can also control the instantiation, destruction, and positioning of inline template elements:</p> <p>A directive uses a <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> to instantiate, insert, move, and destroy views at runtime. The <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a> is created as a result of <code>&lt;template&gt;</code> element, and represents a location in the current view where these actions are performed.</p> <p>Views are always created as children of the current <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>, and as siblings of the <code>&lt;template&gt;</code> element. Thus a directive in a child view cannot inject the directive that created it.</p> <p>Since directives that create views via ViewContainers are common in Angular, and using the full <code>&lt;template&gt;</code> element syntax is wordy, Angular also supports a shorthand notation: <code>&lt;li *foo=\"bar\"&gt;</code> and <code>&lt;li template=\"foo: bar\"&gt;</code> are equivalent.</p> <p>Thus,</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;li *foo=\"bar\" title=\"text\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Expands in use to:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;template [foo]=\"bar\"&gt;\n    &lt;li title=\"text\"&gt;&lt;/li&gt;\n  &lt;/template&gt;\n&lt;/ul&gt;\n</pre>\n<p>Notice that although the shorthand places <code>*foo=\"bar\"</code> within the <code>&lt;li&gt;</code> element, the binding for the directive controller is correctly instantiated on the <code>&lt;template&gt;</code> element rather than the <code>&lt;li&gt;</code> element.</p> <h2 id=\"lifecycle-hooks\">Lifecycle hooks</h2> <p>When the directive class implements some <a href=\"../../../guide/lifecycle-hooks\">Lifecycle Hooks</a> the callbacks are called by the change detection at defined points in time during the life of the directive.</p> <h3 id=\"example\">Example</h3> <p>Let's suppose we want to implement the <code>unless</code> behavior, to conditionally include a template.</p> <p>Here is a simple directive that triggers on an <code>unless</code> selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Directive({\n  selector: '[unless]',\n  inputs: ['unless']\n})\nexport class Unless {\n  viewContainer: ViewContainerRef;\n  templateRef: TemplateRef;\n  prevCondition: boolean;\n\n  constructor(viewContainer: ViewContainerRef, templateRef: TemplateRef) {\n    this.viewContainer = viewContainer;\n    this.templateRef = templateRef;\n    this.prevCondition = null;\n  }\n\n  set unless(newCondition) {\n    if (newCondition &amp;&amp; (isBlank(this.prevCondition) || !this.prevCondition)) {\n      this.prevCondition = true;\n      this.viewContainer.clear();\n    } else if (!newCondition &amp;&amp; (isBlank(this.prevCondition) || this.prevCondition)) {\n      this.prevCondition = false;\n      this.viewContainer.create(this.templateRef);\n    }\n  }\n}\n</pre>\n<p>We can then use this <code>unless</code> selector in a template:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;li *unless=\"expr\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Once the directive instantiates the child view, the shorthand notation for the template expands and the result is:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;ul&gt;\n  &lt;template [unless]=\"exp\"&gt;\n    &lt;li&gt;&lt;/li&gt;\n  &lt;/template&gt;\n  &lt;li&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>Note also that although the <code>&lt;li&gt;&lt;/li&gt;</code> template still exists inside the <code>&lt;template&gt;&lt;/template&gt;</code>, the instantiated view occurs on the second <code>&lt;li&gt;&lt;/li&gt;</code> which is a sibling to the <code>&lt;template&gt;</code> element.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L741-L742\">@angular/core/src/metadata.ts (line 741)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Directive-decorator.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Directive-decorator.html</a>\n  </p>\n</div>\n","api/core/index/host-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Host: HostMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Host</pre>\n<p>Factory for creating <a href=\"hostmetadata-class\"><code>HostMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L102-L102\">@angular/core/src/di/decorators.ts (line 102)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Host-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Host-var.html</a>\n  </p>\n</div>\n","api/core/index/hostbindingmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostBindingMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostBindingMetadata {\n  constructor(hostPropertyName?: string)\n  \n  \n  hostPropertyName : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares a host property binding.</p> <p>Angular automatically checks host property bindings during change detection. If a binding changes, it will update the host element of the directive.</p> <p><code>HostBindingMetadata</code> takes an optional parameter that specifies the property name of the host element that will be updated. When not provided, the class property name is used.</p> <h3 id=\"example\">Example</h3> <p>The following example creates a directive that sets the <code>valid</code> and <code>invalid</code> classes on the DOM element that has ngModel directive on it.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({selector: '[ngModel]'})\nclass NgModelStatus {\n  constructor(public control:NgModel) {}\n  @HostBinding('class.valid') get valid { return this.control.valid; }\n  @HostBinding('class.invalid') get invalid { return this.control.invalid; }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;input [(ngModel)]=\"prop\"&gt;`,\n  directives: [FORM_DIRECTIVES, NgModelStatus]\n})\nclass App {\n  prop;\n}\n\nbootstrap(App);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HostBindingMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(hostPropertyName?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hostPropertyName') }\" class=\"prettyprint no-bg\" id=\"hostPropertyName-anchor\">hostPropertyName : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1204-L1244\">@angular/core/src/metadata/directives.ts (line 1204)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostBindingMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostBindingMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/hostbindingmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostBindingMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostBindingMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"hostbindingmetadata-class\"><code>HostBindingMetadata</code></a> factory function.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface HostBindingMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L298-L307\">@angular/core/src/metadata.ts (line 298)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostBindingMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostBindingMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/hostlistenermetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostListenerMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostListenerMetadata {\n  constructor(eventName: string, args?: string[])\n  \n  \n  eventName : string\n  args : string[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares a host listener.</p> <p>Angular will invoke the decorated method when the host element emits the specified event.</p> <p>If the decorated method returns <code>false</code>, then <code>preventDefault</code> is applied on the DOM event.</p> <h3 id=\"example\">Example</h3> <p>The following example declares a directive that attaches a click listener to the button and counts clicks.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({selector: 'button[counting]'})\nclass CountClicks {\n  numberOfClicks = 0;\n\n  @HostListener('click', ['$event.target'])\n  onClick(btn) {\n    console.log(\"button\", btn, \"number of clicks:\", this.numberOfClicks++);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `&lt;button counting&gt;Increment&lt;/button&gt;`,\n  directives: [CountClicks]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HostListenerMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(eventName: string, args?: string[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('eventName') }\" class=\"prettyprint no-bg\" id=\"eventName-anchor\">eventName : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('args') }\" class=\"prettyprint no-bg\" id=\"args-anchor\">args : string[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1244-L1283\">@angular/core/src/metadata/directives.ts (line 1244)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostListenerMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostListenerMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/hostlistenermetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostListenerMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostListenerMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"hostlistenermetadata-class\"><code>HostListenerMetadata</code></a> factory function.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface HostListenerMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L307-L316\">@angular/core/src/metadata.ts (line 307)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostListenerMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostListenerMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/hostmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"hostmetadata-class\"><code>HostMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface HostMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L48-L57\">@angular/core/src/di/decorators.ts (line 48)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/injectmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InjectMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InjectMetadata {\n  constructor(token: any)\n  \n  \n  token : any\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A parameter metadata that specifies a dependency.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-6uhyjk-p-preview-\">Example (<a href=\"http://plnkr.co/edit/6uHYJK?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Engine {}\n\n@Injectable()\nclass Car {\n  engine;\n  constructor(@Inject(\"MyEngine\") engine:Engine) {\n    this.engine = engine;\n  }\n}\n\nvar injector = Injector.resolveAndCreate([\n {provide: \"MyEngine\", useClass: Engine},\n Car\n]);\n\nexpect(injector.get(Car).engine instanceof Engine).toBe(true);\n</pre>\n<p>When <code>@Inject()</code> is not present, <a href=\"injector-class\"><code>Injector</code></a> will use the type annotation of the parameter.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Engine {}\n\n@Injectable()\nclass Car {\n  constructor(public engine: Engine) {} //same as constructor(@Inject(Engine) engine:Engine)\n}\n\nvar injector = Injector.resolveAndCreate([Engine, Car]);\nexpect(injector.get(Car).engine instanceof Engine).toBe(true);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InjectMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(token: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('token') }\" class=\"prettyprint no-bg\" id=\"token-anchor\">token : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L9-L55\">@angular/core/src/di/metadata.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InjectMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InjectMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/injectablemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InjectableMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InjectableMetadata {\n  constructor()\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A marker metadata that marks a class as available to <a href=\"injector-class\"><code>Injector</code></a> for creation.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-wk4dmq-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Wk4DMQ?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass UsefulService {}\n\n@Injectable()\nclass NeedsService {\n  constructor(public service:UsefulService) {}\n}\n\nvar injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\nexpect(injector.get(NeedsService).service instanceof UsefulService).toBe(true);\n</pre>\n<p><a href=\"injector-class\"><code>Injector</code></a> will throw <a href=\"noannotationerror-class\"><code>NoAnnotationError</code></a> when trying to instantiate a class that does not have <code>@Injectable</code> marker, as shown in the example below.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class UsefulService {}\n\nclass NeedsService {\n  constructor(public service:UsefulService) {}\n}\n\nvar injector = Injector.resolveAndCreate([NeedsService, UsefulService]);\nexpect(() =&gt; injector.get(NeedsService)).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InjectableMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L90-L126\">@angular/core/src/di/metadata.ts (line 90)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InjectableMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InjectableMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/injectablemetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">InjectableMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InjectableMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"injectablemetadata-class\"><code>InjectableMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface InjectableMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L30-L39\">@angular/core/src/di/decorators.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InjectableMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InjectableMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/injector-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Injector</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Injector {\n  THROW_IF_NOT_FOUND : _THROW_IF_NOT_FOUND\n  NULL : Injector\n  get(token: any, notFoundValue?: any) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Injector</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('THROW_IF_NOT_FOUND') }\" class=\"prettyprint no-bg\" id=\"THROW_IF_NOT_FOUND-anchor\">THROW_IF_NOT_FOUND : _THROW_IF_NOT_FOUND</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('NULL') }\" class=\"prettyprint no-bg\" id=\"NULL-anchor\">NULL : Injector</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(token: any, notFoundValue?: any) : any</pre>\n<p>Retrieves an instance from the injector based on the provided token. If not found:</p> <ul> <li>Throws <a href=\"noprovidererror-class\"><code>NoProviderError</code></a> if no <code>notFoundValue</code> that is not equal to Injector.THROW_IF_NOT_FOUND is given</li> <li>\n<p>Returns the <code>notFoundValue</code> otherwise</p> <p>(<a href=\"http://plnkr.co/edit/HeXSHg?p=preview\">live demo</a>)</p> </li> </ul> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = ReflectiveInjector.resolveAndCreate([\n  {provide: \"validToken\", useValue: \"Value\"}\n]);\nexpect(injector.get(\"validToken\")).toEqual(\"Value\");\nexpect(() =&gt; injector.get(\"invalidToken\")).toThrowError();\n</pre>\n<p><code>Injector</code> returns itself when given <code>Injector</code> as a token.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = ReflectiveInjector.resolveAndCreate([]);\nexpect(injector.get(Injector)).toBe(injector);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/injector.ts#L22-L56\">@angular/core/src/di/injector.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Injector-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Injector-class.html</a>\n  </p>\n</div>\n","api/core/index/input-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Input: InputMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Input</pre>\n<p>Declares a data-bound input property.</p> <p>Angular automatically updates data-bound properties during change detection.</p> <p><code>InputMetadata</code> takes an optional parameter that specifies the name used when instantiating a component in the template. When not provided, the name of the decorated property is used.</p> <h3 id=\"example\">Example</h3> <p>The following example creates a component with two input properties.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'bank-account',\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  @Input() bankName: string;\n  @Input('account-id') id: string;\n\n  // this property is not bound, and won't be automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;bank-account bank-name=\"RBC\" account-id=\"4747\"&gt;&lt;/bank-account&gt;\n  `,\n  directives: [BankAccount]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1192-L1192\">@angular/core/src/metadata.ts (line 1192)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Input-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Input-var.html</a>\n  </p>\n</div>\n","api/core/index/injectable-decorator":"<h1 class=\"hero-title text-display-1 is-standard-case\">Injectable: InjectableMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Decorator</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Injectable(options : InjectableMetadata) : InjectableMetadataFactory</pre>\n<p>Factory for creating <a href=\"injectablemetadata-class\"><code>InjectableMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L87-L88\">@angular/core/src/di/decorators.ts (line 87)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Injectable-decorator.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Injectable-decorator.html</a>\n  </p>\n</div>\n","api/core/index/inputmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">InputMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InputMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"inputmetadata-class\"><code>InputMetadata</code></a> factory for creating decorators.</p> <p>See <a href=\"inputmetadata-class\"><code>InputMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface InputMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L276-L287\">@angular/core/src/metadata.ts (line 276)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InputMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InputMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/instantiationerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InstantiationError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InstantiationError {\n  constructor(injector: ReflectiveInjector, originalException: any, originalStack: any, key: ReflectiveKey)\n  \n  \n  addKey(injector: ReflectiveInjector, key: ReflectiveKey) : void\n  wrapperMessage : string\n  causeKey : ReflectiveKey\n  context \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when a constructing type returns with an Error.</p> <p>The <code>InstantiationError</code> class contains the original error plus the dependency graph which caused this object to be instantiated.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-7awydcqtqsp0enqeduaf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/7aWYdcqTQsP0eNqEdUAf?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class A {\n  constructor() {\n    throw new Error('message');\n  }\n}\n\nvar injector = Injector.resolveAndCreate([A]);\n\ntry {\n  injector.get(A);\n} catch (e) {\n  expect(e instanceof InstantiationError).toBe(true);\n  expect(e.originalException.message).toEqual(\"message\");\n  expect(e.originalStack).toBeDefined();\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InstantiationError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(injector: ReflectiveInjector, originalException: any, originalStack: any, key: ReflectiveKey)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addKey') }\" class=\"prettyprint no-bg\" id=\"addKey-anchor\">addKey(injector: ReflectiveInjector, key: ReflectiveKey) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('wrapperMessage') }\" class=\"prettyprint no-bg\" id=\"wrapperMessage-anchor\">wrapperMessage : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('causeKey') }\" class=\"prettyprint no-bg\" id=\"causeKey-anchor\">causeKey : ReflectiveKey</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('context') }\" class=\"prettyprint no-bg\" id=\"context-anchor\">context</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L122-L179\">@angular/core/src/di/reflective_exceptions.ts (line 122)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InstantiationError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InstantiationError-class.html</a>\n  </p>\n</div>\n","api/core/index/expressionchangedafterithasbeencheckedexception-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ExpressionChangedAfterItHasBeenCheckedException</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ExpressionChangedAfterItHasBeenCheckedException {\n  constructor(oldValue: any, currValue: any, context: any)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An error thrown if application changes model breaking the top-down data flow.</p> <p>This exception is only thrown in dev mode.</p>  <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'parent',\n  template: `\n    &lt;child [prop]=\"parentProp\"&gt;&lt;/child&gt;\n  `,\n  directives: [forwardRef(() =&gt; Child)]\n})\nclass Parent {\n  parentProp = \"init\";\n}\n\n@Directive({selector: 'child', inputs: ['prop']})\nclass Child {\n  constructor(public parent: Parent) {}\n\n  set prop(v) {\n    // this updates the parent property, which is disallowed during change detection\n    // this will result in ExpressionChangedAfterItHasBeenCheckedException\n    this.parent.parentProp = \"updated\";\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ExpressionChangedAfterItHasBeenCheckedException</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(oldValue: any, currValue: any, context: any)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/exceptions.ts#L10-L58\">@angular/core/src/linker/exceptions.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ExpressionChangedAfterItHasBeenCheckedException-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ExpressionChangedAfterItHasBeenCheckedException-class.html</a>\n  </p>\n</div>\n","api/core/index/forwardreffn-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ForwardRefFn</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ForwardRefFn {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface that a function passed into <a href=\"forwardref-function\"><code>forwardRef</code></a> has to implement.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">var ref = forwardRef(() =&gt; Lock);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ForwardRefFn</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/forward_ref.ts#L9-L20\">@angular/core/src/di/forward_ref.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ForwardRefFn-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ForwardRefFn-interface.html</a>\n  </p>\n</div>\n","api/core/index/iterablediffer-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">IterableDiffer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class IterableDiffer {\n  diff(object: any) : any\n  onDestroy() : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A strategy for tracking changes over time to an iterable. Used for <a href=\"../../common/index/ngfor-directive\"><code>NgFor</code></a> to respond to changes in an iterable by effecting equivalent changes in the DOM.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface IterableDiffer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('diff') }\" class=\"prettyprint no-bg\" id=\"diff-anchor\">diff(object: any) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy() : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/iterable_differs.ts#L13-L25\">@angular/core/src/change_detection/differs/iterable_differs.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/IterableDiffer-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/IterableDiffer-interface.html</a>\n  </p>\n</div>\n","api/core/index/iterablediffers-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">IterableDiffers</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class IterableDiffers {\n  create(factories: IterableDifferFactory[], parent?: IterableDiffers) : IterableDiffers\n  extend(factories: IterableDifferFactory[]) : Provider\n  constructor(factories: IterableDifferFactory[])\n  \n  \n  factories : IterableDifferFactory[]\n  find(iterable: any) : IterableDifferFactory\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A repository of different iterable diffing strategies used by NgFor, NgClass, and others.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class IterableDiffers</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(factories: IterableDifferFactory[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(factories: IterableDifferFactory[], parent?: IterableDiffers) : IterableDiffers</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('extend') }\" class=\"prettyprint no-bg\" id=\"extend-anchor\">extend(factories: IterableDifferFactory[]) : Provider</pre>\n<p>Takes an array of <a href=\"iterabledifferfactory-interface\"><code>IterableDifferFactory</code></a> and returns a provider used to extend the inherited <a href=\"iterablediffers-class\"><code>IterableDiffers</code></a> instance with the provided factories and return a new <a href=\"iterablediffers-class\"><code>IterableDiffers</code></a> instance.</p> <p>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new <a href=\"iterablediffer-interface\"><code>IterableDiffer</code></a> available.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  viewProviders: [\n    IterableDiffers.extend([new ImmutableListDiffer()])\n  ]\n})\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('factories') }\" class=\"prettyprint no-bg\" id=\"factories-anchor\">factories : IterableDifferFactory[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('find') }\" class=\"prettyprint no-bg\" id=\"find-anchor\">find(iterable: any) : IterableDifferFactory</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/iterable_differs.ts#L44-L107\">@angular/core/src/change_detection/differs/iterable_differs.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/IterableDiffers-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/IterableDiffers-class.html</a>\n  </p>\n</div>\n","api/core/index/dynamiccomponentloader-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DynamicComponentLoader</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DynamicComponentLoader {\n  loadAsRoot(type: Type, overrideSelectorOrNode: string|any, injector: Injector, onDispose?: () =&gt; void, projectableNodes?: any[][]) : Promise&lt;ComponentRef&lt;any&gt;&gt;\n  loadNextToLocation(type: Type, location: ViewContainerRef, providers?: ResolvedReflectiveProvider[], projectableNodes?: any[][]) : Promise&lt;ComponentRef&lt;any&gt;&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Use ComponentFactoryResolver and ViewContainerRef directly.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DynamicComponentLoader</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('loadAsRoot') }\" class=\"prettyprint no-bg\" id=\"loadAsRoot-anchor\">loadAsRoot(type: Type, overrideSelectorOrNode: string|any, injector: Injector, onDispose?: () =&gt; void, projectableNodes?: any[][]) : Promise&lt;ComponentRef&lt;any&gt;&gt;</pre>\n<p>Creates an instance of a Component <code>type</code> and attaches it to the first element in the platform-specific global view that matches the component's selector.</p> <p>In a browser the platform-specific global view is the main DOM Document.</p> <p>If needed, the component's selector can be overridden via <code>overrideSelector</code>.</p> <p>A provided <a href=\"injector-class\"><code>Injector</code></a> will be used to instantiate the Component.</p> <p>To be notified when this Component instance is destroyed, you can also optionally provide <code>onDispose</code> callback.</p> <p>Returns a promise for the <a href=\"componentref-class\"><code>ComponentRef</code></a> representing the newly created Component.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-component',\n  template: 'Child'\n})\nclass ChildComponent {\n}\n\n@Component({\n  selector: 'my-app',\n  template: 'Parent (&lt;child id=\"child\"&gt;&lt;/child&gt;)'\n})\nclass MyApp {\n  constructor(dcl: DynamicComponentLoader, injector: Injector) {\n    dcl.loadAsRoot(ChildComponent, '#child', injector);\n  }\n}\n\nbootstrap(MyApp);\n</pre>\n<p>Resulting DOM:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;my-app&gt;\n  Parent (\n    &lt;child id=\"child\"&gt;Child&lt;/child&gt;\n  )\n&lt;/my-app&gt;\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('loadNextToLocation') }\" class=\"prettyprint no-bg\" id=\"loadNextToLocation-anchor\">loadNextToLocation(type: Type, location: ViewContainerRef, providers?: ResolvedReflectiveProvider[], projectableNodes?: any[][]) : Promise&lt;ComponentRef&lt;any&gt;&gt;</pre>\n<p>Creates an instance of a Component and attaches it to the View Container found at the <code>location</code> specified as <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a>.</p> <p>You can optionally provide <code>providers</code> to configure the <a href=\"injector-class\"><code>Injector</code></a> provisioned for this Component Instance.</p> <p>Returns a promise for the <a href=\"componentref-class\"><code>ComponentRef</code></a> representing the newly created Component.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-component',\n  template: 'Child'\n})\nclass ChildComponent {\n}\n\n@Component({\n  selector: 'my-app',\n  template: 'Parent'\n})\nclass MyApp {\n  constructor(dcl: DynamicComponentLoader, viewContainerRef: ViewContainerRef) {\n    dcl.loadNextToLocation(ChildComponent, viewContainerRef);\n  }\n}\n\nbootstrap(MyApp);\n</pre>\n<p>Resulting DOM:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;my-app&gt;Parent&lt;/my-app&gt;\n&lt;child-component&gt;Child&lt;/child-component&gt;\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/dynamic_component_loader.ts#L14-L120\">@angular/core/src/linker/dynamic_component_loader.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/DynamicComponentLoader-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/DynamicComponentLoader-class.html</a>\n  </p>\n</div>\n","api/core/index/elementref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ElementRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span><span class=\"status-badge security-risk-badge\">Security Risk </span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Security Risk</h2>\n<p>Permitting direct access to the DOM can make your application more vulnerable to XSS attacks. Carefully review any use of <code>ElementRef</code> in your code. For more detail, see the <a href=\"http://g.co/ng/security\">Security Guide</a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ElementRef {\n  constructor(nativeElement: any)\n  \n  \n  nativeElement : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ElementRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(nativeElement: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nativeElement') }\" class=\"prettyprint no-bg\" id=\"nativeElement-anchor\">nativeElement : any</pre>\n<p>The underlying native element or <code>null</code> if direct access to native elements is not supported (e.g. when the application runs in a web worker).</p> <div class=\"callout is-critical\"> <header>Use with caution</header> <p> Use this API as the last resort when direct access to DOM is needed. Use templating and data-binding provided by Angular instead. Alternatively you take a look at <a href=\"renderer-class\"><code>Renderer</code></a> which provides API that can safely be used even when direct access to native elements is not supported. </p> <p> Relying on direct DOM access creates tight coupling between your application and rendering layers which will make it impossible to separate the two and deploy your application into a web worker. </p> </div> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/element_ref.ts#L1-L48\">@angular/core/src/linker/element_ref.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ElementRef-class.html</a>\n  </p>\n</div>\n","api/core/index/embeddedviewref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">EmbeddedViewRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class EmbeddedViewRef {\n  C \n  context : C\n  rootNodes : any[]\n  destroy() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents an Angular View.</p>  <p>A View is a fundamental building block of the application UI. It is the smallest grouping of Elements which are created and destroyed together.</p> <p>Properties of elements in a View can change, but the structure (number and order) of elements in a View cannot. Changing the structure of Elements can only be done by inserting, moving or removing nested Views via a <a href=\"viewcontainerref-class\"><code>ViewContainerRef</code></a>. Each View can contain many View Containers. </p> <h3 id=\"example\">Example</h3> <p>Given this template...</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">Count: {{items.length}}\n&lt;ul&gt;\n  &lt;li *ngFor=\"let  item of items\"&gt;{{item}}&lt;/li&gt;\n&lt;/ul&gt;\n</pre>\n<p>We have two <a href=\"templateref-class\"><code>TemplateRef</code></a>s:</p> <p>Outer <a href=\"templateref-class\"><code>TemplateRef</code></a>:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">Count: {{items.length}}\n&lt;ul&gt;\n  &lt;template ngFor let-item [ngForOf]=\"items\"&gt;&lt;/template&gt;\n&lt;/ul&gt;\n</pre>\n<p>Inner <a href=\"templateref-class\"><code>TemplateRef</code></a>:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;li&gt;{{item}}&lt;/li&gt;\n</pre>\n<p>Notice that the original template is broken down into two separate <a href=\"templateref-class\"><code>TemplateRef</code></a>s.</p> <p>The outer/inner <a href=\"templateref-class\"><code>TemplateRef</code></a>s are then assembled into views like so:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;!-- ViewRef: outer-0 --&gt;\nCount: 2\n&lt;ul&gt;\n  &lt;template view-container-ref&gt;&lt;/template&gt;\n  &lt;!-- ViewRef: inner-1 --&gt;&lt;li&gt;first&lt;/li&gt;&lt;!-- /ViewRef: inner-1 --&gt;\n  &lt;!-- ViewRef: inner-2 --&gt;&lt;li&gt;second&lt;/li&gt;&lt;!-- /ViewRef: inner-2 --&gt;\n&lt;/ul&gt;\n&lt;!-- /ViewRef: outer-0 --&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class EmbeddedViewRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('C') }\" class=\"prettyprint no-bg\" id=\"C-anchor\">C</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('context') }\" class=\"prettyprint no-bg\" id=\"context-anchor\">context : C</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('rootNodes') }\" class=\"prettyprint no-bg\" id=\"rootNodes-anchor\">rootNodes : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n<p>Destroys the view and all of the data structures associated with it.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/view_ref.ts#L21-L86\">@angular/core/src/linker/view_ref.ts (line 21)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/EmbeddedViewRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/EmbeddedViewRef-class.html</a>\n  </p>\n</div>\n","api/core/index/exceptionhandler-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ExceptionHandler</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ExceptionHandler {\n  exceptionToString(exception: any, stackTrace?: any, reason?: string) : string\n  constructor(_logger: any, _rethrowException?: boolean)\n  \n  \n  call(exception: any, stackTrace?: any, reason?: string) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Provides a hook for centralized exception handling.</p> <p>The default implementation of <code>ExceptionHandler</code> prints error messages to the <code>Console</code>. To intercept error handling, write a custom exception handler that replaces this default as appropriate for your app.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">class MyExceptionHandler implements ExceptionHandler {\n  call(error, stackTrace = null, reason = null) {\n    // do something with the exception\n  }\n}\n\nbootstrap(MyApp, [{provide: ExceptionHandler, useClass: MyExceptionHandler}])\n\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ExceptionHandler</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_logger: any, _rethrowException?: boolean)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exceptionToString') }\" class=\"prettyprint no-bg\" id=\"exceptionToString-anchor\">exceptionToString(exception: any, stackTrace?: any, reason?: string) : string</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('call') }\" class=\"prettyprint no-bg\" id=\"call-anchor\">call(exception: any, stackTrace?: any, reason?: string) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/facade/exception_handler.ts#L19-L141\">@angular/core/src/facade/exception_handler.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ExceptionHandler-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ExceptionHandler-class.html</a>\n  </p>\n</div>\n","api/core/index/invalidprovidererror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InvalidProviderError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InvalidProviderError {\n  constructor(provider: any)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when an object other then <a href=\"provider-class\"><code>Provider</code></a> (or <code>Type</code>) is passed to <a href=\"injector-class\"><code>Injector</code></a> creation.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-yatcfbpamcl0jssq4mvh-p-preview-\">Example (<a href=\"http://plnkr.co/edit/YatCFbPAMCL0JSSQ4mvH?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">expect(() =&gt; Injector.resolveAndCreate([\"not a type\"])).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InvalidProviderError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(provider: any)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L179-L196\">@angular/core/src/di/reflective_exceptions.ts (line 179)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InvalidProviderError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InvalidProviderError-class.html</a>\n  </p>\n</div>\n","api/core/index/keyvaluechangerecord-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">KeyValueChangeRecord</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class KeyValueChangeRecord {\n  constructor(key: any)\n  \n  \n  previousValue : any\n  currentValue : any\n  key : any\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class KeyValueChangeRecord</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(key: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('previousValue') }\" class=\"prettyprint no-bg\" id=\"previousValue-anchor\">previousValue : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('currentValue') }\" class=\"prettyprint no-bg\" id=\"currentValue-anchor\">currentValue : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('key') }\" class=\"prettyprint no-bg\" id=\"key-anchor\">key : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/default_keyvalue_differ.ts#L291-L322\">@angular/core/src/change_detection/differs/default_keyvalue_differ.ts (line 291)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/KeyValueChangeRecord-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/KeyValueChangeRecord-class.html</a>\n  </p>\n</div>\n","api/core/index/iterabledifferfactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">IterableDifferFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class IterableDifferFactory {\n  supports(objects: any) : boolean\n  create(cdRef: ChangeDetectorRef, trackByFn?: TrackByFn) : IterableDiffer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Provides a factory for <a href=\"iterablediffer-interface\"><code>IterableDiffer</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface IterableDifferFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('supports') }\" class=\"prettyprint no-bg\" id=\"supports-anchor\">supports(objects: any) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(cdRef: ChangeDetectorRef, trackByFn?: TrackByFn) : IterableDiffer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/iterable_differs.ts#L33-L44\">@angular/core/src/change_detection/differs/iterable_differs.ts (line 33)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/IterableDifferFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/IterableDifferFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/keyvaluediffer-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">KeyValueDiffer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class KeyValueDiffer {\n  diff(object: any) : any\n  onDestroy() : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A differ that tracks changes made to an object over time.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface KeyValueDiffer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('diff') }\" class=\"prettyprint no-bg\" id=\"diff-anchor\">diff(object: any) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy() : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/keyvalue_differs.ts#L13-L24\">@angular/core/src/change_detection/differs/keyvalue_differs.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffer-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffer-interface.html</a>\n  </p>\n</div>\n","api/core/index/keyvaluedifferfactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">KeyValueDifferFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class KeyValueDifferFactory {\n  supports(objects: any) : boolean\n  create(cdRef: ChangeDetectorRef) : KeyValueDiffer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Provides a factory for <a href=\"keyvaluediffer-interface\"><code>KeyValueDiffer</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface KeyValueDifferFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('supports') }\" class=\"prettyprint no-bg\" id=\"supports-anchor\">supports(objects: any) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(cdRef: ChangeDetectorRef) : KeyValueDiffer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/keyvalue_differs.ts#L24-L34\">@angular/core/src/change_detection/differs/keyvalue_differs.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/KeyValueDifferFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/KeyValueDifferFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/keyvaluediffers-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">KeyValueDiffers</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class KeyValueDiffers {\n  create(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers) : KeyValueDiffers\n  extend(factories: KeyValueDifferFactory[]) : Provider\n  constructor(factories: KeyValueDifferFactory[])\n  \n  \n  factories : KeyValueDifferFactory[]\n  find(kv: Object) : KeyValueDifferFactory\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A repository of different Map diffing strategies used by NgClass, NgStyle, and others.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class KeyValueDiffers</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(factories: KeyValueDifferFactory[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(factories: KeyValueDifferFactory[], parent?: KeyValueDiffers) : KeyValueDiffers</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('extend') }\" class=\"prettyprint no-bg\" id=\"extend-anchor\">extend(factories: KeyValueDifferFactory[]) : Provider</pre>\n<p>Takes an array of <a href=\"keyvaluedifferfactory-interface\"><code>KeyValueDifferFactory</code></a> and returns a provider used to extend the inherited <a href=\"keyvaluediffers-class\"><code>KeyValueDiffers</code></a> instance with the provided factories and return a new <a href=\"keyvaluediffers-class\"><code>KeyValueDiffers</code></a> instance.</p> <p>The following example shows how to extend an existing list of factories, which will only be applied to the injector for this component and its children. This step is all that's required to make a new <a href=\"keyvaluediffer-interface\"><code>KeyValueDiffer</code></a> available.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  viewProviders: [\n    KeyValueDiffers.extend([new ImmutableMapDiffer()])\n  ]\n})\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('factories') }\" class=\"prettyprint no-bg\" id=\"factories-anchor\">factories : KeyValueDifferFactory[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('find') }\" class=\"prettyprint no-bg\" id=\"find-anchor\">find(kv: Object) : KeyValueDifferFactory</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/keyvalue_differs.ts#L34-L96\">@angular/core/src/change_detection/differs/keyvalue_differs.ts (line 34)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffers-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/KeyValueDiffers-class.html</a>\n  </p>\n</div>\n","api/core/index/modulewithcomponentfactories-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ModuleWithComponentFactories</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ModuleWithComponentFactories {\n  constructor(ngModuleFactory: NgModuleFactory&lt;T&gt;, componentFactories: ComponentFactory&lt;any&gt;[])\n  \n  \n  ngModuleFactory : NgModuleFactory&lt;T&gt;\n  componentFactories : ComponentFactory&lt;any&gt;[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Combination of NgModuleFactory and ComponentFactorys.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ModuleWithComponentFactories</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(ngModuleFactory: NgModuleFactory&lt;T&gt;, componentFactories: ComponentFactory&lt;any&gt;[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngModuleFactory') }\" class=\"prettyprint no-bg\" id=\"ngModuleFactory-anchor\">ngModuleFactory : NgModuleFactory&lt;T&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentFactories') }\" class=\"prettyprint no-bg\" id=\"componentFactories-anchor\">componentFactories : ComponentFactory&lt;any&gt;[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/compiler.ts#L28-L39\">@angular/core/src/linker/compiler.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ModuleWithComponentFactories-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ModuleWithComponentFactories-class.html</a>\n  </p>\n</div>\n","api/core/index/modulewithproviders-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ModuleWithProviders</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ModuleWithProviders {\n  ngModule : Type\n  providers : any[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A wrapper around a module that also includes the providers.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ModuleWithProviders</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngModule') }\" class=\"prettyprint no-bg\" id=\"ngModule-anchor\">ngModule : Type</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : any[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/ng_module.ts#L10-L20\">@angular/core/src/metadata/ng_module.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ModuleWithProviders-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ModuleWithProviders-interface.html</a>\n  </p>\n</div>\n","api/core/index/ngmodule-decorator":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModule: NgModuleMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Decorator</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NgModule(options : NgModuleMetadata) : NgModuleMetadataFactory</pre>\n<p>Declares an ng module.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1324-L1325\">@angular/core/src/metadata.ts (line 1324)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModule-decorator.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModule-decorator.html</a>\n  </p>\n</div>\n","api/core/index/ngmoduledecorator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleDecorator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleDecorator {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for the <a href=\"ngmodulemetadata-class\"><code>NgModuleMetadata</code></a> decorator function.</p> <p>See <a href=\"ngmodulemetadatafactory-interface\"><code>NgModuleMetadataFactory</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface NgModuleDecorator</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L47-L56\">@angular/core/src/metadata.ts (line 47)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleDecorator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleDecorator-interface.html</a>\n  </p>\n</div>\n","api/core/index/ngmodulefactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleFactory {\n  constructor(_injectorClass: {new (parentInjector: Injector): NgModuleInjector&lt;T&gt;}, _moduleype: ConcreteType&lt;T&gt;)\n  \n  \n  moduleType : ConcreteType&lt;T&gt;\n  create(parentInjector: Injector) : NgModuleRef&lt;T&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgModuleFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_injectorClass: {new (parentInjector: Injector): NgModuleInjector&lt;T&gt;}, _moduleype: ConcreteType&lt;T&gt;)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('moduleType') }\" class=\"prettyprint no-bg\" id=\"moduleType-anchor\">moduleType : ConcreteType&lt;T&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('create') }\" class=\"prettyprint no-bg\" id=\"create-anchor\">create(parentInjector: Injector) : NgModuleRef&lt;T&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/ng_module_factory.ts#L52-L72\">@angular/core/src/linker/ng_module_factory.ts (line 52)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleFactory-class.html</a>\n  </p>\n</div>\n","api/core/index/ngmodulefactoryloader-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleFactoryLoader</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleFactoryLoader {\n  load(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Used to load ng moduled factories.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgModuleFactoryLoader</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('load') }\" class=\"prettyprint no-bg\" id=\"load-anchor\">load(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/ng_module_factory_loader.ts#L9-L17\">@angular/core/src/linker/ng_module_factory_loader.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleFactoryLoader-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleFactoryLoader-class.html</a>\n  </p>\n</div>\n","api/core/index/hostmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HostMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HostMetadata {\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Specifies that an injector should retrieve a dependency from any injector until reaching the closest host.</p> <p>In Angular, a component element is automatically declared as a host for all the injectors in its view.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-gx79pv-p-preview-\">Example (<a href=\"http://plnkr.co/edit/GX79pV?p=preview\">live demo</a>)</h3> <p>In the following example <code>App</code> contains <code>ParentCmp</code>, which contains <code>ChildDirective</code>. So <code>ParentCmp</code> is the host of <code>ChildDirective</code>.</p> <p><code>ChildDirective</code> depends on two services: <code>HostService</code> and <code>OtherService</code>. <code>HostService</code> is defined at <code>ParentCmp</code>, and <code>OtherService</code> is defined at <code>App</code>.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class OtherService {}\nclass HostService {}\n\n@Directive({\n  selector: 'child-directive'\n})\nclass ChildDirective {\n  constructor(@Optional() @Host() os:OtherService, @Optional() @Host() hs:HostService){\n    console.log(\"os is null\", os);\n    console.log(\"hs is NOT null\", hs);\n  }\n}\n\n@Component({\n  selector: 'parent-cmp',\n  providers: [HostService],\n  template: `\n    Dir: &lt;child-directive&gt;&lt;/child-directive&gt;\n  `,\n  directives: [ChildDirective]\n})\nclass ParentCmp {\n}\n\n@Component({\n  selector: 'app',\n  providers: [OtherService],\n  template: `\n    Parent: &lt;parent-cmp&gt;&lt;/parent-cmp&gt;\n  `,\n  directives: [ParentCmp]\n})\nclass App {\n}\n\nbootstrap(App);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HostMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L188-L247\">@angular/core/src/di/metadata.ts (line 188)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/HostMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/HostMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/inject-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Inject: InjectMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Inject</pre>\n<p>Factory for creating <a href=\"injectmetadata-class\"><code>InjectMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L73-L73\">@angular/core/src/di/decorators.ts (line 73)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Inject-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Inject-var.html</a>\n  </p>\n</div>\n","api/core/index/injectmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">InjectMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InjectMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"injectmetadata-class\"><code>InjectMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface InjectMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L11-L21\">@angular/core/src/di/decorators.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InjectMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InjectMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/ngmodulemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleMetadata {\n  constructor(options?: NgModuleMetadataType)\n  \n  \n  providers : any[]\n  declarations : Array&lt;Type|any[]&gt;\n  imports : Array&lt;Type|ModuleWithProviders|any[]&gt;\n  exports : Array&lt;Type|any[]&gt;\n  entryComponents : Array&lt;Type|any[]&gt;\n  bootstrap : Array&lt;Type|any[]&gt;\n  schemas : Array&lt;SchemaMetadata|any[]&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares an Angular Module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgModuleMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(options?: NgModuleMetadataType)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : any[]</pre>\n<p>Defines the set of injectable objects that are available in the injector of this module.</p> <h2 id=\"simple-example\">Simple Example</h2> <p>Here is an example of a class that can be injected:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Greeter {\n   greet(name:string) {\n     return 'Hello ' + name + '!';\n   }\n}\n\n@NgModule({\n  providers: [\n    Greeter\n  ]\n})\nclass HelloWorld {\n  greeter:Greeter;\n\n  constructor(greeter:Greeter) {\n    this.greeter = greeter;\n  }\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('declarations') }\" class=\"prettyprint no-bg\" id=\"declarations-anchor\">declarations : Array&lt;Type|any[]&gt;</pre>\n<p>Specifies a list of directives/pipes that belong to this module.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@NgModule({\n  declarations: [NgFor]\n})\nclass CommonModule {\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('imports') }\" class=\"prettyprint no-bg\" id=\"imports-anchor\">imports : Array&lt;Type|ModuleWithProviders|any[]&gt;</pre>\n<p>Specifies a list of modules whose exported directives/pipes should be available to templates in this module. This can also contain <a href=\"modulewithproviders-interface\"><code>ModuleWithProviders</code></a>.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@NgModule({\n  imports: [CommonModule]\n})\nclass MainModule {\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exports') }\" class=\"prettyprint no-bg\" id=\"exports-anchor\">exports : Array&lt;Type|any[]&gt;</pre>\n<p>Specifies a list of directives/pipes/module that can be used within the template of any component that is part of an angular module that imports this angular module.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@NgModule({\n  exports: [NgFor]\n})\nclass CommonModule {\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('entryComponents') }\" class=\"prettyprint no-bg\" id=\"entryComponents-anchor\">entryComponents : Array&lt;Type|any[]&gt;</pre>\n<p>Defines the components that should be compiled as well when this component is defined. For each components listed here, Angular will create a <a href=\"componentfactory-class\">ComponentFactory</a> and store it in the <a href=\"componentfactoryresolver-class\">ComponentFactoryResolver</a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrap') }\" class=\"prettyprint no-bg\" id=\"bootstrap-anchor\">bootstrap : Array&lt;Type|any[]&gt;</pre>\n<p>Defines the components that should be bootstrapped when this module is bootstrapped. The components listed here will automatically be added to <code>entryComponents</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('schemas') }\" class=\"prettyprint no-bg\" id=\"schemas-anchor\">schemas : Array&lt;SchemaMetadata|any[]&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/ng_module.ts#L51-L169\">@angular/core/src/metadata/ng_module.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/ngmodulemetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"ngmodulemetadata-class\"><code>NgModuleMetadata</code></a> factory for creating annotations, decorators or DSL.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface NgModuleMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L316-L326\">@angular/core/src/metadata.ts (line 316)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/ngmodulemetadatatype-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleMetadataType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleMetadataType {\n  providers : any[]\n  declarations : Array&lt;Type|any[]&gt;\n  imports : Array&lt;Type|ModuleWithProviders|any[]&gt;\n  exports : Array&lt;Type|any[]&gt;\n  entryComponents : Array&lt;Type|any[]&gt;\n  bootstrap : Array&lt;Type|any[]&gt;\n  schemas : Array&lt;SchemaMetadata|any[]&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for creating <a href=\"ngmodulemetadata-class\"><code>NgModuleMetadata</code></a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface NgModuleMetadataType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('declarations') }\" class=\"prettyprint no-bg\" id=\"declarations-anchor\">declarations : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('imports') }\" class=\"prettyprint no-bg\" id=\"imports-anchor\">imports : Array&lt;Type|ModuleWithProviders|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exports') }\" class=\"prettyprint no-bg\" id=\"exports-anchor\">exports : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('entryComponents') }\" class=\"prettyprint no-bg\" id=\"entryComponents-anchor\">entryComponents : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrap') }\" class=\"prettyprint no-bg\" id=\"bootstrap-anchor\">bootstrap : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('schemas') }\" class=\"prettyprint no-bg\" id=\"schemas-anchor\">schemas : Array&lt;SchemaMetadata|any[]&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/ng_module.ts#L37-L51\">@angular/core/src/metadata/ng_module.ts (line 37)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadataType-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleMetadataType-interface.html</a>\n  </p>\n</div>\n","api/core/index/ngmoduleref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModuleRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModuleRef {\n  injector : Injector\n  componentFactoryResolver : ComponentFactoryResolver\n  instance : T\n  destroy() : void\n  onDestroy(callback: () =&gt; void) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents an instance of an NgModule created via a <a href=\"ngmodulefactory-class\"><code>NgModuleFactory</code></a>.</p> <p><code>NgModuleRef</code> provides access to the NgModule Instance as well other objects related to this NgModule Instance.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgModuleRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n<p>The injector that contains all of the providers of the NgModule.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentFactoryResolver') }\" class=\"prettyprint no-bg\" id=\"componentFactoryResolver-anchor\">componentFactoryResolver : ComponentFactoryResolver</pre>\n<p>The ComponentFactoryResolver to get hold of the ComponentFactories delcared in the <code>entryComponents</code> property of the module.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('instance') }\" class=\"prettyprint no-bg\" id=\"instance-anchor\">instance : T</pre>\n<p>The NgModule instance.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n<p>Destroys the module instance and all of the data structures associated with it.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy(callback: () =&gt; void) : void</pre>\n<p>Allows to register a callback that will be called when the module is destroyed.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/ng_module_factory.ts#L14-L52\">@angular/core/src/linker/ng_module_factory.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgModuleRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgModuleRef-class.html</a>\n  </p>\n</div>\n","api/core/index/ngzone-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgZone</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgZone {\n  isInAngularZone() : boolean\n  assertInAngularZone() : void\n  assertNotInAngularZone() : void\n  constructor({enableLongStackTrace = false}: any)\n  \n  \n  onUnstable : EventEmitter&lt;any&gt;\n  onMicrotaskEmpty : EventEmitter&lt;any&gt;\n  onStable : EventEmitter&lt;any&gt;\n  onError : EventEmitter&lt;any&gt;\n  isStable : boolean\n  hasPendingMicrotasks : boolean\n  hasPendingMacrotasks : boolean\n  run(fn: () =&gt; any) : any\n  runGuarded(fn: () =&gt; any) : any\n  runOutsideAngular(fn: () =&gt; any) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An injectable service for executing work inside or outside of the Angular zone.</p> <p>The most common use of this service is to optimize performance when starting a work consisting of one or more asynchronous tasks that don't require UI updates or error handling to be handled by Angular. Such tasks can be kicked off via <a href=\"#runOutsideAngular\">runOutsideAngular</a> and if needed, these tasks can reenter the Angular zone via <a href=\"#run\">run</a>.</p>  <h3 id=\"example-live-demo-http-plnkr-co-edit-ly9m8hly7z06vdouasn2-p-preview-\">Example (<a href=\"http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component, View, NgZone} from '@angular/core';\nimport {NgIf} from '@angular/common';\n\n@Component({\n  selector: 'ng-zone-demo'.\n  template: `\n    &lt;h2&gt;Demo: NgZone&lt;/h2&gt;\n\n    &lt;p&gt;Progress: {{progress}}%&lt;/p&gt;\n    &lt;p *ngIf=\"progress &gt;= 100\"&gt;Done processing {{label}} of Angular zone!&lt;/p&gt;\n\n    &lt;button (click)=\"processWithinAngularZone()\"&gt;Process within Angular zone&lt;/button&gt;\n    &lt;button (click)=\"processOutsideOfAngularZone()\"&gt;Process outside of Angular zone&lt;/button&gt;\n  `,\n  directives: [NgIf]\n})\nexport class NgZoneDemo {\n  progress: number = 0;\n  label: string;\n\n  constructor(private _ngZone: NgZone) {}\n\n  // Loop inside the Angular zone\n  // so the UI DOES refresh after each setTimeout cycle\n  processWithinAngularZone() {\n    this.label = 'inside';\n    this.progress = 0;\n    this._increaseProgress(() =&gt; console.log('Inside Done!'));\n  }\n\n  // Loop outside of the Angular zone\n  // so the UI DOES NOT refresh after each setTimeout cycle\n  processOutsideOfAngularZone() {\n    this.label = 'outside';\n    this.progress = 0;\n    this._ngZone.runOutsideAngular(() =&gt; {\n      this._increaseProgress(() =&gt; {\n      // reenter the Angular zone and display done\n      this._ngZone.run(() =&gt; {console.log('Outside Done!') });\n    }}));\n  }\n\n\n  _increaseProgress(doneCallback: () =&gt; void) {\n    this.progress += 1;\n    console.log(`Current progress: ${this.progress}%`);\n\n    if (this.progress &lt; 100) {\n      window.setTimeout(() =&gt; this._increaseProgress(doneCallback)), 10)\n    } else {\n      doneCallback();\n    }\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgZone</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({enableLongStackTrace = false}: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isInAngularZone') }\" class=\"prettyprint no-bg\" id=\"isInAngularZone-anchor\">isInAngularZone() : boolean</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('assertInAngularZone') }\" class=\"prettyprint no-bg\" id=\"assertInAngularZone-anchor\">assertInAngularZone() : void</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('assertNotInAngularZone') }\" class=\"prettyprint no-bg\" id=\"assertNotInAngularZone-anchor\">assertNotInAngularZone() : void</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onUnstable') }\" class=\"prettyprint no-bg\" id=\"onUnstable-anchor\">onUnstable : EventEmitter&lt;any&gt;</pre>\n<p>Notifies when code enters Angular Zone. This gets fired first on VM Turn.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onMicrotaskEmpty') }\" class=\"prettyprint no-bg\" id=\"onMicrotaskEmpty-anchor\">onMicrotaskEmpty : EventEmitter&lt;any&gt;</pre>\n<p>Notifies when there is no more microtasks enqueue in the current VM Turn. This is a hint for Angular to do change detection, which may enqueue more microtasks. For this reason this event can fire multiple times per VM Turn.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onStable') }\" class=\"prettyprint no-bg\" id=\"onStable-anchor\">onStable : EventEmitter&lt;any&gt;</pre>\n<p>Notifies when the last <code>onMicrotaskEmpty</code> has run and there are no more microtasks, which implies we are about to relinquish VM turn. This event gets called just once.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onError') }\" class=\"prettyprint no-bg\" id=\"onError-anchor\">onError : EventEmitter&lt;any&gt;</pre>\n<p>Notify that an error has been delivered.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isStable') }\" class=\"prettyprint no-bg\" id=\"isStable-anchor\">isStable : boolean</pre>\n<p>Whether there are no outstanding microtasks or microtasks.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hasPendingMicrotasks') }\" class=\"prettyprint no-bg\" id=\"hasPendingMicrotasks-anchor\">hasPendingMicrotasks : boolean</pre>\n<p>Whether there are any outstanding microtasks.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hasPendingMacrotasks') }\" class=\"prettyprint no-bg\" id=\"hasPendingMacrotasks-anchor\">hasPendingMacrotasks : boolean</pre>\n<p>Whether there are any outstanding microtasks.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('run') }\" class=\"prettyprint no-bg\" id=\"run-anchor\">run(fn: () =&gt; any) : any</pre>\n<p>Executes the <code>fn</code> function synchronously within the Angular zone and returns value returned by the function.</p> <p>Running functions via <code>run</code> allows you to reenter Angular zone from a task that was executed outside of the Angular zone (typically started via <a href=\"#runOutsideAngular\">runOutsideAngular</a>).</p> <p>Any future tasks or microtasks scheduled from within this function will continue executing from within the Angular zone.</p> <p>If a synchronous error happens it will be rethrown and not reported via <code>onError</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('runGuarded') }\" class=\"prettyprint no-bg\" id=\"runGuarded-anchor\">runGuarded(fn: () =&gt; any) : any</pre>\n<p>Same as #run, except that synchronous errors are caught and forwarded via <code>onError</code> and not rethrown.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('runOutsideAngular') }\" class=\"prettyprint no-bg\" id=\"runOutsideAngular-anchor\">runOutsideAngular(fn: () =&gt; any) : any</pre>\n<p>Executes the <code>fn</code> function synchronously in Angular's parent zone and returns value returned by the function.</p> <p>Running functions via <code>runOutsideAngular</code> allows you to escape Angular's zone and do work that doesn't trigger Angular change-detection or is subject to Angular's error handling.</p> <p>Any future tasks or microtasks scheduled from within this function will continue executing from outside of the Angular zone.</p> <p>Use <a href=\"#run\">run</a> to reenter the Angular zone and do work that updates the application model.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/zone/ng_zone.ts#L14-L240\">@angular/core/src/zone/ng_zone.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgZone-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgZone-class.html</a>\n  </p>\n</div>\n","api/core/index/ngzoneerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgZoneError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgZoneError {\n  constructor(error: any, stackTrace: any)\n  \n  \n  error : any\n  stackTrace : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgZoneError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(error: any, stackTrace: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('error') }\" class=\"prettyprint no-bg\" id=\"error-anchor\">error : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('stackTrace') }\" class=\"prettyprint no-bg\" id=\"stackTrace-anchor\">stackTrace : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/zone/ng_zone_impl.ts#L1-L15\">@angular/core/src/zone/ng_zone_impl.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NgZoneError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NgZoneError-class.html</a>\n  </p>\n</div>\n","api/core/index/noannotationerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NoAnnotationError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NoAnnotationError {\n  constructor(typeOrFunc: Type|Function, params: any[][])\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when the class has no annotation information.</p> <p>Lack of annotation information prevents the <a href=\"injector-class\"><code>Injector</code></a> from determining which dependencies need to be injected into the constructor.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-rhnztlns7vjopq6pcvkm-p-preview-\">Example (<a href=\"http://plnkr.co/edit/rHnZtlNS7vJOPQ6pcVkm?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class A {\n  constructor(b) {}\n}\n\nexpect(() =&gt; Injector.resolveAndCreate([A])).toThrowError();\n</pre>\n<p>This error is also thrown when the class not marked with <a href=\"injectable-decorator\"><code>Injectable</code></a> has parameter types.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class B {}\n\nclass A {\n  constructor(b:B) {} // no information about the parameter types of A is available at runtime.\n}\n\nexpect(() =&gt; Injector.resolveAndCreate([A,B])).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NoAnnotationError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(typeOrFunc: Type|Function, params: any[][])</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L196-L247\">@angular/core/src/di/reflective_exceptions.ts (line 196)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NoAnnotationError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NoAnnotationError-class.html</a>\n  </p>\n</div>\n","api/core/index/nocomponentfactoryerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NoComponentFactoryError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NoComponentFactoryError {\n  constructor(component: Function)\n  \n  \n  component : Function\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NoComponentFactoryError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(component: Function)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('component') }\" class=\"prettyprint no-bg\" id=\"component-anchor\">component : Function</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/component_factory_resolver.ts#L11-L20\">@angular/core/src/linker/component_factory_resolver.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NoComponentFactoryError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NoComponentFactoryError-class.html</a>\n  </p>\n</div>\n","api/core/index/noprovidererror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NoProviderError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NoProviderError {\n  constructor(injector: ReflectiveInjector, key: ReflectiveKey)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when trying to retrieve a dependency by key from <a href=\"injector-class\"><code>Injector</code></a>, but the <a href=\"injector-class\"><code>Injector</code></a> does not have a <a href=\"provider-class\"><code>Provider</code></a> for the given key.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-vq8d3frb9agbnwjqtepe-p-preview-\">Example (<a href=\"http://plnkr.co/edit/vq8D3FRB9aGbnWJqtEPE?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class A {\n  constructor(b:B) {}\n}\n\nexpect(() =&gt; Injector.resolveAndCreate([A])).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NoProviderError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(injector: ReflectiveInjector, key: ReflectiveKey)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L73-L97\">@angular/core/src/di/reflective_exceptions.ts (line 73)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/NoProviderError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/NoProviderError-class.html</a>\n  </p>\n</div>\n","api/core/index/onchanges-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OnChanges</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OnChanges {\n  ngOnChanges(changes: SimpleChanges) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Lifecycle hooks are guaranteed to be called in the following order:</p> <ul> <li>\n<code>OnChanges</code> (if any bindings have changed),</li> <li>\n<code>OnInit</code> (after the first check only),</li> <li>\n<code>DoCheck</code>,</li> <li>\n<code>AfterContentInit</code>,</li> <li>\n<code>AfterContentChecked</code>,</li> <li>\n<code>AfterViewInit</code>,</li> <li>\n<code>AfterViewChecked</code>,</li> <li>\n<code>OnDestroy</code> (at the very end before destruction) Implement this interface to get notified when any data-bound property of your directive changes.</li> </ul> <p><code>ngOnChanges</code> is called right after the data-bound properties have been checked and before view and content children are checked if at least one of them has changed.</p> <p>The <code>changes</code> parameter contains an entry for each of the changed data-bound property. The key is the property name and the value is an instance of <a href=\"simplechange-class\"><code>SimpleChange</code></a>.</p> <h3 id=\"example-live-example-http-plnkr-co-edit-ahrb6oplqhdbpkt4kpdt-p-preview-\">Example (<a href=\"http://plnkr.co/edit/AHrB6opLqHDBPkt4KpdT?p=preview\">live example</a>):</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-cmp',\n  template: `&lt;p&gt;myProp = {{myProp}}&lt;/p&gt;`\n})\nclass MyComponent implements OnChanges {\n  @Input() myProp: any;\n\n  ngOnChanges(changes: SimpleChanges) {\n    console.log('ngOnChanges - myProp = ' + changes['myProp'].currentValue);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;button (click)=\"value = value + 1\"&gt;Change MyComponent&lt;/button&gt;\n    &lt;my-cmp [my-prop]=\"value\"&gt;&lt;/my-cmp&gt;`,\n  directives: [MyComponent]\n})\nexport class App {\n  value = 0;\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OnChanges</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L36-L89\">@angular/core/src/metadata/lifecycle_hooks.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OnChanges-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OnChanges-class.html</a>\n  </p>\n</div>\n","api/core/index/ondestroy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OnDestroy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OnDestroy {\n  ngOnDestroy() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to get notified when your directive is destroyed.</p> <p><code>ngOnDestroy</code> callback is typically used for any custom cleanup that needs to occur when the instance is destroyed</p> <h3 id=\"example-live-example-http-plnkr-co-edit-1mbyprryxd64v4pv03yn-p-preview-\">Example (<a href=\"http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview\">live example</a>)</h3> <pre format=\"linenums\" language=\"typesript\" data-language=\"typesript\">@Component({\n  selector: 'my-cmp',\n  template: `&lt;p&gt;my-component&lt;/p&gt;`\n})\nclass MyComponent implements OnInit, OnDestroy {\n  ngOnInit() {\n    console.log('ngOnInit');\n  }\n\n  ngOnDestroy() {\n    console.log('ngOnDestroy');\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;button (click)=\"hasChild = !hasChild\"&gt;\n      {{hasChild ? 'Destroy' : 'Create'}} MyComponent\n    &lt;/button&gt;\n    &lt;my-cmp *ngIf=\"hasChild\"&gt;&lt;/my-cmp&gt;`,\n  directives: [MyComponent, NgIf]\n})\nexport class App {\n  hasChild = true;\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n</pre>\n<p>To create a stateful Pipe, you should implement this interface and set the <code>pure</code> parameter to <code>false</code> in the <a href=\"pipemetadata-class\"><code>PipeMetadata</code></a>.</p> <p>A stateful pipe may produce different output, given the same input. It is likely that a stateful pipe may contain state that should be cleaned up when a binding is destroyed. For example, a subscription to a stream of data may need to be disposed, or an interval may need to be cleared.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-i8pm5bro4spalxbx56mr-p-preview-\">Example (<a href=\"http://plnkr.co/edit/i8pm5brO4sPaLxBx56MR?p=preview\">live demo</a>)</h3> <p>In this example, a pipe is created to countdown its input value, updating it every 50ms. Because it maintains an internal interval, it automatically clears the interval when the binding is destroyed or the countdown completes.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {OnDestroy, Pipe, PipeTransform} from '@angular/core'\n@Pipe({name: 'countdown', pure: false})\nclass CountDown implements PipeTransform, OnDestroy {\n  remainingTime:Number;\n  interval:SetInterval;\n  ngOnDestroy() {\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n  transform(value: any, args: any[] = []) {\n    if (!parseInt(value, 10)) return null;\n    if (typeof this.remainingTime !== 'number') {\n      this.remainingTime = parseInt(value, 10);\n    }\n    if (!this.interval) {\n      this.interval = setInterval(() =&gt; {\n        this.remainingTime-=50;\n        if (this.remainingTime &lt;= 0) {\n          this.remainingTime = 0;\n          clearInterval(this.interval);\n          delete this.interval;\n        }\n      }, 50);\n    }\n    return this.remainingTime;\n  }\n}\n</pre>\n<p>Invoking <code>{{ 10000 | countdown }}</code> would cause the value to be decremented by 50, every 50ms, until it reaches 0.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OnDestroy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L202-L294\">@angular/core/src/metadata/lifecycle_hooks.ts (line 202)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OnDestroy-class.html</a>\n  </p>\n</div>\n","api/core/index/oninit-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OnInit</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OnInit {\n  ngOnInit() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Implement this interface to execute custom initialization logic after your directive's data-bound properties have been initialized.</p> <p><code>ngOnInit</code> is called right after the directive's data-bound properties have been checked for the first time, and before any of its children have been checked. It is invoked only once when the directive is instantiated.</p> <h3 id=\"example-live-example-http-plnkr-co-edit-1mbyprryxd64v4pv03yn-p-preview-\">Example (<a href=\"http://plnkr.co/edit/1MBypRryXd64v4pV03Yn?p=preview\">live example</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-cmp',\n  template: `&lt;p&gt;my-component&lt;/p&gt;`\n})\nclass MyComponent implements OnInit, OnDestroy {\n  ngOnInit() {\n    console.log('ngOnInit');\n  }\n\n  ngOnDestroy() {\n    console.log('ngOnDestroy');\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;button (click)=\"hasChild = !hasChild\"&gt;\n      {{hasChild ? 'Destroy' : 'Create'}} MyComponent\n    &lt;/button&gt;\n    &lt;my-cmp *ngIf=\"hasChild\"&gt;&lt;/my-cmp&gt;`,\n  directives: [MyComponent, NgIf]\n})\nexport class App {\n  hasChild = true;\n}\n\nbootstrap(App).catch(err =&gt; console.error(err));\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OnInit</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnInit') }\" class=\"prettyprint no-bg\" id=\"ngOnInit-anchor\">ngOnInit() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L89-L133\">@angular/core/src/metadata/lifecycle_hooks.ts (line 89)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OnInit-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OnInit-class.html</a>\n  </p>\n</div>\n","api/core/index/opaquetoken-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OpaqueToken {\n  constructor(_desc: string)\n  \n  \n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a token that can be used in a DI Provider.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ys9ezxpj2mnoy3uc8kbp-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Ys9ezXpj2Mnoy3Uc8KBp?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var t = new OpaqueToken(\"value\");\n\nvar injector = Injector.resolveAndCreate([\n  {provide: t, useValue: \"bindingValue\"}\n]);\n\nexpect(injector.get(t)).toEqual(\"bindingValue\");\n</pre>\n<p>Using an <code>OpaqueToken</code> is preferable to using strings as tokens because of possible collisions caused by multiple providers using the same string as two different tokens.</p> <p>Using an <code>OpaqueToken</code> is preferable to using an <code>Object</code> as tokens because it provides better error messages.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OpaqueToken</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_desc: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/opaque_token.ts#L9-L38\">@angular/core/src/di/opaque_token.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OpaqueToken-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OpaqueToken-class.html</a>\n  </p>\n</div>\n","api/core/index/optional-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Optional: OptionalMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Optional</pre>\n<p>Factory for creating <a href=\"optionalmetadata-class\"><code>OptionalMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L80-L80\">@angular/core/src/di/decorators.ts (line 80)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Optional-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Optional-var.html</a>\n  </p>\n</div>\n","api/core/index/optionalmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OptionalMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OptionalMetadata {\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A parameter metadata that marks a dependency as optional. <a href=\"injector-class\"><code>Injector</code></a> provides <code>null</code> if the dependency is not found.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-asryom-p-preview-\">Example (<a href=\"http://plnkr.co/edit/AsryOm?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Engine {}\n\n@Injectable()\nclass Car {\n  engine;\n  constructor(@Optional() engine:Engine) {\n    this.engine = engine;\n  }\n}\n\nvar injector = Injector.resolveAndCreate([Car]);\nexpect(injector.get(Car).engine).toBeNull();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OptionalMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L55-L81\">@angular/core/src/di/metadata.ts (line 55)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OptionalMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OptionalMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/optionalmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">OptionalMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OptionalMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"optionalmetadata-class\"><code>OptionalMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface OptionalMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L21-L30\">@angular/core/src/di/decorators.ts (line 21)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OptionalMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OptionalMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/outofboundserror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OutOfBoundsError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OutOfBoundsError {\n  constructor(index: number)\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Thrown when getting an object by index.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-brs0sx2otqijzqvjgl8p-p-preview-\">Example (<a href=\"http://plnkr.co/edit/bRs0SX2OTQiJzqvjgl8P?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class A {}\n\nvar injector = Injector.resolveAndCreate([A]);\n\nexpect(() =&gt; injector.getAt(100)).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OutOfBoundsError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(index: number)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_exceptions.ts#L247-L265\">@angular/core/src/di/reflective_exceptions.ts (line 247)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OutOfBoundsError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OutOfBoundsError-class.html</a>\n  </p>\n</div>\n","api/core/index/inputmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InputMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InputMetadata {\n  constructor(bindingPropertyName?: string)\n  \n  \n  bindingPropertyName : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares a data-bound input property.</p> <p>Angular automatically updates data-bound properties during change detection.</p> <p><code>InputMetadata</code> takes an optional parameter that specifies the name used when instantiating a component in the template. When not provided, the name of the decorated property is used.</p> <h3 id=\"example\">Example</h3> <p>The following example creates a component with two input properties.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'bank-account',\n  template: `\n    Bank Name: {{bankName}}\n    Account Id: {{id}}\n  `\n})\nclass BankAccount {\n  @Input() bankName: string;\n  @Input('account-id') id: string;\n\n  // this property is not bound, and won't be automatically updated by Angular\n  normalizedBankName: string;\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;bank-account bank-name=\"RBC\" account-id=\"4747\"&gt;&lt;/bank-account&gt;\n  `,\n  directives: [BankAccount]\n})\nclass App {}\n\nbootstrap(App);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InputMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(bindingPropertyName?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bindingPropertyName') }\" class=\"prettyprint no-bg\" id=\"bindingPropertyName-anchor\">bindingPropertyName : string</pre>\n<p>Name used when instantiating a component in the template.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1108-L1158\">@angular/core/src/metadata/directives.ts (line 1108)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/InputMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/InputMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/output-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Output: OutputMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Output</pre>\n<p>Declares an event-bound output property.</p> <p>When an output property emits an event, an event handler attached to that event the template is invoked.</p> <p><code>OutputMetadata</code> takes an optional parameter that specifies the name used when instantiating a component in the template. When not provided, the name of the decorated property is used.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: 'interval-dir',\n})\nclass IntervalDir {\n  @Output() everySecond = new EventEmitter();\n  @Output('everyFiveSeconds') five5Secs = new EventEmitter();\n\n  constructor() {\n    setInterval(() =&gt; this.everySecond.emit(\"event\"), 1000);\n    setInterval(() =&gt; this.five5Secs.emit(\"event\"), 5000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\"&gt;\n    &lt;/interval-dir&gt;\n  `,\n  directives: [IntervalDir]\n})\nclass App {\n  everySecond() { console.log('second'); }\n  everyFiveSeconds() { console.log('five seconds'); }\n}\nbootstrap(App);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1238-L1238\">@angular/core/src/metadata.ts (line 1238)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Output-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Output-var.html</a>\n  </p>\n</div>\n","api/core/index/outputmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">OutputMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OutputMetadata {\n  constructor(bindingPropertyName?: string)\n  \n  \n  bindingPropertyName : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares an event-bound output property.</p> <p>When an output property emits an event, an event handler attached to that event the template is invoked.</p> <p><code>OutputMetadata</code> takes an optional parameter that specifies the name used when instantiating a component in the template. When not provided, the name of the decorated property is used.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: 'interval-dir',\n})\nclass IntervalDir {\n  @Output() everySecond = new EventEmitter();\n  @Output('everyFiveSeconds') five5Secs = new EventEmitter();\n\n  constructor() {\n    setInterval(() =&gt; this.everySecond.emit(\"event\"), 1000);\n    setInterval(() =&gt; this.five5Secs.emit(\"event\"), 5000);\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: `\n    &lt;interval-dir (everySecond)=\"everySecond()\" (everyFiveSeconds)=\"everyFiveSeconds()\"&gt;\n    &lt;/interval-dir&gt;\n  `,\n  directives: [IntervalDir]\n})\nclass App {\n  everySecond() { console.log('second'); }\n  everyFiveSeconds() { console.log('five seconds'); }\n}\nbootstrap(App);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class OutputMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(bindingPropertyName?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bindingPropertyName') }\" class=\"prettyprint no-bg\" id=\"bindingPropertyName-anchor\">bindingPropertyName : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1158-L1204\">@angular/core/src/metadata/directives.ts (line 1158)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OutputMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OutputMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/platform_common_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PLATFORM_COMMON_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Create platforms via `createPlatformFactory(corePlatform, ...) instead!</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PLATFORM_COMMON_PROVIDERS</pre>\n<p>A default set of providers which should be included in any Angular platform.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/platform_core_providers.ts#L40-L40\">@angular/core/src/platform_core_providers.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PLATFORM_COMMON_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/core/index/platform_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PLATFORM_DIRECTIVES: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Providing platform directives via a provider is deprecated. Provide platform directives via an <a href=\"ngmodule-decorator\"><code>NgModule</code></a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PLATFORM_DIRECTIVES</pre>\n<p>A token that can be provided when bootstrapping an application to make an array of directives available in every component of the application.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {PLATFORM_DIRECTIVES} from '@angular/core';\nimport {OtherDirective} from './myDirectives';\n\n@Component({\n  selector: 'my-component',\n  template: `\n    &lt;!-- can use other directive even though the component does not list it in `directives` --&gt;\n    &lt;other-directive&gt;&lt;/other-directive&gt;\n  `\n})\nexport class MyComponent {\n  ...\n}\n\nbootstrap(MyComponent, [{provide: PLATFORM_DIRECTIVES, useValue: [OtherDirective],\n  multi:true}]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/platform_directives_and_pipes.ts#L39-L39\">@angular/core/src/platform_directives_and_pipes.ts (line 39)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PLATFORM_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PLATFORM_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/core/index/platform_initializer-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PLATFORM_INITIALIZER</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PLATFORM_INITIALIZER</pre>\n<p>A function that will be executed when a platform is initialized.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_tokens.ts#L48-L48\">@angular/core/src/application_tokens.ts (line 48)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PLATFORM_INITIALIZER-let.html</a>\n  </p>\n</div>\n","api/core/index/platform_pipes-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PLATFORM_PIPES: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Providing platform pipes via a provider is deprecated. Provide platform pipes via an <a href=\"ngmodule-decorator\"><code>NgModule</code></a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PLATFORM_PIPES</pre>\n<p>A token that can be provided when bootstraping an application to make an array of pipes available in every component of the application.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {PLATFORM_PIPES} from '@angular/core';\nimport {OtherPipe} from './myPipe';\n\n@Component({\n  selector: 'my-component',\n  template: `\n    {{123 | other-pipe}}\n  `\n})\nexport class MyComponent {\n  ...\n}\n\nbootstrap(MyComponent, [{provide: PLATFORM_PIPES, useValue: [OtherPipe], multi:true}]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/platform_directives_and_pipes.ts#L67-L67\">@angular/core/src/platform_directives_and_pipes.ts (line 67)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PLATFORM_PIPES-let.html</a>\n  </p>\n</div>\n","api/core/index/pipe-decorator":"<h1 class=\"hero-title text-display-1 is-standard-case\">Pipe: PipeMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Decorator</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Pipe(options : PipeMetadata) : PipeMetadataFactory</pre>\n<p>Declare reusable pipe function.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Pipe({name: 'lowercase'})\nclass Lowercase {\n  transform(v: string, args: any[]) { return v.toLowerCase(); }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1146-L1146\">@angular/core/src/metadata.ts (line 1146)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Pipe-decorator.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Pipe-decorator.html</a>\n  </p>\n</div>\n","api/core/index/pipemetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">PipeMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PipeMetadata {\n  constructor({name, pure}: PipeMetadataType)\n  \n  \n  name : string\n  pure : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declare reusable pipe function.</p> <p>A \"pure\" pipe is only re-evaluated when either the input or any of the arguments change.</p> <p>When not specified, pipes default to being pure.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Pipe({name: 'lowercase'})\nclass Lowercase {\n  transform(v: string, args: any[]) { return v.toLowerCase(); }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class PipeMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({name, pure}: PipeMetadataType)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pure') }\" class=\"prettyprint no-bg\" id=\"pure-anchor\">pure : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1082-L1108\">@angular/core/src/metadata/directives.ts (line 1082)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PipeMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PipeMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/pipemetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">PipeMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PipeMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"pipemetadata-class\"><code>PipeMetadata</code></a> factory for creating decorators.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Pipe({name: 'lowercase'})\nclass Lowercase {\n  transform(v: string, args: any[]) { return v.toLowerCase(); }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface PipeMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L262-L276\">@angular/core/src/metadata.ts (line 262)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PipeMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PipeMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/pipemetadatatype-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">PipeMetadataType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PipeMetadataType {\n  name : string\n  pure : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for creating <a href=\"pipemetadata-class\"><code>PipeMetadata</code></a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface PipeMetadataType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pure') }\" class=\"prettyprint no-bg\" id=\"pure-anchor\">pure : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/directives.ts#L1073-L1082\">@angular/core/src/metadata/directives.ts (line 1073)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PipeMetadataType-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PipeMetadataType-interface.html</a>\n  </p>\n</div>\n","api/core/index/pipetransform-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">PipeTransform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PipeTransform {\n  transform(value: any, ...args: any[]) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface PipeTransform</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('transform') }\" class=\"prettyprint no-bg\" id=\"transform-anchor\">transform(value: any, ...args: any[]) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/pipe_transform.ts#L1-L38\">@angular/core/src/change_detection/pipe_transform.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PipeTransform-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PipeTransform-interface.html</a>\n  </p>\n</div>\n","api/core/index/platformref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">PlatformRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PlatformRef {\n  bootstrapModuleFactory(moduleFactory: NgModuleFactory&lt;M&gt;) : Promise&lt;NgModuleRef&lt;M&gt;&gt;\n  bootstrapModule(moduleType: ConcreteType&lt;M&gt;, compilerOptions?: CompilerOptions|CompilerOptions[]) : Promise&lt;NgModuleRef&lt;M&gt;&gt;\n  registerDisposeListener(dispose: () =&gt; void) : void\n  onDestroy(callback: () =&gt; void) : void\n  injector : Injector\n  dispose() : void\n  destroy() : void\n  disposed : boolean\n  destroyed : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The Angular platform is the entry point for Angular on a web page. Each page has exactly one platform, and services (such as reflection) which are common to every Angular application running on the page are bound in its scope.</p> <p>A page's platform is initialized implicitly when <a href=\"../../platform-browser-dynamic/index/bootstrap-function\"><code>bootstrap</code></a>() is called, or explicitly by calling <a href=\"createplatform-function\"><code>createPlatform</code></a>().</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class PlatformRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrapModuleFactory') }\" class=\"prettyprint no-bg\" id=\"bootstrapModuleFactory-anchor\">bootstrapModuleFactory(moduleFactory: NgModuleFactory&lt;M&gt;) : Promise&lt;NgModuleRef&lt;M&gt;&gt;</pre>\n<p>Creates an instance of an <code>@NgModule</code> for the given platform for offline compilation.</p> <h2 id=\"simple-example\">Simple Example</h2> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">my_module.ts:\n\n@NgModule({\n  imports: [BrowserModule]\n})\nclass MyModule {}\n\nmain.ts:\nimport {MyModuleNgFactory} from './my_module.ngfactory';\nimport {browserPlatform} from '@angular/platform-browser';\n\nlet moduleRef = browserPlatform().bootstrapModuleFactory(MyModuleNgFactory);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrapModule') }\" class=\"prettyprint no-bg\" id=\"bootstrapModule-anchor\">bootstrapModule(moduleType: ConcreteType&lt;M&gt;, compilerOptions?: CompilerOptions|CompilerOptions[]) : Promise&lt;NgModuleRef&lt;M&gt;&gt;</pre>\n<p>Creates an instance of an <code>@NgModule</code> for a given platform using the given runtime compiler.</p> <h2 id=\"simple-example\">Simple Example</h2> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@NgModule({\n  imports: [BrowserModule]\n})\nclass MyModule {}\n\nlet moduleRef = browserPlatform().bootstrapModule(MyModule);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerDisposeListener') }\" class=\"prettyprint no-bg\" id=\"registerDisposeListener-anchor\">registerDisposeListener(dispose: () =&gt; void) : void</pre>\n<p>Register a listener to be called when the platform is disposed.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy(callback: () =&gt; void) : void</pre>\n<p>Register a listener to be called when the platform is disposed.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n<p>Retrieve the platform <a href=\"injector-class\"><code>Injector</code></a>, which is the parent injector for every Angular application on the page and provides singleton providers.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dispose') }\" class=\"prettyprint no-bg\" id=\"dispose-anchor\">dispose() : void</pre>\n<p>Destroy the Angular platform and all Angular applications on the page.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n<p>Destroy the Angular platform and all Angular applications on the page.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('disposed') }\" class=\"prettyprint no-bg\" id=\"disposed-anchor\">disposed : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroyed') }\" class=\"prettyprint no-bg\" id=\"destroyed-anchor\">destroyed : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L187-L281\">@angular/core/src/application_ref.ts (line 187)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PlatformRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PlatformRef-class.html</a>\n  </p>\n</div>\n","api/core/index/providerbuilder-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ProviderBuilder</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ProviderBuilder {\n  constructor(token: any)\n  \n  \n  token : any\n  toClass(type: Type) : Provider\n  toValue(value: any) : Provider\n  toAlias(aliasToken: /*Type*/ any) : Provider\n  toFactory(factory: Function, dependencies?: any[]) : Provider\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Helper class for the <a href=\"bind-function\"><code>bind</code></a> function.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ProviderBuilder</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(token: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('token') }\" class=\"prettyprint no-bg\" id=\"token-anchor\">token : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toClass') }\" class=\"prettyprint no-bg\" id=\"toClass-anchor\">toClass(type: Type) : Provider</pre>\n<p>Binds a DI token to a class.</p> <p> (<a href=\"http://plnkr.co/edit/ZpBCSYqv6e2ud5KXLdxQ?p=preview\">live demo</a>)</p> <p>Because <code>toAlias</code> and <code>toClass</code> are often confused, the example contains both use cases for easy comparison.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Vehicle {}\n\nclass Car extends Vehicle {}\n\nvar injectorClass = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle, useClass: Car}\n]);\nvar injectorAlias = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle, useExisting: Car}\n]);\n\nexpect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\nexpect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n\nexpect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\nexpect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toValue') }\" class=\"prettyprint no-bg\" id=\"toValue-anchor\">toValue(value: any) : Provider</pre>\n<p>Binds a DI token to a value.</p> <p> (<a href=\"http://plnkr.co/edit/G024PFHmDL0cJFgfZK8O?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  {provide: 'message', useValue: 'Hello'}\n]);\n\nexpect(injector.get('message')).toEqual('Hello');\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toAlias') }\" class=\"prettyprint no-bg\" id=\"toAlias-anchor\">toAlias(aliasToken: /*Type*/ any) : Provider</pre>\n<p>Binds a DI token to an existing token.</p> <p>Angular will return the same instance as if the provided token was used. (This is in contrast to <code>useClass</code> where a separate instance of <code>useClass</code> will be returned.)</p> <p> (<a href=\"http://plnkr.co/edit/uBaoF2pN5cfc5AfZapNw?p=preview\">live demo</a>)</p> <p>Because <code>toAlias</code> and <code>toClass</code> are often confused, the example contains both use cases for easy comparison.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Vehicle {}\n\nclass Car extends Vehicle {}\n\nvar injectorAlias = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle, useExisting: Car}\n]);\nvar injectorClass = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle, useClass: Car})\n]);\n\nexpect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\nexpect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n\nexpect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\nexpect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toFactory') }\" class=\"prettyprint no-bg\" id=\"toFactory-anchor\">toFactory(factory: Function, dependencies?: any[]) : Provider</pre>\n<p>Binds a DI token to a function which computes the value.</p> <p> (<a href=\"http://plnkr.co/edit/OejNIfTT3zb1iBxaIYOb?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  {provide: Number, useFactory: () =&gt; { return 1+2; }},\n  {provide: String, useFactory: (v) =&gt; { return \"Value: \" + v; }, deps: [Number]}\n]);\n\nexpect(injector.get(Number)).toEqual(3);\nexpect(injector.get(String)).toEqual('Value: 3');\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/provider.ts#L266-L388\">@angular/core/src/di/provider.ts (line 266)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ProviderBuilder-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ProviderBuilder-class.html</a>\n  </p>\n</div>\n","api/core/index/query-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Query: QueryMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>@Annotation</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Query</pre>\n<p>Declares an injectable parameter to be a live list of directives or variable bindings from the content children of a directive.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ly9m8hly7z06vdouasn2-p-preview-\">Example (<a href=\"http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview\">live demo</a>)</h3> <p>Assume that <code>&lt;tabs&gt;</code> component would like to get a list its children <code>&lt;pane&gt;</code> components as shown in this example:</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;tabs&gt;\n  &lt;pane title=\"Overview\"&gt;...&lt;/pane&gt;\n  &lt;pane *ngFor=\"let o of objects\" [title]=\"o.title\"&gt;{{o.text}}&lt;/pane&gt;\n&lt;/tabs&gt;\n</pre>\n<p>The preferred solution is to query for <code>Pane</code> directives using this decorator.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@Component({\n  selector: 'pane',\n  inputs: ['title']\n})\nclass Pane {\n  title:string;\n}\n\n@Component({\n selector: 'tabs',\n template: `\n   &lt;ul&gt;\n     &lt;li *ngFor=\"let pane of panes\"&gt;{{pane.title}}&lt;/li&gt;\n   &lt;/ul&gt;\n   &lt;ng-content&gt;&lt;/ng-content&gt;\n `\n})\nclass Tabs {\n  panes: QueryList&lt;Pane&gt;;\n  constructor(@Query(Pane) panes:QueryList&lt;Pane&gt;) {\n    this.panes = panes;\n  }\n}\n</pre>\n<p>A query can look for variable bindings by passing in a string with desired binding symbol.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-st2j25ch1duraybrckx1-p-preview-\">Example (<a href=\"http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;seeker&gt;\n  &lt;div #findme&gt;...&lt;/div&gt;\n&lt;/seeker&gt;\n\n@Component({ selector: 'seeker' })\nclass seeker {\n  constructor(@Query('findme') elList: QueryList&lt;ElementRef&gt;) {...}\n}\n</pre>\n<p>In this case the object that is injected depend on the type of the variable binding. It can be an ElementRef, a directive or a component.</p> <p>Passing in a comma separated list of variable bindings will query for all of them.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;seeker&gt;\n  &lt;div #findMe&gt;...&lt;/div&gt;\n  &lt;div #findMeToo&gt;...&lt;/div&gt;\n&lt;/seeker&gt;\n\n @Component({\n  selector: 'seeker'\n})\nclass Seeker {\n  constructor(@Query('findMe, findMeToo') elList: QueryList&lt;ElementRef&gt;) {...}\n}\n</pre>\n<p>Configure whether query looks for direct children or all descendants of the querying element, by using the <code>descendants</code> parameter. It is set to <code>false</code> by default.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-wtgeb977bv7qva5ftyl9-p-preview-\">Example (<a href=\"http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;container #first&gt;\n  &lt;item&gt;a&lt;/item&gt;\n  &lt;item&gt;b&lt;/item&gt;\n  &lt;container #second&gt;\n    &lt;item&gt;c&lt;/item&gt;\n  &lt;/container&gt;\n&lt;/container&gt;\n</pre>\n<p>When querying for items, the first container will see only <code>a</code> and <code>b</code> by default, but with <code>Query(TextDirective, {descendants: true})</code> it will see <code>c</code> too.</p> <p>The queried directives are kept in a depth-first pre-order with respect to their positions in the DOM.</p> <p>Query does not look deep into any subcomponent views.</p> <p>Query is updated as part of the change-detection cycle. Since change detection happens after construction of a directive, QueryList will always be empty when observed in the constructor.</p> <p>The injected object is an unmodifiable live list. See <a href=\"querylist-class\"><code>QueryList</code></a> for more details.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L875-L875\">@angular/core/src/metadata.ts (line 875)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Query-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Query-var.html</a>\n  </p>\n</div>\n","api/core/index/querymetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">QueryMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class QueryMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"querymetadata-class\"><code>QueryMetadata</code></a> factory for creating annotations, decorators or DSL.</p> <h3 id=\"example-as-typescript-decorator\">Example as TypeScript Decorator</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Query, QueryList, Component} from '@angular/core';\n\n@Component({...})\nclass MyComponent {\n  constructor(@Query(SomeType) queryList: QueryList&lt;SomeType&gt;) {\n    ...\n  }\n}\n</pre>\n<h3 id=\"example-as-es5-dsl\">Example as ES5 DSL</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = ng\n  .Component({...})\n  .Class({\n    constructor: [new ng.Query(SomeType), function(queryList) {\n      ...\n    }]\n  })\n</pre>\n<h3 id=\"example-as-es5-annotation\">Example as ES5 annotation</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyComponent = function(queryList) {\n  ...\n};\n\nMyComponent.annotations = [\n  new ng.Component({...})\n]\nMyComponent.parameters = [\n  [new ng.Query(SomeType)]\n]\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface QueryMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L174-L225\">@angular/core/src/metadata.ts (line 174)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/QueryMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/QueryMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/provider-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Provider</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Provider {\n  constructor(token: any, {useClass, useValue, useExisting, useFactory, deps, multi}: {\n    useClass?: Type,\n    useValue?: any,\n    useExisting?: any,\n    useFactory?: Function,\n    deps?: Object[],\n    multi?: boolean\n  })\n  \n  \n  token : any\n  useClass : Type\n  useValue : any\n  useExisting : any\n  useFactory : Function\n  dependencies : Object[]\n  multi : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Describes how the <a href=\"injector-class\"><code>Injector</code></a> should instantiate a given token.</p> <p>See <a href=\"provide-function\"><code>provide</code></a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-gnayj6k6pfyg2nbzgwz5-p-3dpreview-p-preview-\">Example (<a href=\"http://plnkr.co/edit/GNAyj6K6PfYg2NBzgwZ5?p%3Dpreview&amp;p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">var injector = Injector.resolveAndCreate([\n  new Provider(\"message\", { useValue: 'Hello' })\n]);\n\nexpect(injector.get(\"message\")).toEqual('Hello');\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Provider</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(token: any, {useClass, useValue, useExisting, useFactory, deps, multi}: {\n    useClass?: Type,\n    useValue?: any,\n    useExisting?: any,\n    useFactory?: Function,\n    deps?: Object[],\n    multi?: boolean\n  })</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('token') }\" class=\"prettyprint no-bg\" id=\"token-anchor\">token : any</pre>\n<p>Token used when retrieving this provider. Usually, it is a type <a href=\"type-interface\"><code>Type</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('useClass') }\" class=\"prettyprint no-bg\" id=\"useClass-anchor\">useClass : Type</pre>\n<p>Binds a DI token to an implementation class.</p> <p> (<a href=\"http://plnkr.co/edit/RSTG86qgmoxCyj9SWPwY?p=preview\">live demo</a>)</p> <p>Because <code>useExisting</code> and <code>useClass</code> are often confused, the example contains both use cases for easy comparison.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Vehicle {}\n\nclass Car extends Vehicle {}\n\nvar injectorClass = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle,  useClass: Car }\n]);\nvar injectorAlias = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle,  useExisting: Car }\n]);\n\nexpect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\nexpect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n\nexpect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\nexpect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('useValue') }\" class=\"prettyprint no-bg\" id=\"useValue-anchor\">useValue : any</pre>\n<p>Binds a DI token to a value.</p> <p> (<a href=\"http://plnkr.co/edit/UFVsMVQIDe7l4waWziES?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">var injector = Injector.resolveAndCreate([\n  new Provider(\"message\", { useValue: 'Hello' })\n]);\n\nexpect(injector.get(\"message\")).toEqual('Hello');\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('useExisting') }\" class=\"prettyprint no-bg\" id=\"useExisting-anchor\">useExisting : any</pre>\n<p>Binds a DI token to an existing token.</p> <p><a href=\"injector-class\"><code>Injector</code></a> returns the same instance as if the provided token was used. This is in contrast to <code>useClass</code> where a separate instance of <code>useClass</code> is returned.</p> <p> (<a href=\"http://plnkr.co/edit/QsatsOJJ6P8T2fMe9gr8?p=preview\">live demo</a>)</p> <p>Because <code>useExisting</code> and <code>useClass</code> are often confused the example contains both use cases for easy comparison.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Vehicle {}\n\nclass Car extends Vehicle {}\n\nvar injectorAlias = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle,  useExisting: Car }\n]);\nvar injectorClass = Injector.resolveAndCreate([\n  Car,\n  {provide: Vehicle,  useClass: Car }\n]);\n\nexpect(injectorAlias.get(Vehicle)).toBe(injectorAlias.get(Car));\nexpect(injectorAlias.get(Vehicle) instanceof Car).toBe(true);\n\nexpect(injectorClass.get(Vehicle)).not.toBe(injectorClass.get(Car));\nexpect(injectorClass.get(Vehicle) instanceof Car).toBe(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('useFactory') }\" class=\"prettyprint no-bg\" id=\"useFactory-anchor\">useFactory : Function</pre>\n<p>Binds a DI token to a function which computes the value.</p> <p> (<a href=\"http://plnkr.co/edit/Scoxy0pJNqKGAPZY1VVC?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  {provide: Number,  useFactory: () =&gt; { return 1+2; }},\n  new Provider(String, { useFactory: (value) =&gt; { return \"Value: \" + value; },\n                      deps: [Number] })\n]);\n\nexpect(injector.get(Number)).toEqual(3);\nexpect(injector.get(String)).toEqual('Value: 3');\n</pre>\n<p>Used in conjunction with dependencies.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dependencies') }\" class=\"prettyprint no-bg\" id=\"dependencies-anchor\">dependencies : Object[]</pre>\n<p>Specifies a set of dependencies (as <code>token</code>s) which should be injected into the factory function.</p> <p> (<a href=\"http://plnkr.co/edit/Scoxy0pJNqKGAPZY1VVC?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  {provide: Number,  useFactory: () =&gt; { return 1+2; }},\n  new Provider(String, { useFactory: (value) =&gt; { return \"Value: \" + value; },\n                      deps: [Number] })\n]);\n\nexpect(injector.get(Number)).toEqual(3);\nexpect(injector.get(String)).toEqual('Value: 3');\n</pre>\n<p>Used in conjunction with <code>useFactory</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('multi') }\" class=\"prettyprint no-bg\" id=\"multi-anchor\">multi : boolean</pre>\n<p>Creates multiple providers matching the same token (a multi-provider).</p> <p>Multi-providers are used for creating pluggable service, where the system comes with some default providers, and the user can register additional providers. The combination of the default providers and the additional providers will be used to drive the behavior of the system.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  new Provider(\"Strings\", { useValue: \"String1\", multi: true}),\n  new Provider(\"Strings\", { useValue: \"String2\", multi: true})\n]);\n\nexpect(injector.get(\"Strings\")).toEqual([\"String1\", \"String2\"]);\n</pre>\n<p>Multi-providers and regular providers cannot be mixed. The following will throw an exception:</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var injector = Injector.resolveAndCreate([\n  new Provider(\"Strings\", { useValue: \"String1\", multi: true }),\n  new Provider(\"Strings\", { useValue: \"String2\"})\n]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/provider.ts#L10-L207\">@angular/core/src/di/provider.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Provider-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Provider-class.html</a>\n  </p>\n</div>\n","api/core/index/querylist-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">QueryList</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class QueryList {\n  changes : Observable&lt;any&gt;\n  length : number\n  first : T\n  last : T\n  map(fn: (item: T, index: number, array: T[]) =&gt; U) : U[]\n  filter(fn: (item: T, index: number, array: T[]) =&gt; boolean) : T[]\n  reduce(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) =&gt; U, init: U) : U\n  forEach(fn: (item: T, index: number, array: T[]) =&gt; void) : void\n  some(fn: (value: T, index: number, array: T[]) =&gt; boolean) : boolean\n  toArray() : T[]\n  toString() : string\n  reset(res: Array&lt;T|any[]&gt;) : void\n  notifyOnChanges() : void\n  setDirty()\n  dirty \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An unmodifiable list of items that Angular keeps up to date when the state of the application changes.</p> <p>The type of object that <a href=\"querymetadata-class\"><code>QueryMetadata</code></a> and <a href=\"viewquerymetadata-class\"><code>ViewQueryMetadata</code></a> provide.</p> <p>Implements an iterable interface, therefore it can be used in both ES6 javascript <code>for (var i of items)</code> loops as well as in Angular templates with <code>*ngFor=\"let i of myList\"</code>.</p> <p>Changes can be observed by subscribing to the changes <code>Observable</code>.</p> <p>NOTE: In the future this class will implement an <code>Observable</code> interface.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-rx8sjnqyl9fwuscwme5z-p-preview-\">Example (<a href=\"http://plnkr.co/edit/RX8sJnQYl9FWuSCWme5z?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({...})\nclass Container {\n  @ViewChildren(Item) items:QueryList&lt;Item&gt;;\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class QueryList</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('changes') }\" class=\"prettyprint no-bg\" id=\"changes-anchor\">changes : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('length') }\" class=\"prettyprint no-bg\" id=\"length-anchor\">length : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('first') }\" class=\"prettyprint no-bg\" id=\"first-anchor\">first : T</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('last') }\" class=\"prettyprint no-bg\" id=\"last-anchor\">last : T</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('map') }\" class=\"prettyprint no-bg\" id=\"map-anchor\">map(fn: (item: T, index: number, array: T[]) =&gt; U) : U[]</pre>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.map</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('filter') }\" class=\"prettyprint no-bg\" id=\"filter-anchor\">filter(fn: (item: T, index: number, array: T[]) =&gt; boolean) : T[]</pre>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">Array.filter</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reduce') }\" class=\"prettyprint no-bg\" id=\"reduce-anchor\">reduce(fn: (prevValue: U, curValue: T, curIndex: number, array: T[]) =&gt; U, init: U) : U</pre>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">Array.reduce</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEach') }\" class=\"prettyprint no-bg\" id=\"forEach-anchor\">forEach(fn: (item: T, index: number, array: T[]) =&gt; void) : void</pre>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\">Array.forEach</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('some') }\" class=\"prettyprint no-bg\" id=\"some-anchor\">some(fn: (value: T, index: number, array: T[]) =&gt; boolean) : boolean</pre>\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\">Array.some</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toArray') }\" class=\"prettyprint no-bg\" id=\"toArray-anchor\">toArray() : T[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(res: Array&lt;T|any[]&gt;) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('notifyOnChanges') }\" class=\"prettyprint no-bg\" id=\"notifyOnChanges-anchor\">notifyOnChanges() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setDirty') }\" class=\"prettyprint no-bg\" id=\"setDirty-anchor\">setDirty()</pre>\n<p>internal</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dirty') }\" class=\"prettyprint no-bg\" id=\"dirty-anchor\">dirty</pre>\n<p>internal</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/query_list.ts#L11-L100\">@angular/core/src/linker/query_list.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/QueryList-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/QueryList-class.html</a>\n  </p>\n</div>\n","api/core/index/querymetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">QueryMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class QueryMetadata {\n  constructor(_selector: Type|string, {descendants = false, first = false, read = null}?: {\n    descendants?: boolean,\n    first?: boolean,\n    read?: any\n  })\n  \n  \n  descendants : boolean\n  first : boolean\n  read : any\n  isViewQuery : boolean\n  selector \n  isVarBindingQuery : boolean\n  varBindings : string[]\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares an injectable parameter to be a live list of directives or variable bindings from the content children of a directive.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ly9m8hly7z06vdouasn2-p-preview-\">Example (<a href=\"http://plnkr.co/edit/lY9m8HLy7z06vDoUaSN2?p=preview\">live demo</a>)</h3> <p>Assume that <code>&lt;tabs&gt;</code> component would like to get a list its children <code>&lt;pane&gt;</code> components as shown in this example:</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;tabs&gt;\n  &lt;pane title=\"Overview\"&gt;...&lt;/pane&gt;\n  &lt;pane *ngFor=\"let o of objects\" [title]=\"o.title\"&gt;{{o.text}}&lt;/pane&gt;\n&lt;/tabs&gt;\n</pre>\n<p>The preferred solution is to query for <code>Pane</code> directives using this decorator.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@Component({\n  selector: 'pane',\n  inputs: ['title']\n})\nclass Pane {\n  title:string;\n}\n\n@Component({\n selector: 'tabs',\n template: `\n   &lt;ul&gt;\n     &lt;li *ngFor=\"let pane of panes\"&gt;{{pane.title}}&lt;/li&gt;\n   &lt;/ul&gt;\n   &lt;ng-content&gt;&lt;/ng-content&gt;\n `\n})\nclass Tabs {\n  panes: QueryList&lt;Pane&gt;;\n  constructor(@Query(Pane) panes:QueryList&lt;Pane&gt;) {\n   this.panes = panes;\n }\n}\n</pre>\n<p>A query can look for variable bindings by passing in a string with desired binding symbol.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-st2j25ch1duraybrckx1-p-preview-\">Example (<a href=\"http://plnkr.co/edit/sT2j25cH1dURAyBRCKx1?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;seeker&gt;\n  &lt;div #findme&gt;...&lt;/div&gt;\n&lt;/seeker&gt;\n\n@Component({ selector: 'seeker' })\nclass Seeker {\n  constructor(@Query('findme') elList: QueryList&lt;ElementRef&gt;) {...}\n}\n</pre>\n<p>In this case the object that is injected depend on the type of the variable binding. It can be an ElementRef, a directive or a component.</p> <p>Passing in a comma separated list of variable bindings will query for all of them.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;seeker&gt;\n  &lt;div #find-me&gt;...&lt;/div&gt;\n  &lt;div #find-me-too&gt;...&lt;/div&gt;\n&lt;/seeker&gt;\n\n @Component({\n  selector: 'seeker'\n})\nclass Seeker {\n  constructor(@Query('findMe, findMeToo') elList: QueryList&lt;ElementRef&gt;) {...}\n}\n</pre>\n<p>Configure whether query looks for direct children or all descendants of the querying element, by using the <code>descendants</code> parameter. It is set to <code>false</code> by default.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-wtgeb977bv7qva5ftyl9-p-preview-\">Example (<a href=\"http://plnkr.co/edit/wtGeB977bv7qvA5FTYl9?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;container #first&gt;\n  &lt;item&gt;a&lt;/item&gt;\n  &lt;item&gt;b&lt;/item&gt;\n  &lt;container #second&gt;\n    &lt;item&gt;c&lt;/item&gt;\n  &lt;/container&gt;\n&lt;/container&gt;\n</pre>\n<p>When querying for items, the first container will see only <code>a</code> and <code>b</code> by default, but with <code>Query(TextDirective, {descendants: true})</code> it will see <code>c</code> too.</p> <p>The queried directives are kept in a depth-first pre-order with respect to their positions in the DOM.</p> <p>Query does not look deep into any subcomponent views.</p> <p>Query is updated as part of the change-detection cycle. Since change detection happens after construction of a directive, QueryList will always be empty when observed in the constructor.</p> <p>The injected object is an unmodifiable live list. See <a href=\"querylist-class\"><code>QueryList</code></a> for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class QueryMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {descendants = false, first = false, read = null}?: {\n    descendants?: boolean,\n    first?: boolean,\n    read?: any\n  })</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('descendants') }\" class=\"prettyprint no-bg\" id=\"descendants-anchor\">descendants : boolean</pre>\n<p>whether we want to query only direct children (false) or all children (true).</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('first') }\" class=\"prettyprint no-bg\" id=\"first-anchor\">first : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('read') }\" class=\"prettyprint no-bg\" id=\"read-anchor\">read : any</pre>\n<p>The DI token to read from an element that matches the selector.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isViewQuery') }\" class=\"prettyprint no-bg\" id=\"isViewQuery-anchor\">isViewQuery : boolean</pre>\n<p>always <code>false</code> to differentiate it with <a href=\"viewquerymetadata-class\"><code>ViewQueryMetadata</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('selector') }\" class=\"prettyprint no-bg\" id=\"selector-anchor\">selector</pre>\n<p>what this is querying for.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isVarBindingQuery') }\" class=\"prettyprint no-bg\" id=\"isVarBindingQuery-anchor\">isVarBindingQuery : boolean</pre>\n<p>whether this is querying for a variable binding or a directive.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('varBindings') }\" class=\"prettyprint no-bg\" id=\"varBindings-anchor\">varBindings : string[]</pre>\n<p>returns a list of variable bindings this is querying for. Only applicable if this is a variable bindings query.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L80-L235\">@angular/core/src/metadata/di.ts (line 80)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/QueryMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/QueryMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/reflectivekey-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReflectiveKey</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReflectiveKey {\n  get(token: Object) : ReflectiveKey\n  numberOfKeys : number\n  constructor(token: Object, id: number)\n  \n  \n  token : Object\n  id : number\n  displayName : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A unique object used for retrieving items from the <a href=\"reflectiveinjector-class\"><code>ReflectiveInjector</code></a>.</p> <p>Keys have:</p> <ul> <li>a system-wide unique <code>id</code>.</li> <li>a <code>token</code>.</li> </ul> <p><code>Key</code> is used internally by <a href=\"reflectiveinjector-class\"><code>ReflectiveInjector</code></a> because its system-wide unique <code>id</code> allows the injector to store created objects in a more efficient way.</p> <p><code>Key</code> should not be created directly. <a href=\"reflectiveinjector-class\"><code>ReflectiveInjector</code></a> creates keys automatically when resolving providers.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ReflectiveKey</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(token: Object, id: number)</pre>\n<p>Private</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(token: Object) : ReflectiveKey</pre>\n<p>Retrieves a <code>Key</code> for a token.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('numberOfKeys') }\" class=\"prettyprint no-bg\" id=\"numberOfKeys-anchor\">numberOfKeys : number</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('token') }\" class=\"prettyprint no-bg\" id=\"token-anchor\">token : Object</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('displayName') }\" class=\"prettyprint no-bg\" id=\"displayName-anchor\">displayName : string</pre>\n<p>Returns a stringified token.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_key.ts#L12-L57\">@angular/core/src/di/reflective_key.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ReflectiveKey-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ReflectiveKey-class.html</a>\n  </p>\n</div>\n","api/core/index/rendercomponenttype-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RenderComponentType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RenderComponentType {\n  constructor(id: string, templateUrl: string, slotCount: number, encapsulation: ViewEncapsulation, styles: Array&lt;string|any[]&gt;, animations: {[key: string]: Function})\n  \n  \n  id : string\n  templateUrl : string\n  slotCount : number\n  encapsulation : ViewEncapsulation\n  styles : Array&lt;string|any[]&gt;\n  animations : {[key: string]: Function}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RenderComponentType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: string, templateUrl: string, slotCount: number, encapsulation: ViewEncapsulation, styles: Array&lt;string|any[]&gt;, animations: {[key: string]: Function})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('templateUrl') }\" class=\"prettyprint no-bg\" id=\"templateUrl-anchor\">templateUrl : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('slotCount') }\" class=\"prettyprint no-bg\" id=\"slotCount-anchor\">slotCount : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encapsulation') }\" class=\"prettyprint no-bg\" id=\"encapsulation-anchor\">encapsulation : ViewEncapsulation</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : Array&lt;string|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animations') }\" class=\"prettyprint no-bg\" id=\"animations-anchor\">animations : {[key: string]: Function}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/render/api.ts#L14-L25\">@angular/core/src/render/api.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/RenderComponentType-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/RenderComponentType-class.html</a>\n  </p>\n</div>\n","api/core/index/resolvedreflectivebinding-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResolvedReflectiveBinding</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResolvedReflectiveBinding {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"resolvedreflectiveprovider-interface\"><code>ResolvedReflectiveProvider</code></a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ResolvedReflectiveBinding</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_provider.ts#L70-L77\">@angular/core/src/di/reflective_provider.ts (line 70)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveBinding-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveBinding-interface.html</a>\n  </p>\n</div>\n","api/core/index/resolvedreflectivefactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResolvedReflectiveFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResolvedReflectiveFactory {\n  constructor(factory: Function, dependencies: ReflectiveDependency[])\n  \n  \n  factory : Function\n  dependencies : ReflectiveDependency[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An internal resolved representation of a factory function created by resolving <a href=\"provider-class\"><code>Provider</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ResolvedReflectiveFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(factory: Function, dependencies: ReflectiveDependency[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('factory') }\" class=\"prettyprint no-bg\" id=\"factory-anchor\">factory : Function</pre>\n<p>Factory function which can return an instance of an object represented by a key.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dependencies') }\" class=\"prettyprint no-bg\" id=\"dependencies-anchor\">dependencies : ReflectiveDependency[]</pre>\n<p>Arguments (dependencies) to the <code>factory</code> function.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_provider.ts#L85-L102\">@angular/core/src/di/reflective_provider.ts (line 85)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveFactory-class.html</a>\n  </p>\n</div>\n","api/core/index/reflectiveinjector-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReflectiveInjector</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReflectiveInjector {\n  resolve(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;) : ResolvedReflectiveProvider[]\n  resolveAndCreate(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;, parent?: Injector) : ReflectiveInjector\n  fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector) : ReflectiveInjector\n  fromResolvedBindings(providers: ResolvedReflectiveProvider[]) : ReflectiveInjector\n  parent : Injector\n  resolveAndCreateChild(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;) : ReflectiveInjector\n  createChildFromResolved(providers: ResolvedReflectiveProvider[]) : ReflectiveInjector\n  resolveAndInstantiate(provider: Type|Provider) : any\n  instantiateResolved(provider: ResolvedReflectiveProvider) : any\n  get(token: any, notFoundValue?: any) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A ReflectiveDependency injection container used for instantiating objects and resolving dependencies.</p> <p>An <code>Injector</code> is a replacement for a <code>new</code> operator, which can automatically resolve the constructor dependencies.</p> <p>In typical use, application code asks for the dependencies in the constructor and they are resolved by the <code>Injector</code>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-jzjec0-p-preview-\">Example (<a href=\"http://plnkr.co/edit/jzjec0?p=preview\">live demo</a>)</h3> <p>The following example creates an <code>Injector</code> configured to create <code>Engine</code> and <code>Car</code>.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nvar car = injector.get(Car);\nexpect(car instanceof Car).toBe(true);\nexpect(car.engine instanceof Engine).toBe(true);\n</pre>\n<p>Notice, we don't use the <code>new</code> operator because we explicitly want to have the <code>Injector</code> resolve all of the object's dependencies automatically.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ReflectiveInjector</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolve') }\" class=\"prettyprint no-bg\" id=\"resolve-anchor\">resolve(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;) : ResolvedReflectiveProvider[]</pre>\n<p>Turns an array of provider definitions into an array of resolved providers.</p> <p>A resolution is a process of flattening multiple nested arrays and converting individual providers into an array of <a href=\"resolvedreflectiveprovider-interface\"><code>ResolvedReflectiveProvider</code></a>s.</p> <p> (<a href=\"http://plnkr.co/edit/AiXTHi?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, [[Engine]]]);\n\nexpect(providers.length).toEqual(2);\n\nexpect(providers[0] instanceof ResolvedReflectiveProvider).toBe(true);\nexpect(providers[0].key.displayName).toBe(\"Car\");\nexpect(providers[0].dependencies.length).toEqual(1);\nexpect(providers[0].factory).toBeDefined();\n\nexpect(providers[1].key.displayName).toBe(\"Engine\");\n});\n</pre>\n<p>See <a href=\"reflectiveinjector-class#fromResolvedProviders\"><code>ReflectiveInjector</code></a> for more info.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveAndCreate') }\" class=\"prettyprint no-bg\" id=\"resolveAndCreate-anchor\">resolveAndCreate(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;, parent?: Injector) : ReflectiveInjector</pre>\n<p>Resolves an array of providers and creates an injector from those providers.</p> <p>The passed-in providers can be an array of <code>Type</code>, <a href=\"provider-class\"><code>Provider</code></a>, or a recursive array of more providers.</p> <p> (<a href=\"http://plnkr.co/edit/ePOccA?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Car, Engine]);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</pre>\n<p>This function is slower than the corresponding <code>fromResolvedProviders</code> because it needs to resolve the passed-in providers first. See <a href=\"injector-class#resolve\"><code>Injector</code></a> and <a href=\"injector-class#fromResolvedProviders\"><code>Injector</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fromResolvedProviders') }\" class=\"prettyprint no-bg\" id=\"fromResolvedProviders-anchor\">fromResolvedProviders(providers: ResolvedReflectiveProvider[], parent?: Injector) : ReflectiveInjector</pre>\n<p>Creates an injector from previously resolved providers.</p> <p>This API is the recommended way to construct injectors in performance-sensitive parts.</p> <p> (<a href=\"http://plnkr.co/edit/KrSMci?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar providers = ReflectiveInjector.resolve([Car, Engine]);\nvar injector = ReflectiveInjector.fromResolvedProviders(providers);\nexpect(injector.get(Car) instanceof Car).toBe(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fromResolvedBindings') }\" class=\"prettyprint no-bg\" id=\"fromResolvedBindings-anchor\">fromResolvedBindings(providers: ResolvedReflectiveProvider[]) : ReflectiveInjector</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parent') }\" class=\"prettyprint no-bg\" id=\"parent-anchor\">parent : Injector</pre>\n<p>Parent of this injector.</p>  <p> (<a href=\"http://plnkr.co/edit/eosMGo?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var parent = ReflectiveInjector.resolveAndCreate([]);\nvar child = parent.resolveAndCreateChild([]);\nexpect(child.parent).toBe(parent);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveAndCreateChild') }\" class=\"prettyprint no-bg\" id=\"resolveAndCreateChild-anchor\">resolveAndCreateChild(providers: Array&lt;Type|Provider|{[k: string]: any}|any[]&gt;) : ReflectiveInjector</pre>\n<p>Resolves an array of providers and creates a child injector from those providers.</p>  <p>The passed-in providers can be an array of <code>Type</code>, <a href=\"provider-class\"><code>Provider</code></a>, or a recursive array of more providers.</p> <p> (<a href=\"http://plnkr.co/edit/opB3T4?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class ParentProvider {}\nclass ChildProvider {}\n\nvar parent = ReflectiveInjector.resolveAndCreate([ParentProvider]);\nvar child = parent.resolveAndCreateChild([ChildProvider]);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</pre>\n<p>This function is slower than the corresponding <code>createChildFromResolved</code> because it needs to resolve the passed-in providers first. See <a href=\"injector-class#resolve\"><code>Injector</code></a> and <a href=\"injector-class#createChildFromResolved\"><code>Injector</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createChildFromResolved') }\" class=\"prettyprint no-bg\" id=\"createChildFromResolved-anchor\">createChildFromResolved(providers: ResolvedReflectiveProvider[]) : ReflectiveInjector</pre>\n<p>Creates a child injector from previously resolved providers.</p>  <p>This API is the recommended way to construct injectors in performance-sensitive parts.</p> <p> (<a href=\"http://plnkr.co/edit/VhyfjN?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class ParentProvider {}\nclass ChildProvider {}\n\nvar parentProviders = ReflectiveInjector.resolve([ParentProvider]);\nvar childProviders = ReflectiveInjector.resolve([ChildProvider]);\n\nvar parent = ReflectiveInjector.fromResolvedProviders(parentProviders);\nvar child = parent.createChildFromResolved(childProviders);\n\nexpect(child.get(ParentProvider) instanceof ParentProvider).toBe(true);\nexpect(child.get(ChildProvider) instanceof ChildProvider).toBe(true);\nexpect(child.get(ParentProvider)).toBe(parent.get(ParentProvider));\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveAndInstantiate') }\" class=\"prettyprint no-bg\" id=\"resolveAndInstantiate-anchor\">resolveAndInstantiate(provider: Type|Provider) : any</pre>\n<p>Resolves a provider and instantiates an object in the context of the injector.</p> <p>The created object does not get cached by the injector.</p> <p> (<a href=\"http://plnkr.co/edit/yvVXoB?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\n\nvar car = injector.resolveAndInstantiate(Car);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.resolveAndInstantiate(Car));\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('instantiateResolved') }\" class=\"prettyprint no-bg\" id=\"instantiateResolved-anchor\">instantiateResolved(provider: ResolvedReflectiveProvider) : any</pre>\n<p>Instantiates an object using a resolved provider in the context of the injector.</p> <p>The created object does not get cached by the injector.</p> <p> (<a href=\"http://plnkr.co/edit/ptCImQ?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Injectable()\nclass Engine {\n}\n\n@Injectable()\nclass Car {\n  constructor(public engine:Engine) {}\n}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Engine]);\nvar carProvider = ReflectiveInjector.resolve([Car])[0];\nvar car = injector.instantiateResolved(carProvider);\nexpect(car.engine).toBe(injector.get(Engine));\nexpect(car).not.toBe(injector.instantiateResolved(carProvider));\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(token: any, notFoundValue?: any) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_injector.ts#L324-L606\">@angular/core/src/di/reflective_injector.ts (line 324)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ReflectiveInjector-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ReflectiveInjector-class.html</a>\n  </p>\n</div>\n","api/core/index/renderer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Renderer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Renderer {\n  selectRootElement(selectorOrNode: string|any, debugInfo?: RenderDebugInfo) : any\n  createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo) : any\n  createViewRoot(hostElement: any) : any\n  createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo) : any\n  createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo) : any\n  projectNodes(parentElement: any, nodes: any[]) : void\n  attachViewAfter(node: any, viewRootNodes: any[]) : void\n  detachView(viewRootNodes: any[]) : void\n  destroyView(hostElement: any, viewAllNodes: any[]) : void\n  listen(renderElement: any, name: string, callback: Function) : Function\n  listenGlobal(target: string, name: string, callback: Function) : Function\n  setElementProperty(renderElement: any, propertyName: string, propertyValue: any) : void\n  setElementAttribute(renderElement: any, attributeName: string, attributeValue: string) : void\n  setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string) : void\n  setElementClass(renderElement: any, className: string, isAdd: boolean) : void\n  setElementStyle(renderElement: any, styleName: string, styleValue: string) : void\n  invokeElementMethod(renderElement: any, methodName: string, args?: any[]) : void\n  setText(renderNode: any, text: string) : void\n  animate(element: any, startingStyles: AnimationStyles, keyframes: AnimationKeyframe[], duration: number, delay: number, easing: string) : AnimationPlayer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Renderer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('selectRootElement') }\" class=\"prettyprint no-bg\" id=\"selectRootElement-anchor\">selectRootElement(selectorOrNode: string|any, debugInfo?: RenderDebugInfo) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createElement') }\" class=\"prettyprint no-bg\" id=\"createElement-anchor\">createElement(parentElement: any, name: string, debugInfo?: RenderDebugInfo) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createViewRoot') }\" class=\"prettyprint no-bg\" id=\"createViewRoot-anchor\">createViewRoot(hostElement: any) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createTemplateAnchor') }\" class=\"prettyprint no-bg\" id=\"createTemplateAnchor-anchor\">createTemplateAnchor(parentElement: any, debugInfo?: RenderDebugInfo) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createText') }\" class=\"prettyprint no-bg\" id=\"createText-anchor\">createText(parentElement: any, value: string, debugInfo?: RenderDebugInfo) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('projectNodes') }\" class=\"prettyprint no-bg\" id=\"projectNodes-anchor\">projectNodes(parentElement: any, nodes: any[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attachViewAfter') }\" class=\"prettyprint no-bg\" id=\"attachViewAfter-anchor\">attachViewAfter(node: any, viewRootNodes: any[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detachView') }\" class=\"prettyprint no-bg\" id=\"detachView-anchor\">detachView(viewRootNodes: any[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroyView') }\" class=\"prettyprint no-bg\" id=\"destroyView-anchor\">destroyView(hostElement: any, viewAllNodes: any[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('listen') }\" class=\"prettyprint no-bg\" id=\"listen-anchor\">listen(renderElement: any, name: string, callback: Function) : Function</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('listenGlobal') }\" class=\"prettyprint no-bg\" id=\"listenGlobal-anchor\">listenGlobal(target: string, name: string, callback: Function) : Function</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setElementProperty') }\" class=\"prettyprint no-bg\" id=\"setElementProperty-anchor\">setElementProperty(renderElement: any, propertyName: string, propertyValue: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setElementAttribute') }\" class=\"prettyprint no-bg\" id=\"setElementAttribute-anchor\">setElementAttribute(renderElement: any, attributeName: string, attributeValue: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setBindingDebugInfo') }\" class=\"prettyprint no-bg\" id=\"setBindingDebugInfo-anchor\">setBindingDebugInfo(renderElement: any, propertyName: string, propertyValue: string) : void</pre>\n<p>Used only in debug mode to serialize property changes to dom nodes as attributes.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setElementClass') }\" class=\"prettyprint no-bg\" id=\"setElementClass-anchor\">setElementClass(renderElement: any, className: string, isAdd: boolean) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setElementStyle') }\" class=\"prettyprint no-bg\" id=\"setElementStyle-anchor\">setElementStyle(renderElement: any, styleName: string, styleValue: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('invokeElementMethod') }\" class=\"prettyprint no-bg\" id=\"invokeElementMethod-anchor\">invokeElementMethod(renderElement: any, methodName: string, args?: any[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setText') }\" class=\"prettyprint no-bg\" id=\"setText-anchor\">setText(renderNode: any, text: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animate') }\" class=\"prettyprint no-bg\" id=\"animate-anchor\">animate(element: any, startingStyles: AnimationStyles, keyframes: AnimationKeyframe[], duration: number, delay: number, easing: string) : AnimationPlayer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/render/api.ts#L34-L84\">@angular/core/src/render/api.ts (line 34)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Renderer-class.html</a>\n  </p>\n</div>\n","api/core/index/resolvedreflectiveprovider-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResolvedReflectiveProvider</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResolvedReflectiveProvider {\n  key : ReflectiveKey\n  resolvedFactories : ResolvedReflectiveFactory[]\n  multiProvider : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An internal resolved representation of a <a href=\"provider-class\"><code>Provider</code></a> used by the <a href=\"injector-class\"><code>Injector</code></a>.</p> <p>It is usually created automatically by <code>Injector.resolveAndCreate</code>.</p> <p>It can be created manually, as follows:</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-rfenhh8kuei0g3qsniet-p-3dpreview-p-preview-\">Example (<a href=\"http://plnkr.co/edit/RfEnhh8kUEI0G3qsnIeT?p%3Dpreview&amp;p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var resolvedProviders = Injector.resolve([new Provider('message', {useValue: 'Hello'})]);\nvar injector = Injector.fromResolvedProviders(resolvedProviders);\n\nexpect(injector.get('message')).toEqual('Hello');\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ResolvedReflectiveProvider</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('key') }\" class=\"prettyprint no-bg\" id=\"key-anchor\">key : ReflectiveKey</pre>\n<p>A key, usually a <code>Type</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolvedFactories') }\" class=\"prettyprint no-bg\" id=\"resolvedFactories-anchor\">resolvedFactories : ResolvedReflectiveFactory[]</pre>\n<p>Factory function which can return an instance of an object represented by a key.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('multiProvider') }\" class=\"prettyprint no-bg\" id=\"multiProvider-anchor\">multiProvider : boolean</pre>\n<p>Indicates if the provider is a multi-provider or a regular provider.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/reflective_provider.ts#L35-L70\">@angular/core/src/di/reflective_provider.ts (line 35)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveProvider-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ResolvedReflectiveProvider-interface.html</a>\n  </p>\n</div>\n","api/core/index/rootrenderer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RootRenderer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RootRenderer {\n  renderComponent(componentType: RenderComponentType) : Renderer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Injectable service that provides a low-level interface for modifying the UI.</p> <p>Use this service to bypass Angular's templating and make custom UI changes that can't be expressed declaratively. For example if you need to set a property or an attribute whose name is not statically known, use <a href=\"#setElementProperty\">setElementProperty</a> or <a href=\"#setElementAttribute\">setElementAttribute</a> respectively.</p> <p>If you are implementing a custom renderer, you must implement this interface.</p> <p>The default Renderer implementation is <code>DomRenderer</code>. Also available is <code>WebWorkerRenderer</code>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RootRenderer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('renderComponent') }\" class=\"prettyprint no-bg\" id=\"renderComponent-anchor\">renderComponent(componentType: RenderComponentType) : Renderer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/render/api.ts#L84-L101\">@angular/core/src/render/api.ts (line 84)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/RootRenderer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/RootRenderer-class.html</a>\n  </p>\n</div>\n","api/core/index/simplechange-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SimpleChange</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SimpleChange {\n  constructor(previousValue: any, currentValue: any)\n  \n  \n  previousValue : any\n  currentValue : any\n  isFirstChange() : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents a basic change from a previous to a new value.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SimpleChange</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(previousValue: any, currentValue: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('previousValue') }\" class=\"prettyprint no-bg\" id=\"previousValue-anchor\">previousValue : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('currentValue') }\" class=\"prettyprint no-bg\" id=\"currentValue-anchor\">currentValue : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isFirstChange') }\" class=\"prettyprint no-bg\" id=\"isFirstChange-anchor\">isFirstChange() : boolean</pre>\n<p>Check whether the new value is the first value assigned.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/change_detection_util.ts#L71-L84\">@angular/core/src/change_detection/change_detection_util.ts (line 71)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SimpleChange-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SimpleChange-class.html</a>\n  </p>\n</div>\n","api/core/index/schemametadata-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SchemaMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SchemaMetadata {\n  name : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for schema definitions in @NgModules.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SchemaMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/ng_module.ts#L20-L27\">@angular/core/src/metadata/ng_module.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SchemaMetadata-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SchemaMetadata-interface.html</a>\n  </p>\n</div>\n","api/core/index/securitycontext-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">SecurityContext</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SecurityContext {\n  NONE \n  HTML \n  STYLE \n  SCRIPT \n  URL \n  RESOURCE_URL \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum SecurityContext</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('NONE') }\" class=\"prettyprint no-bg\" id=\"NONE-anchor\">NONE</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('HTML') }\" class=\"prettyprint no-bg\" id=\"HTML-anchor\">HTML</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('STYLE') }\" class=\"prettyprint no-bg\" id=\"STYLE-anchor\">STYLE</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('SCRIPT') }\" class=\"prettyprint no-bg\" id=\"SCRIPT-anchor\">SCRIPT</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('URL') }\" class=\"prettyprint no-bg\" id=\"URL-anchor\">URL</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('RESOURCE_URL') }\" class=\"prettyprint no-bg\" id=\"RESOURCE_URL-anchor\">RESOURCE_URL</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/security.ts#L1-L25\">@angular/core/src/security.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SecurityContext-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SecurityContext-enum.html</a>\n  </p>\n</div>\n","api/core/index/self-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">Self: SelfMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export Self</pre>\n<p>Factory for creating <a href=\"selfmetadata-class\"><code>SelfMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L95-L95\">@angular/core/src/di/decorators.ts (line 95)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Self-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Self-var.html</a>\n  </p>\n</div>\n","api/core/index/selfmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SelfMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SelfMetadata {\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Specifies that an <a href=\"injector-class\"><code>Injector</code></a> should retrieve a dependency only from itself.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-neagag-p-preview-\">Example (<a href=\"http://plnkr.co/edit/NeagAg?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Dependency {\n}\n\n@Injectable()\nclass NeedsDependency {\n  dependency;\n  constructor(@Self() dependency:Dependency) {\n    this.dependency = dependency;\n  }\n}\n\nvar inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\nvar nd = inj.get(NeedsDependency);\n\nexpect(nd.dependency instanceof Dependency).toBe(true);\n\nvar inj = Injector.resolveAndCreate([Dependency]);\nvar child = inj.resolveAndCreateChild([NeedsDependency]);\nexpect(() =&gt; child.get(NeedsDependency)).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SelfMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L126-L158\">@angular/core/src/di/metadata.ts (line 126)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SelfMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SelfMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/simplechanges-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SimpleChanges</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SimpleChanges {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A <code>changes</code> object whose keys are property names and values are instances of <a href=\"simplechange-class\"><code>SimpleChange</code></a>. See <a href=\"onchanges-class\"><code>OnChanges</code></a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SimpleChanges</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/lifecycle_hooks.ts#L23-L30\">@angular/core/src/metadata/lifecycle_hooks.ts (line 23)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SimpleChanges-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SimpleChanges-interface.html</a>\n  </p>\n</div>\n","api/core/index/skipself-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">SkipSelf: SkipSelfMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export SkipSelf</pre>\n<p>Factory for creating <a href=\"skipselfmetadata-class\"><code>SkipSelfMetadata</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L109-L109\">@angular/core/src/di/decorators.ts (line 109)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SkipSelf-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SkipSelf-var.html</a>\n  </p>\n</div>\n","api/core/index/skipselfmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SkipSelfMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SkipSelfMetadata {\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Specifies that the dependency resolution should start from the parent injector.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-wchdzb-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Wchdzb?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">class Dependency {\n}\n\n@Injectable()\nclass NeedsDependency {\n  dependency;\n  constructor(@SkipSelf() dependency:Dependency) {\n    this.dependency = dependency;\n  }\n}\n\nvar parent = Injector.resolveAndCreate([Dependency]);\nvar child = parent.resolveAndCreateChild([NeedsDependency]);\nexpect(child.get(NeedsDependency).dependency instanceof Depedency).toBe(true);\n\nvar inj = Injector.resolveAndCreate([Dependency, NeedsDependency]);\nexpect(() =&gt; inj.get(NeedsDependency)).toThrowError();\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SkipSelfMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/metadata.ts#L158-L188\">@angular/core/src/di/metadata.ts (line 158)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SkipSelfMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SkipSelfMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/selfmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SelfMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SelfMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"selfmetadata-class\"><code>SelfMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SelfMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L39-L48\">@angular/core/src/di/decorators.ts (line 39)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SelfMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SelfMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/skipselfmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SkipSelfMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SkipSelfMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for creating <a href=\"skipselfmetadata-class\"><code>SkipSelfMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SkipSelfMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/decorators.ts#L57-L66\">@angular/core/src/di/decorators.ts (line 57)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SkipSelfMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SkipSelfMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/systemjscmpfactoryresolver-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SystemJsCmpFactoryResolver</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Lazy loading of components is deprecated. Use <a href=\"systemjsngmoduleloader-class\"><code>SystemJsNgModuleLoader</code></a> to lazy load <a href=\"ngmodulefactory-class\"><code>NgModuleFactory</code></a>s instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SystemJsCmpFactoryResolver {\n  constructor(_console: Console)\n  \n  \n  resolveComponent(componentType: string|Type) : Promise&lt;ComponentFactory&lt;any&gt;&gt;\n  clearCache() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Component resolver that can load component factories lazily</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SystemJsCmpFactoryResolver</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_console: Console)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveComponent') }\" class=\"prettyprint no-bg\" id=\"resolveComponent-anchor\">resolveComponent(componentType: string|Type) : Promise&lt;ComponentFactory&lt;any&gt;&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearCache') }\" class=\"prettyprint no-bg\" id=\"clearCache-anchor\">clearCache() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/systemjs_component_resolver.ts#L51-L76\">@angular/core/src/linker/systemjs_component_resolver.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SystemJsCmpFactoryResolver-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SystemJsCmpFactoryResolver-class.html</a>\n  </p>\n</div>\n","api/core/index/systemjscomponentresolver-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SystemJsComponentResolver</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Lazy loading of components is deprecated. Use <a href=\"systemjsngmoduleloader-class\"><code>SystemJsNgModuleLoader</code></a> to lazy load <a href=\"ngmodulefactory-class\"><code>NgModuleFactory</code></a>s instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SystemJsComponentResolver {\n  constructor(_resolver: ComponentResolver, _console: Console)\n  \n  \n  resolveComponent(componentType: string|Type) : Promise&lt;ComponentFactory&lt;any&gt;&gt;\n  clearCache() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Component resolver that can load components lazily</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SystemJsComponentResolver</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_resolver: ComponentResolver, _console: Console)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveComponent') }\" class=\"prettyprint no-bg\" id=\"resolveComponent-anchor\">resolveComponent(componentType: string|Type) : Promise&lt;ComponentFactory&lt;any&gt;&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearCache') }\" class=\"prettyprint no-bg\" id=\"clearCache-anchor\">clearCache() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/systemjs_component_resolver.ts#L16-L48\">@angular/core/src/linker/systemjs_component_resolver.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SystemJsComponentResolver-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SystemJsComponentResolver-class.html</a>\n  </p>\n</div>\n","api/core/index/systemjsngmoduleloader-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SystemJsNgModuleLoader</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SystemJsNgModuleLoader {\n  constructor(_compiler: Compiler)\n  \n  \n  load(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;\n  loadAndCompile(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;\n  loadFactory(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>NgModuleFactoryLoader that uses SystemJS to load NgModuleFactory</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SystemJsNgModuleLoader</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_compiler: Compiler)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('load') }\" class=\"prettyprint no-bg\" id=\"load-anchor\">load(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('loadAndCompile') }\" class=\"prettyprint no-bg\" id=\"loadAndCompile-anchor\">loadAndCompile(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('loadFactory') }\" class=\"prettyprint no-bg\" id=\"loadFactory-anchor\">loadFactory(path: string) : Promise&lt;NgModuleFactory&lt;any&gt;&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/system_js_ng_module_factory_loader.ts#L20-L55\">@angular/core/src/linker/system_js_ng_module_factory_loader.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SystemJsNgModuleLoader-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SystemJsNgModuleLoader-class.html</a>\n  </p>\n</div>\n","api/core/index/outputmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">OutputMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class OutputMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><a href=\"outputmetadata-class\"><code>OutputMetadata</code></a> factory for creating decorators.</p> <p>See <a href=\"outputmetadata-class\"><code>OutputMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface OutputMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L287-L298\">@angular/core/src/metadata.ts (line 287)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/OutputMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/OutputMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/package_root_url-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PACKAGE_ROOT_URL</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PACKAGE_ROOT_URL</pre>\n<p>A token which indicates the root directory of the application</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_tokens.ts#L64-L64\">@angular/core/src/application_tokens.ts (line 64)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/PACKAGE_ROOT_URL-let.html</a>\n  </p>\n</div>\n","api/core/index/templateref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">TemplateRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TemplateRef {\n  C \n  elementRef : ElementRef\n  createEmbeddedView(context: C) : EmbeddedViewRef&lt;C&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents an Embedded Template that can be used to instantiate Embedded Views.</p> <p>You can access a <code>TemplateRef</code>, in two ways. Via a directive placed on a <code>&lt;template&gt;</code> element (or directive prefixed with <code>*</code>) and have the <code>TemplateRef</code> for this Embedded View injected into the constructor of the directive using the <code>TemplateRef</code> Token. Alternatively you can query for the <code>TemplateRef</code> from a Component or a Directive via <a href=\"query-var\"><code>Query</code></a>.</p> <p>To instantiate Embedded Views based on a Template, use <a href=\"viewcontainerref-class#createEmbeddedView\"><code>ViewContainerRef</code></a>, which will create the View and attach it to the View Container.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class TemplateRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('C') }\" class=\"prettyprint no-bg\" id=\"C-anchor\">C</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('elementRef') }\" class=\"prettyprint no-bg\" id=\"elementRef-anchor\">elementRef : ElementRef</pre>\n<p>The location in the View where the Embedded View logically belongs to.</p> <p>The data-binding and injection contexts of Embedded Views created from this <code>TemplateRef</code> inherit from the contexts of this location.</p> <p>Typically new Embedded Views are attached to the View Container of this location, but in advanced use-cases, the View can be attached to a different container while keeping the data-binding and injection context from the original location.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createEmbeddedView') }\" class=\"prettyprint no-bg\" id=\"createEmbeddedView-anchor\">createEmbeddedView(context: C) : EmbeddedViewRef&lt;C&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/template_ref.ts#L12-L43\">@angular/core/src/linker/template_ref.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/TemplateRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/TemplateRef-class.html</a>\n  </p>\n</div>\n","api/core/index/testability-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testability</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Testability {\n  constructor(_ngZone: NgZone)\n  \n  \n  increasePendingRequestCount() : number\n  decreasePendingRequestCount() : number\n  isStable() : boolean\n  whenStable(callback: Function) : void\n  getPendingRequestCount() : number\n  findBindings(using: any, provider: string, exactMatch: boolean) : any[]\n  findProviders(using: any, provider: string, exactMatch: boolean) : any[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The Testability service provides testing hooks that can be accessed from the browser and by services such as Protractor. Each bootstrapped Angular application on the page will have an instance of Testability.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Testability</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_ngZone: NgZone)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('increasePendingRequestCount') }\" class=\"prettyprint no-bg\" id=\"increasePendingRequestCount-anchor\">increasePendingRequestCount() : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('decreasePendingRequestCount') }\" class=\"prettyprint no-bg\" id=\"decreasePendingRequestCount-anchor\">decreasePendingRequestCount() : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isStable') }\" class=\"prettyprint no-bg\" id=\"isStable-anchor\">isStable() : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('whenStable') }\" class=\"prettyprint no-bg\" id=\"whenStable-anchor\">whenStable(callback: Function) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getPendingRequestCount') }\" class=\"prettyprint no-bg\" id=\"getPendingRequestCount-anchor\">getPendingRequestCount() : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('findBindings') }\" class=\"prettyprint no-bg\" id=\"findBindings-anchor\">findBindings(using: any, provider: string, exactMatch: boolean) : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('findProviders') }\" class=\"prettyprint no-bg\" id=\"findProviders-anchor\">findProviders(using: any, provider: string, exactMatch: boolean) : any[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/testability/testability.ts#L13-L113\">@angular/core/src/testability/testability.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Testability-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Testability-class.html</a>\n  </p>\n</div>\n","api/core/index/type-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Type</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Type {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Runtime representation a type that a Component or other object is instances of.</p> <p>An example of a <code>Type</code> is <code>MyCustomComponent</code> class, which in JavaScript is be represented by the <code>MyCustomComponent</code> constructor function.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Type</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/facade/lang.ts#L68-L68\">@angular/core/src/facade/lang.ts (line 68)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/Type-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/Type-interface.html</a>\n  </p>\n</div>\n","api/core/index/typedecorator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">TypeDecorator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TypeDecorator {\n  annotations : any[]\n  Class(obj: ClassDefinition) : ConcreteType&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface implemented by all Angular type decorators, which allows them to be used as ES7 decorators as well as Angular DSL syntax.</p> <p>DSL syntax:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var MyClass = ng\n  .Component({...})\n  .View({...})\n  .Class({...});\n</pre>\n<p>ES7 syntax:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@ng.Component({...})\n@ng.View({...})\nclass MyClass {...}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface TypeDecorator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('annotations') }\" class=\"prettyprint no-bg\" id=\"annotations-anchor\">annotations : any[]</pre>\n<p>Storage for the accumulated annotations so far used by the DSL syntax.</p> <p>Used by <a href=\"class-function\"><code>Class</code></a> to annotate the generated class.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Class') }\" class=\"prettyprint no-bg\" id=\"Class-anchor\">Class(obj: ClassDefinition) : ConcreteType&lt;any&gt;</pre>\n<p>Generate a class from the definition and annotate it with <a href=\"typedecorator-interface#annotations\"><code>TypeDecorator</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/util/decorators.ts#L40-L88\">@angular/core/src/util/decorators.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/TypeDecorator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/TypeDecorator-interface.html</a>\n  </p>\n</div>\n","api/core/index/viewchildmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChildMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewChildMetadata {\n  constructor(_selector: Type|string, {read = null}?: {read?: any})\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares a reference of child element.</p> <p><code>ViewChildren</code> takes an argument to select elements.</p> <ul> <li>\n<p>If the argument is a type, a directive or a component with the type will be bound.</p> <p>If the argument is a string, the string is interpreted as a selector. An element containing the matching template variable (e.g. <code>#child</code>) will be bound.</p> </li> </ul> <p>In either case, <code>@ViewChild()</code> assigns the first (looking from above) element if there are multiple matches.</p> <p>View child is set before the <code>ngAfterViewInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <p>With type selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: '&lt;child-cmp&gt;&lt;/child-cmp&gt;',\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChild(ChildCmp) child:ChildCmp;\n\n  ngAfterViewInit() {\n    // child is set\n    this.child.doSomething();\n  }\n}\n</pre>\n<p>With string selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: '&lt;child-cmp #child&gt;&lt;/child-cmp&gt;',\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChild('child') child:ChildCmp;\n\n  ngAfterViewInit() {\n    // child is set\n    this.child.doSomething();\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewChildMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {read = null}?: {read?: any})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L427-L504\">@angular/core/src/metadata/di.ts (line 427)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChildMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChildMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/viewchildmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChildMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewChildMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for <a href=\"viewchild-var\"><code>ViewChild</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ViewChildMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L253-L262\">@angular/core/src/metadata.ts (line 253)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChildMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChildMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/viewchildren-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChildren: ViewChildrenMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ViewChildren</pre>\n<p>Declares a list of child element references.</p> <p>Angular automatically updates the list when the DOM is updated.</p> <p><code>ViewChildren</code> takes a argument to select elements.</p> <ul> <li>\n<p>If the argument is a type, directives or components with the type will be bound.</p> </li> <li>\n<p>If the argument is a string, the string is interpreted as a list of comma-separated selectors. For each selector, an element containing the matching template variable (e.g. <code>#child</code>) will be bound.</p> </li> </ul> <p>View children are set before the <code>ngAfterViewInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <p>With type selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: `\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n  `,\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChildren(ChildCmp) children:QueryList&lt;ChildCmp&gt;;\n\n  ngAfterViewInit() {\n    // children are set\n    this.children.toArray().forEach((child)=&gt;child.doSomething());\n  }\n}\n</pre>\n<p>With string selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: `\n    &lt;child-cmp #child1&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp #child2&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp #child3&gt;&lt;/child-cmp&gt;\n  `,\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChildren('child1,child2,child3') children:QueryList&lt;ChildCmp&gt;;\n\n  ngAfterViewInit() {\n    // children are set\n    this.children.toArray().forEach((child)=&gt;child.doSomething());\n  }\n}\n</pre>\n<p>See also: [ViewChildrenMetadata]</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1019-L1019\">@angular/core/src/metadata.ts (line 1019)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChildren-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChildren-var.html</a>\n  </p>\n</div>\n","api/core/index/sanitizationservice-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">SanitizationService</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SanitizationService {\n  sanitize(context: SecurityContext, value: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>SanitizationService is used by the views to sanitize potentially dangerous values.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class SanitizationService</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('sanitize') }\" class=\"prettyprint no-bg\" id=\"sanitize-anchor\">sanitize(context: SecurityContext, value: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/security.ts#L25-L34\">@angular/core/src/security.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/SanitizationService-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/SanitizationService-class.html</a>\n  </p>\n</div>\n","api/core/index/viewchildrenmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChildrenMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewChildrenMetadata {\n  constructor(_selector: Type|string, {read = null}?: {read?: any})\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Declares a list of child element references.</p> <p>Angular automatically updates the list when the DOM is updated.</p> <p><code>ViewChildren</code> takes an argument to select elements.</p> <ul> <li>\n<p>If the argument is a type, directives or components with the type will be bound.</p> </li> <li>\n<p>If the argument is a string, the string is interpreted as a list of comma-separated selectors. For each selector, an element containing the matching template variable (e.g. <code>#child</code>) will be bound.</p> </li> </ul> <p>View children are set before the <code>ngAfterViewInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <p>With type selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: `\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp&gt;&lt;/child-cmp&gt;\n  `,\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChildren(ChildCmp) children:QueryList&lt;ChildCmp&gt;;\n\n  ngAfterViewInit() {\n    // children are set\n    this.children.toArray().forEach((child)=&gt;child.doSomething());\n  }\n}\n</pre>\n<p>With string selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: `\n    &lt;child-cmp #child1&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp #child2&gt;&lt;/child-cmp&gt;\n    &lt;child-cmp #child3&gt;&lt;/child-cmp&gt;\n  `,\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChildren('child1,child2,child3') children:QueryList&lt;ChildCmp&gt;;\n\n  ngAfterViewInit() {\n    // children are set\n    this.children.toArray().forEach((child)=&gt;child.doSomething());\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewChildrenMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {read = null}?: {read?: any})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L343-L427\">@angular/core/src/metadata/di.ts (line 343)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChildrenMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChildrenMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/viewchildrenmetadatafactory-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChildrenMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewChildrenMetadataFactory {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Factory for <a href=\"viewchildren-var\"><code>ViewChildren</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ViewChildrenMetadataFactory</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L244-L253\">@angular/core/src/metadata.ts (line 244)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChildrenMetadataFactory-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChildrenMetadataFactory-interface.html</a>\n  </p>\n</div>\n","api/core/index/viewcontainerref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewContainerRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewContainerRef {\n  element : ElementRef\n  injector : Injector\n  parentInjector : Injector\n  clear() : void\n  get(index: number) : ViewRef\n  length : number\n  createEmbeddedView(templateRef: TemplateRef&lt;C&gt;, context?: C, index?: number) : EmbeddedViewRef&lt;C&gt;\n  createComponent(componentFactory: ComponentFactory&lt;C&gt;, index?: number, injector?: Injector, projectableNodes?: any[][]) : ComponentRef&lt;C&gt;\n  insert(viewRef: ViewRef, index?: number) : ViewRef\n  move(viewRef: ViewRef, currentIndex: number) : ViewRef\n  indexOf(viewRef: ViewRef) : number\n  remove(index?: number) : void\n  detach(index?: number) : ViewRef\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Represents a container where one or more Views can be attached.</p> <p>The container can contain two kinds of Views. Host Views, created by instantiating a <a href=\"component-decorator\"><code>Component</code></a> via <a href=\"#createComponent\">createComponent</a>, and Embedded Views, created by instantiating an <a href=\"templateref-class\">Embedded Template</a> via <a href=\"#createEmbeddedView\">createEmbeddedView</a>.</p> <p>The location of the View Container within the containing View is specified by the Anchor <code>element</code>. Each View Container can have only one Anchor Element and each Anchor Element can only have a single View Container.</p> <p>Root elements of Views attached to this container become siblings of the Anchor Element in the Rendered View.</p> <p>To access a <code>ViewContainerRef</code> of an Element, you can either place a <a href=\"directive-decorator\"><code>Directive</code></a> injected with <code>ViewContainerRef</code> on the Element, or you obtain it via a <a href=\"viewchild-var\"><code>ViewChild</code></a> query.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewContainerRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('element') }\" class=\"prettyprint no-bg\" id=\"element-anchor\">element : ElementRef</pre>\n<p>Anchor element that specifies the location of this container in the containing View. </p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parentInjector') }\" class=\"prettyprint no-bg\" id=\"parentInjector-anchor\">parentInjector : Injector</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clear') }\" class=\"prettyprint no-bg\" id=\"clear-anchor\">clear() : void</pre>\n<p>Destroys all Views in this container.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(index: number) : ViewRef</pre>\n<p>Returns the <a href=\"viewref-class\"><code>ViewRef</code></a> for the View located in this container at the specified index.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('length') }\" class=\"prettyprint no-bg\" id=\"length-anchor\">length : number</pre>\n<p>Returns the number of Views currently attached to this container.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createEmbeddedView') }\" class=\"prettyprint no-bg\" id=\"createEmbeddedView-anchor\">createEmbeddedView(templateRef: TemplateRef&lt;C&gt;, context?: C, index?: number) : EmbeddedViewRef&lt;C&gt;</pre>\n<p>Instantiates an Embedded View based on the <a href=\"templateref-class\"><code>templateRef</code></a> and inserts it into this container at the specified <code>index</code>.</p> <p>If <code>index</code> is not specified, the new View will be inserted as the last View in the container.</p> <p>Returns the <a href=\"viewref-class\"><code>ViewRef</code></a> for the newly created View.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createComponent') }\" class=\"prettyprint no-bg\" id=\"createComponent-anchor\">createComponent(componentFactory: ComponentFactory&lt;C&gt;, index?: number, injector?: Injector, projectableNodes?: any[][]) : ComponentRef&lt;C&gt;</pre>\n<p>Instantiates a single <a href=\"component-decorator\"><code>Component</code></a> and inserts its Host View into this container at the specified <code>index</code>.</p> <p>The component is instantiated using its <a href=\"componentfactory-class\"><code>ComponentFactory</code></a> which can be obtained via <a href=\"componentresolver-class#resolveComponent\"><code>ComponentResolver</code></a>.</p> <p>If <code>index</code> is not specified, the new View will be inserted as the last View in the container.</p> <p>You can optionally specify the <a href=\"injector-class\"><code>Injector</code></a> that will be used as parent for the Component.</p> <p>Returns the <a href=\"componentref-class\"><code>ComponentRef</code></a> of the Host View created for the newly instantiated Component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('insert') }\" class=\"prettyprint no-bg\" id=\"insert-anchor\">insert(viewRef: ViewRef, index?: number) : ViewRef</pre>\n<p>Inserts a View identified by a <a href=\"viewref-class\"><code>ViewRef</code></a> into the container at the specified <code>index</code>.</p> <p>If <code>index</code> is not specified, the new View will be inserted as the last View in the container.</p> <p>Returns the inserted <a href=\"viewref-class\"><code>ViewRef</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('move') }\" class=\"prettyprint no-bg\" id=\"move-anchor\">move(viewRef: ViewRef, currentIndex: number) : ViewRef</pre>\n<p>Moves a View identified by a <a href=\"viewref-class\"><code>ViewRef</code></a> into the container at the specified <code>index</code>.</p> <p>Returns the inserted <a href=\"viewref-class\"><code>ViewRef</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('indexOf') }\" class=\"prettyprint no-bg\" id=\"indexOf-anchor\">indexOf(viewRef: ViewRef) : number</pre>\n<p>Returns the index of the View, specified via <a href=\"viewref-class\"><code>ViewRef</code></a>, within the current container or <code>-1</code> if this container doesn't contain the View.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('remove') }\" class=\"prettyprint no-bg\" id=\"remove-anchor\">remove(index?: number) : void</pre>\n<p>Destroys a View attached to this container at the specified <code>index</code>.</p> <p>If <code>index</code> is not specified, the last View in the container will be removed.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detach') }\" class=\"prettyprint no-bg\" id=\"detach-anchor\">detach(index?: number) : ViewRef</pre>\n<p>Use along with <a href=\"#insert\">insert</a> to move a View within the current container.</p> <p>If the <code>index</code> param is omitted, the last <a href=\"viewref-class\"><code>ViewRef</code></a> is detached.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/view_container_ref.ts#L18-L128\">@angular/core/src/linker/view_container_ref.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewContainerRef-class.html</a>\n  </p>\n</div>\n","api/core/index/viewencapsulation-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewEncapsulation</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewEncapsulation {\n  Emulated \n  Native \n  None \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines template and style encapsulation options available for Component's <a href=\"component-decorator\"><code>Component</code></a>.</p> <p>See <a href=\"viewmetadata-class#encapsulation\"><code>ViewMetadata</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum ViewEncapsulation</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Emulated') }\" class=\"prettyprint no-bg\" id=\"Emulated-anchor\">Emulated</pre>\n<p>Emulate <code>Native</code> scoping of styles by adding an attribute containing surrogate id to the Host Element and pre-processing the style rules provided via <a href=\"viewmetadata-class#styles\"><code>ViewMetadata</code></a> or <a href=\"viewmetadata-class#stylesUrls\"><code>ViewMetadata</code></a>, and adding the new Host Element attribute to all selectors.</p> <p>This is the default option.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Native') }\" class=\"prettyprint no-bg\" id=\"Native-anchor\">Native</pre>\n<p>Use the native encapsulation mechanism of the renderer.</p> <p>For the DOM this means using <a href=\"https://w3c.github.io/webcomponents/spec/shadow/\">Shadow DOM</a> and creating a ShadowRoot for Component's Host Element.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('None') }\" class=\"prettyprint no-bg\" id=\"None-anchor\">None</pre>\n<p>Don't provide any template or style encapsulation.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/view.ts#L10-L40\">@angular/core/src/metadata/view.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewEncapsulation-enum.html</a>\n  </p>\n</div>\n","api/core/index/viewquery-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewQuery: QueryMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>@Annotation</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ViewQuery</pre>\n<p>Similar to <a href=\"querymetadata-class\"><code>QueryMetadata</code></a>, but querying the component view, instead of the content children.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ensfhdf7yjym6izkxm1j-p-preview-\">Example (<a href=\"http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@Component({\n  ...,\n  template: `\n    &lt;item&gt; a &lt;/item&gt;\n    &lt;item&gt; b &lt;/item&gt;\n    &lt;item&gt; c &lt;/item&gt;\n  `\n})\nclass MyComponent {\n  shown: boolean;\n\n  constructor(private @Query(Item) items:QueryList&lt;Item&gt;) {\n    items.changes.subscribe(() =&gt; console.log(items.length));\n  }\n}\n</pre>\n<p>Supports the same querying parameters as <a href=\"querymetadata-class\"><code>QueryMetadata</code></a>, except <code>descendants</code>. This always queries the whole view.</p> <p>As <code>shown</code> is flipped between true and false, items will contain zero of one items.</p> <p>Specifies that a <a href=\"querylist-class\"><code>QueryList</code></a> should be injected.</p> <p>The injected object is an iterable and observable live list. See <a href=\"querylist-class\"><code>QueryList</code></a> for more details.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1134-L1134\">@angular/core/src/metadata.ts (line 1134)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewQuery-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewQuery-var.html</a>\n  </p>\n</div>\n","api/core/index/viewmetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use ComponentMetadata instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewMetadata {\n  constructor({templateUrl, template, directives, pipes, encapsulation, styles, styleUrls, animations,\n       interpolation}?: {\n        templateUrl?: string,\n        template?: string,\n        directives?: Array&lt;Type|any[]&gt;,\n        pipes?: Array&lt;Type|any[]&gt;,\n        encapsulation?: ViewEncapsulation,\n        styles?: string[],\n        styleUrls?: string[],\n        animations?: AnimationEntryMetadata[],\n        interpolation?: [string, string]\n      })\n  \n  \n  templateUrl : string\n  template : string\n  styleUrls : string[]\n  styles : string[]\n  directives : Array&lt;Type|any[]&gt;\n  pipes : Array&lt;Type|any[]&gt;\n  encapsulation : ViewEncapsulation\n  animations : AnimationEntryMetadata[]\n  interpolation : [string, string]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Metadata properties available for configuring Views.</p> <p>Each Angular component requires a single <code>@Component</code> and at least one <code>@View</code> annotation. The <code>@View</code> annotation specifies the HTML template to use, and lists the directives that are active within the template.</p> <p>When a component is instantiated, the template is loaded into the component's shadow root, and the expressions and statements in the template are evaluated against the component.</p> <p>For details on the <code>@Component</code> annotation, see <a href=\"componentmetadata-class\"><code>ComponentMetadata</code></a>.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'greet',\n  template: 'Hello {{name}}!',\n  directives: [GreetUser, Bold]\n})\nclass Greet {\n  name: string;\n\n  constructor() {\n    this.name = 'World';\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({templateUrl, template, directives, pipes, encapsulation, styles, styleUrls, animations,\n       interpolation}?: {\n        templateUrl?: string,\n        template?: string,\n        directives?: Array&lt;Type|any[]&gt;,\n        pipes?: Array&lt;Type|any[]&gt;,\n        encapsulation?: ViewEncapsulation,\n        styles?: string[],\n        styleUrls?: string[],\n        animations?: AnimationEntryMetadata[],\n        interpolation?: [string, string]\n      })</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('templateUrl') }\" class=\"prettyprint no-bg\" id=\"templateUrl-anchor\">templateUrl : string</pre>\n<p>Specifies a template URL for an Angular component.</p> <p>NOTE: Only one of <code>templateUrl</code> or <code>template</code> can be defined per View.</p>  \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('template') }\" class=\"prettyprint no-bg\" id=\"template-anchor\">template : string</pre>\n<p>Specifies an inline template for an Angular component.</p> <p>NOTE: Only one of <code>templateUrl</code> or <code>template</code> can be defined per View.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styleUrls') }\" class=\"prettyprint no-bg\" id=\"styleUrls-anchor\">styleUrls : string[]</pre>\n<p>Specifies stylesheet URLs for an Angular component.</p>  \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('styles') }\" class=\"prettyprint no-bg\" id=\"styles-anchor\">styles : string[]</pre>\n<p>Specifies an inline stylesheet for an Angular component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directives') }\" class=\"prettyprint no-bg\" id=\"directives-anchor\">directives : Array&lt;Type|any[]&gt;</pre>\n<p>Specifies a list of directives that can be used within a template.</p> <p>Directives must be listed explicitly to provide proper component encapsulation.</p> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@Component({\n  selector: 'my-component',\n  directives: [NgFor]\n  template: '\n  &lt;ul&gt;\n    &lt;li *ngFor=\"let item of items\"&gt;{{item}}&lt;/li&gt;\n  &lt;/ul&gt;'\n})\nclass MyComponent {\n}\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pipes') }\" class=\"prettyprint no-bg\" id=\"pipes-anchor\">pipes : Array&lt;Type|any[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encapsulation') }\" class=\"prettyprint no-bg\" id=\"encapsulation-anchor\">encapsulation : ViewEncapsulation</pre>\n<p>Specify how the template and the styles should be encapsulated. The default is <a href=\"viewencapsulation-enum#Emulated\"><code>ViewEncapsulation.Emulated</code></a> if the view has styles, otherwise <a href=\"viewencapsulation-enum#None\"><code>ViewEncapsulation.None</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animations') }\" class=\"prettyprint no-bg\" id=\"animations-anchor\">animations : AnimationEntryMetadata[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('interpolation') }\" class=\"prettyprint no-bg\" id=\"interpolation-anchor\">interpolation : [string, string]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/view.ts#L43-L165\">@angular/core/src/metadata/view.ts (line 43)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/viewquerymetadata-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewQueryMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewQueryMetadata {\n  constructor(_selector: Type|string, {descendants = false, first = false, read = null}?:\n                                  {descendants?: boolean, first?: boolean, read?: any})\n  \n  \n  isViewQuery \n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Similar to <a href=\"querymetadata-class\"><code>QueryMetadata</code></a>, but querying the component view, instead of the content children.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-ensfhdf7yjym6izkxm1j-p-preview-\">Example (<a href=\"http://plnkr.co/edit/eNsFHDf7YjyM6IzKxM1j?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"javascript\" data-language=\"javascript\">@Component({\n  ...,\n  template: `\n    &lt;item&gt; a &lt;/item&gt;\n    &lt;item&gt; b &lt;/item&gt;\n    &lt;item&gt; c &lt;/item&gt;\n  `\n})\nclass MyComponent {\n  shown: boolean;\n\n  constructor(private @ViewQuery(Item) items:QueryList&lt;Item&gt;) {\n    items.changes.subscribe(() =&gt; console.log(items.length));\n  }\n}\n</pre>\n<p>Supports the same querying parameters as <a href=\"querymetadata-class\"><code>QueryMetadata</code></a>, except <code>descendants</code>. This always queries the whole view.</p> <p>As <code>shown</code> is flipped between true and false, items will contain zero of one items.</p> <p>Specifies that a <a href=\"querylist-class\"><code>QueryList</code></a> should be injected.</p> <p>The injected object is an iterable and observable live list. See <a href=\"querylist-class\"><code>QueryList</code></a> for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewQueryMetadata</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_selector: Type|string, {descendants = false, first = false, read = null}?:\n                                  {descendants?: boolean, first?: boolean, read?: any})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isViewQuery') }\" class=\"prettyprint no-bg\" id=\"isViewQuery-anchor\">isViewQuery</pre>\n<p>always <code>true</code> to differentiate it with <a href=\"querymetadata-class\"><code>QueryMetadata</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata/di.ts#L293-L343\">@angular/core/src/metadata/di.ts (line 293)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewQueryMetadata-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewQueryMetadata-class.html</a>\n  </p>\n</div>\n","api/core/index/viewref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ViewRef {\n  destroyed : boolean\n  onDestroy(callback: Function) : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ViewRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroyed') }\" class=\"prettyprint no-bg\" id=\"destroyed-anchor\">destroyed : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onDestroy') }\" class=\"prettyprint no-bg\" id=\"onDestroy-anchor\">onDestroy(callback: Function) : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/linker/view_ref.ts#L12-L21\">@angular/core/src/linker/view_ref.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewRef-class.html</a>\n  </p>\n</div>\n","api/core/index/wrappedexception-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">WrappedException</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class WrappedException {\n  constructor(_wrapperMessage: string, _originalException: any, _originalStack?: any, _context?: any)\n  \n  \n  wrapperMessage : string\n  wrapperStack : any\n  originalException : any\n  originalStack : any\n  context : any\n  message : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Wraps an exception and provides additional context or information.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class WrappedException</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_wrapperMessage: string, _originalException: any, _originalStack?: any, _context?: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('wrapperMessage') }\" class=\"prettyprint no-bg\" id=\"wrapperMessage-anchor\">wrapperMessage : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('wrapperStack') }\" class=\"prettyprint no-bg\" id=\"wrapperStack-anchor\">wrapperStack : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('originalException') }\" class=\"prettyprint no-bg\" id=\"originalException-anchor\">originalException : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('originalStack') }\" class=\"prettyprint no-bg\" id=\"originalStack-anchor\">originalStack : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('context') }\" class=\"prettyprint no-bg\" id=\"context-anchor\">context : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('message') }\" class=\"prettyprint no-bg\" id=\"message-anchor\">message : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/facade/exceptions.ts#L25-L56\">@angular/core/src/facade/exceptions.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/WrappedException-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/WrappedException-class.html</a>\n  </p>\n</div>\n","api/core/index/wtfscopefn-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">WtfScopeFn</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class WtfScopeFn {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A scope function for the Web Tracing Framework (WTF).</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface WtfScopeFn</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/profile/wtf_impl.ts#L9-L16\">@angular/core/src/profile/wtf_impl.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/WtfScopeFn-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/WtfScopeFn-interface.html</a>\n  </p>\n</div>\n","api/core/index/wrappedvalue-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">WrappedValue</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class WrappedValue {\n  wrap(value: any) : WrappedValue\n  constructor(wrapped: any)\n  \n  \n  wrapped : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Indicates that the result of a <a href=\"pipemetadata-class\"><code>PipeMetadata</code></a> transformation has changed even though the reference has not changed.</p> <p>The wrapped value will be unwrapped by change detection, and the unwrapped value will be stored.</p> <p>Example:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">if (this._latestValue === this._latestReturnedValue) {\n   return this._latestReturnedValue;\n } else {\n   this._latestReturnedValue = this._latestValue;\n   return WrappedValue.wrap(this._latestValue); // this will force update\n }\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class WrappedValue</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(wrapped: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('wrap') }\" class=\"prettyprint no-bg\" id=\"wrap-anchor\">wrap(value: any) : WrappedValue</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('wrapped') }\" class=\"prettyprint no-bg\" id=\"wrapped-anchor\">wrapped : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/change_detection_util.ts#L29-L54\">@angular/core/src/change_detection/change_detection_util.ts (line 29)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/WrappedValue-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/WrappedValue-class.html</a>\n  </p>\n</div>\n","api/core/index/animate-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">animate</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export animate(timing: string | number, styles?: AnimationStyleMetadata | AnimationKeyframesSequenceMetadata) : AnimationAnimateMetadata</pre>\n<p><code>animate</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>animate</code> specifies an animation step that will apply the provided <code>styles</code> data for a given amount of time based on the provided <code>timing</code> expression value. Calls to <code>animate</code> are expected to be used within <a href=\"sequence-function\">an animation sequence</a>, <a href=\"group-function\">group</a>, or <a href=\"transition-function\">transition</a>.</p> <h3 id=\"usage\">Usage</h3> <p>The <code>animate</code> function accepts two input parameters: <code>timing</code> and <code>styles</code>:</p> <ul> <li>\n<code>timing</code> is a string based value that can be a combination of a duration with optional delay and easing values. The format for the expression breaks down to <code>duration delay easing</code> (therefore a value such as <code>1s 100ms ease-out</code> will be parse itself into <code>duration=1000,\ndelay=100, easing=ease-out</code>. If a numeric value is provided then that will be used as the <code>duration</code> value in millisecond form.</li> <li>\n<code>styles</code> is the style input data which can either be a call to <a href=\"style-function\">style</a> or <a href=\"keyframes-function\">keyframes</a>. If left empty then the styles from the destination state will be collected and used (this is useful when describing an animation step that will complete an animation by <a href=\"transition-function#the-final-animate-call\">animating to the final state</a>).</li> </ul> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// various functions for specifying timing data\nanimate(500, style(...))\nanimate(\"1s\", style(...))\nanimate(\"100ms 0.5s\", style(...))\nanimate(\"5s ease\", style(...))\nanimate(\"5s 10ms cubic-bezier(.17,.67,.88,.1)\", style(...))\n\n// either style() of keyframes() can be used\nanimate(500, style({ background: \"red\" }))\nanimate(500, keyframes([\n  style({ background: \"blue\" })),\n  style({ background: \"red\" }))\n])\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L130-L193\">@angular/core/src/animation/metadata.ts (line 130)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/animate-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/animate-function.html</a>\n  </p>\n</div>\n","api/core/index/asnativeelements-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">asNativeElements</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export asNativeElements(debugEls: DebugElement[]) : any</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/debug/debug_node.ts#L148-L155\">@angular/core/src/debug/debug_node.ts (line 148)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/asNativeElements-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/asNativeElements-function.html</a>\n  </p>\n</div>\n","api/core/index/assertplatform-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">assertPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export assertPlatform(requiredToken: any) : PlatformRef</pre>\n<p>Checks that there currently is a platform which contains the given token as a provider.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L117-L135\">@angular/core/src/application_ref.ts (line 117)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/assertPlatform-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/assertPlatform-function.html</a>\n  </p>\n</div>\n","api/core/index/bind-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">bind</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export bind(token: any) : ProviderBuilder</pre>\n<p>Creates a <a href=\"provider-class\"><code>Provider</code></a>.</p> <p>To construct a <a href=\"provider-class\"><code>Provider</code></a>, bind a <code>token</code> to either a class, a value, a factory function, or to an existing <code>token</code>. See <a href=\"providerbuilder-class\"><code>ProviderBuilder</code></a> for more details.</p> <p>The <code>token</code> is most commonly a class or <a href=\"opaquetoken-class\"><code>OpaqueToken</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/provider.ts#L250-L266\">@angular/core/src/di/provider.ts (line 250)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/bind-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/bind-function.html</a>\n  </p>\n</div>\n","api/core/index/trackbyfn-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">TrackByFn</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TrackByFn {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An optional function passed into <a href=\"../../common/index/ngfor-directive\"><code>NgFor</code></a> that defines how to track items in an iterable (e.g. by index or id)</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface TrackByFn</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/change_detection/differs/iterable_differs.ts#L25-L33\">@angular/core/src/change_detection/differs/iterable_differs.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/TrackByFn-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/TrackByFn-interface.html</a>\n  </p>\n</div>\n","api/core/index/coreloadandbootstrap-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">coreLoadAndBootstrap</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"bootstrapmodule\">bootstrapModule</a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export coreLoadAndBootstrap(componentType: Type, injector: Injector) : Promise&lt;ComponentRef&lt;any&gt;&gt;</pre>\n<p>Resolves the componentFactory for the given component, waits for asynchronous initializers and bootstraps the component. Requires a platform to be created first.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L175-L187\">@angular/core/src/application_ref.ts (line 175)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/coreLoadAndBootstrap-function.html</a>\n  </p>\n</div>\n","api/core/index/createplatformfactory-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">createPlatformFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export createPlatformFactory(parentPlaformFactory: PlatformFactory, name: string, providers?: any[]) : PlatformFactory</pre>\n<p>Creates a factory for a platform</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L95-L117\">@angular/core/src/application_ref.ts (line 95)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/createPlatformFactory-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/createPlatformFactory-function.html</a>\n  </p>\n</div>\n","api/core/index/createplatform-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">createPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export createPlatform(injector: Injector) : PlatformRef</pre>\n<p>Creates a platform. Platforms have to be eagerly created via this function.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L71-L88\">@angular/core/src/application_ref.ts (line 71)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/createPlatform-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/createPlatform-function.html</a>\n  </p>\n</div>\n","api/core/index/disposeplatform-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">disposePlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <code>destroyPlatform</code> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export disposePlatform() : void</pre>\n<p>Dispose the existing platform.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L135-L144\">@angular/core/src/application_ref.ts (line 135)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/disposePlatform-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/disposePlatform-function.html</a>\n  </p>\n</div>\n","api/core/index/enableprodmode-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">enableProdMode</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enableProdMode() : void</pre>\n<p>Disable Angular's development mode, which turns off assertions and other checks within the framework.</p> <p>One important assertion this disables verifies that a change detection pass does not result in additional changes to any bindings (also known as unidirectional data flow).</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L29-L47\">@angular/core/src/application_ref.ts (line 29)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/enableProdMode-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/enableProdMode-function.html</a>\n  </p>\n</div>\n","api/core/index/forwardref-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">forwardRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export forwardRef(forwardRefFn: ForwardRefFn) : Type</pre>\n<p>Allows to refer to references which are not yet defined.</p> <p>For instance, <code>forwardRef</code> is used when the <code>token</code> which we need to refer to for the purposes of DI is declared, but not yet defined. It is also used when the <code>token</code> which we use when creating a query is not yet defined.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">class Door {\n  lock: Lock;\n  constructor(@Inject(forwardRef(() =&gt; Lock)) lock: Lock) { this.lock = lock; }\n}\n\n// Only at this point Lock is defined.\nclass Lock {}\n\nvar injector = ReflectiveInjector.resolveAndCreate([Door, Lock]);\nvar door = injector.get(Door);\nexpect(door instanceof Door).toBe(true);\nexpect(door.lock instanceof Lock).toBe(true);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/forward_ref.ts#L20-L38\">@angular/core/src/di/forward_ref.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/forwardRef-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/forwardRef-function.html</a>\n  </p>\n</div>\n","api/core/index/testabilityregistry-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">TestabilityRegistry</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TestabilityRegistry {\n  constructor()\n  \n  \n  registerApplication(token: any, testability: Testability)\n  getTestability(elem: any) : Testability\n  getAllTestabilities() : Testability[]\n  getAllRootElements() : any[]\n  findTestabilityInTree(elem: Node, findInAncestors?: boolean) : Testability\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A global registry of <a href=\"testability-class\"><code>Testability</code></a> instances for specific elements.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class TestabilityRegistry</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerApplication') }\" class=\"prettyprint no-bg\" id=\"registerApplication-anchor\">registerApplication(token: any, testability: Testability)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getTestability') }\" class=\"prettyprint no-bg\" id=\"getTestability-anchor\">getTestability(elem: any) : Testability</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getAllTestabilities') }\" class=\"prettyprint no-bg\" id=\"getAllTestabilities-anchor\">getAllTestabilities() : Testability[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getAllRootElements') }\" class=\"prettyprint no-bg\" id=\"getAllRootElements-anchor\">getAllRootElements() : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('findTestabilityInTree') }\" class=\"prettyprint no-bg\" id=\"findTestabilityInTree-anchor\">findTestabilityInTree(elem: Node, findInAncestors?: boolean) : Testability</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/testability/testability.ts#L113-L139\">@angular/core/src/testability/testability.ts (line 113)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/TestabilityRegistry-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/TestabilityRegistry-class.html</a>\n  </p>\n</div>\n","api/core/index/getdebugnode-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">getDebugNode</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export getDebugNode(nativeNode: any) : DebugNode</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/debug/debug_node.ts#L184-L191\">@angular/core/src/debug/debug_node.ts (line 184)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/getDebugNode-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/getDebugNode-function.html</a>\n  </p>\n</div>\n","api/core/index/getplatform-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">getPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export getPlatform() : PlatformRef</pre>\n<p>Returns the current platform.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L155-L164\">@angular/core/src/application_ref.ts (line 155)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/getPlatform-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/getPlatform-function.html</a>\n  </p>\n</div>\n","api/core/index/isdevmode-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">isDevMode</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export isDevMode() : boolean</pre>\n<p>Returns whether Angular is in development mode. After called once, the value is locked and won't change any more.</p> <p>By default, this is true, unless a user calls <code>enableProdMode</code> before calling this.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L58-L71\">@angular/core/src/application_ref.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/isDevMode-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/isDevMode-function.html</a>\n  </p>\n</div>\n","api/core/index/keyframes-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">keyframes</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export keyframes(steps: AnimationStyleMetadata[]) : AnimationKeyframesSequenceMetadata</pre>\n<p><code>keyframes</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>keyframes</code> specifies a collection of <a href=\"style-function\">style</a> entries each optionally characterized by an <code>offset</code> value.</p> <h3 id=\"usage\">Usage</h3> <p>The <code>keyframes</code> animation function is designed to be used alongside the <a href=\"animate-function\">animate</a> animation function. Instead of applying animations from where they are currently to their destination, keyframes can describe how each style entry is applied and at what point within the animation arc (much like CSS Keyframe Animations do).</p> <p>For each <code>style()</code> entry an <code>offset</code> value can be set. Doing so allows to specifiy at what percentage of the animate time the styles will be applied.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// the provided offset values describe when each backgroundColor value is applied.\nanimate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\", offset: 0 }),\n  style({ backgroundColor: \"blue\", offset: 0.2 }),\n  style({ backgroundColor: \"orange\", offset: 0.3 }),\n  style({ backgroundColor: \"black\", offset: 1 })\n]))\n</pre>\n<p>Alternatively, if there are no <code>offset</code> values used within the style entries then the offsets will be calculated automatically.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">animate(\"5s\", keyframes([\n  style({ backgroundColor: \"red\" }) // offset = 0\n  style({ backgroundColor: \"blue\" }) // offset = 0.33\n  style({ backgroundColor: \"orange\" }) // offset = 0.66\n  style({ backgroundColor: \"black\" }) // offset = 1\n]))\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L407-L460\">@angular/core/src/animation/metadata.ts (line 407)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/keyframes-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/keyframes-function.html</a>\n  </p>\n</div>\n","api/core/index/platformcore-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformCore</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformCore</pre>\n<p>This platform has to be included in any other platform</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/platform_core_providers.ts#L33-L33\">@angular/core/src/platform_core_providers.ts (line 33)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/platformCore-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/platformCore-let.html</a>\n  </p>\n</div>\n","api/core/index/provide-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">provide</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export provide(token: any, {useClass, useValue, useExisting, useFactory, deps, multi}: {\n  useClass?: Type,\n  useValue?: any,\n  useExisting?: any,\n  useFactory?: Function,\n  deps?: Object[],\n  multi?: boolean\n}) : Provider</pre>\n<p>Creates a <a href=\"provider-class\"><code>Provider</code></a>.</p> <p>See <a href=\"provider-class\"><code>Provider</code></a> for more details.</p>  </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/provider.ts#L388-L414\">@angular/core/src/di/provider.ts (line 388)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/provide-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/provide-function.html</a>\n  </p>\n</div>\n","api/core/index/resolveforwardref-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">resolveForwardRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export resolveForwardRef(type: any) : any</pre>\n<p>Lazily retrieves the reference value from a forwardRef.</p> <p>Acts as the identity function when given a non-forward-ref value.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-gu72mjrk1fiodchcmidr-p-preview-\">Example (<a href=\"http://plnkr.co/edit/GU72mJrk1fiodChcmiDR?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var ref = forwardRef(() =&gt; \"refValue\");\nexpect(resolveForwardRef(ref)).toEqual(\"refValue\");\nexpect(resolveForwardRef(\"regularValue\")).toEqual(\"regularValue\");\n</pre>\n<p>See: <a href=\"forwardref-function\"><code>forwardRef</code></a></p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/di/forward_ref.ts#L38-L63\">@angular/core/src/di/forward_ref.ts (line 38)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/resolveForwardRef-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/resolveForwardRef-function.html</a>\n  </p>\n</div>\n","api/core/index/sequence-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">sequence</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export sequence(steps: AnimationMetadata[]) : AnimationSequenceMetadata</pre>\n<p><code>sequence</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>sequence</code> Specifies a list of animation steps that are run one by one. (<code>sequence</code> is used by default when an array is passed as animation data into <a href=\"transition-function\">transition</a>.)</p> <p>The <code>sequence</code> function can either be used within a <a href=\"group-function\">group</a> or a <a href=\"transition-function\">transition</a> and it will only continue to the next instruction once each of the inner animation steps have completed.</p> <p>To perform animation styling in parallel with other animation steps then have a look at the <a href=\"group-function\">group</a> animation function.</p> <h3 id=\"usage\">Usage</h3> <p>The <code>steps</code> data that is passed into the <code>sequence</code> animation function can either consist of <a href=\"style-function\">style</a> or <a href=\"animate-function\">animate</a> function calls. A call to <code>style()</code> will apply the provided styling data immediately while a call to <code>animate()</code> will apply its styling data over a given time depending on its timing data.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">sequence([\n  style({ opacity: 0 })),\n  animate(\"1s\", { opacity: 1 }))\n])\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L235-L278\">@angular/core/src/animation/metadata.ts (line 235)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/sequence-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/sequence-function.html</a>\n  </p>\n</div>\n","api/core/index/viewchild-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ViewChild: ViewChildMetadataFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ViewChild</pre>\n<p>Declares a reference to a child element.</p> <p><code>ViewChildren</code> takes a argument to select elements.</p> <ul> <li>\n<p>If the argument is a type, a directive or a component with the type will be bound.</p> </li> <li>\n<p>If the argument is a string, the string is interpreted as a selector. An element containing the matching template variable (e.g. <code>#child</code>) will be bound.</p> </li> </ul> <p>In either case, <code>@ViewChild()</code> assigns the first (looking from above) element if there are multiple matches.</p> <p>View child is set before the <code>ngAfterViewInit</code> callback is called.</p> <h3 id=\"example\">Example</h3> <p>With type selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: '&lt;child-cmp&gt;&lt;/child-cmp&gt;',\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChild(ChildCmp) child:ChildCmp;\n\n  ngAfterViewInit() {\n    // child is set\n    this.child.doSomething();\n  }\n}\n</pre>\n<p>With string selector:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n  selector: 'child-cmp',\n  template: '&lt;p&gt;child&lt;/p&gt;'\n})\nclass ChildCmp {\n  doSomething() {}\n}\n\n@Component({\n  selector: 'some-cmp',\n  template: '&lt;child-cmp #child&gt;&lt;/child-cmp&gt;',\n  directives: [ChildCmp]\n})\nclass SomeCmp {\n  @ViewChild('child') child:ChildCmp;\n\n  ngAfterViewInit() {\n    // child is set\n    this.child.doSomething();\n  }\n}\n</pre>\n<p>See also: [ViewChildMetadata]</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/metadata.ts#L1094-L1094\">@angular/core/src/metadata.ts (line 1094)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/ViewChild-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/ViewChild-var.html</a>\n  </p>\n</div>\n","api/core/index/lockrunmode-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">lockRunMode</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>This is a noop now. <a href=\"isdevmode-function\"><code>isDevMode</code></a> automatically locks the run mode on first call.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export lockRunMode() : void</pre>\n<p>Locks the run mode of Angular. After this has been called, it can't be changed any more. I.e. <code>isDevMode()</code> will always return the same value.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L47-L58\">@angular/core/src/application_ref.ts (line 47)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/lockRunMode-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/lockRunMode-function.html</a>\n  </p>\n</div>\n","api/core/index/settestabilitygetter-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">setTestabilityGetter</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export setTestabilityGetter(getter: GetTestability) : void</pre>\n<p>Set the <a href=\"gettestability-interface\"><code>GetTestability</code></a> implementation used by the Angular testing framework.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/testability/testability.ts#L160-L168\">@angular/core/src/testability/testability.ts (line 160)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/setTestabilityGetter-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/setTestabilityGetter-function.html</a>\n  </p>\n</div>\n","api/core/index/state-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">state</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export state(stateNameExpr: string, styles: AnimationStyleMetadata) : AnimationStateDeclarationMetadata</pre>\n<p><code>state</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>state</code> declares an animation state within the given trigger. When a state is active within a component then its associated styles will persist on the element that the trigger is attached to (even when the animation ends).</p> <p>To animate between states, have a look at the animation <a href=\"transition-function\">transition</a> DSL function. To register states to an animation trigger please have a look at the <a href=\"trigger-function\">trigger</a> function.</p> <h4 id=\"the-void-state\">The <code>void</code> state</h4> <p>The <code>void</code> state value is a reserved word that angular uses to determine when the element is not apart of the application anymore (e.g. when an <code>ngIf</code> evaluates to false then the state of the associated element is void).</p> <h4 id=\"the-default-state\">The <code>*</code> (default) state</h4> <p>The <code>*</code> state (when styled) is a fallback state that will be used if the state that is being animated is not declared within the trigger.</p> <h3 id=\"usage\">Usage</h3> <p><code>state</code> will declare an animation state with its associated styles within the given trigger.</p> <ul> <li>\n<code>stateNameExpr</code> can be one or more state names separated by commas.</li> <li>\n<code>styles</code> refers to the <a href=\"style-function\">styling data</a> that will be persisted on the element once the state has been reached.</li> </ul> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// \"void\" is a reserved name for a state and is used to represent\n// the state in which an element is detached from from the application.\nstate(\"void\", style({ height: 0 }))\n\n// user-defined states\nstate(\"closed\", style({ height: 0 }))\nstate(\"open, visible\", style({ height: \"*\" }))\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L348-L407\">@angular/core/src/animation/metadata.ts (line 348)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/state-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/state-function.html</a>\n  </p>\n</div>\n","api/core/index/style-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">style</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export style(tokens: string | {[key: string]: string | number} |\n    Array&lt;string|{[key: string]: string | number}&gt;) : AnimationStyleMetadata</pre>\n<p><code>style</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>style</code> declares a key/value object containing CSS properties/styles that can then be used for <a href=\"state-function\">animation states</a>, within an <a href=\"sequence-function\">animation sequence</a>, or as styling data for both <a href=\"animate-function\">animate</a> and <a href=\"keyframes-function\">keyframes</a>.</p> <h3 id=\"usage\">Usage</h3> <p><code>style</code> takes in a key/value string map as data and expects one or more CSS property/value pairs to be defined.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// string values are used for css properties\nstyle({ background: \"red\", color: \"blue\" })\n\n// numerical (pixel) values are also supported\nstyle({ width: 100, height: 0 })\n</pre>\n<h4 id=\"auto-styles-using-\">Auto-styles (using <code>*</code>)</h4> <p>When an asterix (<code>*</code>) character is used as a value then it will be detected from the element being animated and applied as animation data when the animation starts.</p> <p>This feature proves useful for a state depending on layout and/or environment factors; in such cases the styles are calculated just before the animation starts.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// the steps below will animate from 0 to the\n// actual height of the element\nstyle({ height: 0 }),\nanimate(\"1s\", style({ height: \"*\" }))\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L278-L348\">@angular/core/src/animation/metadata.ts (line 278)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/style-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/style-function.html</a>\n  </p>\n</div>\n","api/core/index/transition-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">transition</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export transition(stateChangeExpr: string, steps: AnimationMetadata | AnimationMetadata[]) : AnimationStateTransitionMetadata</pre>\n<p><code>transition</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>transition</code> declares the <a href=\"sequence-function\">sequence of animation steps</a> that will be run when the provided <code>stateChangeExpr</code> value is satisfied. The <code>stateChangeExpr</code> consists of a <code>state1 =&gt; state2</code> which consists of two known states (use an asterix (<code>*</code>) to refer to a dynamic starting and/or ending state).</p> <p>Animation transitions are placed within an <a href=\"trigger-function\">animation trigger</a>. For an transition to animate to a state value and persist its styles then one or more <a href=\"state-function\">animation states</a> is expected to be defined.</p> <h3 id=\"usage\">Usage</h3> <p>An animation transition is kicked off the <code>stateChangeExpr</code> predicate evaluates to true based on what the previous state is and what the current state has become. In other words, if a transition is defined that matches the old/current state criteria then the associated animation will be triggered.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">// all transition/state changes are defined within an animation trigger\ntrigger(\"myAnimationTrigger\", [\n  // if a state is defined then its styles will be persisted when the\n  // animation has fully completed itself\n  state(\"on\", style({ background: \"green\" })),\n  state(\"off\", style({ background: \"grey\" })),\n\n  // a transition animation that will be kicked off when the state value\n  // bound to \"myAnimationTrigger\" changes from \"on\" to \"off\"\n  transition(\"on =&gt; off\", animate(500)),\n\n  // it is also possible to do run the same animation for both directions\n  transition(\"on &lt;=&gt; off\", animate(500)),\n\n  // or to define multiple states pairs separated by commas\n  transition(\"on =&gt; off, off =&gt; void\", animate(500)),\n\n  // this is a catch-all state change for when an element is inserted into\n  // the page and the destination state is unknown\n  transition(\"void =&gt; *\", [\n    style({ opacity: 0 }),\n    animate(500)\n  ]),\n\n  // this will capture a state change between any states\n  transition(\"* =&gt; *\", animate(\"1s 0s\")),\n])\n</pre>\n<p>The template associated with this component will make use of the <code>myAnimationTrigger</code> animation trigger by binding to an element within its template code.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;!-- somewhere inside of my-component-tpl.html --&gt;\n&lt;div [@myAnimationTrigger]=\"myStatusExp\"&gt;...&lt;/div&gt;\n</pre>\n<h4 id=\"the-final-animate-call\">The final <code>animate</code> call</h4> <p>If the final step within the transition steps is a call to <code>animate()</code> that <strong>only</strong> uses a timing value with <strong>no style data</strong> then it will be automatically used as the final animation arc for the element to animate itself to the final state. This involves an automatic mix of adding/removing CSS styles so that the element will be in the exact state it should be for the applied state to be presented correctly.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">// start off by hiding the element, but make sure that it animates properly to whatever state\n// is currently active for \"myAnimationTrigger\"\ntransition(\"void =&gt; *\", [\n  style({ opacity: 0 }),\n  animate(500)\n])\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L460-L555\">@angular/core/src/animation/metadata.ts (line 460)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/transition-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/transition-function.html</a>\n  </p>\n</div>\n","api/core/index/trigger-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">trigger</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export trigger(name: string, animation: AnimationMetadata[]) : AnimationEntryMetadata</pre>\n<p><code>trigger</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>trigger</code> Creates an animation trigger which will a list of <a href=\"state-function\">state</a> and <a href=\"transition-function\">transition</a> entries that will be evaluated when the expression bound to the trigger changes.</p> <p>Triggers are registered within the component annotation data under the <a href=\"componentmetadata-class#animations-anchor\">animations section</a>. An animation trigger can be placed on an element within a template by referencing the name of the trigger followed by the expression value that the trigger is bound to (in the form of <code>[@triggerName]=\"expression\"</code>.</p> <h3 id=\"usage\">Usage</h3> <p><code>trigger</code> will create an animation trigger reference based on the provided <code>name</code> value. The provided <code>animation</code> value is expected to be an array consisting of <a href=\"state-function\">state</a> and <a href=\"transition-function\">transition</a> declarations.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-component',\n  templateUrl: 'my-component-tpl.html',\n  animations: [\n    trigger(\"myAnimationTrigger\", [\n      state(...),\n      state(...),\n      transition(...),\n      transition(...)\n    ])\n  ]\n})\nclass MyComponent {\n  myStatusExp = \"something\";\n}\n</pre>\n<p>The template associated with this component will make use of the <code>myAnimationTrigger</code> animation trigger by binding to an element within its template code.</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;!-- somewhere inside of my-component-tpl.html --&gt;\n&lt;div [@myAnimationTrigger]=\"myStatusExp\"&gt;...&lt;/div&gt;\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L555-L615\">@angular/core/src/animation/metadata.ts (line 555)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/trigger-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/trigger-function.html</a>\n  </p>\n</div>\n","api/core/index/wtfcreatescope-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">wtfCreateScope</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export wtfCreateScope</pre>\n<p>Create trace scope.</p> <p>Scopes must be strictly nested and are analogous to stack frames, but do not have to follow the stack frames. Instead it is recommended that they follow logical nesting. You may want to use <a href=\"http://google.github.io/tracing-framework/instrumenting-code.html#custom-events\">Event Signatures</a> as they are defined in WTF.</p> <p>Used to mark scope entry. The return value is used to leave the scope.</p> <pre><code>var myScope = wtfCreateScope('MyClass#myMethod(ascii someVal)');\n\nsomeMethod() {\n   var s = myScope('Foo'); // 'Foo' gets stored in tracing UI\n   // DO SOME WORK HERE\n   return wtfLeave(s, 123); // Return value 123\n}\n</code></pre>\n<p>Note, adding try-finally block around the work to ensure that <code>wtfLeave</code> gets called can negatively impact the performance of your application. For this reason we recommend that you don't add them to ensure that <code>wtfLeave</code> gets called. In production <code>wtfLeave</code> is a noop and so try-finally block has no value. When debugging perf issues, skipping <code>wtfLeave</code>, do to exception, will produce incorrect trace, but presence of exception signifies logic error which needs to be fixed before the app should be profiled. Add try-finally only when you expect that an exception is expected during normal execution while profiling.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/profile/profile.ts#L53-L54\">@angular/core/src/profile/profile.ts (line 53)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/wtfCreateScope-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/wtfCreateScope-var.html</a>\n  </p>\n</div>\n","api/core/index/wtfendtimerange-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">wtfEndTimeRange</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export wtfEndTimeRange</pre>\n<p>Ends a async time range operation. [range] is the return value from [wtfStartTimeRange] Async ranges only work if WTF has been enabled.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/profile/profile.ts#L90-L90\">@angular/core/src/profile/profile.ts (line 90)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/wtfEndTimeRange-var.html</a>\n  </p>\n</div>\n","api/core/index/wtfleave-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">wtfLeave</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export wtfLeave</pre>\n<p>Used to mark end of Scope.</p> <ul> <li>\n<code>scope</code> to end.</li> <li>\n<code>returnValue</code> (optional) to be passed to the WTF.</li> </ul> <p>Returns the `returnValue for easy chaining.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/profile/profile.ts#L65-L66\">@angular/core/src/profile/profile.ts (line 65)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/wtfLeave-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/wtfLeave-var.html</a>\n  </p>\n</div>\n","api/core/index/wtfstarttimerange-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">wtfStartTimeRange</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export wtfStartTimeRange</pre>\n<p>Used to mark Async start. Async are similar to scope but they don't have to be strictly nested. The return value is used in the call to [endAsync]. Async ranges only work if WTF has been enabled.</p> <pre><code>someMethod() {\n   var s = wtfStartTimeRange('HTTP:GET', 'some.url');\n   var future = new Future.delay(5).then((_) {\n     wtfEndTimeRange(s);\n   });\n}\n</code></pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/profile/profile.ts#L81-L82\">@angular/core/src/profile/profile.ts (line 81)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/wtfStartTimeRange-var.html</a>\n  </p>\n</div>\n","api/core/testing/componentfixtureautodetect-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentFixtureAutoDetect</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ComponentFixtureAutoDetect</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L35-L35\">@angular/core/testing/test_bed.ts (line 35)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/ComponentFixtureAutoDetect-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/ComponentFixtureAutoDetect-var.html</a>\n  </p>\n</div>\n","api/core/testing/componentfixturenongzone-var":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentFixtureNoNgZone</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ComponentFixtureNoNgZone</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L40-L40\">@angular/core/testing/test_bed.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/ComponentFixtureNoNgZone-var.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/ComponentFixtureNoNgZone-var.html</a>\n  </p>\n</div>\n","api/core/testing/metadataoverride-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">MetadataOverride</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MetadataOverride {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias MetadataOverride</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/metadata_override.ts#L1-L18\">@angular/core/testing/metadata_override.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/MetadataOverride-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/MetadataOverride-type-alias.html</a>\n  </p>\n</div>\n","api/core/index/corebootstrap-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">coreBootstrap</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"bootstrapmodulefactory\">bootstrapModuleFactory</a> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export coreBootstrap(componentFactory: ComponentFactory&lt;C&gt;, injector: Injector) : ComponentRef&lt;C&gt;</pre>\n<p>Shortcut for ApplicationRef.bootstrap. Requires a platform to be created first.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/application_ref.ts#L164-L175\">@angular/core/src/application_ref.ts (line 164)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/coreBootstrap-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/coreBootstrap-function.html</a>\n  </p>\n</div>\n","api/core/testing/componentfixture-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ComponentFixture</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ComponentFixture {\n  constructor(componentRef: ComponentRef&lt;T&gt;, ngZone: NgZone, autoDetect: boolean)\n  \n  \n  debugElement : DebugElement\n  componentInstance : T\n  nativeElement : any\n  elementRef : ElementRef\n  componentRef : ComponentRef&lt;T&gt;\n  changeDetectorRef : ChangeDetectorRef\n  ngZone : NgZone\n  detectChanges(checkNoChanges?: boolean) : void\n  checkNoChanges() : void\n  autoDetectChanges(autoDetect?: boolean)\n  isStable() : boolean\n  whenStable() : Promise&lt;any&gt;\n  destroy() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Fixture for debugging and testing a component.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ComponentFixture</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(componentRef: ComponentRef&lt;T&gt;, ngZone: NgZone, autoDetect: boolean)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('debugElement') }\" class=\"prettyprint no-bg\" id=\"debugElement-anchor\">debugElement : DebugElement</pre>\n<p>The DebugElement associated with the root element of this component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentInstance') }\" class=\"prettyprint no-bg\" id=\"componentInstance-anchor\">componentInstance : T</pre>\n<p>The instance of the root component class.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nativeElement') }\" class=\"prettyprint no-bg\" id=\"nativeElement-anchor\">nativeElement : any</pre>\n<p>The native element at the root of the component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('elementRef') }\" class=\"prettyprint no-bg\" id=\"elementRef-anchor\">elementRef : ElementRef</pre>\n<p>The ElementRef for the element at the root of the component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('componentRef') }\" class=\"prettyprint no-bg\" id=\"componentRef-anchor\">componentRef : ComponentRef&lt;T&gt;</pre>\n<p>The ComponentRef for the component</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('changeDetectorRef') }\" class=\"prettyprint no-bg\" id=\"changeDetectorRef-anchor\">changeDetectorRef : ChangeDetectorRef</pre>\n<p>The ChangeDetectorRef for the component</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngZone') }\" class=\"prettyprint no-bg\" id=\"ngZone-anchor\">ngZone : NgZone</pre>\n<p>The NgZone in which this component was instantiated.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detectChanges') }\" class=\"prettyprint no-bg\" id=\"detectChanges-anchor\">detectChanges(checkNoChanges?: boolean) : void</pre>\n<p>Trigger a change detection cycle for the component.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('checkNoChanges') }\" class=\"prettyprint no-bg\" id=\"checkNoChanges-anchor\">checkNoChanges() : void</pre>\n<p>Do a change detection run to make sure there were no changes.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('autoDetectChanges') }\" class=\"prettyprint no-bg\" id=\"autoDetectChanges-anchor\">autoDetectChanges(autoDetect?: boolean)</pre>\n<p>Set whether the fixture should autodetect changes.</p> <p>Also runs detectChanges once so that any existing change is detected.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isStable') }\" class=\"prettyprint no-bg\" id=\"isStable-anchor\">isStable() : boolean</pre>\n<p>Return whether the fixture is currently stable or has async tasks that have not been completed yet.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('whenStable') }\" class=\"prettyprint no-bg\" id=\"whenStable-anchor\">whenStable() : Promise&lt;any&gt;</pre>\n<p>Get a promise that resolves when the fixture is stable.</p> <p>This can be used to resume testing after events have triggered asynchronous activity or asynchronous change detection.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('destroy') }\" class=\"prettyprint no-bg\" id=\"destroy-anchor\">destroy() : void</pre>\n<p>Trigger component destruction.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/component_fixture.ts#L13-L199\">@angular/core/testing/component_fixture.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/ComponentFixture-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/ComponentFixture-class.html</a>\n  </p>\n</div>\n","api/core/testing/injectsetupwrapper-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">InjectSetupWrapper</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class InjectSetupWrapper {\n  constructor(_moduleDef: () =&gt; TestModuleMetadata)\n  \n  \n  inject(tokens: any[], fn: Function) : () =&gt; any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class InjectSetupWrapper</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_moduleDef: () =&gt; TestModuleMetadata)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('inject') }\" class=\"prettyprint no-bg\" id=\"inject-anchor\">inject(tokens: any[], fn: Function) : () =&gt; any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L420-L441\">@angular/core/testing/test_bed.ts (line 420)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/InjectSetupWrapper-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/InjectSetupWrapper-class.html</a>\n  </p>\n</div>\n","api/core/testing/addproviders-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">addProviders</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use `TestBed.configureTestingModule instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export addProviders(providers: Array&lt;any&gt;) : void</pre>\n<p>Allows overriding default providers of the test injector, which are defined in test_injector.js</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/testing.ts#L30-L41\">@angular/core/testing/testing.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/addProviders-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/addProviders-function.html</a>\n  </p>\n</div>\n","api/core/testing/discardperiodictasks-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">discardPeriodicTasks</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export discardPeriodicTasks() : void</pre>\n<p>Discard all remaining periodic tasks.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/fake_async.ts#L107-L118\">@angular/core/testing/fake_async.ts (line 107)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/discardPeriodicTasks-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/discardPeriodicTasks-function.html</a>\n  </p>\n</div>\n","api/core/testing/flushmicrotasks-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">flushMicrotasks</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export flushMicrotasks() : void</pre>\n<p>Flush any pending microtasks.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/fake_async.ts#L118-L127\">@angular/core/testing/fake_async.ts (line 118)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/flushMicrotasks-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/flushMicrotasks-function.html</a>\n  </p>\n</div>\n","api/core/testing/gettestbed-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">getTestBed</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export getTestBed()</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L369-L379\">@angular/core/testing/test_bed.ts (line 369)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/getTestBed-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/getTestBed-function.html</a>\n  </p>\n</div>\n","api/core/testing/testbed-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">TestBed</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TestBed {\n  initTestEnvironment(ngModule: Type, platform: PlatformRef) : TestBed\n  resetTestEnvironment()\n  resetTestingModule() : typeof TestBed\n  configureCompiler(config: {providers?: any[]; useJit?: boolean;}) : typeof TestBed\n  configureTestingModule(moduleDef: TestModuleMetadata) : typeof TestBed\n  compileComponents() : Promise&lt;any&gt;\n  overrideModule(ngModule: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;NgModuleMetadataType&gt;) : typeof TestBed\n  overrideComponent(component: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;ComponentMetadataType&gt;) : typeof TestBed\n  overrideDirective(directive: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;DirectiveMetadataType&gt;) : typeof TestBed\n  overridePipe(pipe: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;PipeMetadataType&gt;) : typeof TestBed\n  createComponent(component: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;\n  initTestEnvironment(ngModule: Type, platform: PlatformRef)\n  resetTestEnvironment()\n  reset()\n  resetTestingModule()\n  platform : PlatformRef\n  ngModule : Type\n  configureCompiler(config: {providers?: any[], useJit?: boolean})\n  configureTestingModule(moduleDef: TestModuleMetadata)\n  compileComponents() : Promise&lt;any&gt;\n  get(token: any, notFoundValue?: any)\n  execute(tokens: any[], fn: Function) : any\n  overrideModule(ngModule: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;NgModuleMetadataType&gt;) : void\n  overrideComponent(component: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;ComponentMetadataType&gt;) : void\n  overrideDirective(directive: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;DirectiveMetadataType&gt;) : void\n  overridePipe(pipe: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;PipeMetadataType&gt;) : void\n  createComponent(component: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class TestBed</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initTestEnvironment') }\" class=\"prettyprint no-bg\" id=\"initTestEnvironment-anchor\">initTestEnvironment(ngModule: Type, platform: PlatformRef) : TestBed</pre>\n<p>Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite.</p> <p>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use <code>resetTestEnvironment</code>.</p> <p>Test modules and platforms for individual platforms are available from 'angular2/platform/testing/<platform_name>'.</platform_name></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resetTestEnvironment') }\" class=\"prettyprint no-bg\" id=\"resetTestEnvironment-anchor\">resetTestEnvironment()</pre>\n<p>Reset the providers for the test injector.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resetTestingModule') }\" class=\"prettyprint no-bg\" id=\"resetTestingModule-anchor\">resetTestingModule() : typeof TestBed</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureCompiler') }\" class=\"prettyprint no-bg\" id=\"configureCompiler-anchor\">configureCompiler(config: {providers?: any[]; useJit?: boolean;}) : typeof TestBed</pre>\n<p>Allows overriding default compiler providers and settings which are defined in test_injector.js</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureTestingModule') }\" class=\"prettyprint no-bg\" id=\"configureTestingModule-anchor\">configureTestingModule(moduleDef: TestModuleMetadata) : typeof TestBed</pre>\n<p>Allows overriding default providers, directives, pipes, modules of the test injector, which are defined in test_injector.js</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileComponents') }\" class=\"prettyprint no-bg\" id=\"compileComponents-anchor\">compileComponents() : Promise&lt;any&gt;</pre>\n<p>Compile components with a <code>templateUrl</code> for the test's NgModule. It is necessary to call this function as fetching urls is asynchronous.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideModule') }\" class=\"prettyprint no-bg\" id=\"overrideModule-anchor\">overrideModule(ngModule: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;NgModuleMetadataType&gt;) : typeof TestBed</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideComponent') }\" class=\"prettyprint no-bg\" id=\"overrideComponent-anchor\">overrideComponent(component: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;ComponentMetadataType&gt;) : typeof TestBed</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideDirective') }\" class=\"prettyprint no-bg\" id=\"overrideDirective-anchor\">overrideDirective(directive: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;DirectiveMetadataType&gt;) : typeof TestBed</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overridePipe') }\" class=\"prettyprint no-bg\" id=\"overridePipe-anchor\">overridePipe(pipe: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;PipeMetadataType&gt;) : typeof TestBed</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createComponent') }\" class=\"prettyprint no-bg\" id=\"createComponent-anchor\">createComponent(component: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initTestEnvironment') }\" class=\"prettyprint no-bg\" id=\"initTestEnvironment-anchor\">initTestEnvironment(ngModule: Type, platform: PlatformRef)</pre>\n<p>Initialize the environment for testing with a compiler factory, a PlatformRef, and an angular module. These are common to every test in the suite.</p> <p>This may only be called once, to set up the common providers for the current test suite on the current platform. If you absolutely need to change the providers, first use <code>resetTestEnvironment</code>.</p> <p>Test modules and platforms for individual platforms are available from 'angular2/platform/testing/<platform_name>'.</platform_name></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resetTestEnvironment') }\" class=\"prettyprint no-bg\" id=\"resetTestEnvironment-anchor\">resetTestEnvironment()</pre>\n<p>Reset the providers for the test injector.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resetTestingModule') }\" class=\"prettyprint no-bg\" id=\"resetTestingModule-anchor\">resetTestingModule()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('platform') }\" class=\"prettyprint no-bg\" id=\"platform-anchor\">platform : PlatformRef</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngModule') }\" class=\"prettyprint no-bg\" id=\"ngModule-anchor\">ngModule : Type</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureCompiler') }\" class=\"prettyprint no-bg\" id=\"configureCompiler-anchor\">configureCompiler(config: {providers?: any[], useJit?: boolean})</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureTestingModule') }\" class=\"prettyprint no-bg\" id=\"configureTestingModule-anchor\">configureTestingModule(moduleDef: TestModuleMetadata)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileComponents') }\" class=\"prettyprint no-bg\" id=\"compileComponents-anchor\">compileComponents() : Promise&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(token: any, notFoundValue?: any)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('execute') }\" class=\"prettyprint no-bg\" id=\"execute-anchor\">execute(tokens: any[], fn: Function) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideModule') }\" class=\"prettyprint no-bg\" id=\"overrideModule-anchor\">overrideModule(ngModule: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;NgModuleMetadataType&gt;) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideComponent') }\" class=\"prettyprint no-bg\" id=\"overrideComponent-anchor\">overrideComponent(component: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;ComponentMetadataType&gt;) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideDirective') }\" class=\"prettyprint no-bg\" id=\"overrideDirective-anchor\">overrideDirective(directive: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;DirectiveMetadataType&gt;) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overridePipe') }\" class=\"prettyprint no-bg\" id=\"overridePipe-anchor\">overridePipe(pipe: ConcreteType&lt;any&gt;, override: MetadataOverride&lt;PipeMetadataType&gt;) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createComponent') }\" class=\"prettyprint no-bg\" id=\"createComponent-anchor\">createComponent(component: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L47-L367\">@angular/core/testing/test_bed.ts (line 47)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/TestBed-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/TestBed-class.html</a>\n  </p>\n</div>\n","api/core/testing/fakeasync-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">fakeAsync</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export fakeAsync(fn: Function) : args: any[]) =&gt; any</pre>\n<p>Wraps a function to be executed in the fakeAsync zone:</p> <ul> <li>microtasks are manually executed by calling <code>flushMicrotasks()</code>,</li> <li>timers are synchronous, <code>tick()</code> simulates the asynchronous passage of time.</li> </ul> <p>If there are any pending timers at the end of the function, an exception will be thrown.</p> <p>Can be used to wrap inject() calls.</p> <h2 id=\"example\">Example</h2> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">describe('this test', () =&gt; {\n  it('looks async but is synchronous', &lt;any&gt;fakeAsync((): void =&gt; {\n       var flag = false;\n       setTimeout(() =&gt; { flag = true; }, 100);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(true);\n     }));\n});\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/fake_async.ts#L27-L84\">@angular/core/testing/fake_async.ts (line 27)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/fakeAsync-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/fakeAsync-function.html</a>\n  </p>\n</div>\n","api/core/testing/testcomponentrenderer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">TestComponentRenderer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TestComponentRenderer {\n  insertRootElement(rootElementId: string)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An abstract class for inserting the root test component element in a platform independent way.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class TestComponentRenderer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('insertRootElement') }\" class=\"prettyprint no-bg\" id=\"insertRootElement-anchor\">insertRootElement(rootElementId: string)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L19-L28\">@angular/core/testing/test_bed.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/TestComponentRenderer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/TestComponentRenderer-class.html</a>\n  </p>\n</div>\n","api/core/testing/inject-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">inject</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export inject(tokens: any[], fn: Function) : () =&gt; any</pre>\n<p>Allows injecting dependencies in <code>beforeEach()</code> and <code>it()</code>.</p> <p>Example:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">beforeEach(inject([Dependency, AClass], (dep, object) =&gt; {\n  // some code that uses `dep` and `object`\n  // ...\n}));\n\nit('...', inject([AClass], (object) =&gt; {\n  object.doSomething();\n  expect(...);\n})\n</pre>\n<p>Notes:</p> <ul> <li>inject is currently a function because of some Traceur limitation the syntax should eventually becomes <code>it('...', @Inject (object: AClass, async: AsyncTestCompleter) =&gt; { ... });</code>\n</li> </ul> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L379-L420\">@angular/core/testing/test_bed.ts (line 379)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/inject-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/inject-function.html</a>\n  </p>\n</div>\n","api/core/testing/resetfakeasynczone-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">resetFakeAsyncZone</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export resetFakeAsyncZone()</pre>\n<p>Clears out the shared fake async zone for a test. To be called in a global <code>beforeEach</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/fake_async.ts#L14-L25\">@angular/core/testing/fake_async.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/resetFakeAsyncZone-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/resetFakeAsyncZone-function.html</a>\n  </p>\n</div>\n","api/core/testing/tick-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">tick</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export tick(millis?: number) : void</pre>\n<p>Simulates the asynchronous passage of time for the timers in the fakeAsync zone.</p> <p>The microtasks queue is drained at the very start of this function and after any timer callback has been executed.</p> <h2 id=\"example\">Example</h2> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">describe('this test', () =&gt; {\n  it('looks async but is synchronous', &lt;any&gt;fakeAsync((): void =&gt; {\n       var flag = false;\n       setTimeout(() =&gt; { flag = true; }, 100);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(false);\n       tick(50);\n       expect(flag).toBe(true);\n     }));\n});\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/fake_async.ts#L91-L107\">@angular/core/testing/fake_async.ts (line 91)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/tick-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/tick-function.html</a>\n  </p>\n</div>\n","api/core/testing/withmodule-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">withModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export withModule(moduleDef: TestModuleMetadata) : InjectSetupWrapper</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L448-L453\">@angular/core/testing/test_bed.ts (line 448)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/withModule-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/withModule-function.html</a>\n  </p>\n</div>\n","api/core/testing/withproviders-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">withProviders</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use `TestBed.configureTestingModule instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export withProviders(providers: () =&gt; any)</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L441-L448\">@angular/core/testing/test_bed.ts (line 441)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/withProviders-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/withProviders-function.html</a>\n  </p>\n</div>\n","api/forms/index/abstractcontroldirective-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractControlDirective</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractControlDirective {\n  control : AbstractControl\n  value : any\n  valid : boolean\n  invalid : boolean\n  pending : boolean\n  errors : {[key: string]: any}\n  pristine : boolean\n  dirty : boolean\n  touched : boolean\n  untouched : boolean\n  statusChanges : Observable&lt;any&gt;\n  valueChanges : Observable&lt;any&gt;\n  path : string[]\n  reset(value?: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Base class for control directives.</p> <p>Only used internally in the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractControlDirective</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : AbstractControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valid') }\" class=\"prettyprint no-bg\" id=\"valid-anchor\">valid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('invalid') }\" class=\"prettyprint no-bg\" id=\"invalid-anchor\">invalid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pending') }\" class=\"prettyprint no-bg\" id=\"pending-anchor\">pending : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('errors') }\" class=\"prettyprint no-bg\" id=\"errors-anchor\">errors : {[key: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pristine') }\" class=\"prettyprint no-bg\" id=\"pristine-anchor\">pristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dirty') }\" class=\"prettyprint no-bg\" id=\"dirty-anchor\">dirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('touched') }\" class=\"prettyprint no-bg\" id=\"touched-anchor\">touched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('untouched') }\" class=\"prettyprint no-bg\" id=\"untouched-anchor\">untouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('statusChanges') }\" class=\"prettyprint no-bg\" id=\"statusChanges-anchor\">statusChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valueChanges') }\" class=\"prettyprint no-bg\" id=\"valueChanges-anchor\">valueChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(value?: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/abstract_control_directive.ts#L12-L59\">@angular/forms/src/directives/abstract_control_directive.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/AbstractControlDirective-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/AbstractControlDirective-class.html</a>\n  </p>\n</div>\n","api/forms/index/abstractformgroupdirective-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractFormGroupDirective</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractFormGroupDirective {\n  ngOnInit() : void\n  ngOnDestroy() : void\n  control : FormGroup\n  path : string[]\n  formDirective : Form\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>This is a base class for code shared between <a href=\"ngmodelgroup-directive\"><code>NgModelGroup</code></a> and <a href=\"formgroupname-directive\"><code>FormGroupName</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractFormGroupDirective</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnInit') }\" class=\"prettyprint no-bg\" id=\"ngOnInit-anchor\">ngOnInit() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormGroup</pre>\n<p>Get the <a href=\"formgroup-class\"><code>FormGroup</code></a> backing this binding.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n<p>Get the path to this control group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n<p>Get the <a href=\"form-interface\"><code>Form</code></a> to which this group belongs.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/abstract_form_group_directive.ts#L16-L63\">@angular/forms/src/directives/abstract_form_group_directive.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/AbstractFormGroupDirective-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/AbstractFormGroupDirective-class.html</a>\n  </p>\n</div>\n","api/core/index/group-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">group</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export group(steps: AnimationMetadata[]) : AnimationGroupMetadata</pre>\n<p><code>group</code> is an animation-specific function that is designed to be used inside of Angular2's animation DSL language. If this information is new, please navigate to the <a href=\"componentmetadata-class#animations-anchor\">component animations metadata page</a> to gain a better understanding of how animations in Angular2 are used.</p> <p><code>group</code> specifies a list of animation steps that are all run in parallel. Grouped animations are useful when a series of styles must be animated/closed off at different statrting/ending times.</p> <p>The <code>group</code> function can either be used within a <a href=\"sequence-function\">sequence</a> or a <a href=\"transition-function\">transition</a> and it will only continue to the next instruction once all of the inner animation steps have completed.</p> <h3 id=\"usage\">Usage</h3> <p>The <code>steps</code> data that is passed into the <code>group</code> animation function can either consist of <a href=\"style-function\">style</a> or <a href=\"animate-function\">animate</a> function calls. Each call to <code>style()</code> or <code>animate()</code> within a group will be executed instantly (use <a href=\"keyframes-function\">keyframes</a> or a <a href=\"animate-function#usage\">animate() with a delay value</a> to offset styles to be applied at a later time).</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">group([\n  animate(\"1s\", { background: \"black\" }))\n  animate(\"2s\", { color: \"white\" }))\n])\n</pre>\n<h3 id=\"example-live-demo-http-plnkr-co-edit-kez8xgwbxwue7qp7nnvf-p-preview-\">Example (<a href=\"http://plnkr.co/edit/Kez8XGWBxWue7qP7nNvF?p=preview\">live demo</a>)</h3> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">import {Component, animate, state, style, transition, trigger} from '@angular/core';\n\n@Component({\n  selector: 'my-expando',\n  styles: [`\n    .toggle-container {\n      background-color:white;\n      border:10px solid black;\n      width:200px;\n      text-align:center;\n      line-height:100px;\n      font-size:50px;\n      box-sizing:border-box;\n      overflow:hidden;\n    }\n  `],\n  animations: [trigger(\n      'openClose',\n      [\n        state('collapsed, void', style({height: '0px', color: 'maroon', borderColor: 'maroon'})),\n        state('expanded', style({height: '*', borderColor: 'green', color: 'green'})),\n        transition(\n            'collapsed &lt;=&gt; expanded', [animate(500, style({height: '250px'})), animate(500)])\n      ])],\n  template: `\n    &lt;button (click)=\"expand()\"&gt;Open&lt;/button&gt;\n    &lt;button (click)=\"collapse()\"&gt;Closed&lt;/button&gt;\n    &lt;hr /&gt;\n    &lt;div class=\"toggle-container\" [@openClose]=\"stateExpression\"&gt;\n      Look at this box\n    &lt;/div&gt;\n  `\n})\nexport class MyExpandoCmp {\n  stateExpression: string;\n  constructor() { this.collapse(); }\n  expand() { this.stateExpression = 'expanded'; }\n  collapse() { this.stateExpression = 'collapsed'; }\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/core/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/src/animation/metadata.ts#L193-L235\">@angular/core/src/animation/metadata.ts (line 193)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index/group-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index/group-function.html</a>\n  </p>\n</div>\n","api/forms/index/abstractcontrol-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AbstractControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AbstractControl {\n  constructor(validator: ValidatorFn, asyncValidator: AsyncValidatorFn)\n  \n  \n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  value : any\n  status : string\n  valid : boolean\n  invalid : boolean\n  errors : {[key: string]: any}\n  pristine : boolean\n  dirty : boolean\n  touched : boolean\n  untouched : boolean\n  valueChanges : Observable&lt;any&gt;\n  statusChanges : Observable&lt;any&gt;\n  pending : boolean\n  setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]) : void\n  clearAsyncValidators() : void\n  setValidators(newValidator: ValidatorFn|ValidatorFn[]) : void\n  clearValidators() : void\n  markAsTouched({onlySelf}?: {onlySelf?: boolean}) : void\n  markAsDirty({onlySelf}?: {onlySelf?: boolean}) : void\n  markAsPristine({onlySelf}?: {onlySelf?: boolean}) : void\n  markAsUntouched({onlySelf}?: {onlySelf?: boolean}) : void\n  markAsPending({onlySelf}?: {onlySelf?: boolean}) : void\n  setParent(parent: FormGroup|FormArray) : void\n  setValue(value: any, options?: Object) : void\n  patchValue(value: any, options?: Object) : void\n  reset(value?: any, options?: Object) : void\n  updateValueAndValidity({onlySelf, emitEvent}?: {onlySelf?: boolean, emitEvent?: boolean}) : void\n  setErrors(errors: {[key: string]: any}, {emitEvent}?: {emitEvent?: boolean}) : void\n  find(path: Array&lt;string|number&gt;|string) : AbstractControl\n  get(path: Array&lt;string|number&gt;|string) : AbstractControl\n  getError(errorCode: string, path?: string[]) : any\n  hasError(errorCode: string, path?: string[]) : boolean\n  root : AbstractControl\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AbstractControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(validator: ValidatorFn, asyncValidator: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('status') }\" class=\"prettyprint no-bg\" id=\"status-anchor\">status : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valid') }\" class=\"prettyprint no-bg\" id=\"valid-anchor\">valid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('invalid') }\" class=\"prettyprint no-bg\" id=\"invalid-anchor\">invalid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('errors') }\" class=\"prettyprint no-bg\" id=\"errors-anchor\">errors : {[key: string]: any}</pre>\n<p>Returns the errors of this control.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pristine') }\" class=\"prettyprint no-bg\" id=\"pristine-anchor\">pristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dirty') }\" class=\"prettyprint no-bg\" id=\"dirty-anchor\">dirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('touched') }\" class=\"prettyprint no-bg\" id=\"touched-anchor\">touched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('untouched') }\" class=\"prettyprint no-bg\" id=\"untouched-anchor\">untouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valueChanges') }\" class=\"prettyprint no-bg\" id=\"valueChanges-anchor\">valueChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('statusChanges') }\" class=\"prettyprint no-bg\" id=\"statusChanges-anchor\">statusChanges : Observable&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pending') }\" class=\"prettyprint no-bg\" id=\"pending-anchor\">pending : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setAsyncValidators') }\" class=\"prettyprint no-bg\" id=\"setAsyncValidators-anchor\">setAsyncValidators(newValidator: AsyncValidatorFn|AsyncValidatorFn[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearAsyncValidators') }\" class=\"prettyprint no-bg\" id=\"clearAsyncValidators-anchor\">clearAsyncValidators() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValidators') }\" class=\"prettyprint no-bg\" id=\"setValidators-anchor\">setValidators(newValidator: ValidatorFn|ValidatorFn[]) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clearValidators') }\" class=\"prettyprint no-bg\" id=\"clearValidators-anchor\">clearValidators() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsTouched') }\" class=\"prettyprint no-bg\" id=\"markAsTouched-anchor\">markAsTouched({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsDirty') }\" class=\"prettyprint no-bg\" id=\"markAsDirty-anchor\">markAsDirty({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsPristine') }\" class=\"prettyprint no-bg\" id=\"markAsPristine-anchor\">markAsPristine({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsUntouched') }\" class=\"prettyprint no-bg\" id=\"markAsUntouched-anchor\">markAsUntouched({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('markAsPending') }\" class=\"prettyprint no-bg\" id=\"markAsPending-anchor\">markAsPending({onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setParent') }\" class=\"prettyprint no-bg\" id=\"setParent-anchor\">setParent(parent: FormGroup|FormArray) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValue') }\" class=\"prettyprint no-bg\" id=\"setValue-anchor\">setValue(value: any, options?: Object) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('patchValue') }\" class=\"prettyprint no-bg\" id=\"patchValue-anchor\">patchValue(value: any, options?: Object) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(value?: any, options?: Object) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateValueAndValidity') }\" class=\"prettyprint no-bg\" id=\"updateValueAndValidity-anchor\">updateValueAndValidity({onlySelf, emitEvent}?: {onlySelf?: boolean, emitEvent?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setErrors') }\" class=\"prettyprint no-bg\" id=\"setErrors-anchor\">setErrors(errors: {[key: string]: any}, {emitEvent}?: {emitEvent?: boolean}) : void</pre>\n<p>Sets errors on a form control.</p> <p>This is used when validations are run not automatically, but manually by the user.</p> <p>Calling <code>setErrors</code> will also update the validity of the parent control.</p> <h2 id=\"usage\">Usage</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var login = new FormControl(\"someLogin\");\nlogin.setErrors({\n  \"notUnique\": true\n});\n\nexpect(login.valid).toEqual(false);\nexpect(login.errors).toEqual({\"notUnique\": true});\n\nlogin.updateValue(\"someOtherLogin\");\n\nexpect(login.valid).toEqual(true);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('find') }\" class=\"prettyprint no-bg\" id=\"find-anchor\">find(path: Array&lt;string|number&gt;|string) : AbstractControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(path: Array&lt;string|number&gt;|string) : AbstractControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getError') }\" class=\"prettyprint no-bg\" id=\"getError-anchor\">getError(errorCode: string, path?: string[]) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hasError') }\" class=\"prettyprint no-bg\" id=\"hasError-anchor\">hasError(errorCode: string, path?: string[]) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('root') }\" class=\"prettyprint no-bg\" id=\"root-anchor\">root : AbstractControl</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/model.ts#L71-L358\">@angular/forms/src/model.ts (line 71)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/AbstractControl-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/AbstractControl-class.html</a>\n  </p>\n</div>\n","api/forms/index/asyncvalidatorfn-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">AsyncValidatorFn</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AsyncValidatorFn {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface AsyncValidatorFn</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L68-L75\">@angular/forms/src/directives/validators.ts (line 68)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/AsyncValidatorFn-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/AsyncValidatorFn-interface.html</a>\n  </p>\n</div>\n","api/forms/index/checkboxcontrolvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">CheckboxControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CheckboxControlValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (_: any) =&gt; {}) : void\n  registerOnTouched(fn: () =&gt; {}) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>input[type=checkbox][formControlName]</code></p>\n<p class=\"selector\"><code>input[type=checkbox][formControl]</code></p>\n<p class=\"selector\"><code>input[type=checkbox][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The accessor for writing a value and listening to changes on a checkbox input element.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input type=\"checkbox\" name=\"rememberLogin\" ngModel&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive CheckboxControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (_: any) =&gt; {}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; {}) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/checkbox_value_accessor.ts#L17-L46\">@angular/forms/src/directives/checkbox_value_accessor.ts (line 17)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/CheckboxControlValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/CheckboxControlValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/forms/index/form_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">FORM_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export FORM_DIRECTIVES</pre>\n<p>A list of all the form directives used as part of a <code>@Component</code> annotation.</p> <p> This is a shorthand for importing them each individually.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  directives: [FORM_DIRECTIVES]\n})\nclass MyApp {}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives.ts#L74-L74\">@angular/forms/src/directives.ts (line 74)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FORM_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FORM_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/forms/index/form_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">FORM_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export FORM_PROVIDERS</pre>\n<p>Shorthand set of providers used for building Angular forms.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L21-L21\">@angular/forms/src/form_providers.ts (line 21)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/core/testing/testmodulemetadata-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">TestModuleMetadata</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TestModuleMetadata {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias TestModuleMetadata</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_bed.ts#L40-L47\">@angular/core/testing/test_bed.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/TestModuleMetadata-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/TestModuleMetadata-type-alias.html</a>\n  </p>\n</div>\n","api/forms/index/formarray-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormArray</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormArray {\n  constructor(controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)\n  \n  \n  controls : AbstractControl[]\n  at(index: number) : AbstractControl\n  push(control: AbstractControl) : void\n  insert(index: number, control: AbstractControl) : void\n  removeAt(index: number) : void\n  length : number\n  setValue(value: any[], {onlySelf}?: {onlySelf?: boolean}) : void\n  patchValue(value: any[], {onlySelf}?: {onlySelf?: boolean}) : void\n  reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form, of variable length, that can contain other controls.</p> <p>A <code>FormArray</code> aggregates the values of each <a href=\"formcontrol-class\"><code>FormControl</code></a> in the group. The status of a <code>FormArray</code> depends on the status of its children. If one of the controls in a group is invalid, the entire array is invalid. Similarly, if a control changes its value, the entire array changes as well.</p> <p><code>FormArray</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"formcontrol-class\"><code>FormControl</code></a> and <a href=\"formgroup-class\"><code>FormGroup</code></a>. <a href=\"formgroup-class\"><code>FormGroup</code></a> can also contain other controls, but is of fixed length.</p> <h2 id=\"adding-or-removing-controls\">Adding or removing controls</h2> <p>To change the controls in the array, use the <code>push</code>, <code>insert</code>, or <code>removeAt</code> methods in <code>FormArray</code> itself. These methods ensure the controls are properly tracked in the form's hierarchy. Do not modify the array of <code>AbstractControl</code>s used to instantiate the <code>FormArray</code> directly, as that will result in strange and unexpected behavior such as broken change detection.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-23desopbnnbpbhzt1br4-p-preview-\">Example (<a href=\"http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview\">live demo</a>)</h3> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormArray</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(controls: AbstractControl[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : AbstractControl[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('at') }\" class=\"prettyprint no-bg\" id=\"at-anchor\">at(index: number) : AbstractControl</pre>\n<p>Get the <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('push') }\" class=\"prettyprint no-bg\" id=\"push-anchor\">push(control: AbstractControl) : void</pre>\n<p>Insert a new <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the end of the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('insert') }\" class=\"prettyprint no-bg\" id=\"insert-anchor\">insert(index: number, control: AbstractControl) : void</pre>\n<p>Insert a new <a href=\"abstractcontrol-class\"><code>AbstractControl</code></a> at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeAt') }\" class=\"prettyprint no-bg\" id=\"removeAt-anchor\">removeAt(index: number) : void</pre>\n<p>Remove the control at the given <code>index</code> in the array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('length') }\" class=\"prettyprint no-bg\" id=\"length-anchor\">length : number</pre>\n<p>Length of the control array.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValue') }\" class=\"prettyprint no-bg\" id=\"setValue-anchor\">setValue(value: any[], {onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('patchValue') }\" class=\"prettyprint no-bg\" id=\"patchValue-anchor\">patchValue(value: any[], {onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/model.ts#L649-L787\">@angular/forms/src/model.ts (line 649)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormArray-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormArray-class.html</a>\n  </p>\n</div>\n","api/forms/index/formarrayname-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormArrayName</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormArrayName {\n  constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])\n  \n  \n  name : string\n  ngOnInit() : void\n  ngOnDestroy() : void\n  control : FormArray\n  formDirective : FormGroupDirective\n  path : string[]\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formArrayName]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Syncs an existing form array to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"formgroupdirective-directive\"><code>FormGroupDirective</code></a>.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Angular FormArray Example&lt;/h2&gt;\n      &lt;form [formGroup]=\"myForm\"&gt;\n        &lt;div formArrayName=\"cities\"&gt;\n          &lt;div *ngFor=\"let city of cityArray.controls; let i=index\"&gt;\n            &lt;input [formControlName]=\"i\"&gt;\n          &lt;/div&gt;\n        &lt;/div&gt;\n      &lt;/form&gt;\n      {{ myForm.value | json }}     // {cities: ['SF', 'NY']}\n    &lt;/div&gt;\n  `\n})\nexport class App {\n  cityArray = new FormArray([\n    new FormControl('SF'),\n    new FormControl('NY')\n  ]);\n  myForm = new FormGroup({\n    cities: this.cityArray\n  });\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive FormArrayName</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnInit') }\" class=\"prettyprint no-bg\" id=\"ngOnInit-anchor\">ngOnInit() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormArray</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : FormGroupDirective</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/reactive_directives/form_group_name.ts#L99-L181\">@angular/forms/src/directives/reactive_directives/form_group_name.ts (line 99)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormArrayName-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormArrayName-directive.html</a>\n  </p>\n</div>\n","api/forms/index/formbuilder-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormBuilder</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormBuilder {\n  group(controlsConfig: {[key: string]: any}, extra?: {[key: string]: any}) : FormGroup\n  control(value: Object, validator?: ValidatorFn|ValidatorFn[], asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]) : FormControl\n  array(controlsConfig: any[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : FormArray\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a form object from a user-specified configuration.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;form [formGroup]=\"loginForm\"&gt;\n      &lt;p&gt;Login &lt;input formControlName=\"login\"&gt;&lt;/p&gt;\n      &lt;div formGroupName=\"passwordRetry\"&gt;\n        &lt;p&gt;Password &lt;input type=\"password\" formControlName=\"password\"&gt;&lt;/p&gt;\n        &lt;p&gt;Confirm password &lt;input type=\"password\" formControlName=\"passwordConfirmation\"&gt;&lt;/p&gt;\n      &lt;/div&gt;\n    &lt;/form&gt;\n    &lt;h3&gt;Form value:&lt;/h3&gt;\n    &lt;pre&gt;{{value}}&lt;/pre&gt;\n  `,\n  directives: [REACTIVE_FORM_DIRECTIVES]\n})\nexport class App {\n  loginForm: FormGroup;\n\n  constructor(builder: FormBuilder) {\n    this.loginForm = builder.group({\n      login: [\"\", Validators.required],\n      passwordRetry: builder.group({\n        password: [\"\", Validators.required],\n        passwordConfirmation: [\"\", Validators.required, asyncValidator]\n      })\n    });\n  }\n\n  get value(): string {\n    return JSON.stringify(this.loginForm.value, null, 2);\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormBuilder</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('group') }\" class=\"prettyprint no-bg\" id=\"group-anchor\">group(controlsConfig: {[key: string]: any}, extra?: {[key: string]: any}) : FormGroup</pre>\n<p>Construct a new <a href=\"formgroup-class\"><code>FormGroup</code></a> with the given map of configuration. Valid keys for the <code>extra</code> parameter map are <code>optionals</code> and <code>validator</code>.</p> <p>See the <a href=\"formgroup-class\"><code>FormGroup</code></a> constructor for more details.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control(value: Object, validator?: ValidatorFn|ValidatorFn[], asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[]) : FormControl</pre>\n<p>Construct a new <a href=\"formcontrol-class\"><code>FormControl</code></a> with the given <code>value</code>,<code>validator</code>, and <code>asyncValidator</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('array') }\" class=\"prettyprint no-bg\" id=\"array-anchor\">array(controlsConfig: any[], validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn) : FormArray</pre>\n<p>Construct an array of <a href=\"formcontrol-class\"><code>FormControl</code></a>s from the given <code>controlsConfig</code> array of configuration, with the given optional <code>validator</code> and <code>asyncValidator</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_builder.ts#L14-L120\">@angular/forms/src/form_builder.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormBuilder-class.html</a>\n  </p>\n</div>\n","api/forms/index/formcontrol-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormControl {\n  constructor(value?: any, validator?: ValidatorFn|ValidatorFn[], asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[])\n  \n  \n  setValue(value: any, {onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange}?: {?: boolean,?: boolean,?: boolean,?: boolean}) : void\n  patchValue(value: any, options?: {?: boolean,?: boolean,?: boolean,?: boolean}) : void\n  updateValue(value: any, options?: {?: boolean,?: boolean,?: boolean,?: boolean}) : void\n  reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void\n  registerOnChange(fn: Function) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form that cannot be divided into other controls. <code>FormControl</code>s have values and validation state, which is determined by an optional validation function.</p> <p><code>FormControl</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"formgroup-class\"><code>FormGroup</code></a> and <a href=\"formarray-class\"><code>FormArray</code></a>.</p> <h2 id=\"usage\">Usage</h2> <p>By default, a <code>FormControl</code> is created for every <code>&lt;input&gt;</code> or other form component. With <a href=\"formcontroldirective-directive\"><code>FormControlDirective</code></a> or <a href=\"formgroupdirective-directive\"><code>FormGroupDirective</code></a> an existing <a href=\"formcontrol-class\"><code>FormControl</code></a> can be bound to a DOM element instead. This <code>FormControl</code> can be configured with a custom validation function.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(value?: any, validator?: ValidatorFn|ValidatorFn[], asyncValidator?: AsyncValidatorFn|AsyncValidatorFn[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValue') }\" class=\"prettyprint no-bg\" id=\"setValue-anchor\">setValue(value: any, {onlySelf, emitEvent, emitModelToViewChange, emitViewToModelChange}?: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  }) : void</pre>\n<p>Set the value of the form control to <code>value</code>.</p> <p>If <code>onlySelf</code> is <code>true</code>, this change will only affect the validation of this <code>FormControl</code> and not its parent component. If <code>emitEvent</code> is <code>true</code>, this change will cause a <code>valueChanges</code> event on the <code>FormControl</code> to be emitted. Both of these options default to <code>false</code>.</p> <p>If <code>emitModelToViewChange</code> is <code>true</code>, the view will be notified about the new value via an <code>onChange</code> event. This is the default behavior if <code>emitModelToViewChange</code> is not specified.</p> <p>If <code>emitViewToModelChange</code> is <code>true</code>, an ngModelChange event will be fired to update the model. This is the default behavior if <code>emitViewToModelChange</code> is not specified.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('patchValue') }\" class=\"prettyprint no-bg\" id=\"patchValue-anchor\">patchValue(value: any, options?: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  }) : void</pre>\n<p>This function is functionally the same as updateValue() at this level. It exists for symmetry with patchValue() on FormGroups and FormArrays, where it does behave differently.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateValue') }\" class=\"prettyprint no-bg\" id=\"updateValue-anchor\">updateValue(value: any, options?: {\n    onlySelf?: boolean,\n    emitEvent?: boolean,\n    emitModelToViewChange?: boolean,\n    emitViewToModelChange?: boolean\n  }) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: Function) : void</pre>\n<p>Register a listener for change events.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/model.ts#L358-L472\">@angular/forms/src/model.ts (line 358)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormControl-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormControl-class.html</a>\n  </p>\n</div>\n","api/forms/index/formgroupname-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormGroupName</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormGroupName {\n  constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])\n  \n  \n  name : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formGroupName]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Syncs an existing form group to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"formgroupdirective-directive\"><code>FormGroupDirective</code></a>.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Angular FormGroup Example&lt;/h2&gt;\n      &lt;form [formGroup]=\"myForm\"&gt;\n        &lt;div formGroupName=\"name\"&gt;\n          &lt;h3&gt;Enter your name:&lt;/h3&gt;\n          &lt;p&gt;First: &lt;input formControlName=\"first\"&gt;&lt;/p&gt;\n          &lt;p&gt;Middle: &lt;input formControlName=\"middle\"&gt;&lt;/p&gt;\n          &lt;p&gt;Last: &lt;input formControlName=\"last\"&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;h3&gt;Name value:&lt;/h3&gt;\n        &lt;pre&gt;{{ nameGroup | json }}&lt;/pre&gt;\n        &lt;p&gt;Name is {{nameGroup?.valid ? \"valid\" : \"invalid\"}}&lt;/p&gt;\n        &lt;h3&gt;What's your favorite food?&lt;/h3&gt;\n        &lt;p&gt;&lt;input formControlName=\"food\"&gt;&lt;/p&gt;\n        &lt;h3&gt;Form value&lt;/h3&gt;\n        &lt;pre&gt; {{ myForm | json }} &lt;/pre&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  `\n})\nexport class App {\n  nameGroup = new FormGroup({\n      first: new FormControl('', Validators.required),\n      middle: new FormControl(''),\n      last: new FormControl('', Validators.required)\n  });\n\n  myForm = new FormGroup({\n    name: this.nameGroup,\n    food: new FormControl()\n  });\n}\n</pre>\n<p>This example syncs the form group for the user's name. The value and validation state of this group can be accessed separately from the overall form.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive FormGroupName</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/reactive_directives/form_group_name.ts#L24-L94\">@angular/forms/src/directives/reactive_directives/form_group_name.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormGroupName-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormGroupName-directive.html</a>\n  </p>\n</div>\n","api/forms/index/controlvalueaccessor-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlValueAccessor {\n  writeValue(obj: any) : void\n  registerOnChange(fn: any) : void\n  registerOnTouched(fn: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A bridge between a control and a native element.</p> <p>A <code>ControlValueAccessor</code> abstracts the operations of writing a new value to a DOM element representing an input control.</p> <p>Please see <a href=\"defaultvalueaccessor-directive\"><code>DefaultValueAccessor</code></a> for more information.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(obj: any) : void</pre>\n<p>Write a new value to the element.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: any) : void</pre>\n<p>Set the function to be called when the control receives a change event.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: any) : void</pre>\n<p>Set the function to be called when the control receives a touch event.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/control_value_accessor.ts#L9-L36\">@angular/forms/src/directives/control_value_accessor.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/ControlValueAccessor-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/ControlValueAccessor-interface.html</a>\n  </p>\n</div>\n","api/forms/index/formcontroldirective-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormControlDirective</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormControlDirective {\n  constructor(_validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  viewModel : any\n  form : FormControl\n  model : any\n  update : EventEmitter\n  ngOnChanges(changes: SimpleChanges) : void\n  path : string[]\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  control : FormControl\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds an existing <a href=\"formcontrol-class\"><code>FormControl</code></a> to a DOM element. * In this example, we bind the control to an input element. When the value of the input element changes, the value of the control will reflect that change. Likewise, if the value of the control changes, the input element reflects that change.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Bind existing control example&lt;/h2&gt;\n      &lt;form&gt;\n        &lt;p&gt;Element with existing control: &lt;input type=\"text\"\n[formControl]=\"loginControl\"&gt;&lt;/p&gt;\n        &lt;p&gt;Value of existing control: {{loginControl.value}}&lt;/p&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  `,\n  directives: [REACTIVE_FORM_DIRECTIVES]\n})\nexport class App {\n  loginControl: FormControl = new FormControl('');\n}\n </pre>\n<h3 id=\"ngmodel\">ngModel</h3> <p>We can also use <code>ngModel</code> to bind a domain model to the form. *</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"login-comp\",\n     directives: [FORM_DIRECTIVES],\n     template: \"&lt;input type='text' [formControl]='loginControl' [(ngModel)]='login'&gt;\"\n     })\nclass LoginComp {\n loginControl: FormControl = new FormControl('');\n login:string;\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive FormControlDirective</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewModel') }\" class=\"prettyprint no-bg\" id=\"viewModel-anchor\">viewModel : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : FormControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/reactive_directives/form_control_directive.ts#L24-L119\">@angular/forms/src/directives/reactive_directives/form_control_directive.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormControlDirective-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormControlDirective-directive.html</a>\n  </p>\n</div>\n","api/forms/index/formgroup-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormGroup</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormGroup {\n  constructor(controls: {[key: string]: AbstractControl}, optionals?: {[key: string]: boolean}, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)\n  \n  \n  controls : {[key: string]: AbstractControl}\n  registerControl(name: string, control: AbstractControl) : AbstractControl\n  addControl(name: string, control: AbstractControl) : void\n  removeControl(name: string) : void\n  include(controlName: string) : void\n  exclude(controlName: string) : void\n  contains(controlName: string) : boolean\n  setValue(value: {[key: string]: any}, {onlySelf}?: {onlySelf?: boolean}) : void\n  patchValue(value: {[key: string]: any}, {onlySelf}?: {onlySelf?: boolean}) : void\n  reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a part of a form, of fixed length, that can contain other controls.</p> <p>A <code>FormGroup</code> aggregates the values of each <a href=\"formcontrol-class\"><code>FormControl</code></a> in the group. The status of a <code>FormGroup</code> depends on the status of its children. If one of the controls in a group is invalid, the entire group is invalid. Similarly, if a control changes its value, the entire group changes as well.</p> <p><code>FormGroup</code> is one of the three fundamental building blocks used to define forms in Angular, along with <a href=\"formcontrol-class\"><code>FormControl</code></a> and <a href=\"formarray-class\"><code>FormArray</code></a>. <a href=\"formarray-class\"><code>FormArray</code></a> can also contain other controls, but is of variable length.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-23desopbnnbpbhzt1br4-p-preview-\">Example (<a href=\"http://plnkr.co/edit/23DESOpbNnBpBHZt1BR4?p=preview\">live demo</a>)</h3> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormGroup</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(controls: {[key: string]: AbstractControl}, optionals?: {[key: string]: boolean}, validator?: ValidatorFn, asyncValidator?: AsyncValidatorFn)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : {[key: string]: AbstractControl}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerControl') }\" class=\"prettyprint no-bg\" id=\"registerControl-anchor\">registerControl(name: string, control: AbstractControl) : AbstractControl</pre>\n<p>Register a control with the group's list of controls.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(name: string, control: AbstractControl) : void</pre>\n<p>Add a control to this group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(name: string) : void</pre>\n<p>Remove a control from this group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('include') }\" class=\"prettyprint no-bg\" id=\"include-anchor\">include(controlName: string) : void</pre>\n<p>Mark the named control as non-optional.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('exclude') }\" class=\"prettyprint no-bg\" id=\"exclude-anchor\">exclude(controlName: string) : void</pre>\n<p>Mark the named control as optional.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('contains') }\" class=\"prettyprint no-bg\" id=\"contains-anchor\">contains(controlName: string) : boolean</pre>\n<p>Check whether there is a control with the given name in the group.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValue') }\" class=\"prettyprint no-bg\" id=\"setValue-anchor\">setValue(value: {[key: string]: any}, {onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('patchValue') }\" class=\"prettyprint no-bg\" id=\"patchValue-anchor\">patchValue(value: {[key: string]: any}, {onlySelf}?: {onlySelf?: boolean}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reset') }\" class=\"prettyprint no-bg\" id=\"reset-anchor\">reset(value?: any, {onlySelf}?: {onlySelf?: boolean}) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/model.ts#L472-L649\">@angular/forms/src/model.ts (line 472)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormGroup-class.html</a>\n  </p>\n</div>\n","api/core/testing/async-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">async</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export async(fn: Function) : (done: any) =&gt; any</pre>\n<p>Wraps a test function in an asynchronous test zone. The test will automatically complete when all asynchronous calls within this zone are done. Can be used to wrap an <a href=\"inject-function\"><code>inject</code></a> call.</p> <p>Example:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">it('...', async(inject([AClass], (object) =&gt; {\n  object.doSomething.then(() =&gt; {\n    expect(...);\n  })\n});\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/async.ts#L11-L50\">@angular/core/testing/async.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/async-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/async-function.html</a>\n  </p>\n</div>\n","api/forms/index/controlcontainer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ControlContainer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ControlContainer {\n  name : string\n  formDirective : Form\n  path : string[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive that contains multiple <a href=\"ngcontrol-class\"><code>NgControl</code></a>s.</p> <p>Only used by the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ControlContainer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n<p>Get the form to which this container belongs.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n<p>Get the path to this container.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/control_container.ts#L10-L32\">@angular/forms/src/directives/control_container.ts (line 10)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/ControlContainer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/ControlContainer-class.html</a>\n  </p>\n</div>\n","api/forms/index/form-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Form</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Form {\n  addControl(dir: NgControl) : void\n  removeControl(dir: NgControl) : void\n  getControl(dir: NgControl) : FormControl\n  addFormGroup(dir: AbstractFormGroupDirective) : void\n  removeFormGroup(dir: AbstractFormGroupDirective) : void\n  getFormGroup(dir: AbstractFormGroupDirective) : FormGroup\n  updateModel(dir: NgControl, value: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface that <a href=\"formgroupdirective-directive\"><code>FormGroupDirective</code></a> and <a href=\"ngform-directive\"><code>NgForm</code></a> implement.</p> <p>Only used by the forms module.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Form</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgControl) : void</pre>\n<p>Add a control to this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgControl) : void</pre>\n<p>Remove a control from this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgControl) : FormControl</pre>\n<p>Look up the <a href=\"formcontrol-class\"><code>FormControl</code></a> associated with a particular <a href=\"ngcontrol-class\"><code>NgControl</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addFormGroup') }\" class=\"prettyprint no-bg\" id=\"addFormGroup-anchor\">addFormGroup(dir: AbstractFormGroupDirective) : void</pre>\n<p>Add a group of controls to this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeFormGroup') }\" class=\"prettyprint no-bg\" id=\"removeFormGroup-anchor\">removeFormGroup(dir: AbstractFormGroupDirective) : void</pre>\n<p>Remove a group of controls from this form.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getFormGroup') }\" class=\"prettyprint no-bg\" id=\"getFormGroup-anchor\">getFormGroup(dir: AbstractFormGroupDirective) : FormGroup</pre>\n<p>Look up the <a href=\"formgroup-class\"><code>FormGroup</code></a> associated with a particular <a href=\"abstractformgroupdirective-class\"><code>AbstractFormGroupDirective</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n<p>Update the model for a particular control with a new value.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/form_interface.ts#L12-L58\">@angular/forms/src/directives/form_interface.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/Form-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/Form-interface.html</a>\n  </p>\n</div>\n","api/forms/index/formgroupdirective-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormGroupDirective</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormGroupDirective {\n  constructor(_validators: any[], _asyncValidators: any[])\n  \n  \n  directives : NgControl[]\n  form : FormGroup\n  ngSubmit : EventEmitter\n  ngOnChanges(changes: SimpleChanges) : void\n  submitted : boolean\n  formDirective : Form\n  control : FormGroup\n  path : string[]\n  addControl(dir: NgControl) : void\n  getControl(dir: NgControl) : FormControl\n  removeControl(dir: NgControl) : void\n  addFormGroup(dir: FormGroupName) : void\n  removeFormGroup(dir: FormGroupName) : void\n  getFormGroup(dir: FormGroupName) : FormGroup\n  addFormArray(dir: FormArrayName) : void\n  removeFormArray(dir: FormArrayName) : void\n  getFormArray(dir: FormArrayName) : FormArray\n  updateModel(dir: NgControl, value: any) : void\n  onSubmit() : boolean\n  onReset() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formGroup]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds an existing form group to a DOM element.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-jqrvirudy8anjxtmujtp-p-preview-\">Example (<a href=\"http://plnkr.co/edit/jqrVirudY8anJxTMUjTP?p=preview\">live demo</a>)</h3> <p>In this example, we bind the form group to the form element, and we bind the login and password controls to the login and password elements.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Binding an existing form group&lt;/h2&gt;\n      &lt;form [formGroup]=\"loginForm\"&gt;\n        &lt;p&gt;Login: &lt;input type=\"text\" formControlName=\"login\"&gt;&lt;/p&gt;\n        &lt;p&gt;Password: &lt;input type=\"password\" formControlName=\"password\"&gt;&lt;/p&gt;\n      &lt;/form&gt;\n      &lt;p&gt;Value:&lt;/p&gt;\n      &lt;pre&gt;{{value}}&lt;/pre&gt;\n    &lt;/div&gt;\n  `,\n  directives: [REACTIVE_FORM_DIRECTIVES]\n})\nexport class App {\n  loginForm: FormGroup;\n\n  constructor() {\n    this.loginForm = new FormGroup({\n      login: new FormControl(\"\"),\n      password: new FormControl(\"\")\n    });\n  }\n\n  get value(): string {\n    return JSON.stringify(this.loginForm.value, null, 2);\n  }\n}\n </pre>\n<p>We can also use ngModel to bind a domain model to the form.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"login-comp\",\n     directives: [REACTIVE_FORM_DIRECTIVES],\n     template: `\n       &lt;form [formGroup]='loginForm'&gt;\n         Login &lt;input type='text' formControlName='login' [(ngModel)]='credentials.login'&gt;\n         Password &lt;input type='password' formControlName='password'\n                         [(ngModel)]='credentials.password'&gt;\n         &lt;button (click)=\"onLogin()\"&gt;Login&lt;/button&gt;\n       &lt;/form&gt;`\n     })\nclass LoginComp {\n credentials: {login: string, password: string};\n loginForm: FormGroup;\n\n constructor() {\n   this.loginForm = new FormGroup({\n     login: new FormControl(\"\"),\n     password: new FormControl(\"\")\n   });\n }\n\n onLogin(): void {\n   // this.credentials.login === 'some login'\n   // this.credentials.password === 'some password'\n }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive FormGroupDirective</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_validators: any[], _asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directives') }\" class=\"prettyprint no-bg\" id=\"directives-anchor\">directives : NgControl[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSubmit') }\" class=\"prettyprint no-bg\" id=\"ngSubmit-anchor\">ngSubmit : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('submitted') }\" class=\"prettyprint no-bg\" id=\"submitted-anchor\">submitted : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgControl) : FormControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgControl) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addFormGroup') }\" class=\"prettyprint no-bg\" id=\"addFormGroup-anchor\">addFormGroup(dir: FormGroupName) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeFormGroup') }\" class=\"prettyprint no-bg\" id=\"removeFormGroup-anchor\">removeFormGroup(dir: FormGroupName) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getFormGroup') }\" class=\"prettyprint no-bg\" id=\"getFormGroup-anchor\">getFormGroup(dir: FormGroupName) : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addFormArray') }\" class=\"prettyprint no-bg\" id=\"addFormArray-anchor\">addFormArray(dir: FormArrayName) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeFormArray') }\" class=\"prettyprint no-bg\" id=\"removeFormArray-anchor\">removeFormArray(dir: FormArrayName) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getFormArray') }\" class=\"prettyprint no-bg\" id=\"getFormArray-anchor\">getFormArray(dir: FormArrayName) : FormArray</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onSubmit') }\" class=\"prettyprint no-bg\" id=\"onSubmit-anchor\">onSubmit() : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onReset') }\" class=\"prettyprint no-bg\" id=\"onReset-anchor\">onReset() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/reactive_directives/form_group_directive.ts#L28-L204\">@angular/forms/src/directives/reactive_directives/form_group_directive.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormGroupDirective-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormGroupDirective-directive.html</a>\n  </p>\n</div>\n","api/forms/index/formsmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormsModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormsModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The ng module for forms.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FormsModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n  providers: [FORM_PROVIDERS],\n  exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L27-L39\">@angular/forms/src/form_providers.ts (line 27)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormsModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormsModule-class.html</a>\n  </p>\n</div>\n","api/forms/index/maxlengthvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">MaxLengthValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MaxLengthValidator {\n  constructor(maxLength: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[maxlength][formControlName]</code></p>\n<p class=\"selector\"><code>[maxlength][formControl]</code></p>\n<p class=\"selector\"><code>[maxlength][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive which installs the <a href=\"maxlengthvalidator-directive\"><code>MaxLengthValidator</code></a> for any <code>formControlName,</code>formControl<code>,\nor control with</code>ngModel<code>that also has a</code>maxlength` attribute.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive MaxLengthValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(maxLength: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L121-L142\">@angular/forms/src/directives/validators.ts (line 121)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/MaxLengthValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/MaxLengthValidator-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ng_validators-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_VALIDATORS: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_VALIDATORS</pre>\n<p>Providers for validators to be used for <a href=\"formcontrol-class\"><code>FormControl</code></a>s in a form.</p> <p>Provide this using <code>multi: true</code> to add validators.</p> <h3 id=\"example\">Example</h3> <pre language=\"ts\" format=\"\" data-language=\"typescript\">bootstrap(MyApp, [{provide: NG_VALIDATORS, useValue: myValidator, multi: true}]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/validators.ts#L28-L28\">@angular/forms/src/validators.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NG_VALIDATORS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NG_VALIDATORS-let.html</a>\n  </p>\n</div>\n","api/forms/index/ng_value_accessor-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_VALUE_ACCESSOR: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_VALUE_ACCESSOR</pre>\n<p>Used to provide a <a href=\"controlvalueaccessor-interface\"><code>ControlValueAccessor</code></a> for form controls.</p> <p>See <a href=\"defaultvalueaccessor-directive\"><code>DefaultValueAccessor</code></a> for how to implement one.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/control_value_accessor.ts#L44-L44\">@angular/forms/src/directives/control_value_accessor.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NG_VALUE_ACCESSOR-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NG_VALUE_ACCESSOR-let.html</a>\n  </p>\n</div>\n","api/forms/index/ngcontrolstatus-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControlStatus</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControlStatus {\n  constructor(cd: NgControl)\n  \n  \n  ngClassUntouched : boolean\n  ngClassTouched : boolean\n  ngClassPristine : boolean\n  ngClassDirty : boolean\n  ngClassValid : boolean\n  ngClassInvalid : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formControlName]</code></p>\n<p class=\"selector\"><code>[ngModel]</code></p>\n<p class=\"selector\"><code>[formControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Directive automatically applied to Angular forms that sets CSS classes based on control status (valid/invalid/dirty/etc).</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgControlStatus</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(cd: NgControl)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassUntouched') }\" class=\"prettyprint no-bg\" id=\"ngClassUntouched-anchor\">ngClassUntouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassTouched') }\" class=\"prettyprint no-bg\" id=\"ngClassTouched-anchor\">ngClassTouched : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassPristine') }\" class=\"prettyprint no-bg\" id=\"ngClassPristine-anchor\">ngClassPristine : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassDirty') }\" class=\"prettyprint no-bg\" id=\"ngClassDirty-anchor\">ngClassDirty : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassValid') }\" class=\"prettyprint no-bg\" id=\"ngClassValid-anchor\">ngClassValid : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngClassInvalid') }\" class=\"prettyprint no-bg\" id=\"ngClassInvalid-anchor\">ngClassInvalid : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/ng_control_status.ts#L13-L56\">@angular/forms/src/directives/ng_control_status.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgControlStatus-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgControlStatus-directive.html</a>\n  </p>\n</div>\n","api/core/testing/testcomponentbuilder-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">TestComponentBuilder</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <code>TestBed.configureTestModule</code> / <code>TestBed.override...</code> / <code>TestBed.createComponent</code> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class TestComponentBuilder {\n  constructor(_injector: Injector)\n  \n  \n  overrideTemplate(componentType: Type, template: string) : TestComponentBuilder\n  overrideView(componentType: Type, view: ViewMetadata) : TestComponentBuilder\n  overrideDirective(componentType: Type, from: Type, to: Type) : TestComponentBuilder\n  overrideProviders(type: Type, providers: any[]) : TestComponentBuilder\n  overrideViewProviders(type: Type, providers: any[]) : TestComponentBuilder\n  overrideAnimations(componentType: Type, animations: AnimationEntryMetadata[]) : TestComponentBuilder\n  createFromFactory(ngZone: NgZone, componentFactory: ComponentFactory&lt;C&gt;) : ComponentFixture&lt;C&gt;\n  createAsync(rootComponentType: ConcreteType&lt;T&gt;) : Promise&lt;ComponentFixture&lt;T&gt;&gt;\n  createFakeAsync(rootComponentType: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;\n  createSync(rootComponentType: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Builds a ComponentFixture for use in component level tests.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class TestComponentBuilder</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_injector: Injector)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideTemplate') }\" class=\"prettyprint no-bg\" id=\"overrideTemplate-anchor\">overrideTemplate(componentType: Type, template: string) : TestComponentBuilder</pre>\n<p>Overrides only the html of a <a href=\"../index/componentmetadata-class\"><code>ComponentMetadata</code></a>. All the other properties of the component's <a href=\"../index/viewmetadata-class\"><code>ViewMetadata</code></a> are preserved.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideView') }\" class=\"prettyprint no-bg\" id=\"overrideView-anchor\">overrideView(componentType: Type, view: ViewMetadata) : TestComponentBuilder</pre>\n<p>Overrides a component's <a href=\"../index/viewmetadata-class\"><code>ViewMetadata</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideDirective') }\" class=\"prettyprint no-bg\" id=\"overrideDirective-anchor\">overrideDirective(componentType: Type, from: Type, to: Type) : TestComponentBuilder</pre>\n<p>Overrides the directives from the component <a href=\"../index/viewmetadata-class\"><code>ViewMetadata</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideProviders') }\" class=\"prettyprint no-bg\" id=\"overrideProviders-anchor\">overrideProviders(type: Type, providers: any[]) : TestComponentBuilder</pre>\n<p>Overrides one or more injectables configured via <code>providers</code> metadata property of a directive or component. Very useful when certain providers need to be mocked out.</p> <p>The providers specified via this method are appended to the existing <code>providers</code> causing the duplicated providers to be overridden.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideViewProviders') }\" class=\"prettyprint no-bg\" id=\"overrideViewProviders-anchor\">overrideViewProviders(type: Type, providers: any[]) : TestComponentBuilder</pre>\n<p>Overrides one or more injectables configured via <code>providers</code> metadata property of a directive or component. Very useful when certain providers need to be mocked out.</p> <p>The providers specified via this method are appended to the existing <code>providers</code> causing the duplicated providers to be overridden.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrideAnimations') }\" class=\"prettyprint no-bg\" id=\"overrideAnimations-anchor\">overrideAnimations(componentType: Type, animations: AnimationEntryMetadata[]) : TestComponentBuilder</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createFromFactory') }\" class=\"prettyprint no-bg\" id=\"createFromFactory-anchor\">createFromFactory(ngZone: NgZone, componentFactory: ComponentFactory&lt;C&gt;) : ComponentFixture&lt;C&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createAsync') }\" class=\"prettyprint no-bg\" id=\"createAsync-anchor\">createAsync(rootComponentType: ConcreteType&lt;T&gt;) : Promise&lt;ComponentFixture&lt;T&gt;&gt;</pre>\n<p>Builds and returns a ComponentFixture.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createFakeAsync') }\" class=\"prettyprint no-bg\" id=\"createFakeAsync-anchor\">createFakeAsync(rootComponentType: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createSync') }\" class=\"prettyprint no-bg\" id=\"createSync-anchor\">createSync(rootComponentType: ConcreteType&lt;T&gt;) : ComponentFixture&lt;T&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/core/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing/test_component_builder.ts#L17-L142\">@angular/core/testing/test_component_builder.ts (line 17)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/TestComponentBuilder-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/TestComponentBuilder-class.html</a>\n  </p>\n</div>\n","api/forms/index/defaultvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">DefaultValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DefaultValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (_: any) =&gt; void) : void\n  registerOnTouched(fn: () =&gt; void) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>input:not([type=checkbox])[formControlName]</code></p>\n<p class=\"selector\"><code>textarea[formControlName]</code></p>\n<p class=\"selector\"><code>input:not([type=checkbox])[formControl]</code></p>\n<p class=\"selector\"><code>textarea[formControl]</code></p>\n<p class=\"selector\"><code>input:not([type=checkbox])[ngModel]</code></p>\n<p class=\"selector\"><code>textarea[ngModel]</code></p>\n<p class=\"selector\"><code>[ngDefaultControl]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The default accessor for writing a value and listening to changes that is used by the <a href=\"ngmodel-directive\"><code>NgModel</code></a>, <a href=\"formcontroldirective-directive\"><code>FormControlDirective</code></a>, and <a href=\"formcontrolname-directive\"><code>FormControlName</code></a> directives.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input type=\"text\" name=\"searchQuery\" ngModel&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive DefaultValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (_: any) =&gt; void) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; void) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/default_value_accessor.ts#L19-L54\">@angular/forms/src/directives/default_value_accessor.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/DefaultValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/DefaultValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ngcontrol-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgControl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgControl {\n  name : string\n  valueAccessor : ControlValueAccessor\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A base class that all control directive extend. It binds a <a href=\"../../common/index/control-class\"><code>Control</code></a> object to a DOM element.</p> <p>Used internally by Angular forms.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NgControl</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('valueAccessor') }\" class=\"prettyprint no-bg\" id=\"valueAccessor-anchor\">valueAccessor : ControlValueAccessor</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/ng_control.ts#L13-L32\">@angular/forms/src/directives/ng_control.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgControl-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgControl-class.html</a>\n  </p>\n</div>\n","api/forms/index/ngmodelgroup-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModelGroup</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModelGroup {\n  constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])\n  \n  \n  name : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngModelGroup]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngModelGroup</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates and binds a model group to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"ngform-directive\"><code>NgForm</code></a>.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;h2&gt;Angular forms Example&lt;/h2&gt;\n      &lt;form #f=\"ngForm\"&gt;\n        &lt;div ngModelGroup=\"name\" #mgName=\"ngModelGroup\"&gt;\n          &lt;h3&gt;Enter your name:&lt;/h3&gt;\n          &lt;p&gt;First: &lt;input name=\"first\" ngModel required&gt;&lt;/p&gt;\n          &lt;p&gt;Middle: &lt;input name=\"middle\" ngModel&gt;&lt;/p&gt;\n          &lt;p&gt;Last: &lt;input name=\"last\" ngModel required&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;h3&gt;Name value:&lt;/h3&gt;\n        &lt;pre&gt;{{ mgName | json }}&lt;/pre&gt;\n        &lt;p&gt;Name is {{mgName?.valid ? \"valid\" : \"invalid\"}}&lt;/p&gt;\n        &lt;h3&gt;What's your favorite food?&lt;/h3&gt;\n        &lt;p&gt;&lt;input name=\"food\" ngModel&gt;&lt;/p&gt;\n        &lt;h3&gt;Form value&lt;/h3&gt;\n        &lt;pre&gt;{{ f | json }}&lt;/pre&gt;\n      &lt;/form&gt;\n    &lt;/div&gt;\n  `\n})\nexport class App {}\n</pre>\n<p>This example declares a model group for a user's name. The value and validation state of this group can be accessed separately from the overall form.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgModelGroup</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(parent: ControlContainer, validators: any[], asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/ng_model_group.ts#L22-L81\">@angular/forms/src/directives/ng_model_group.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgModelGroup-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgModelGroup-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ngselectoption-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgSelectOption</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgSelectOption {\n  constructor(_element: ElementRef, _renderer: Renderer, _select: SelectControlValueAccessor)\n  \n  \n  id : string\n  ngValue \n  value \n  ngOnDestroy()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>option</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marks <code>&lt;option&gt;</code> as dynamic, so Angular can be notified when options change.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;select name=\"city\" ngModel&gt;\n  &lt;option *ngFor=\"let c of cities\" [value]=\"c\"&gt;&lt;/option&gt;\n&lt;/select&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgSelectOption</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_element: ElementRef, _renderer: Renderer, _select: SelectControlValueAccessor)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngValue') }\" class=\"prettyprint no-bg\" id=\"ngValue-anchor\">ngValue</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/select_control_value_accessor.ts#L90-L140\">@angular/forms/src/directives/select_control_value_accessor.ts (line 90)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgSelectOption-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgSelectOption-directive.html</a>\n  </p>\n</div>\n","api/forms/index/patternvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">PatternValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class PatternValidator {\n  constructor(pattern: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[pattern][formControlName]</code></p>\n<p class=\"selector\"><code>[pattern][formControl]</code></p>\n<p class=\"selector\"><code>[pattern][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A Directive that adds the <code>pattern</code> validator to any controls marked with the <code>pattern</code> attribute, via the <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> binding. Uses attribute value as the regex to validate Control value against. Follows pattern attribute semantics; i.e. regex must match entire Control value.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive PatternValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(pattern: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L149-L177\">@angular/forms/src/directives/validators.ts (line 149)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/PatternValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/PatternValidator-directive.html</a>\n  </p>\n</div>\n","api/forms/index/formcontrolname-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">FormControlName</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FormControlName {\n  constructor(_parent: ControlContainer, _validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  name : string\n  model : any\n  update : EventEmitter\n  ngOnChanges(changes: SimpleChanges)\n  ngOnDestroy() : void\n  viewToModelUpdate(newValue: any) : void\n  path : string[]\n  formDirective : any\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  control : FormControl\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[formControlName]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Syncs an existing form control with the specified name to a DOM element.</p> <p>This directive can only be used as a child of <a href=\"formgroupdirective-directive\"><code>FormGroupDirective</code></a>.</p> <h3 id=\"example\">Example</h3> <p>In this example, we create the login and password controls. We can work with each control separately: check its validity, get its value, listen to its changes.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n     selector: \"login-comp\",\n     directives: [REACTIVE_FORM_DIRECTIVES],\n     template: `\n       &lt;form [formGroup]=\"myForm\" (submit)=\"onLogIn()\"&gt;\n         Login &lt;input type=\"text\" formControlName=\"login\"&gt;\n         &lt;div *ngIf=\"!loginCtrl.valid\"&gt;Login is invalid&lt;/div&gt;\n         Password &lt;input type=\"password\" formControlName=\"password\"&gt;\n         &lt;button type=\"submit\"&gt;Log in!&lt;/button&gt;\n       &lt;/form&gt;\n     `})\nclass LoginComp {\n loginCtrl = new Control();\n passwordCtrl = new Control();\n myForm = new FormGroup({\n    login: loginCtrl,\n    password: passwordCtrl\n });\n onLogIn(): void {\n   // value === {login: 'some login', password: 'some password'}\n }\n}\n </pre>\n<p>TODO(kara): Remove ngModel example with reactive paradigm We can also use ngModel to bind a domain model to the form, if you don't want to provide individual init values to each control.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({\n     selector: \"login-comp\",\n     directives: [REACTIVE_FORM_DIRECTIVES],\n     template: `\n       &lt;form [formGroup]=\"myForm\" (submit)='onLogIn()'&gt;\n         Login &lt;input type='text' formControlName='login' [(ngModel)]=\"credentials.login\"&gt;\n         Password &lt;input type='password' formControlName='password'\n                         [(ngModel)]=\"credentials.password\"&gt;\n         &lt;button type='submit'&gt;Log in!&lt;/button&gt;\n       &lt;/form&gt;\n     `})\nclass LoginComp {\n credentials: {login:string, password:string};\n myForm = new FormGroup({\n   login: new Control(this.credentials.login),\n   password: new Control(this.credentials.password)\n });\n\n onLogIn(): void {\n   // this.credentials.login === \"some login\"\n   // this.credentials.password === \"some password\"\n }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive FormControlName</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_parent: ControlContainer, _validators:\n                  /* Array&lt;Validator|Function&gt; */ any[], _asyncValidators:\n                  /* Array&lt;Validator|Function&gt; */ any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormControl</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/reactive_directives/form_control_name.ts#L28-L163\">@angular/forms/src/directives/reactive_directives/form_control_name.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/FormControlName-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/FormControlName-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ngform-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgForm</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgForm {\n  constructor(validators: any[], asyncValidators: any[])\n  \n  \n  form : FormGroup\n  ngSubmit : EventEmitter\n  submitted : boolean\n  formDirective : Form\n  control : FormGroup\n  path : string[]\n  controls : {[key: string]: AbstractControl}\n  addControl(dir: NgModel) : void\n  getControl(dir: NgModel) : FormControl\n  removeControl(dir: NgModel) : void\n  addFormGroup(dir: NgModelGroup) : void\n  removeFormGroup(dir: NgModelGroup) : void\n  getFormGroup(dir: NgModelGroup) : FormGroup\n  updateModel(dir: NgControl, value: any) : void\n  setValue(value: {[key: string]: any}) : void\n  onSubmit() : boolean\n  onReset() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>form:not([ngNoForm]):not([formGroup])</code></p>\n<p class=\"selector\"><code>ngForm</code></p>\n<p class=\"selector\"><code>[ngForm]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Outputs</h2>\n<div class=\"code-margin\">\n<code>ngSubmit</code> bound to <code>NgForm.ngSubmit</code>\n</div> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngForm</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>If <code>NgForm</code> is bound in a component, <code>&lt;form&gt;</code> elements in that component will be upgraded to use the Angular form system.</p> <h3 id=\"typical-use\">Typical Use</h3> <p>Include <code>FORM_DIRECTIVES</code> in the <code>directives</code> section of a <a href=\"../../core/index/component-decorator\"><code>Component</code></a> annotation to use <code>NgForm</code> and its associated controls.</p> <h3 id=\"structure\">Structure</h3> <p>An Angular form is a collection of <code>FormControl</code>s in some hierarchy. <code>FormControl</code>s can be at the top level or can be organized in <code>FormGroup</code>s or <code>FormArray</code>s. This hierarchy is reflected in the form's <code>value</code>, a JSON object that mirrors the form structure.</p> <h3 id=\"submission\">Submission</h3> <p>The <code>ngSubmit</code> event signals when the user triggers a form submission.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n  selector: 'my-app',\n  template: `\n    &lt;div&gt;\n      &lt;p&gt;Submit the form to see the data object Angular builds&lt;/p&gt;\n      &lt;h2&gt;NgForm demo&lt;/h2&gt;\n      &lt;form #f=\"ngForm\" (ngSubmit)=\"onSubmit(f.value)\"&gt;\n        &lt;h3&gt;Control group: credentials&lt;/h3&gt;\n        &lt;div ngModelGroup=\"credentials\"&gt;\n          &lt;p&gt;Login: &lt;input type=\"text\" name=\"login\" ngModel&gt;&lt;/p&gt;\n          &lt;p&gt;Password: &lt;input type=\"password\" name=\"password\" ngModel&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;h3&gt;Control group: person&lt;/h3&gt;\n        &lt;div ngModelGroup=\"person\"&gt;\n          &lt;p&gt;First name: &lt;input type=\"text\" name=\"firstName\" ngModel&gt;&lt;/p&gt;\n          &lt;p&gt;Last name: &lt;input type=\"text\" name=\"lastName\" ngModel&gt;&lt;/p&gt;\n        &lt;/div&gt;\n        &lt;button type=\"submit\"&gt;Submit Form&lt;/button&gt;\n      &lt;p&gt;Form data submitted:&lt;/p&gt;\n      &lt;/form&gt;\n      &lt;pre&gt;{{data}}&lt;/pre&gt;\n    &lt;/div&gt;\n`,\n  directives: []\n})\nexport class App {\n  constructor() {}\n\n  data: string;\n\n  onSubmit(data) {\n    this.data = JSON.stringify(data, null, 2);\n  }\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgForm</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(validators: any[], asyncValidators: any[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('form') }\" class=\"prettyprint no-bg\" id=\"form-anchor\">form : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngSubmit') }\" class=\"prettyprint no-bg\" id=\"ngSubmit-anchor\">ngSubmit : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('submitted') }\" class=\"prettyprint no-bg\" id=\"submitted-anchor\">submitted : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : Form</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('controls') }\" class=\"prettyprint no-bg\" id=\"controls-anchor\">controls : {[key: string]: AbstractControl}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addControl') }\" class=\"prettyprint no-bg\" id=\"addControl-anchor\">addControl(dir: NgModel) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getControl') }\" class=\"prettyprint no-bg\" id=\"getControl-anchor\">getControl(dir: NgModel) : FormControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeControl') }\" class=\"prettyprint no-bg\" id=\"removeControl-anchor\">removeControl(dir: NgModel) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addFormGroup') }\" class=\"prettyprint no-bg\" id=\"addFormGroup-anchor\">addFormGroup(dir: NgModelGroup) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeFormGroup') }\" class=\"prettyprint no-bg\" id=\"removeFormGroup-anchor\">removeFormGroup(dir: NgModelGroup) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getFormGroup') }\" class=\"prettyprint no-bg\" id=\"getFormGroup-anchor\">getFormGroup(dir: NgModelGroup) : FormGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateModel') }\" class=\"prettyprint no-bg\" id=\"updateModel-anchor\">updateModel(dir: NgControl, value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setValue') }\" class=\"prettyprint no-bg\" id=\"setValue-anchor\">setValue(value: {[key: string]: any}) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onSubmit') }\" class=\"prettyprint no-bg\" id=\"onSubmit-anchor\">onSubmit() : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onReset') }\" class=\"prettyprint no-bg\" id=\"onReset-anchor\">onReset() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/ng_form.ts#L29-L184\">@angular/forms/src/directives/ng_form.ts (line 29)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgForm-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ngmodel-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">NgModel</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NgModel {\n  constructor(_parent: ControlContainer, _validators: any[], _asyncValidators: any[], valueAccessors: ControlValueAccessor[])\n  \n  \n  viewModel : any\n  model : any\n  name : string\n  options : {name?: string, standalone?: boolean}\n  update : EventEmitter\n  ngOnChanges(changes: SimpleChanges)\n  ngOnDestroy() : void\n  control : FormControl\n  path : string[]\n  formDirective : any\n  validator : ValidatorFn\n  asyncValidator : AsyncValidatorFn\n  viewToModelUpdate(newValue: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[ngModel]:not([formControlName]):not([formControl])</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Exported as</h2>\n<p class=\"input\"><code>ngModel</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Binds a domain model to a form control.</p> <h3 id=\"usage\">Usage</h3> <p><code>ngModel</code> binds an existing domain model to a form control. For a two-way binding, use <code>[(ngModel)]</code> to ensure the model updates in both directions.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Component({\n     selector: \"search-comp\",\n     directives: [],\n     template: `&lt;input type='text' [(ngModel)]=\"searchQuery\"&gt;`\n     })\nclass SearchComp {\n searchQuery: string;\n}\n </pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive NgModel</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_parent: ControlContainer, _validators: any[], _asyncValidators: any[], valueAccessors: ControlValueAccessor[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewModel') }\" class=\"prettyprint no-bg\" id=\"viewModel-anchor\">viewModel : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('model') }\" class=\"prettyprint no-bg\" id=\"model-anchor\">model : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('options') }\" class=\"prettyprint no-bg\" id=\"options-anchor\">options : {name?: string, standalone?: boolean}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: SimpleChanges)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('control') }\" class=\"prettyprint no-bg\" id=\"control-anchor\">control : FormControl</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('formDirective') }\" class=\"prettyprint no-bg\" id=\"formDirective-anchor\">formDirective : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validator') }\" class=\"prettyprint no-bg\" id=\"validator-anchor\">validator : ValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('asyncValidator') }\" class=\"prettyprint no-bg\" id=\"asyncValidator-anchor\">asyncValidator : AsyncValidatorFn</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('viewToModelUpdate') }\" class=\"prettyprint no-bg\" id=\"viewToModelUpdate-anchor\">viewToModelUpdate(newValue: any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/ng_model.ts#L31-L157\">@angular/forms/src/directives/ng_model.ts (line 31)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NgModel-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NgModel-directive.html</a>\n  </p>\n</div>\n","api/forms/index/reactive_form_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">REACTIVE_FORM_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export REACTIVE_FORM_DIRECTIVES</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives.ts#L80-L81\">@angular/forms/src/directives.ts (line 80)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/REACTIVE_FORM_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/REACTIVE_FORM_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/forms/index/reactive_form_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">REACTIVE_FORM_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export REACTIVE_FORM_PROVIDERS</pre>\n<p>Shorthand set of providers used for building reactive Angular forms.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L27-L27\">@angular/forms/src/form_providers.ts (line 27)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/REACTIVE_FORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/REACTIVE_FORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/forms/index/reactiveformsmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReactiveFormsModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReactiveFormsModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The ng module for reactive forms.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ReactiveFormsModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n  providers: [REACTIVE_FORM_PROVIDERS],\n  exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L39-L51\">@angular/forms/src/form_providers.ts (line 39)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/ReactiveFormsModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/ReactiveFormsModule-class.html</a>\n  </p>\n</div>\n","api/forms/index/requiredvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RequiredValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RequiredValidator {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[required][formControlName]</code></p>\n<p class=\"selector\"><code>[required][formControl]</code></p>\n<p class=\"selector\"><code>[required][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A Directive that adds the <code>required</code> validator to any controls marked with the <code>required</code> attribute, via the <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> binding.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;input name=\"fullName\" ngModel required&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RequiredValidator</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L44-L63\">@angular/forms/src/directives/validators.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/RequiredValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/RequiredValidator-directive.html</a>\n  </p>\n</div>\n","api/forms/index/validator-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Validator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Validator {\n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface that can be implemented by classes that can act as validators.</p> <h2 id=\"usage\">Usage</h2> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">@Directive({\n  selector: '[custom-validator]',\n  providers: [{provide: NG_VALIDATORS, useExisting: CustomValidatorDirective, multi: true}]\n})\nclass CustomValidatorDirective implements Validator {\n  validate(c: Control): {[key: string]: any} {\n    return {\"custom\": true};\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Validator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L13-L36\">@angular/forms/src/directives/validators.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/Validator-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/Validator-interface.html</a>\n  </p>\n</div>\n","api/forms/index/validatorfn-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ValidatorFn</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ValidatorFn {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ValidatorFn</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L63-L68\">@angular/forms/src/directives/validators.ts (line 63)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/ValidatorFn-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/ValidatorFn-interface.html</a>\n  </p>\n</div>\n","api/forms/index/validators-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Validators</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Validators {\n  required(control: AbstractControl) : {[key: string]: boolean}\n  minLength(minLength: number) : ValidatorFn\n  maxLength(maxLength: number) : ValidatorFn\n  pattern(pattern: string) : ValidatorFn\n  nullValidator(c: AbstractControl) : {[key: string]: boolean}\n  compose(validators: ValidatorFn[]) : ValidatorFn\n  composeAsync(validators: AsyncValidatorFn[]) : AsyncValidatorFn\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Provides a set of validators used by form controls.</p> <p>A validator is a function that processes a <a href=\"formcontrol-class\"><code>FormControl</code></a> or collection of controls and returns a map of errors. A null map means that validation has passed.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">var loginControl = new FormControl(\"\", Validators.required)\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Validators</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('required') }\" class=\"prettyprint no-bg\" id=\"required-anchor\">required(control: AbstractControl) : {[key: string]: boolean}</pre>\n<p>Validator that requires controls to have a non-empty value.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('minLength') }\" class=\"prettyprint no-bg\" id=\"minLength-anchor\">minLength(minLength: number) : ValidatorFn</pre>\n<p>Validator that requires controls to have a value of a minimum length.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('maxLength') }\" class=\"prettyprint no-bg\" id=\"maxLength-anchor\">maxLength(maxLength: number) : ValidatorFn</pre>\n<p>Validator that requires controls to have a value of a maximum length.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pattern') }\" class=\"prettyprint no-bg\" id=\"pattern-anchor\">pattern(pattern: string) : ValidatorFn</pre>\n<p>Validator that requires a control to match a regex to its value.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('nullValidator') }\" class=\"prettyprint no-bg\" id=\"nullValidator-anchor\">nullValidator(c: AbstractControl) : {[key: string]: boolean}</pre>\n<p>No-op validator.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compose') }\" class=\"prettyprint no-bg\" id=\"compose-anchor\">compose(validators: ValidatorFn[]) : ValidatorFn</pre>\n<p>Compose multiple validators into a single function that returns the union of the individual error maps.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('composeAsync') }\" class=\"prettyprint no-bg\" id=\"composeAsync-anchor\">composeAsync(validators: AsyncValidatorFn[]) : AsyncValidatorFn</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/validators.ts#L40-L134\">@angular/forms/src/validators.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/Validators-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/Validators-class.html</a>\n  </p>\n</div>\n","api/forms/index/disabledeprecatedforms-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">disableDeprecatedForms</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export disableDeprecatedForms() : any[]</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L51-L58\">@angular/forms/src/form_providers.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/disableDeprecatedForms-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/disableDeprecatedForms-function.html</a>\n  </p>\n</div>\n","api/http/index/baserequestoptions-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BaseRequestOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BaseRequestOptions {\n  constructor()\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Subclass of <a href=\"requestoptions-class\"><code>RequestOptions</code></a>, with default values.</p> <p>Default values:</p> <ul> <li>method: <a href=\"requestmethod-enum\">RequestMethod.Get</a>\n</li> <li>headers: empty <a href=\"headers-class\"><code>Headers</code></a> object</li> </ul> <p>This class could be extended and bound to the <a href=\"requestoptions-class\"><code>RequestOptions</code></a> class when configuring an <a href=\"../../core/index/injector-class\"><code>Injector</code></a>, in order to override the default options used by <a href=\"http-class\"><code>Http</code></a> to create and send <a href=\"request-class\">Requests</a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-lekvsx-p-preview-\">Example (<a href=\"http://plnkr.co/edit/LEKVSx?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';\nimport {App} from './myapp';\n\nclass MyOptions extends BaseRequestOptions {\n  search: string = 'coreTeam=true';\n}\n\nbootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n</pre>\n<p>The options could also be extended when manually creating a <a href=\"request-class\"><code>Request</code></a> object.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-oyboevntdhosfi9yxavb-p-preview-\">Example (<a href=\"http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n\nvar options = new BaseRequestOptions();\nvar req = new Request(options.merge({\n  method: RequestMethod.Post,\n  url: 'https://google.com'\n}));\nconsole.log('req.method:', RequestMethod[req.method]); // Post\nconsole.log('options.url:', options.url); // null\nconsole.log('req.url:', req.url); // https://google.com\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BaseRequestOptions</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/base_request_options.ts#L133-L185\">@angular/http/src/base_request_options.ts (line 133)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/BaseRequestOptions-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/BaseRequestOptions-class.html</a>\n  </p>\n</div>\n","api/http/index/baseresponseoptions-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BaseResponseOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BaseResponseOptions {\n  constructor()\n  \n  \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Subclass of <a href=\"responseoptions-class\"><code>ResponseOptions</code></a>, with default values.</p> <p>Default values:</p> <ul> <li>status: 200</li> <li>headers: empty <a href=\"headers-class\"><code>Headers</code></a> object</li> </ul> <p>This class could be extended and bound to the <a href=\"responseoptions-class\"><code>ResponseOptions</code></a> class when configuring an <a href=\"../../core/index/injector-class\"><code>Injector</code></a>, in order to override the default options used by <a href=\"http-class\"><code>Http</code></a> to create <a href=\"response-class\">Responses</a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-qv8dlt-p-preview-\">Example (<a href=\"http://plnkr.co/edit/qv8DLT?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n'@angular/http';\nimport {App} from './myapp';\n\nclass MyOptions extends BaseResponseOptions {\n  headers:Headers = new Headers({network: 'github'});\n}\n\nbootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n</pre>\n<p>The options could also be extended when manually creating a <a href=\"response-class\"><code>Response</code></a> object.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-vngosowiaexetbstdoix-p-preview-\">Example (<a href=\"http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {BaseResponseOptions, Response} from '@angular/http';\n\nvar options = new BaseResponseOptions();\nvar res = new Response(options.merge({\n  body: 'Angular',\n  headers: new Headers({framework: 'angular'})\n}));\nconsole.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\nconsole.log('res.text():', res.text()); // Angular;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BaseResponseOptions</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/base_response_options.ts#L115-L168\">@angular/http/src/base_response_options.ts (line 115)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/BaseResponseOptions-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/BaseResponseOptions-class.html</a>\n  </p>\n</div>\n","api/http/index/browserxhr-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BrowserXhr</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BrowserXhr {\n  constructor()\n  \n  \n  build() : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A backend for http that uses the <code>XMLHttpRequest</code> browser API.</p> <p>Take care not to evaluate this in non-browser contexts.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BrowserXhr</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('build') }\" class=\"prettyprint no-bg\" id=\"build-anchor\">build() : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/browser_xhr.ts#L9-L22\">@angular/http/src/backends/browser_xhr.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/BrowserXhr-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/BrowserXhr-class.html</a>\n  </p>\n</div>\n","api/http/index/connectionbackend-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ConnectionBackend</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ConnectionBackend {\n  createConnection(request: any) : Connection\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Abstract class from which real backends are derived.</p> <p>The primary purpose of a <code>ConnectionBackend</code> is to create new connections to fulfill a given <a href=\"request-class\"><code>Request</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ConnectionBackend</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createConnection') }\" class=\"prettyprint no-bg\" id=\"createConnection-anchor\">createConnection(request: any) : Connection</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/interfaces.ts#L12-L22\">@angular/http/src/interfaces.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ConnectionBackend-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ConnectionBackend-class.html</a>\n  </p>\n</div>\n","api/http/index/cookiexsrfstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">CookieXSRFStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CookieXSRFStrategy {\n  constructor(_cookieName?: string, _headerName?: string)\n  \n  \n  configureRequest(req: Request)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>XSRFConfiguration</code> sets up Cross Site Request Forgery (XSRF) protection for the application using a cookie. See <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)\">Cross-Site_Request<em>Forgery</em>(CSRF)</a> for more information on XSRF.</p> <p>Applications can configure custom cookie and header names by binding an instance of this class with different <code>cookieName</code> and <code>headerName</code> values. See the main HTTP documentation for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class CookieXSRFStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_cookieName?: string, _headerName?: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureRequest') }\" class=\"prettyprint no-bg\" id=\"configureRequest-anchor\">configureRequest(req: Request)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/xhr_backend.ts#L171-L194\">@angular/http/src/backends/xhr_backend.ts (line 171)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/CookieXSRFStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/CookieXSRFStrategy-class.html</a>\n  </p>\n</div>\n","api/http/index/http_bindings-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">HTTP_BINDINGS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export HTTP_BINDINGS</pre>\n<p>See <a href=\"http_providers-let\"><code>HTTP_PROVIDERS</code></a> instead.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L216-L216\">@angular/http/http.ts (line 216)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/HTTP_BINDINGS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/HTTP_BINDINGS-let.html</a>\n  </p>\n</div>\n","api/forms/index/minlengthvalidator-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">MinLengthValidator</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MinLengthValidator {\n  constructor(minLength: string)\n  \n  \n  validate(c: AbstractControl) : {[key: string]: any}\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[minlength][formControlName]</code></p>\n<p class=\"selector\"><code>[minlength][formControl]</code></p>\n<p class=\"selector\"><code>[minlength][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A directive which installs the <a href=\"minlengthvalidator-directive\"><code>MinLengthValidator</code></a> for any <code>formControlName</code>, <code>formControl</code>, or control with <code>ngModel</code> that also has a <code>minlength</code> attribute.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive MinLengthValidator</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(minLength: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('validate') }\" class=\"prettyprint no-bg\" id=\"validate-anchor\">validate(c: AbstractControl) : {[key: string]: any}</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/validators.ts#L88-L108\">@angular/forms/src/directives/validators.ts (line 88)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/MinLengthValidator-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/MinLengthValidator-directive.html</a>\n  </p>\n</div>\n","api/forms/index/ng_async_validators-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">NG_ASYNC_VALIDATORS: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export NG_ASYNC_VALIDATORS</pre>\n<p>Providers for asynchronous validators to be used for <a href=\"formcontrol-class\"><code>FormControl</code></a>s in a form.</p> <p>Provide this using <code>multi: true</code> to add validators.</p> <p>See <a href=\"ng_validators-let\"><code>NG_VALIDATORS</code></a> for more details.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/validators.ts#L40-L40\">@angular/forms/src/validators.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/NG_ASYNC_VALIDATORS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/NG_ASYNC_VALIDATORS-let.html</a>\n  </p>\n</div>\n","api/http/index/http_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">HTTP_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export HTTP_PROVIDERS</pre>\n<p>Provides a basic set of injectables to use the <a href=\"http-class\"><code>Http</code></a> service in any application.</p> <p>The <code>HTTP_PROVIDERS</code> should be included either in a component's injector, or in the root injector when bootstrapping an application.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-snj7nv-p-preview-\">Example (<a href=\"http://plnkr.co/edit/snj7Nv?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {NgFor} from '@angular/common';\nimport {HTTP_PROVIDERS, Http} from '@angular/http';\n\n@Component({\n  selector: 'app',\n  providers: [HTTP_PROVIDERS],\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;People&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;li *ngFor=\"let person of people\"&gt;\n          {{person.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `,\n  directives: [NgFor]\n})\nexport class App {\n  people: Object[];\n  constructor(http:Http) {\n    http.get('people.json').subscribe(res =&gt; {\n      this.people = res.json();\n    });\n  }\n  active:boolean = false;\n  toggleActiveState() {\n    this.active = !this.active;\n  }\n}\n\nbootstrap(App)\n  .catch(err =&gt; console.error(err));\n</pre>\n<p>The primary public API included in <code>HTTP_PROVIDERS</code> is the <a href=\"http-class\"><code>Http</code></a> class. However, other providers required by <code>Http</code> are included, which may be beneficial to override in certain cases.</p> <p>The providers included in <code>HTTP_PROVIDERS</code> include:</p> <ul> <li><a href=\"http-class\"><code>Http</code></a></li> <li><a href=\"xhrbackend-class\"><code>XHRBackend</code></a></li> <li>\n<a href=\"xsrfstrategy-class\"><code>XSRFStrategy</code></a> - Bound to <a href=\"cookiexsrfstrategy-class\"><code>CookieXSRFStrategy</code></a> class (see below)</li> <li>\n<code>BrowserXHR</code> - Private factory to create <code>XMLHttpRequest</code> instances</li> <li>\n<a href=\"requestoptions-class\"><code>RequestOptions</code></a> - Bound to <a href=\"baserequestoptions-class\"><code>BaseRequestOptions</code></a> class</li> <li>\n<a href=\"responseoptions-class\"><code>ResponseOptions</code></a> - Bound to <a href=\"baseresponseoptions-class\"><code>BaseResponseOptions</code></a> class</li> </ul> <p>There may be cases where it makes sense to extend the base request options, such as to add a search string to be appended to all URLs. To accomplish this, a new provider for <a href=\"requestoptions-class\"><code>RequestOptions</code></a> should be added in the same injector as <code>HTTP_PROVIDERS</code>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-acmexi-p-preview-\">Example (<a href=\"http://plnkr.co/edit/aCMEXi?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n\nclass MyOptions extends BaseRequestOptions {\n  search: string = 'coreTeam=true';\n}\n\nbootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])\n  .catch(err =&gt; console.error(err));\n</pre>\n<p>Likewise, to use a mock backend for unit tests, the <a href=\"xhrbackend-class\"><code>XHRBackend</code></a> provider should be bound to <a href=\"../testing/mockbackend-class\"><code>MockBackend</code></a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-7lwald-p-preview-\">Example (<a href=\"http://plnkr.co/edit/7LWALD?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, Http, Response, XHRBackend} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\n\nvar people = [{name: 'Jeff'}, {name: 'Tobias'}];\n\nvar injector = Injector.resolveAndCreate([\n  HTTP_PROVIDERS,\n  MockBackend,\n  {provide: XHRBackend, useExisting: MockBackend}\n]);\nvar http = injector.get(Http);\nvar backend = injector.get(MockBackend);\n\n// Listen for any new requests\nbackend.connections.observer({\n  next: connection =&gt; {\n    var response = new Response({body: people});\n    setTimeout(() =&gt; {\n      // Send a response to the request\n      connection.mockRespond(response);\n    });\n  }\n});\n\nhttp.get('people.json').observer({\n  next: res =&gt; {\n    // Response came from mock backend\n    console.log('first person', res.json()[0].name);\n  }\n});\n</pre>\n<p><code>XSRFStrategy</code> allows customizing how the application protects itself against Cross Site Request Forgery (XSRF) attacks. By default, Angular will look for a cookie called <code>'XSRF-TOKEN'</code>, and set an HTTP request header called <code>'X-XSRF-TOKEN'</code> with the value of the cookie on each request, allowing the server side to validate that the request comes from its own front end.</p> <p>Applications can override the names used by configuring a different <code>XSRFStrategy</code> instance. Most commonly, applications will configure a <code>CookieXSRFStrategy</code> with different cookie or header names, but if needed, they can supply a completely custom implementation.</p> <p>See the security documentation for more information.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {HTTP_PROVIDERS, XSRFStrategy, CookieXSRFStrategy} from '@angular/http';\n\nbootstrap(\n    App,\n    [HTTP_PROVIDERS, {provide: XSRFStrategy,\n        useValue: new CookieXSRFStrategy('MY-XSRF-COOKIE-NAME', 'X-MY-XSRF-HEADER-NAME')}])\n  .catch(err =&gt; console.error(err));\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L186-L195\">@angular/http/http.ts (line 186)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/HTTP_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/HTTP_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/http/index/headers-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Headers</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Headers {\n  fromResponseHeaderString(headersString: string) : Headers\n  constructor(headers?: Headers|{[key: string]: any})\n  \n  \n  append(name: string, value: string) : void\n  delete(name: string) : void\n  forEach(fn: (values: string[], name: string, headers: Map&lt;string, string[]&gt;) =&gt; void) : void\n  get(header: string) : string\n  has(header: string) : boolean\n  keys() : string[]\n  set(header: string, value: string|string[]) : void\n  values() : string[][]\n  toJSON() : {[key: string]: any}\n  getAll(header: string) : string[]\n  entries()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Polyfill for <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers\">Headers</a>, as specified in the <a href=\"https://fetch.spec.whatwg.org/#headers-class\">Fetch Spec</a>.</p> <p>The only known difference between this <code>Headers</code> implementation and the spec is the lack of an <code>entries</code> method.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-mtdwt6-p-preview-\">Example (<a href=\"http://plnkr.co/edit/MTdwT6?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Headers} from '@angular/http';\n\nvar firstHeaders = new Headers();\nfirstHeaders.append('Content-Type', 'image/jpeg');\nconsole.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n\n// Create headers from Plain Old JavaScript Object\nvar secondHeaders = new Headers({\n  'X-My-Custom-Header': 'Angular'\n});\nconsole.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n\nvar thirdHeaders = new Headers(secondHeaders);\nconsole.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Headers</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(headers?: Headers|{[key: string]: any})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fromResponseHeaderString') }\" class=\"prettyprint no-bg\" id=\"fromResponseHeaderString-anchor\">fromResponseHeaderString(headersString: string) : Headers</pre>\n<p>Returns a new Headers instance from the given DOMString of Response Headers</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('append') }\" class=\"prettyprint no-bg\" id=\"append-anchor\">append(name: string, value: string) : void</pre>\n<p>Appends a header to existing list of header values for a given header name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('delete') }\" class=\"prettyprint no-bg\" id=\"delete-anchor\">delete(name: string) : void</pre>\n<p>Deletes all header values for the given name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forEach') }\" class=\"prettyprint no-bg\" id=\"forEach-anchor\">forEach(fn: (values: string[], name: string, headers: Map&lt;string, string[]&gt;) =&gt; void) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(header: string) : string</pre>\n<p>Returns first header that matches given name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('has') }\" class=\"prettyprint no-bg\" id=\"has-anchor\">has(header: string) : boolean</pre>\n<p>Check for existence of header by given name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('keys') }\" class=\"prettyprint no-bg\" id=\"keys-anchor\">keys() : string[]</pre>\n<p>Provides names of set headers</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('set') }\" class=\"prettyprint no-bg\" id=\"set-anchor\">set(header: string, value: string|string[]) : void</pre>\n<p>Sets or overrides header value for given name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('values') }\" class=\"prettyprint no-bg\" id=\"values-anchor\">values() : string[][]</pre>\n<p>Returns values of all headers.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toJSON') }\" class=\"prettyprint no-bg\" id=\"toJSON-anchor\">toJSON() : {[key: string]: any}</pre>\n<p>Returns string of all headers.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getAll') }\" class=\"prettyprint no-bg\" id=\"getAll-anchor\">getAll(header: string) : string[]</pre>\n<p>Returns list of header values for a given name.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('entries') }\" class=\"prettyprint no-bg\" id=\"entries-anchor\">entries()</pre>\n<p>This method is not implemented.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/headers.ts#L11-L165\">@angular/http/src/headers.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Headers-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Headers-class.html</a>\n  </p>\n</div>\n","api/http/index/jsonpbackend-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">JSONPBackend</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class JSONPBackend {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A <a href=\"connectionbackend-class\"><code>ConnectionBackend</code></a> that uses the JSONP strategy of making requests.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class JSONPBackend</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/jsonp_backend.ts#L144-L151\">@angular/http/src/backends/jsonp_backend.ts (line 144)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/JSONPBackend-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/JSONPBackend-class.html</a>\n  </p>\n</div>\n","api/http/index/jsonpconnection-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">JSONPConnection</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class JSONPConnection {\n  readyState : ReadyState\n  request : Request\n  response : Observable&lt;Response&gt;\n  finished(data?: any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Abstract base class for an in-flight JSONP request.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class JSONPConnection</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('readyState') }\" class=\"prettyprint no-bg\" id=\"readyState-anchor\">readyState : ReadyState</pre>\n<p>The <a href=\"readystate-enum\"><code>ReadyState</code></a> of this request.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request : Request</pre>\n<p>The outgoing HTTP request.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('response') }\" class=\"prettyprint no-bg\" id=\"response-anchor\">response : Observable&lt;Response&gt;</pre>\n<p>An observable that completes with the response, when the request is finished.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('finished') }\" class=\"prettyprint no-bg\" id=\"finished-anchor\">finished(data?: any) : void</pre>\n<p>Callback called when the JSONP request completes, to notify the application of the new data.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/jsonp_backend.ts#L24-L52\">@angular/http/src/backends/jsonp_backend.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/JSONPConnection-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/JSONPConnection-class.html</a>\n  </p>\n</div>\n","api/http/index/json_bindings-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">JSON_BINDINGS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export JSON_BINDINGS</pre>\n<p>See <a href=\"jsonp_providers-let\"><code>JSONP_PROVIDERS</code></a> instead.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L347-L347\">@angular/http/http.ts (line 347)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/JSON_BINDINGS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/JSON_BINDINGS-let.html</a>\n  </p>\n</div>\n","api/http/index/jsonp-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Jsonp</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Jsonp {\n  constructor(backend: ConnectionBackend, defaultOptions: RequestOptions)\n  \n  \n  request(url: string|Request, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Jsonp</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(backend: ConnectionBackend, defaultOptions: RequestOptions)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request(url: string|Request, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs any type of http request. First argument is required, and can either be a url or a <a href=\"request-class\"><code>Request</code></a> instance. If the first argument is a url, an optional <a href=\"requestoptions-class\"><code>RequestOptions</code></a> object can be provided as the 2nd argument. The options object will be merged with the values of <a href=\"baserequestoptions-class\"><code>BaseRequestOptions</code></a> before performing the request.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/http.ts#L198-L240\">@angular/http/src/http.ts (line 198)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Jsonp-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Jsonp-class.html</a>\n  </p>\n</div>\n","api/http/index/http-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Http</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Http {\n  constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions)\n  \n  \n  request(url: string|Request, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  get(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  post(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  put(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  delete(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  patch(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  head(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n  options(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Performs http requests using <code>XMLHttpRequest</code> as the default backend.</p> <p><code>Http</code> is available as an injectable class, with methods to perform http requests. Calling <code>request</code> returns an <code>Observable</code> which will emit a single <a href=\"response-class\"><code>Response</code></a> when a response is received.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {Http, HTTP_PROVIDERS} from '@angular/http';\nimport 'rxjs/add/operator/map'\n@Component({\n  selector: 'http-app',\n  viewProviders: [HTTP_PROVIDERS],\n  templateUrl: 'people.html'\n})\nclass PeopleComponent {\n  constructor(http: Http) {\n    http.get('people.json')\n      // Call map on the response observable to get the parsed people object\n      .map(res =&gt; res.json())\n      // Subscribe to the observable to get the parsed people object and attach it to the\n      // component\n      .subscribe(people =&gt; this.people = people);\n  }\n}\n</pre>\n<h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">http.get('people.json').subscribe((res:Response) =&gt; this.people = res.json());\n</pre>\n<p>The default construct used to perform requests, <code>XMLHttpRequest</code>, is abstracted as a \"Backend\" ( <a href=\"xhrbackend-class\"><code>XHRBackend</code></a> in this case), which could be mocked with dependency injection by replacing the <a href=\"xhrbackend-class\"><code>XHRBackend</code></a> provider, as in the following example:</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {BaseRequestOptions, Http} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nvar injector = Injector.resolveAndCreate([\n  BaseRequestOptions,\n  MockBackend,\n  {provide: Http, useFactory:\n      function(backend, defaultOptions) {\n        return new Http(backend, defaultOptions);\n      },\n      deps: [MockBackend, BaseRequestOptions]}\n]);\nvar http = injector.get(Http);\nhttp.get('request-from-mock-backend.json').subscribe((res:Response) =&gt; doSomething(res));\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Http</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_backend: ConnectionBackend, _defaultOptions: RequestOptions)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request(url: string|Request, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs any type of http request. First argument is required, and can either be a url or a <a href=\"request-class\"><code>Request</code></a> instance. If the first argument is a url, an optional <a href=\"requestoptions-class\"><code>RequestOptions</code></a> object can be provided as the 2nd argument. The options object will be merged with the values of <a href=\"baserequestoptions-class\"><code>BaseRequestOptions</code></a> before performing the request.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>get</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('post') }\" class=\"prettyprint no-bg\" id=\"post-anchor\">post(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>post</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('put') }\" class=\"prettyprint no-bg\" id=\"put-anchor\">put(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>put</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('delete') }\" class=\"prettyprint no-bg\" id=\"delete-anchor\">delete(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>delete</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('patch') }\" class=\"prettyprint no-bg\" id=\"patch-anchor\">patch(url: string, body: any, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>patch</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('head') }\" class=\"prettyprint no-bg\" id=\"head-anchor\">head(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>head</code> http method.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('options') }\" class=\"prettyprint no-bg\" id=\"options-anchor\">options(url: string, options?: RequestOptionsArgs) : Observable&lt;Response&gt;</pre>\n<p>Performs a request with <code>options</code> http method.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/http.ts#L47-L198\">@angular/http/src/http.ts (line 47)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Http-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Http-class.html</a>\n  </p>\n</div>\n","api/http/index/httpmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HttpModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HttpModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The module that includes http's providers</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HttpModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({providers: HTTP_PROVIDERS})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L347-L356\">@angular/http/http.ts (line 347)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/HttpModule-class.html</a>\n  </p>\n</div>\n","api/http/index/jsonpmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">JsonpModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class JsonpModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The module that includes jsonp's providers</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class JsonpModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({providers: JSONP_PROVIDERS})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L356-L365\">@angular/http/http.ts (line 356)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/JsonpModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/JsonpModule-class.html</a>\n  </p>\n</div>\n","api/http/index/queryencoder-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">QueryEncoder</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class QueryEncoder {\n  encodeKey(k: string) : string\n  encodeValue(v: string) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class QueryEncoder</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encodeKey') }\" class=\"prettyprint no-bg\" id=\"encodeKey-anchor\">encodeKey(k: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('encodeValue') }\" class=\"prettyprint no-bg\" id=\"encodeValue-anchor\">encodeValue(v: string) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/url_search_params.ts#L26-L34\">@angular/http/src/url_search_params.ts (line 26)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/QueryEncoder-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/QueryEncoder-class.html</a>\n  </p>\n</div>\n","api/http/index/readystate-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReadyState</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReadyState {\n  Unsent \n  Open \n  HeadersReceived \n  Loading \n  Done \n  Cancelled \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>All possible states in which a connection can be, based on <a href=\"http://www.w3.org/TR/XMLHttpRequest/#states\">States</a> from the <code>XMLHttpRequest</code> spec, but with an additional \"CANCELLED\" state.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum ReadyState</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Unsent') }\" class=\"prettyprint no-bg\" id=\"Unsent-anchor\">Unsent</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Open') }\" class=\"prettyprint no-bg\" id=\"Open-anchor\">Open</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('HeadersReceived') }\" class=\"prettyprint no-bg\" id=\"HeadersReceived-anchor\">HeadersReceived</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Loading') }\" class=\"prettyprint no-bg\" id=\"Loading-anchor\">Loading</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Done') }\" class=\"prettyprint no-bg\" id=\"Done-anchor\">Done</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Cancelled') }\" class=\"prettyprint no-bg\" id=\"Cancelled-anchor\">Cancelled</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/enums.ts#L21-L36\">@angular/http/src/enums.ts (line 21)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ReadyState-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ReadyState-enum.html</a>\n  </p>\n</div>\n","api/http/index/response-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Response</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Response {\n  constructor(responseOptions: ResponseOptions)\n  \n  \n  type : ResponseType\n  ok : boolean\n  url : string\n  status : number\n  statusText : string\n  bytesLoaded : number\n  totalBytes : number\n  headers : Headers\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates <code>Response</code> instances from provided values.</p> <p>Though this object isn't usually instantiated by end-users, it is the primary object interacted with when it comes time to add data to a view.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">http.request('my-friends.txt').subscribe(response =&gt; this.friends = response.text());\n</pre>\n<p>The Response's interface is inspired by the Response constructor defined in the <a href=\"https://fetch.spec.whatwg.org/#response-class\">Fetch Spec</a>, but is considered a static value whose body can be accessed many times. There are other differences in the implementation, but this is the most significant.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Response</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(responseOptions: ResponseOptions)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('type') }\" class=\"prettyprint no-bg\" id=\"type-anchor\">type : ResponseType</pre>\n<p>One of \"basic\", \"cors\", \"default\", \"error, or \"opaque\".</p> <p>Defaults to \"default\".</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ok') }\" class=\"prettyprint no-bg\" id=\"ok-anchor\">ok : boolean</pre>\n<p>True if the response's status is within 200-299</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n<p>URL of response.</p> <p>Defaults to empty string.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('status') }\" class=\"prettyprint no-bg\" id=\"status-anchor\">status : number</pre>\n<p>Status code returned by server.</p> <p>Defaults to 200.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('statusText') }\" class=\"prettyprint no-bg\" id=\"statusText-anchor\">statusText : string</pre>\n<p>Text representing the corresponding reason phrase to the <code>status</code>, as defined in <a href=\"https://tools.ietf.org/html/rfc2616#section-6.1.1\">ietf rfc 2616 section 6.1.1</a></p> <p>Defaults to \"OK\"</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bytesLoaded') }\" class=\"prettyprint no-bg\" id=\"bytesLoaded-anchor\">bytesLoaded : number</pre>\n<p>Non-standard property</p> <p>Denotes how many of the response body's bytes have been loaded, for example if the response is the result of a progress event.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('totalBytes') }\" class=\"prettyprint no-bg\" id=\"totalBytes-anchor\">totalBytes : number</pre>\n<p>Non-standard property</p> <p>Denotes how many bytes are expected in the final response body.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('headers') }\" class=\"prettyprint no-bg\" id=\"headers-anchor\">headers : Headers</pre>\n<p>Headers object based on the <code>Headers</code> class in the <a href=\"https://fetch.spec.whatwg.org/#headers-class\">Fetch Spec</a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/static_response.ts#L16-L102\">@angular/http/src/static_response.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Response-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Response-class.html</a>\n  </p>\n</div>\n","api/http/index/responsecontenttype-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResponseContentType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResponseContentType {\n  Text \n  Json \n  ArrayBuffer \n  Blob \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Define which buffer to use to store the response</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum ResponseContentType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Text') }\" class=\"prettyprint no-bg\" id=\"Text-anchor\">Text</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Json') }\" class=\"prettyprint no-bg\" id=\"Json-anchor\">Json</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ArrayBuffer') }\" class=\"prettyprint no-bg\" id=\"ArrayBuffer-anchor\">ArrayBuffer</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Blob') }\" class=\"prettyprint no-bg\" id=\"Blob-anchor\">Blob</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/enums.ts#L63-L74\">@angular/http/src/enums.ts (line 63)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ResponseContentType-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ResponseContentType-enum.html</a>\n  </p>\n</div>\n","api/http/index/responseoptions-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResponseOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResponseOptions {\n  constructor({body, status, headers, statusText, type, url}?: ResponseOptionsArgs)\n  \n  \n  body : string|Object|ArrayBuffer|Blob\n  status : number\n  headers : Headers\n  url : string\n  merge(options?: ResponseOptionsArgs) : ResponseOptions\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a response options object to be optionally provided when instantiating a <a href=\"response-class\"><code>Response</code></a>.</p> <p>This class is based on the <code>ResponseInit</code> description in the <a href=\"https://fetch.spec.whatwg.org/#responseinit\">Fetch Spec</a>.</p> <p>All values are null by default. Typical defaults can be found in the <a href=\"baseresponseoptions-class\"><code>BaseResponseOptions</code></a> class, which sub-classes <code>ResponseOptions</code>.</p> <p>This class may be used in tests to build <a href=\"response-class\">Responses</a> for mock responses (see <a href=\"../testing/mockbackend-class\"><code>MockBackend</code></a>).</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-p9jkk8e8cz6nvzbcxesd-p-preview-\">Example (<a href=\"http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {ResponseOptions, Response} from '@angular/http';\n\nvar options = new ResponseOptions({\n  body: '{\"name\":\"Jeff\"}'\n});\nvar res = new Response(options);\n\nconsole.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ResponseOptions</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({body, status, headers, statusText, type, url}?: ResponseOptionsArgs)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('body') }\" class=\"prettyprint no-bg\" id=\"body-anchor\">body : string|Object|ArrayBuffer|Blob</pre>\n<p>String, Object, ArrayBuffer or Blob representing the body of the <a href=\"response-class\"><code>Response</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('status') }\" class=\"prettyprint no-bg\" id=\"status-anchor\">status : number</pre>\n<p>Http <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html\">status code</a> associated with the response.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('headers') }\" class=\"prettyprint no-bg\" id=\"headers-anchor\">headers : Headers</pre>\n<p>Response <a href=\"headers-class\">headers</a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('merge') }\" class=\"prettyprint no-bg\" id=\"merge-anchor\">merge(options?: ResponseOptionsArgs) : ResponseOptions</pre>\n<p>Creates a copy of the <code>ResponseOptions</code> instance, using the optional input as values to override existing values. This method will not change the values of the instance on which it is being called.</p> <p>This may be useful when sharing a base <code>ResponseOptions</code> object inside tests, where certain properties may change from test to test.</p> <p> (<a href=\"http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {ResponseOptions, Response} from '@angular/http';\n\nvar options = new ResponseOptions({\n  body: {name: 'Jeff'}\n});\nvar res = new Response(options.merge({\n  url: 'https://google.com'\n}));\nconsole.log('options.url:', options.url); // null\nconsole.log('res.json():', res.json()); // Object {name: \"Jeff\"}\nconsole.log('res.url:', res.url); // https://google.com\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/base_response_options.ts#L15-L115\">@angular/http/src/base_response_options.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ResponseOptions-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ResponseOptions-class.html</a>\n  </p>\n</div>\n","api/http/index/responseoptionsargs-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResponseOptionsArgs</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResponseOptionsArgs {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for options to construct a Response, based on <a href=\"https://fetch.spec.whatwg.org/#responseinit\">ResponseInit</a> from the Fetch spec.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias ResponseOptionsArgs</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/interfaces.ts#L61-L74\">@angular/http/src/interfaces.ts (line 61)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ResponseOptionsArgs-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ResponseOptionsArgs-type-alias.html</a>\n  </p>\n</div>\n","api/http/index/responsetype-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResponseType</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResponseType {\n  Basic \n  Cors \n  Default \n  Error \n  Opaque \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Acceptable response types to be associated with a <a href=\"response-class\"><code>Response</code></a>, based on <a href=\"https://fetch.spec.whatwg.org/#responsetype\">ResponseType</a> from the Fetch spec.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum ResponseType</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Basic') }\" class=\"prettyprint no-bg\" id=\"Basic-anchor\">Basic</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Cors') }\" class=\"prettyprint no-bg\" id=\"Cors-anchor\">Cors</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Default') }\" class=\"prettyprint no-bg\" id=\"Default-anchor\">Default</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Error') }\" class=\"prettyprint no-bg\" id=\"Error-anchor\">Error</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Opaque') }\" class=\"prettyprint no-bg\" id=\"Opaque-anchor\">Opaque</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/enums.ts#L36-L49\">@angular/http/src/enums.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/ResponseType-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/ResponseType-enum.html</a>\n  </p>\n</div>\n","api/forms/index/selectcontrolvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">SelectControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SelectControlValueAccessor {\n  constructor(_renderer: Renderer, _elementRef: ElementRef)\n  \n  \n  value : any\n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (value: any) =&gt; any) : void\n  registerOnTouched(fn: () =&gt; any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>select:not([multiple])[formControlName]</code></p>\n<p class=\"selector\"><code>select:not([multiple])[formControl]</code></p>\n<p class=\"selector\"><code>select:not([multiple])[ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The accessor for writing a value and listening to changes on a select element.</p> <p>Note: We have to listen to the 'change' event because 'input' events aren't fired for selects in Firefox and IE: <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\">https://bugzilla.mozilla.org/show_bug.cgi?id=1024350</a> <a href=\"https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\">https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/</a></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive SelectControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_renderer: Renderer, _elementRef: ElementRef)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (value: any) =&gt; any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/select_control_value_accessor.ts#L30-L90\">@angular/forms/src/directives/select_control_value_accessor.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/SelectControlValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/SelectControlValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/forms/index/selectmultiplecontrolvalueaccessor-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">SelectMultipleControlValueAccessor</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SelectMultipleControlValueAccessor {\n  constructor()\n  \n  \n  value : any\n  onChange : (_: any) =&gt; {}\n  onTouched : () =&gt; {}\n  writeValue(value: any) : void\n  registerOnChange(fn: (value: any) =&gt; any) : void\n  registerOnTouched(fn: () =&gt; any) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>select[multiple][formControlName]</code></p>\n<p class=\"selector\"><code>select[multiple][formControl]</code></p>\n<p class=\"selector\"><code>select[multiple][ngModel]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The accessor for writing a value and listening to changes on a select element.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive SelectMultipleControlValueAccessor</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onChange') }\" class=\"prettyprint no-bg\" id=\"onChange-anchor\">onChange : (_: any) =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onTouched') }\" class=\"prettyprint no-bg\" id=\"onTouched-anchor\">onTouched : () =&gt; {}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('writeValue') }\" class=\"prettyprint no-bg\" id=\"writeValue-anchor\">writeValue(value: any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnChange') }\" class=\"prettyprint no-bg\" id=\"registerOnChange-anchor\">registerOnChange(fn: (value: any) =&gt; any) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOnTouched') }\" class=\"prettyprint no-bg\" id=\"registerOnTouched-anchor\">registerOnTouched(fn: () =&gt; any) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/directives/select_multiple_control_value_accessor.ts#L43-L124\">@angular/forms/src/directives/select_multiple_control_value_accessor.ts (line 43)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/SelectMultipleControlValueAccessor-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/SelectMultipleControlValueAccessor-directive.html</a>\n  </p>\n</div>\n","api/forms/index/provideforms-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">provideForms</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export provideForms() : any[]</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/forms/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/src/form_providers.ts#L58-L67\">@angular/forms/src/form_providers.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index/provideForms-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index/provideForms-function.html</a>\n  </p>\n</div>\n","api/http/index/connection-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Connection</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Connection {\n  readyState : ReadyState\n  request : Request\n  response : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Abstract class from which real connections are derived.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Connection</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('readyState') }\" class=\"prettyprint no-bg\" id=\"readyState-anchor\">readyState : ReadyState</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request : Request</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('response') }\" class=\"prettyprint no-bg\" id=\"response-anchor\">response : any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/interfaces.ts#L22-L33\">@angular/http/src/interfaces.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Connection-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Connection-class.html</a>\n  </p>\n</div>\n","api/http/index/requestoptions-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RequestOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RequestOptions {\n  constructor({method, headers, body, url, search, withCredentials,\n       responseType}?: RequestOptionsArgs)\n  \n  \n  method : RequestMethod|string\n  headers : Headers\n  body : any\n  url : string\n  search : URLSearchParams\n  withCredentials : boolean\n  responseType : ResponseContentType\n  merge(options?: RequestOptionsArgs) : RequestOptions\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates a request options object to be optionally provided when instantiating a <a href=\"request-class\"><code>Request</code></a>.</p> <p>This class is based on the <code>RequestInit</code> description in the <a href=\"https://fetch.spec.whatwg.org/#requestinit\">Fetch Spec</a>.</p> <p>All values are null by default. Typical defaults can be found in the <a href=\"baserequestoptions-class\"><code>BaseRequestOptions</code></a> class, which sub-classes <code>RequestOptions</code>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-7wvi3lflq41aqpklxb4o-p-preview-\">Example (<a href=\"http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {RequestOptions, Request, RequestMethod} from '@angular/http';\n\nvar options = new RequestOptions({\n  method: RequestMethod.Post,\n  url: 'https://google.com'\n});\nvar req = new Request(options);\nconsole.log('req.method:', RequestMethod[req.method]); // Post\nconsole.log('options.url:', options.url); // https://google.com\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RequestOptions</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor({method, headers, body, url, search, withCredentials,\n       responseType}?: RequestOptionsArgs)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('method') }\" class=\"prettyprint no-bg\" id=\"method-anchor\">method : RequestMethod|string</pre>\n<p>Http method with which to execute a <a href=\"request-class\"><code>Request</code></a>. Acceptable methods are defined in the <a href=\"requestmethod-enum\"><code>RequestMethod</code></a> enum.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('headers') }\" class=\"prettyprint no-bg\" id=\"headers-anchor\">headers : Headers</pre>\n<p><a href=\"headers-class\"><code>Headers</code></a> to be attached to a <a href=\"request-class\"><code>Request</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('body') }\" class=\"prettyprint no-bg\" id=\"body-anchor\">body : any</pre>\n<p>Body to be used when creating a <a href=\"request-class\"><code>Request</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n<p>Url with which to perform a <a href=\"request-class\"><code>Request</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('search') }\" class=\"prettyprint no-bg\" id=\"search-anchor\">search : URLSearchParams</pre>\n<p>Search parameters to be included in a <a href=\"request-class\"><code>Request</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('withCredentials') }\" class=\"prettyprint no-bg\" id=\"withCredentials-anchor\">withCredentials : boolean</pre>\n<p>Enable use credentials for a <a href=\"request-class\"><code>Request</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('responseType') }\" class=\"prettyprint no-bg\" id=\"responseType-anchor\">responseType : ResponseContentType</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('merge') }\" class=\"prettyprint no-bg\" id=\"merge-anchor\">merge(options?: RequestOptionsArgs) : RequestOptions</pre>\n<p>Creates a copy of the <code>RequestOptions</code> instance, using the optional input as values to override existing values. This method will not change the values of the instance on which it is being called.</p> <p>Note that <code>headers</code> and <code>search</code> will override existing values completely if present in the <code>options</code> object. If these values should be merged, it should be done prior to calling <code>merge</code> on the <code>RequestOptions</code> instance.</p> <p> (<a href=\"http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview\">live demo</a>)</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {RequestOptions, Request, RequestMethod} from '@angular/http';\n\nvar options = new RequestOptions({\n  method: RequestMethod.Post\n});\nvar req = new Request(options.merge({\n  url: 'https://google.com'\n}));\nconsole.log('req.method:', RequestMethod[req.method]); // Post\nconsole.log('options.url:', options.url); // null\nconsole.log('req.url:', req.url); // https://google.com\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/base_request_options.ts#L17-L133\">@angular/http/src/base_request_options.ts (line 17)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/RequestOptions-class.html</a>\n  </p>\n</div>\n","api/http/index/urlsearchparams-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">URLSearchParams</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class URLSearchParams {\n  constructor(rawParams?: string, queryEncoder?: QueryEncoder)\n  \n  \n  paramsMap : Map&lt;string, string[]&gt;\n  rawParams : string\n  queryEncoder : QueryEncoder\n  clone() : URLSearchParams\n  has(param: string) : boolean\n  get(param: string) : string\n  getAll(param: string) : string[]\n  set(param: string, val: string)\n  setAll(searchParams: URLSearchParams)\n  append(param: string, val: string) : void\n  appendAll(searchParams: URLSearchParams)\n  replaceAll(searchParams: URLSearchParams)\n  toString() : string\n  delete(param: string) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Map-like representation of url search parameters, based on <a href=\"https://url.spec.whatwg.org/#urlsearchparams\">URLSearchParams</a> in the url living standard, with several extensions for merging URLSearchParams objects:</p> <ul> <li>setAll()</li> <li>appendAll()</li> <li>replaceAll()</li> </ul> <p>This class accepts an optional second parameter of $<a href=\"queryencoder-class\"><code>QueryEncoder</code></a>, which is used to serialize parameters before making a request. By default, <code>QueryEncoder</code> encodes keys and values of parameters using <code>encodeURIComponent</code>, and then un-encodes certain characters that are allowed to be part of the query according to IETF RFC 3986: <a href=\"https://tools.ietf.org/html/rfc3986\">https://tools.ietf.org/html/rfc3986</a>.</p> <p>These are the characters that are not encoded: <code>! $ \\' ( ) * + , ; A 9 - . _ ~ ? /</code></p> <p>If the set of allowed query characters is not acceptable for a particular backend, <code>QueryEncoder</code> can be subclassed and provided as the 2nd argument to URLSearchParams.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {URLSearchParams, QueryEncoder} from '@angular/http';\nclass MyQueryEncoder extends QueryEncoder {\n  encodeKey(k: string): string {\n    return myEncodingFunction(k);\n  }\n\n  encodeValue(v: string): string {\n    return myEncodingFunction(v);\n  }\n}\n\nlet params = new URLSearchParams('', new MyQueryEncoder());\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class URLSearchParams</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(rawParams?: string, queryEncoder?: QueryEncoder)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('paramsMap') }\" class=\"prettyprint no-bg\" id=\"paramsMap-anchor\">paramsMap : Map&lt;string, string[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('rawParams') }\" class=\"prettyprint no-bg\" id=\"rawParams-anchor\">rawParams : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryEncoder') }\" class=\"prettyprint no-bg\" id=\"queryEncoder-anchor\">queryEncoder : QueryEncoder</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('clone') }\" class=\"prettyprint no-bg\" id=\"clone-anchor\">clone() : URLSearchParams</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('has') }\" class=\"prettyprint no-bg\" id=\"has-anchor\">has(param: string) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('get') }\" class=\"prettyprint no-bg\" id=\"get-anchor\">get(param: string) : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getAll') }\" class=\"prettyprint no-bg\" id=\"getAll-anchor\">getAll(param: string) : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('set') }\" class=\"prettyprint no-bg\" id=\"set-anchor\">set(param: string, val: string)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setAll') }\" class=\"prettyprint no-bg\" id=\"setAll-anchor\">setAll(searchParams: URLSearchParams)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('append') }\" class=\"prettyprint no-bg\" id=\"append-anchor\">append(param: string, val: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('appendAll') }\" class=\"prettyprint no-bg\" id=\"appendAll-anchor\">appendAll(searchParams: URLSearchParams)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceAll') }\" class=\"prettyprint no-bg\" id=\"replaceAll-anchor\">replaceAll(searchParams: URLSearchParams)</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('delete') }\" class=\"prettyprint no-bg\" id=\"delete-anchor\">delete(param: string) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/url_search_params.ts#L47-L193\">@angular/http/src/url_search_params.ts (line 47)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/URLSearchParams-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/URLSearchParams-class.html</a>\n  </p>\n</div>\n","api/http/index/requestoptionsargs-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">RequestOptionsArgs</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RequestOptionsArgs {\n  url : string\n  method : string|RequestMethod\n  search : string|URLSearchParams\n  headers : Headers\n  body : any\n  withCredentials : boolean\n  responseType : ResponseContentType\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Interface for options to construct a RequestOptions, based on <a href=\"https://fetch.spec.whatwg.org/#requestinit\">RequestInit</a> from the Fetch spec.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface RequestOptionsArgs</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('method') }\" class=\"prettyprint no-bg\" id=\"method-anchor\">method : string|RequestMethod</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('search') }\" class=\"prettyprint no-bg\" id=\"search-anchor\">search : string|URLSearchParams</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('headers') }\" class=\"prettyprint no-bg\" id=\"headers-anchor\">headers : Headers</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('body') }\" class=\"prettyprint no-bg\" id=\"body-anchor\">body : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('withCredentials') }\" class=\"prettyprint no-bg\" id=\"withCredentials-anchor\">withCredentials : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('responseType') }\" class=\"prettyprint no-bg\" id=\"responseType-anchor\">responseType : ResponseContentType</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/interfaces.ts#L40-L56\">@angular/http/src/interfaces.ts (line 40)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/RequestOptionsArgs-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/RequestOptionsArgs-interface.html</a>\n  </p>\n</div>\n","api/http/index/xhrbackend-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">XHRBackend</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class XHRBackend {\n  constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions, _xsrfStrategy: XSRFStrategy)\n  \n  \n  createConnection(request: Request) : XHRConnection\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates <a href=\"xhrconnection-class\"><code>XHRConnection</code></a> instances.</p> <p>This class would typically not be used by end users, but could be overridden if a different backend implementation should be used, such as in a node backend.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n@Component({\n  viewProviders: [\n    HTTP_PROVIDERS,\n    {provide: Http, useFactory: (backend, options) =&gt; {\n      return new Http(backend, options);\n    }, deps: [MyNodeBackend, BaseRequestOptions]}]\n})\nclass MyComponent {\n  constructor(http:Http) {\n    http.request('people.json').subscribe(res =&gt; this.people = res.json());\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class XHRBackend</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(_browserXHR: BrowserXhr, _baseResponseOptions: ResponseOptions, _xsrfStrategy: XSRFStrategy)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createConnection') }\" class=\"prettyprint no-bg\" id=\"createConnection-anchor\">createConnection(request: Request) : XHRConnection</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/xhr_backend.ts#L194-L232\">@angular/http/src/backends/xhr_backend.ts (line 194)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/XHRBackend-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/XHRBackend-class.html</a>\n  </p>\n</div>\n","api/http/index/xhrconnection-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">XHRConnection</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class XHRConnection {\n  constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions)\n  \n  \n  request : Request\n  response : Observable&lt;Response&gt;\n  readyState : ReadyState\n  setDetectedContentType(req: any, _xhr: any)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates connections using <code>XMLHttpRequest</code>. Given a fully-qualified request, an <code>XHRConnection</code> will immediately create an <code>XMLHttpRequest</code> object and send the request.</p> <p>This class would typically not be created or interacted with directly inside applications, though the <a href=\"../testing/mockconnection-class\"><code>MockConnection</code></a> may be interacted with in tests.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class XHRConnection</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(req: Request, browserXHR: BrowserXhr, baseResponseOptions?: ResponseOptions)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request : Request</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('response') }\" class=\"prettyprint no-bg\" id=\"response-anchor\">response : Observable&lt;Response&gt;</pre>\n<p>Response <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> which emits a single <a href=\"response-class\"><code>Response</code></a> value on load event of <code>XMLHttpRequest</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('readyState') }\" class=\"prettyprint no-bg\" id=\"readyState-anchor\">readyState : ReadyState</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setDetectedContentType') }\" class=\"prettyprint no-bg\" id=\"setDetectedContentType-anchor\">setDetectedContentType(req: any, _xhr: any)</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/backends/xhr_backend.ts#L25-L171\">@angular/http/src/backends/xhr_backend.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/XHRConnection-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/XHRConnection-class.html</a>\n  </p>\n</div>\n","api/http/index/xsrfstrategy-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">XSRFStrategy</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class XSRFStrategy {\n  configureRequest(req: Request) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class XSRFStrategy</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configureRequest') }\" class=\"prettyprint no-bg\" id=\"configureRequest-anchor\">configureRequest(req: Request) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/interfaces.ts#L33-L40\">@angular/http/src/interfaces.ts (line 33)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/XSRFStrategy-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/XSRFStrategy-class.html</a>\n  </p>\n</div>\n","api/http/index/httpfactory-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">httpFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export httpFactory(xhrBackend: XHRBackend, requestOptions: RequestOptions) : Http</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L202-L209\">@angular/http/http.ts (line 202)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/httpFactory-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/httpFactory-function.html</a>\n  </p>\n</div>\n","api/http/testing/mockconnection-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">MockConnection</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MockConnection {\n  constructor(req: Request)\n  \n  \n  readyState : ReadyState\n  request : Request\n  response : ReplaySubject&lt;Response&gt;\n  mockRespond(res: Response)\n  mockDownload(res: Response)\n  mockError(err?: Error)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Mock Connection to represent a <a href=\"../index/connection-class\"><code>Connection</code></a> for tests.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class MockConnection</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(req: Request)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('readyState') }\" class=\"prettyprint no-bg\" id=\"readyState-anchor\">readyState : ReadyState</pre>\n<p>Describes the state of the connection, based on <code>XMLHttpRequest.readyState</code>, but with additional states. For example, state 5 indicates an aborted connection.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('request') }\" class=\"prettyprint no-bg\" id=\"request-anchor\">request : Request</pre>\n<p><a href=\"../index/request-class\"><code>Request</code></a> instance used to create the connection.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('response') }\" class=\"prettyprint no-bg\" id=\"response-anchor\">response : ReplaySubject&lt;Response&gt;</pre>\n<p><a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> of <a href=\"../index/response-class\"><code>Response</code></a>. Can be subscribed to in order to be notified when a response is available.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('mockRespond') }\" class=\"prettyprint no-bg\" id=\"mockRespond-anchor\">mockRespond(res: Response)</pre>\n<p>Sends a mock response to the connection. This response is the value that is emitted to the <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> returned by <a href=\"../index/http-class\"><code>Http</code></a>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var connection;\nbackend.connections.subscribe(c =&gt; connection = c);\nhttp.request('data.json').subscribe(res =&gt; console.log(res.text()));\nconnection.mockRespond(new Response(new ResponseOptions({ body: 'fake response' }))); //logs\n'fake response'\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('mockDownload') }\" class=\"prettyprint no-bg\" id=\"mockDownload-anchor\">mockDownload(res: Response)</pre>\n<p>Not yet implemented!</p> <p>Sends the provided <a href=\"../index/response-class\"><code>Response</code></a> to the <code>downloadObserver</code> of the <code>Request</code> associated with this connection.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('mockError') }\" class=\"prettyprint no-bg\" id=\"mockError-anchor\">mockError(err?: Error)</pre>\n<p>Emits the provided error object as an error to the <a href=\"../index/response-class\"><code>Response</code></a> <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> returned from <a href=\"../index/http-class\"><code>Http</code></a>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var connection;\nbackend.connections.subscribe(c =&gt; connection = c);\nhttp.request('data.json').subscribe(res =&gt; res, err =&gt; console.log(err)));\nconnection.mockError(new Error('error'));\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/http/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/testing/mock_backend.ts#L19-L112\">@angular/http/testing/mock_backend.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/testing/MockConnection-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/testing/MockConnection-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/animationdriver-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">AnimationDriver</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class AnimationDriver {\n  NOOP : AnimationDriver\n  animate(element: any, startingStyles: AnimationStyles, keyframes: AnimationKeyframe[], duration: number, delay: number, easing: string) : AnimationPlayer\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class AnimationDriver</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('NOOP') }\" class=\"prettyprint no-bg\" id=\"NOOP-anchor\">NOOP : AnimationDriver</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('animate') }\" class=\"prettyprint no-bg\" id=\"animate-anchor\">animate(element: any, startingStyles: AnimationStyles, keyframes: AnimationKeyframe[], duration: number, delay: number, easing: string) : AnimationPlayer</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/animation_driver.ts#L19-L29\">@angular/platform-browser/src/dom/animation_driver.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/AnimationDriver-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/AnimationDriver-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browser_app_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">BROWSER_APP_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Create a module that includes <code>BrowserModule</code> instead. This is empty for backwards compatibility, as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the providers 2x.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export BROWSER_APP_PROVIDERS</pre>\n<p>A set of providers to initialize an Angular application in a web browser.</p> <p>Used automatically by <code>bootstrap</code>, or can be passed to <a href=\"../../core/index/platformref-class\">PlatformRef.application</a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L69-L69\">@angular/platform-browser/src/browser.ts (line 69)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_APP_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_APP_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browser_platform_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">BROWSER_PLATFORM_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <code>platformBrowser()</code> or create a custom platform factory via <code>createPlatformFactory(platformBrowser, ...)</code></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export BROWSER_PLATFORM_PROVIDERS</pre>\n<p>A set of providers to initialize the Angular platform in a web browser.</p> <p>Used automatically by <code>bootstrap</code>, or can be passed to <code>platform</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L44-L45\">@angular/platform-browser/src/browser.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_PLATFORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_PLATFORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/http/testing/mockbackend-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">MockBackend</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MockBackend {\n  constructor()\n  \n  \n  connections : any\n  connectionsArray : MockConnection[]\n  pendingConnections : any\n  verifyNoPendingRequests()\n  resolveAllConnections()\n  createConnection(req: Request) : MockConnection\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A mock backend for testing the <a href=\"../index/http-class\"><code>Http</code></a> service.</p> <p>This class can be injected in tests, and should be used to override providers to other backends, such as <a href=\"../index/xhrbackend-class\"><code>XHRBackend</code></a>.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {BaseRequestOptions, Http} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nit('should get some data', inject([AsyncTestCompleter], (async) =&gt; {\n  var connection;\n  var injector = Injector.resolveAndCreate([\n    MockBackend,\n    {provide: Http, useFactory: (backend, options) =&gt; {\n      return new Http(backend, options);\n    }, deps: [MockBackend, BaseRequestOptions]}]);\n  var http = injector.get(Http);\n  var backend = injector.get(MockBackend);\n  //Assign any newly-created connection to local variable\n  backend.connections.subscribe(c =&gt; connection = c);\n  http.request('data.json').subscribe((res) =&gt; {\n    expect(res.text()).toBe('awesome');\n    async.done();\n  });\n  connection.mockRespond(new Response('awesome'));\n}));\n</pre>\n<p>This method only exists in the mock implementation, not in real Backends.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class MockBackend</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('connections') }\" class=\"prettyprint no-bg\" id=\"connections-anchor\">connections : any</pre>\n<p><a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> of <a href=\"mockconnection-class\"><code>MockConnection</code></a> instances that have been created by this backend. Can be subscribed to in order to respond to connections.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Http, BaseRequestOptions, Response} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\nimport {Injector, provide} from '@angular/core';\n\nit('should get a response', () =&gt; {\n  var connection; //this will be set when a new connection is emitted from the backend.\n  var text; //this will be set from mock response\n  var injector = Injector.resolveAndCreate([\n    MockBackend,\n    {provide: Http, useFactory: (backend, options) =&gt; {\n      return new Http(backend, options);\n    }, deps: [MockBackend, BaseRequestOptions]}]);\n  var backend = injector.get(MockBackend);\n  var http = injector.get(Http);\n  backend.connections.subscribe(c =&gt; connection = c);\n  http.request('something.json').subscribe(res =&gt; {\n    text = res.text();\n  });\n  connection.mockRespond(new Response({body: 'Something'}));\n  expect(text).toBe('Something');\n});\n</pre>\n<p>This property only exists in the mock implementation, not in real Backends.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('connectionsArray') }\" class=\"prettyprint no-bg\" id=\"connectionsArray-anchor\">connectionsArray : MockConnection[]</pre>\n<p>An array representation of <code>connections</code>. This array will be updated with each connection that is created by this backend.</p> <p>This property only exists in the mock implementation, not in real Backends.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pendingConnections') }\" class=\"prettyprint no-bg\" id=\"pendingConnections-anchor\">pendingConnections : any</pre>\n<p><a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> of <a href=\"mockconnection-class\"><code>MockConnection</code></a> instances that haven't yet been resolved (i.e. with a <code>readyState</code> less than 4). Used internally to verify that no connections are pending via the <code>verifyNoPendingRequests</code> method.</p> <p>This property only exists in the mock implementation, not in real Backends.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('verifyNoPendingRequests') }\" class=\"prettyprint no-bg\" id=\"verifyNoPendingRequests-anchor\">verifyNoPendingRequests()</pre>\n<p>Checks all connections, and raises an exception if any connection has not received a response.</p> <p>This method only exists in the mock implementation, not in real Backends.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolveAllConnections') }\" class=\"prettyprint no-bg\" id=\"resolveAllConnections-anchor\">resolveAllConnections()</pre>\n<p>Can be used in conjunction with <code>verifyNoPendingRequests</code> to resolve any not-yet-resolve connections, if it's expected that there are connections that have not yet received a response.</p> <p>This method only exists in the mock implementation, not in real Backends.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createConnection') }\" class=\"prettyprint no-bg\" id=\"createConnection-anchor\">createConnection(req: Request) : MockConnection</pre>\n<p>Creates a new <a href=\"mockconnection-class\"><code>MockConnection</code></a>. This is equivalent to calling <code>new\nMockConnection()</code>, except that it also will emit the new <code>Connection</code> to the <code>connections</code> emitter of this <code>MockBackend</code> instance. This method will usually only be used by tests against the framework itself, not by end-users.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/http/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/testing/mock_backend.ts#L112-L242\">@angular/http/testing/mock_backend.ts (line 112)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/testing/MockBackend-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/testing/MockBackend-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browser_sanitization_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">BROWSER_SANITIZATION_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span><span class=\"status-badge security-risk-badge\">Security Risk </span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Security Risk</h2>\n<p>Replacing built-in sanitization providers exposes the application to XSS risks. Attacker-controlled data introduced by an unsanitized provider could expose your application to XSS risks. For more detail, see the <a href=\"http://g.co/ng/security\">Security Guide</a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export BROWSER_SANITIZATION_PROVIDERS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L53-L56\">@angular/platform-browser/src/browser.ts (line 53)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_SANITIZATION_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/BROWSER_SANITIZATION_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browsermodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BrowserModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BrowserModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The ng module for the browser.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BrowserModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  providers: [\n    BROWSER_SANITIZATION_PROVIDERS,\n    {provide: ExceptionHandler, useFactory: _exceptionHandler, deps: []},\n    {provide: DOCUMENT, useFactory: _document, deps: []},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: DomEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true},\n    {provide: EVENT_MANAGER_PLUGINS, useClass: HammerGesturesPlugin, multi: true},\n    {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig},\n    {provide: DomRootRenderer, useClass: DomRootRenderer_},\n    {provide: RootRenderer, useExisting: DomRootRenderer},\n    {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n    {provide: AnimationDriver, useFactory: _resolveDefaultAnimationDriver}, DomSharedStylesHost,\n    Testability, EventManager, ELEMENT_PROBE_PROVIDERS\n  ],\n  exports: [CommonModule, ApplicationModule]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L101-L126\">@angular/platform-browser/src/browser.ts (line 101)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/BrowserModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/BrowserModule-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browserplatformlocation-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BrowserPlatformLocation</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BrowserPlatformLocation {\n  constructor()\n  \n  \n  getBaseHrefFromDOM() : string\n  onPopState(fn: UrlChangeListener) : void\n  onHashChange(fn: UrlChangeListener) : void\n  pathname : string\n  search : string\n  hash : string\n  pushState(state: any, title: string, url: string) : void\n  replaceState(state: any, title: string, url: string) : void\n  forward() : void\n  back() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>PlatformLocation</code> encapsulates all of the direct calls to platform APIs. This class should not be used directly by an application developer. Instead, use <a href=\"../../common/index/location-class\"><code>Location</code></a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BrowserPlatformLocation</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBaseHrefFromDOM') }\" class=\"prettyprint no-bg\" id=\"getBaseHrefFromDOM-anchor\">getBaseHrefFromDOM() : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onPopState') }\" class=\"prettyprint no-bg\" id=\"onPopState-anchor\">onPopState(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onHashChange') }\" class=\"prettyprint no-bg\" id=\"onHashChange-anchor\">onHashChange(fn: UrlChangeListener) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pathname') }\" class=\"prettyprint no-bg\" id=\"pathname-anchor\">pathname : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('search') }\" class=\"prettyprint no-bg\" id=\"search-anchor\">search : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('hash') }\" class=\"prettyprint no-bg\" id=\"hash-anchor\">hash : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pushState') }\" class=\"prettyprint no-bg\" id=\"pushState-anchor\">pushState(state: any, title: string, url: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('replaceState') }\" class=\"prettyprint no-bg\" id=\"replaceState-anchor\">replaceState(state: any, title: string, url: string) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forward') }\" class=\"prettyprint no-bg\" id=\"forward-anchor\">forward() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('back') }\" class=\"prettyprint no-bg\" id=\"back-anchor\">back() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser/location/browser_platform_location.ts#L15-L80\">@angular/platform-browser/src/browser/location/browser_platform_location.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/BrowserPlatformLocation-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/BrowserPlatformLocation-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/by-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">By</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class By {\n  all() : Predicate&lt;DebugElement&gt;\n  css(selector: string) : Predicate&lt;DebugElement&gt;\n  directive(type: Type) : Predicate&lt;DebugElement&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Predicates for use with <a href=\"../../core/index/debugelement-class\"><code>DebugElement</code></a>'s query functions.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class By</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('all') }\" class=\"prettyprint no-bg\" id=\"all-anchor\">all() : Predicate&lt;DebugElement&gt;</pre>\n<p>Match all elements.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">debugElement.query(By.all());\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('css') }\" class=\"prettyprint no-bg\" id=\"css-anchor\">css(selector: string) : Predicate&lt;DebugElement&gt;</pre>\n<p>Match elements by the given CSS selector.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">debugElement.query(By.css('[attribute]'));\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('directive') }\" class=\"prettyprint no-bg\" id=\"directive-anchor\">directive(type: Type) : Predicate&lt;DebugElement&gt;</pre>\n<p>Match elements that have the given directive present.</p> <pre language=\"ts\" format=\"\" data-language=\"typescript\">debugElement.query(By.directive(MyDirective));\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/debug/by.ts#L13-L57\">@angular/platform-browser/src/dom/debug/by.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/By-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/By-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/clientmessagebroker-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ClientMessageBroker</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ClientMessageBroker {\n  runOnService(args: UiArguments, returnType: Type) : Promise&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ClientMessageBroker</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('runOnService') }\" class=\"prettyprint no-bg\" id=\"runOnService-anchor\">runOnService(args: UiArguments, returnType: Type) : Promise&lt;any&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/client_message_broker.ts#L44-L51\">@angular/platform-browser/src/web_workers/shared/client_message_broker.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/ClientMessageBroker-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/ClientMessageBroker-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/document-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">DOCUMENT: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export DOCUMENT</pre>\n<p>A DI Token representing the main rendering context. In a browser this is the DOM Document.</p> <p>Note: Document might not be available in the Application Context when Application and Rendering Contexts are not the same (e.g. when running the application into a Web Worker).</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/dom_tokens.ts#L19-L19\">@angular/platform-browser/src/dom/dom_tokens.ts (line 19)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/DOCUMENT-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/DOCUMENT-let.html</a>\n  </p>\n</div>\n","api/http/index/jsonp_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">JSONP_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export JSONP_PROVIDERS</pre>\n<p>Provides a basic set of providers to use the <a href=\"jsonp-class\"><code>Jsonp</code></a> service in any application.</p> <p>The <code>JSONP_PROVIDERS</code> should be included either in a component's injector, or in the root injector when bootstrapping an application.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-vmen4f-p-preview-\">Example (<a href=\"http://plnkr.co/edit/vmeN4F?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {Component} from '@angular/core';\nimport {NgFor} from '@angular/common';\nimport {JSONP_PROVIDERS, Jsonp} from '@angular/http';\n\n@Component({\n  selector: 'app',\n  providers: [JSONP_PROVIDERS],\n  template: `\n    &lt;div&gt;\n      &lt;h1&gt;People&lt;/h1&gt;\n      &lt;ul&gt;\n        &lt;li *ngFor=\"let person of people\"&gt;\n          {{person.name}}\n        &lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  `,\n  directives: [NgFor]\n})\nexport class App {\n  people: Array&lt;Object&gt;;\n  constructor(jsonp:Jsonp) {\n    jsonp.request('people.json').subscribe(res =&gt; {\n      this.people = res.json();\n    })\n  }\n}\n</pre>\n<p>The primary public API included in <code>JSONP_PROVIDERS</code> is the <a href=\"jsonp-class\"><code>Jsonp</code></a> class. However, other providers required by <code>Jsonp</code> are included, which may be beneficial to override in certain cases.</p> <p>The providers included in <code>JSONP_PROVIDERS</code> include:</p> <ul> <li><a href=\"jsonp-class\"><code>Jsonp</code></a></li> <li><a href=\"jsonpbackend-class\"><code>JSONPBackend</code></a></li> <li>\n<code>BrowserJsonp</code> - Private factory</li> <li>\n<a href=\"requestoptions-class\"><code>RequestOptions</code></a> - Bound to <a href=\"baserequestoptions-class\"><code>BaseRequestOptions</code></a> class</li> <li>\n<a href=\"responseoptions-class\"><code>ResponseOptions</code></a> - Bound to <a href=\"baseresponseoptions-class\"><code>BaseResponseOptions</code></a> class</li> </ul> <p>There may be cases where it makes sense to extend the base request options, such as to add a search string to be appended to all URLs. To accomplish this, a new provider for <a href=\"requestoptions-class\"><code>RequestOptions</code></a> should be added in the same injector as <code>JSONP_PROVIDERS</code>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-tfug7x-p-preview-\">Example (<a href=\"http://plnkr.co/edit/TFug7x?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {provide} from '@angular/core';\nimport {bootstrap} from '@angular/platform-browser/browser';\nimport {JSONP_PROVIDERS, BaseRequestOptions, RequestOptions} from '@angular/http';\n\nclass MyOptions extends BaseRequestOptions {\n  search: string = 'coreTeam=true';\n}\n\nbootstrap(App, [JSONP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}])\n  .catch(err =&gt; console.error(err));\n</pre>\n<p>Likewise, to use a mock backend for unit tests, the <a href=\"jsonpbackend-class\"><code>JSONPBackend</code></a> provider should be bound to <a href=\"../testing/mockbackend-class\"><code>MockBackend</code></a>.</p> <h3 id=\"example-live-demo-http-plnkr-co-edit-hdqzwl-p-preview-\">Example (<a href=\"http://plnkr.co/edit/HDqZWL?p=preview\">live demo</a>)</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {provide, Injector} from '@angular/core';\nimport {JSONP_PROVIDERS, Jsonp, Response, JSONPBackend} from '@angular/http';\nimport {MockBackend} from '@angular/http/testing';\n\nvar people = [{name: 'Jeff'}, {name: 'Tobias'}];\nvar injector = Injector.resolveAndCreate([\n  JSONP_PROVIDERS,\n  MockBackend,\n  {provide: JSONPBackend, useExisting: MockBackend}\n]);\nvar jsonp = injector.get(Jsonp);\nvar backend = injector.get(MockBackend);\n\n// Listen for any new requests\nbackend.connections.observer({\n  next: connection =&gt; {\n    var response = new Response({body: people});\n    setTimeout(() =&gt; {\n      // Send a response to the request\n      connection.mockRespond(response);\n    });\n  }\n});\n\njsonp.get('people.json').observer({\n  next: res =&gt; {\n    // Response came from mock backend\n    console.log('first person', res.json()[0].name);\n  }\n});\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/http.ts#L327-L335\">@angular/http/http.ts (line 327)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/JSONP_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/JSONP_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/clientmessagebrokerfactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ClientMessageBrokerFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ClientMessageBrokerFactory {\n  createMessageBroker(channel: string, runInZone?: boolean) : ClientMessageBroker\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ClientMessageBrokerFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createMessageBroker') }\" class=\"prettyprint no-bg\" id=\"createMessageBroker-anchor\">createMessageBroker(channel: string, runInZone?: boolean) : ClientMessageBroker</pre>\n<p>Initializes the given channel and attaches a new <a href=\"clientmessagebroker-class\"><code>ClientMessageBroker</code></a> to it.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/client_message_broker.ts#L16-L26\">@angular/platform-browser/src/web_workers/shared/client_message_broker.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/ClientMessageBrokerFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/ClientMessageBrokerFactory-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/event_manager_plugins-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">EVENT_MANAGER_PLUGINS: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export EVENT_MANAGER_PLUGINS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/events/event_manager.ts#L18-L18\">@angular/platform-browser/src/dom/events/event_manager.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/EVENT_MANAGER_PLUGINS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/EVENT_MANAGER_PLUGINS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/fnarg-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">FnArg</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class FnArg {\n  constructor(value: any, type: Type)\n  \n  \n  value : any\n  type : Type\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class FnArg</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(value: any, type: Type)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('value') }\" class=\"prettyprint no-bg\" id=\"value-anchor\">value : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('type') }\" class=\"prettyprint no-bg\" id=\"type-anchor\">type : Type</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/client_message_broker.ts#L169-L176\">@angular/platform-browser/src/web_workers/shared/client_message_broker.ts (line 169)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/FnArg-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/FnArg-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/hammer_gesture_config-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">HAMMER_GESTURE_CONFIG: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export HAMMER_GESTURE_CONFIG</pre>\n<p>A DI token that you can use to provide<a href=\"hammergestureconfig-class\"><code>HammerGestureConfig</code></a> to Angular. Use it to configure Hammer gestures.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/events/hammer_gestures.ts#L22-L22\">@angular/platform-browser/src/dom/events/hammer_gestures.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/HAMMER_GESTURE_CONFIG-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/HAMMER_GESTURE_CONFIG-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/domsanitizationservice-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DomSanitizationService</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span><span class=\"status-badge security-risk-badge\">Security Risk </span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Security Risk</h2>\n<p>Calling any of the <code>bypassSecurityTrust...</code> APIs disables Angular's built-in sanitization for the value passed in. Carefully check and audit all values and code paths going into this call. Make sure any user data is appropriately escaped for this security context. For more detail, see the <a href=\"http://g.co/ng/security\">Security Guide</a>.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DomSanitizationService {\n  sanitize(context: SecurityContext, value: any) : string\n  bypassSecurityTrustHtml(value: string) : SafeHtml\n  bypassSecurityTrustStyle(value: string) : SafeStyle\n  bypassSecurityTrustScript(value: string) : SafeScript\n  bypassSecurityTrustUrl(value: string) : SafeUrl\n  bypassSecurityTrustResourceUrl(value: string) : SafeResourceUrl\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>DomSanitizationService helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing values to be safe to use in the different DOM contexts.</p> <p>For example, when binding a URL in an <code>&lt;a [href]=\"someValue\"&gt;</code> hyperlink, <code>someValue</code> will be sanitized so that an attacker cannot inject e.g. a <code>javascript:</code> URL that would execute code on the website.</p> <p>In specific situations, it might be necessary to disable sanitization, for example if the application genuinely needs to produce a <code>javascript:</code> style link with a dynamic value in it. Users can bypass security by constructing a value with one of the <code>bypassSecurityTrust...</code> methods, and then binding to that value from the template.</p> <p>These situations should be very rare, and extraordinary care must be taken to avoid creating a Cross Site Scripting (XSS) security bug!</p> <p>When using <code>bypassSecurityTrust...</code>, make sure to call the method as early as possible and as close as possible to the source of the value, to make it easy to verify no security bug is created by its use.</p> <p>It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous code. The sanitizer leaves safe values intact.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DomSanitizationService</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('sanitize') }\" class=\"prettyprint no-bg\" id=\"sanitize-anchor\">sanitize(context: SecurityContext, value: any) : string</pre>\n<p>Sanitizes a value for use in the given SecurityContext.</p> <p>If value is trusted for the context, this method will unwrap the contained safe value and use it directly. Otherwise, value will be sanitized to be safe in the given context, for example by replacing URLs that have an unsafe protocol part (such as <code>javascript:</code>). The implementation is responsible to make sure that the value can definitely be safely used in the given context.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bypassSecurityTrustHtml') }\" class=\"prettyprint no-bg\" id=\"bypassSecurityTrustHtml-anchor\">bypassSecurityTrustHtml(value: string) : SafeHtml</pre>\n<p>Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML is unsafe (e.g. contains <code>&lt;script&gt;</code> tags) and the code should be executed. The sanitizer will leave safe HTML intact, so in most situations this method should not be used.</p> <p><strong>WARNING:</strong> calling this method with untrusted user data exposes your application to XSS security risks!</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bypassSecurityTrustStyle') }\" class=\"prettyprint no-bg\" id=\"bypassSecurityTrustStyle-anchor\">bypassSecurityTrustStyle(value: string) : SafeStyle</pre>\n<p>Bypass security and trust the given value to be safe style value (CSS).</p> <p><strong>WARNING:</strong> calling this method with untrusted user data exposes your application to XSS security risks!</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bypassSecurityTrustScript') }\" class=\"prettyprint no-bg\" id=\"bypassSecurityTrustScript-anchor\">bypassSecurityTrustScript(value: string) : SafeScript</pre>\n<p>Bypass security and trust the given value to be safe JavaScript.</p> <p><strong>WARNING:</strong> calling this method with untrusted user data exposes your application to XSS security risks!</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bypassSecurityTrustUrl') }\" class=\"prettyprint no-bg\" id=\"bypassSecurityTrustUrl-anchor\">bypassSecurityTrustUrl(value: string) : SafeUrl</pre>\n<p>Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used in hyperlinks or <code>&lt;img src&gt;</code>.</p> <p><strong>WARNING:</strong> calling this method with untrusted user data exposes your application to XSS security risks!</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bypassSecurityTrustResourceUrl') }\" class=\"prettyprint no-bg\" id=\"bypassSecurityTrustResourceUrl-anchor\">bypassSecurityTrustResourceUrl(value: string) : SafeResourceUrl</pre>\n<p>Bypass security and trust the given value to be a safe resource URL, i.e. a location that may be used to load executable code from, like <code>&lt;script src&gt;</code>, or <code>&lt;iframe src&gt;</code>.</p> <p><strong>WARNING:</strong> calling this method with untrusted user data exposes your application to XSS security risks!</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L58-L145\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 58)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/DomSanitizationService-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/DomSanitizationService-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/eventmanager-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">EventManager</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class EventManager {\n  constructor(plugins: EventManagerPlugin[], _zone: NgZone)\n  \n  \n  addEventListener(element: HTMLElement, eventName: string, handler: Function) : Function\n  addGlobalEventListener(target: string, eventName: string, handler: Function) : Function\n  getZone() : NgZone\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class EventManager</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(plugins: EventManagerPlugin[], _zone: NgZone)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addEventListener') }\" class=\"prettyprint no-bg\" id=\"addEventListener-anchor\">addEventListener(element: HTMLElement, eventName: string, handler: Function) : Function</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addGlobalEventListener') }\" class=\"prettyprint no-bg\" id=\"addGlobalEventListener-anchor\">addGlobalEventListener(target: string, eventName: string, handler: Function) : Function</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getZone') }\" class=\"prettyprint no-bg\" id=\"getZone-anchor\">getZone() : NgZone</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/events/event_manager.ts#L18-L55\">@angular/platform-browser/src/dom/events/event_manager.ts (line 18)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/EventManager-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/EventManager-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/messagebussink-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">MessageBusSink</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MessageBusSink {\n  initChannel(channel: string, runInZone: boolean) : void\n  attachToZone(zone: NgZone) : void\n  to(channel: string) : EventEmitter&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface MessageBusSink</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initChannel') }\" class=\"prettyprint no-bg\" id=\"initChannel-anchor\">initChannel(channel: string, runInZone: boolean) : void</pre>\n<p>Sets up a new channel on the MessageBusSink. MUST be called before calling to on the channel. If runInZone is true the sink will buffer messages and send only once the zone exits. if runInZone is false the sink will send messages immediatly.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attachToZone') }\" class=\"prettyprint no-bg\" id=\"attachToZone-anchor\">attachToZone(zone: NgZone) : void</pre>\n<p>Assigns this sink to the given zone. Any channels which are initialized with runInZone set to true will wait for the given zone to exit before sending messages.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('to') }\" class=\"prettyprint no-bg\" id=\"to-anchor\">to(channel: string) : EventEmitter&lt;any&gt;</pre>\n<p>Returns an <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> for the given channel To publish methods to that channel just call next on the returned emitter</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/message_bus.ts#L78-L104\">@angular/platform-browser/src/web_workers/shared/message_bus.ts (line 78)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBusSink-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBusSink-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/index/messagebussource-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">MessageBusSource</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MessageBusSource {\n  initChannel(channel: string, runInZone: boolean) : void\n  attachToZone(zone: NgZone) : void\n  from(channel: string) : EventEmitter&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface MessageBusSource</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initChannel') }\" class=\"prettyprint no-bg\" id=\"initChannel-anchor\">initChannel(channel: string, runInZone: boolean) : void</pre>\n<p>Sets up a new channel on the MessageBusSource. MUST be called before calling from on the channel. If runInZone is true then the source will emit events inside the angular zone. if runInZone is false then the source will emit events inside the global zone.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attachToZone') }\" class=\"prettyprint no-bg\" id=\"attachToZone-anchor\">attachToZone(zone: NgZone) : void</pre>\n<p>Assigns this source to the given zone. Any channels which are initialized with runInZone set to true will emit events that will be executed within the given zone.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('from') }\" class=\"prettyprint no-bg\" id=\"from-anchor\">from(channel: string) : EventEmitter&lt;any&gt;</pre>\n<p>Returns an <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> that emits every time a message is received on the given channel.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/message_bus.ts#L52-L78\">@angular/platform-browser/src/web_workers/shared/message_bus.ts (line 52)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBusSource-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBusSource-interface.html</a>\n  </p>\n</div>\n","api/http/index/requestmethod-enum":"<h1 class=\"hero-title text-display-1 is-standard-case\">RequestMethod</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Enum</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RequestMethod {\n  Get \n  Post \n  Put \n  Delete \n  Options \n  Head \n  Patch \n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enum RequestMethod</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Get') }\" class=\"prettyprint no-bg\" id=\"Get-anchor\">Get</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Post') }\" class=\"prettyprint no-bg\" id=\"Post-anchor\">Post</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Put') }\" class=\"prettyprint no-bg\" id=\"Put-anchor\">Put</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Delete') }\" class=\"prettyprint no-bg\" id=\"Delete-anchor\">Delete</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Options') }\" class=\"prettyprint no-bg\" id=\"Options-anchor\">Options</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Head') }\" class=\"prettyprint no-bg\" id=\"Head-anchor\">Head</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('Patch') }\" class=\"prettyprint no-bg\" id=\"Patch-anchor\">Patch</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/enums.ts#L1-L21\">@angular/http/src/enums.ts (line 1)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/RequestMethod-enum.html</a>\n  </p>\n</div>\n","api/platform-browser/index/hammergestureconfig-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">HammerGestureConfig</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class HammerGestureConfig {\n  events : string[]\n  overrides : {[key: string]: Object}\n  buildHammer(element: HTMLElement) : HammerInstance\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class HammerGestureConfig</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('events') }\" class=\"prettyprint no-bg\" id=\"events-anchor\">events : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('overrides') }\" class=\"prettyprint no-bg\" id=\"overrides-anchor\">overrides : {[key: string]: Object}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('buildHammer') }\" class=\"prettyprint no-bg\" id=\"buildHammer-anchor\">buildHammer(element: HTMLElement) : HammerInstance</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/dom/events/hammer_gestures.ts#L27-L50\">@angular/platform-browser/src/dom/events/hammer_gestures.ts (line 27)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/HammerGestureConfig-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/HammerGestureConfig-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/messagebus-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">MessageBus</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class MessageBus {\n  initChannel(channel: string, runInZone?: boolean) : void\n  attachToZone(zone: NgZone) : void\n  from(channel: string) : EventEmitter&lt;any&gt;\n  to(channel: string) : EventEmitter&lt;any&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Message Bus is a low level API used to communicate between the UI and the background. Communication is based on a channel abstraction. Messages published in a given channel to one MessageBusSink are received on the same channel by the corresponding MessageBusSource.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class MessageBus</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initChannel') }\" class=\"prettyprint no-bg\" id=\"initChannel-anchor\">initChannel(channel: string, runInZone?: boolean) : void</pre>\n<p>Sets up a new channel on the MessageBus. MUST be called before calling from or to on the channel. If runInZone is true then the source will emit events inside the angular zone and the sink will buffer messages and send only once the zone exits. if runInZone is false then the source will emit events inside the global zone and the sink will send messages immediately.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('attachToZone') }\" class=\"prettyprint no-bg\" id=\"attachToZone-anchor\">attachToZone(zone: NgZone) : void</pre>\n<p>Assigns this bus to the given zone. Any callbacks attached to channels where runInZone was set to true on initialization will be executed in the given zone.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('from') }\" class=\"prettyprint no-bg\" id=\"from-anchor\">from(channel: string) : EventEmitter&lt;any&gt;</pre>\n<p>Returns an <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> that emits every time a message is received on the given channel.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('to') }\" class=\"prettyprint no-bg\" id=\"to-anchor\">to(channel: string) : EventEmitter&lt;any&gt;</pre>\n<p>Returns an <a href=\"../../core/index/eventemitter-class\"><code>EventEmitter</code></a> for the given channel To publish methods to that channel just call next on the returned emitter</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/message_bus.ts#L11-L52\">@angular/platform-browser/src/web_workers/shared/message_bus.ts (line 11)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBus-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/MessageBus-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/primitive-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PRIMITIVE: Type</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PRIMITIVE</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/serializer.ts#L25-L25\">@angular/platform-browser/src/web_workers/shared/serializer.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/PRIMITIVE-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/PRIMITIVE-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/receivedmessage-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ReceivedMessage</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ReceivedMessage {\n  constructor(data: {[key: string]: any})\n  \n  \n  method : string\n  args : any[]\n  id : string\n  type : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ReceivedMessage</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(data: {[key: string]: any})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('method') }\" class=\"prettyprint no-bg\" id=\"method-anchor\">method : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('args') }\" class=\"prettyprint no-bg\" id=\"args-anchor\">args : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('type') }\" class=\"prettyprint no-bg\" id=\"type-anchor\">type : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/service_message_broker.ts#L101-L118\">@angular/platform-browser/src/web_workers/shared/service_message_broker.ts (line 101)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/ReceivedMessage-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/ReceivedMessage-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/safehtml-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SafeHtml</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SafeHtml {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marker interface for a value that's safe to use as HTML.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SafeHtml</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L23-L30\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 23)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/SafeHtml-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/SafeHtml-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/index/saferesourceurl-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SafeResourceUrl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SafeResourceUrl {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marker interface for a value that's safe to use as a URL to load executable code from.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SafeResourceUrl</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L51-L58\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/SafeResourceUrl-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/SafeResourceUrl-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/index/safescript-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SafeScript</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SafeScript {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marker interface for a value that's safe to use as JavaScript.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SafeScript</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L37-L44\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 37)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/SafeScript-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/SafeScript-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/index/safestyle-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SafeStyle</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SafeStyle {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marker interface for a value that's safe to use as style (CSS).</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SafeStyle</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L30-L37\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/SafeStyle-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/SafeStyle-interface.html</a>\n  </p>\n</div>\n","api/http/index/request-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Request</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Request {\n  constructor(requestOptions: RequestArgs)\n  \n  \n  method : RequestMethod\n  headers : Headers\n  url : string\n  contentType : ContentType\n  withCredentials : boolean\n  responseType : ResponseContentType\n  detectContentType() : ContentType\n  detectContentTypeFromBody() : ContentType\n  getBody() : any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Creates <code>Request</code> instances from provided values.</p> <p>The Request's interface is inspired by the Request constructor defined in the <a href=\"https://fetch.spec.whatwg.org/#request-class\">Fetch Spec</a>, but is considered a static value whose body can be accessed many times. There are other differences in the implementation, but this is the most significant.</p> <p><code>Request</code> instances are typically created by higher-level classes, like <a href=\"http-class\"><code>Http</code></a> and <a href=\"jsonp-class\"><code>Jsonp</code></a>, but it may occasionally be useful to explicitly create <code>Request</code> instances. One such example is when creating services that wrap higher-level services, like <a href=\"http-class\"><code>Http</code></a>, where it may be useful to generate a <code>Request</code> with arbitrary headers and search params.</p> <pre format=\"linenums\" language=\"typescript\" data-language=\"typescript\">import {Injectable, Injector} from '@angular/core';\nimport {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n\n@Injectable()\nclass AutoAuthenticator {\n  constructor(public http:Http) {}\n  request(url:string) {\n    return this.http.request(new Request({\n      method: RequestMethod.Get,\n      url: url,\n      search: 'password=123'\n    }));\n  }\n}\n\nvar injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\nvar authenticator = injector.get(AutoAuthenticator);\nauthenticator.request('people.json').subscribe(res =&gt; {\n  //URL should have included '?password=123'\n  console.log('people', res.json());\n});\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Request</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(requestOptions: RequestArgs)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('method') }\" class=\"prettyprint no-bg\" id=\"method-anchor\">method : RequestMethod</pre>\n<p>Http method with which to perform the request.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('headers') }\" class=\"prettyprint no-bg\" id=\"headers-anchor\">headers : Headers</pre>\n<p><a href=\"headers-class\"><code>Headers</code></a> instance</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n<p>Url of the remote resource</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('contentType') }\" class=\"prettyprint no-bg\" id=\"contentType-anchor\">contentType : ContentType</pre>\n<p>Type of the request body *</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('withCredentials') }\" class=\"prettyprint no-bg\" id=\"withCredentials-anchor\">withCredentials : boolean</pre>\n<p>Enable use credentials</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('responseType') }\" class=\"prettyprint no-bg\" id=\"responseType-anchor\">responseType : ResponseContentType</pre>\n<p>Buffer to store the response</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detectContentType') }\" class=\"prettyprint no-bg\" id=\"detectContentType-anchor\">detectContentType() : ContentType</pre>\n<p>Returns the content type enum based on header options.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('detectContentTypeFromBody') }\" class=\"prettyprint no-bg\" id=\"detectContentTypeFromBody-anchor\">detectContentTypeFromBody() : ContentType</pre>\n<p>Returns the content type of request's body based on its type.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getBody') }\" class=\"prettyprint no-bg\" id=\"getBody-anchor\">getBody() : any</pre>\n<p>Returns the request's body according to its type. If body is undefined, return null.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/http/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/src/static_request.ts#L16-L167\">@angular/http/src/static_request.ts (line 16)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index/Request-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index/Request-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/title-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Title</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Title {\n  getTitle() : string\n  setTitle(newTitle: string)\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A service that can be used to get and set the title of a current HTML document.</p> <p>Since an Angular 2 application can't be bootstrapped on the entire HTML document (<code>&lt;html&gt;</code> tag) it is not possible to bind to the <code>text</code> property of the <code>HTMLTitleElement</code> elements (representing the <code>&lt;title&gt;</code> tag). Instead, this service can be used to set and get the current title value.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Title</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('getTitle') }\" class=\"prettyprint no-bg\" id=\"getTitle-anchor\">getTitle() : string</pre>\n<p>Get the title of the current HTML document.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setTitle') }\" class=\"prettyprint no-bg\" id=\"setTitle-anchor\">setTitle(newTitle: string)</pre>\n<p>Set the title of the current HTML document.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser/title.ts#L9-L32\">@angular/platform-browser/src/browser/title.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/Title-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/Title-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/safeurl-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">SafeUrl</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class SafeUrl {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Marker interface for a value that's safe to use as a URL linking to a document.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface SafeUrl</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/security/dom_sanitization_service.ts#L44-L51\">@angular/platform-browser/src/security/dom_sanitization_service.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/SafeUrl-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/SafeUrl-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/index/servicemessagebroker-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ServiceMessageBroker</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ServiceMessageBroker {\n  registerMethod(methodName: string, signature: Type[], method: Function, returnType?: Type) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Helper class for UIComponents that allows components to register methods. If a registered method message is received from the broker on the worker, the UIMessageBroker deserializes its arguments and calls the registered method. If that method returns a promise, the UIMessageBroker returns the result to the worker.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ServiceMessageBroker</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerMethod') }\" class=\"prettyprint no-bg\" id=\"registerMethod-anchor\">registerMethod(methodName: string, signature: Type[], method: Function, returnType?: Type) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/service_message_broker.ts#L41-L54\">@angular/platform-browser/src/web_workers/shared/service_message_broker.ts (line 41)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/ServiceMessageBroker-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/ServiceMessageBroker-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/servicemessagebrokerfactory-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ServiceMessageBrokerFactory</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ServiceMessageBrokerFactory {\n  createMessageBroker(channel: string, runInZone?: boolean) : ServiceMessageBroker\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ServiceMessageBrokerFactory</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createMessageBroker') }\" class=\"prettyprint no-bg\" id=\"createMessageBroker-anchor\">createMessageBroker(channel: string, runInZone?: boolean) : ServiceMessageBroker</pre>\n<p>Initializes the given channel and attaches a new <a href=\"servicemessagebroker-class\"><code>ServiceMessageBroker</code></a> to it.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/service_message_broker.ts#L15-L25\">@angular/platform-browser/src/web_workers/shared/service_message_broker.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/ServiceMessageBrokerFactory-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/ServiceMessageBrokerFactory-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/uiarguments-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UiArguments</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UiArguments {\n  constructor(method: string, args?: FnArg[])\n  \n  \n  method : string\n  args : FnArg[]\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UiArguments</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(method: string, args?: FnArg[])</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('method') }\" class=\"prettyprint no-bg\" id=\"method-anchor\">method : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('args') }\" class=\"prettyprint no-bg\" id=\"args-anchor\">args : FnArg[]</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/shared/client_message_broker.ts#L176-L183\">@angular/platform-browser/src/web_workers/shared/client_message_broker.ts (line 176)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/UiArguments-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/UiArguments-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_app_location_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_APP_LOCATION_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_APP_LOCATION_PROVIDERS</pre>\n<p>Those providers should be added when the router is used in a worker context in addition to the <a href=\"https://angular.io/docs/ts/latest/api/router-deprecated/index/ROUTER_PROVIDERS-let.html\"><code>ROUTER_PROVIDERS</code></a> and after them.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/worker/location_providers.ts#L20-L27\">@angular/platform-browser/src/web_workers/worker/location_providers.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_LOCATION_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_LOCATION_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_app_platform_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_APP_PLATFORM_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <code>platformWorkerApp()</code> or create a custom platform factory via <code>createPlatformFactory(platformWorkerApp, ...)</code></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_APP_PLATFORM_PROVIDERS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_app.ts#L35-L36\">@angular/platform-browser/src/worker_app.ts (line 35)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_PLATFORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_PLATFORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_script-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_SCRIPT: OpaqueToken</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_SCRIPT</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L59-L59\">@angular/platform-browser/src/worker_render.ts (line 59)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_SCRIPT-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_SCRIPT-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_ui_application_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_UI_APPLICATION_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Worker UI only has a platform but no application</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_UI_APPLICATION_PROVIDERS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L119-L119\">@angular/platform-browser/src/worker_render.ts (line 119)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_APPLICATION_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_APPLICATION_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_ui_location_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_UI_LOCATION_PROVIDERS</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_UI_LOCATION_PROVIDERS</pre>\n<p>A list of <a href=\"../../core/index/provider-class\"><code>Provider</code></a>s. To use the router in a Worker enabled application you must include these providers when setting up the render thread.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/web_workers/ui/location_providers.ts#L22-L25\">@angular/platform-browser/src/web_workers/ui/location_providers.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_LOCATION_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_LOCATION_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_ui_platform_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_UI_PLATFORM_PROVIDERS: Array</h1>\n<div class=\"badges\"><span class=\"status-badge\">Const</span></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_UI_PLATFORM_PROVIDERS</pre>\n<ul> <li>@deprecated Use <code>platformWorkerUi()</code> or create a custom platform factory via <code>createPlatformFactory(platformWorkerUi, ...)</code>\n</li> </ul> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L113-L114\">@angular/platform-browser/src/worker_render.ts (line 113)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_PLATFORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_PLATFORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_ui_startable_messaging_service-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_UI_STARTABLE_MESSAGING_SERVICE</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_UI_STARTABLE_MESSAGING_SERVICE</pre>\n<p>A multiple providers used to automatically call the <code>start()</code> method after the service is created.</p> <p>TODO(vicb): create an interface for startable services to implement</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L68-L69\">@angular/platform-browser/src/worker_render.ts (line 68)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_STARTABLE_MESSAGING_SERVICE-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_UI_STARTABLE_MESSAGING_SERVICE-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/webworkerinstance-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">WebWorkerInstance</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class WebWorkerInstance {\n  worker : Worker\n  bus : MessageBus\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Wrapper class that exposes the Worker and underlying <a href=\"messagebus-class\"><code>MessageBus</code></a> for lower level message passing.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class WebWorkerInstance</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@Injectable()</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('worker') }\" class=\"prettyprint no-bg\" id=\"worker-anchor\">worker : Worker</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bus') }\" class=\"prettyprint no-bg\" id=\"bus-anchor\">bus : MessageBus</pre>\n\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L34-L54\">@angular/platform-browser/src/worker_render.ts (line 34)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WebWorkerInstance-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WebWorkerInstance-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/workerappmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">WorkerAppModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class WorkerAppModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The ng module for the worker app side.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class WorkerAppModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  providers: [\n    FORM_PROVIDERS, BROWSER_SANITIZATION_PROVIDERS, Serializer,\n    {provide: ClientMessageBrokerFactory, useClass: ClientMessageBrokerFactory_},\n    {provide: ServiceMessageBrokerFactory, useClass: ServiceMessageBrokerFactory_},\n    WebWorkerRootRenderer, {provide: RootRenderer, useExisting: WebWorkerRootRenderer},\n    {provide: ON_WEB_WORKER, useValue: true}, RenderStore,\n    {provide: ExceptionHandler, useFactory: _exceptionHandler, deps: []},\n    {provide: MessageBus, useFactory: createMessageBus, deps: [NgZone]},\n    {provide: APP_INITIALIZER, useValue: setupWebWorker, multi: true}\n  ],\n  exports: [CommonModule, ApplicationModule]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_app.ts#L77-L98\">@angular/platform-browser/src/worker_app.ts (line 77)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WorkerAppModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WorkerAppModule-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/browserplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">browserPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformbrowser-let\"><code>platformBrowser</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export browserPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L80-L80\">@angular/platform-browser/src/browser.ts (line 80)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/browserPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/browserPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/disabledebugtools-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">disableDebugTools</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export disableDebugTools() : void</pre>\n<p>Disables Angular 2 tools.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser/tools/tools.ts#L32-L41\">@angular/platform-browser/src/browser/tools/tools.ts (line 32)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/disableDebugTools-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/disableDebugTools-function.html</a>\n  </p>\n</div>\n","api/platform-browser/index/enabledebugtools-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">enableDebugTools</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export enableDebugTools(ref: ComponentRef&lt;T&gt;) : ComponentRef&lt;T&gt;</pre>\n<p>Enabled Angular 2 debug tools that are accessible via your browser's developer console.</p> <p>Usage:</p> <ol> <li>Open developer console (e.g. in Chrome Ctrl + Shift + j)</li> <li>Type <code>ng.</code> (usually the console will show auto-complete suggestion)</li> <li>Try the change detection profiler <code>ng.profiler.timeChangeDetection()</code> then hit Enter.</li> </ol> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser/tools/tools.ts#L14-L32\">@angular/platform-browser/src/browser/tools/tools.ts (line 14)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/enableDebugTools-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/enableDebugTools-function.html</a>\n  </p>\n</div>\n","api/platform-browser/index/platformbrowser-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformBrowser</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformBrowser</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/browser.ts#L74-L75\">@angular/platform-browser/src/browser.ts (line 74)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/platformBrowser-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/platformBrowser-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/platformworkerapp-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformWorkerApp</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformWorkerApp</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_app.ts#L49-L49\">@angular/platform-browser/src/worker_app.ts (line 49)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/platformWorkerApp-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/platformWorkerApp-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/platformworkerui-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformWorkerUi</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformWorkerUi</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L158-L159\">@angular/platform-browser/src/worker_render.ts (line 158)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/platformWorkerUi-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/platformWorkerUi-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/workerappplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">workerAppPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformworkerapp-let\"><code>platformWorkerApp</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export workerAppPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_app.ts#L54-L54\">@angular/platform-browser/src/worker_app.ts (line 54)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/workerAppPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/workerAppPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-browser/index/workeruiplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">workerUiPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformworkerui-let\"><code>platformWorkerUi</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export workerUiPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_render.ts#L164-L164\">@angular/platform-browser/src/worker_render.ts (line 164)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/workerUiPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/workerUiPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-browser/testing/browsertestingmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BrowserTestingModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BrowserTestingModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>NgModule for testing.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BrowserTestingModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  exports: [BrowserModule],\n  providers: [\n    {provide: APP_ID, useValue: 'a'}, ELEMENT_PROBE_PROVIDERS,\n    {provide: NgZone, useFactory: createNgZone},\n    {provide: AnimationDriver, useValue: AnimationDriver.NOOP}\n  ]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-browser/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/testing/browser.ts#L37-L53\">@angular/platform-browser/testing/browser.ts (line 37)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/testing/BrowserTestingModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/testing/BrowserTestingModule-class.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/browser_app_compiler_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">BROWSER_APP_COMPILER_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>The compiler providers are already included in the <a href=\"../../core/index/compilerfactory-class\"><code>CompilerFactory</code></a> that is contained the <a href=\"browserdynamicplatform-let\"><code>browserDynamicPlatform</code></a>()`.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export BROWSER_APP_COMPILER_PROVIDERS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L25-L25\">@angular/platform-browser-dynamic/index.ts (line 25)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/BROWSER_APP_COMPILER_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/BROWSER_APP_COMPILER_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/bootstrap-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">bootstrap</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>This api cannot be used with the offline compiler. Use <code>PlatformRef.boostrapModule()</code> instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export bootstrap(appComponentType: ConcreteType&lt;C&gt;, customProviders?: Array&lt;any /*Type | Provider | any[]*/&gt;) : Promise&lt;ComponentRef&lt;C&gt;&gt;</pre>\n<p>Bootstrapping for Angular applications.</p> <p>You instantiate an Angular application by explicitly specifying a component to use as the root component for your application via the <code>bootstrap()</code> method.</p> <h2 id=\"simple-example\">Simple Example</h2> <p>Assuming this <code>index.html</code>:</p> <pre format=\"linenums\" language=\"html\" data-language=\"html\">&lt;html&gt;\n  &lt;!-- load Angular script tags here. --&gt;\n  &lt;body&gt;\n    &lt;my-app&gt;loading...&lt;/my-app&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p>An application is bootstrapped inside an existing browser DOM, typically <code>index.html</code>. Unlike Angular 1, Angular 2 does not compile/process providers in <code>index.html</code>. This is mainly for security reasons, as well as architectural changes in Angular 2. This means that <code>index.html</code> can safely be processed using server-side technologies such as providers. Bindings can thus use double-curly <code>{{ syntax }}</code> without collision from Angular 2 component double-curly <code>{{ syntax }}</code>.</p> <p>We can use this script code:</p> <pre language=\"ts\" format=\"linenums\" data-language=\"typescript\">@Component({selector: 'my-app', template: 'Hello {{ name }}!'})\nclass MyApp {\n  name: string = 'World';\n}\n\nfunction main() {\n  return bootstrap(MyApp);\n}\n</pre>\n<p>When the app developer invokes <code>bootstrap()</code> with the root component <code>MyApp</code> as its argument, Angular performs the following tasks:</p> <ol> <li>It uses the component's <code>selector</code> property to locate the DOM element which needs to be upgraded into the angular component.</li> <li>It creates a new child injector (from the platform injector). Optionally, you can also override the injector configuration for an app by invoking <code>bootstrap</code> with the <code>componentInjectableBindings</code> argument.</li> <li>It creates a new <code>Zone</code> and connects it to the angular application's change detection domain instance.</li> <li>It creates an emulated or shadow DOM on the selected component's host element and loads the template into it.</li> <li>It instantiates the specified component.</li> <li>Finally, Angular performs change detection to apply the initial data providers for the application.</li> </ol> <h2 id=\"bootstrapping-multiple-applications\">Bootstrapping Multiple Applications</h2> <p>When working within a browser window, there are many singleton resources: cookies, title, location, and others. Angular services that represent these resources must likewise be shared across all Angular applications that occupy the same browser window. For this reason, Angular creates exactly one global platform object which stores all shared services, and each angular application injector has the platform injector as its parent.</p> <p>Each application has its own private injector as well. When there are multiple applications on a page, Angular treats each application injector's services as private to that application.</p> <h2 id=\"api-version-1-\">API (version 1)</h2> <ul> <li>\n<code>appComponentType</code>: The root component which should act as the application. This is a reference to a <code>Type</code> which is annotated with <code>@Component(...)</code>.</li> <li>\n<code>customProviders</code>: An additional set of providers that can be added to the app injector to override default injection behavior.</li> </ul> <h2 id=\"api-version-2-\">API (version 2)</h2> <ul> <li>\n<code>appComponentType</code>: The root component which should act as the application. This is a reference to a <code>Type</code> which is annotated with <code>@Component(...)</code>.</li> <li>\n<code>providers</code>, <code>declarations</code>, <code>imports</code>, <code>entryComponents</code>: Defines the properties of the dynamically created module that is used to bootstrap the module.</li> <li>to configure the compiler, use the <code>compilerOptions</code> parameter.</li> </ul> <p>Returns a <code>Promise</code> of <a href=\"../../core/index/componentref-class\"><code>ComponentRef</code></a>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L42-L154\">@angular/platform-browser-dynamic/index.ts (line 42)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrap-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrap-function.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/bootstrapworkerapp-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">bootstrapWorkerApp</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Create an <a href=\"../../core/index/ngmodule-decorator\"><code>NgModule</code></a> that includes the <a href=\"../../platform-browser/index/workerappmodule-class\"><code>WorkerAppModule</code></a> and use <a href=\"bootstrapmodule\">bootstrapModule</a> with the <a href=\"workerappdynamicplatform-let\"><code>workerAppDynamicPlatform</code></a>() instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export bootstrapWorkerApp(appComponentType: ConcreteType&lt;T&gt;, customProviders?: Array&lt;any /*Type | Provider | any[]*/&gt;) : Promise&lt;ComponentRef&lt;T&gt;&gt;</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L184-L217\">@angular/platform-browser-dynamic/index.ts (line 184)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrapWorkerApp-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrapWorkerApp-function.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/bootstrapworkerui-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">bootstrapWorkerUi</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export bootstrapWorkerUi(workerScriptUri: string, customProviders?: Array&lt;any /*Type | Provider | any[]*/&gt;) : Promise&lt;PlatformRef&gt;</pre>\n<p>Bootstraps the worker ui.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L154-L169\">@angular/platform-browser-dynamic/index.ts (line 154)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrapWorkerUi-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/bootstrapWorkerUi-function.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/browserdynamicplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">browserDynamicPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformbrowserdynamic-let\"><code>platformBrowserDynamic</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export browserDynamicPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L42-L42\">@angular/platform-browser-dynamic/index.ts (line 42)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/browserDynamicPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/browserDynamicPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/platformworkerappdynamic-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformWorkerAppDynamic</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformWorkerAppDynamic</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L174-L179\">@angular/platform-browser-dynamic/index.ts (line 174)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/platformWorkerAppDynamic-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/platformWorkerAppDynamic-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/testing/browserdynamictestingmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">BrowserDynamicTestingModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class BrowserDynamicTestingModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>NgModule for testing.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class BrowserDynamicTestingModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({\n  exports: [BrowserTestingModule],\n  providers: [\n    {provide: TestComponentBuilder, useClass: OverridingTestComponentBuilder},\n    {provide: TestComponentRenderer, useClass: DOMTestComponentRenderer},\n  ]\n})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-browser-dynamic/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/testing.ts#L24-L39\">@angular/platform-browser-dynamic/testing.ts (line 24)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/BrowserDynamicTestingModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/BrowserDynamicTestingModule-class.html</a>\n  </p>\n</div>\n","api/platform-browser/index/worker_app_application_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">WORKER_APP_APPLICATION_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Create a module that includes <code>WorkerAppModule</code> instead. This is empty for backwards compatibility, as all of our bootstrap methods add a module implicitly, i.e. keeping this filled would add the providers 2x.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export WORKER_APP_APPLICATION_PROVIDERS</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/src/worker_app.ts#L44-L44\">@angular/platform-browser/src/worker_app.ts (line 44)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_APPLICATION_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index/WORKER_APP_APPLICATION_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/platformbrowserdynamic-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformBrowserDynamic</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformBrowserDynamic</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L36-L37\">@angular/platform-browser-dynamic/index.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/platformBrowserDynamic-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/platformBrowserDynamic-let.html</a>\n  </p>\n</div>\n","api/platform-server/index/platformdynamicserver-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformDynamicServer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformDynamicServer</pre>\n<p>The server platform that supports the runtime compiler.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L73-L74\">@angular/platform-server/src/server.ts (line 73)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/platformDynamicServer-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/platformDynamicServer-let.html</a>\n  </p>\n</div>\n","api/platform-server/index/platformserver-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformServer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformServer</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L60-L61\">@angular/platform-server/src/server.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/platformServer-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/platformServer-let.html</a>\n  </p>\n</div>\n","api/platform-server/index/serverplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">serverPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformserver-let\"><code>platformServer</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export serverPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L66-L66\">@angular/platform-server/src/server.ts (line 66)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/serverPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/serverPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-server/testing/servertestingmodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">ServerTestingModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ServerTestingModule {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>NgModule for testing.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class ServerTestingModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({exports: [BrowserDynamicTestingModule]})</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-server/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/testing/server.ts#L22-L31\">@angular/platform-server/testing/server.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/testing/ServerTestingModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/testing/ServerTestingModule-class.html</a>\n  </p>\n</div>\n","api/platform-server/index/serverdynamicplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">serverDynamicPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformdynamicserver-let\"><code>platformDynamicServer</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export serverDynamicPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L79-L79\">@angular/platform-server/src/server.ts (line 79)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/serverDynamicPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/serverDynamicPlatform-let.html</a>\n  </p>\n</div>\n","api/router/index/activatedroute-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ActivatedRoute</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ActivatedRoute {\n  snapshot : ActivatedRouteSnapshot\n  url : Observable&lt;UrlSegment[]&gt;\n  params : Observable&lt;Params&gt;\n  queryParams : Observable&lt;Params&gt;\n  fragment : Observable&lt;string&gt;\n  data : Observable&lt;Data&gt;\n  outlet : string\n  component : Type|string\n  routeConfig : Route\n  root : ActivatedRoute\n  parent : ActivatedRoute\n  firstChild : ActivatedRoute\n  children : ActivatedRoute[]\n  pathFromRoot : ActivatedRoute[]\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Contains the information about a component loaded in an outlet. The information is provided through the params, urlSegments, and data observables.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: Observable&lt;string&gt; = route.params.map(p =&gt; p.id);\n    const data = route.data.map(d =&gt; d.user); //includes `data` and `resolve`\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ActivatedRoute</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('snapshot') }\" class=\"prettyprint no-bg\" id=\"snapshot-anchor\">snapshot : ActivatedRouteSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : Observable&lt;UrlSegment[]&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('params') }\" class=\"prettyprint no-bg\" id=\"params-anchor\">params : Observable&lt;Params&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : Observable&lt;Params&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : Observable&lt;string&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('data') }\" class=\"prettyprint no-bg\" id=\"data-anchor\">data : Observable&lt;Data&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outlet') }\" class=\"prettyprint no-bg\" id=\"outlet-anchor\">outlet : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('component') }\" class=\"prettyprint no-bg\" id=\"component-anchor\">component : Type|string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routeConfig') }\" class=\"prettyprint no-bg\" id=\"routeConfig-anchor\">routeConfig : Route</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('root') }\" class=\"prettyprint no-bg\" id=\"root-anchor\">root : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parent') }\" class=\"prettyprint no-bg\" id=\"parent-anchor\">parent : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('firstChild') }\" class=\"prettyprint no-bg\" id=\"firstChild-anchor\">firstChild : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('children') }\" class=\"prettyprint no-bg\" id=\"children-anchor\">children : ActivatedRoute[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pathFromRoot') }\" class=\"prettyprint no-bg\" id=\"pathFromRoot-anchor\">pathFromRoot : ActivatedRoute[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_state.ts#L82-L135\">@angular/router/src/router_state.ts (line 82)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/ActivatedRoute-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/ActivatedRoute-interface.html</a>\n  </p>\n</div>\n","api/platform-server/index/server_platform_providers-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">SERVER_PLATFORM_PROVIDERS: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <code>platformServer()</code> or create a custom platform factory via <code>createPlatformFactory(platformServer, ...)</code></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export SERVER_PLATFORM_PROVIDERS</pre>\n<p>A set of providers to initialize the Angular platform in a server.</p> <p>Used automatically by <code>serverBootstrap</code>, or can be passed to <code>platform</code>.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L49-L50\">@angular/platform-server/src/server.ts (line 49)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/SERVER_PLATFORM_PROVIDERS-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/SERVER_PLATFORM_PROVIDERS-let.html</a>\n  </p>\n</div>\n","api/platform-server/index/serverbootstrap-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">serverBootstrap</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>create an <a href=\"../../core/index/ngmodule-decorator\"><code>NgModule</code></a> and use <a href=\"bootstrapmodule\">bootstrapModule</a> with the <a href=\"serverdynamicplatform-let\"><code>serverDynamicPlatform</code></a>() instead.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export serverBootstrap(appComponentType: ConcreteType&lt;T&gt;, customProviders: Array&lt;any /*Type | Provider | any[]*/&gt;) : Promise&lt;ComponentRef&lt;T&gt;&gt;</pre>\n<p>Used to bootstrap Angular in server environment (such as node).</p> <p>This version of bootstrap only creates platform injector and does not define anything for application injector. It is expected that application providers are imported from other packages such as <code>@angular/platform-browser</code> or <code>@angular/platform-browser-dynamic</code>.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">import {BROWSER_APP_PROVIDERS} from '@angular/platform-browser';\nimport {BROWSER_APP_COMPILER_PROVIDERS} from '@angular/platform-browser-dynamic';\n\nserverBootstrap(..., [BROWSER_APP_PROVIDERS, BROWSER_APP_COMPILER_PROVIDERS])\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-server/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/src/server.ts#L79-L126\">@angular/platform-server/src/server.ts (line 79)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index/serverBootstrap-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index/serverBootstrap-function.html</a>\n  </p>\n</div>\n","api/router/index/activatedroutesnapshot-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ActivatedRouteSnapshot</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ActivatedRouteSnapshot {\n  url : UrlSegment[]\n  params : Params\n  queryParams : Params\n  fragment : string\n  data : Data\n  outlet : string\n  component : Type|string\n  routeConfig : Route\n  root : ActivatedRouteSnapshot\n  parent : ActivatedRouteSnapshot\n  firstChild : ActivatedRouteSnapshot\n  children : ActivatedRouteSnapshot[]\n  pathFromRoot : ActivatedRouteSnapshot[]\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Contains the information about a component loaded in an outlet at a particular moment in time.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyComponent {\n  constructor(route: ActivatedRoute) {\n    const id: string = route.snapshot.params.id;\n    const data = route.snapshot.data;\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ActivatedRouteSnapshot</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : UrlSegment[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('params') }\" class=\"prettyprint no-bg\" id=\"params-anchor\">params : Params</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : Params</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('data') }\" class=\"prettyprint no-bg\" id=\"data-anchor\">data : Data</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outlet') }\" class=\"prettyprint no-bg\" id=\"outlet-anchor\">outlet : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('component') }\" class=\"prettyprint no-bg\" id=\"component-anchor\">component : Type|string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routeConfig') }\" class=\"prettyprint no-bg\" id=\"routeConfig-anchor\">routeConfig : Route</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('root') }\" class=\"prettyprint no-bg\" id=\"root-anchor\">root : ActivatedRouteSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parent') }\" class=\"prettyprint no-bg\" id=\"parent-anchor\">parent : ActivatedRouteSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('firstChild') }\" class=\"prettyprint no-bg\" id=\"firstChild-anchor\">firstChild : ActivatedRouteSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('children') }\" class=\"prettyprint no-bg\" id=\"children-anchor\">children : ActivatedRouteSnapshot[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pathFromRoot') }\" class=\"prettyprint no-bg\" id=\"pathFromRoot-anchor\">pathFromRoot : ActivatedRouteSnapshot[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_state.ts#L157-L227\">@angular/router/src/router_state.ts (line 157)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/ActivatedRouteSnapshot-interface.html</a>\n  </p>\n</div>\n","api/router/index/canactivate-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">CanActivate</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CanActivate {\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface a class can implement to be a guard deciding if a route can be activated.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass CanActivateTeam implements CanActivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable&lt;boolean&gt; {\n    return this.permissions.canActivate(this.currentUser, this.route.params.id);\n  }\n}\n\nbootstrap(AppComponent, [\n  CanActivateTeam,\n\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canActivate: [CanActivateTeam]\n  }])\n]);\n</pre>\n<p>You can also provide a function with the same signature instead of the class:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">bootstrap(AppComponent, [\n  {provide: 'canActivateTeam', useValue: (route: ActivatedRouteSnapshot, state:\nRouterStateSnapshot) =&gt; true},\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canActivate: ['canActivateTeam']\n  }])\n]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface CanActivate</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canActivate') }\" class=\"prettyprint no-bg\" id=\"canActivate-anchor\">canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/interfaces.ts#L12-L60\">@angular/router/src/interfaces.ts (line 12)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/CanActivate-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/CanActivate-interface.html</a>\n  </p>\n</div>\n","api/router/index/canactivatechild-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">CanActivateChild</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CanActivateChild {\n  canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface a class can implement to be a guard deciding if a child route can be activated.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass CanActivateTeam implements CanActivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n\n  canActivateChild(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable&lt;boolean&gt;\n{\n    return this.permissions.canActivate(this.currentUser, route.params.id);\n  }\n}\n\nbootstrap(AppComponent, [\n  CanActivateTeam,\n\n  provideRouter([\n    {\n      path: 'root',\n      canActivateChild: [CanActivateTeam],\n      children: [\n       {\n         path: 'team/:id',\n         component: Team\n       }\n     ]\n   }\n]);\n</pre>\n<p>You can also provide a function with the same signature instead of the class:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">bootstrap(AppComponent, [\n  {provide: 'canActivateTeam', useValue: (route: ActivatedRouteSnapshot, state:\nRouterStateSnapshot) =&gt; true},\n  provideRouter([\n    {\n      path: 'root',\n      canActivateChild: ['canActivateTeam'],\n      children: [\n       {\n         path: 'team/:id',\n         component: Team\n       }\n     ]\n   }\n]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface CanActivateChild</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canActivateChild') }\" class=\"prettyprint no-bg\" id=\"canActivateChild-anchor\">canActivateChild(childRoute: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/interfaces.ts#L60-L121\">@angular/router/src/interfaces.ts (line 60)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/CanActivateChild-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/CanActivateChild-interface.html</a>\n  </p>\n</div>\n","api/router/index/canload-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">CanLoad</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CanLoad {\n  canLoad(route: Route) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface a class can implement to be a guard deciding if a children can be loaded.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass CanLoadTeamSection implements CanLoad {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n\n  canLoad(route: Route):Observable&lt;boolean&gt; {\n    return this.permissions.canLoadChildren(this.currentUser, route);\n  }\n}\n\nbootstrap(AppComponent, [\n  CanLoadTeamSection,\n\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    loadChildren: 'team.js',\n    canLoad: [CanLoadTeamSection]\n  }])\n]);\n</pre>\n<p>You can also provide a function with the same signature instead of the class:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">bootstrap(AppComponent, [\n  {provide: 'canLoadTeamSection', useValue: (route: Route) =&gt; true},\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    loadChildren: 'team.js',\n    canLoad: ['canLoadTeamSection']\n  }])\n]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface CanLoad</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canLoad') }\" class=\"prettyprint no-bg\" id=\"canLoad-anchor\">canLoad(route: Route) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/interfaces.ts#L205-L251\">@angular/router/src/interfaces.ts (line 205)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/CanLoad-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/CanLoad-interface.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/workerappdynamicplatform-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">workerAppDynamicPlatform</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>Use <a href=\"platformworkerappdynamic-let\"><code>platformWorkerAppDynamic</code></a> instead</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export workerAppDynamicPlatform</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L184-L184\">@angular/platform-browser-dynamic/index.ts (line 184)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/workerAppDynamicPlatform-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/workerAppDynamicPlatform-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/testing/platformbrowserdynamictesting-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformBrowserDynamicTesting</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformBrowserDynamicTesting</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-browser-dynamic/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/testing.ts#L22-L24\">@angular/platform-browser-dynamic/testing.ts (line 22)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/platformBrowserDynamicTesting-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/platformBrowserDynamicTesting-let.html</a>\n  </p>\n</div>\n","api/router/index/candeactivate-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">CanDeactivate</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class CanDeactivate {\n  canDeactivate(component: T, route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface a class can implement to be a guard deciding if a route can be deactivated.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass CanDeactivateTeam implements CanDeactivate {\n  constructor(private permissions: Permissions, private currentUser: UserToken) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable&lt;boolean&gt; {\n    return this.permissions.canDeactivate(this.currentUser, route.params.id);\n  }\n}\n\nbootstrap(AppComponent, [\n  CanDeactivateTeam,\n\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canDeactivate: [CanDeactivateTeam]\n  }])\n]);\n</pre>\n<p>You can also provide a function with the same signature instead of the class:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">bootstrap(AppComponent, [\n  {provide: 'canDeactivateTeam', useValue: (route: ActivatedRouteSnapshot, state:\nRouterStateSnapshot) =&gt; true},\n  provideRouter([{\n    path: 'team/:id',\n    component: Team,\n    canActivate: ['canDeactivateTeam']\n  }])\n]);\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface CanDeactivate</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canDeactivate') }\" class=\"prettyprint no-bg\" id=\"canDeactivate-anchor\">canDeactivate(component: T, route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;boolean&gt;|Promise&lt;boolean&gt;|boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/interfaces.ts#L121-L168\">@angular/router/src/interfaces.ts (line 121)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/CanDeactivate-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/CanDeactivate-interface.html</a>\n  </p>\n</div>\n","api/platform-browser/testing/platformbrowsertesting-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformBrowserTesting</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformBrowserTesting</pre>\n<p>Platform for testing</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-browser/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/testing/browser.ts#L36-L37\">@angular/platform-browser/testing/browser.ts (line 36)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/testing/platformBrowserTesting-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/testing/platformBrowserTesting-let.html</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index/cached_template_provider-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">CACHED_TEMPLATE_PROVIDER: Array</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export CACHED_TEMPLATE_PROVIDER</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/platform-browser-dynamic/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L30-L31\">@angular/platform-browser-dynamic/index.ts (line 30)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/CACHED_TEMPLATE_PROVIDER-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index/CACHED_TEMPLATE_PROVIDER-let.html</a>\n  </p>\n</div>\n","api/router/index/data-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">Data</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Data {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"routes-type-alias\"><code>Routes</code></a> for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias Data</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/config.ts#L459-L467\">@angular/router/src/config.ts (line 459)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Data-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Data-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/defaulturlserializer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">DefaultUrlSerializer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class DefaultUrlSerializer {\n  parse(url: string) : UrlTree\n  serialize(tree: UrlTree) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A default implementation of the serialization.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class DefaultUrlSerializer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parse') }\" class=\"prettyprint no-bg\" id=\"parse-anchor\">parse(url: string) : UrlTree</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('serialize') }\" class=\"prettyprint no-bg\" id=\"serialize-anchor\">serialize(tree: UrlTree) : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/url_tree.ts#L169-L190\">@angular/router/src/url_tree.ts (line 169)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/DefaultUrlSerializer-class.html</a>\n  </p>\n</div>\n","api/router/index/event-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">Event</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Event {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias Event</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L113-L119\">@angular/router/src/router.ts (line 113)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Event-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Event-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/extraoptions-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">ExtraOptions</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ExtraOptions {\n  enableTracing : boolean\n  useHash : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface ExtraOptions</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('enableTracing') }\" class=\"prettyprint no-bg\" id=\"enableTracing-anchor\">enableTracing : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('useHash') }\" class=\"prettyprint no-bg\" id=\"useHash-anchor\">useHash : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/common_router_providers.ts#L20-L28\">@angular/router/src/common_router_providers.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/ExtraOptions-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/ExtraOptions-interface.html</a>\n  </p>\n</div>\n","api/router/index/navigationcancel-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NavigationCancel</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NavigationCancel {\n  constructor(id: number, url: string)\n  \n  \n  id : number\n  url : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An event triggered when a navigation is canceled</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NavigationCancel</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: number, url: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L74-L85\">@angular/router/src/router.ts (line 74)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/NavigationCancel-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/NavigationCancel-class.html</a>\n  </p>\n</div>\n","api/router/index/navigationend-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NavigationEnd</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NavigationEnd {\n  constructor(id: number, url: string, urlAfterRedirects: string)\n  \n  \n  id : number\n  url : string\n  urlAfterRedirects : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An event triggered when a navigation ends successfully</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NavigationEnd</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: number, url: string, urlAfterRedirects: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlAfterRedirects') }\" class=\"prettyprint no-bg\" id=\"urlAfterRedirects-anchor\">urlAfterRedirects : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L61-L74\">@angular/router/src/router.ts (line 61)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/NavigationEnd-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/NavigationEnd-class.html</a>\n  </p>\n</div>\n","api/router/index/navigationerror-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NavigationError</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NavigationError {\n  constructor(id: number, url: string, error: any)\n  \n  \n  id : number\n  url : string\n  error : any\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An event triggered when a navigation fails due to unexpected error</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NavigationError</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: number, url: string, error: any)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('error') }\" class=\"prettyprint no-bg\" id=\"error-anchor\">error : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L85-L98\">@angular/router/src/router.ts (line 85)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/NavigationError-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/NavigationError-class.html</a>\n  </p>\n</div>\n","api/router/index/navigationextras-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">NavigationExtras</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NavigationExtras {\n  relativeTo : ActivatedRoute\n  queryParams : Params\n  fragment : string\n  preserveQueryParams : boolean\n  preserveFragment : boolean\n  skipLocationChange : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface NavigationExtras</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('relativeTo') }\" class=\"prettyprint no-bg\" id=\"relativeTo-anchor\">relativeTo : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : Params</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveQueryParams') }\" class=\"prettyprint no-bg\" id=\"preserveQueryParams-anchor\">preserveQueryParams : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveFragment') }\" class=\"prettyprint no-bg\" id=\"preserveFragment-anchor\">preserveFragment : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('skipLocationChange') }\" class=\"prettyprint no-bg\" id=\"skipLocationChange-anchor\">skipLocationChange : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L38-L50\">@angular/router/src/router.ts (line 38)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/NavigationExtras-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/NavigationExtras-interface.html</a>\n  </p>\n</div>\n","api/platform-server/testing/platformservertesting-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">platformServerTesting</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export platformServerTesting</pre>\n<p>Platform for testing</p> </div>\n<p class=\"location-badge\">exported from <a href=\"index\">@angular/platform-server/testing</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/testing/server.ts#L21-L22\">@angular/platform-server/testing/server.ts (line 21)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/testing/platformServerTesting-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/testing/platformServerTesting-let.html</a>\n  </p>\n</div>\n","api/router/index/navigationstart-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">NavigationStart</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class NavigationStart {\n  constructor(id: number, url: string)\n  \n  \n  id : number\n  url : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An event triggered when a navigation starts</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class NavigationStart</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: number, url: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L50-L61\">@angular/router/src/router.ts (line 50)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/NavigationStart-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/NavigationStart-class.html</a>\n  </p>\n</div>\n","api/router/index/primary_outlet-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">PRIMARY_OUTLET</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export PRIMARY_OUTLET</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/shared.ts#L15-L15\">@angular/router/src/shared.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/PRIMARY_OUTLET-let.html</a>\n  </p>\n</div>\n","api/router/index/params-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">Params</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Params {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A collection of parameters.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias Params</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/shared.ts#L15-L24\">@angular/router/src/shared.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Params-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Params-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/router_directives-let":"<h1 class=\"hero-title text-display-1 is-standard-case\">ROUTER_DIRECTIVES</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Const</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Variable Export</h2>\n<pre class=\"prettyprint no-bg\">export ROUTER_DIRECTIVES</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_module.ts#L28-L28\">@angular/router/src/router_module.ts (line 28)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/ROUTER_DIRECTIVES-let.html</a>\n  </p>\n</div>\n","api/router/index/resolve-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Resolve</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Resolve {\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;any&gt;|Promise&lt;any&gt;|any\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An interface a class can implement to be a data provider.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Injectable()\nclass TeamResolver implements Resolve {\n  constructor(private backend: Backend) {}\n\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):Observable&lt;any&gt; {\n    return this.backend.fetchTeam(this.route.params.id);\n  }\n}\n\nbootstrap(AppComponent, [\n  TeamResolver,\n\n  provideRouter([{\n    path: 'team/:id',\n    component: TeamCmp,\n    resolve: {\n      team: TeamResolver\n    }\n  }])\n]);\n</pre>\n<p>You can also provide a function with the same signature instead of the class.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Resolve</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolve') }\" class=\"prettyprint no-bg\" id=\"resolve-anchor\">resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) : Observable&lt;any&gt;|Promise&lt;any&gt;|any</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/interfaces.ts#L168-L205\">@angular/router/src/interfaces.ts (line 168)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Resolve-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Resolve-interface.html</a>\n  </p>\n</div>\n","api/router/index/resolvedata-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">ResolveData</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class ResolveData {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"routes-type-alias\"><code>Routes</code></a> for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias ResolveData</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/config.ts#L467-L475\">@angular/router/src/config.ts (line 467)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/ResolveData-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/ResolveData-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/route-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">Route</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Route {\n  path : string\n  terminal : boolean\n  pathMatch : string\n  component : Type|string\n  redirectTo : string\n  outlet : string\n  canActivate : any[]\n  canActivateChild : any[]\n  canDeactivate : any[]\n  canLoad : any[]\n  data : Data\n  resolve : ResolveData\n  children : Route[]\n  loadChildren : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"routes-type-alias\"><code>Routes</code></a> for more details.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface Route</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('terminal') }\" class=\"prettyprint no-bg\" id=\"terminal-anchor\">terminal : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('pathMatch') }\" class=\"prettyprint no-bg\" id=\"pathMatch-anchor\">pathMatch : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('component') }\" class=\"prettyprint no-bg\" id=\"component-anchor\">component : Type|string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('redirectTo') }\" class=\"prettyprint no-bg\" id=\"redirectTo-anchor\">redirectTo : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outlet') }\" class=\"prettyprint no-bg\" id=\"outlet-anchor\">outlet : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canActivate') }\" class=\"prettyprint no-bg\" id=\"canActivate-anchor\">canActivate : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canActivateChild') }\" class=\"prettyprint no-bg\" id=\"canActivateChild-anchor\">canActivateChild : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canDeactivate') }\" class=\"prettyprint no-bg\" id=\"canDeactivate-anchor\">canDeactivate : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('canLoad') }\" class=\"prettyprint no-bg\" id=\"canLoad-anchor\">canLoad : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('data') }\" class=\"prettyprint no-bg\" id=\"data-anchor\">data : Data</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolve') }\" class=\"prettyprint no-bg\" id=\"resolve-anchor\">resolve : ResolveData</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('children') }\" class=\"prettyprint no-bg\" id=\"children-anchor\">children : Route[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('loadChildren') }\" class=\"prettyprint no-bg\" id=\"loadChildren-anchor\">loadChildren : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/config.ts#L475-L500\">@angular/router/src/config.ts (line 475)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Route-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Route-interface.html</a>\n  </p>\n</div>\n","api/router/index/routerconfig-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterConfig</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p>use Routes</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterConfig {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>Routes</code> is an array of route configurations. Each one has the following properties:</p> <ul> <li>\n<em><code>path</code></em> is a string that uses the route matcher DSL.</li> <li>\n<code>pathMatch</code> is a string that specifies the matching strategy.</li> <li>\n<code>component</code> is a component type.</li> <li>\n<code>redirectTo</code> is the url fragment which will replace the current matched segment.</li> <li>\n<code>outlet</code> is the name of the outlet the component should be placed into.</li> <li>\n<code>canActivate</code> is an array of DI tokens used to look up CanActivate handlers. See <a href=\"canactivate-interface\"><code>CanActivate</code></a> for more info.</li> <li>\n<code>canDeactivate</code> is an array of DI tokens used to look up CanDeactivate handlers. See <a href=\"candeactivate-interface\"><code>CanDeactivate</code></a> for more info.</li> <li>\n<code>data</code> is additional data provided to the component via <code>ActivatedRoute</code>.</li> <li>\n<code>resolve</code> is a map of DI tokens used to look up data resolvers. See <a href=\"resolve-interface\"><code>Resolve</code></a> for more info.</li> <li>\n<code>children</code> is an array of child route definitions.</li> </ul> <h3 id=\"simple-configuration\">Simple Configuration</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11/user/bob</code>, the router will create the team component with the user component in it.</p> <h3 id=\"multiple-outlets\">Multiple Outlets</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team\n},\n{\n  path: 'chat/:user',\n  component: Chat\n  outlet: aux\n}]\n</pre>\n<p>When navigating to <code>/team/11(aux:chat/jim)</code>, the router will create the team component next to the chat component. The chat component will be placed into the aux outlet.</p> <h3 id=\"wild-cards\">Wild Cards</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '**',\n  component: Sink\n}]\n</pre>\n<p>Regardless of where you navigate to, the router will instantiate the sink component.</p> <h3 id=\"redirects\">Redirects</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: 'legacy/user/:name',\n      redirectTo: 'user/:name'\n    },\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to '/team/11/legacy/user/jim', the router will change the url to '/team/11/user/jim', and then will instantiate the team component with the user component in it.</p> <p>If the <code>redirectTo</code> value starts with a '/', then it is an absolute redirect. E.g., if in the example above we change the <code>redirectTo</code> to <code>/user/:name</code>, the result url will be '/user/jim'.</p> <h3 id=\"empty-path\">Empty Path</h3> <p>Empty-path route configurations can be used to instantiate components that do not \"consume\" any url segments. Let's look at the following configuration:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: '',\n      component: AllUsers\n    },\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11</code>, the router will instantiate the AllUsers component.</p> <p>Empty-path routes can have children.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: '',\n      component: WrapperCmp,\n      children: [\n        {\n          path: 'user/:name',\n          component: User\n        }\n      ]\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11/user/jim</code>, the router will instantiate the wrapper component with the user component in it.</p> <h3 id=\"matching-strategy\">Matching Strategy</h3> <p>By default the router will look at what is left in the url, and check if it starts with the specified path (e.g., <code>/team/11/user</code> starts with <code>team/:id</code>).</p> <p>We can change the matching strategy to make sure that the path covers the whole unconsumed url, which is akin to <code>unconsumedUrl === path</code> or <code>$</code> regular expressions.</p> <p>This is particularly important when redirecting empty-path routes.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n},\n{\n  path: 'main',\n  component: Main\n}]\n</pre>\n<p>Since an empty path is a prefix of any url, even when navigating to '/main', the router will still apply the redirect.</p> <p>If <code>pathMatch: full</code> is provided, the router will apply the redirect if and only if navigating to '/'.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n},\n{\n  path: 'main',\n  component: Main\n}]\n</pre>\n<h3 id=\"componentless-routes\">Componentless Routes</h3> <p>It is useful at times to have the ability to share parameters between sibling components.</p> <p>Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both of them require some id parameter.</p> <p>One way to do that would be to have a bogus parent component, so both the siblings can get the id parameter from it. This is not ideal. Instead, you can use a componentless route.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</pre>\n<p>So when navigating to <code>parent/10/(a//aux:b)</code>, the route will instantiate the main child and aux child components next to each other. In this example, the application component has to have the primary and aux outlets defined.</p> <p>The router will also merge the <code>params</code>, <code>data</code>, and <code>resolve</code> of the componentless parent into the <code>params</code>, <code>data</code>, and <code>resolve</code> of the children.</p> <p>This is especially useful when child components are defined as follows:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</pre>\n<p>With this configuration in place, navigating to '/parent/10' will create the main child and aux components.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias RouterConfig</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/config.ts#L9-L233\">@angular/router/src/config.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterConfig-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterConfig-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/router-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">Router</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Router {\n  constructor(rootComponentType: Type, resolver: ComponentResolver, urlSerializer: UrlSerializer, outletMap: RouterOutletMap, location: Location, injector: Injector, loader: NgModuleFactoryLoader, config: Routes)\n  \n  \n  currentUrlTree : UrlTree\n  currentRouterState : RouterState\n  locationSubscription : Subscription\n  routerEvents : Subject&lt;Event&gt;\n  navigationId : number\n  config : Routes\n  configLoader : RouterConfigLoader\n  navigated : boolean\n  rootComponentType : Type\n  resolver : ComponentResolver\n  urlSerializer : UrlSerializer\n  outletMap : RouterOutletMap\n  location : Location\n  injector : Injector\n  initialNavigation() : void\n  routerState : RouterState\n  url : string\n  events : Observable&lt;Event&gt;\n  resetConfig(config: Routes) : void\n  ngOnDestroy()\n  dispose() : void\n  createUrlTree(commands: any[], {relativeTo, queryParams, fragment, preserveQueryParams,}?: NavigationExtras) : UrlTree\n  navigateByUrl(url: string|UrlTree, extras?: NavigationExtras) : Promise&lt;boolean&gt;\n  navigate(commands: any[], extras?: NavigationExtras) : Promise&lt;boolean&gt;\n  serializeUrl(url: UrlTree) : string\n  parseUrl(url: string) : UrlTree\n  isActive(url: string|UrlTree, exact: boolean) : boolean\n  scheduleNavigation(url: UrlTree, extras: NavigationExtras) : Promise&lt;boolean&gt;\n  setUpLocationChangeListener() : void\n  runNavigate(url: UrlTree, preventPushState: boolean, id: number) : Promise&lt;boolean&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The <code>Router</code> is responsible for mapping URLs to components.</p> <p>See <a href=\"routes-type-alias\"><code>Routes</code></a> for more details and examples.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class Router</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(rootComponentType: Type, resolver: ComponentResolver, urlSerializer: UrlSerializer, outletMap: RouterOutletMap, location: Location, injector: Injector, loader: NgModuleFactoryLoader, config: Routes)</pre>\n<p>Creates the router service.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('currentUrlTree') }\" class=\"prettyprint no-bg\" id=\"currentUrlTree-anchor\">currentUrlTree : UrlTree</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('currentRouterState') }\" class=\"prettyprint no-bg\" id=\"currentRouterState-anchor\">currentRouterState : RouterState</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('locationSubscription') }\" class=\"prettyprint no-bg\" id=\"locationSubscription-anchor\">locationSubscription : Subscription</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerEvents') }\" class=\"prettyprint no-bg\" id=\"routerEvents-anchor\">routerEvents : Subject&lt;Event&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('navigationId') }\" class=\"prettyprint no-bg\" id=\"navigationId-anchor\">navigationId : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('config') }\" class=\"prettyprint no-bg\" id=\"config-anchor\">config : Routes</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('configLoader') }\" class=\"prettyprint no-bg\" id=\"configLoader-anchor\">configLoader : RouterConfigLoader</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('navigated') }\" class=\"prettyprint no-bg\" id=\"navigated-anchor\">navigated : boolean</pre>\n<p>Indicates if at least one navigation happened.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('rootComponentType') }\" class=\"prettyprint no-bg\" id=\"rootComponentType-anchor\">rootComponentType : Type</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolver') }\" class=\"prettyprint no-bg\" id=\"resolver-anchor\">resolver : ComponentResolver</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlSerializer') }\" class=\"prettyprint no-bg\" id=\"urlSerializer-anchor\">urlSerializer : UrlSerializer</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outletMap') }\" class=\"prettyprint no-bg\" id=\"outletMap-anchor\">outletMap : RouterOutletMap</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('location') }\" class=\"prettyprint no-bg\" id=\"location-anchor\">location : Location</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('injector') }\" class=\"prettyprint no-bg\" id=\"injector-anchor\">injector : Injector</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('initialNavigation') }\" class=\"prettyprint no-bg\" id=\"initialNavigation-anchor\">initialNavigation() : void</pre>\n<p>Sets up the location change listener and performs the inital navigation</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerState') }\" class=\"prettyprint no-bg\" id=\"routerState-anchor\">routerState : RouterState</pre>\n<p>Returns the current route state.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n<p>Returns the current url.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('events') }\" class=\"prettyprint no-bg\" id=\"events-anchor\">events : Observable&lt;Event&gt;</pre>\n<p>Returns an observable of route events</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resetConfig') }\" class=\"prettyprint no-bg\" id=\"resetConfig-anchor\">resetConfig(config: Routes) : void</pre>\n<p>Resets the configuration used for navigation and generating links.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">router.resetConfig([\n { path: 'team/:id', component: TeamCmp, children: [\n   { path: 'simple', component: SimpleCmp },\n   { path: 'user/:name', component: UserCmp }\n ] }\n]);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy()</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dispose') }\" class=\"prettyprint no-bg\" id=\"dispose-anchor\">dispose() : void</pre>\n<p>Disposes of the router.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('createUrlTree') }\" class=\"prettyprint no-bg\" id=\"createUrlTree-anchor\">createUrlTree(commands: any[], {relativeTo, queryParams, fragment, preserveQueryParams,\n                        preserveFragment}?: NavigationExtras) : UrlTree</pre>\n<p>Applies an array of commands to the current url tree and creates a new url tree.</p> <p>When given an activate route, applies the given commands starting from the route. When not given a route, applies the given command starting from the root.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">// create /team/33/user/11\nrouter.createUrlTree(['/team', 33, 'user', 11]);\n\n// create /team/33;expand=true/user/11\nrouter.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);\n\n// you can collapse static segments like this (this works only with the first passed-in value):\nrouter.createUrlTree(['/team/33/user', userId]);\n\nIf the first segment can contain slashes, and you do not want the router to split it, you\ncan do the following:\n\nrouter.createUrlTree([{segmentPath: '/one/two'}]);\n\n// create /team/33/(user/11//aux:chat)\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);\n\n// remove the right secondary node\nrouter.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);\n\n// assuming the current url is `/team/33/user/11` and the route points to `user/11`\n\n// navigate to /team/33/user/11/details\nrouter.createUrlTree(['details'], {relativeTo: route});\n\n// navigate to /team/33/user/22\nrouter.createUrlTree(['../22'], {relativeTo: route});\n\n// navigate to /team/44/user/22\nrouter.createUrlTree(['../../team/44/user/22'], {relativeTo: route});\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('navigateByUrl') }\" class=\"prettyprint no-bg\" id=\"navigateByUrl-anchor\">navigateByUrl(url: string|UrlTree, extras?: NavigationExtras) : Promise&lt;boolean&gt;</pre>\n<p>Navigate based on the provided url. This navigation is always absolute.</p> <p>Returns a promise that:</p> <ul> <li>is resolved with 'true' when navigation succeeds</li> <li>is resolved with 'false' when navigation fails</li> <li>is rejected when an error happens</li> </ul> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">router.navigateByUrl(\"/team/33/user/11\");\n\n// Navigate without updating the URL\nrouter.navigateByUrl(\"/team/33/user/11\", { skipLocationChange: true });\n</pre>\n<p>In opposite to <code>navigate</code>, <code>navigateByUrl</code> takes a whole URL and does not apply any delta to the current one.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('navigate') }\" class=\"prettyprint no-bg\" id=\"navigate-anchor\">navigate(commands: any[], extras?: NavigationExtras) : Promise&lt;boolean&gt;</pre>\n<p>Navigate based on the provided array of commands and a starting point. If no starting route is provided, the navigation is absolute.</p> <p>Returns a promise that:</p> <ul> <li>is resolved with 'true' when navigation succeeds</li> <li>is resolved with 'false' when navigation fails</li> <li>is rejected when an error happens</li> </ul> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">router.navigate(['team', 33, 'team', '11], {relativeTo: route});\n\n// Navigate without updating the URL\nrouter.navigate(['team', 33, 'team', '11], {relativeTo: route, skipLocationChange: true });\n</pre>\n<p>In opposite to <code>navigateByUrl</code>, <code>navigate</code> always takes a delta that is applied to the current URL.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('serializeUrl') }\" class=\"prettyprint no-bg\" id=\"serializeUrl-anchor\">serializeUrl(url: UrlTree) : string</pre>\n<p>Serializes a <a href=\"urltree-interface\"><code>UrlTree</code></a> into a string.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parseUrl') }\" class=\"prettyprint no-bg\" id=\"parseUrl-anchor\">parseUrl(url: string) : UrlTree</pre>\n<p>Parse a string into a <a href=\"urltree-interface\"><code>UrlTree</code></a>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isActive') }\" class=\"prettyprint no-bg\" id=\"isActive-anchor\">isActive(url: string|UrlTree, exact: boolean) : boolean</pre>\n<p>Returns if the url is activated or not.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('scheduleNavigation') }\" class=\"prettyprint no-bg\" id=\"scheduleNavigation-anchor\">scheduleNavigation(url: UrlTree, extras: NavigationExtras) : Promise&lt;boolean&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('setUpLocationChangeListener') }\" class=\"prettyprint no-bg\" id=\"setUpLocationChangeListener-anchor\">setUpLocationChangeListener() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('runNavigate') }\" class=\"prettyprint no-bg\" id=\"runNavigate-anchor\">runNavigate(url: UrlTree, preventPushState: boolean, id: number) : Promise&lt;boolean&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L119-L445\">@angular/router/src/router.ts (line 119)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Router-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Router-class.html</a>\n  </p>\n</div>\n","api/router/index/routermodule-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterModule</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterModule {\n  forRoot(routes: Routes, config?: ExtraOptions) : ModuleWithProviders\n  forChild(routes: Routes) : ModuleWithProviders\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Router module.</p> <p>When registered at the root, it should be used as follows:</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">bootstrap(AppCmp, {imports: [RouterModule.forRoot(ROUTES)]});\n</pre>\n<p>For lazy loaded modules it should be used as follows:</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@NgModule({\n  imports: [RouterModule.forChild(CHILD_ROUTES)]\n})\nclass Lazy {}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RouterModule</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Annotations</h2>\n<pre class=\"prettyprint no-bg\">@NgModule({declarations: ROUTER_DIRECTIVES, exports: ROUTER_DIRECTIVES})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Static Members</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forRoot') }\" class=\"prettyprint no-bg\" id=\"forRoot-anchor\">forRoot(routes: Routes, config?: ExtraOptions) : ModuleWithProviders</pre> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('forChild') }\" class=\"prettyprint no-bg\" id=\"forChild-anchor\">forChild(routes: Routes) : ModuleWithProviders</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_module.ts#L51-L99\">@angular/router/src/router_module.ts (line 51)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterModule-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterModule-class.html</a>\n  </p>\n</div>\n","api/router/index/routeroutletmap-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterOutletMap</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterOutletMap {\n  registerOutlet(name: string, outlet: RouterOutlet) : void\n  removeOutlet(name: string) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RouterOutletMap</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('registerOutlet') }\" class=\"prettyprint no-bg\" id=\"registerOutlet-anchor\">registerOutlet(name: string, outlet: RouterOutlet) : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('removeOutlet') }\" class=\"prettyprint no-bg\" id=\"removeOutlet-anchor\">removeOutlet(name: string) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_outlet_map.ts#L9-L20\">@angular/router/src/router_outlet_map.ts (line 9)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterOutletMap-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterOutletMap-class.html</a>\n  </p>\n</div>\n","api/router/index/urlsegment-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UrlSegment</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UrlSegment {\n  constructor(path: string, parameters: {[key: string]: string})\n  \n  \n  path : string\n  parameters : {[key: string]: string}\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\"><h2 class=\"h2-api-docs\">Class Description</h2></div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UrlSegment</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(path: string, parameters: {[key: string]: string})</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('path') }\" class=\"prettyprint no-bg\" id=\"path-anchor\">path : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parameters') }\" class=\"prettyprint no-bg\" id=\"parameters-anchor\">parameters : {[key: string]: string}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/url_tree.ts#L109-L118\">@angular/router/src/url_tree.ts (line 109)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/UrlSegment-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/UrlSegment-class.html</a>\n  </p>\n</div>\n","api/router/index/routerlink-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterLink</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterLink {\n  constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy)\n  \n  \n  commands : any[]\n  queryParams : {[k: string]: any}\n  fragment : string\n  preserveQueryParams : boolean\n  preserveFragment : boolean\n  router : Router\n  route : ActivatedRoute\n  locationStrategy : LocationStrategy\n  routerLink \n  onClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\n  urlTree : UrlTree\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>:not(a)[routerLink]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The RouterLink directive lets you link to specific parts of your app.</p> <p>Consider the following route configuration:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{ path: 'user/:name', component: UserCmp }]\n</pre>\n<p>When linking to this <code>User</code> route, you can write:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"/user/bob\"&gt;link to user component&lt;/a&gt;\n</pre>\n<p>If you use dynamic values to generate the link, you can pass an array of path segments, followed by the params for each segment.</p> <p>For instance <code>['/team', teamId, 'user', userName, {details: true}]</code> means that we want to generate a link to <code>/team/11/user/bob;details=true</code>. Multiple static segments can be merged into one (e.g., <code>['/team/11/user', userName, {details:\n true}]</code>).</p> <p>The first segment name can be prepended with <code>/</code>, <code>./</code>, or <code>../</code>:</p> <ul> <li>If the first segment begins with <code>/</code>, the router will look up the route from the root of the app.</li> <li>If the first segment begins with <code>./</code>, or doesn't begin with a slash, the router will instead look in the children of the current activated route.</li> <li>And if the first segment begins with <code>../</code>, the router will go up one level.</li> </ul> <p>You can set query params and fragment as follows:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"['/user/bob']\" [queryParams]=\"{debug: true}\" fragment=\"education\"&gt;link to user\n component&lt;/a&gt;\n</pre>\n<p>RouterLink will use these to generate this link: <code>/user/bob#education?debug=true</code>.</p> <p>You can also tell the directive to preserve the current query params and fragment:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"['/user/bob']\" preserveQueryParams preserveFragment&gt;link to user\n component&lt;/a&gt;\n</pre>\n<p>The router link directive always treats the provided input as a delta to the current url.</p> <p>For instance, if the current url is <code>/user/(box//aux:team)</code>.</p> <p>Then the following link <code>&lt;a [routerLink]=\"['/user/jim']\"&gt;Jim&lt;/a&gt;</code> will generate the link <code>/user/(jim//aux:team)</code>. See <a href=\"router-class#createUrlTree\"><code>createUrlTree</code></a> for more information.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RouterLink</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('commands') }\" class=\"prettyprint no-bg\" id=\"commands-anchor\">commands : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : {[k: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveQueryParams') }\" class=\"prettyprint no-bg\" id=\"preserveQueryParams-anchor\">preserveQueryParams : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveFragment') }\" class=\"prettyprint no-bg\" id=\"preserveFragment-anchor\">preserveFragment : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('router') }\" class=\"prettyprint no-bg\" id=\"router-anchor\">router : Router</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('route') }\" class=\"prettyprint no-bg\" id=\"route-anchor\">route : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('locationStrategy') }\" class=\"prettyprint no-bg\" id=\"locationStrategy-anchor\">locationStrategy : LocationStrategy</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerLink') }\" class=\"prettyprint no-bg\" id=\"routerLink-anchor\">routerLink</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onClick') }\" class=\"prettyprint no-bg\" id=\"onClick-anchor\">onClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlTree') }\" class=\"prettyprint no-bg\" id=\"urlTree-anchor\">urlTree : UrlTree</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/directives/router_link.ts#L15-L111\">@angular/router/src/directives/router_link.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterLink-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterLink-directive.html</a>\n  </p>\n</div>\n","api/router/index/routerlinkactive-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterLinkActive</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterLinkActive {\n  constructor(router: Router, element: ElementRef, renderer: Renderer)\n  \n  \n  links : QueryList&lt;RouterLink&gt;\n  linksWithHrefs : QueryList&lt;RouterLinkWithHref&gt;\n  classes : string[]\n  subscription : Subscription\n  routerLinkActiveOptions : {exact: boolean}\n  router : Router\n  element : ElementRef\n  renderer : Renderer\n  ngAfterContentInit() : void\n  routerLinkActive \n  ngOnChanges(changes: {}) : any\n  ngOnDestroy() : any\n  update() : void\n  reduceList(q: QueryList&lt;any&gt;) : boolean\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>[routerLinkActive]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The RouterLinkActive directive lets you add a CSS class to an element when the link's route becomes active.</p> <p>Consider the following example:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"/user/bob\" routerLinkActive=\"active-link\"&gt;Bob&lt;/a&gt;\n</pre>\n<p>When the url is either '/user' or '/user/bob', the active-link class will be added to the <code>a</code> tag. If the url changes, the class will be removed.</p> <p>You can set more than one class, as follows:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"/user/bob\" routerLinkActive=\"class1 class2\"&gt;Bob&lt;/a&gt;\n&lt;a [routerLink]=\"/user/bob\" routerLinkActive=\"['class1', 'class2']\"&gt;Bob&lt;/a&gt;\n</pre>\n<p>You can configure RouterLinkActive by passing <code>exact: true</code>. This will add the classes only when the url matches the link exactly.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;a [routerLink]=\"/user/bob\" routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact:\ntrue}\"&gt;Bob&lt;/a&gt;\n</pre>\n<p>Finally, you can apply the RouterLinkActive directive to an ancestor of a RouterLink.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;div routerLinkActive=\"active-link\" [routerLinkActiveOptions]=\"{exact: true}\"&gt;\n  &lt;a [routerLink]=\"/user/jim\"&gt;Jim&lt;/a&gt;\n  &lt;a [routerLink]=\"/user/bob\"&gt;Bob&lt;/a&gt;\n&lt;/div&gt;\n</pre>\n<p>This will set the active-link class on the div tag if the url is either '/user/jim' or '/user/bob'.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RouterLinkActive</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(router: Router, element: ElementRef, renderer: Renderer)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('links') }\" class=\"prettyprint no-bg\" id=\"links-anchor\">links : QueryList&lt;RouterLink&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('linksWithHrefs') }\" class=\"prettyprint no-bg\" id=\"linksWithHrefs-anchor\">linksWithHrefs : QueryList&lt;RouterLinkWithHref&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('classes') }\" class=\"prettyprint no-bg\" id=\"classes-anchor\">classes : string[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('subscription') }\" class=\"prettyprint no-bg\" id=\"subscription-anchor\">subscription : Subscription</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerLinkActiveOptions') }\" class=\"prettyprint no-bg\" id=\"routerLinkActiveOptions-anchor\">routerLinkActiveOptions : {exact: boolean}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('router') }\" class=\"prettyprint no-bg\" id=\"router-anchor\">router : Router</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('element') }\" class=\"prettyprint no-bg\" id=\"element-anchor\">element : ElementRef</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('renderer') }\" class=\"prettyprint no-bg\" id=\"renderer-anchor\">renderer : Renderer</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngAfterContentInit') }\" class=\"prettyprint no-bg\" id=\"ngAfterContentInit-anchor\">ngAfterContentInit() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerLinkActive') }\" class=\"prettyprint no-bg\" id=\"routerLinkActive-anchor\">routerLinkActive</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: {}) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('update') }\" class=\"prettyprint no-bg\" id=\"update-anchor\">update() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('reduceList') }\" class=\"prettyprint no-bg\" id=\"reduceList-anchor\">reduceList(q: QueryList&lt;any&gt;) : boolean</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/directives/router_link_active.ts#L15-L113\">@angular/router/src/directives/router_link_active.ts (line 15)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterLinkActive-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterLinkActive-directive.html</a>\n  </p>\n</div>\n","api/router/index/routerlinkwithhref-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterLinkWithHref</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterLinkWithHref {\n  constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy)\n  \n  \n  target : string\n  commands : any[]\n  queryParams : {[k: string]: any}\n  fragment : string\n  routerLinkOptions : {preserveQueryParams: boolean, preserveFragment: boolean}\n  preserveQueryParams : boolean\n  preserveFragment : boolean\n  subscription : Subscription\n  href : string\n  urlTree : UrlTree\n  router : Router\n  route : ActivatedRoute\n  locationStrategy : LocationStrategy\n  routerLink \n  ngOnChanges(changes: {}) : any\n  ngOnDestroy() : any\n  onClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean\n  updateTargetUrlAndHref() : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>a[routerLink]</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>See <a href=\"routerlink-directive\"><code>RouterLink</code></a> for more information.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RouterLinkWithHref</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(router: Router, route: ActivatedRoute, locationStrategy: LocationStrategy)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('target') }\" class=\"prettyprint no-bg\" id=\"target-anchor\">target : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('commands') }\" class=\"prettyprint no-bg\" id=\"commands-anchor\">commands : any[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : {[k: string]: any}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerLinkOptions') }\" class=\"prettyprint no-bg\" id=\"routerLinkOptions-anchor\">routerLinkOptions : {preserveQueryParams: boolean, preserveFragment: boolean}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveQueryParams') }\" class=\"prettyprint no-bg\" id=\"preserveQueryParams-anchor\">preserveQueryParams : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('preserveFragment') }\" class=\"prettyprint no-bg\" id=\"preserveFragment-anchor\">preserveFragment : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('subscription') }\" class=\"prettyprint no-bg\" id=\"subscription-anchor\">subscription : Subscription</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('href') }\" class=\"prettyprint no-bg\" id=\"href-anchor\">href : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlTree') }\" class=\"prettyprint no-bg\" id=\"urlTree-anchor\">urlTree : UrlTree</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('router') }\" class=\"prettyprint no-bg\" id=\"router-anchor\">router : Router</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('route') }\" class=\"prettyprint no-bg\" id=\"route-anchor\">route : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('locationStrategy') }\" class=\"prettyprint no-bg\" id=\"locationStrategy-anchor\">locationStrategy : LocationStrategy</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('routerLink') }\" class=\"prettyprint no-bg\" id=\"routerLink-anchor\">routerLink</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnChanges') }\" class=\"prettyprint no-bg\" id=\"ngOnChanges-anchor\">ngOnChanges(changes: {}) : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : any</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('onClick') }\" class=\"prettyprint no-bg\" id=\"onClick-anchor\">onClick(button: number, ctrlKey: boolean, metaKey: boolean) : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('updateTargetUrlAndHref') }\" class=\"prettyprint no-bg\" id=\"updateTargetUrlAndHref-anchor\">updateTargetUrlAndHref() : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/directives/router_link.ts#L111-L182\">@angular/router/src/directives/router_link.ts (line 111)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterLinkWithHref-directive.html</a>\n  </p>\n</div>\n","api/router/index/routeroutlet-directive":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterOutlet</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Directive</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterOutlet {\n  constructor(parentOutletMap: RouterOutletMap, location: ViewContainerRef, resolver: ComponentFactoryResolver, name: string)\n  \n  \n  activated : ComponentRef&lt;any&gt;\n  outletMap : RouterOutletMap\n  activateEvents : EventEmitter\n  deactivateEvents : EventEmitter\n  parentOutletMap : RouterOutletMap\n  location : ViewContainerRef\n  resolver : ComponentFactoryResolver\n  name : string\n  ngOnDestroy() : void\n  isActivated : boolean\n  component : Object\n  activatedRoute : ActivatedRoute\n  deactivate() : void\n  activate(activatedRoute: ActivatedRoute, loadedResolver: ComponentFactoryResolver, loadedInjector: Injector, providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap) : void\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Selectors</h2>\n<p class=\"selector\"><code>router-outlet</code></p>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A router outlet is a placeholder that Angular dynamically fills based on the application's route.</p> <h2 id=\"example\">Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;router-outlet&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=\"left\"&gt;&lt;/router-outlet&gt;\n&lt;router-outlet name=\"right\"&gt;&lt;/router-outlet&gt;\n</pre>\n<p>A router outlet will emit an activate event any time a new component is being instantiated, and a deactivate event when it is being destroyed.</p> <h2 id=\"example\">Example</h2> <pre format=\"linenums\" language=\"js\" data-language=\"js\">&lt;router-outlet (activate)=\"onActivate($event)\"\n(deactivate)=\"onDeactivate($event)\"&gt;&lt;/router-outlet&gt;\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export directive RouterOutlet</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(parentOutletMap: RouterOutletMap, location: ViewContainerRef, resolver: ComponentFactoryResolver, name: string)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('activated') }\" class=\"prettyprint no-bg\" id=\"activated-anchor\">activated : ComponentRef&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('outletMap') }\" class=\"prettyprint no-bg\" id=\"outletMap-anchor\">outletMap : RouterOutletMap</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('activateEvents') }\" class=\"prettyprint no-bg\" id=\"activateEvents-anchor\">activateEvents : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('deactivateEvents') }\" class=\"prettyprint no-bg\" id=\"deactivateEvents-anchor\">deactivateEvents : EventEmitter</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parentOutletMap') }\" class=\"prettyprint no-bg\" id=\"parentOutletMap-anchor\">parentOutletMap : RouterOutletMap</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('location') }\" class=\"prettyprint no-bg\" id=\"location-anchor\">location : ViewContainerRef</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('resolver') }\" class=\"prettyprint no-bg\" id=\"resolver-anchor\">resolver : ComponentFactoryResolver</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('name') }\" class=\"prettyprint no-bg\" id=\"name-anchor\">name : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ngOnDestroy') }\" class=\"prettyprint no-bg\" id=\"ngOnDestroy-anchor\">ngOnDestroy() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('isActivated') }\" class=\"prettyprint no-bg\" id=\"isActivated-anchor\">isActivated : boolean</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('component') }\" class=\"prettyprint no-bg\" id=\"component-anchor\">component : Object</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('activatedRoute') }\" class=\"prettyprint no-bg\" id=\"activatedRoute-anchor\">activatedRoute : ActivatedRoute</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('deactivate') }\" class=\"prettyprint no-bg\" id=\"deactivate-anchor\">deactivate() : void</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('activate') }\" class=\"prettyprint no-bg\" id=\"activate-anchor\">activate(activatedRoute: ActivatedRoute, loadedResolver: ComponentFactoryResolver, loadedInjector: Injector, providers: ResolvedReflectiveProvider[], outletMap: RouterOutletMap) : void</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/directives/router_outlet.ts#L13-L114\">@angular/router/src/directives/router_outlet.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterOutlet-directive.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterOutlet-directive.html</a>\n  </p>\n</div>\n","api/router/index/urltree-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">UrlTree</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UrlTree {\n  root : UrlSegmentGroup\n  queryParams : {[key: string]: string}\n  fragment : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>A URL in the tree form.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface UrlTree</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('root') }\" class=\"prettyprint no-bg\" id=\"root-anchor\">root : UrlSegmentGroup</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : {[key: string]: string}</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/url_tree.ts#L61-L77\">@angular/router/src/url_tree.ts (line 61)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/UrlTree-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/UrlTree-interface.html</a>\n  </p>\n</div>\n","api/router/index/providerouterconfig-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">provideRouterConfig</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export provideRouterConfig(config: ExtraOptions) : any</pre>\n<p>Router configuration.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@NgModule({providers: [\n  provideRouterOptions({enableTracing: true})\n]})\nclass LazyLoadedModule {\n  // ...\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/common_router_providers.ts#L136-L156\">@angular/router/src/common_router_providers.ts (line 136)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/provideRouterConfig-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/provideRouterConfig-function.html</a>\n  </p>\n</div>\n","api/router/index/provideroutes-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">provideRoutes</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Deprecated</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Deprecation Notes</h2>\n<p><em>Not yet documented</em></p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export provideRoutes(routes: Routes) : any</pre>\n<p>Router configuration.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@NgModule({providers: [\n  provideRoutes([{path: 'home', component: Home}])\n]})\nclass LazyLoadedModule {\n  // ...\n}\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/common_router_providers.ts#L113-L136\">@angular/router/src/common_router_providers.ts (line 113)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/provideRoutes-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/provideRoutes-function.html</a>\n  </p>\n</div>\n","api/upgrade/index/upgradeadapterref-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UpgradeAdapterRef</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UpgradeAdapterRef {\n  ng1RootScope : IRootScopeService\n  ng1Injector : IInjectorService\n  ng2ModuleRef : NgModuleRef&lt;any&gt;\n  ng2Injector : Injector\n  ready(fn: (upgradeAdapterRef?: UpgradeAdapterRef) =&gt; void)\n  dispose()\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Use <code>UpgradeAdapterRef</code> to control a hybrid AngularJS v1 / Angular v2 application.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UpgradeAdapterRef</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ng1RootScope') }\" class=\"prettyprint no-bg\" id=\"ng1RootScope-anchor\">ng1RootScope : IRootScopeService</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ng1Injector') }\" class=\"prettyprint no-bg\" id=\"ng1Injector-anchor\">ng1Injector : IInjectorService</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ng2ModuleRef') }\" class=\"prettyprint no-bg\" id=\"ng2ModuleRef-anchor\">ng2ModuleRef : NgModuleRef&lt;any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ng2Injector') }\" class=\"prettyprint no-bg\" id=\"ng2Injector-anchor\">ng2Injector : Injector</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ready') }\" class=\"prettyprint no-bg\" id=\"ready-anchor\">ready(fn: (upgradeAdapterRef?: UpgradeAdapterRef) =&gt; void)</pre>\n<p>Register a callback function which is notified upon successful hybrid AngularJS v1 / Angular v2 application has been bootstrapped.</p> <p>The <code>ready</code> callback function is invoked inside the Angular v2 zone, therefore it does not require a call to <code>$apply()</code>.</p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('dispose') }\" class=\"prettyprint no-bg\" id=\"dispose-anchor\">dispose()</pre>\n<p>Dispose of running hybrid AngularJS v1 / Angular v2 application.</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/upgrade/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/upgrade/src/upgrade_adapter.ts#L617-L658\">@angular/upgrade/src/upgrade_adapter.ts (line 617)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapterRef-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapterRef-class.html</a>\n  </p>\n</div>\n","api/router/index/providerouter-function":"<h1 class=\"hero-title text-display-1 is-standard-case\">provideRouter</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Function</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export provideRouter(config: Routes, opts?: ExtraOptions) : any[]</pre>\n<p>A list of <a href=\"../../core/index/provider-class\"><code>Provider</code></a>s. To use the router, you must add this to your application.</p> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">@Component({directives: [ROUTER_DIRECTIVES]})\nclass AppCmp {\n  // ...\n}\n\nconst router = [\n  {path: 'home', component: Home}\n];\n\nbootstrap(AppCmp, [provideRouter(router, {enableTracing: true})]);\n</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_providers.ts#L13-L40\">@angular/router/src/router_providers.ts (line 13)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/provideRouter-function.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/provideRouter-function.html</a>\n  </p>\n</div>\n","api/upgrade/index/upgradeadapter-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UpgradeAdapter</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UpgradeAdapter {\n  constructor(ng2AppModule?: Type)\n  \n  \n  idPrefix : string\n  upgradedComponents : Type[]\n  providers : Array&lt;Type|Provider|any[]|any&gt;\n  ng2AppModule : Type\n  downgradeNg2Component(type: Type) : Function\n  upgradeNg1Component(name: string) : Type\n  bootstrap(element: Element, modules?: any[], config?:IAngularBootstrapConfig) : UpgradeAdapterRef\n  addProvider(provider: Type|Provider|any[]|any) : void\n  upgradeNg1Provider(name: string, options?: {asToken: any})\n  downgradeNg2Provider(token: any) : Function\n  compileNg2Components(compiler: Compiler, componentFactoryRefMap: ComponentFactoryRefMap) : Promise&lt;ComponentFactoryRefMap&gt;\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Use <code>UpgradeAdapter</code> to allow AngularJS v1 and Angular v2 to coexist in a single application.</p> <p>The <code>UpgradeAdapter</code> allows:</p> <ol> <li>creation of Angular v2 component from AngularJS v1 component directive (See [UpgradeAdapter#upgradeNg1Component()])</li> <li>creation of AngularJS v1 directive from Angular v2 component. (See [UpgradeAdapter#downgradeNg2Component()])</li> <li>Bootstrapping of a hybrid Angular application which contains both of the frameworks coexisting in a single application.</li> </ol> <h2 id=\"mental-model\">Mental Model</h2> <p>When reasoning about how a hybrid application works it is useful to have a mental model which describes what is happening and explains what is happening at the lowest level.</p> <ol> <li>There are two independent frameworks running in a single application, each framework treats the other as a black box.</li> <li>Each DOM element on the page is owned exactly by one framework. Whichever framework instantiated the element is the owner. Each framework only updates/interacts with its own DOM elements and ignores others.</li> <li>AngularJS v1 directives always execute inside AngularJS v1 framework codebase regardless of where they are instantiated.</li> <li>Angular v2 components always execute inside Angular v2 framework codebase regardless of where they are instantiated.</li> <li>An AngularJS v1 component can be upgraded to an Angular v2 component. This creates an Angular v2 directive, which bootstraps the AngularJS v1 component directive in that location.</li> <li>An Angular v2 component can be downgraded to an AngularJS v1 component directive. This creates an AngularJS v1 directive, which bootstraps the Angular v2 component in that location.</li> <li>Whenever an adapter component is instantiated the host element is owned by the framework doing the instantiation. The other framework then instantiates and owns the view for that component. This implies that component bindings will always follow the semantics of the instantiation framework. The syntax is always that of Angular v2 syntax.</li> <li>AngularJS v1 is always bootstrapped first and owns the bottom most view.</li> <li>The new application is running in Angular v2 zone, and therefore it no longer needs calls to <code>$apply()</code>.</li> </ol> <h3 id=\"example\">Example</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var adapter = new UpgradeAdapter(forwardRef(() =&gt; MyNg2Module));\nvar module = angular.module('myExample', []);\nmodule.directive('ng2Comp', adapter.downgradeNg2Component(Ng2));\n\nmodule.directive('ng1Hello', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&lt;span ng-transclude&gt;&lt;/span&gt;)'\n  };\n});\n\n\n@Component({\n  selector: 'ng2-comp',\n  inputs: ['name'],\n  template: 'ng2[&lt;ng1-hello [title]=\"name\"&gt;transclude&lt;/ng1-hello&gt;](&lt;ng-content&gt;&lt;/ng-content&gt;)',\n  directives:\n})\nclass Ng2Component {\n}\n\n@NgModule({\n  declarations: [Ng2Component, adapter.upgradeNg1Component('ng1Hello')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\n\ndocument.body.innerHTML = '&lt;ng2-comp name=\"World\"&gt;project&lt;/ng2-comp&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UpgradeAdapter</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(ng2AppModule?: Type)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('idPrefix') }\" class=\"prettyprint no-bg\" id=\"idPrefix-anchor\">idPrefix : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('upgradedComponents') }\" class=\"prettyprint no-bg\" id=\"upgradedComponents-anchor\">upgradedComponents : Type[]</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('providers') }\" class=\"prettyprint no-bg\" id=\"providers-anchor\">providers : Array&lt;Type|Provider|any[]|any&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('ng2AppModule') }\" class=\"prettyprint no-bg\" id=\"ng2AppModule-anchor\">ng2AppModule : Type</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('downgradeNg2Component') }\" class=\"prettyprint no-bg\" id=\"downgradeNg2Component-anchor\">downgradeNg2Component(type: Type) : Function</pre>\n<p>Allows Angular v2 Component to be used from AngularJS v1.</p> <p>Use <code>downgradeNg2Component</code> to create an AngularJS v1 Directive Definition Factory from Angular v2 Component. The adapter will bootstrap Angular v2 component from within the AngularJS v1 template.</p> <h2 id=\"mental-model\">Mental Model</h2> <ol> <li>The component is instantiated by being listed in AngularJS v1 template. This means that the host element is controlled by AngularJS v1, but the component's view will be controlled by Angular v2.</li> <li>Even thought the component is instantiated in AngularJS v1, it will be using Angular v2 syntax. This has to be done, this way because we must follow Angular v2 components do not declare how the attributes should be interpreted.</li> </ol> <h2 id=\"supported-features\">Supported Features</h2> <ul> <li>Bindings:<ul> <li>Attribute: <code>&lt;comp name=\"World\"&gt;</code>\n</li> <li>Interpolation: <code>&lt;comp greeting=\"Hello {{name}}!\"&gt;</code>\n</li> <li>Expression: <code>&lt;comp [name]=\"username\"&gt;</code>\n</li> <li>Event: <code>&lt;comp (close)=\"doSomething()\"&gt;</code>\n</li> </ul> </li> <li>Content projection: yes</li> </ul> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var adapter = new UpgradeAdapter(forwardRef(() =&gt; MyNg2Module));\nvar module = angular.module('myExample', []);\nmodule.directive('greet', adapter.downgradeNg2Component(Greeter));\n\n@Component({\n  selector: 'greet',\n  template: '{{salutation}} {{name}}! - &lt;ng-content&gt;&lt;/ng-content&gt;'\n})\nclass Greeter {\n  @Input() salutation: string;\n  @Input() name: string;\n}\n\n@NgModule({\n  declarations: [Greeter],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML =\n  'ng1 template: &lt;greet salutation=\"Hello\" [name]=\"world\"&gt;text&lt;/greet&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng1 template: Hello world! - text\");\n});\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('upgradeNg1Component') }\" class=\"prettyprint no-bg\" id=\"upgradeNg1Component-anchor\">upgradeNg1Component(name: string) : Type</pre>\n<p>Allows AngularJS v1 Component to be used from Angular v2.</p> <p>Use <code>upgradeNg1Component</code> to create an Angular v2 component from AngularJS v1 Component directive. The adapter will bootstrap AngularJS v1 component from within the Angular v2 template.</p> <h2 id=\"mental-model\">Mental Model</h2> <ol> <li>The component is instantiated by being listed in Angular v2 template. This means that the host element is controlled by Angular v2, but the component's view will be controlled by AngularJS v1.</li> </ol> <h2 id=\"supported-features\">Supported Features</h2> <ul> <li>Bindings:<ul> <li>Attribute: <code>&lt;comp name=\"World\"&gt;</code>\n</li> <li>Interpolation: <code>&lt;comp greeting=\"Hello {{name}}!\"&gt;</code>\n</li> <li>Expression: <code>&lt;comp [name]=\"username\"&gt;</code>\n</li> <li>Event: <code>&lt;comp (close)=\"doSomething()\"&gt;</code>\n</li> </ul> </li> <li>Transclusion: yes</li> <li>Only some of the features of <a href=\"https://docs.angularjs.org/api/ng/service/%24compile\">Directive Definition Object</a> are supported:<ul> <li>\n<code>compile</code>: not supported because the host element is owned by Angular v2, which does not allow modifying DOM structure during compilation.</li> <li>\n<code>controller</code>: supported. (NOTE: injection of <code>$attrs</code> and <code>$transclude</code> is not supported.)</li> <li>`controllerAs': supported.</li> <li>`bindToController': supported.</li> <li>`link': supported. (NOTE: only pre-link function is supported.)</li> <li>`name': supported.</li> <li>`priority': ignored.</li> <li>`replace': not supported.</li> <li>\n<code>require</code>: supported.</li> <li>\n<code>restrict</code>: must be set to 'E'.</li> <li>\n<code>scope</code>: supported.</li> <li>\n<code>template</code>: supported.</li> <li>\n<code>templateUrl</code>: supported.</li> <li>\n<code>terminal</code>: ignored.</li> <li>\n<code>transclude</code>: supported.</li> </ul> </li> </ul> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var adapter = new UpgradeAdapter(forwardRef(() =&gt; MyNg2Module));\nvar module = angular.module('myExample', []);\n\nmodule.directive('greet', function() {\n  return {\n    scope: {salutation: '=', name: '=' },\n    template: '{{salutation}} {{name}}! - &lt;span ng-transclude&gt;&lt;/span&gt;'\n  };\n});\n\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2));\n\n@Component({\n  selector: 'ng2',\n  template: 'ng2 template: &lt;greet salutation=\"Hello\" [name]=\"world\"&gt;text&lt;/greet&gt;'\n})\nclass Ng2 {\n}\n\n@NgModule({\n  declarations: [Ng2, adapter.upgradeNg1Component('greet')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&lt;ng2&gt;&lt;/ng2&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\"ng2 template: Hello world! - text\");\n});\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('bootstrap') }\" class=\"prettyprint no-bg\" id=\"bootstrap-anchor\">bootstrap(element: Element, modules?: any[], config?:IAngularBootstrapConfig) : UpgradeAdapterRef</pre>\n<p>Bootstrap a hybrid AngularJS v1 / Angular v2 application.</p> <p>This <code>bootstrap</code> method is a direct replacement (takes same arguments) for AngularJS v1 <a href=\"https://docs.angularjs.org/api/ng/function/angular.bootstrap\"><code>bootstrap</code></a> method. Unlike AngularJS v1, this bootstrap is asynchronous.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">var adapter = new UpgradeAdapter();\nvar module = angular.module('myExample', []);\nmodule.directive('ng2', adapter.downgradeNg2Component(Ng2));\n\nmodule.directive('ng1', function() {\n  return {\n     scope: { title: '=' },\n     template: 'ng1[Hello {{title}}!](&lt;span ng-transclude&gt;&lt;/span&gt;)'\n  };\n});\n\n\n@Component({\n  selector: 'ng2',\n  inputs: ['name'],\n  template: 'ng2[&lt;ng1 [title]=\"name\"&gt;transclude&lt;/ng1&gt;](&lt;ng-content&gt;&lt;/ng-content&gt;)'\n})\nclass Ng2 {\n}\n\n@NgModule({\n  declarations: [Ng2, adapter.upgradeNg1Component('ng1')],\n  imports: [BrowserModule]\n})\nclass MyNg2Module {}\n\ndocument.body.innerHTML = '&lt;ng2 name=\"World\"&gt;project&lt;/ng2&gt;';\n\nadapter.bootstrap(document.body, ['myExample']).ready(function() {\n  expect(document.body.textContent).toEqual(\n      \"ng2[ng1[Hello World!](transclude)](project)\");\n});\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('addProvider') }\" class=\"prettyprint no-bg\" id=\"addProvider-anchor\">addProvider(provider: Type|Provider|any[]|any) : void</pre>\n<p>Adds a provider to the top level environment of a hybrid AngularJS v1 / Angular v2 application.</p> <p>In hybrid AngularJS v1 / Angular v2 application, there is no one root Angular v2 component, for this reason we provide an application global way of registering providers which is consistent with single global injection in AngularJS v1.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Greeter {\n  greet(name) {\n    alert('Hello ' + name + '!');\n  }\n}\n\n@Component({\n  selector: 'app',\n  template: ''\n})\nclass App {\n  constructor(greeter: Greeter) {\n    this.greeter('World');\n  }\n}\n\nvar adapter = new UpgradeAdapter();\nadapter.addProvider(Greeter);\n\nvar module = angular.module('myExample', []);\nmodule.directive('app', adapter.downgradeNg2Component(App));\n\ndocument.body.innerHTML = '&lt;app&gt;&lt;/app&gt;'\nadapter.bootstrap(document.body, ['myExample']);\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('upgradeNg1Provider') }\" class=\"prettyprint no-bg\" id=\"upgradeNg1Provider-anchor\">upgradeNg1Provider(name: string, options?: {asToken: any})</pre>\n<p>Allows AngularJS v1 service to be accessible from Angular v2.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Login { ... }\nclass Server { ... }\n\n@Injectable()\nclass Example {\n  constructor(@Inject('server') server, login: Login) {\n    ...\n  }\n}\n\nvar module = angular.module('myExample', []);\nmodule.service('server', Server);\nmodule.service('login', Login);\n\nvar adapter = new UpgradeAdapter();\nadapter.upgradeNg1Provider('server');\nadapter.upgradeNg1Provider('login', {asToken: Login});\nadapter.addProvider(Example);\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) =&gt; {\n  var example: Example = ref.ng2Injector.get(Example);\n});\n\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('downgradeNg2Provider') }\" class=\"prettyprint no-bg\" id=\"downgradeNg2Provider-anchor\">downgradeNg2Provider(token: any) : Function</pre>\n<p>Allows Angular v2 service to be accessible from AngularJS v1.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class Example {\n}\n\nvar adapter = new UpgradeAdapter();\nadapter.addProvider(Example);\n\nvar module = angular.module('myExample', []);\nmodule.factory('example', adapter.downgradeNg2Provider(Example));\n\nadapter.bootstrap(document.body, ['myExample']).ready((ref) =&gt; {\n  var example: Example = ref.ng1Injector.get('example');\n});\n\n</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('compileNg2Components') }\" class=\"prettyprint no-bg\" id=\"compileNg2Components-anchor\">compileNg2Components(compiler: Compiler, componentFactoryRefMap: ComponentFactoryRefMap) : Promise&lt;ComponentFactoryRefMap&gt;</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/upgrade/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/upgrade/src/upgrade_adapter.ts#L20-L579\">@angular/upgrade/src/upgrade_adapter.ts (line 20)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapter-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/upgrade/index/UpgradeAdapter-class.html</a>\n  </p>\n</div>\n","api/common/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"mocklocationstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">MockLocationStrategy</a></li>\n<li><a href=\"spylocation-class\" md-button=\"md-button\" class=\"hover-card is-button\">SpyLocation</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/testing.ts#L1-L10\">@angular/common/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/testing/</a>\n  </p>\n</div>\n","api/router/index/routerstate-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterState</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterState {\n  snapshot : RouterStateSnapshot\n  queryParams : Observable&lt;Params&gt;\n  fragment : Observable&lt;string&gt;\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The state of the router.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyComponent {\n  constructor(router: Router) {\n    const state = router.routerState;\n    const id: Observable&lt;string&gt; = state.firstChild(state.root).params.map(p =&gt; p.id);\n    const isDebug: Observable&lt;string&gt; = state.queryParams.map(q =&gt; q.debug);\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface RouterState</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('snapshot') }\" class=\"prettyprint no-bg\" id=\"snapshot-anchor\">snapshot : RouterStateSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : Observable&lt;Params&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : Observable&lt;string&gt;</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_state.ts#L17-L57\">@angular/router/src/router_state.ts (line 17)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterState-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterState-interface.html</a>\n  </p>\n</div>\n","api/router/index/routerstatesnapshot-interface":"<h1 class=\"hero-title text-display-1 is-standard-case\">RouterStateSnapshot</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Interface</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RouterStateSnapshot {\n  url : string\n  queryParams : Params\n  fragment : string\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>The state of the router at a particular moment in time.</p> <h3 id=\"usage\">Usage</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">class MyComponent {\n  constructor(router: Router) {\n    const snapshot = router.routerState.snapshot;\n  }\n}\n</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export interface RouterStateSnapshot</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('queryParams') }\" class=\"prettyprint no-bg\" id=\"queryParams-anchor\">queryParams : Params</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('fragment') }\" class=\"prettyprint no-bg\" id=\"fragment-anchor\">fragment : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router_state.ts#L227-L264\">@angular/router/src/router_state.ts (line 227)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RouterStateSnapshot-interface.html</a>\n  </p>\n</div>\n","api/router/index/routes-type-alias":"<h1 class=\"hero-title text-display-1 is-standard-case\">Routes</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Type-alias</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class Routes {\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p><code>Routes</code> is an array of route configurations. Each one has the following properties:</p> <ul> <li>\n<em><code>path</code></em> is a string that uses the route matcher DSL.</li> <li>\n<code>pathMatch</code> is a string that specifies the matching strategy.</li> <li>\n<code>component</code> is a component type.</li> <li>\n<code>redirectTo</code> is the url fragment which will replace the current matched segment.</li> <li>\n<code>outlet</code> is the name of the outlet the component should be placed into.</li> <li>\n<code>canActivate</code> is an array of DI tokens used to look up CanActivate handlers. See <a href=\"canactivate-interface\"><code>CanActivate</code></a> for more info.</li> <li>\n<code>canActivateChild</code> is an array of DI tokens used to look up CanActivateChild handlers. See <a href=\"canactivatechild-interface\"><code>CanActivateChild</code></a> for more info.</li> <li>\n<code>canDeactivate</code> is an array of DI tokens used to look up CanDeactivate handlers. See <a href=\"candeactivate-interface\"><code>CanDeactivate</code></a> for more info.</li> <li>\n<code>data</code> is additional data provided to the component via <code>ActivatedRoute</code>.</li> <li>\n<code>resolve</code> is a map of DI tokens used to look up data resolvers. See <a href=\"resolve-interface\"><code>Resolve</code></a> for more info.</li> <li>\n<code>children</code> is an array of child route definitions.</li> </ul> <h3 id=\"simple-configuration\">Simple Configuration</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11/user/bob</code>, the router will create the team component with the user component in it.</p> <h3 id=\"multiple-outlets\">Multiple Outlets</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team\n},\n{\n  path: 'chat/:user',\n  component: Chat\n  outlet: aux\n}]\n</pre>\n<p>When navigating to <code>/team/11(aux:chat/jim)</code>, the router will create the team component next to the chat component. The chat component will be placed into the aux outlet.</p> <h3 id=\"wild-cards\">Wild Cards</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '**',\n  component: Sink\n}]\n</pre>\n<p>Regardless of where you navigate to, the router will instantiate the sink component.</p> <h3 id=\"redirects\">Redirects</h3> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: 'legacy/user/:name',\n      redirectTo: 'user/:name'\n    },\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to '/team/11/legacy/user/jim', the router will change the url to '/team/11/user/jim', and then will instantiate the team component with the user component in it.</p> <p>If the <code>redirectTo</code> value starts with a '/', then it is an absolute redirect. E.g., if in the example above we change the <code>redirectTo</code> to <code>/user/:name</code>, the result url will be '/user/jim'.</p> <h3 id=\"empty-path\">Empty Path</h3> <p>Empty-path route configurations can be used to instantiate components that do not \"consume\" any url segments. Let's look at the following configuration:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: '',\n      component: AllUsers\n    },\n    {\n      path: 'user/:name',\n      component: User\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11</code>, the router will instantiate the AllUsers component.</p> <p>Empty-path routes can have children.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: 'team/:id',\n  component: Team,\n  children: [\n    {\n      path: '',\n      component: WrapperCmp,\n      children: [\n        {\n          path: 'user/:name',\n          component: User\n        }\n      ]\n    }\n  ]\n}]\n</pre>\n<p>When navigating to <code>/team/11/user/jim</code>, the router will instantiate the wrapper component with the user component in it.</p> <h3 id=\"matching-strategy\">Matching Strategy</h3> <p>By default the router will look at what is left in the url, and check if it starts with the specified path (e.g., <code>/team/11/user</code> starts with <code>team/:id</code>).</p> <p>We can change the matching strategy to make sure that the path covers the whole unconsumed url, which is akin to <code>unconsumedUrl === path</code> or <code>$</code> regular expressions.</p> <p>This is particularly important when redirecting empty-path routes.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '',\n  pathMatch: 'prefix', //default\n  redirectTo: 'main'\n},\n{\n  path: 'main',\n  component: Main\n}]\n</pre>\n<p>Since an empty path is a prefix of any url, even when navigating to '/main', the router will still apply the redirect.</p> <p>If <code>pathMatch: full</code> is provided, the router will apply the redirect if and only if navigating to '/'.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n  path: '',\n  pathMatch: 'full',\n  redirectTo: 'main'\n},\n{\n  path: 'main',\n  component: Main\n}]\n</pre>\n<h3 id=\"componentless-routes\">Componentless Routes</h3> <p>It is useful at times to have the ability to share parameters between sibling components.</p> <p>Say we have two components--ChildCmp and AuxCmp--that we want to put next to each other and both of them require some id parameter.</p> <p>One way to do that would be to have a bogus parent component, so both the siblings can get the id parameter from it. This is not ideal. Instead, you can use a componentless route.</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n   path: 'parent/:id',\n   children: [\n     { path: 'a', component: MainChild },\n     { path: 'b', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</pre>\n<p>So when navigating to <code>parent/10/(a//aux:b)</code>, the route will instantiate the main child and aux child components next to each other. In this example, the application component has to have the primary and aux outlets defined.</p> <p>The router will also merge the <code>params</code>, <code>data</code>, and <code>resolve</code> of the componentless parent into the <code>params</code>, <code>data</code>, and <code>resolve</code> of the children.</p> <p>This is especially useful when child components are defined as follows:</p> <pre format=\"linenums\" language=\"js\" data-language=\"js\">[{\n   path: 'parent/:id',\n   children: [\n     { path: '', component: MainChild },\n     { path: '', component: AuxChild, outlet: 'aux' }\n   ]\n}]\n</pre>\n<p>With this configuration in place, navigating to '/parent/10' will create the main child and aux components.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export type-alias Routes</pre>\n</div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/config.ts#L233-L459\">@angular/router/src/config.ts (line 233)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/Routes-type-alias.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/Routes-type-alias.html</a>\n  </p>\n</div>\n","api/router/index/urlserializer-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">UrlSerializer</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Experimental</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class UrlSerializer {\n  parse(url: string) : UrlTree\n  serialize(tree: UrlTree) : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>Defines a way to serialize/deserialize a url tree.</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class UrlSerializer</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('parse') }\" class=\"prettyprint no-bg\" id=\"parse-anchor\">parse(url: string) : UrlTree</pre>\n<p>Parse a url into a <a href=\"urltree-interface\"><code>UrlTree</code></a></p> \n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('serialize') }\" class=\"prettyprint no-bg\" id=\"serialize-anchor\">serialize(tree: UrlTree) : string</pre>\n<p>Converts a <a href=\"urltree-interface\"><code>UrlTree</code></a> into a url</p> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/url_tree.ts#L151-L169\">@angular/router/src/url_tree.ts (line 151)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/UrlSerializer-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/UrlSerializer-class.html</a>\n  </p>\n</div>\n","api/platform-browser/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"browsertestingmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">BrowserTestingModule</a></li>\n<li><a href=\"platformbrowsertesting-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformBrowserTesting</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/testing.ts#L1-L10\">@angular/platform-browser/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/testing/</a>\n  </p>\n</div>\n","api/core/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"componentfixture-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentFixture</a></li>\n<li><a href=\"componentfixtureautodetect-var\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentFixtureAutoDetect</a></li>\n<li><a href=\"componentfixturenongzone-var\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentFixtureNoNgZone</a></li>\n<li><a href=\"injectsetupwrapper-class\" md-button=\"md-button\" class=\"hover-card is-button\">InjectSetupWrapper</a></li>\n<li><a href=\"metadataoverride-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">MetadataOverride</a></li>\n<li><a href=\"testbed-class\" md-button=\"md-button\" class=\"hover-card is-button\">TestBed</a></li>\n<li><a href=\"testcomponentbuilder-class\" md-button=\"md-button\" class=\"hover-card is-button\">TestComponentBuilder</a></li>\n<li><a href=\"testcomponentrenderer-class\" md-button=\"md-button\" class=\"hover-card is-button\">TestComponentRenderer</a></li>\n<li><a href=\"testmodulemetadata-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">TestModuleMetadata</a></li>\n<li><a href=\"___core_private_testing__-var\" md-button=\"md-button\" class=\"hover-card is-button\">___core_private_testing__</a></li>\n<li><a href=\"addproviders-function\" md-button=\"md-button\" class=\"hover-card is-button\">addProviders</a></li>\n<li><a href=\"async-function\" md-button=\"md-button\" class=\"hover-card is-button\">async</a></li>\n<li><a href=\"discardperiodictasks-function\" md-button=\"md-button\" class=\"hover-card is-button\">discardPeriodicTasks</a></li>\n<li><a href=\"fakeasync-function\" md-button=\"md-button\" class=\"hover-card is-button\">fakeAsync</a></li>\n<li><a href=\"flushmicrotasks-function\" md-button=\"md-button\" class=\"hover-card is-button\">flushMicrotasks</a></li>\n<li><a href=\"gettestbed-function\" md-button=\"md-button\" class=\"hover-card is-button\">getTestBed</a></li>\n<li><a href=\"inject-function\" md-button=\"md-button\" class=\"hover-card is-button\">inject</a></li>\n<li><a href=\"resetfakeasynczone-function\" md-button=\"md-button\" class=\"hover-card is-button\">resetFakeAsyncZone</a></li>\n<li><a href=\"tick-function\" md-button=\"md-button\" class=\"hover-card is-button\">tick</a></li>\n<li><a href=\"withmodule-function\" md-button=\"md-button\" class=\"hover-card is-button\">withModule</a></li>\n<li><a href=\"withproviders-function\" md-button=\"md-button\" class=\"hover-card is-button\">withProviders</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/testing.ts#L1-L18\">@angular/core/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/testing/</a>\n  </p>\n</div>\n","api/core/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<div class=\"banner\"><p class=\"text-body\">Entry point from which you should import all public core APIs.</p></div>\n<ul>\n<li><a href=\"analyze_for_entry_components-let\" md-button=\"md-button\" class=\"hover-card is-button\">ANALYZE_FOR_ENTRY_COMPONENTS</a></li>\n<li><a href=\"application_common_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">APPLICATION_COMMON_PROVIDERS</a></li>\n<li><a href=\"app_bootstrap_listener-let\" md-button=\"md-button\" class=\"hover-card is-button\">APP_BOOTSTRAP_LISTENER</a></li>\n<li><a href=\"app_id-let\" md-button=\"md-button\" class=\"hover-card is-button\">APP_ID</a></li>\n<li><a href=\"app_initializer-let\" md-button=\"md-button\" class=\"hover-card is-button\">APP_INITIALIZER</a></li>\n<li><a href=\"auto_style-let\" md-button=\"md-button\" class=\"hover-card is-button\">AUTO_STYLE</a></li>\n<li><a href=\"abstractprovidererror-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractProviderError</a></li>\n<li><a href=\"aftercontentchecked-class\" md-button=\"md-button\" class=\"hover-card is-button\">AfterContentChecked</a></li>\n<li><a href=\"aftercontentinit-class\" md-button=\"md-button\" class=\"hover-card is-button\">AfterContentInit</a></li>\n<li><a href=\"afterviewchecked-class\" md-button=\"md-button\" class=\"hover-card is-button\">AfterViewChecked</a></li>\n<li><a href=\"afterviewinit-class\" md-button=\"md-button\" class=\"hover-card is-button\">AfterViewInit</a></li>\n<li><a href=\"animationanimatemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationAnimateMetadata</a></li>\n<li><a href=\"animationentrymetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationEntryMetadata</a></li>\n<li><a href=\"animationgroupmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationGroupMetadata</a></li>\n<li><a href=\"animationkeyframessequencemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationKeyframesSequenceMetadata</a></li>\n<li><a href=\"animationmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationMetadata</a></li>\n<li><a href=\"animationplayer-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationPlayer</a></li>\n<li><a href=\"animationsequencemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationSequenceMetadata</a></li>\n<li><a href=\"animationstatedeclarationmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationStateDeclarationMetadata</a></li>\n<li><a href=\"animationstatemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationStateMetadata</a></li>\n<li><a href=\"animationstatetransitionmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationStateTransitionMetadata</a></li>\n<li><a href=\"animationstylemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationStyleMetadata</a></li>\n<li><a href=\"animationwithstepsmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationWithStepsMetadata</a></li>\n<li><a href=\"applicationinitstatus-class\" md-button=\"md-button\" class=\"hover-card is-button\">ApplicationInitStatus</a></li>\n<li><a href=\"applicationmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">ApplicationModule</a></li>\n<li><a href=\"applicationref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ApplicationRef</a></li>\n<li><a href=\"attribute-var\" md-button=\"md-button\" class=\"hover-card is-button\">Attribute</a></li>\n<li><a href=\"attributemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">AttributeMetadata</a></li>\n<li><a href=\"attributemetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">AttributeMetadataFactory</a></li>\n<li><a href=\"baseexception-class\" md-button=\"md-button\" class=\"hover-card is-button\">BaseException</a></li>\n<li><a href=\"binding-class\" md-button=\"md-button\" class=\"hover-card is-button\">Binding</a></li>\n<li><a href=\"compiler_options-let\" md-button=\"md-button\" class=\"hover-card is-button\">COMPILER_OPTIONS</a></li>\n<li><a href=\"custom_elements_schema-let\" md-button=\"md-button\" class=\"hover-card is-button\">CUSTOM_ELEMENTS_SCHEMA</a></li>\n<li><a href=\"changedetectionstrategy-enum\" md-button=\"md-button\" class=\"hover-card is-button\">ChangeDetectionStrategy</a></li>\n<li><a href=\"changedetectorref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ChangeDetectorRef</a></li>\n<li><a href=\"class-function\" md-button=\"md-button\" class=\"hover-card is-button\">Class</a></li>\n<li><a href=\"classdefinition-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ClassDefinition</a></li>\n<li><a href=\"collectionchangerecord-class\" md-button=\"md-button\" class=\"hover-card is-button\">CollectionChangeRecord</a></li>\n<li><a href=\"compiler-class\" md-button=\"md-button\" class=\"hover-card is-button\">Compiler</a></li>\n<li><a href=\"compilerfactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">CompilerFactory</a></li>\n<li><a href=\"compileroptions-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">CompilerOptions</a></li>\n<li><a href=\"component-decorator\" md-button=\"md-button\" class=\"hover-card is-button\">Component</a></li>\n<li><a href=\"componentdecorator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentDecorator</a></li>\n<li><a href=\"componentfactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentFactory</a></li>\n<li><a href=\"componentfactoryresolver-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentFactoryResolver</a></li>\n<li><a href=\"componentmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentMetadata</a></li>\n<li><a href=\"componentmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentMetadataFactory</a></li>\n<li><a href=\"componentmetadatatype-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentMetadataType</a></li>\n<li><a href=\"componentref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentRef</a></li>\n<li><a href=\"componentresolver-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentResolver</a></li>\n<li><a href=\"componentstillloadingerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">ComponentStillLoadingError</a></li>\n<li><a href=\"contentchild-var\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChild</a></li>\n<li><a href=\"contentchildmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChildMetadata</a></li>\n<li><a href=\"contentchildmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChildMetadataFactory</a></li>\n<li><a href=\"contentchildren-var\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChildren</a></li>\n<li><a href=\"contentchildrenmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChildrenMetadata</a></li>\n<li><a href=\"contentchildrenmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ContentChildrenMetadataFactory</a></li>\n<li><a href=\"cyclicdependencyerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">CyclicDependencyError</a></li>\n<li><a href=\"debugelement-class\" md-button=\"md-button\" class=\"hover-card is-button\">DebugElement</a></li>\n<li><a href=\"debugnode-class\" md-button=\"md-button\" class=\"hover-card is-button\">DebugNode</a></li>\n<li><a href=\"defaultiterablediffer-class\" md-button=\"md-button\" class=\"hover-card is-button\">DefaultIterableDiffer</a></li>\n<li><a href=\"directive-decorator\" md-button=\"md-button\" class=\"hover-card is-button\">Directive</a></li>\n<li><a href=\"directivedecorator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">DirectiveDecorator</a></li>\n<li><a href=\"directivemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">DirectiveMetadata</a></li>\n<li><a href=\"directivemetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">DirectiveMetadataFactory</a></li>\n<li><a href=\"directivemetadatatype-interface\" md-button=\"md-button\" class=\"hover-card is-button\">DirectiveMetadataType</a></li>\n<li><a href=\"docheck-class\" md-button=\"md-button\" class=\"hover-card is-button\">DoCheck</a></li>\n<li><a href=\"dynamiccomponentloader-class\" md-button=\"md-button\" class=\"hover-card is-button\">DynamicComponentLoader</a></li>\n<li><a href=\"elementref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ElementRef</a></li>\n<li><a href=\"embeddedviewref-class\" md-button=\"md-button\" class=\"hover-card is-button\">EmbeddedViewRef</a></li>\n<li><a href=\"eventemitter-class\" md-button=\"md-button\" class=\"hover-card is-button\">EventEmitter</a></li>\n<li><a href=\"exceptionhandler-class\" md-button=\"md-button\" class=\"hover-card is-button\">ExceptionHandler</a></li>\n<li><a href=\"expressionchangedafterithasbeencheckedexception-class\" md-button=\"md-button\" class=\"hover-card is-button\">ExpressionChangedAfterItHasBeenCheckedException</a></li>\n<li><a href=\"forwardreffn-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ForwardRefFn</a></li>\n<li><a href=\"gettestability-interface\" md-button=\"md-button\" class=\"hover-card is-button\">GetTestability</a></li>\n<li><a href=\"host-var\" md-button=\"md-button\" class=\"hover-card is-button\">Host</a></li>\n<li><a href=\"hostbinding-var\" md-button=\"md-button\" class=\"hover-card is-button\">HostBinding</a></li>\n<li><a href=\"hostbindingmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">HostBindingMetadata</a></li>\n<li><a href=\"hostbindingmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">HostBindingMetadataFactory</a></li>\n<li><a href=\"hostlistener-var\" md-button=\"md-button\" class=\"hover-card is-button\">HostListener</a></li>\n<li><a href=\"hostlistenermetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">HostListenerMetadata</a></li>\n<li><a href=\"hostlistenermetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">HostListenerMetadataFactory</a></li>\n<li><a href=\"hostmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">HostMetadata</a></li>\n<li><a href=\"hostmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">HostMetadataFactory</a></li>\n<li><a href=\"inject-var\" md-button=\"md-button\" class=\"hover-card is-button\">Inject</a></li>\n<li><a href=\"injectmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">InjectMetadata</a></li>\n<li><a href=\"injectmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">InjectMetadataFactory</a></li>\n<li><a href=\"injectable-decorator\" md-button=\"md-button\" class=\"hover-card is-button\">Injectable</a></li>\n<li><a href=\"injectablemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">InjectableMetadata</a></li>\n<li><a href=\"injectablemetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">InjectableMetadataFactory</a></li>\n<li><a href=\"injector-class\" md-button=\"md-button\" class=\"hover-card is-button\">Injector</a></li>\n<li><a href=\"input-var\" md-button=\"md-button\" class=\"hover-card is-button\">Input</a></li>\n<li><a href=\"inputmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">InputMetadata</a></li>\n<li><a href=\"inputmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">InputMetadataFactory</a></li>\n<li><a href=\"instantiationerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">InstantiationError</a></li>\n<li><a href=\"invalidprovidererror-class\" md-button=\"md-button\" class=\"hover-card is-button\">InvalidProviderError</a></li>\n<li><a href=\"iterablediffer-interface\" md-button=\"md-button\" class=\"hover-card is-button\">IterableDiffer</a></li>\n<li><a href=\"iterabledifferfactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">IterableDifferFactory</a></li>\n<li><a href=\"iterablediffers-class\" md-button=\"md-button\" class=\"hover-card is-button\">IterableDiffers</a></li>\n<li><a href=\"keyvaluechangerecord-class\" md-button=\"md-button\" class=\"hover-card is-button\">KeyValueChangeRecord</a></li>\n<li><a href=\"keyvaluediffer-interface\" md-button=\"md-button\" class=\"hover-card is-button\">KeyValueDiffer</a></li>\n<li><a href=\"keyvaluedifferfactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">KeyValueDifferFactory</a></li>\n<li><a href=\"keyvaluediffers-class\" md-button=\"md-button\" class=\"hover-card is-button\">KeyValueDiffers</a></li>\n<li><a href=\"modulewithcomponentfactories-class\" md-button=\"md-button\" class=\"hover-card is-button\">ModuleWithComponentFactories</a></li>\n<li><a href=\"modulewithproviders-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ModuleWithProviders</a></li>\n<li><a href=\"ngmodule-decorator\" md-button=\"md-button\" class=\"hover-card is-button\">NgModule</a></li>\n<li><a href=\"ngmoduledecorator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleDecorator</a></li>\n<li><a href=\"ngmodulefactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleFactory</a></li>\n<li><a href=\"ngmodulefactoryloader-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleFactoryLoader</a></li>\n<li><a href=\"ngmodulemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleMetadata</a></li>\n<li><a href=\"ngmodulemetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleMetadataFactory</a></li>\n<li><a href=\"ngmodulemetadatatype-interface\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleMetadataType</a></li>\n<li><a href=\"ngmoduleref-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgModuleRef</a></li>\n<li><a href=\"ngzone-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgZone</a></li>\n<li><a href=\"ngzoneerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgZoneError</a></li>\n<li><a href=\"noannotationerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">NoAnnotationError</a></li>\n<li><a href=\"nocomponentfactoryerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">NoComponentFactoryError</a></li>\n<li><a href=\"noprovidererror-class\" md-button=\"md-button\" class=\"hover-card is-button\">NoProviderError</a></li>\n<li><a href=\"onchanges-class\" md-button=\"md-button\" class=\"hover-card is-button\">OnChanges</a></li>\n<li><a href=\"ondestroy-class\" md-button=\"md-button\" class=\"hover-card is-button\">OnDestroy</a></li>\n<li><a href=\"oninit-class\" md-button=\"md-button\" class=\"hover-card is-button\">OnInit</a></li>\n<li><a href=\"opaquetoken-class\" md-button=\"md-button\" class=\"hover-card is-button\">OpaqueToken</a></li>\n<li><a href=\"optional-var\" md-button=\"md-button\" class=\"hover-card is-button\">Optional</a></li>\n<li><a href=\"optionalmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">OptionalMetadata</a></li>\n<li><a href=\"optionalmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">OptionalMetadataFactory</a></li>\n<li><a href=\"outofboundserror-class\" md-button=\"md-button\" class=\"hover-card is-button\">OutOfBoundsError</a></li>\n<li><a href=\"output-var\" md-button=\"md-button\" class=\"hover-card is-button\">Output</a></li>\n<li><a href=\"outputmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">OutputMetadata</a></li>\n<li><a href=\"outputmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">OutputMetadataFactory</a></li>\n<li><a href=\"package_root_url-let\" md-button=\"md-button\" class=\"hover-card is-button\">PACKAGE_ROOT_URL</a></li>\n<li><a href=\"platform_common_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">PLATFORM_COMMON_PROVIDERS</a></li>\n<li><a href=\"platform_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">PLATFORM_DIRECTIVES</a></li>\n<li><a href=\"platform_initializer-let\" md-button=\"md-button\" class=\"hover-card is-button\">PLATFORM_INITIALIZER</a></li>\n<li><a href=\"platform_pipes-let\" md-button=\"md-button\" class=\"hover-card is-button\">PLATFORM_PIPES</a></li>\n<li><a href=\"pipe-decorator\" md-button=\"md-button\" class=\"hover-card is-button\">Pipe</a></li>\n<li><a href=\"pipemetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">PipeMetadata</a></li>\n<li><a href=\"pipemetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">PipeMetadataFactory</a></li>\n<li><a href=\"pipemetadatatype-interface\" md-button=\"md-button\" class=\"hover-card is-button\">PipeMetadataType</a></li>\n<li><a href=\"pipetransform-interface\" md-button=\"md-button\" class=\"hover-card is-button\">PipeTransform</a></li>\n<li><a href=\"platformref-class\" md-button=\"md-button\" class=\"hover-card is-button\">PlatformRef</a></li>\n<li><a href=\"provider-class\" md-button=\"md-button\" class=\"hover-card is-button\">Provider</a></li>\n<li><a href=\"providerbuilder-class\" md-button=\"md-button\" class=\"hover-card is-button\">ProviderBuilder</a></li>\n<li><a href=\"query-var\" md-button=\"md-button\" class=\"hover-card is-button\">Query</a></li>\n<li><a href=\"querylist-class\" md-button=\"md-button\" class=\"hover-card is-button\">QueryList</a></li>\n<li><a href=\"querymetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">QueryMetadata</a></li>\n<li><a href=\"querymetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">QueryMetadataFactory</a></li>\n<li><a href=\"reflectiveinjector-class\" md-button=\"md-button\" class=\"hover-card is-button\">ReflectiveInjector</a></li>\n<li><a href=\"reflectivekey-class\" md-button=\"md-button\" class=\"hover-card is-button\">ReflectiveKey</a></li>\n<li><a href=\"rendercomponenttype-class\" md-button=\"md-button\" class=\"hover-card is-button\">RenderComponentType</a></li>\n<li><a href=\"renderer-class\" md-button=\"md-button\" class=\"hover-card is-button\">Renderer</a></li>\n<li><a href=\"resolvedreflectivebinding-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ResolvedReflectiveBinding</a></li>\n<li><a href=\"resolvedreflectivefactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">ResolvedReflectiveFactory</a></li>\n<li><a href=\"resolvedreflectiveprovider-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ResolvedReflectiveProvider</a></li>\n<li><a href=\"rootrenderer-class\" md-button=\"md-button\" class=\"hover-card is-button\">RootRenderer</a></li>\n<li><a href=\"sanitizationservice-class\" md-button=\"md-button\" class=\"hover-card is-button\">SanitizationService</a></li>\n<li><a href=\"schemametadata-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SchemaMetadata</a></li>\n<li><a href=\"securitycontext-enum\" md-button=\"md-button\" class=\"hover-card is-button\">SecurityContext</a></li>\n<li><a href=\"self-var\" md-button=\"md-button\" class=\"hover-card is-button\">Self</a></li>\n<li><a href=\"selfmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">SelfMetadata</a></li>\n<li><a href=\"selfmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SelfMetadataFactory</a></li>\n<li><a href=\"simplechange-class\" md-button=\"md-button\" class=\"hover-card is-button\">SimpleChange</a></li>\n<li><a href=\"simplechanges-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SimpleChanges</a></li>\n<li><a href=\"skipself-var\" md-button=\"md-button\" class=\"hover-card is-button\">SkipSelf</a></li>\n<li><a href=\"skipselfmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">SkipSelfMetadata</a></li>\n<li><a href=\"skipselfmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SkipSelfMetadataFactory</a></li>\n<li><a href=\"systemjscmpfactoryresolver-class\" md-button=\"md-button\" class=\"hover-card is-button\">SystemJsCmpFactoryResolver</a></li>\n<li><a href=\"systemjscomponentresolver-class\" md-button=\"md-button\" class=\"hover-card is-button\">SystemJsComponentResolver</a></li>\n<li><a href=\"systemjsngmoduleloader-class\" md-button=\"md-button\" class=\"hover-card is-button\">SystemJsNgModuleLoader</a></li>\n<li><a href=\"templateref-class\" md-button=\"md-button\" class=\"hover-card is-button\">TemplateRef</a></li>\n<li><a href=\"testability-class\" md-button=\"md-button\" class=\"hover-card is-button\">Testability</a></li>\n<li><a href=\"testabilityregistry-class\" md-button=\"md-button\" class=\"hover-card is-button\">TestabilityRegistry</a></li>\n<li><a href=\"trackbyfn-interface\" md-button=\"md-button\" class=\"hover-card is-button\">TrackByFn</a></li>\n<li><a href=\"type-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Type</a></li>\n<li><a href=\"typedecorator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">TypeDecorator</a></li>\n<li><a href=\"viewchild-var\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChild</a></li>\n<li><a href=\"viewchildmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChildMetadata</a></li>\n<li><a href=\"viewchildmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChildMetadataFactory</a></li>\n<li><a href=\"viewchildren-var\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChildren</a></li>\n<li><a href=\"viewchildrenmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChildrenMetadata</a></li>\n<li><a href=\"viewchildrenmetadatafactory-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ViewChildrenMetadataFactory</a></li>\n<li><a href=\"viewcontainerref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewContainerRef</a></li>\n<li><a href=\"viewencapsulation-enum\" md-button=\"md-button\" class=\"hover-card is-button\">ViewEncapsulation</a></li>\n<li><a href=\"viewmetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewMetadata</a></li>\n<li><a href=\"viewquery-var\" md-button=\"md-button\" class=\"hover-card is-button\">ViewQuery</a></li>\n<li><a href=\"viewquerymetadata-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewQueryMetadata</a></li>\n<li><a href=\"viewref-class\" md-button=\"md-button\" class=\"hover-card is-button\">ViewRef</a></li>\n<li><a href=\"wrappedexception-class\" md-button=\"md-button\" class=\"hover-card is-button\">WrappedException</a></li>\n<li><a href=\"wrappedvalue-class\" md-button=\"md-button\" class=\"hover-card is-button\">WrappedValue</a></li>\n<li><a href=\"wtfscopefn-interface\" md-button=\"md-button\" class=\"hover-card is-button\">WtfScopeFn</a></li>\n<li><a href=\"animate-function\" md-button=\"md-button\" class=\"hover-card is-button\">animate</a></li>\n<li><a href=\"asnativeelements-function\" md-button=\"md-button\" class=\"hover-card is-button\">asNativeElements</a></li>\n<li><a href=\"assertplatform-function\" md-button=\"md-button\" class=\"hover-card is-button\">assertPlatform</a></li>\n<li><a href=\"bind-function\" md-button=\"md-button\" class=\"hover-card is-button\">bind</a></li>\n<li><a href=\"corebootstrap-function\" md-button=\"md-button\" class=\"hover-card is-button\">coreBootstrap</a></li>\n<li><a href=\"coreloadandbootstrap-function\" md-button=\"md-button\" class=\"hover-card is-button\">coreLoadAndBootstrap</a></li>\n<li><a href=\"createplatform-function\" md-button=\"md-button\" class=\"hover-card is-button\">createPlatform</a></li>\n<li><a href=\"createplatformfactory-function\" md-button=\"md-button\" class=\"hover-card is-button\">createPlatformFactory</a></li>\n<li><a href=\"disposeplatform-function\" md-button=\"md-button\" class=\"hover-card is-button\">disposePlatform</a></li>\n<li><a href=\"enableprodmode-function\" md-button=\"md-button\" class=\"hover-card is-button\">enableProdMode</a></li>\n<li><a href=\"forwardref-function\" md-button=\"md-button\" class=\"hover-card is-button\">forwardRef</a></li>\n<li><a href=\"getdebugnode-function\" md-button=\"md-button\" class=\"hover-card is-button\">getDebugNode</a></li>\n<li><a href=\"getplatform-function\" md-button=\"md-button\" class=\"hover-card is-button\">getPlatform</a></li>\n<li><a href=\"group-function\" md-button=\"md-button\" class=\"hover-card is-button\">group</a></li>\n<li><a href=\"isdevmode-function\" md-button=\"md-button\" class=\"hover-card is-button\">isDevMode</a></li>\n<li><a href=\"keyframes-function\" md-button=\"md-button\" class=\"hover-card is-button\">keyframes</a></li>\n<li><a href=\"lockrunmode-function\" md-button=\"md-button\" class=\"hover-card is-button\">lockRunMode</a></li>\n<li><a href=\"platformcore-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformCore</a></li>\n<li><a href=\"provide-function\" md-button=\"md-button\" class=\"hover-card is-button\">provide</a></li>\n<li><a href=\"resolveforwardref-function\" md-button=\"md-button\" class=\"hover-card is-button\">resolveForwardRef</a></li>\n<li><a href=\"sequence-function\" md-button=\"md-button\" class=\"hover-card is-button\">sequence</a></li>\n<li><a href=\"settestabilitygetter-function\" md-button=\"md-button\" class=\"hover-card is-button\">setTestabilityGetter</a></li>\n<li><a href=\"state-function\" md-button=\"md-button\" class=\"hover-card is-button\">state</a></li>\n<li><a href=\"style-function\" md-button=\"md-button\" class=\"hover-card is-button\">style</a></li>\n<li><a href=\"transition-function\" md-button=\"md-button\" class=\"hover-card is-button\">transition</a></li>\n<li><a href=\"trigger-function\" md-button=\"md-button\" class=\"hover-card is-button\">trigger</a></li>\n<li><a href=\"wtfcreatescope-var\" md-button=\"md-button\" class=\"hover-card is-button\">wtfCreateScope</a></li>\n<li><a href=\"wtfendtimerange-var\" md-button=\"md-button\" class=\"hover-card is-button\">wtfEndTimeRange</a></li>\n<li><a href=\"wtfleave-var\" md-button=\"md-button\" class=\"hover-card is-button\">wtfLeave</a></li>\n<li><a href=\"wtfstarttimerange-var\" md-button=\"md-button\" class=\"hover-card is-button\">wtfStartTimeRange</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/core/index.ts#L1-L40\">@angular/core/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/core/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/core/index</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"browser_app_compiler_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">BROWSER_APP_COMPILER_PROVIDERS</a></li>\n<li><a href=\"cached_template_provider-let\" md-button=\"md-button\" class=\"hover-card is-button\">CACHED_TEMPLATE_PROVIDER</a></li>\n<li><a href=\"bootstrap-function\" md-button=\"md-button\" class=\"hover-card is-button\">bootstrap</a></li>\n<li><a href=\"bootstrapworkerapp-function\" md-button=\"md-button\" class=\"hover-card is-button\">bootstrapWorkerApp</a></li>\n<li><a href=\"bootstrapworkerui-function\" md-button=\"md-button\" class=\"hover-card is-button\">bootstrapWorkerUi</a></li>\n<li><a href=\"browserdynamicplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">browserDynamicPlatform</a></li>\n<li><a href=\"platformbrowserdynamic-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformBrowserDynamic</a></li>\n<li><a href=\"platformworkerappdynamic-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformWorkerAppDynamic</a></li>\n<li><a href=\"workerappdynamicplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">workerAppDynamicPlatform</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/index.ts#L1-L222\">@angular/platform-browser-dynamic/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/index</a>\n  </p>\n</div>\n","api/common/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"app_base_href-let\" md-button=\"md-button\" class=\"hover-card is-button\">APP_BASE_HREF</a></li>\n<li><a href=\"abstractcontrol-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractControl</a></li>\n<li><a href=\"abstractcontroldirective-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractControlDirective</a></li>\n<li><a href=\"asyncpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">AsyncPipe</a></li>\n<li><a href=\"common_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">COMMON_DIRECTIVES</a></li>\n<li><a href=\"common_pipes-let\" md-button=\"md-button\" class=\"hover-card is-button\">COMMON_PIPES</a></li>\n<li><a href=\"core_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">CORE_DIRECTIVES</a></li>\n<li><a href=\"checkboxcontrolvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">CheckboxControlValueAccessor</a></li>\n<li><a href=\"commonmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">CommonModule</a></li>\n<li><a href=\"control-class\" md-button=\"md-button\" class=\"hover-card is-button\">Control</a></li>\n<li><a href=\"controlarray-class\" md-button=\"md-button\" class=\"hover-card is-button\">ControlArray</a></li>\n<li><a href=\"controlcontainer-class\" md-button=\"md-button\" class=\"hover-card is-button\">ControlContainer</a></li>\n<li><a href=\"controlgroup-class\" md-button=\"md-button\" class=\"hover-card is-button\">ControlGroup</a></li>\n<li><a href=\"controlvalueaccessor-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ControlValueAccessor</a></li>\n<li><a href=\"currencypipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">CurrencyPipe</a></li>\n<li><a href=\"datepipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">DatePipe</a></li>\n<li><a href=\"decimalpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">DecimalPipe</a></li>\n<li><a href=\"defaultvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">DefaultValueAccessor</a></li>\n<li><a href=\"deprecatedformsmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">DeprecatedFormsModule</a></li>\n<li><a href=\"form_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">FORM_DIRECTIVES</a></li>\n<li><a href=\"form_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">FORM_PROVIDERS</a></li>\n<li><a href=\"form-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Form</a></li>\n<li><a href=\"formbuilder-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormBuilder</a></li>\n<li><a href=\"hashlocationstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">HashLocationStrategy</a></li>\n<li><a href=\"i18npluralpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">I18nPluralPipe</a></li>\n<li><a href=\"i18nselectpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">I18nSelectPipe</a></li>\n<li><a href=\"jsonpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">JsonPipe</a></li>\n<li><a href=\"location-class\" md-button=\"md-button\" class=\"hover-card is-button\">Location</a></li>\n<li><a href=\"locationstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">LocationStrategy</a></li>\n<li><a href=\"lowercasepipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">LowerCasePipe</a></li>\n<li><a href=\"maxlengthvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">MaxLengthValidator</a></li>\n<li><a href=\"minlengthvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">MinLengthValidator</a></li>\n<li><a href=\"ng_async_validators-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_ASYNC_VALIDATORS</a></li>\n<li><a href=\"ng_validators-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_VALIDATORS</a></li>\n<li><a href=\"ng_value_accessor-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_VALUE_ACCESSOR</a></li>\n<li><a href=\"ngclass-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgClass</a></li>\n<li><a href=\"ngcontrol-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgControl</a></li>\n<li><a href=\"ngcontrolgroup-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgControlGroup</a></li>\n<li><a href=\"ngcontrolname-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgControlName</a></li>\n<li><a href=\"ngcontrolstatus-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgControlStatus</a></li>\n<li><a href=\"ngfor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgFor</a></li>\n<li><a href=\"ngform-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgForm</a></li>\n<li><a href=\"ngformcontrol-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgFormControl</a></li>\n<li><a href=\"ngformmodel-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgFormModel</a></li>\n<li><a href=\"ngif-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgIf</a></li>\n<li><a href=\"nglocalization-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgLocalization</a></li>\n<li><a href=\"ngmodel-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgModel</a></li>\n<li><a href=\"ngplural-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgPlural</a></li>\n<li><a href=\"ngpluralcase-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgPluralCase</a></li>\n<li><a href=\"ngselectoption-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgSelectOption</a></li>\n<li><a href=\"ngstyle-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgStyle</a></li>\n<li><a href=\"ngswitch-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgSwitch</a></li>\n<li><a href=\"ngswitchcase-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgSwitchCase</a></li>\n<li><a href=\"ngswitchdefault-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgSwitchDefault</a></li>\n<li><a href=\"ngtemplateoutlet-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgTemplateOutlet</a></li>\n<li><a href=\"pathlocationstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">PathLocationStrategy</a></li>\n<li><a href=\"patternvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">PatternValidator</a></li>\n<li><a href=\"percentpipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">PercentPipe</a></li>\n<li><a href=\"platformlocation-class\" md-button=\"md-button\" class=\"hover-card is-button\">PlatformLocation</a></li>\n<li><a href=\"radiobuttonstate-class\" md-button=\"md-button\" class=\"hover-card is-button\">RadioButtonState</a></li>\n<li><a href=\"replacepipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">ReplacePipe</a></li>\n<li><a href=\"requiredvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RequiredValidator</a></li>\n<li><a href=\"selectcontrolvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">SelectControlValueAccessor</a></li>\n<li><a href=\"slicepipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">SlicePipe</a></li>\n<li><a href=\"uppercasepipe-class\" md-button=\"md-button\" class=\"hover-card is-button\">UpperCasePipe</a></li>\n<li><a href=\"urlchangeevent-interface\" md-button=\"md-button\" class=\"hover-card is-button\">UrlChangeEvent</a></li>\n<li><a href=\"urlchangelistener-interface\" md-button=\"md-button\" class=\"hover-card is-button\">UrlChangeListener</a></li>\n<li><a href=\"validator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Validator</a></li>\n<li><a href=\"validators-class\" md-button=\"md-button\" class=\"hover-card is-button\">Validators</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/common/index.ts#L1-L31\">@angular/common/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/common/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/common/index</a>\n  </p>\n</div>\n","api/forms/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"abstractcontrol-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractControl</a></li>\n<li><a href=\"abstractcontroldirective-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractControlDirective</a></li>\n<li><a href=\"abstractformgroupdirective-class\" md-button=\"md-button\" class=\"hover-card is-button\">AbstractFormGroupDirective</a></li>\n<li><a href=\"asyncvalidatorfn-interface\" md-button=\"md-button\" class=\"hover-card is-button\">AsyncValidatorFn</a></li>\n<li><a href=\"checkboxcontrolvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">CheckboxControlValueAccessor</a></li>\n<li><a href=\"controlcontainer-class\" md-button=\"md-button\" class=\"hover-card is-button\">ControlContainer</a></li>\n<li><a href=\"controlvalueaccessor-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ControlValueAccessor</a></li>\n<li><a href=\"defaultvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">DefaultValueAccessor</a></li>\n<li><a href=\"form_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">FORM_DIRECTIVES</a></li>\n<li><a href=\"form_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">FORM_PROVIDERS</a></li>\n<li><a href=\"form-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Form</a></li>\n<li><a href=\"formarray-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormArray</a></li>\n<li><a href=\"formarrayname-directive\" md-button=\"md-button\" class=\"hover-card is-button\">FormArrayName</a></li>\n<li><a href=\"formbuilder-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormBuilder</a></li>\n<li><a href=\"formcontrol-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormControl</a></li>\n<li><a href=\"formcontroldirective-directive\" md-button=\"md-button\" class=\"hover-card is-button\">FormControlDirective</a></li>\n<li><a href=\"formcontrolname-directive\" md-button=\"md-button\" class=\"hover-card is-button\">FormControlName</a></li>\n<li><a href=\"formgroup-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormGroup</a></li>\n<li><a href=\"formgroupdirective-directive\" md-button=\"md-button\" class=\"hover-card is-button\">FormGroupDirective</a></li>\n<li><a href=\"formgroupname-directive\" md-button=\"md-button\" class=\"hover-card is-button\">FormGroupName</a></li>\n<li><a href=\"formsmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">FormsModule</a></li>\n<li><a href=\"maxlengthvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">MaxLengthValidator</a></li>\n<li><a href=\"minlengthvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">MinLengthValidator</a></li>\n<li><a href=\"ng_async_validators-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_ASYNC_VALIDATORS</a></li>\n<li><a href=\"ng_validators-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_VALIDATORS</a></li>\n<li><a href=\"ng_value_accessor-let\" md-button=\"md-button\" class=\"hover-card is-button\">NG_VALUE_ACCESSOR</a></li>\n<li><a href=\"ngcontrol-class\" md-button=\"md-button\" class=\"hover-card is-button\">NgControl</a></li>\n<li><a href=\"ngcontrolstatus-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgControlStatus</a></li>\n<li><a href=\"ngform-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgForm</a></li>\n<li><a href=\"ngmodel-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgModel</a></li>\n<li><a href=\"ngmodelgroup-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgModelGroup</a></li>\n<li><a href=\"ngselectoption-directive\" md-button=\"md-button\" class=\"hover-card is-button\">NgSelectOption</a></li>\n<li><a href=\"patternvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">PatternValidator</a></li>\n<li><a href=\"reactive_form_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">REACTIVE_FORM_DIRECTIVES</a></li>\n<li><a href=\"reactive_form_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">REACTIVE_FORM_PROVIDERS</a></li>\n<li><a href=\"reactiveformsmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">ReactiveFormsModule</a></li>\n<li><a href=\"requiredvalidator-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RequiredValidator</a></li>\n<li><a href=\"selectcontrolvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">SelectControlValueAccessor</a></li>\n<li><a href=\"selectmultiplecontrolvalueaccessor-directive\" md-button=\"md-button\" class=\"hover-card is-button\">SelectMultipleControlValueAccessor</a></li>\n<li><a href=\"validator-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Validator</a></li>\n<li><a href=\"validatorfn-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ValidatorFn</a></li>\n<li><a href=\"validators-class\" md-button=\"md-button\" class=\"hover-card is-button\">Validators</a></li>\n<li><a href=\"disabledeprecatedforms-function\" md-button=\"md-button\" class=\"hover-card is-button\">disableDeprecatedForms</a></li>\n<li><a href=\"provideforms-function\" md-button=\"md-button\" class=\"hover-card is-button\">provideForms</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/forms/index.ts#L1-L10\">@angular/forms/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/forms/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/forms/index</a>\n  </p>\n</div>\n","api/http/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"baserequestoptions-class\" md-button=\"md-button\" class=\"hover-card is-button\">BaseRequestOptions</a></li>\n<li><a href=\"baseresponseoptions-class\" md-button=\"md-button\" class=\"hover-card is-button\">BaseResponseOptions</a></li>\n<li><a href=\"browserxhr-class\" md-button=\"md-button\" class=\"hover-card is-button\">BrowserXhr</a></li>\n<li><a href=\"connection-class\" md-button=\"md-button\" class=\"hover-card is-button\">Connection</a></li>\n<li><a href=\"connectionbackend-class\" md-button=\"md-button\" class=\"hover-card is-button\">ConnectionBackend</a></li>\n<li><a href=\"cookiexsrfstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">CookieXSRFStrategy</a></li>\n<li><a href=\"http_bindings-let\" md-button=\"md-button\" class=\"hover-card is-button\">HTTP_BINDINGS</a></li>\n<li><a href=\"http_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">HTTP_PROVIDERS</a></li>\n<li><a href=\"headers-class\" md-button=\"md-button\" class=\"hover-card is-button\">Headers</a></li>\n<li><a href=\"http-class\" md-button=\"md-button\" class=\"hover-card is-button\">Http</a></li>\n<li><a href=\"httpmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">HttpModule</a></li>\n<li><a href=\"jsonpbackend-class\" md-button=\"md-button\" class=\"hover-card is-button\">JSONPBackend</a></li>\n<li><a href=\"jsonpconnection-class\" md-button=\"md-button\" class=\"hover-card is-button\">JSONPConnection</a></li>\n<li><a href=\"jsonp_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">JSONP_PROVIDERS</a></li>\n<li><a href=\"json_bindings-let\" md-button=\"md-button\" class=\"hover-card is-button\">JSON_BINDINGS</a></li>\n<li><a href=\"jsonp-class\" md-button=\"md-button\" class=\"hover-card is-button\">Jsonp</a></li>\n<li><a href=\"jsonpmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">JsonpModule</a></li>\n<li><a href=\"queryencoder-class\" md-button=\"md-button\" class=\"hover-card is-button\">QueryEncoder</a></li>\n<li><a href=\"readystate-enum\" md-button=\"md-button\" class=\"hover-card is-button\">ReadyState</a></li>\n<li><a href=\"request-class\" md-button=\"md-button\" class=\"hover-card is-button\">Request</a></li>\n<li><a href=\"requestmethod-enum\" md-button=\"md-button\" class=\"hover-card is-button\">RequestMethod</a></li>\n<li><a href=\"requestoptions-class\" md-button=\"md-button\" class=\"hover-card is-button\">RequestOptions</a></li>\n<li><a href=\"requestoptionsargs-interface\" md-button=\"md-button\" class=\"hover-card is-button\">RequestOptionsArgs</a></li>\n<li><a href=\"response-class\" md-button=\"md-button\" class=\"hover-card is-button\">Response</a></li>\n<li><a href=\"responsecontenttype-enum\" md-button=\"md-button\" class=\"hover-card is-button\">ResponseContentType</a></li>\n<li><a href=\"responseoptions-class\" md-button=\"md-button\" class=\"hover-card is-button\">ResponseOptions</a></li>\n<li><a href=\"responseoptionsargs-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">ResponseOptionsArgs</a></li>\n<li><a href=\"responsetype-enum\" md-button=\"md-button\" class=\"hover-card is-button\">ResponseType</a></li>\n<li><a href=\"urlsearchparams-class\" md-button=\"md-button\" class=\"hover-card is-button\">URLSearchParams</a></li>\n<li><a href=\"xhrbackend-class\" md-button=\"md-button\" class=\"hover-card is-button\">XHRBackend</a></li>\n<li><a href=\"xhrconnection-class\" md-button=\"md-button\" class=\"hover-card is-button\">XHRConnection</a></li>\n<li><a href=\"xsrfstrategy-class\" md-button=\"md-button\" class=\"hover-card is-button\">XSRFStrategy</a></li>\n<li><a href=\"_createdefaultcookiexsrfstrategy-function\" md-button=\"md-button\" class=\"hover-card is-button\">_createDefaultCookieXSRFStrategy</a></li>\n<li><a href=\"httpfactory-function\" md-button=\"md-button\" class=\"hover-card is-button\">httpFactory</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/index.ts#L1-L10\">@angular/http/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/index</a>\n  </p>\n</div>\n","api/http/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"mockbackend-class\" md-button=\"md-button\" class=\"hover-card is-button\">MockBackend</a></li>\n<li><a href=\"mockconnection-class\" md-button=\"md-button\" class=\"hover-card is-button\">MockConnection</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/http/testing.ts#L1-L10\">@angular/http/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/http/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/http/testing/</a>\n  </p>\n</div>\n","api/platform-browser/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"animationdriver-class\" md-button=\"md-button\" class=\"hover-card is-button\">AnimationDriver</a></li>\n<li><a href=\"browser_app_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">BROWSER_APP_PROVIDERS</a></li>\n<li><a href=\"browser_platform_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">BROWSER_PLATFORM_PROVIDERS</a></li>\n<li><a href=\"browser_sanitization_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">BROWSER_SANITIZATION_PROVIDERS</a></li>\n<li><a href=\"browsermodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">BrowserModule</a></li>\n<li><a href=\"browserplatformlocation-class\" md-button=\"md-button\" class=\"hover-card is-button\">BrowserPlatformLocation</a></li>\n<li><a href=\"by-class\" md-button=\"md-button\" class=\"hover-card is-button\">By</a></li>\n<li><a href=\"clientmessagebroker-class\" md-button=\"md-button\" class=\"hover-card is-button\">ClientMessageBroker</a></li>\n<li><a href=\"clientmessagebrokerfactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">ClientMessageBrokerFactory</a></li>\n<li><a href=\"document-let\" md-button=\"md-button\" class=\"hover-card is-button\">DOCUMENT</a></li>\n<li><a href=\"domsanitizationservice-class\" md-button=\"md-button\" class=\"hover-card is-button\">DomSanitizationService</a></li>\n<li><a href=\"event_manager_plugins-let\" md-button=\"md-button\" class=\"hover-card is-button\">EVENT_MANAGER_PLUGINS</a></li>\n<li><a href=\"eventmanager-class\" md-button=\"md-button\" class=\"hover-card is-button\">EventManager</a></li>\n<li><a href=\"fnarg-class\" md-button=\"md-button\" class=\"hover-card is-button\">FnArg</a></li>\n<li><a href=\"hammer_gesture_config-let\" md-button=\"md-button\" class=\"hover-card is-button\">HAMMER_GESTURE_CONFIG</a></li>\n<li><a href=\"hammergestureconfig-class\" md-button=\"md-button\" class=\"hover-card is-button\">HammerGestureConfig</a></li>\n<li><a href=\"messagebus-class\" md-button=\"md-button\" class=\"hover-card is-button\">MessageBus</a></li>\n<li><a href=\"messagebussink-interface\" md-button=\"md-button\" class=\"hover-card is-button\">MessageBusSink</a></li>\n<li><a href=\"messagebussource-interface\" md-button=\"md-button\" class=\"hover-card is-button\">MessageBusSource</a></li>\n<li><a href=\"primitive-let\" md-button=\"md-button\" class=\"hover-card is-button\">PRIMITIVE</a></li>\n<li><a href=\"receivedmessage-class\" md-button=\"md-button\" class=\"hover-card is-button\">ReceivedMessage</a></li>\n<li><a href=\"safehtml-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SafeHtml</a></li>\n<li><a href=\"saferesourceurl-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SafeResourceUrl</a></li>\n<li><a href=\"safescript-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SafeScript</a></li>\n<li><a href=\"safestyle-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SafeStyle</a></li>\n<li><a href=\"safeurl-interface\" md-button=\"md-button\" class=\"hover-card is-button\">SafeUrl</a></li>\n<li><a href=\"servicemessagebroker-class\" md-button=\"md-button\" class=\"hover-card is-button\">ServiceMessageBroker</a></li>\n<li><a href=\"servicemessagebrokerfactory-class\" md-button=\"md-button\" class=\"hover-card is-button\">ServiceMessageBrokerFactory</a></li>\n<li><a href=\"title-class\" md-button=\"md-button\" class=\"hover-card is-button\">Title</a></li>\n<li><a href=\"uiarguments-class\" md-button=\"md-button\" class=\"hover-card is-button\">UiArguments</a></li>\n<li><a href=\"worker_app_application_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_APP_APPLICATION_PROVIDERS</a></li>\n<li><a href=\"worker_app_location_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_APP_LOCATION_PROVIDERS</a></li>\n<li><a href=\"worker_app_platform_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_APP_PLATFORM_PROVIDERS</a></li>\n<li><a href=\"worker_script-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_SCRIPT</a></li>\n<li><a href=\"worker_ui_application_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_UI_APPLICATION_PROVIDERS</a></li>\n<li><a href=\"worker_ui_location_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_UI_LOCATION_PROVIDERS</a></li>\n<li><a href=\"worker_ui_platform_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_UI_PLATFORM_PROVIDERS</a></li>\n<li><a href=\"worker_ui_startable_messaging_service-let\" md-button=\"md-button\" class=\"hover-card is-button\">WORKER_UI_STARTABLE_MESSAGING_SERVICE</a></li>\n<li><a href=\"webworkerinstance-class\" md-button=\"md-button\" class=\"hover-card is-button\">WebWorkerInstance</a></li>\n<li><a href=\"workerappmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">WorkerAppModule</a></li>\n<li><a href=\"_worker_ui_platform_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">_WORKER_UI_PLATFORM_PROVIDERS</a></li>\n<li><a href=\"browserplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">browserPlatform</a></li>\n<li><a href=\"disabledebugtools-function\" md-button=\"md-button\" class=\"hover-card is-button\">disableDebugTools</a></li>\n<li><a href=\"enabledebugtools-function\" md-button=\"md-button\" class=\"hover-card is-button\">enableDebugTools</a></li>\n<li><a href=\"platformbrowser-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformBrowser</a></li>\n<li><a href=\"platformworkerapp-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformWorkerApp</a></li>\n<li><a href=\"platformworkerui-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformWorkerUi</a></li>\n<li><a href=\"workerappplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">workerAppPlatform</a></li>\n<li><a href=\"workeruiplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">workerUiPlatform</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser/index.ts#L1-L32\">@angular/platform-browser/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser/index</a>\n  </p>\n</div>\n","api/platform-server/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"servertestingmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">ServerTestingModule</a></li>\n<li><a href=\"platformservertesting-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformServerTesting</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/testing.ts#L1-L10\">@angular/platform-server/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/testing/</a>\n  </p>\n</div>\n","api/platform-server/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"server_platform_providers-let\" md-button=\"md-button\" class=\"hover-card is-button\">SERVER_PLATFORM_PROVIDERS</a></li>\n<li><a href=\"platformdynamicserver-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformDynamicServer</a></li>\n<li><a href=\"platformserver-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformServer</a></li>\n<li><a href=\"serverbootstrap-function\" md-button=\"md-button\" class=\"hover-card is-button\">serverBootstrap</a></li>\n<li><a href=\"serverdynamicplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">serverDynamicPlatform</a></li>\n<li><a href=\"serverplatform-let\" md-button=\"md-button\" class=\"hover-card is-button\">serverPlatform</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-server/index.ts#L1-L10\">@angular/platform-server/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-server/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-server/index</a>\n  </p>\n</div>\n","api/router/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"activatedroute-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ActivatedRoute</a></li>\n<li><a href=\"activatedroutesnapshot-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ActivatedRouteSnapshot</a></li>\n<li><a href=\"canactivate-interface\" md-button=\"md-button\" class=\"hover-card is-button\">CanActivate</a></li>\n<li><a href=\"canactivatechild-interface\" md-button=\"md-button\" class=\"hover-card is-button\">CanActivateChild</a></li>\n<li><a href=\"candeactivate-interface\" md-button=\"md-button\" class=\"hover-card is-button\">CanDeactivate</a></li>\n<li><a href=\"canload-interface\" md-button=\"md-button\" class=\"hover-card is-button\">CanLoad</a></li>\n<li><a href=\"data-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">Data</a></li>\n<li><a href=\"defaulturlserializer-class\" md-button=\"md-button\" class=\"hover-card is-button\">DefaultUrlSerializer</a></li>\n<li><a href=\"event-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">Event</a></li>\n<li><a href=\"extraoptions-interface\" md-button=\"md-button\" class=\"hover-card is-button\">ExtraOptions</a></li>\n<li><a href=\"navigationcancel-class\" md-button=\"md-button\" class=\"hover-card is-button\">NavigationCancel</a></li>\n<li><a href=\"navigationend-class\" md-button=\"md-button\" class=\"hover-card is-button\">NavigationEnd</a></li>\n<li><a href=\"navigationerror-class\" md-button=\"md-button\" class=\"hover-card is-button\">NavigationError</a></li>\n<li><a href=\"navigationextras-interface\" md-button=\"md-button\" class=\"hover-card is-button\">NavigationExtras</a></li>\n<li><a href=\"navigationstart-class\" md-button=\"md-button\" class=\"hover-card is-button\">NavigationStart</a></li>\n<li><a href=\"primary_outlet-let\" md-button=\"md-button\" class=\"hover-card is-button\">PRIMARY_OUTLET</a></li>\n<li><a href=\"params-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">Params</a></li>\n<li><a href=\"router_directives-let\" md-button=\"md-button\" class=\"hover-card is-button\">ROUTER_DIRECTIVES</a></li>\n<li><a href=\"resolve-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Resolve</a></li>\n<li><a href=\"resolvedata-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">ResolveData</a></li>\n<li><a href=\"route-interface\" md-button=\"md-button\" class=\"hover-card is-button\">Route</a></li>\n<li><a href=\"router-class\" md-button=\"md-button\" class=\"hover-card is-button\">Router</a></li>\n<li><a href=\"routerconfig-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">RouterConfig</a></li>\n<li><a href=\"routerlink-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RouterLink</a></li>\n<li><a href=\"routerlinkactive-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RouterLinkActive</a></li>\n<li><a href=\"routerlinkwithhref-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RouterLinkWithHref</a></li>\n<li><a href=\"routermodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">RouterModule</a></li>\n<li><a href=\"routeroutlet-directive\" md-button=\"md-button\" class=\"hover-card is-button\">RouterOutlet</a></li>\n<li><a href=\"routeroutletmap-class\" md-button=\"md-button\" class=\"hover-card is-button\">RouterOutletMap</a></li>\n<li><a href=\"routerstate-interface\" md-button=\"md-button\" class=\"hover-card is-button\">RouterState</a></li>\n<li><a href=\"routerstatesnapshot-interface\" md-button=\"md-button\" class=\"hover-card is-button\">RouterStateSnapshot</a></li>\n<li><a href=\"routes-type-alias\" md-button=\"md-button\" class=\"hover-card is-button\">Routes</a></li>\n<li><a href=\"routesrecognized-class\" md-button=\"md-button\" class=\"hover-card is-button\">RoutesRecognized</a></li>\n<li><a href=\"urlsegment-class\" md-button=\"md-button\" class=\"hover-card is-button\">UrlSegment</a></li>\n<li><a href=\"urlserializer-class\" md-button=\"md-button\" class=\"hover-card is-button\">UrlSerializer</a></li>\n<li><a href=\"urltree-interface\" md-button=\"md-button\" class=\"hover-card is-button\">UrlTree</a></li>\n<li><a href=\"providerouter-function\" md-button=\"md-button\" class=\"hover-card is-button\">provideRouter</a></li>\n<li><a href=\"providerouterconfig-function\" md-button=\"md-button\" class=\"hover-card is-button\">provideRouterConfig</a></li>\n<li><a href=\"provideroutes-function\" md-button=\"md-button\" class=\"hover-card is-button\">provideRoutes</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/index.ts#L1-L23\">@angular/router/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index</a>\n  </p>\n</div>\n","api/upgrade/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Index</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"upgradeadapter-class\" md-button=\"md-button\" class=\"hover-card is-button\">UpgradeAdapter</a></li>\n<li><a href=\"upgradeadapterref-class\" md-button=\"md-button\" class=\"hover-card is-button\">UpgradeAdapterRef</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/upgrade/index.ts#L1-L10\">@angular/upgrade/index.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/upgrade/index\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/upgrade/index</a>\n  </p>\n</div>\n","api/platform-browser-dynamic/testing/index":"<h1 class=\"hero-title text-display-1 is-standard-case\">Testing</h1>\n<div class=\"badges\"><span class=\"status-badge\">Module</span></div>\n<ul>\n<li><a href=\"browserdynamictestingmodule-class\" md-button=\"md-button\" class=\"hover-card is-button\">BrowserDynamicTestingModule</a></li>\n<li><a href=\"platformbrowserdynamictesting-let\" md-button=\"md-button\" class=\"hover-card is-button\">platformBrowserDynamicTesting</a></li>\n</ul>\n<p class=\"location-badge\">defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/platform-browser-dynamic/testing.ts#L1-L40\">@angular/platform-browser-dynamic/testing.ts (line 1)</a> </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/platform-browser-dynamic/testing/</a>\n  </p>\n</div>\n","api/router/index/routesrecognized-class":"<h1 class=\"hero-title text-display-1 is-standard-case\">RoutesRecognized</h1>\n<div class=\"badges\">\n<span class=\"status-badge\">Class</span><span layout=\"row\" class=\"status-badge\"><span>Stability: Stable</span></span>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Overview</h2>\n<pre flex=\"80\" flex-xs=\"100\">class RoutesRecognized {\n  constructor(id: number, url: string, urlAfterRedirects: string, state: RouterStateSnapshot)\n  \n  \n  id : number\n  url : string\n  urlAfterRedirects : string\n  state : RouterStateSnapshot\n  toString() : string\n}</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Description</h2>\n<p>An event triggered when routes are recognized</p> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Export</h2>\n<pre class=\"prettyprint no-bg\">export class RoutesRecognized</pre>\n</div>\n<div layout=\"row\" layout-xs=\"column\" class=\"row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Constructor</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('constructor') }\" class=\"prettyprint no-bg\" id=\"constructor\">constructor(id: number, url: string, urlAfterRedirects: string, state: RouterStateSnapshot)</pre> </div>\n<div layout=\"row\" layout-xs=\"column\" class=\"instance-members row-margin ng-cloak\">\n<h2 class=\"h2-api-docs\">Class Details</h2>\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('id') }\" class=\"prettyprint no-bg\" id=\"id-anchor\">id : number</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('url') }\" class=\"prettyprint no-bg\" id=\"url-anchor\">url : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('urlAfterRedirects') }\" class=\"prettyprint no-bg\" id=\"urlAfterRedirects-anchor\">urlAfterRedirects : string</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('state') }\" class=\"prettyprint no-bg\" id=\"state-anchor\">state : RouterStateSnapshot</pre>\n\n<pre ng-class=\"{ 'anchor-focused': appCtrl.isApiDocMemberFocused('toString') }\" class=\"prettyprint no-bg\" id=\"toString-anchor\">toString() : string</pre> </div>\n<p class=\"location-badge\">exported from <a href=\"../index\">@angular/router/index</a> defined in <a href=\"https://github.com/angular/angular/tree/2.0.0-rc.5/modules/@angular/router/src/router.ts#L98-L113\">@angular/router/src/router.ts (line 98)</a></p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2010&ndash;2016 Google, Inc.<br>Licensed under the Creative Commons Attribution License 4.0.<br>\n    <a href=\"https://angular.io/docs/ts/latest/api/router/index/RoutesRecognized-class.html\" class=\"_attribution-link\">https://angular.io/docs/ts/latest/api/router/index/RoutesRecognized-class.html</a>\n  </p>\n</div>\n"}