{"index":"<h1>Clojure</h1><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/api-index.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/api-index.html</a>\n  </p>\n</div>\n","clojure.core-api":"<h1 id=\"overview\">clojure.core</h1> Full namespace name: <span id=\"long-name\">clojure.core</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Fundamental library of the Clojure language</pre>    <h2>Types</h2>    <h2 id=\"clojure.core/ArrayChunk\">ArrayChunk<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[am arr off end]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IChunk, clojure.lang.Indexed</span><br>    <h2 id=\"clojure.core/Eduction\">Eduction<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[xform coll]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IReduceInit, clojure.lang.Sequential, java.lang.Iterable</span><br>    <h2 id=\"clojure.core/Vec\">Vec<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[am cnt shift root tail _meta]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.core.IVecImpl, clojure.lang.Associative, clojure.lang.Counted, clojure.lang.IFn, clojure.lang.IHashEq, clojure.lang.ILookup, clojure.lang.IMeta, clojure.lang.IObj, clojure.lang.IPersistentCollection, clojure.lang.IPersistentStack, clojure.lang.IPersistentVector, clojure.lang.Indexed, clojure.lang.Reversible, clojure.lang.Seqable, clojure.lang.Sequential, java.lang.Comparable, java.lang.Iterable, java.util.Collection, java.util.List</span><br>    <h2 id=\"clojure.core/VecNode\">VecNode<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[edit arr]</span><br> Protocols: <br> Interfaces: <br>    <h2 id=\"clojure.core/VecSeq\">VecSeq<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[am vec anode i offset]</span><br> Protocols: <span id=\"type-protocols\"><a href=\"clojure.core-api#clojure.core.protocols/InternalReduce\">clojure.core.protocols/InternalReduce</a></span><br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IChunkedSeq, clojure.lang.ISeq, clojure.lang.Seqable</span><br>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.core/&amp;\">&amp;<span id=\"var-type\" class=\"type\">special syntax</span>\n</h2>   <pre id=\"var-docstr\">Syntax for use with fn.\n\nPlease see <a href=\"http://clojure.org/special_forms#fn\">http://clojure.org/special_forms#fn</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*\">*<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (*)\n       (* x)\n       (* x y)\n       (* x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the product of nums. (*) returns 1. Does not auto-promote\nlongs, will throw on overflow. See also: *'</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L973\">Source</a>  <br>  <h2 id=\"clojure.core/*'\">*'<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (*')\n       (*' x)\n       (*' x y)\n       (*' x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the product of nums. (*) returns 1. Supports arbitrary precision.\nSee also: *</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L961\">Source</a>  <br>  <h2 id=\"clojure.core/*1\">*1<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">bound in a repl thread to the most recent value printed</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6006\">Source</a>  <br>  <h2 id=\"clojure.core/*2\">*2<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">bound in a repl thread to the second most recent value printed</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6011\">Source</a>  <br>  <h2 id=\"clojure.core/*3\">*3<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">bound in a repl thread to the third most recent value printed</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6016\">Source</a>  <br>  <h2 id=\"clojure.core/*agent*\">*agent*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">The agent currently running an action on this thread, else nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*clojure-version*\">*clojure-version*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">The version info for Clojure core, as a map containing :major :minor \n:incremental and :qualifier keys. Feature releases may increment \n:minor and/or :major, bugfix releases will increment :incremental. \nPossible values of :qualifier include \"GA\", \"SNAPSHOT\", \"RC-x\" \"BETA-x\"</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6776\">Source</a>  <br>  <h2 id=\"clojure.core/*command-line-args*\">*command-line-args*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A sequence of the supplied command line arguments, or nil if\nnone were supplied</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*compile-files*\">*compile-files*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Set to true when compiling files, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*compile-path*\">*compile-path*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Specifies the directory where 'compile' will write out .class\nfiles. This directory must be in the classpath for 'compile' to\nwork.\n\nDefaults to \"classes\"</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*compiler-options*\">*compiler-options*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A map of keys to options.\nNote, when binding dynamically make sure to merge with previous value.\nSupported options:\n:elide-meta - a collection of metadata keys to elide during compilation.\n:disable-locals-clearing - set to true to disable clearing, useful for using a debugger\nAlpha, subject to change.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p>    <h2 id=\"clojure.core/*data-readers*\">*data-readers*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">Map from reader tag symbols to data reader Vars.\n\nWhen Clojure starts, it searches for files named 'data_readers.clj'\nat the root of the classpath. Each such file must contain a literal\nmap of symbols, like this:\n\n    {foo/bar my.project.foo/bar\n     foo/baz my.project/baz}\n\nThe first symbol in each pair is a tag that will be recognized by\nthe Clojure reader. The second symbol in the pair is the\nfully-qualified name of a Var which will be invoked by the reader to\nparse the form following the tag. For example, given the\ndata_readers.clj file above, the Clojure reader would parse this\nform:\n\n    #foo/bar [1 2 3]\n\nby invoking the Var #'my.project.foo/bar on the vector [1 2 3]. The\ndata reader function is invoked on the form AFTER it has been read\nas a normal Clojure data structure by the reader.\n\nReader tags without namespace qualifiers are reserved for\nClojure. Default reader tags are defined in\nclojure.core/default-data-readers but may be overridden in\ndata_readers.clj or by rebinding this Var.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7412\">Source</a>  <br>  <h2 id=\"clojure.core/*default-data-reader-fn*\">*default-data-reader-fn*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">When no data reader is found for a tag and *default-data-reader-fn*\nis non-nil, it will be called with two arguments,\nthe tag and the value.  If *default-data-reader-fn* is nil (the\ndefault), an exception will be thrown for the unknown tag.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7441\">Source</a>  <br>  <h2 id=\"clojure.core/*e\">*e<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">bound in a repl thread to the most recent exception caught by the repl</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6021\">Source</a>  <br>  <h2 id=\"clojure.core/*err*\">*err*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A java.io.Writer object representing standard error for print operations.\n\nDefaults to System/err, wrapped in a PrintWriter</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*file*\">*file*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">The path of the file being evaluated, as a String.\n\nWhen there is no file, e.g. in the REPL, the value is not defined.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*flush-on-newline*\">*flush-on-newline*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">When set to true, output will be flushed whenever a newline is printed.\n\nDefaults to true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*in*\">*in*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A java.io.Reader object representing standard input for read operations.\n\nDefaults to System/in, wrapped in a LineNumberingPushbackReader</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*ns*\">*ns*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A clojure.lang.Namespace object representing the current namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*out*\">*out*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A java.io.Writer object representing standard output for print operations.\n\nDefaults to System/out, wrapped in an OutputStreamWriter</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*print-dup*\">*print-dup*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">When set to logical true, objects will be printed in a way that preserves\ntheir type when read in later.\n\nDefaults to false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*print-length*\">*print-length*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">*print-length* controls how many items of each collection the\nprinter will print. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nnumber of items of each collection to print. If a collection contains\nmore items, the printer will print items up to the limit followed by\n'...' to represent the remaining items. The root binding is nil\nindicating no limit.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e72d0435b3edf6be26f402561dd261edcc198276/src/clj/clojure/core_print.clj#L16\">Source</a>  <br>  <h2 id=\"clojure.core/*print-level*\">*print-level*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">*print-level* controls how many levels deep the printer will\nprint nested objects. If it is bound to logical false, there is no\nlimit. Otherwise, it must be bound to an integer indicating the maximum\nlevel to print. Each argument to print is at level 0; if an argument is a\ncollection, its items are at level 1; and so on. If an object is a\ncollection and is at a level greater than or equal to the value bound to\n*print-level*, the printer prints '#' to represent it. The root binding\nis nil indicating no limit.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e72d0435b3edf6be26f402561dd261edcc198276/src/clj/clojure/core_print.clj#L27\">Source</a>  <br>  <h2 id=\"clojure.core/*print-meta*\">*print-meta*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">If set to logical true, when printing an object, its metadata will also\nbe printed in a form that can be read back by the reader.\n\nDefaults to false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*print-readably*\">*print-readably*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">When set to logical false, strings and characters will be printed with\nnon-alphanumeric characters converted to the appropriate escape sequences.\n\nDefaults to true</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*read-eval*\">*read-eval*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Defaults to true (or value specified by system property, see below)\n***This setting implies that the full power of the reader is in play,\nincluding syntax that can cause code to execute. It should never be\nused with untrusted sources. See also: clojure.edn/read.***\n\nWhen set to logical false in the thread-local binding,\nthe eval reader (#=) and record/type literal syntax are disabled in read/load.\nExample (will fail): (binding [*read-eval* false] (read-string \"#=(* 2 21)\"))\n\nThe default binding can be controlled by the system property\n'clojure.read.eval' System properties can be set on the command line\nlike this:\n\njava -Dclojure.read.eval=false ...\n\nThe system property can also be set to 'unknown' via\n-Dclojure.read.eval=unknown, in which case the default binding\nis :unknown and all reads will fail in contexts where *read-eval*\nhas not been explicitly bound to either true or false. This setting\ncan be a useful diagnostic tool to ensure that all of your reads\noccur in considered contexts. You can also accomplish this in a\nparticular scope by binding *read-eval* to :unknown\n</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/*unchecked-math*\">*unchecked-math*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">While bound to true, compilations of +, -, *, inc, dec and the\ncoercions will be done without overflow checks. While bound\nto :warn-on-boxed, same behavior as true, and a warning is emitted\nwhen compilation uses boxed math. Default: false.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p>    <h2 id=\"clojure.core/*warn-on-reflection*\">*warn-on-reflection*<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">When set to true, the compiler will emit warnings when reflection is\nneeded to resolve Java method calls or field accesses.\n\nDefaults to false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/+\">+<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (+)\n       (+ x)\n       (+ x y)\n       (+ x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the sum of nums. (+) returns 0. Does not auto-promote\nlongs, will throw on overflow. See also: +'</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L949\">Source</a>  <br>  <h2 id=\"clojure.core/+'\">+'<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (+')\n       (+' x)\n       (+' x y)\n       (+' x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the sum of nums. (+) returns 0. Supports arbitrary precision.\nSee also: +</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L937\">Source</a>  <br>  <h2 id=\"clojure.core/-\">-<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (- x)\n       (- x y)\n       (- x y &amp; more)\n</pre> <pre id=\"var-docstr\">If no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Does not auto-promote\nlongs, will throw on overflow. See also: -'</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1008\">Source</a>  <br>  <h2 id=\"clojure.core/-'\">-'<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-' x)\n       (-' x y)\n       (-' x y &amp; more)\n</pre> <pre id=\"var-docstr\">If no ys are supplied, returns the negation of x, else subtracts\nthe ys from x and returns the result. Supports arbitrary precision.\nSee also: -</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L996\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;\">-&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt; x &amp; forms)\n</pre> <pre id=\"var-docstr\">Threads the expr through the forms. Inserts x as the\nsecond item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nsecond item in second form, etc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1564\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;&gt;\">-&gt;&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;&gt; x &amp; forms)\n</pre> <pre id=\"var-docstr\">Threads the expr through the forms. Inserts x as the\nlast item in the first form, making a list of it if it is not a\nlist already. If there are more forms, inserts the first form as the\nlast item in second form, etc.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1580\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;ArrayChunk\">-&gt;ArrayChunk<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;ArrayChunk am arr off end)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.ArrayChunk.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bcb8e9a7aa0b0588b4872384256d86bf53d12f15/src/clj/clojure/gvec.clj#L36\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;Eduction\">-&gt;Eduction<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Eduction xform coll)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.Eduction.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7339\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;Vec\">-&gt;Vec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Vec am cnt shift root tail _meta)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.Vec.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bcb8e9a7aa0b0588b4872384256d86bf53d12f15/src/clj/clojure/gvec.clj#L131\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;VecNode\">-&gt;VecNode<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;VecNode edit arr)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.VecNode.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bcb8e9a7aa0b0588b4872384256d86bf53d12f15/src/clj/clojure/gvec.clj#L17\">Source</a>  <br>  <h2 id=\"clojure.core/-&gt;VecSeq\">-&gt;VecSeq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;VecSeq am vec anode i offset)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.VecSeq.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bcb8e9a7aa0b0588b4872384256d86bf53d12f15/src/clj/clojure/gvec.clj#L58\">Source</a>  <br>  <h2 id=\"clojure.core/.\">.<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (.instanceMember instance args*)\n       (.instanceMember Classname args*)\n       (Classname/staticMethod args*)\n       Classname/staticField\n</pre> <pre id=\"var-docstr\">The instance member form works for both fields and methods.\nThey all expand into calls to the dot operator at macroexpansion time.\n\nPlease see <a href=\"http://clojure.org/java_interop#dot\">http://clojure.org/java_interop#dot</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/..\">..<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (.. x form)\n       (.. x form &amp; more)\n</pre> <pre id=\"var-docstr\">form =&gt; fieldName-symbol or (instanceMethodName-symbol args*)\n\nExpands into a member access (.) of the first member on the first\nargument, followed by the next member on the result, etc. For\ninstance:\n\n(.. System (getProperties) (get \"os.name\"))\n\nexpands to:\n\n(. (. System (getProperties)) (get \"os.name\"))\n\nbut is easier to write, read, and understand.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1546\">Source</a>  <br>  <h2 id=\"clojure.core//\">/<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (/ x)\n       (/ x y)\n       (/ x y &amp; more)\n</pre> <pre id=\"var-docstr\">If no denominators are supplied, returns 1/numerator,\nelse returns numerator divided by all of the denominators.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L985\">Source</a>  <br>  <h2 id=\"clojure.core/&lt;\">&lt;<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (&lt; x)\n       (&lt; x y)\n       (&lt; x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns non-nil if nums are in monotonically increasing order,\notherwise false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L865\">Source</a>  <br>  <h2 id=\"clojure.core/&lt;=\">&lt;=<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (&lt;= x)\n       (&lt;= x y)\n       (&lt;= x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns non-nil if nums are in monotonically non-decreasing order,\notherwise false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1020\">Source</a>  <br>  <h2 id=\"clojure.core/=\">=<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (= x)\n       (= x y)\n       (= x y &amp; more)\n</pre> <pre id=\"var-docstr\">Equality. Returns true if x equals y, false if not. Same as\nJava x.equals(y) except it also works for nil, and compares\nnumbers and collections in a type-independent manner.  Clojure's immutable data\nstructures define equals() (and thus =) as a value, not an identity,\ncomparison.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L748\">Source</a>  <br>  <h2 id=\"clojure.core/==\">==<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (== x)\n       (== x y)\n       (== x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns non-nil if nums all have the equivalent\nvalue (type-independent), otherwise false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1065\">Source</a>  <br>  <h2 id=\"clojure.core/&gt;\">&gt;<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (&gt; x)\n       (&gt; x y)\n       (&gt; x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns non-nil if nums are in monotonically decreasing order,\notherwise false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1035\">Source</a>  <br>  <h2 id=\"clojure.core/&gt;=\">&gt;=<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (&gt;= x)\n       (&gt;= x y)\n       (&gt;= x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns non-nil if nums are in monotonically non-increasing order,\notherwise false.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1050\">Source</a>  <br>  <h2 id=\"clojure.core/Throwable-&gt;map\">Throwable-&gt;map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (Throwable-&gt;map o)\n</pre> <pre id=\"var-docstr\">Constructs a data representation for a Throwable.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e72d0435b3edf6be26f402561dd261edcc198276/src/clj/clojure/core_print.clj#L416\">Source</a>  <br>  <h2 id=\"clojure.core/accessor\">accessor<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (accessor s key)\n</pre> <pre id=\"var-docstr\">Returns a fn that, given an instance of a structmap with the basis,\nreturns the value at the key.  The key must be in the basis. The\nreturned function should be (slightly) more efficient than using\nget, but such use of accessors should be limited to known\nperformance-critical areas.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3917\">Source</a>  <br>  <h2 id=\"clojure.core/aclone\">aclone<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aclone array)\n</pre> <pre id=\"var-docstr\">Returns a clone of the Java array. Works on arrays of known\ntypes.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3751\">Source</a>  <br>  <h2 id=\"clojure.core/add-classpath\">add-classpath<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (add-classpath url)\n</pre> <pre id=\"var-docstr\">DEPRECATED \n\nAdds the url (String or URL object) to the classpath per\nURLClassLoader.addURL</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <p class=\"var-deprecated\">Deprecated since Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4924\">Source</a>  <br>  <h2 id=\"clojure.core/add-watch\">add-watch<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (add-watch reference key fn)\n</pre> <pre id=\"var-docstr\">Adds a watch function to an agent/atom/var/ref reference. The watch\nfn must be a fn of 4 args: a key, the reference, its old-state, its\nnew-state. Whenever the reference's state might have been changed,\nany registered watches will have their functions called. The watch fn\nwill be called synchronously, on the agent's thread if an agent,\nbefore any pending sends if agent or ref. Note that an atom's or\nref's state may have changed again prior to the fn call, so use\nold/new-state rather than derefing the reference. Note also that watch\nfns may be called from multiple threads simultaneously. Var watchers\nare triggered only by root binding changes, not thread-local\nset!s. Keys must be unique per reference, and can be used to remove\nthe watch with remove-watch, but are otherwise considered opaque by\nthe watch mechanism.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2030\">Source</a>  <br>  <h2 id=\"clojure.core/agent\">agent<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (agent state &amp; options)\n</pre> <pre id=\"var-docstr\">Creates and returns an agent with an initial value of state and\nzero or more options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:error-handler handler-fn\n\n:error-mode mode-keyword\n\nIf metadata-map is supplied, it will become the metadata on the\nagent. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.  handler-fn is called if an\naction throws an exception or if validate-fn rejects a new state --\nsee set-error-handler! for details.  The mode-keyword may be either\n:continue (the default if an error-handler is given) or :fail (the\ndefault if no error-handler is given) -- see set-error-mode! for\ndetails.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1940\">Source</a>  <br>  <h2 id=\"clojure.core/agent-error\">agent-error<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (agent-error a)\n</pre> <pre id=\"var-docstr\">Returns the exception thrown during an asynchronous action of the\nagent if the agent is failed.  Returns nil if the agent is not\nfailed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2055\">Source</a>  <br>  <h2 id=\"clojure.core/agent-errors\">agent-errors<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (agent-errors a)\n</pre> <pre id=\"var-docstr\">DEPRECATED: Use 'agent-error' instead.\nReturns a sequence of the exceptions thrown during asynchronous\nactions of the agent.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <p class=\"var-deprecated\">Deprecated since Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2122\">Source</a>  <br>  <h2 id=\"clojure.core/aget\">aget<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aget array idx)\n       (aget array idx &amp; idxs)\n</pre> <pre id=\"var-docstr\">Returns the value at the index/indices. Works on Java arrays of all\ntypes.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3758\">Source</a>  <br>  <h2 id=\"clojure.core/alength\">alength<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (alength array)\n</pre> <pre id=\"var-docstr\">Returns the length of the Java array. Works on arrays of all\ntypes.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3744\">Source</a>  <br>  <h2 id=\"clojure.core/alias\">alias<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (alias alias namespace-sym)\n</pre> <pre id=\"var-docstr\">Add an alias in the current namespace to another\nnamespace. Arguments are two symbols: the alias to be used, and\nthe symbolic name of the target namespace. Use :as in the ns macro in preference\nto calling this directly.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4110\">Source</a>  <br>  <h2 id=\"clojure.core/all-ns\">all-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (all-ns)\n</pre> <pre id=\"var-docstr\">Returns a sequence of all namespaces.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3993\">Source</a>  <br>  <h2 id=\"clojure.core/alter\">alter<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (alter ref fun &amp; args)\n</pre> <pre id=\"var-docstr\">Must be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2312\">Source</a>  <br>  <h2 id=\"clojure.core/alter-meta!\">alter-meta!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (alter-meta! iref f &amp; args)\n</pre> <pre id=\"var-docstr\">Atomically sets the metadata for a namespace/var/ref/agent/atom to be:\n\n(apply f its-current-meta args)\n\nf must be free of side-effects</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2275\">Source</a>  <br>  <h2 id=\"clojure.core/alter-var-root\">alter-var-root<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (alter-var-root v f &amp; args)\n</pre> <pre id=\"var-docstr\">Atomically alters the root binding of var v by applying f to its\ncurrent value plus any args</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5270\">Source</a>  <br>  <h2 id=\"clojure.core/amap\">amap<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (amap a idx ret expr)\n</pre> <pre id=\"var-docstr\">Maps an expression across an array a, using an index named idx, and\nreturn value named ret, initialized to a clone of a, then setting \neach element of ret to the evaluation of expr, returning the new \narray ret.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5021\">Source</a>  <br>  <h2 id=\"clojure.core/ancestors\">ancestors<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ancestors tag)\n       (ancestors h tag)\n</pre> <pre id=\"var-docstr\">Returns the immediate and indirect parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5363\">Source</a>  <br>  <h2 id=\"clojure.core/and\">and<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (and)\n       (and x)\n       (and x &amp; next)\n</pre> <pre id=\"var-docstr\">Evaluates exprs one at a time, from left to right. If a form\nreturns logical false (nil or false), and returns that value and\ndoesn't evaluate any of the other expressions, otherwise it returns\nthe value of the last expr. (and) returns true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L807\">Source</a>  <br>  <h2 id=\"clojure.core/apply\">apply<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (apply f args)\n       (apply f x args)\n       (apply f x y args)\n       (apply f x y z args)\n       (apply f a b c d &amp; args)\n</pre> <pre id=\"var-docstr\">Applies fn f to the argument list formed by prepending intervening arguments to args.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L625\">Source</a>  <br>  <h2 id=\"clojure.core/areduce\">areduce<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (areduce a idx ret init expr)\n</pre> <pre id=\"var-docstr\">Reduces an expression across an array a, using an index named idx,\nand return value named ret, initialized to init, setting ret to the \nevaluation of expr at each step, returning ret.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5037\">Source</a>  <br>  <h2 id=\"clojure.core/array-map\">array-map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (array-map)\n       (array-map &amp; keyvals)\n</pre> <pre id=\"var-docstr\">Constructs an array-map. If any keys are equal, they are handled as\nif by repeated uses of assoc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4225\">Source</a>  <br>  <h2 id=\"clojure.core/as-&gt;\">as-&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (as-&gt; expr name &amp; forms)\n</pre> <pre id=\"var-docstr\">Binds name to expr, evaluates the first form in the lexical context\nof that binding, then binds name to that result, repeating for each\nsuccessive form, returning the result of the last form.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7261\">Source</a>  <br>  <h2 id=\"clojure.core/aset\">aset<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset array idx val)\n       (aset array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on Java arrays of\nreference types. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3769\">Source</a>  <br>  <h2 id=\"clojure.core/aset-boolean\">aset-boolean<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-boolean array idx val)\n       (aset-boolean array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of boolean. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3802\">Source</a>  <br>  <h2 id=\"clojure.core/aset-byte\">aset-byte<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-byte array idx val)\n       (aset-byte array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of byte. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3822\">Source</a>  <br>  <h2 id=\"clojure.core/aset-char\">aset-char<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-char array idx val)\n       (aset-char array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of char. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3827\">Source</a>  <br>  <h2 id=\"clojure.core/aset-double\">aset-double<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-double array idx val)\n       (aset-double array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of double. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3812\">Source</a>  <br>  <h2 id=\"clojure.core/aset-float\">aset-float<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-float array idx val)\n       (aset-float array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of float. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3807\">Source</a>  <br>  <h2 id=\"clojure.core/aset-int\">aset-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-int array idx val)\n       (aset-int array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of int. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3792\">Source</a>  <br>  <h2 id=\"clojure.core/aset-long\">aset-long<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-long array idx val)\n       (aset-long array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of long. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3797\">Source</a>  <br>  <h2 id=\"clojure.core/aset-short\">aset-short<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (aset-short array idx val)\n       (aset-short array idx idx2 &amp; idxv)\n</pre> <pre id=\"var-docstr\">Sets the value at the index/indices. Works on arrays of short. Returns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3817\">Source</a>  <br>  <h2 id=\"clojure.core/assert\">assert<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (assert x)\n       (assert x message)\n</pre> <pre id=\"var-docstr\">Evaluates expr and throws an exception if it does not evaluate to\nlogical true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4610\">Source</a>  <br>  <h2 id=\"clojure.core/assoc\">assoc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (assoc map key val)\n       (assoc map key val &amp; kvs)\n</pre> <pre id=\"var-docstr\">assoc[iate]. When applied to a map, returns a new map of the\nsame (hashed/sorted) type, that contains the mapping of key(s) to\nval(s). When applied to a vector, returns a new vector that\ncontains val at index. Note - index must be &lt;= (count vector).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L181\">Source</a>  <br>  <h2 id=\"clojure.core/assoc!\">assoc!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (assoc! coll key val)\n       (assoc! coll key val &amp; kvs)\n</pre> <pre id=\"var-docstr\">When applied to a transient map, adds mapping of key(s) to\nval(s). When applied to a transient vector, sets the val at index.\nNote - index must be &lt;= (count vector). Returns coll.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3235\">Source</a>  <br>  <h2 id=\"clojure.core/assoc-in\">assoc-in<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (assoc-in m [k &amp; ks] v)\n</pre> <pre id=\"var-docstr\">Associates a value in a nested associative structure, where ks is a\nsequence of keys and v is the new value and returns a new nested structure.\nIf any levels do not exist, hash-maps will be created.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5901\">Source</a>  <br>  <h2 id=\"clojure.core/associative?\">associative?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (associative? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll implements Associative</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5976\">Source</a>  <br>  <h2 id=\"clojure.core/atom\">atom<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (atom x)\n       (atom x &amp; options)\n</pre> <pre id=\"var-docstr\">Creates and returns an Atom with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\nIf metadata-map is supplied, it will become the metadata on the\natom. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2213\">Source</a>  <br>  <h2 id=\"clojure.core/await\">await<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (await &amp; agents)\n</pre> <pre id=\"var-docstr\">Blocks the current thread (indefinitely!) until all actions\ndispatched thus far, from this thread or agent, to the agent(s) have\noccurred.  Will block on failed agents.  Will never return if\na failed agent is restarted with :clear-actions true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3141\">Source</a>  <br>  <h2 id=\"clojure.core/await-for\">await-for<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (await-for timeout-ms &amp; agents)\n</pre> <pre id=\"var-docstr\">Blocks the current thread until all actions dispatched thus\nfar (from this thread or agent) to the agents have occurred, or the\ntimeout (in milliseconds) has elapsed. Returns logical false if\nreturning due to timeout, logical true otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3163\">Source</a>  <br>  <h2 id=\"clojure.core/bases\">bases<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bases c)\n</pre> <pre id=\"var-docstr\">Returns the immediate superclass and direct interfaces of c, if any</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5308\">Source</a>  <br>  <h2 id=\"clojure.core/bean\">bean<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bean x)\n</pre> <pre id=\"var-docstr\">Takes a Java object and returns a read-only implementation of the\nmap abstraction based upon its JavaBean properties.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L372\">Source</a>  <br>  <h2 id=\"clojure.core/bigdec\">bigdec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bigdec x)\n</pre> <pre id=\"var-docstr\">Coerce to BigDecimal</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3521\">Source</a>  <br>  <h2 id=\"clojure.core/bigint\">bigint<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bigint x)\n</pre> <pre id=\"var-docstr\">Coerce to BigInt</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3493\">Source</a>  <br>  <h2 id=\"clojure.core/biginteger\">biginteger<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (biginteger x)\n</pre> <pre id=\"var-docstr\">Coerce to BigInteger</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3507\">Source</a>  <br>  <h2 id=\"clojure.core/binding\">binding<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (binding bindings &amp; body)\n</pre> <pre id=\"var-docstr\">binding =&gt; var-symbol init-expr\n\nCreates new bindings for the (already-existing) vars, with the\nsupplied initial values, executes the exprs in an implicit do, then\nre-establishes the bindings that existed before.  The new bindings\nare made in parallel (unlike let); all init-exprs are evaluated\nbefore the vars are bound to their new values.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1833\">Source</a>  <br>  <h2 id=\"clojure.core/bit-and\">bit-and<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-and x y)\n       (bit-and x y &amp; more)\n</pre> <pre id=\"var-docstr\">Bitwise and</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1258\">Source</a>  <br>  <h2 id=\"clojure.core/bit-and-not\">bit-and-not<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-and-not x y)\n       (bit-and-not x y &amp; more)\n</pre> <pre id=\"var-docstr\">Bitwise and with complement</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1285\">Source</a>  <br>  <h2 id=\"clojure.core/bit-clear\">bit-clear<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-clear x n)\n</pre> <pre id=\"var-docstr\">Clear bit at index n</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1296\">Source</a>  <br>  <h2 id=\"clojure.core/bit-flip\">bit-flip<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-flip x n)\n</pre> <pre id=\"var-docstr\">Flip bit at index n</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1308\">Source</a>  <br>  <h2 id=\"clojure.core/bit-not\">bit-not<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-not x)\n</pre> <pre id=\"var-docstr\">Bitwise complement</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1251\">Source</a>  <br>  <h2 id=\"clojure.core/bit-or\">bit-or<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-or x y)\n       (bit-or x y &amp; more)\n</pre> <pre id=\"var-docstr\">Bitwise or</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1267\">Source</a>  <br>  <h2 id=\"clojure.core/bit-set\">bit-set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-set x n)\n</pre> <pre id=\"var-docstr\">Set bit at index n</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1302\">Source</a>  <br>  <h2 id=\"clojure.core/bit-shift-left\">bit-shift-left<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-shift-left x n)\n</pre> <pre id=\"var-docstr\">Bitwise shift left</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1321\">Source</a>  <br>  <h2 id=\"clojure.core/bit-shift-right\">bit-shift-right<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-shift-right x n)\n</pre> <pre id=\"var-docstr\">Bitwise shift right</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1327\">Source</a>  <br>  <h2 id=\"clojure.core/bit-test\">bit-test<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-test x n)\n</pre> <pre id=\"var-docstr\">Test bit at index n</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1314\">Source</a>  <br>  <h2 id=\"clojure.core/bit-xor\">bit-xor<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bit-xor x y)\n       (bit-xor x y &amp; more)\n</pre> <pre id=\"var-docstr\">Bitwise exclusive or</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1276\">Source</a>  <br>  <h2 id=\"clojure.core/boolean\">boolean<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (boolean x)\n</pre> <pre id=\"var-docstr\">Coerce to boolean</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3383\">Source</a>  <br>  <h2 id=\"clojure.core/boolean-array\">boolean-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (boolean-array size-or-seq)\n       (boolean-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of booleans</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5057\">Source</a>  <br>  <h2 id=\"clojure.core/booleans\">booleans<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (booleans xs)\n</pre> <pre id=\"var-docstr\">Casts to boolean[]</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5120\">Source</a>  <br>  <h2 id=\"clojure.core/bound-fn\">bound-fn<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (bound-fn &amp; fntail)\n</pre> <pre id=\"var-docstr\">Returns a function defined by the given fntail, which will install the\nsame bindings in effect as in the thread at the time bound-fn was called.\nThis may be used to define a helper function which runs on a different\nthread, but needs the same bindings in place.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1892\">Source</a>  <br>  <h2 id=\"clojure.core/bound-fn*\">bound-fn*<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bound-fn* f)\n</pre> <pre id=\"var-docstr\">Returns a function, which will install the same bindings in effect as in\nthe thread at the time bound-fn* was called and then call f with any given\narguments. This may be used to define a helper function which runs on a\ndifferent thread, but needs the same bindings in place.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1880\">Source</a>  <br>  <h2 id=\"clojure.core/bound?\">bound?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bound? &amp; vars)\n</pre> <pre id=\"var-docstr\">Returns true if all of the vars provided as arguments have any bound value, root or thread-local.\nImplies that deref'ing the provided vars will succeed. Returns true if no vars are provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5277\">Source</a>  <br>  <h2 id=\"clojure.core/butlast\">butlast<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (butlast coll)\n</pre> <pre id=\"var-docstr\">Return a seq of all but the last item in coll, in linear time</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L259\">Source</a>  <br>  <h2 id=\"clojure.core/byte\">byte<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (byte x)\n</pre> <pre id=\"var-docstr\">Coerce to byte</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3371\">Source</a>  <br>  <h2 id=\"clojure.core/byte-array\">byte-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (byte-array size-or-seq)\n       (byte-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of bytes</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5065\">Source</a>  <br>  <h2 id=\"clojure.core/bytes\">bytes<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (bytes xs)\n</pre> <pre id=\"var-docstr\">Casts to bytes[]</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5125\">Source</a>  <br>  <h2 id=\"clojure.core/case\">case<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (case e &amp; clauses)\n</pre> <pre id=\"var-docstr\">Takes an expression, and a set of clauses.\n\nEach clause can take the form of either:\n\ntest-constant result-expr\n\n(test-constant1 ... test-constantN)  result-expr\n\nThe test-constants are not evaluated. They must be compile-time\nliterals, and need not be quoted.  If the expression is equal to a\ntest-constant, the corresponding result-expr is returned. A single\ndefault expression can follow the clauses, and its value will be\nreturned if no clause matches. If no default expression is provided\nand no clause matches, an IllegalArgumentException is thrown.\n\nUnlike cond and condp, case does a constant-time dispatch, the\nclauses are not considered sequentially.  All manner of constant\nexpressions are acceptable in case, including numbers, strings,\nsymbols, keywords, and (Clojure) composites thereof. Note that since\nlists are used to group multiple constants that map to the same\nexpression, a vector can be used to match a list if needed. The\ntest-constants need not be all of the same type.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6425\">Source</a>  <br>  <h2 id=\"clojure.core/cast\">cast<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cast c x)\n</pre> <pre id=\"var-docstr\">Throws a ClassCastException if x is not a c, else returns x.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L332\">Source</a>  <br>  <h2 id=\"clojure.core/cat\">cat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cat rf)\n</pre> <pre id=\"var-docstr\">A transducer which concatenates the contents of each input, which must be a\ncollection, into the reduction.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7300\">Source</a>  <br>  <h2 id=\"clojure.core/catch\">catch<span id=\"var-type\" class=\"type\">special syntax</span>\n</h2>   <pre id=\"var-docstr\">Syntax for use with try.\n\nPlease see <a href=\"http://clojure.org/special_forms#try\">http://clojure.org/special_forms#try</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/char\">char<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (char x)\n</pre> <pre id=\"var-docstr\">Coerce to char</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3377\">Source</a>  <br>  <h2 id=\"clojure.core/char-array\">char-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (char-array size-or-seq)\n       (char-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of chars</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5073\">Source</a>  <br>  <h2 id=\"clojure.core/char-escape-string\">char-escape-string<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Returns escape string for char or nil if none</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e72d0435b3edf6be26f402561dd261edcc198276/src/clj/clojure/core_print.clj#L179\">Source</a>  <br>  <h2 id=\"clojure.core/char-name-string\">char-name-string<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Returns name string for char or nil if none</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e72d0435b3edf6be26f402561dd261edcc198276/src/clj/clojure/core_print.clj#L293\">Source</a>  <br>  <h2 id=\"clojure.core/char?\">char?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (char? x)\n</pre> <pre id=\"var-docstr\">Return true if x is a Character</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L153\">Source</a>  <br>  <h2 id=\"clojure.core/chars\">chars<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (chars xs)\n</pre> <pre id=\"var-docstr\">Casts to chars[]</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5130\">Source</a>  <br>  <h2 id=\"clojure.core/class\">class<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (class x)\n</pre> <pre id=\"var-docstr\">Returns the Class of x</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3327\">Source</a>  <br>  <h2 id=\"clojure.core/class?\">class?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (class? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is an instance of Class</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5208\">Source</a>  <br>  <h2 id=\"clojure.core/clear-agent-errors\">clear-agent-errors<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (clear-agent-errors a)\n</pre> <pre id=\"var-docstr\">DEPRECATED: Use 'restart-agent' instead.\nClears any exceptions thrown during asynchronous actions of the\nagent, allowing subsequent actions to occur.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <p class=\"var-deprecated\">Deprecated since Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2132\">Source</a>  <br>  <h2 id=\"clojure.core/clojure-version\">clojure-version<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (clojure-version)\n</pre> <pre id=\"var-docstr\">Returns clojure version as a printable string.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6788\">Source</a>  <br>  <h2 id=\"clojure.core/coll?\">coll?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (coll? x)\n</pre> <pre id=\"var-docstr\">Returns true if x implements IPersistentCollection</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5950\">Source</a>  <br>  <h2 id=\"clojure.core/comment\">comment<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (comment &amp; body)\n</pre> <pre id=\"var-docstr\">Ignores body, yields nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4531\">Source</a>  <br>  <h2 id=\"clojure.core/commute\">commute<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (commute ref fun &amp; args)\n</pre> <pre id=\"var-docstr\">Must be called in a transaction. Sets the in-transaction-value of\nref to:\n\n(apply fun in-transaction-value-of-ref args)\n\nand returns the in-transaction-value of ref.\n\nAt the commit point of the transaction, sets the value of ref to be:\n\n(apply fun most-recently-committed-value-of-ref args)\n\nThus fun should be commutative, or, failing that, you must accept\nlast-one-in-wins behavior.  commute allows for more concurrency than\nref-set.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2291\">Source</a>  <br>  <h2 id=\"clojure.core/comp\">comp<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (comp)\n       (comp f)\n       (comp f g)\n       (comp f g &amp; fs)\n</pre> <pre id=\"var-docstr\">Takes a set of functions and returns a fn that is the composition\nof those fns.  The returned fn takes a variable number of args,\napplies the rightmost of fns to the args, the next\nfn (right-to-left) to the result, etc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2426\">Source</a>  <br>  <h2 id=\"clojure.core/comparator\">comparator<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (comparator pred)\n</pre> <pre id=\"var-docstr\">Returns an implementation of java.util.Comparator based upon pred.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2963\">Source</a>  <br>  <h2 id=\"clojure.core/compare\">compare<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (compare x y)\n</pre> <pre id=\"var-docstr\">Comparator. Returns a negative number, zero, or a positive number\nwhen x is logically 'less than', 'equal to', or 'greater than'\ny. Same as Java x.compareTo(y) except it also works for nil, and\ncompares numbers and collections in a type-independent manner. x\nmust implement Comparable</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L796\">Source</a>  <br>  <h2 id=\"clojure.core/compare-and-set!\">compare-and-set!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (compare-and-set! atom oldval newval)\n</pre> <pre id=\"var-docstr\">Atomically sets the value of atom to newval if and only if the\ncurrent value of the atom is identical to oldval. Returns true if\nset happened, else false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2243\">Source</a>  <br>  <h2 id=\"clojure.core/compile\">compile<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (compile lib)\n</pre> <pre id=\"var-docstr\">Compiles the namespace named by the symbol lib into a set of\nclassfiles. The source for the lib must be in a proper\nclasspath-relative directory. The output files will go into the\ndirectory specified by *compile-path*, and that directory too must\nbe in the classpath.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5868\">Source</a>  <br>  <h2 id=\"clojure.core/complement\">complement<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (complement f)\n</pre> <pre id=\"var-docstr\">Takes a fn f and returns a fn that takes the same arguments as f,\nhas the same effects, if any, and returns the opposite truth value.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1368\">Source</a>  <br>  <h2 id=\"clojure.core/completing\">completing<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (completing f)\n       (completing f cf)\n</pre> <pre id=\"var-docstr\">Takes a reducing function f of 2 args and returns a fn suitable for\ntransduce by adding an arity-1 signature that calls cf (default -\nidentity) on the result argument.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6564\">Source</a>  <br>  <h2 id=\"clojure.core/concat\">concat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (concat)\n       (concat x)\n       (concat x y)\n       (concat x y &amp; zs)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq representing the concatenation of the elements in the supplied colls.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L683\">Source</a>  <br>  <h2 id=\"clojure.core/cond\">cond<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (cond &amp; clauses)\n</pre> <pre id=\"var-docstr\">Takes a set of test/expr pairs. It evaluates each test one at a\ntime.  If a test returns logical true, cond evaluates and returns\nthe value of the corresponding expr and doesn't evaluate any of the\nother tests or exprs. (cond) returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L564\">Source</a>  <br>  <h2 id=\"clojure.core/cond-&gt;\">cond-&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (cond-&gt; expr &amp; clauses)\n</pre> <pre id=\"var-docstr\">Takes an expression and a set of test/form pairs. Threads expr (via -&gt;)\nthrough each form for which the corresponding test\nexpression is true. Note that, unlike cond branching, cond-&gt; threading does\nnot short circuit after the first true test expression.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7233\">Source</a>  <br>  <h2 id=\"clojure.core/cond-&gt;&gt;\">cond-&gt;&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (cond-&gt;&gt; expr &amp; clauses)\n</pre> <pre id=\"var-docstr\">Takes an expression and a set of test/form pairs. Threads expr (via -&gt;&gt;)\nthrough each form for which the corresponding test expression\nis true.  Note that, unlike cond branching, cond-&gt;&gt; threading does not short circuit\nafter the first true test expression.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7247\">Source</a>  <br>  <h2 id=\"clojure.core/condp\">condp<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (condp pred expr &amp; clauses)\n</pre> <pre id=\"var-docstr\">Takes a binary predicate, an expression, and a set of clauses.\nEach clause can take the form of either:\n\ntest-expr result-expr\n\ntest-expr :&gt;&gt; result-fn\n\nNote :&gt;&gt; is an ordinary keyword.\n\nFor each clause, (pred test-expr expr) is evaluated. If it returns\nlogical true, the clause is a match. If a binary clause matches, the\nresult-expr is returned, if a ternary clause matches, its result-fn,\nwhich must be a unary function, is called with the result of the\npredicate as its argument, the result of that call being the return\nvalue of condp. A single default expression can follow the clauses,\nand its value will be returned if no clause matches. If no default\nexpression is provided and no clause matches, an\nIllegalArgumentException is thrown.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6086\">Source</a>  <br>  <h2 id=\"clojure.core/conj\">conj<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (conj coll x)\n       (conj coll x &amp; xs)\n</pre> <pre id=\"var-docstr\">conj[oin]. Returns a new collection with the xs\n'added'. (conj nil item) returns (item).  The 'addition' may\nhappen at different 'places' depending on the concrete type.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L75\">Source</a>  <br>  <h2 id=\"clojure.core/conj!\">conj!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (conj!)\n       (conj! coll)\n       (conj! coll x)\n</pre> <pre id=\"var-docstr\">Adds x to the transient collection, and return coll. The 'addition'\nmay happen at different 'places' depending on the concrete type.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3225\">Source</a>  <br>  <h2 id=\"clojure.core/cons\">cons<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cons x seq)\n</pre> <pre id=\"var-docstr\">Returns a new seq where x is the first element and seq is\nthe rest.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L22\">Source</a>  <br>  <h2 id=\"clojure.core/constantly\">constantly<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (constantly x)\n</pre> <pre id=\"var-docstr\">Returns a function that takes any number of arguments and returns x.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1380\">Source</a>  <br>  <h2 id=\"clojure.core/construct-proxy\">construct-proxy<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (construct-proxy c &amp; ctor-args)\n</pre> <pre id=\"var-docstr\">Takes a proxy class and any arguments for its superclass ctor and\ncreates and returns an instance of the proxy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L264\">Source</a>  <br>  <h2 id=\"clojure.core/contains?\">contains?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (contains? coll key)\n</pre> <pre id=\"var-docstr\">Returns true if key is present in the given collection, otherwise\nreturns false.  Note that for numerically indexed collections like\nvectors and Java arrays, this tests if the numeric key is within the\nrange of indexes. 'contains?' operates constant or logarithmic time;\nit will not perform a linear search for a value.  See also 'some'.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1413\">Source</a>  <br>  <h2 id=\"clojure.core/count\">count<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (count coll)\n</pre> <pre id=\"var-docstr\">Returns the number of items in the collection. (count nil) returns\n0.  Also works on strings, arrays, and Java Collections and Maps</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L839\">Source</a>  <br>  <h2 id=\"clojure.core/counted?\">counted?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (counted? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll implements count in constant time</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5994\">Source</a>  <br>  <h2 id=\"clojure.core/create-ns\">create-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (create-ns sym)\n</pre> <pre id=\"var-docstr\">Create a new namespace named by the symbol if one doesn't already\nexist, returns it or the already-existing namespace of the same\nname.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3978\">Source</a>  <br>  <h2 id=\"clojure.core/create-struct\">create-struct<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (create-struct &amp; keys)\n</pre> <pre id=\"var-docstr\">Returns a structure basis object.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3884\">Source</a>  <br>  <h2 id=\"clojure.core/cycle\">cycle<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cycle coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy (infinite!) sequence of repetitions of the items in coll.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2848\">Source</a>  <br>  <h2 id=\"clojure.core/dec\">dec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dec x)\n</pre> <pre id=\"var-docstr\">Returns a number one less than num. Does not auto-promote\nlongs, will throw on overflow. See also: dec'</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1107\">Source</a>  <br>  <h2 id=\"clojure.core/dec'\">dec'<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dec' x)\n</pre> <pre id=\"var-docstr\">Returns a number one less than num. Supports arbitrary precision.\nSee also: dec</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1100\">Source</a>  <br>  <h2 id=\"clojure.core/decimal?\">decimal?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (decimal? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is a BigDecimal</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3472\">Source</a>  <br>  <h2 id=\"clojure.core/declare\">declare<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (declare &amp; names)\n</pre> <pre id=\"var-docstr\">defs the supplied var names with no bindings, useful for making forward declarations.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2645\">Source</a>  <br>  <h2 id=\"clojure.core/dedupe\">dedupe<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dedupe)\n       (dedupe coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence removing consecutive duplicates in coll.\nReturns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7312\">Source</a>  <br>  <h2 id=\"clojure.core/def\">def<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (def symbol doc-string? init?)\n</pre> <pre id=\"var-docstr\">Creates and interns a global var with the name\nof symbol in the current namespace (*ns*) or locates such a var if\nit already exists.  If init is supplied, it is evaluated, and the\nroot binding of the var is set to the resulting value.  If init is\nnot supplied, the root binding of the var is unaffected.\n\nPlease see <a href=\"http://clojure.org/special_forms#def\">http://clojure.org/special_forms#def</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/default-data-readers\">default-data-readers<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Default map of data reader functions provided by Clojure. May be\noverridden by binding *data-readers*.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7406\">Source</a>  <br>  <h2 id=\"clojure.core/definline\">definline<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (definline name &amp; decl)\n</pre> <pre id=\"var-docstr\">Experimental - like defmacro, except defines a named function whose\nbody is the expansion, calls to which may be expanded inline as if\nit were a macro. Cannot be used with variadic (&amp;) args.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5001\">Source</a>  <br>  <h2 id=\"clojure.core/definterface\">definterface<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (definterface name &amp; sigs)\n</pre> <pre id=\"var-docstr\">Creates a new Java interface with the given name and method sigs.\nThe method return types and parameter types may be specified with type hints,\ndefaulting to Object if omitted.\n\n(definterface MyInterface\n  (^int method1 [x])\n  (^Bar method2 [^Baz b ^Quux q]))</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L20\">Source</a>  <br>  <h2 id=\"clojure.core/defmacro\">defmacro<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defmacro name doc-string? attr-map? [params*] body)\n       (defmacro name doc-string? attr-map? ([params*] body) + attr-map?)\n</pre> <pre id=\"var-docstr\">Like defn, but the resulting function name is declared as a\nmacro and will be used as a macro by the compiler when it is\ncalled.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L428\">Source</a>  <br>  <h2 id=\"clojure.core/defmethod\">defmethod<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defmethod multifn dispatch-val &amp; fn-tail)\n</pre> <pre id=\"var-docstr\">Creates and installs a new method of multimethod associated with dispatch-value. </pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1669\">Source</a>  <br>  <h2 id=\"clojure.core/defmulti\">defmulti<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defmulti name docstring? attr-map? dispatch-fn &amp; options)\n</pre> <pre id=\"var-docstr\">Creates a new multimethod with the associated dispatch function.\nThe docstring and attr-map are optional.\n\nOptions are key-value pairs and may be one of:\n\n:default\n\nThe default dispatch value, defaults to :default\n\n:hierarchy\n\nThe value used for hierarchical dispatch (e.g. ::square is-a ::shape)\n\nHierarchies are type-like relationships that do not depend upon type\ninheritance. By default Clojure's multimethods dispatch off of a\nglobal hierarchy map.  However, a hierarchy relationship can be\ncreated with the derive function used to augment the root ancestor\ncreated with make-hierarchy.\n\nMultimethods expect the value of the hierarchy option to be supplied as\na reference type e.g. a var (i.e. via the Var-quote dispatch macro #'\nor the var special form).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1612\">Source</a>  <br>  <h2 id=\"clojure.core/defn\">defn<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defn name doc-string? attr-map? [params*] prepost-map? body)\n       (defn name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?)\n</pre> <pre id=\"var-docstr\">Same as (def name (fn [params* ] exprs*)) or (def\nname (fn ([params* ] exprs*)+)) with any doc-string or attrs added\nto the var metadata. prepost-map defines a map with optional keys\n:pre and :post that contain collections of pre or post conditions.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L270\">Source</a>  <br>  <h2 id=\"clojure.core/defn-\">defn-<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defn- name &amp; decls)\n</pre> <pre id=\"var-docstr\">same as defn, yielding non-public def</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4719\">Source</a>  <br>  <h2 id=\"clojure.core/defonce\">defonce<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defonce name expr)\n</pre> <pre id=\"var-docstr\">defs name to have the root value of the expr iff the named var has no root value,\nelse expr is unevaluated</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5591\">Source</a>  <br>  <h2 id=\"clojure.core/defprotocol\">defprotocol<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defprotocol name &amp; opts+sigs)\n</pre> <pre id=\"var-docstr\">A protocol is a named set of named methods and their signatures:\n(defprotocol AProtocolName\n\n  ;optional doc string\n  \"A doc string for AProtocol abstraction\"\n\n;method signatures\n  (bar [this a b] \"bar docs\")\n  (baz [this a] [this a b] [this a b c] \"baz docs\"))\n\nNo implementations are provided. Docs can be specified for the\nprotocol overall and for each method. The above yields a set of\npolymorphic functions and a protocol object. All are\nnamespace-qualified by the ns enclosing the definition The resulting\nfunctions dispatch on the type of their first argument, which is\nrequired and corresponds to the implicit target object ('this' in \nJava parlance). defprotocol is dynamic, has no special compile-time \neffect, and defines no new types or classes. Implementations of \nthe protocol methods can be provided using extend.\n\ndefprotocol will automatically generate a corresponding interface,\nwith the same name as the protocol, i.e. given a protocol:\nmy.ns/Protocol, an interface: my.ns.Protocol. The interface will\nhave methods corresponding to the protocol functions, and the\nprotocol will automatically work with instances of the interface.\n\nNote that you should not use this interface with deftype or\nreify, as they support the protocol directly:\n\n(defprotocol P \n  (foo [this]) \n  (bar-me [this] [this y]))\n\n(deftype Foo [a b c] \n P\n  (foo [this] a)\n  (bar-me [this] b)\n  (bar-me [this y] (+ c y)))\n\n(bar-me (Foo. 1 2 3) 42)\n=&gt; 45\n\n(foo \n  (let [x 42]\n    (reify P \n      (foo [this] 17)\n      (bar-me [this] x)\n      (bar-me [this y] x))))\n=&gt; 17</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L665\">Source</a>  <br>  <h2 id=\"clojure.core/defrecord\">defrecord<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defrecord name [&amp; fields] &amp; opts+specs)\n</pre> <pre id=\"var-docstr\">(defrecord name [fields*]  options* specs*)\n\nCurrently there are no options.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces.\n\nThe class will have the (immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nThe class will have implementations of several (clojure.lang)\ninterfaces generated automatically: IObj (metadata support) and\nIPersistentMap, and all of their superinterfaces.\n\nIn addition, defrecord will define type-and-value-based =,\nand will defined Java .hashCode and .equals consistent with the\ncontract for java.util.Map.\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nTwo constructors will be defined, one taking the designated fields\nfollowed by a metadata map (nil for none) and an extension field\nmap (nil for none), and one taking only the fields (using nil for\nmeta and extension fields). Note that the field names __meta\nand __extmap are currently reserved and should not be used when\ndefining your own records.\n\nGiven (defrecord TypeName ...), two factory functions will be\ndefined: -&gt;TypeName, taking positional parameters for the fields,\nand map-&gt;TypeName, taking a map of keywords to field values.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L296\">Source</a>  <br>  <h2 id=\"clojure.core/defstruct\">defstruct<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (defstruct name &amp; keys)\n</pre> <pre id=\"var-docstr\">Same as (def name (create-struct keys...))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3891\">Source</a>  <br>  <h2 id=\"clojure.core/deftype\">deftype<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (deftype name [&amp; fields] &amp; opts+specs)\n</pre> <pre id=\"var-docstr\">(deftype name [fields*]  options* specs*)\n\nCurrently there are no options.\n\nEach spec consists of a protocol or interface name followed by zero\nor more method bodies:\n\nprotocol-or-interface-or-Object\n(methodName [args*] body)*\n\nDynamically generates compiled bytecode for class with the given\nname, in a package with the same name as the current namespace, the\ngiven fields, and, optionally, methods for protocols and/or\ninterfaces. \n\nThe class will have the (by default, immutable) fields named by\nfields, which can have type hints. Protocols/interfaces and methods\nare optional. The only methods that can be supplied are those\ndeclared in the protocols/interfaces.  Note that method bodies are\nnot closures, the local environment includes only the named fields,\nand those fields can be accessed directly. Fields can be qualified\nwith the metadata :volatile-mutable true or :unsynchronized-mutable\ntrue, at which point (set! afield aval) will be supported in method\nbodies. Note well that mutable fields are extremely difficult to use\ncorrectly, and are present only to facilitate the building of higher\nlevel constructs, such as Clojure's reference types, in Clojure\nitself. They are for experts only - if the semantics and\nimplications of :volatile-mutable or :unsynchronized-mutable are not\nimmediately apparent to you, you should not be using them.\n\nMethod definitions take the form:\n\n(methodname [args*] body)\n\nThe argument and return types can be hinted on the arg and\nmethodname symbols. If not supplied, they will be inferred, so type\nhints should be reserved for disambiguation.\n\nMethods should be supplied for all methods of the desired\nprotocol(s) and interface(s). You can also define overrides for\nmethods of Object. Note that a parameter must be supplied to\ncorrespond to the target object ('this' in Java parlance). Thus\nmethods for interfaces will take one more argument than do the\ninterface declarations. Note also that recur calls to the method\nhead should *not* pass the target object, it will be supplied\nautomatically and can not be substituted.\n\nIn the method bodies, the (unqualified) name can be used to name the\nclass (for calls to new, instance? etc).\n\nWhen AOT compiling, generates compiled bytecode for a class with the\ngiven name (a symbol), prepends the current ns as the package, and\nwrites the .class file to the *compile-path* directory.\n\nOne constructor will be defined, taking the designated fields.  Note\nthat the field names __meta and __extmap are currently reserved and\nshould not be used when defining your own types.\n\nGiven (deftype TypeName ...), a factory function called -&gt;TypeName\nwill be defined, taking positional parameters for the fields</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L400\">Source</a>  <br>  <h2 id=\"clojure.core/delay\">delay<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (delay &amp; body)\n</pre> <pre id=\"var-docstr\">Takes a body of expressions and yields a Delay object that will\ninvoke the body only the first time it is forced (with force or deref/@), and\nwill cache the result and return it on all subsequent force\ncalls. See also - realized?</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L711\">Source</a>  <br>  <h2 id=\"clojure.core/delay?\">delay?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (delay? x)\n</pre> <pre id=\"var-docstr\">returns true if x is a Delay created with delay</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L720\">Source</a>  <br>  <h2 id=\"clojure.core/deliver\">deliver<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (deliver promise val)\n</pre> <pre id=\"var-docstr\">Delivers the supplied value to the promise, releasing any pending\nderefs. A subsequent call to deliver on a promise will have no effect.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6834\">Source</a>  <br>  <h2 id=\"clojure.core/denominator\">denominator<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (denominator r)\n</pre> <pre id=\"var-docstr\">Returns the denominator part of a Ratio.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3464\">Source</a>  <br>  <h2 id=\"clojure.core/deref\">deref<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (deref ref)\n       (deref ref timeout-ms timeout-val)\n</pre> <pre id=\"var-docstr\">Also reader macro: @ref/@agent/@var/@atom/@delay/@future/@promise. Within a transaction,\nreturns the in-transaction-value of ref, else returns the\nmost-recently-committed value of ref. When applied to a var, agent\nor atom, returns its current state. When applied to a delay, forces\nit if not already forced. When applied to a future, will block if\ncomputation not complete. When applied to a promise, will block\nuntil a value is delivered.  The variant taking a timeout can be\nused for blocking references (futures and promises), and will return\ntimeout-val if the timeout (in milliseconds) is reached before a\nvalue is available. See also - realized?.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2192\">Source</a>  <br>  <h2 id=\"clojure.core/derive\">derive<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (derive tag parent)\n       (derive h tag parent)\n</pre> <pre id=\"var-docstr\">Establishes a parent/child relationship between parent and\ntag. Parent must be a namespace-qualified symbol or keyword and\nchild can be either a namespace-qualified symbol or keyword or a\nclass. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5391\">Source</a>  <br>  <h2 id=\"clojure.core/descendants\">descendants<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (descendants tag)\n       (descendants h tag)\n</pre> <pre id=\"var-docstr\">Returns the immediate and indirect children of tag, through a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy. Note: does not work on Java type inheritance\nrelationships.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5379\">Source</a>  <br>  <h2 id=\"clojure.core/disj\">disj<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (disj set)\n       (disj set key)\n       (disj set key &amp; ks)\n</pre> <pre id=\"var-docstr\">disj[oin]. Returns a new set of the same (hashed/sorted) type, that\ndoes not contain key(s).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1447\">Source</a>  <br>  <h2 id=\"clojure.core/disj!\">disj!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (disj! set)\n       (disj! set key)\n       (disj! set key &amp; ks)\n</pre> <pre id=\"var-docstr\">disj[oin]. Returns a transient set of the same (hashed/sorted) type, that\ndoes not contain key(s).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3267\">Source</a>  <br>  <h2 id=\"clojure.core/dissoc\">dissoc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dissoc map)\n       (dissoc map key)\n       (dissoc map key &amp; ks)\n</pre> <pre id=\"var-docstr\">dissoc[iate]. Returns a new map of the same (hashed/sorted) type,\nthat does not contain a mapping for key(s).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1433\">Source</a>  <br>  <h2 id=\"clojure.core/dissoc!\">dissoc!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dissoc! map key)\n       (dissoc! map key &amp; ks)\n</pre> <pre id=\"var-docstr\">Returns a transient map that doesn't contain a mapping for key(s).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3248\">Source</a>  <br>  <h2 id=\"clojure.core/distinct\">distinct<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (distinct)\n       (distinct coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the elements of coll with duplicates removed.\nReturns a stateful transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4801\">Source</a>  <br>  <h2 id=\"clojure.core/distinct?\">distinct?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (distinct? x)\n       (distinct? x y)\n       (distinct? x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns true if no two of the arguments are =</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5450\">Source</a>  <br>  <h2 id=\"clojure.core/do\">do<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (do exprs*)\n</pre> <pre id=\"var-docstr\">Evaluates the expressions in order and returns the value of\nthe last. If no expressions are supplied, returns nil.\n\nPlease see <a href=\"http://clojure.org/special_forms#do\">http://clojure.org/special_forms#do</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/doall\">doall<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (doall coll)\n       (doall n coll)\n</pre> <pre id=\"var-docstr\">When lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. doall can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, retains the head and returns it, thus causing the entire\nseq to reside in memory at one time.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3015\">Source</a>  <br>  <h2 id=\"clojure.core/dorun\">dorun<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dorun coll)\n       (dorun n coll)\n</pre> <pre id=\"var-docstr\">When lazy sequences are produced via functions that have side\neffects, any effects other than those needed to produce the first\nelement in the seq do not occur until the seq is consumed. dorun can\nbe used to force any effects. Walks through the successive nexts of\nthe seq, does not retain the head and returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3000\">Source</a>  <br>  <h2 id=\"clojure.core/doseq\">doseq<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (doseq seq-exprs &amp; body)\n</pre> <pre id=\"var-docstr\">Repeatedly executes body (presumably for side-effects) with\nbindings and filtering as provided by \"for\".  Does not retain\nthe head of the sequence. Returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3083\">Source</a>  <br>  <h2 id=\"clojure.core/dosync\">dosync<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (dosync &amp; exprs)\n</pre> <pre id=\"var-docstr\">Runs the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of dosync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4848\">Source</a>  <br>  <h2 id=\"clojure.core/dotimes\">dotimes<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (dotimes bindings &amp; body)\n</pre> <pre id=\"var-docstr\">bindings =&gt; name n\n\nRepeatedly executes body (presumably for side-effects) with name\nbound to integers from 0 through n-1.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3180\">Source</a>  <br>  <h2 id=\"clojure.core/doto\">doto<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (doto x &amp; forms)\n</pre> <pre id=\"var-docstr\">Evaluates x then calls all of the methods and functions with the\nvalue of x supplied at the front of the given arguments.  The forms\nare evaluated in order.  Returns x.\n\n(doto (new java.util.HashMap) (.put \"a\" 1) (.put \"b\" 2))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3700\">Source</a>  <br>  <h2 id=\"clojure.core/double\">double<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (double x)\n</pre> <pre id=\"var-docstr\">Coerce to double</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3359\">Source</a>  <br>  <h2 id=\"clojure.core/double-array\">double-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (double-array size-or-seq)\n       (double-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of doubles</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5089\">Source</a>  <br>  <h2 id=\"clojure.core/doubles\">doubles<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (doubles xs)\n</pre> <pre id=\"var-docstr\">Casts to double[]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5150\">Source</a>  <br>  <h2 id=\"clojure.core/drop\">drop<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (drop n)\n       (drop n coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of all but the first n items in coll.\nReturns a stateful transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2778\">Source</a>  <br>  <h2 id=\"clojure.core/drop-last\">drop-last<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (drop-last s)\n       (drop-last n s)\n</pre> <pre id=\"var-docstr\">Return a lazy sequence of all but the last n (default 1) items in coll</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2803\">Source</a>  <br>  <h2 id=\"clojure.core/drop-while\">drop-while<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (drop-while pred)\n       (drop-while pred coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the items in coll starting from the\nfirst item for which (pred item) returns logical false.  Returns a\nstateful transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2821\">Source</a>  <br>  <h2 id=\"clojure.core/eduction\">eduction<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (eduction xform* coll)\n</pre> <pre id=\"var-docstr\">Returns a reducible/iterable application of the transducers\nto the items in coll. Transducers are applied in order as if\ncombined with comp. Note that these applications will be\nperformed every time reduce/iterator is called.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7351\">Source</a>  <br>  <h2 id=\"clojure.core/empty\">empty<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (empty coll)\n</pre> <pre id=\"var-docstr\">Returns an empty collection of the same category as coll, or nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5013\">Source</a>  <br>  <h2 id=\"clojure.core/empty?\">empty?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (empty? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll has no items - same as (not (seq coll)).\nPlease use the idiom (seq x) rather than (not (empty? x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5943\">Source</a>  <br>  <h2 id=\"clojure.core/ensure\">ensure<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ensure ref)\n</pre> <pre id=\"var-docstr\">Must be called in a transaction. Protects the ref from modification\nby other transactions.  Returns the in-transaction-value of\nref. Allows for more concurrency than (ref-set ref @ref)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2357\">Source</a>  <br>  <h2 id=\"clojure.core/ensure-reduced\">ensure-reduced<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ensure-reduced x)\n</pre> <pre id=\"var-docstr\">If x is already reduced?, returns it, else returns (reduced x)</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2718\">Source</a>  <br>  <h2 id=\"clojure.core/enumeration-seq\">enumeration-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (enumeration-seq e)\n</pre> <pre id=\"var-docstr\">Returns a seq on a java.util.Enumeration</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5496\">Source</a>  <br>  <h2 id=\"clojure.core/error-handler\">error-handler<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (error-handler a)\n</pre> <pre id=\"var-docstr\">Returns the error-handler of agent a, or nil if there is none.\nSee set-error-handler!</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2090\">Source</a>  <br>  <h2 id=\"clojure.core/error-mode\">error-mode<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (error-mode a)\n</pre> <pre id=\"var-docstr\">Returns the error-mode of agent a.  See set-error-mode!</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2115\">Source</a>  <br>  <h2 id=\"clojure.core/eval\">eval<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (eval form)\n</pre> <pre id=\"var-docstr\">Evaluates the form data structure (not text!) and returns the result.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3077\">Source</a>  <br>  <h2 id=\"clojure.core/even?\">even?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (even? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is even, throws an exception if n is not an integer</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1351\">Source</a>  <br>  <h2 id=\"clojure.core/every-pred\">every-pred<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (every-pred p)\n       (every-pred p1 p2)\n       (every-pred p1 p2 p3)\n       (every-pred p1 p2 p3 &amp; ps)\n</pre> <pre id=\"var-docstr\">Takes a set of predicates and returns a function f that returns true if all of its\ncomposing predicates return a logical true value against all of its arguments, else it returns\nfalse. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical false result against the original predicates.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7091\">Source</a>  <br>  <h2 id=\"clojure.core/every?\">every?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (every? pred coll)\n</pre> <pre id=\"var-docstr\">Returns true if (pred x) is logical true for every x in coll, else\nfalse.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2541\">Source</a>  <br>  <h2 id=\"clojure.core/ex-data\">ex-data<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ex-data ex)\n</pre> <pre id=\"var-docstr\">Returns exception data (a map) if ex is an IExceptionInfo.\nOtherwise returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4602\">Source</a>  <br>  <h2 id=\"clojure.core/ex-info\">ex-info<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ex-info msg map)\n       (ex-info msg map cause)\n</pre> <pre id=\"var-docstr\">Create an instance of ExceptionInfo, a RuntimeException subclass\nthat carries a map of additional data.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4593\">Source</a>  <br>  <h2 id=\"clojure.core/extend\">extend<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (extend atype &amp; proto+mmaps)\n</pre> <pre id=\"var-docstr\">Implementations of protocol methods can be provided using the extend construct:\n\n (extend AType\n   AProtocol\n    {:foo an-existing-fn\n     :bar (fn [a b] ...)\n     :baz (fn ([a]...) ([a b] ...)...)}\n   BProtocol \n     {...} \n   ...)\n\n extend takes a type/class (or interface, see below), and one or more\n protocol + method map pairs. It will extend the polymorphism of the\n protocol's methods to call the supplied methods when an AType is\n provided as the first argument. \n\n Method maps are maps of the keyword-ized method names to ordinary\n fns. This facilitates easy reuse of existing fns and fn maps, for\n code reuse/mixins without derivation or composition. You can extend\n an interface to a protocol. This is primarily to facilitate interop\n with the host (e.g. Java) but opens the door to incidental multiple\n inheritance of implementation since a class can inherit from more\n than one interface, both of which extend the protocol. It is TBD how\n to specify which impl to use. You can extend a protocol on nil.\n\n If you are supplying the definitions explicitly (i.e. not reusing\n exsting functions or mixin maps), you may find it more convenient to\n use the extend-type or extend-protocol macros.\n\n Note that multiple independent extend clauses can exist for the same\n type, not all protocols need be defined in a single extend call.\n\n See also:\n extends?, satisfies?, extenders</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L719\">Source</a>  <br>  <h2 id=\"clojure.core/extend-protocol\">extend-protocol<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (extend-protocol p &amp; specs)\n</pre> <pre id=\"var-docstr\">Useful when you want to provide several implementations of the same\nprotocol all at once. Takes a single protocol and the implementation\nof that protocol for one or more types. Expands into calls to\nextend-type:\n\n(extend-protocol Protocol\n  AType\n    (foo [x] ...)\n    (bar [x y] ...)\n  BType\n    (foo [x] ...)\n    (bar [x y] ...)\n  AClass\n    (foo [x] ...)\n    (bar [x y] ...)\n  nil\n    (foo [x] ...)\n    (bar [x y] ...))\n\nexpands into:\n\n(do\n (clojure.core/extend-type AType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type BType Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type AClass Protocol \n   (foo [x] ...) \n   (bar [x y] ...))\n (clojure.core/extend-type nil Protocol \n   (foo [x] ...) \n   (bar [x y] ...)))</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L819\">Source</a>  <br>  <h2 id=\"clojure.core/extend-type\">extend-type<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (extend-type t &amp; specs)\n</pre> <pre id=\"var-docstr\">A macro that expands into an extend call. Useful when you are\nsupplying the definitions explicitly inline, extend-type\nautomatically creates the maps required by extend.  Propagates the\nclass as a type hint on the first argument of all fns.\n\n(extend-type MyType \n  Countable\n    (cnt [c] ...)\n  Foo\n    (bar [x y] ...)\n    (baz ([x] ...) ([x y &amp; zs] ...)))\n\nexpands into:\n\n(extend MyType\n Countable\n   {:cnt (fn [c] ...)}\n Foo\n   {:baz (fn ([x] ...) ([x y &amp; zs] ...))\n    :bar (fn [x y] ...)})</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L787\">Source</a>  <br>  <h2 id=\"clojure.core/extenders\">extenders<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (extenders protocol)\n</pre> <pre id=\"var-docstr\">Returns a collection of the types explicitly extending protocol</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L536\">Source</a>  <br>  <h2 id=\"clojure.core/extends?\">extends?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (extends? protocol atype)\n</pre> <pre id=\"var-docstr\">Returns true if atype extends protocol</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L529\">Source</a>  <br>  <h2 id=\"clojure.core/false?\">false?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (false? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is the value false, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L489\">Source</a>  <br>  <h2 id=\"clojure.core/ffirst\">ffirst<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ffirst x)\n</pre> <pre id=\"var-docstr\">Same as (first (first x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L98\">Source</a>  <br>  <h2 id=\"clojure.core/file-seq\">file-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (file-seq dir)\n</pre> <pre id=\"var-docstr\">A tree seq on java.io.Files</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4742\">Source</a>  <br>  <h2 id=\"clojure.core/filter\">filter<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (filter pred)\n       (filter pred coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the items in coll for which\n(pred item) returns true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2662\">Source</a>  <br>  <h2 id=\"clojure.core/filterv\">filterv<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (filterv pred coll)\n</pre> <pre id=\"var-docstr\">Returns a vector of the items in coll for which\n(pred item) returns true. pred must be free of side-effects.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6625\">Source</a>  <br>  <h2 id=\"clojure.core/finally\">finally<span id=\"var-type\" class=\"type\">special syntax</span>\n</h2>   <pre id=\"var-docstr\">Syntax for use with try.\n\nPlease see <a href=\"http://clojure.org/special_forms#try\">http://clojure.org/special_forms#try</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/find\">find<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (find map key)\n</pre> <pre id=\"var-docstr\">Returns the map entry for key, or nil if key not present.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1463\">Source</a>  <br>  <h2 id=\"clojure.core/find-keyword\">find-keyword<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (find-keyword name)\n       (find-keyword ns name)\n</pre> <pre id=\"var-docstr\">Returns a Keyword with the given namespace and name if one already\nexists.  This function will not intern a new keyword. If the keyword\nhas not already been interned, it will return nil.  Do not use :\nin the keyword strings, it will be added automatically.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L590\">Source</a>  <br>  <h2 id=\"clojure.core/find-ns\">find-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (find-ns sym)\n</pre> <pre id=\"var-docstr\">Returns the namespace named by the symbol or nil if it doesn't exist.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3972\">Source</a>  <br>  <h2 id=\"clojure.core/find-var\">find-var<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (find-var sym)\n</pre> <pre id=\"var-docstr\">Returns the global var named by the namespace-qualified symbol, or\nnil if no var with that name.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1901\">Source</a>  <br>  <h2 id=\"clojure.core/first\">first<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (first coll)\n</pre> <pre id=\"var-docstr\">Returns the first item in the collection. Calls seq on its\nargument. If coll is nil, returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L49\">Source</a>  <br>  <h2 id=\"clojure.core/flatten\">flatten<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (flatten x)\n</pre> <pre id=\"var-docstr\">Takes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat sequence.\n(flatten nil) returns an empty sequence.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6843\">Source</a>  <br>  <h2 id=\"clojure.core/float\">float<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (float x)\n</pre> <pre id=\"var-docstr\">Coerce to float</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3353\">Source</a>  <br>  <h2 id=\"clojure.core/float-array\">float-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (float-array size-or-seq)\n       (float-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of floats</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5049\">Source</a>  <br>  <h2 id=\"clojure.core/float?\">float?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (float? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is a floating point number</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3478\">Source</a>  <br>  <h2 id=\"clojure.core/floats\">floats<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (floats xs)\n</pre> <pre id=\"var-docstr\">Casts to float[]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5140\">Source</a>  <br>  <h2 id=\"clojure.core/flush\">flush<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (flush)\n</pre> <pre id=\"var-docstr\">Flushes the output stream that is the current value of\n*out*</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3579\">Source</a>  <br>  <h2 id=\"clojure.core/fn\">fn<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (fn name? [params*] exprs*)\n       (fn name? ([params*] exprs*) +)\n</pre> <pre id=\"var-docstr\">params =&gt; positional-params* , or positional-params* &amp; next-param\npositional-param =&gt; binding-form\nnext-param =&gt; binding-form\nname =&gt; symbol\n\nDefines a function</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4333\">Source</a>  <br>  <h2 id=\"clojure.core/fn?\">fn?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (fn? x)\n</pre> <pre id=\"var-docstr\">Returns true if x implements Fn, i.e. is an object created via fn.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5969\">Source</a>  <br>  <h2 id=\"clojure.core/fnext\">fnext<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (fnext x)\n</pre> <pre id=\"var-docstr\">Same as (first (next x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L112\">Source</a>  <br>  <h2 id=\"clojure.core/fnil\">fnil<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (fnil f x)\n       (fnil f x y)\n       (fnil f x y z)\n</pre> <pre id=\"var-docstr\">Takes a function f, and returns a function that calls f, replacing\na nil first argument to f with the supplied value x. Higher arity\nversions can replace arguments in the second and third\npositions (y, z). Note that the function f can take any number of\narguments, not just the one(s) being nil-patched.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6284\">Source</a>  <br>  <h2 id=\"clojure.core/for\">for<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (for seq-exprs body-expr)\n</pre> <pre id=\"var-docstr\">List comprehension. Takes a vector of one or more\n binding-form/collection-expr pairs, each followed by zero or more\n modifiers, and yields a lazy sequence of evaluations of expr.\n Collections are iterated in a nested fashion, rightmost fastest,\n and nested coll-exprs can refer to bindings created in prior\n binding-forms.  Supported modifiers are: :let [binding-form expr ...],\n :while test, :when test.\n\n(take 100 (for [x (range 100000000) y (range 1000000) :while (&lt; y x)] [x y]))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4444\">Source</a>  <br>  <h2 id=\"clojure.core/force\">force<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (force x)\n</pre> <pre id=\"var-docstr\">If x is a Delay, returns the (possibly cached) value of its expression, else returns x</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L726\">Source</a>  <br>  <h2 id=\"clojure.core/format\">format<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (format fmt &amp; args)\n</pre> <pre id=\"var-docstr\">Formats a string using java.lang.String.format, see java.util.Formatter for format\nstring syntax</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5503\">Source</a>  <br>  <h2 id=\"clojure.core/frequencies\">frequencies<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (frequencies coll)\n</pre> <pre id=\"var-docstr\">Returns a map from distinct items in coll to the number of times\nthey appear.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6910\">Source</a>  <br>  <h2 id=\"clojure.core/future\">future<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (future &amp; body)\n</pre> <pre id=\"var-docstr\">Takes a body of expressions and yields a future object that will\ninvoke the body in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant of\nderef with timeout is used. See also - realized?.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6697\">Source</a>  <br>  <h2 id=\"clojure.core/future-call\">future-call<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (future-call f)\n</pre> <pre id=\"var-docstr\">Takes a function of no args and yields a future object that will\ninvoke the function in another thread, and will cache the result and\nreturn it on all subsequent calls to deref/@. If the computation has\nnot yet finished, calls to deref/@ will block, unless the variant\nof deref with timeout is used. See also - realized?.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6670\">Source</a>  <br>  <h2 id=\"clojure.core/future-cancel\">future-cancel<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (future-cancel f)\n</pre> <pre id=\"var-docstr\">Cancels the future, if possible.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6707\">Source</a>  <br>  <h2 id=\"clojure.core/future-cancelled?\">future-cancelled?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (future-cancelled? f)\n</pre> <pre id=\"var-docstr\">Returns true if future f is cancelled</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6713\">Source</a>  <br>  <h2 id=\"clojure.core/future-done?\">future-done?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (future-done? f)\n</pre> <pre id=\"var-docstr\">Returns true if future f is done</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6264\">Source</a>  <br>  <h2 id=\"clojure.core/future?\">future?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (future? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is a future</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6258\">Source</a>  <br>  <h2 id=\"clojure.core/gen-class\">gen-class<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (gen-class &amp; options)\n</pre> <pre id=\"var-docstr\">When compiling, generates compiled bytecode for a class with the\ngiven package-qualified :name (which, as all names in these\nparameters, can be a string or symbol), and writes the .class file\nto the *compile-path* directory.  When not compiling, does\nnothing. The gen-class construct contains no implementation, as the\nimplementation will be dynamically sought by the generated class in\nfunctions in an implementing Clojure namespace. Given a generated\nclass org.mydomain.MyClass with a method named mymethod, gen-class\nwill generate an implementation that looks for a function named by \n(str prefix mymethod) (default prefix: \"-\") in a\nClojure namespace specified by :impl-ns\n(defaults to the current namespace). All inherited methods,\ngenerated methods, and init and main functions (see :methods, :init,\nand :main below) will be found similarly prefixed. By default, the\nstatic initializer for the generated class will attempt to load the\nClojure support code for the class as a resource from the classpath,\ne.g. in the example case, ``org/mydomain/MyClass__init.class``. This\nbehavior can be controlled by :load-impl-ns\n\nNote that methods with a maximum of 18 parameters are supported.\n\nIn all subsequent sections taking types, the primitive types can be\nreferred to by their Java names (int, float etc), and classes in the\njava.lang package can be used without a package qualifier. All other\nclasses must be fully qualified.\n\nOptions should be a set of key/value pairs, all except for :name are optional:\n\n:name aname\n\nThe package-qualified name of the class to be generated\n\n:extends aclass\n\nSpecifies the superclass, the non-private methods of which will be\noverridden by the class. If not provided, defaults to Object.\n\n:implements [interface ...]\n\nOne or more interfaces, the methods of which will be implemented by the class.\n\n:init name\n\nIf supplied, names a function that will be called with the arguments\nto the constructor. Must return [ [superclass-constructor-args] state] \nIf not supplied, the constructor args are passed directly to\nthe superclass constructor and the state will be nil\n\n:constructors {[param-types] [super-param-types], ...}\n\nBy default, constructors are created for the generated class which\nmatch the signature(s) of the constructors for the superclass. This\nparameter may be used to explicitly specify constructors, each entry\nproviding a mapping from a constructor signature to a superclass\nconstructor signature. When you supply this, you must supply an :init\nspecifier. \n\n:post-init name\n\nIf supplied, names a function that will be called with the object as\nthe first argument, followed by the arguments to the constructor.\nIt will be called every time an object of this class is created,\nimmediately after all the inherited constructors have completed.\nIts return value is ignored.\n\n:methods [ [name [param-types] return-type], ...]\n\nThe generated class automatically defines all of the non-private\nmethods of its superclasses/interfaces. This parameter can be used\nto specify the signatures of additional methods of the generated\nclass. Static methods can be specified with ^{:static true} in the\nsignature's metadata. Do not repeat superclass/interface signatures\nhere.\n\n:main boolean\n\nIf supplied and true, a static public main function will be generated. It will\npass each string of the String[] argument as a separate argument to\na function called (str prefix main).\n\n:factory name\n\nIf supplied, a (set of) public static factory function(s) will be\ncreated with the given name, and the same signature(s) as the\nconstructor(s).\n\n:state name\n\nIf supplied, a public final instance field with the given name will be\ncreated. You must supply an :init function in order to provide a\nvalue for the state. Note that, though final, the state can be a ref\nor agent, supporting the creation of Java objects with transactional\nor asynchronous mutation semantics.\n\n:exposes {protected-field-name {:get name :set name}, ...}\n\nSince the implementations of the methods of the generated class\noccur in Clojure functions, they have no access to the inherited\nprotected fields of the superclass. This parameter can be used to\ngenerate public getter/setter methods exposing the protected field(s)\nfor use in the implementation.\n\n:exposes-methods {super-method-name exposed-name, ...}\n\nIt is sometimes necessary to call the superclass' implementation of an\noverridden method.  Those methods may be exposed and referred in \nthe new method implementation by a local name.\n\n:prefix string\n\nDefault: \"-\" Methods called e.g. Foo will be looked up in vars called\nprefixFoo in the implementing ns.\n\n:impl-ns name\n\nDefault: the name of the current ns. Implementations of methods will be \nlooked up in this namespace.\n\n:load-impl-ns boolean\n\nDefault: true. Causes the static initializer for the generated class\nto reference the load code for the implementing namespace. Should be\ntrue when implementing-ns is the default, false if you intend to\nload the code via some other method.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/genclass.clj#L508\">Source</a>  <br>  <h2 id=\"clojure.core/gen-interface\">gen-interface<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (gen-interface &amp; options)\n</pre> <pre id=\"var-docstr\">When compiling, generates compiled bytecode for an interface with\n the given package-qualified :name (which, as all names in these\n parameters, can be a string or symbol), and writes the .class file\n to the *compile-path* directory.  When not compiling, does nothing.\n\n In all subsequent sections taking types, the primitive types can be\n referred to by their Java names (int, float etc), and classes in the\n java.lang package can be used without a package qualifier. All other\n classes must be fully qualified.\n\n Options should be a set of key/value pairs, all except for :name are\n optional:\n\n :name aname\n\n The package-qualified name of the class to be generated\n\n :extends [interface ...]\n\n One or more interfaces, which will be extended by this interface.\n\n :methods [ [name [param-types] return-type], ...]\n\n This parameter is used to specify the signatures of the methods of\n the generated interface.  Do not repeat superinterface signatures\n here.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/genclass.clj#L688\">Source</a>  <br>  <h2 id=\"clojure.core/gensym\">gensym<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (gensym)\n       (gensym prefix-string)\n</pre> <pre id=\"var-docstr\">Returns a new symbol with a unique name. If a prefix string is\nsupplied, the name is prefix# where # is some unique number. If\nprefix is not supplied, the prefix is 'G__'.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L555\">Source</a>  <br>  <h2 id=\"clojure.core/get\">get<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get map key)\n       (get map key not-found)\n</pre> <pre id=\"var-docstr\">Returns the value mapped to key, not-found or nil if key not present.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1423\">Source</a>  <br>  <h2 id=\"clojure.core/get-in\">get-in<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-in m ks)\n       (get-in m ks not-found)\n</pre> <pre id=\"var-docstr\">Returns the value in a nested associative structure,\nwhere ks is a sequence of keys. Returns nil if the key\nis not present, or the not-found value if supplied.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5882\">Source</a>  <br>  <h2 id=\"clojure.core/get-method\">get-method<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-method multifn dispatch-val)\n</pre> <pre id=\"var-docstr\">Given a multimethod and a dispatch value, returns the dispatch fn\nthat would apply to that value, or nil if none apply and no default</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1703\">Source</a>  <br>  <h2 id=\"clojure.core/get-proxy-class\">get-proxy-class<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-proxy-class &amp; bases)\n</pre> <pre id=\"var-docstr\">Takes an optional single class followed by zero or more\ninterfaces. If not supplied class defaults to Object.  Creates an\nreturns an instance of a proxy class derived from the supplied\nclasses. The resulting value is cached and used for any subsequent\nrequests for the same class set. Returns a Class object.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L250\">Source</a>  <br>  <h2 id=\"clojure.core/get-thread-bindings\">get-thread-bindings<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-thread-bindings)\n</pre> <pre id=\"var-docstr\">Get a map with the Var/value pairs which is currently in effect for the\ncurrent thread.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1825\">Source</a>  <br>  <h2 id=\"clojure.core/get-validator\">get-validator<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-validator iref)\n</pre> <pre id=\"var-docstr\">Gets the validator-fn for a var/ref/agent/atom.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2269\">Source</a>  <br>  <h2 id=\"clojure.core/group-by\">group-by<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (group-by f coll)\n</pre> <pre id=\"var-docstr\">Returns a map of the elements of coll keyed by the result of\nf on each element. The value at each key will be a vector of the\ncorresponding elements, in the order they appeared in coll.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6853\">Source</a>  <br>  <h2 id=\"clojure.core/hash\">hash<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (hash x)\n</pre> <pre id=\"var-docstr\">Returns the hash code of its argument. Note this is the hash code\nconsistent with =, and thus is different than .hashCode for Integer,\nShort, Byte and Clojure collections.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4937\">Source</a>  <br>  <h2 id=\"clojure.core/hash-map\">hash-map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (hash-map)\n       (hash-map &amp; keyvals)\n</pre> <pre id=\"var-docstr\">keyval =&gt; key val\nReturns a new hash map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L363\">Source</a>  <br>  <h2 id=\"clojure.core/hash-ordered-coll\">hash-ordered-coll<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (hash-ordered-coll coll)\n</pre> <pre id=\"var-docstr\">Returns the hash code, consistent with =, for an external ordered\ncollection implementing Iterable.\nSee <a href=\"http://clojure.org/data_structures#hash\">http://clojure.org/data_structures#hash</a> for full algorithms.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4958\">Source</a>  <br>  <h2 id=\"clojure.core/hash-set\">hash-set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (hash-set)\n       (hash-set &amp; keys)\n</pre> <pre id=\"var-docstr\">Returns a new hash set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L373\">Source</a>  <br>  <h2 id=\"clojure.core/hash-unordered-coll\">hash-unordered-coll<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (hash-unordered-coll coll)\n</pre> <pre id=\"var-docstr\">Returns the hash code, consistent with =, for an external unordered\ncollection implementing Iterable. For maps, the iterator should\nreturn map entries whose hash is computed as\n  (hash-ordered-coll [k v]).\nSee <a href=\"http://clojure.org/data_structures#hash\">http://clojure.org/data_structures#hash</a> for full algorithms.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4967\">Source</a>  <br>  <h2 id=\"clojure.core/identical?\">identical?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (identical? x y)\n</pre> <pre id=\"var-docstr\">Tests if 2 arguments are the same object</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L740\">Source</a>  <br>  <h2 id=\"clojure.core/identity\">identity<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (identity x)\n</pre> <pre id=\"var-docstr\">Returns its argument.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1386\">Source</a>  <br>  <h2 id=\"clojure.core/if\">if<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (if test then else?)\n</pre> <pre id=\"var-docstr\">Evaluates test. If not the singular values nil or false,\nevaluates and yields then, otherwise, evaluates and yields else. If\nelse is not supplied it defaults to nil.\n\nPlease see <a href=\"http://clojure.org/special_forms#if\">http://clojure.org/special_forms#if</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/if-let\">if-let<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (if-let bindings then)\n       (if-let bindings then else &amp; oldform)\n</pre> <pre id=\"var-docstr\">bindings =&gt; binding-form test\n\nIf test is true, evaluates then with binding-form bound to the value of \ntest, if not, yields else</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1727\">Source</a>  <br>  <h2 id=\"clojure.core/if-not\">if-not<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (if-not test then)\n       (if-not test then else)\n</pre> <pre id=\"var-docstr\">Evaluates test. If logical false, evaluates and returns then expr, \notherwise else expr, if supplied, else nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L732\">Source</a>  <br>  <h2 id=\"clojure.core/if-some\">if-some<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (if-some bindings then)\n       (if-some bindings then else &amp; oldform)\n</pre> <pre id=\"var-docstr\">bindings =&gt; binding-form test\n\nIf test is not nil, evaluates then with binding-form bound to the\nvalue of test, if not, yields else</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1762\">Source</a>  <br>  <h2 id=\"clojure.core/ifn?\">ifn?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ifn? x)\n</pre> <pre id=\"var-docstr\">Returns true if x implements IFn. Note that many data structures\n(e.g. sets and maps) implement IFn</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5962\">Source</a>  <br>  <h2 id=\"clojure.core/import\">import<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (import &amp; import-symbols-or-lists)\n</pre> <pre id=\"var-docstr\">import-list =&gt; (package-symbol class-name-symbols*)\n\nFor each name in class-name-symbols, adds a mapping from name to the\nclass named by package.name to the current namespace. Use :import in the ns\nmacro in preference to calling this directly.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3292\">Source</a>  <br>  <h2 id=\"clojure.core/in-ns\">in-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (in-ns name)\n</pre> <pre id=\"var-docstr\">Sets *ns* to the namespace named by the symbol, creating it if needed.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/inc\">inc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inc x)\n</pre> <pre id=\"var-docstr\">Returns a number one greater than num. Does not auto-promote\nlongs, will throw on overflow. See also: inc'</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L887\">Source</a>  <br>  <h2 id=\"clojure.core/inc'\">inc'<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inc' x)\n</pre> <pre id=\"var-docstr\">Returns a number one greater than num. Supports arbitrary precision.\nSee also: inc</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L880\">Source</a>  <br>  <h2 id=\"clojure.core/init-proxy\">init-proxy<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (init-proxy proxy mappings)\n</pre> <pre id=\"var-docstr\">Takes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nsets the proxy's fn map.  Returns the proxy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L271\">Source</a>  <br>  <h2 id=\"clojure.core/instance?\">instance?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (instance? c x)\n</pre> <pre id=\"var-docstr\">Evaluates x and tests if it is an instance of the class\nc. Returns true or false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L139\">Source</a>  <br>  <h2 id=\"clojure.core/int\">int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (int x)\n</pre> <pre id=\"var-docstr\">Coerce to int</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L847\">Source</a>  <br>  <h2 id=\"clojure.core/int-array\">int-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (int-array size-or-seq)\n       (int-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of ints</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5104\">Source</a>  <br>  <h2 id=\"clojure.core/integer?\">integer?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (integer? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is an integer</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1339\">Source</a>  <br>  <h2 id=\"clojure.core/interleave\">interleave<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (interleave)\n       (interleave c1)\n       (interleave c1 c2)\n       (interleave c1 c2 &amp; colls)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq of the first item in each coll, then the second etc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4155\">Source</a>  <br>  <h2 id=\"clojure.core/intern\">intern<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (intern ns name)\n       (intern ns name val)\n</pre> <pre id=\"var-docstr\">Finds or creates a var named by the symbol name in the namespace\nns (which can be a symbol or a namespace), setting its root binding\nto val if supplied. The namespace must exist. The var will adopt any\nmetadata from the name symbol.  Returns the var.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6044\">Source</a>  <br>  <h2 id=\"clojure.core/interpose\">interpose<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (interpose sep)\n       (interpose sep coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq of the elements of coll separated by sep.\nReturns a stateful transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4978\">Source</a>  <br>  <h2 id=\"clojure.core/into\">into<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (into to from)\n       (into to xform from)\n</pre> <pre id=\"var-docstr\">Returns a new coll consisting of to-coll with all of the items of\nfrom-coll conjoined. A transducer may be supplied.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6593\">Source</a>  <br>  <h2 id=\"clojure.core/into-array\">into-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (into-array aseq)\n       (into-array type aseq)\n</pre> <pre id=\"var-docstr\">Returns an array with components set to the values in aseq. The array's\ncomponent type is type if provided, or the type of the first value in\naseq if present, or Object. All values in aseq must be compatible with\nthe component type. Class objects for the primitive types can be obtained\nusing, e.g., Integer/TYPE.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3310\">Source</a>  <br>  <h2 id=\"clojure.core/ints\">ints<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ints xs)\n</pre> <pre id=\"var-docstr\">Casts to int[]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5145\">Source</a>  <br>  <h2 id=\"clojure.core/io!\">io!<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (io! &amp; body)\n</pre> <pre id=\"var-docstr\">If an io! block occurs in a transaction, throws an\nIllegalStateException, else runs body in an implicit do. If the\nfirst expression in body is a literal string, will use that as the\nexception message.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2381\">Source</a>  <br>  <h2 id=\"clojure.core/isa?\">isa?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (isa? child parent)\n       (isa? h child parent)\n</pre> <pre id=\"var-docstr\">Returns true if (= child parent), or child is directly or indirectly derived from\nparent, either via a Java type inheritance relationship or a\nrelationship established via derive. h must be a hierarchy obtained\nfrom make-hierarchy, if not supplied defaults to the global\nhierarchy</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5329\">Source</a>  <br>  <h2 id=\"clojure.core/iterate\">iterate<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (iterate f x)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2882\">Source</a>  <br>  <h2 id=\"clojure.core/iterator-seq\">iterator-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (iterator-seq iter)\n</pre> <pre id=\"var-docstr\">Returns a seq on a java.util.Iterator. Note that most collections\nproviding iterators implement Iterable and thus support seq directly.\nSeqs cache values, thus iterator-seq should not be used on any\niterator that repeatedly returns the same mutable object.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5486\">Source</a>  <br>  <h2 id=\"clojure.core/juxt\">juxt<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (juxt f)\n       (juxt f g)\n       (juxt f g h)\n       (juxt f g h &amp; fs)\n</pre> <pre id=\"var-docstr\">Takes a set of functions and returns a fn that is the juxtaposition\nof those fns.  The returned fn takes a variable number of args, and\nreturns a vector containing the result of applying each fn to the\nargs (left-to-right).\n((juxt a b c) x) =&gt; [(a x) (b x) (c x)]</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2445\">Source</a>  <br>  <h2 id=\"clojure.core/keep\">keep<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keep f)\n       (keep f coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the non-nil results of (f item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7020\">Source</a>  <br>  <h2 id=\"clojure.core/keep-indexed\">keep-indexed<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keep-indexed f)\n       (keep-indexed f coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the non-nil results of (f index item). Note,\nthis means false return values will be included.  f must be free of\nside-effects.  Returns a stateful transducer when no collection is\nprovided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7053\">Source</a>  <br>  <h2 id=\"clojure.core/key\">key<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (key e)\n</pre> <pre id=\"var-docstr\">Returns the key of the map entry.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1496\">Source</a>  <br>  <h2 id=\"clojure.core/keys\">keys<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keys map)\n</pre> <pre id=\"var-docstr\">Returns a sequence of the map's keys, in the same order as (seq map).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1484\">Source</a>  <br>  <h2 id=\"clojure.core/keyword\">keyword<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keyword name)\n       (keyword ns name)\n</pre> <pre id=\"var-docstr\">Returns a Keyword with the given namespace and name.  Do not use :\nin the keyword strings, it will be added automatically.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L579\">Source</a>  <br>  <h2 id=\"clojure.core/keyword?\">keyword?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keyword? x)\n</pre> <pre id=\"var-docstr\">Return true if x is a Keyword</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L541\">Source</a>  <br>  <h2 id=\"clojure.core/last\">last<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (last coll)\n</pre> <pre id=\"var-docstr\">Return the last item in coll, in linear time</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L249\">Source</a>  <br>  <h2 id=\"clojure.core/lazy-cat\">lazy-cat<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (lazy-cat &amp; colls)\n</pre> <pre id=\"var-docstr\">Expands to code which yields a lazy sequence of the concatenation\nof the supplied colls.  Each coll expr is not evaluated until it is\nneeded. \n\n(lazy-cat xs ys zs) === (concat (lazy-seq xs) (lazy-seq ys) (lazy-seq zs))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4434\">Source</a>  <br>  <h2 id=\"clojure.core/lazy-seq\">lazy-seq<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (lazy-seq &amp; body)\n</pre> <pre id=\"var-docstr\">Takes a body of expressions that returns an ISeq or nil, and yields\na Seqable object that will invoke the body only the first time seq\nis called, and will cache the result and return it on all subsequent\nseq calls. See also - realized?</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L648\">Source</a>  <br>  <h2 id=\"clojure.core/let\">let<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (let [bindings*] exprs*)\n</pre> <pre id=\"var-docstr\">binding =&gt; binding-form init-expr\n\nEvaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4301\">Source</a>  <br>  <h2 id=\"clojure.core/letfn\">letfn<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (letfn [fnspecs*] exprs*)\n</pre> <pre id=\"var-docstr\">fnspec ==&gt; (fname [params*] exprs) or (fname ([params*] exprs)+)\n\nTakes a vector of function specs and a body, and generates a set of\nbindings of functions to their names. All of the names are available\nin all of the definitions of the functions, as well as the body.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6271\">Source</a>  <br>  <h2 id=\"clojure.core/line-seq\">line-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (line-seq rdr)\n</pre> <pre id=\"var-docstr\">Returns the lines of text from rdr as a lazy sequence of strings.\nrdr must implement java.io.BufferedReader.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2954\">Source</a>  <br>  <h2 id=\"clojure.core/list\">list<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (list &amp; items)\n</pre> <pre id=\"var-docstr\">Creates a new list containing the items.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L16\">Source</a>  <br>  <h2 id=\"clojure.core/list*\">list*<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (list* args)\n       (list* a args)\n       (list* a b args)\n       (list* a b c args)\n       (list* a b c d &amp; more)\n</pre> <pre id=\"var-docstr\">Creates a new list containing the items prepended to the rest, the\nlast of which will be treated as a sequence.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L613\">Source</a>  <br>  <h2 id=\"clojure.core/list?\">list?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (list? x)\n</pre> <pre id=\"var-docstr\">Returns true if x implements IPersistentList</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5956\">Source</a>  <br>  <h2 id=\"clojure.core/load\">load<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (load &amp; paths)\n</pre> <pre id=\"var-docstr\">Loads Clojure code from resources in classpath. A path is interpreted as\nclasspath-relative if it begins with a slash or relative to the root\ndirectory for the current namespace otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5850\">Source</a>  <br>  <h2 id=\"clojure.core/load-file\">load-file<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (load-file name)\n</pre> <pre id=\"var-docstr\">Sequentially read and evaluate the set of forms contained in the file.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/load-reader\">load-reader<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (load-reader rdr)\n</pre> <pre id=\"var-docstr\">Sequentially read and evaluate the set of forms contained in the\nstream/file</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3928\">Source</a>  <br>  <h2 id=\"clojure.core/load-string\">load-string<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (load-string s)\n</pre> <pre id=\"var-docstr\">Sequentially read and evaluate the set of forms contained in the\nstring</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3935\">Source</a>  <br>  <h2 id=\"clojure.core/loaded-libs\">loaded-libs<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (loaded-libs)\n</pre> <pre id=\"var-docstr\">Returns a sorted set of symbols naming the currently loaded libs</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5845\">Source</a>  <br>  <h2 id=\"clojure.core/locking\">locking<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (locking x &amp; body)\n</pre> <pre id=\"var-docstr\">Executes exprs in an implicit do, while holding the monitor of x.\nWill release the monitor of x in all circumstances.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1534\">Source</a>  <br>  <h2 id=\"clojure.core/long\">long<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (long x)\n</pre> <pre id=\"var-docstr\">Coerce to long</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3347\">Source</a>  <br>  <h2 id=\"clojure.core/long-array\">long-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (long-array size-or-seq)\n       (long-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of longs</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5112\">Source</a>  <br>  <h2 id=\"clojure.core/longs\">longs<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (longs xs)\n</pre> <pre id=\"var-docstr\">Casts to long[]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5155\">Source</a>  <br>  <h2 id=\"clojure.core/loop\">loop<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (loop [bindings*] exprs*)\n</pre> <pre id=\"var-docstr\">Evaluates the exprs in a lexical context in which the symbols in\nthe binding-forms are bound to their respective init-exprs or parts\ntherein. Acts as a recur target.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4395\">Source</a>  <br>  <h2 id=\"clojure.core/macroexpand\">macroexpand<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (macroexpand form)\n</pre> <pre id=\"var-docstr\">Repeatedly calls macroexpand-1 on form until it no longer\nrepresents a macro form, then returns it.  Note neither\nmacroexpand-1 nor macroexpand expand macros in subforms.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3872\">Source</a>  <br>  <h2 id=\"clojure.core/macroexpand-1\">macroexpand-1<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (macroexpand-1 form)\n</pre> <pre id=\"var-docstr\">If form represents a macro form, returns its expansion,\nelse returns form.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3864\">Source</a>  <br>  <h2 id=\"clojure.core/make-array\">make-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (make-array type len)\n       (make-array type dim &amp; more-dims)\n</pre> <pre id=\"var-docstr\">Creates and returns an array of instances of the specified class of\nthe specified dimension(s).  Note that a class object is required.\nClass objects can be obtained by using their imported or\nfully-qualified name.  Class objects for the primitive types can be\nobtained using, e.g., Integer/TYPE.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3832\">Source</a>  <br>  <h2 id=\"clojure.core/make-hierarchy\">make-hierarchy<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (make-hierarchy)\n</pre> <pre id=\"var-docstr\">Creates a hierarchy object for use with derive, isa? etc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5293\">Source</a>  <br>  <h2 id=\"clojure.core/map\">map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map f)\n       (map f coll)\n       (map f c1 c2)\n       (map f c1 c2 c3)\n       (map f c1 c2 c3 &amp; colls)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence consisting of the result of applying f to\nthe set of first items of each coll, followed by applying f to the\nset of second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments. Returns a transducer when\nno collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2596\">Source</a>  <br>  <h2 id=\"clojure.core/map-indexed\">map-indexed<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map-indexed f)\n       (map-indexed f coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence consisting of the result of applying f to 0\nand the first item of coll, followed by applying f to 1 and the second\nitem in coll, etc, until coll is exhausted. Thus function f should\naccept 2 arguments, index and item. Returns a stateful transducer when\nno collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6990\">Source</a>  <br>  <h2 id=\"clojure.core/map?\">map?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map? x)\n</pre> <pre id=\"var-docstr\">Return true if x implements IPersistentMap</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L167\">Source</a>  <br>  <h2 id=\"clojure.core/mapcat\">mapcat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (mapcat f)\n       (mapcat f &amp; colls)\n</pre> <pre id=\"var-docstr\">Returns the result of applying concat to the result of applying map\nto f and colls.  Thus function f should return a collection. Returns\na transducer when no collections are provided</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2652\">Source</a>  <br>  <h2 id=\"clojure.core/mapv\">mapv<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (mapv f coll)\n       (mapv f c1 c2)\n       (mapv f c1 c2 c3)\n       (mapv f c1 c2 c3 &amp; colls)\n</pre> <pre id=\"var-docstr\">Returns a vector consisting of the result of applying f to the\nset of first items of each coll, followed by applying f to the set\nof second items in each coll, until any one of the colls is\nexhausted.  Any remaining items in other colls are ignored. Function\nf should accept number-of-colls arguments.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6607\">Source</a>  <br>  <h2 id=\"clojure.core/max\">max<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (max x)\n       (max x y)\n       (max x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the greatest of the nums.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1080\">Source</a>  <br>  <h2 id=\"clojure.core/max-key\">max-key<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (max-key k x)\n       (max-key k x y)\n       (max-key k x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the x for which (k x), a number, is greatest.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4783\">Source</a>  <br>  <h2 id=\"clojure.core/memfn\">memfn<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (memfn name &amp; args)\n</pre> <pre id=\"var-docstr\">Expands into code that creates a fn that expects to be passed an\nobject and any args and calls the named instance method on the\nobject passing the args. Use when you want to treat a Java method as\na first-class fn. name may be type-hinted with the method receiver's\ntype in order to avoid reflective calls.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3717\">Source</a>  <br>  <h2 id=\"clojure.core/memoize\">memoize<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (memoize f)\n</pre> <pre id=\"var-docstr\">Returns a memoized version of a referentially transparent function. The\nmemoized version of the function keeps a cache of the mapping from arguments\nto results and, when calls with the same arguments are repeated often, has\nhigher performance at the expense of higher memory use.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6070\">Source</a>  <br>  <h2 id=\"clojure.core/merge\">merge<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (merge &amp; maps)\n</pre> <pre id=\"var-docstr\">Returns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping from\nthe latter (left-to-right) will be the mapping in the result.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2910\">Source</a>  <br>  <h2 id=\"clojure.core/merge-with\">merge-with<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (merge-with f &amp; maps)\n</pre> <pre id=\"var-docstr\">Returns a map that consists of the rest of the maps conj-ed onto\nthe first.  If a key occurs in more than one map, the mapping(s)\nfrom the latter (left-to-right) will be combined with the mapping in\nthe result by calling (f val-in-result val-in-latter).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2920\">Source</a>  <br>  <h2 id=\"clojure.core/meta\">meta<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (meta obj)\n</pre> <pre id=\"var-docstr\">Returns the metadata of obj, returns nil if there is no metadata.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L202\">Source</a>  <br>  <h2 id=\"clojure.core/methods\">methods<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (methods multifn)\n</pre> <pre id=\"var-docstr\">Given a multimethod, returns a map of dispatch values -&gt; dispatch fns</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1697\">Source</a>  <br>  <h2 id=\"clojure.core/min\">min<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (min x)\n       (min x y)\n       (min x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the least of the nums.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1090\">Source</a>  <br>  <h2 id=\"clojure.core/min-key\">min-key<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (min-key k x)\n       (min-key k x y)\n       (min-key k x y &amp; more)\n</pre> <pre id=\"var-docstr\">Returns the x for which (k x), a number, is least.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4792\">Source</a>  <br>  <h2 id=\"clojure.core/mix-collection-hash\">mix-collection-hash<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (mix-collection-hash hash-basis count)\n</pre> <pre id=\"var-docstr\">Mix final collection hash for ordered or unordered collections.\nhash-basis is the combined collection hash, count is the number\nof elements included in the basis. Note this is the hash code\nconsistent with =, different from .hashCode.\nSee <a href=\"http://clojure.org/data_structures#hash\">http://clojure.org/data_structures#hash</a> for full algorithms.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4947\">Source</a>  <br>  <h2 id=\"clojure.core/mod\">mod<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (mod num div)\n</pre> <pre id=\"var-docstr\">Modulus of num and div. Truncates toward negative infinity.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3440\">Source</a>  <br>  <h2 id=\"clojure.core/monitor-enter\">monitor-enter<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (monitor-enter x)\n</pre> <pre id=\"var-docstr\">Synchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see <a href=\"http://clojure.org/special_forms#monitor-enter\">http://clojure.org/special_forms#monitor-enter</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/monitor-exit\">monitor-exit<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (monitor-exit x)\n</pre> <pre id=\"var-docstr\">Synchronization primitive that should be avoided\nin user code. Use the 'locking' macro.\n\nPlease see <a href=\"http://clojure.org/special_forms#monitor-exit\">http://clojure.org/special_forms#monitor-exit</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/name\">name<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (name x)\n</pre> <pre id=\"var-docstr\">Returns the name String of a string, symbol or keyword.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1518\">Source</a>  <br>  <h2 id=\"clojure.core/namespace\">namespace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (namespace x)\n</pre> <pre id=\"var-docstr\">Returns the namespace String of a symbol or keyword, or nil if not present.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1526\">Source</a>  <br>  <h2 id=\"clojure.core/namespace-munge\">namespace-munge<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (namespace-munge ns)\n</pre> <pre id=\"var-docstr\">Convert a Clojure namespace name to a legal Java package name.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L13\">Source</a>  <br>  <h2 id=\"clojure.core/neg?\">neg?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (neg? x)\n</pre> <pre id=\"var-docstr\">Returns true if num is less than zero, else false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1219\">Source</a>  <br>  <h2 id=\"clojure.core/new\">new<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (Classname. args*)\n       (new Classname args*)\n</pre> <pre id=\"var-docstr\">The args, if any, are evaluated from left to right, and\npassed to the constructor of the class named by Classname. The\nconstructed object is returned.\n\nPlease see <a href=\"http://clojure.org/java_interop#new\">http://clojure.org/java_interop#new</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/newline\">newline<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (newline)\n</pre> <pre id=\"var-docstr\">Writes a platform-specific newline to *out*</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3571\">Source</a>  <br>  <h2 id=\"clojure.core/next\">next<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (next coll)\n</pre> <pre id=\"var-docstr\">Returns a seq of the items after the first. Calls seq on its\nargument.  If there are no more items, returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L57\">Source</a>  <br>  <h2 id=\"clojure.core/nfirst\">nfirst<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nfirst x)\n</pre> <pre id=\"var-docstr\">Same as (next (first x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L105\">Source</a>  <br>  <h2 id=\"clojure.core/nil?\">nil?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nil? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is nil, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L420\">Source</a>  <br>  <h2 id=\"clojure.core/nnext\">nnext<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nnext x)\n</pre> <pre id=\"var-docstr\">Same as (next (next x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L119\">Source</a>  <br>  <h2 id=\"clojure.core/not\">not<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (not x)\n</pre> <pre id=\"var-docstr\">Returns true if x is logical false, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L503\">Source</a>  <br>  <h2 id=\"clojure.core/not-any?\">not-any?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (not-any? pred coll)\n</pre> <pre id=\"var-docstr\">Returns false if (pred x) is logical true for any x in coll,\nelse true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2572\">Source</a>  <br>  <h2 id=\"clojure.core/not-empty\">not-empty<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (not-empty coll)\n</pre> <pre id=\"var-docstr\">If coll is empty, returns nil, else coll</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5302\">Source</a>  <br>  <h2 id=\"clojure.core/not-every?\">not-every?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (not-every? pred coll)\n</pre> <pre id=\"var-docstr\">Returns false if (pred x) is logical true for every x in\ncoll, else true.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2553\">Source</a>  <br>  <h2 id=\"clojure.core/not=\">not=<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (not= x)\n       (not= x y)\n       (not= x y &amp; more)\n</pre> <pre id=\"var-docstr\">Same as (not (= obj1 obj2))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L784\">Source</a>  <br>  <h2 id=\"clojure.core/ns\">ns<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns name docstring? attr-map? references*)\n</pre> <pre id=\"var-docstr\">Sets *ns* to the namespace named by name (unevaluated), creating it\nif needed.  references can be zero or more of: (:refer-clojure ...)\n(:require ...) (:use ...) (:import ...) (:load ...) (:gen-class)\nwith the syntax of refer-clojure/require/use/import/load/gen-class\nrespectively, except the arguments are unevaluated and need not be\nquoted. (:gen-class ...), when supplied, defaults to :name\ncorresponding to the ns name, :main true, :impl-ns same as ns, and\n:init-impl-ns true. All options of gen-class are\nsupported. The :gen-class directive is ignored when not\ncompiling. If :gen-class is not supplied, when compiled only an\nnsname__init.class will be generated. If :refer-clojure is not used, a\ndefault (refer 'clojure.core) is used.  Use of ns is preferred to\nindividual calls to in-ns/require/use/import:\n\n(ns foo.bar\n  (:refer-clojure :exclude [ancestors printf])\n  (:require (clojure.contrib sql combinatorics))\n  (:use (my.lib this that))\n  (:import (java.util Date Timer Random)\n           (java.sql Connection Statement)))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5529\">Source</a>  <br>  <h2 id=\"clojure.core/ns-aliases\">ns-aliases<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-aliases ns)\n</pre> <pre id=\"var-docstr\">Returns a map of the aliases for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4120\">Source</a>  <br>  <h2 id=\"clojure.core/ns-imports\">ns-imports<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-imports ns)\n</pre> <pre id=\"var-docstr\">Returns a map of the import mappings for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4046\">Source</a>  <br>  <h2 id=\"clojure.core/ns-interns\">ns-interns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-interns ns)\n</pre> <pre id=\"var-docstr\">Returns a map of the intern mappings for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4053\">Source</a>  <br>  <h2 id=\"clojure.core/ns-map\">ns-map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-map ns)\n</pre> <pre id=\"var-docstr\">Returns a map of all the mappings for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4017\">Source</a>  <br>  <h2 id=\"clojure.core/ns-name\">ns-name<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-name ns)\n</pre> <pre id=\"var-docstr\">Returns the name of the namespace, a symbol.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4010\">Source</a>  <br>  <h2 id=\"clojure.core/ns-publics\">ns-publics<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-publics ns)\n</pre> <pre id=\"var-docstr\">Returns a map of the public intern mappings for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4035\">Source</a>  <br>  <h2 id=\"clojure.core/ns-refers\">ns-refers<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-refers ns)\n</pre> <pre id=\"var-docstr\">Returns a map of the refer mappings for the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4100\">Source</a>  <br>  <h2 id=\"clojure.core/ns-resolve\">ns-resolve<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-resolve ns sym)\n       (ns-resolve ns env sym)\n</pre> <pre id=\"var-docstr\">Returns the var or Class to which a symbol will be resolved in the\nnamespace (unless found in the environment), else nil.  Note that\nif the symbol is fully qualified, the var/Class to which it resolves\nneed not be present in the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4205\">Source</a>  <br>  <h2 id=\"clojure.core/ns-unalias\">ns-unalias<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-unalias ns sym)\n</pre> <pre id=\"var-docstr\">Removes the alias for the symbol from the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4127\">Source</a>  <br>  <h2 id=\"clojure.core/ns-unmap\">ns-unmap<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ns-unmap ns sym)\n</pre> <pre id=\"var-docstr\">Removes the mappings for the symbol from the namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4024\">Source</a>  <br>  <h2 id=\"clojure.core/nth\">nth<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nth coll index)\n       (nth coll index not-found)\n</pre> <pre id=\"var-docstr\">Returns the value at the index. get returns nil if index out of\nbounds, nth throws an exception unless not-found is supplied.  nth\nalso works for strings, Java arrays, regex Matchers and Lists, and,\nin O(n) time, for sequences.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L854\">Source</a>  <br>  <h2 id=\"clojure.core/nthnext\">nthnext<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nthnext coll n)\n</pre> <pre id=\"var-docstr\">Returns the nth next of coll, (seq coll) when n is 0.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3031\">Source</a>  <br>  <h2 id=\"clojure.core/nthrest\">nthrest<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (nthrest coll n)\n</pre> <pre id=\"var-docstr\">Returns the nth rest of coll, coll when n is 0.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3041\">Source</a>  <br>  <h2 id=\"clojure.core/num\">num<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (num x)\n</pre> <pre id=\"var-docstr\">Coerce to Number</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3340\">Source</a>  <br>  <h2 id=\"clojure.core/number?\">number?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (number? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is a Number</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3433\">Source</a>  <br>  <h2 id=\"clojure.core/numerator\">numerator<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (numerator r)\n</pre> <pre id=\"var-docstr\">Returns the numerator part of a Ratio.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3456\">Source</a>  <br>  <h2 id=\"clojure.core/object-array\">object-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (object-array size-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of objects</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5097\">Source</a>  <br>  <h2 id=\"clojure.core/odd?\">odd?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (odd? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is odd, throws an exception if n is not an integer</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1359\">Source</a>  <br>  <h2 id=\"clojure.core/or\">or<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (or)\n       (or x)\n       (or x &amp; next)\n</pre> <pre id=\"var-docstr\">Evaluates exprs one at a time, from left to right. If a form\nreturns a logical true value, or returns that value and doesn't\nevaluate any of the other expressions, otherwise it returns the\nvalue of the last expression. (or) returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L819\">Source</a>  <br>  <h2 id=\"clojure.core/parents\">parents<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (parents tag)\n       (parents h tag)\n</pre> <pre id=\"var-docstr\">Returns the immediate parents of tag, either via a Java type\ninheritance relationship or a relationship established via derive. h\nmust be a hierarchy obtained from make-hierarchy, if not supplied\ndefaults to the global hierarchy</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5350\">Source</a>  <br>  <h2 id=\"clojure.core/partial\">partial<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (partial f)\n       (partial f arg1)\n       (partial f arg1 arg2)\n       (partial f arg1 arg2 arg3)\n       (partial f arg1 arg2 arg3 &amp; more)\n</pre> <pre id=\"var-docstr\">Takes a function f and fewer than the normal arguments to f, and\nreturns a fn that takes a variable number of additional args. When\ncalled, the returned function calls f with args + additional args.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2483\">Source</a>  <br>  <h2 id=\"clojure.core/partition\">partition<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (partition n coll)\n       (partition n step coll)\n       (partition n step pad coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of lists of n items each, at offsets step\napart. If step is not supplied, defaults to n, i.e. the partitions\ndo not overlap. If a pad collection is supplied, use its elements as\nnecessary to complete last partition upto n items. In case there are\nnot enough padding elements, return a partition with less than n items.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3051\">Source</a>  <br>  <h2 id=\"clojure.core/partition-all\">partition-all<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (partition-all n)\n       (partition-all n coll)\n       (partition-all n step coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of lists like partition, but may include\npartitions with fewer than n items at the end.  Returns a stateful\ntransducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6947\">Source</a>  <br>  <h2 id=\"clojure.core/partition-by\">partition-by<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (partition-by f)\n       (partition-by f coll)\n</pre> <pre id=\"var-docstr\">Applies f to each value in coll, splitting it each time f returns a\nnew value.  Returns a lazy seq of partitions.  Returns a stateful\ntransducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6867\">Source</a>  <br>  <h2 id=\"clojure.core/pcalls\">pcalls<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pcalls &amp; fns)\n</pre> <pre id=\"var-docstr\">Executes the no-arg fns in parallel, returning a lazy sequence of\ntheir values</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6744\">Source</a>  <br>  <h2 id=\"clojure.core/peek\">peek<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (peek coll)\n</pre> <pre id=\"var-docstr\">For a list or queue, same as first, for a vector, same as, but much\nmore efficient than, last. If the collection is empty, returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1395\">Source</a>  <br>  <h2 id=\"clojure.core/persistent!\">persistent!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (persistent! coll)\n</pre> <pre id=\"var-docstr\">Returns a new, persistent version of the transient collection, in\nconstant time. The transient collection cannot be used after this\ncall, any such use will throw an exception.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3216\">Source</a>  <br>  <h2 id=\"clojure.core/pmap\">pmap<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pmap f coll)\n       (pmap f coll &amp; colls)\n</pre> <pre id=\"var-docstr\">Like map, except f is applied in parallel. Semi-lazy in that the\nparallel computation stays ahead of the consumption, but doesn't\nrealize the entire result unless required. Only useful for\ncomputationally intensive functions where the time of f dominates\nthe coordination overhead.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6719\">Source</a>  <br>  <h2 id=\"clojure.core/pop\">pop<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pop coll)\n</pre> <pre id=\"var-docstr\">For a list or queue, returns a new list/queue without the first\nitem, for a vector, returns a new vector without the last item. If\nthe collection is empty, throws an exception.  Note - not the same\nas next/butlast.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1402\">Source</a>  <br>  <h2 id=\"clojure.core/pop!\">pop!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pop! coll)\n</pre> <pre id=\"var-docstr\">Removes the last item from a transient vector. If\nthe collection is empty, throws an exception. Returns coll</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3259\">Source</a>  <br>  <h2 id=\"clojure.core/pop-thread-bindings\">pop-thread-bindings<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pop-thread-bindings)\n</pre> <pre id=\"var-docstr\">Pop one set of bindings pushed with push-binding before. It is an error to\npop bindings without pushing before.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1817\">Source</a>  <br>  <h2 id=\"clojure.core/pos?\">pos?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pos? x)\n</pre> <pre id=\"var-docstr\">Returns true if num is greater than zero, else false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1212\">Source</a>  <br>  <h2 id=\"clojure.core/pr\">pr<span id=\"var-type\" class=\"type\">dynamic function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pr)\n       (pr x)\n       (pr x &amp; more)\n</pre> <pre id=\"var-docstr\">Prints the object(s) to the output stream that is the current value\nof *out*.  Prints the object(s), separated by spaces if there is\nmore than one.  By default, pr and prn print in a way that objects\ncan be read by the reader</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3551\">Source</a>  <br>  <h2 id=\"clojure.core/pr-str\">pr-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pr-str &amp; xs)\n</pre> <pre id=\"var-docstr\">pr to a string, returning it</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4556\">Source</a>  <br>  <h2 id=\"clojure.core/prefer-method\">prefer-method<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prefer-method multifn dispatch-val-x dispatch-val-y)\n</pre> <pre id=\"var-docstr\">Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y \nwhen there is a conflict</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1689\">Source</a>  <br>  <h2 id=\"clojure.core/prefers\">prefers<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prefers multifn)\n</pre> <pre id=\"var-docstr\">Given a multimethod, returns a map of preferred value -&gt; set of other values</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1710\">Source</a>  <br>  <h2 id=\"clojure.core/print\">print<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print &amp; more)\n</pre> <pre id=\"var-docstr\">Prints the object(s) to the output stream that is the current value\nof *out*.  print and println produce output for human consumption.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3598\">Source</a>  <br>  <h2 id=\"clojure.core/print-str\">print-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-str &amp; xs)\n</pre> <pre id=\"var-docstr\">print to a string, returning it</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4574\">Source</a>  <br>  <h2 id=\"clojure.core/printf\">printf<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (printf fmt &amp; args)\n</pre> <pre id=\"var-docstr\">Prints formatted output, as per format</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5511\">Source</a>  <br>  <h2 id=\"clojure.core/println\">println<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (println &amp; more)\n</pre> <pre id=\"var-docstr\">Same as print followed by (newline)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3607\">Source</a>  <br>  <h2 id=\"clojure.core/println-str\">println-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (println-str &amp; xs)\n</pre> <pre id=\"var-docstr\">println to a string, returning it</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4583\">Source</a>  <br>  <h2 id=\"clojure.core/prn\">prn<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prn &amp; more)\n</pre> <pre id=\"var-docstr\">Same as pr followed by (newline). Observes *flush-on-newline*</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3588\">Source</a>  <br>  <h2 id=\"clojure.core/prn-str\">prn-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prn-str &amp; xs)\n</pre> <pre id=\"var-docstr\">prn to a string, returning it</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4565\">Source</a>  <br>  <h2 id=\"clojure.core/promise\">promise<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (promise)\n</pre> <pre id=\"var-docstr\">Returns a promise object that can be read with deref/@, and set,\nonce only, with deliver. Calls to deref/@ prior to delivery will\nblock, unless the variant of deref with timeout is used. All\nsubsequent derefs will return the same delivered value without\nblocking. See also - realized?.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6803\">Source</a>  <br>  <h2 id=\"clojure.core/proxy\">proxy<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (proxy class-and-interfaces args &amp; fs)\n</pre> <pre id=\"var-docstr\">class-and-interfaces - a vector of class names\n\nargs - a (possibly empty) vector of arguments to the superclass\nconstructor.\n\nf =&gt; (name [params*] body) or\n(name ([params*] body) ([params+] body) ...)\n\nExpands to code which creates a instance of a proxy class that\nimplements the named class/interface(s) by calling the supplied\nfns. A single class, if provided, must be first. If not provided it\ndefaults to Object.\n\nThe interfaces names must be valid interface types. If a method fn\nis not provided for a class method, the superclass methd will be\ncalled. If a method fn is not provided for an interface method, an\nUnsupportedOperationException will be thrown should it be\ncalled. Method fns are closures and can capture the environment in\nwhich proxy is called. Each method fn takes an additional implicit\nfirst arg, which is bound to 'this. Note that while method fns can\nbe provided to override protected methods, they have no other access\nto protected members, nor to super, as these capabilities cannot be\nproxied.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L303\">Source</a>  <br>  <h2 id=\"clojure.core/proxy-mappings\">proxy-mappings<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (proxy-mappings proxy)\n</pre> <pre id=\"var-docstr\">Takes a proxy instance and returns the proxy's fn map.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L297\">Source</a>  <br>  <h2 id=\"clojure.core/proxy-super\">proxy-super<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (proxy-super meth &amp; args)\n</pre> <pre id=\"var-docstr\">Use to call a superclass method in the body of a proxy method. \nNote, expansion captures 'this</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L365\">Source</a>  <br>  <h2 id=\"clojure.core/push-thread-bindings\">push-thread-bindings<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (push-thread-bindings bindings)\n</pre> <pre id=\"var-docstr\">WARNING: This is a low-level function. Prefer high-level macros like\nbinding where ever possible.\n\nTakes a map of Var/value pairs. Binds each Var to the associated value for\nthe current thread. Each call *MUST* be accompanied by a matching call to\npop-thread-bindings wrapped in a try-finally!\n\n    (push-thread-bindings bindings)\n    (try\n      ...\n      (finally\n        (pop-thread-bindings)))</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1799\">Source</a>  <br>  <h2 id=\"clojure.core/pvalues\">pvalues<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (pvalues &amp; exprs)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the values of the exprs, which are\nevaluated in parallel</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6751\">Source</a>  <br>  <h2 id=\"clojure.core/quot\">quot<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (quot num div)\n</pre> <pre id=\"var-docstr\">quot[ient] of dividing numerator by denominator.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1226\">Source</a>  <br>  <h2 id=\"clojure.core/quote\">quote<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (quote form)\n</pre> <pre id=\"var-docstr\">Yields the unevaluated form.\n\nPlease see <a href=\"http://clojure.org/special_forms#quote\">http://clojure.org/special_forms#quote</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/rand\">rand<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rand)\n       (rand n)\n</pre> <pre id=\"var-docstr\">Returns a random floating point number between 0 (inclusive) and\nn (default 1) (exclusive).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4705\">Source</a>  <br>  <h2 id=\"clojure.core/rand-int\">rand-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rand-int n)\n</pre> <pre id=\"var-docstr\">Returns a random integer between 0 (inclusive) and n (exclusive).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4713\">Source</a>  <br>  <h2 id=\"clojure.core/rand-nth\">rand-nth<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rand-nth coll)\n</pre> <pre id=\"var-docstr\">Return a random element of the (sequential) collection. Will have\nthe same performance characteristics as nth for the given\ncollection.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6938\">Source</a>  <br>  <h2 id=\"clojure.core/random-sample\">random-sample<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (random-sample prob)\n       (random-sample prob coll)\n</pre> <pre id=\"var-docstr\">Returns items from coll with random probability of prob (0.0 -\n1.0).  Returns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7330\">Source</a>  <br>  <h2 id=\"clojure.core/range\">range<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (range)\n       (range end)\n       (range start end)\n       (range start end step)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq of nums from start (inclusive) to end\n(exclusive), by step, where start defaults to 0, step to 1, and end to\ninfinity. When step is equal to 0, returns an infinite sequence of\nstart. When start is equal to end, returns empty list.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2888\">Source</a>  <br>  <h2 id=\"clojure.core/ratio?\">ratio?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ratio? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is a Ratio</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3450\">Source</a>  <br>  <h2 id=\"clojure.core/rational?\">rational?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rational? n)\n</pre> <pre id=\"var-docstr\">Returns true if n is a rational number</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3486\">Source</a>  <br>  <h2 id=\"clojure.core/rationalize\">rationalize<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rationalize num)\n</pre> <pre id=\"var-docstr\">returns the rational value of num</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1242\">Source</a>  <br>  <h2 id=\"clojure.core/re-find\">re-find<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-find m)\n       (re-find re s)\n</pre> <pre id=\"var-docstr\">Returns the next regex match, if any, of string to pattern, using\njava.util.regex.Matcher.find().  Uses re-groups to return the\ngroups.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4692\">Source</a>  <br>  <h2 id=\"clojure.core/re-groups\">re-groups<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-groups m)\n</pre> <pre id=\"var-docstr\">Returns the groups from the most recent match/find. If there are no\nnested groups, returns a string of the entire match. If there are\nnested groups, returns a vector of the groups, the first element\nbeing the entire match.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4652\">Source</a>  <br>  <h2 id=\"clojure.core/re-matcher\">re-matcher<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-matcher re s)\n</pre> <pre id=\"var-docstr\">Returns an instance of java.util.regex.Matcher, for use, e.g. in\nre-find.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4643\">Source</a>  <br>  <h2 id=\"clojure.core/re-matches\">re-matches<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-matches re s)\n</pre> <pre id=\"var-docstr\">Returns the match, if any, of string to pattern, using\njava.util.regex.Matcher.matches().  Uses re-groups to return the\ngroups.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4680\">Source</a>  <br>  <h2 id=\"clojure.core/re-pattern\">re-pattern<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-pattern s)\n</pre> <pre id=\"var-docstr\">Returns an instance of java.util.regex.Pattern, for use, e.g. in\nre-matcher.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4633\">Source</a>  <br>  <h2 id=\"clojure.core/re-seq\">re-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-seq re s)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of successive matches of pattern in string,\nusing java.util.regex.Matcher.find(), each such match processed with\nre-groups.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4668\">Source</a>  <br>  <h2 id=\"clojure.core/read\">read<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (read)\n       (read stream)\n       (read stream eof-error? eof-value)\n       (read stream eof-error? eof-value recursive?)\n       (read opts stream)\n</pre> <pre id=\"var-docstr\">Reads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n\nOpts is a persistent map with valid keys:\n  :read-cond - :allow to process reader conditionals, or\n               :preserve to keep all branches\n  :features - persistent set of feature keywords for reader conditionals\n  :eof - on eof, return value unless :eofthrow, then throw.\n         if not specified, will throw\n\nNote that read can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3615\">Source</a>  <br>  <h2 id=\"clojure.core/read-line\">read-line<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (read-line)\n</pre> <pre id=\"var-docstr\">Reads the next line from stream that is the current value of *in* .</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3644\">Source</a>  <br>  <h2 id=\"clojure.core/read-string\">read-string<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (read-string s)\n       (read-string opts s)\n</pre> <pre id=\"var-docstr\">Reads one object from the string s. Optionally include reader\noptions, as specified in read.\n\nNote that read-string can execute code (controlled by *read-eval*),\nand as such should be used only with trusted sources.\n\nFor data structure interop use clojure.edn/read-string</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3653\">Source</a>  <br>  <h2 id=\"clojure.core/reader-conditional\">reader-conditional<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reader-conditional form splicing?)\n</pre> <pre id=\"var-docstr\">Construct a data representation of a reader conditional.\nIf true, splicing? indicates read-cond-splicing.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7394\">Source</a>  <br>  <h2 id=\"clojure.core/reader-conditional?\">reader-conditional?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reader-conditional? value)\n</pre> <pre id=\"var-docstr\">Return true if the value is the data representation of a reader conditional</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7388\">Source</a>  <br>  <h2 id=\"clojure.core/realized?\">realized?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (realized? x)\n</pre> <pre id=\"var-docstr\">Returns true if a value has been produced for a promise, delay, future or lazy sequence.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7228\">Source</a>  <br>  <h2 id=\"clojure.core/record?\">record?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (record? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is a record</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L384\">Source</a>  <br>  <h2 id=\"clojure.core/recur\">recur<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (recur exprs*)\n</pre> <pre id=\"var-docstr\">Evaluates the exprs in order, then, in parallel, rebinds\nthe bindings of the recursion point to the values of the exprs.\nExecution then jumps back to the recursion point, a loop or fn method.\n\nPlease see <a href=\"http://clojure.org/special_forms#recur\">http://clojure.org/special_forms#recur</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/reduce\">reduce<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reduce f coll)\n       (reduce f val coll)\n</pre> <pre id=\"var-docstr\">f should be a function of 2 arguments. If val is not supplied,\nreturns the result of applying f to the first 2 items in coll, then\napplying f to that result and the 3rd item, etc. If coll contains no\nitems, f must accept no arguments as well, and reduce returns the\nresult of calling f with no arguments.  If coll has only 1 item, it\nis returned and f is not called.  If val is supplied, returns the\nresult of applying f to val and the first item in coll, then\napplying f to that result and the 2nd item, etc. If coll contains no\nitems, returns val and f is not called.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6501\">Source</a>  <br>  <h2 id=\"clojure.core/reduce-kv\">reduce-kv<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reduce-kv f init coll)\n</pre> <pre id=\"var-docstr\">Reduces an associative collection. f should be a function of 3\narguments. Returns the result of applying f to init, the first key\nand the first value in coll, then applying f to that result and the\n2nd key and value, etc. If coll contains no entries, returns init\nand f is not called. Note that reduce-kv is supported on vectors,\nwhere the keys will be the ordinals.</pre> <p class=\"var-added\">Added in Clojure version 1.4</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6553\">Source</a>  <br>  <h2 id=\"clojure.core/reduced\">reduced<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reduced x)\n</pre> <pre id=\"var-docstr\">Wraps x in a way such that a reduce will terminate with the value x</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2705\">Source</a>  <br>  <h2 id=\"clojure.core/reduced?\">reduced?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reduced? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is the result of a call to reduced</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2711\">Source</a>  <br>  <h2 id=\"clojure.core/reductions\">reductions<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reductions f coll)\n       (reductions f init coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq of the intermediate values of the reduction (as\nper reduce) of coll by f, starting with init.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6921\">Source</a>  <br>  <h2 id=\"clojure.core/ref\">ref<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ref x)\n       (ref x &amp; options)\n</pre> <pre id=\"var-docstr\">Creates and returns a Ref with an initial value of x and zero or\nmore options (in any order):\n\n:meta metadata-map\n\n:validator validate-fn\n\n:min-history (default 0)\n:max-history (default 10)\n\nIf metadata-map is supplied, it will become the metadata on the\nref. validate-fn must be nil or a side-effect-free fn of one\nargument, which will be passed the intended new state on any state\nchange. If the new state is unacceptable, the validate-fn should\nreturn false or throw an exception. validate-fn will be called on\ntransaction commit, when all refs have their final values.\n\nNormally refs accumulate history dynamically as needed to deal with\nread demands. If you know in advance you will need history you can\nset :min-history to ensure it will be available when first needed (instead\nof after a read fault). History is limited, and the limit can be set\nwith :max-history.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2148\">Source</a>  <br>  <h2 id=\"clojure.core/ref-history-count\">ref-history-count<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ref-history-count ref)\n</pre> <pre id=\"var-docstr\">Returns the history count of a ref</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2332\">Source</a>  <br>  <h2 id=\"clojure.core/ref-max-history\">ref-max-history<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ref-max-history ref)\n       (ref-max-history ref n)\n</pre> <pre id=\"var-docstr\">Gets the max-history of a ref, or sets it and returns the ref</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2348\">Source</a>  <br>  <h2 id=\"clojure.core/ref-min-history\">ref-min-history<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ref-min-history ref)\n       (ref-min-history ref n)\n</pre> <pre id=\"var-docstr\">Gets the min-history of a ref, or sets it and returns the ref</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2339\">Source</a>  <br>  <h2 id=\"clojure.core/ref-set\">ref-set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (ref-set ref val)\n</pre> <pre id=\"var-docstr\">Must be called in a transaction. Sets the value of ref.\nReturns val.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2324\">Source</a>  <br>  <h2 id=\"clojure.core/refer\">refer<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (refer ns-sym &amp; filters)\n</pre> <pre id=\"var-docstr\">refers to all public vars of ns, subject to filters.\nfilters can include at most one each of:\n\n:exclude list-of-symbols\n:only list-of-symbols\n:rename map-of-fromsymbol-tosymbol\n\nFor each public interned var in the namespace named by the symbol,\nadds a mapping from the name of the var to the var to the current\nnamespace.  Throws an exception if name is already mapped to\nsomething else in the current namespace. Filters can be used to\nselect a subset, via inclusion or exclusion, or to provide a mapping\nto a symbol different from the var's name, in order to prevent\nclashes. Use :use in the ns macro in preference to calling this directly.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4063\">Source</a>  <br>  <h2 id=\"clojure.core/refer-clojure\">refer-clojure<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (refer-clojure &amp; filters)\n</pre> <pre id=\"var-docstr\">Same as (refer 'clojure.core &lt;filters&gt;)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5585\">Source</a>  <br>  <h2 id=\"clojure.core/reify\">reify<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (reify &amp; opts+specs)\n</pre> <pre id=\"var-docstr\">reify is a macro with the following structure:\n\n(reify options* specs*)\n \n Currently there are no options.\n\n Each spec consists of the protocol or interface name followed by zero\n or more method bodies:\n\n protocol-or-interface-or-Object\n (methodName [args+] body)*\n\n Methods should be supplied for all methods of the desired\n protocol(s) and interface(s). You can also define overrides for\n methods of Object. Note that the first parameter must be supplied to\n correspond to the target object ('this' in Java parlance). Thus\n methods for interfaces will take one more argument than do the\n interface declarations.  Note also that recur calls to the method\n head should *not* pass the target object, it will be supplied\n automatically and can not be substituted.\n\n The return type can be indicated by a type hint on the method name,\n and arg types can be indicated by a type hint on arg names. If you\n leave out all hints, reify will try to match on same name/arity\n method in the protocol(s)/interface(s) - this is preferred. If you\n supply any hints at all, no inference is done, so all hints (or\n default of Object) must be correct, for both arguments and return\n type. If a method is overloaded in a protocol/interface, multiple\n independent method definitions must be supplied.  If overloaded with\n same arity in an interface you must specify complete hints to\n disambiguate - a missing hint implies Object.\n\n recur works to method heads The method bodies of reify are lexical\n closures, and can refer to the surrounding local scope:\n \n (str (let [f \"foo\"] \n      (reify Object \n        (toString [this] f))))\n == \"foo\"\n\n (seq (let [f \"foo\"] \n      (reify clojure.lang.Seqable \n        (seq [this] (seq f)))))\n == (\\f \\o \\o))\n \n reify always implements clojure.lang.IObj and transfers meta\n data of the form to the created object.\n \n (meta ^{:k :v} (reify Object (toString [this] \"foo\")))\n == {:k :v}</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L70\">Source</a>  <br>  <h2 id=\"clojure.core/release-pending-sends\">release-pending-sends<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (release-pending-sends)\n</pre> <pre id=\"var-docstr\">Normally, actions sent directly or indirectly during another action\nare held until the action completes (changes the agent's\nstate). This function can be used to dispatch any pending sent\nactions immediately. This has no impact on actions sent during a\ntransaction, which are still held until commit. If no action is\noccurring, does nothing. Returns the number of actions dispatched.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2019\">Source</a>  <br>  <h2 id=\"clojure.core/rem\">rem<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rem num div)\n</pre> <pre id=\"var-docstr\">remainder of dividing numerator by denominator.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1234\">Source</a>  <br>  <h2 id=\"clojure.core/remove\">remove<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove pred)\n       (remove pred coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the items in coll for which\n(pred item) returns false. pred must be free of side-effects.\nReturns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2695\">Source</a>  <br>  <h2 id=\"clojure.core/remove-all-methods\">remove-all-methods<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove-all-methods multifn)\n</pre> <pre id=\"var-docstr\">Removes all of the methods of multimethod.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1675\">Source</a>  <br>  <h2 id=\"clojure.core/remove-method\">remove-method<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove-method multifn dispatch-val)\n</pre> <pre id=\"var-docstr\">Removes the method of multimethod associated with dispatch-value.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1682\">Source</a>  <br>  <h2 id=\"clojure.core/remove-ns\">remove-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove-ns sym)\n</pre> <pre id=\"var-docstr\">Removes the namespace named by the symbol. Use with caution.\nCannot be used to remove the clojure namespace.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3986\">Source</a>  <br>  <h2 id=\"clojure.core/remove-watch\">remove-watch<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove-watch reference key)\n</pre> <pre id=\"var-docstr\">Removes a watch (set by add-watch) from a reference</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2048\">Source</a>  <br>  <h2 id=\"clojure.core/repeat\">repeat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repeat x)\n       (repeat n x)\n</pre> <pre id=\"var-docstr\">Returns a lazy (infinite!, or length n if supplied) sequence of xs.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2868\">Source</a>  <br>  <h2 id=\"clojure.core/repeatedly\">repeatedly<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repeatedly f)\n       (repeatedly n f)\n</pre> <pre id=\"var-docstr\">Takes a function of no args, presumably with side effects, and\nreturns an infinite (or length n if supplied) lazy sequence of calls\nto it</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4915\">Source</a>  <br>  <h2 id=\"clojure.core/replace\">replace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (replace smap)\n       (replace smap coll)\n</pre> <pre id=\"var-docstr\">Given a map of replacement pairs and a vector/collection, returns a\nvector/seq with any elements = a key in smap replaced with the\ncorresponding val in smap.  Returns a transducer when no collection\nis provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4830\">Source</a>  <br>  <h2 id=\"clojure.core/replicate\">replicate<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (replicate n x)\n</pre> <pre id=\"var-docstr\">DEPRECATED: Use 'repeat' instead.\nReturns a lazy seq of n xs.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <p class=\"var-deprecated\">Deprecated since Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2875\">Source</a>  <br>  <h2 id=\"clojure.core/require\">require<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (require &amp; args)\n</pre> <pre id=\"var-docstr\">Loads libs, skipping any that are already loaded. Each argument is\neither a libspec that identifies a lib, a prefix list that identifies\nmultiple libs whose names share a common prefix, or a flag that modifies\nhow all the identified libs are loaded. Use :require in the ns macro\nin preference to calling this directly.\n\nLibs\n\nA 'lib' is a named set of resources in classpath whose contents define a\nlibrary of Clojure code. Lib names are symbols and each lib is associated\nwith a Clojure namespace and a Java package that share its name. A lib's\nname also locates its root directory within classpath using Java's\npackage name to classpath-relative path mapping. All resources in a lib\nshould be contained in the directory structure under its root directory.\nAll definitions a lib makes should be in its associated namespace.\n\n'require loads a lib by loading its root resource. The root resource path\nis derived from the lib name in the following manner:\nConsider a lib named by the symbol 'x.y.z; it has the root directory\n&lt;classpath&gt;/x/y/, and its root resource is &lt;classpath&gt;/x/y/z.clj. The root\nresource should contain code to create the lib's namespace (usually by using\nthe ns macro) and load any additional lib resources.\n\nLibspecs\n\nA libspec is a lib name or a vector containing a lib name followed by\noptions expressed as sequential keywords and arguments.\n\nRecognized options:\n:as takes a symbol as its argument and makes that symbol an alias to the\n  lib's namespace in the current namespace.\n:refer takes a list of symbols to refer from the namespace or the :all\n  keyword to bring in all public vars.\n\nPrefix Lists\n\nIt's common for Clojure code to depend on several libs whose names have\nthe same prefix. When specifying libs, prefix lists can be used to reduce\nrepetition. A prefix list contains the shared prefix followed by libspecs\nwith the shared prefix removed from the lib names. After removing the\nprefix, the names that remain must not contain any periods.\n\nFlags\n\nA flag is a keyword.\nRecognized flags: :reload, :reload-all, :verbose\n:reload forces loading of all the identified libs even if they are\n  already loaded\n:reload-all implies :reload and also forces loading of all libs that the\n  identified libs directly or indirectly load via require or use\n:verbose triggers printing information about each load, alias, and refer\n\nExample:\n\nThe following would load the libraries clojure.zip and clojure.set\nabbreviated as 's'.\n\n(require '(clojure zip [set :as s]))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5770\">Source</a>  <br>  <h2 id=\"clojure.core/reset!\">reset!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reset! atom newval)\n</pre> <pre id=\"var-docstr\">Sets the value of atom to newval without regard for the\ncurrent value. Returns newval.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2251\">Source</a>  <br>  <h2 id=\"clojure.core/reset-meta!\">reset-meta!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reset-meta! iref metadata-map)\n</pre> <pre id=\"var-docstr\">Atomically resets the metadata for a namespace/var/ref/agent/atom</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2285\">Source</a>  <br>  <h2 id=\"clojure.core/resolve\">resolve<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (resolve sym)\n       (resolve env sym)\n</pre> <pre id=\"var-docstr\">same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &amp;env symbol)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4218\">Source</a>  <br>  <h2 id=\"clojure.core/rest\">rest<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rest coll)\n</pre> <pre id=\"var-docstr\">Returns a possibly empty seq of the items after the first. Calls seq on its\nargument.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L66\">Source</a>  <br>  <h2 id=\"clojure.core/restart-agent\">restart-agent<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (restart-agent a new-state &amp; options)\n</pre> <pre id=\"var-docstr\">When an agent is failed, changes the agent state to new-state and\nthen un-fails the agent so that sends are allowed again.  If\na :clear-actions true option is given, any actions queued on the\nagent that were being held while it was failed will be discarded,\notherwise those held actions will proceed.  The new-state must pass\nthe validator if any, or restart will throw an exception and the\nagent will remain failed with its old state and error.  Watchers, if\nany, will NOT be notified of the new state.  Throws an exception if\nthe agent is not failed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2063\">Source</a>  <br>  <h2 id=\"clojure.core/resultset-seq\">resultset-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (resultset-seq rs)\n</pre> <pre id=\"var-docstr\">Creates and returns a lazy sequence of structmaps corresponding to\nthe rows in the java.sql.ResultSet rs</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5467\">Source</a>  <br>  <h2 id=\"clojure.core/reverse\">reverse<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reverse coll)\n</pre> <pre id=\"var-docstr\">Returns a seq of the items in coll in reverse order. Not lazy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L912\">Source</a>  <br>  <h2 id=\"clojure.core/reversible?\">reversible?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reversible? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll implements Reversible</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6000\">Source</a>  <br>  <h2 id=\"clojure.core/rseq\">rseq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rseq rev)\n</pre> <pre id=\"var-docstr\">Returns, in constant time, a seq of the items in rev (which\ncan be a vector or sorted-map), in reverse order. If rev is empty returns nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1510\">Source</a>  <br>  <h2 id=\"clojure.core/rsubseq\">rsubseq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rsubseq sc test key)\n       (rsubseq sc start-test start-key end-test end-key)\n</pre> <pre id=\"var-docstr\">sc must be a sorted collection, test(s) one of &lt;, &lt;=, &gt; or\n&gt;=. Returns a reverse seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4898\">Source</a>  <br>  <h2 id=\"clojure.core/run!\">run!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (run! proc coll)\n</pre> <pre id=\"var-docstr\">Runs the supplied procedure (via reduce), for purposes of side\neffects, on successive items in the collection. Returns nil</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7367\">Source</a>  <br>  <h2 id=\"clojure.core/satisfies?\">satisfies?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (satisfies? protocol x)\n</pre> <pre id=\"var-docstr\">Returns true if x satisfies the protocol</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/49baf1e8ae394c9b98523a3601779a5468920ba1/src/clj/clojure/core_deftype.clj#L542\">Source</a>  <br>  <h2 id=\"clojure.core/second\">second<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (second x)\n</pre> <pre id=\"var-docstr\">Same as (first (next x))</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L91\">Source</a>  <br>  <h2 id=\"clojure.core/select-keys\">select-keys<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (select-keys map keyseq)\n</pre> <pre id=\"var-docstr\">Returns a map containing only those entries in map whose key is in keys</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1469\">Source</a>  <br>  <h2 id=\"clojure.core/send\">send<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (send a f &amp; args)\n</pre> <pre id=\"var-docstr\">Dispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread from a thread pool, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1997\">Source</a>  <br>  <h2 id=\"clojure.core/send-off\">send-off<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (send-off a f &amp; args)\n</pre> <pre id=\"var-docstr\">Dispatch a potentially blocking action to an agent. Returns the\nagent immediately. Subsequently, in a separate thread, the state of\nthe agent will be set to the value of:\n\n(apply action-fn state-of-agent args)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2008\">Source</a>  <br>  <h2 id=\"clojure.core/send-via\">send-via<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (send-via executor a f &amp; args)\n</pre> <pre id=\"var-docstr\">Dispatch an action to an agent. Returns the agent immediately.\nSubsequently, in a thread supplied by executor, the state of the agent\nwill be set to the value of:\n\n(apply action-fn state-of-agent args)</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1987\">Source</a>  <br>  <h2 id=\"clojure.core/seq\">seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (seq coll)\n</pre> <pre id=\"var-docstr\">Returns a seq on the collection. If the collection is\nempty, returns nil.  (seq nil) returns nil. seq also works on\nStrings, native Java arrays (of reference types) and any objects\nthat implement Iterable. Note that seqs cache values, thus seq\nshould not be used on any Iterable whose iterator repeatedly\nreturns the same mutable object.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L126\">Source</a>  <br>  <h2 id=\"clojure.core/seq?\">seq?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (seq? x)\n</pre> <pre id=\"var-docstr\">Return true if x implements ISeq</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L146\">Source</a>  <br>  <h2 id=\"clojure.core/seque\">seque<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (seque s)\n       (seque n-or-q s)\n</pre> <pre id=\"var-docstr\">Creates a queued seq on another (presumably lazy) seq s. The queued\nseq will produce a concrete seq in the background, and can get up to\nn items ahead of the consumer. n-or-q can be an integer n buffer\nsize, or an instance of java.util.concurrent BlockingQueue. Note\nthat reading from a seque can block if the reader gets ahead of the\nproducer.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5162\">Source</a>  <br>  <h2 id=\"clojure.core/sequence\">sequence<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sequence coll)\n       (sequence xform coll)\n       (sequence xform coll &amp; colls)\n</pre> <pre id=\"var-docstr\">Coerces coll to a (possibly empty) sequence, if it is not already\none. Will not force a lazy seq. (sequence nil) yields (), When a\ntransducer is supplied, returns a lazy sequence of applications of\nthe transform to the items in coll(s), i.e. to the set of first\nitems of each coll, followed by the set of second\nitems in each coll, until any one of the colls is exhausted.  Any\nremaining items in other colls are ignored. The transform should accept\nnumber-of-colls arguments</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2516\">Source</a>  <br>  <h2 id=\"clojure.core/sequential?\">sequential?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sequential? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll implements Sequential</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5982\">Source</a>  <br>  <h2 id=\"clojure.core/set\">set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set coll)\n</pre> <pre id=\"var-docstr\">Returns a set of the distinct elements of coll.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3951\">Source</a>  <br>  <h2 id=\"clojure.core/set!\">set!<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (set! var-symbol expr)\n       (set! (. instance-expr instanceFieldName-symbol) expr)\n       (set! (. Classname-symbol staticFieldName-symbol) expr)\n</pre> <pre id=\"var-docstr\">Used to set thread-local-bound vars, Java object instance\nfields, and Java class static fields.\n\nPlease see <a href=\"http://clojure.org/vars#set\">http://clojure.org/vars#set</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/set-agent-send-executor!\">set-agent-send-executor!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-agent-send-executor! executor)\n</pre> <pre id=\"var-docstr\">Sets the ExecutorService to be used by send</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1975\">Source</a>  <br>  <h2 id=\"clojure.core/set-agent-send-off-executor!\">set-agent-send-off-executor!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-agent-send-off-executor! executor)\n</pre> <pre id=\"var-docstr\">Sets the ExecutorService to be used by send-off</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1981\">Source</a>  <br>  <h2 id=\"clojure.core/set-error-handler!\">set-error-handler!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-error-handler! a handler-fn)\n</pre> <pre id=\"var-docstr\">Sets the error-handler of agent a to handler-fn.  If an action\nbeing run by the agent throws an exception or doesn't pass the\nvalidator fn, handler-fn will be called with two arguments: the\nagent and the exception.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2080\">Source</a>  <br>  <h2 id=\"clojure.core/set-error-mode!\">set-error-mode!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-error-mode! a mode-keyword)\n</pre> <pre id=\"var-docstr\">Sets the error-mode of agent a to mode-keyword, which must be\neither :fail or :continue.  If an action being run by the agent\nthrows an exception or doesn't pass the validator fn, an\nerror-handler may be called (see set-error-handler!), after which,\nif the mode is :continue, the agent will continue as if neither the\naction that caused the error nor the error itself ever happened.\n\nIf the mode is :fail, the agent will become failed and will stop\naccepting new 'send' and 'send-off' actions, and any previously\nqueued actions will be held until a 'restart-agent'.  Deref will\nstill work, returning the state of the agent before the error.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2098\">Source</a>  <br>  <h2 id=\"clojure.core/set-validator!\">set-validator!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-validator! iref validator-fn)\n</pre> <pre id=\"var-docstr\">Sets the validator-fn for a var/ref/agent/atom. validator-fn must be nil or a\nside-effect-free fn of one argument, which will be passed the intended\nnew state on any state change. If the new state is unacceptable, the\nvalidator-fn should return false or throw an exception. If the current state (root\nvalue if var) is not acceptable to the new validator, an exception\nwill be thrown and the validator will not be changed.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2258\">Source</a>  <br>  <h2 id=\"clojure.core/set?\">set?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set? x)\n</pre> <pre id=\"var-docstr\">Returns true if x implements IPersistentSet</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3945\">Source</a>  <br>  <h2 id=\"clojure.core/short\">short<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (short x)\n</pre> <pre id=\"var-docstr\">Coerce to short</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3365\">Source</a>  <br>  <h2 id=\"clojure.core/short-array\">short-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (short-array size-or-seq)\n       (short-array size init-val-or-seq)\n</pre> <pre id=\"var-docstr\">Creates an array of shorts</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5081\">Source</a>  <br>  <h2 id=\"clojure.core/shorts\">shorts<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (shorts xs)\n</pre> <pre id=\"var-docstr\">Casts to shorts[]</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5135\">Source</a>  <br>  <h2 id=\"clojure.core/shuffle\">shuffle<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (shuffle coll)\n</pre> <pre id=\"var-docstr\">Return a random permutation of coll</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6981\">Source</a>  <br>  <h2 id=\"clojure.core/shutdown-agents\">shutdown-agents<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (shutdown-agents)\n</pre> <pre id=\"var-docstr\">Initiates a shutdown of the thread pools that back the agent\nsystem. Running actions will complete, but no new actions will be\naccepted</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2140\">Source</a>  <br>  <h2 id=\"clojure.core/slurp\">slurp<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (slurp f &amp; opts)\n</pre> <pre id=\"var-docstr\">Opens a reader on f and reads all its contents, returning a string.\nSee clojure.java.io/reader for a complete list of supported arguments.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6646\">Source</a>  <br>  <h2 id=\"clojure.core/some\">some<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (some pred coll)\n</pre> <pre id=\"var-docstr\">Returns the first logical true value of (pred x) for any x in coll,\nelse nil.  One common idiom is to use a set as pred, for example\nthis will return :fred if :fred is in the sequence, otherwise nil:\n(some #{:fred} coll)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2561\">Source</a>  <br>  <h2 id=\"clojure.core/some-&gt;\">some-&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (some-&gt; expr &amp; forms)\n</pre> <pre id=\"var-docstr\">When expr is not nil, threads it into the first form (via -&gt;),\nand when that result is not nil, through the next etc</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7271\">Source</a>  <br>  <h2 id=\"clojure.core/some-&gt;&gt;\">some-&gt;&gt;<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (some-&gt;&gt; expr &amp; forms)\n</pre> <pre id=\"var-docstr\">When expr is not nil, threads it into the first form (via -&gt;&gt;),\nand when that result is not nil, through the next etc</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7282\">Source</a>  <br>  <h2 id=\"clojure.core/some-fn\">some-fn<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (some-fn p)\n       (some-fn p1 p2)\n       (some-fn p1 p2 p3)\n       (some-fn p1 p2 p3 &amp; ps)\n</pre> <pre id=\"var-docstr\">Takes a set of predicates and returns a function f that returns the first logical true value\nreturned by one of its composing predicates against any of its arguments, else it returns\nlogical false. Note that f is short-circuiting in that it will stop execution on the first\nargument that triggers a logical true result against the original predicates.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7131\">Source</a>  <br>  <h2 id=\"clojure.core/some?\">some?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (some? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is not nil, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L510\">Source</a>  <br>  <h2 id=\"clojure.core/sort\">sort<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sort coll)\n       (sort comp coll)\n</pre> <pre id=\"var-docstr\">Returns a sorted sequence of the items in coll. If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  If coll is a Java array, it will be modified.\nTo avoid this, sort a copy of the array.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2971\">Source</a>  <br>  <h2 id=\"clojure.core/sort-by\">sort-by<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sort-by keyfn coll)\n       (sort-by keyfn comp coll)\n</pre> <pre id=\"var-docstr\">Returns a sorted sequence of the items in coll, where the sort\norder is determined by comparing (keyfn item).  If no comparator is\nsupplied, uses compare.  comparator must implement\njava.util.Comparator.  If coll is a Java array, it will be modified.\nTo avoid this, sort a copy of the array.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2987\">Source</a>  <br>  <h2 id=\"clojure.core/sorted-map\">sorted-map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sorted-map &amp; keyvals)\n</pre> <pre id=\"var-docstr\">keyval =&gt; key val\nReturns a new sorted map with supplied mappings.  If any keys are\nequal, they are handled as if by repeated uses of assoc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L382\">Source</a>  <br>  <h2 id=\"clojure.core/sorted-map-by\">sorted-map-by<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sorted-map-by comparator &amp; keyvals)\n</pre> <pre id=\"var-docstr\">keyval =&gt; key val\nReturns a new sorted map with supplied mappings, using the supplied\ncomparator.  If any keys are equal, they are handled as if by\nrepeated uses of assoc.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L391\">Source</a>  <br>  <h2 id=\"clojure.core/sorted-set\">sorted-set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sorted-set &amp; keys)\n</pre> <pre id=\"var-docstr\">Returns a new sorted set with supplied keys.  Any equal keys are\nhandled as if by repeated uses of conj.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L401\">Source</a>  <br>  <h2 id=\"clojure.core/sorted-set-by\">sorted-set-by<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sorted-set-by comparator &amp; keys)\n</pre> <pre id=\"var-docstr\">Returns a new sorted set with supplied keys, using the supplied\ncomparator.  Any equal keys are handled as if by repeated uses of\nconj.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L409\">Source</a>  <br>  <h2 id=\"clojure.core/sorted?\">sorted?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sorted? coll)\n</pre> <pre id=\"var-docstr\">Returns true if coll implements Sorted</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5988\">Source</a>  <br>  <h2 id=\"clojure.core/special-symbol?\">special-symbol?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (special-symbol? s)\n</pre> <pre id=\"var-docstr\">Returns true if s names a special form</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4762\">Source</a>  <br>  <h2 id=\"clojure.core/spit\">spit<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (spit f content &amp; options)\n</pre> <pre id=\"var-docstr\">Opposite of slurp.  Opens f with writer, writes content, then\ncloses f. Options passed to clojure.java.io/writer.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6661\">Source</a>  <br>  <h2 id=\"clojure.core/split-at\">split-at<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (split-at n coll)\n</pre> <pre id=\"var-docstr\">Returns a vector of [(take n coll) (drop n coll)]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2854\">Source</a>  <br>  <h2 id=\"clojure.core/split-with\">split-with<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (split-with pred coll)\n</pre> <pre id=\"var-docstr\">Returns a vector of [(take-while pred coll) (drop-while pred coll)]</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2861\">Source</a>  <br>  <h2 id=\"clojure.core/str\">str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (str)\n       (str x)\n       (str x &amp; ys)\n</pre> <pre id=\"var-docstr\">With no args, returns the empty string. With one arg x, returns\nx.toString().  (str nil) returns the empty string. With more than\none arg, returns the concatenation of the str values of the args.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L517\">Source</a>  <br>  <h2 id=\"clojure.core/string?\">string?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (string? x)\n</pre> <pre id=\"var-docstr\">Return true if x is a String</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L160\">Source</a>  <br>  <h2 id=\"clojure.core/struct\">struct<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (struct s &amp; vals)\n</pre> <pre id=\"var-docstr\">Returns a new structmap instance with the keys of the\nstructure-basis. vals must be supplied for basis keys in order -\nwhere values are not supplied they will default to nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3908\">Source</a>  <br>  <h2 id=\"clojure.core/struct-map\">struct-map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (struct-map s &amp; inits)\n</pre> <pre id=\"var-docstr\">Returns a new structmap instance with the keys of the\nstructure-basis. keyvals may contain all, some or none of the basis\nkeys - where values are not supplied they will default to nil.\nkeyvals can also contain keys not in the basis.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3898\">Source</a>  <br>  <h2 id=\"clojure.core/subs\">subs<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (subs s start)\n       (subs s start end)\n</pre> <pre id=\"var-docstr\">Returns the substring of s beginning at start inclusive, and ending\nat end (defaults to length of string), exclusive.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4775\">Source</a>  <br>  <h2 id=\"clojure.core/subseq\">subseq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (subseq sc test key)\n       (subseq sc start-test start-key end-test end-key)\n</pre> <pre id=\"var-docstr\">sc must be a sorted collection, test(s) one of &lt;, &lt;=, &gt; or\n&gt;=. Returns a seq of those entries with keys ek for\nwhich (test (.. sc comparator (compare ek key)) 0) is true</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4881\">Source</a>  <br>  <h2 id=\"clojure.core/subvec\">subvec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (subvec v start)\n       (subvec v start end)\n</pre> <pre id=\"var-docstr\">Returns a persistent vector of the items in vector from\nstart (inclusive) to end (exclusive).  If end is not supplied,\ndefaults to (count vector). This operation is O(1) and very fast, as\nthe resulting vector shares structure with the original and no\ntrimming is done.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3666\">Source</a>  <br>  <h2 id=\"clojure.core/supers\">supers<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (supers class)\n</pre> <pre id=\"var-docstr\">Returns the immediate and indirect superclasses and interfaces of c, if any</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5318\">Source</a>  <br>  <h2 id=\"clojure.core/swap!\">swap!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (swap! atom f)\n       (swap! atom f x)\n       (swap! atom f x y)\n       (swap! atom f x y &amp; args)\n</pre> <pre id=\"var-docstr\">Atomically swaps the value of atom to be:\n(apply f current-value-of-atom args). Note that f may be called\nmultiple times, and thus should be free of side effects.  Returns\nthe value that was swapped in.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2231\">Source</a>  <br>  <h2 id=\"clojure.core/symbol\">symbol<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (symbol name)\n       (symbol ns name)\n</pre> <pre id=\"var-docstr\">Returns a Symbol with the given namespace and name.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L547\">Source</a>  <br>  <h2 id=\"clojure.core/symbol?\">symbol?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (symbol? x)\n</pre> <pre id=\"var-docstr\">Return true if x is a Symbol</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L535\">Source</a>  <br>  <h2 id=\"clojure.core/sync\">sync<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (sync flags-ignored-for-now &amp; body)\n</pre> <pre id=\"var-docstr\">transaction-flags =&gt; TBD, pass nil for now\n\nRuns the exprs (in an implicit do) in a transaction that encompasses\nexprs and any nested calls.  Starts a transaction if none is already\nrunning on this thread. Any uncaught exception will abort the\ntransaction and flow out of sync. The exprs may be run more than\nonce, but any effects on Refs will be atomic.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2367\">Source</a>  <br>  <h2 id=\"clojure.core/tagged-literal\">tagged-literal<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (tagged-literal tag form)\n</pre> <pre id=\"var-docstr\">Construct a data representation of a tagged literal from a\ntag symbol and a form.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7381\">Source</a>  <br>  <h2 id=\"clojure.core/tagged-literal?\">tagged-literal?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (tagged-literal? value)\n</pre> <pre id=\"var-docstr\">Return true if the value is the data representation of a tagged literal</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7375\">Source</a>  <br>  <h2 id=\"clojure.core/take\">take<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take n)\n       (take n coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the first n items in coll, or all items if\nthere are fewer than n.  Returns a stateful transducer when\nno collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2730\">Source</a>  <br>  <h2 id=\"clojure.core/take-last\">take-last<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take-last n coll)\n</pre> <pre id=\"var-docstr\">Returns a seq of the last n items in coll.  Depending on the type\nof coll may be no better than linear time.  For vectors, see also subvec.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2810\">Source</a>  <br>  <h2 id=\"clojure.core/take-nth\">take-nth<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take-nth n)\n       (take-nth n coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy seq of every nth item in coll.  Returns a stateful\ntransducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4134\">Source</a>  <br>  <h2 id=\"clojure.core/take-while\">take-while<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take-while pred)\n       (take-while pred coll)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of successive items from coll while\n(pred item) returns true. pred must be free of side-effects.\nReturns a transducer when no collection is provided.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2757\">Source</a>  <br>  <h2 id=\"clojure.core/test\">test<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (test v)\n</pre> <pre id=\"var-docstr\">test [v] finds fn at key :test in var metadata and calls it,\npresuming failure will throw exception</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4623\">Source</a>  <br>  <h2 id=\"clojure.core/the-ns\">the-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (the-ns x)\n</pre> <pre id=\"var-docstr\">If passed a namespace, returns it. Else, when passed a symbol,\nreturns the namespace named by it, throwing an exception if not\nfound.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3999\">Source</a>  <br>  <h2 id=\"clojure.core/thread-bound?\">thread-bound?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (thread-bound? &amp; vars)\n</pre> <pre id=\"var-docstr\">Returns true if all of the vars provided as arguments have thread-local bindings.\nImplies that set!'ing the provided vars will succeed.  Returns true if no vars are provided.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5285\">Source</a>  <br>  <h2 id=\"clojure.core/throw\">throw<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (throw expr)\n</pre> <pre id=\"var-docstr\">The expr is evaluated and thrown, therefore it should\nyield an instance of some derivee of Throwable.\n\nPlease see <a href=\"http://clojure.org/special_forms#throw\">http://clojure.org/special_forms#throw</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/time\">time<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (time expr)\n</pre> <pre id=\"var-docstr\">Evaluates expr and prints the time it took.  Returns the value of\nexpr.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3730\">Source</a>  <br>  <h2 id=\"clojure.core/to-array\">to-array<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (to-array coll)\n</pre> <pre id=\"var-docstr\">Returns an array of Objects containing the contents of coll, which\ncan be any Collection.  Maps to java.util.Collection.toArray().</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L324\">Source</a>  <br>  <h2 id=\"clojure.core/to-array-2d\">to-array-2d<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (to-array-2d coll)\n</pre> <pre id=\"var-docstr\">Returns a (potentially-ragged) 2-dimensional array of Objects\ncontaining the contents of coll, which can be any Collection of any\nCollection.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3849\">Source</a>  <br>  <h2 id=\"clojure.core/trampoline\">trampoline<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (trampoline f)\n       (trampoline f &amp; args)\n</pre> <pre id=\"var-docstr\">trampoline can be used to convert algorithms requiring mutual\nrecursion without stack consumption. Calls f with supplied args, if\nany. If f returns a fn, calls that fn with no arguments, and\ncontinues to repeat, until the return value is not a fn, then\nreturns that non-fn value. Note that if you want to return a fn as a\nfinal value, you must wrap it in some data structure and unpack it\nafter trampoline returns.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6026\">Source</a>  <br>  <h2 id=\"clojure.core/transduce\">transduce<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (transduce xform f coll)\n       (transduce xform f init coll)\n</pre> <pre id=\"var-docstr\">reduce with a transformation of f (xf). If init is not\nsupplied, (f) will be called to produce it. f should be a reducing\nstep function that accepts both 1 and 2 arguments, if it accepts\nonly 2 you can add the arity-1 with 'completing'. Returns the result\nof applying (the transformed) xf to init and the first item in coll,\nthen applying xf to that result and the 2nd item, etc. If coll\ncontains no items, returns init and f is not called. Note that\ncertain transforms may inject or skip items.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6576\">Source</a>  <br>  <h2 id=\"clojure.core/transient\">transient<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (transient coll)\n</pre> <pre id=\"var-docstr\">Returns a new, transient version of the collection, in constant time.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3209\">Source</a>  <br>  <h2 id=\"clojure.core/tree-seq\">tree-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (tree-seq branch? children root)\n</pre> <pre id=\"var-docstr\">Returns a lazy sequence of the nodes in a tree, via a depth-first walk.\n branch? must be a fn of one arg that returns true if passed a node\n that can have children (but may not).  children must be a fn of one\n arg that returns a sequence of the children. Will only be called on\n nodes for which branch? returns true. Root is the root node of the\ntree.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4725\">Source</a>  <br>  <h2 id=\"clojure.core/true?\">true?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (true? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is the value true, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L496\">Source</a>  <br>  <h2 id=\"clojure.core/try\">try<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (try expr* catch-clause* finally-clause?)\n</pre> <pre id=\"var-docstr\">catch-clause =&gt; (catch classname name expr*)\nfinally-clause =&gt; (finally expr*)\n\nCatches and handles Java exceptions.\n\nPlease see <a href=\"http://clojure.org/special_forms#try\">http://clojure.org/special_forms#try</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/type\">type<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (type x)\n</pre> <pre id=\"var-docstr\">Returns the :type metadata of x, or its Class if none</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3333\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-add\">unchecked-add<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-add x y)\n</pre> <pre id=\"var-docstr\">Returns the sum of x and y, both long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1163\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-add-int\">unchecked-add-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-add-int x y)\n</pre> <pre id=\"var-docstr\">Returns the sum of x and y, both int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1156\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-byte\">unchecked-byte<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-byte x)\n</pre> <pre id=\"var-docstr\">Coerce to byte. Subject to rounding or truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3390\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-char\">unchecked-char<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-char x)\n</pre> <pre id=\"var-docstr\">Coerce to char. Subject to rounding or truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3402\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-dec\">unchecked-dec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-dec x)\n</pre> <pre id=\"var-docstr\">Returns a number one less than x, a long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1135\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-dec-int\">unchecked-dec-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-dec-int x)\n</pre> <pre id=\"var-docstr\">Returns a number one less than x, an int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1128\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-divide-int\">unchecked-divide-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-divide-int x y)\n</pre> <pre id=\"var-docstr\">Returns the division of x by y, both int.\nNote - uses a primitive operator subject to truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1198\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-double\">unchecked-double<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-double x)\n</pre> <pre id=\"var-docstr\">Coerce to double. Subject to rounding.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3426\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-float\">unchecked-float<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-float x)\n</pre> <pre id=\"var-docstr\">Coerce to float. Subject to rounding.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3420\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-inc\">unchecked-inc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-inc x)\n</pre> <pre id=\"var-docstr\">Returns a number one greater than x, a long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1121\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-inc-int\">unchecked-inc-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-inc-int x)\n</pre> <pre id=\"var-docstr\">Returns a number one greater than x, an int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1114\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-int\">unchecked-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-int x)\n</pre> <pre id=\"var-docstr\">Coerce to int. Subject to rounding or truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3408\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-long\">unchecked-long<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-long x)\n</pre> <pre id=\"var-docstr\">Coerce to long. Subject to rounding or truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3414\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-multiply\">unchecked-multiply<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-multiply x y)\n</pre> <pre id=\"var-docstr\">Returns the product of x and y, both long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1191\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-multiply-int\">unchecked-multiply-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-multiply-int x y)\n</pre> <pre id=\"var-docstr\">Returns the product of x and y, both int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1184\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-negate\">unchecked-negate<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-negate x)\n</pre> <pre id=\"var-docstr\">Returns the negation of x, a long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1149\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-negate-int\">unchecked-negate-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-negate-int x)\n</pre> <pre id=\"var-docstr\">Returns the negation of x, an int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1142\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-remainder-int\">unchecked-remainder-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-remainder-int x y)\n</pre> <pre id=\"var-docstr\">Returns the remainder of division of x by y, both int.\nNote - uses a primitive operator subject to truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1205\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-short\">unchecked-short<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-short x)\n</pre> <pre id=\"var-docstr\">Coerce to short. Subject to rounding or truncation.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3396\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-subtract\">unchecked-subtract<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-subtract x y)\n</pre> <pre id=\"var-docstr\">Returns the difference of x and y, both long.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1177\">Source</a>  <br>  <h2 id=\"clojure.core/unchecked-subtract-int\">unchecked-subtract-int<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unchecked-subtract-int x y)\n</pre> <pre id=\"var-docstr\">Returns the difference of x and y, both int.\nNote - uses a primitive operator subject to overflow.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1170\">Source</a>  <br>  <h2 id=\"clojure.core/underive\">underive<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (underive tag parent)\n       (underive h tag parent)\n</pre> <pre id=\"var-docstr\">Removes a parent/child relationship between parent and\ntag. h must be a hierarchy obtained from make-hierarchy, if not\nsupplied defaults to, and modifies, the global hierarchy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5429\">Source</a>  <br>  <h2 id=\"clojure.core/unreduced\">unreduced<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unreduced x)\n</pre> <pre id=\"var-docstr\">If x is reduced?, returns (deref x), else returns x</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2724\">Source</a>  <br>  <h2 id=\"clojure.core/unsigned-bit-shift-right\">unsigned-bit-shift-right<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (unsigned-bit-shift-right x n)\n</pre> <pre id=\"var-docstr\">Bitwise shift right, without sign-extension.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1333\">Source</a>  <br>  <h2 id=\"clojure.core/update\">update<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (update m k f)\n       (update m k f x)\n       (update m k f x y)\n       (update m k f x y z)\n       (update m k f x y z &amp; more)\n</pre> <pre id=\"var-docstr\">'Updates' a value in an associative structure, where k is a\nkey and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nstructure.  If the key does not exist, nil is passed as the old value.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5925\">Source</a>  <br>  <h2 id=\"clojure.core/update-in\">update-in<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (update-in m [k &amp; ks] f &amp; args)\n</pre> <pre id=\"var-docstr\">'Updates' a value in a nested associative structure, where ks is a\nsequence of keys and f is a function that will take the old value\nand any supplied args and return the new value, and returns a new\nnested structure.  If any levels do not exist, hash-maps will be\ncreated.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5912\">Source</a>  <br>  <h2 id=\"clojure.core/update-proxy\">update-proxy<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (update-proxy proxy mappings)\n</pre> <pre id=\"var-docstr\">Takes a proxy instance and a map of strings (which must\ncorrespond to methods of the proxy superclass/superinterfaces) to\nfns (which must take arguments matching the corresponding method,\nplus an additional (explicit) first arg corresponding to this, and\nupdates (via assoc) the proxy's fn map. nil can be passed instead of\na fn, in which case the corresponding method will revert to the\ndefault behavior. Note that this function can be used to update the\nbehavior of an existing instance without changing its identity.\nReturns the proxy.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/044930b2c957d9815f11bfe5ab474675604378af/src/clj/clojure/core_proxy.clj#L282\">Source</a>  <br>  <h2 id=\"clojure.core/use\">use<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (use &amp; args)\n</pre> <pre id=\"var-docstr\">Like 'require, but also refers to each lib's namespace using\nclojure.core/refer. Use :use in the ns macro in preference to calling\nthis directly.\n\n'use accepts additional options in libspecs: :exclude, :only, :rename.\nThe arguments and semantics for :exclude, :only, and :rename are the same\nas those documented for clojure.core/refer.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L5834\">Source</a>  <br>  <h2 id=\"clojure.core/val\">val<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (val e)\n</pre> <pre id=\"var-docstr\">Returns the value in the map entry.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1503\">Source</a>  <br>  <h2 id=\"clojure.core/vals\">vals<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vals map)\n</pre> <pre id=\"var-docstr\">Returns a sequence of the map's values, in the same order as (seq map).</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1490\">Source</a>  <br>  <h2 id=\"clojure.core/var\">var<span id=\"var-type\" class=\"type\">special form</span>\n</h2>  <pre id=\"var-usage\">Usage: (var symbol)\n</pre> <pre id=\"var-docstr\">The symbol must resolve to a var, and the Var object\nitself (not its value) is returned. The reader macro #'x\nexpands to (var x).\n\nPlease see <a href=\"http://clojure.org/special_forms#var\">http://clojure.org/special_forms#var</a></pre> <p class=\"var-added\">Added in Clojure version 1.0</p>    <h2 id=\"clojure.core/var-get\">var-get<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (var-get x)\n</pre> <pre id=\"var-docstr\">Gets the value in the var object</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4173\">Source</a>  <br>  <h2 id=\"clojure.core/var-set\">var-set<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (var-set x val)\n</pre> <pre id=\"var-docstr\">Sets the value in the var object to val. The var must be\nthread-locally bound.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4179\">Source</a>  <br>  <h2 id=\"clojure.core/var?\">var?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (var? v)\n</pre> <pre id=\"var-docstr\">Returns true if v is of type clojure.lang.Var</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4769\">Source</a>  <br>  <h2 id=\"clojure.core/vary-meta\">vary-meta<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vary-meta obj f &amp; args)\n</pre> <pre id=\"var-docstr\">Returns an object of the same type and value as obj, with\n(apply f (meta obj) args) as its metadata.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L640\">Source</a>  <br>  <h2 id=\"clojure.core/vec\">vec<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vec coll)\n</pre> <pre id=\"var-docstr\">Creates a new vector containing the contents of coll. Java arrays\nwill be aliased and should not be modified.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L351\">Source</a>  <br>  <h2 id=\"clojure.core/vector\">vector<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vector)\n       (vector a)\n       (vector a b)\n       (vector a b c)\n       (vector a b c d)\n       (vector a b c d &amp; args)\n</pre> <pre id=\"var-docstr\">Creates a new vector containing the args.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L339\">Source</a>  <br>  <h2 id=\"clojure.core/vector-of\">vector-of<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vector-of t)\n       (vector-of t &amp; elements)\n</pre> <pre id=\"var-docstr\">Creates a new vector of a single primitive type t, where t is one\nof :int :long :float :double :byte :short :char or :boolean. The\nresulting vector complies with the interface of vectors in general,\nbut stores the values unboxed internally.\n\nOptionally takes one or more elements to populate the vector.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bcb8e9a7aa0b0588b4872384256d86bf53d12f15/src/clj/clojure/gvec.clj#L468\">Source</a>  <br>  <h2 id=\"clojure.core/vector?\">vector?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vector? x)\n</pre> <pre id=\"var-docstr\">Return true if x implements IPersistentVector</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L174\">Source</a>  <br>  <h2 id=\"clojure.core/volatile!\">volatile!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (volatile! val)\n</pre> <pre id=\"var-docstr\">Creates and returns a Volatile with an initial value of val.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2394\">Source</a>  <br>  <h2 id=\"clojure.core/volatile?\">volatile?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (volatile? x)\n</pre> <pre id=\"var-docstr\">Returns true if x is a volatile.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2417\">Source</a>  <br>  <h2 id=\"clojure.core/vreset!\">vreset!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vreset! vol newval)\n</pre> <pre id=\"var-docstr\">Sets the value of volatile to newval without regard for the\ncurrent value. Returns newval.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2401\">Source</a>  <br>  <h2 id=\"clojure.core/vswap!\">vswap!<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (vswap! vol f &amp; args)\n</pre> <pre id=\"var-docstr\">Non-atomically swaps the value of the volatile as if:\n(apply f current-value-of-vol args). Returns the value that\nwas swapped in.</pre> <p class=\"var-added\">Added in Clojure version 1.7</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2408\">Source</a>  <br>  <h2 id=\"clojure.core/when\">when<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (when test &amp; body)\n</pre> <pre id=\"var-docstr\">Evaluates test. If logical true, evaluates body in an implicit do.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L477\">Source</a>  <br>  <h2 id=\"clojure.core/when-first\">when-first<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (when-first bindings &amp; body)\n</pre> <pre id=\"var-docstr\">bindings =&gt; x xs\n\nRoughly the same as (when (seq xs) (let [x (first xs)] body)) but xs is evaluated only once</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4420\">Source</a>  <br>  <h2 id=\"clojure.core/when-let\">when-let<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (when-let bindings &amp; body)\n</pre> <pre id=\"var-docstr\">bindings =&gt; binding-form test\n\nWhen test is true, evaluates body with binding-form bound to the value of test</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1747\">Source</a>  <br>  <h2 id=\"clojure.core/when-not\">when-not<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (when-not test &amp; body)\n</pre> <pre id=\"var-docstr\">Evaluates test. If logical false, evaluates body in an implicit do.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L483\">Source</a>  <br>  <h2 id=\"clojure.core/when-some\">when-some<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (when-some bindings &amp; body)\n</pre> <pre id=\"var-docstr\">bindings =&gt; binding-form test\n\nWhen test is not nil, evaluates body with binding-form bound to the\nvalue of test</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1782\">Source</a>  <br>  <h2 id=\"clojure.core/while\">while<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (while test &amp; body)\n</pre> <pre id=\"var-docstr\">Repeatedly executes body while test expression is true. Presumes\nsome side-effect will cause test to become false/nil. Returns nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L6060\">Source</a>  <br>  <h2 id=\"clojure.core/with-bindings\">with-bindings<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-bindings binding-map &amp; body)\n</pre> <pre id=\"var-docstr\">Takes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. The executes body. Pops the installed\nbindings after body was evaluated. Returns the value of body.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1872\">Source</a>  <br>  <h2 id=\"clojure.core/with-bindings*\">with-bindings*<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-bindings* binding-map f &amp; args)\n</pre> <pre id=\"var-docstr\">Takes a map of Var/value pairs. Installs for the given Vars the associated\nvalues as thread-local bindings. Then calls f with the supplied arguments.\nPops the installed bindings after f returned. Returns whatever f returns.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L1859\">Source</a>  <br>  <h2 id=\"clojure.core/with-in-str\">with-in-str<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-in-str s &amp; body)\n</pre> <pre id=\"var-docstr\">Evaluates body in a context in which *in* is bound to a fresh\nStringReader initialized with the string s.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4547\">Source</a>  <br>  <h2 id=\"clojure.core/with-local-vars\">with-local-vars<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-local-vars name-vals-vec &amp; body)\n</pre> <pre id=\"var-docstr\">varbinding=&gt; symbol init-expr\n\nExecutes the exprs in a context in which the symbols are bound to\nvars with per-thread bindings to the init-exprs.  The symbols refer\nto the var objects themselves, and must be accessed with var-get and\nvar-set</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4186\">Source</a>  <br>  <h2 id=\"clojure.core/with-meta\">with-meta<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-meta obj m)\n</pre> <pre id=\"var-docstr\">Returns an object of the same type and value as obj, with\nmap m as its metadata.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L211\">Source</a>  <br>  <h2 id=\"clojure.core/with-open\">with-open<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-open bindings &amp; body)\n</pre> <pre id=\"var-docstr\">bindings =&gt; [name init ...]\n\nEvaluates body in a try expression with names bound to the values\nof the inits, and a finally clause that calls (.close name) on each\nname in reverse order.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L3679\">Source</a>  <br>  <h2 id=\"clojure.core/with-out-str\">with-out-str<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-out-str &amp; body)\n</pre> <pre id=\"var-docstr\">Evaluates exprs in a context in which *out* is bound to a fresh\nStringWriter.  Returns the string created by any nested printing\ncalls.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4536\">Source</a>  <br>  <h2 id=\"clojure.core/with-precision\">with-precision<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-precision precision &amp; exprs)\n</pre> <pre id=\"var-docstr\">Sets the precision and rounding mode to be used for BigDecimal operations.\n\nUsage: (with-precision 10 (/ 1M 3))\nor:    (with-precision 10 :rounding HALF_DOWN (/ 1M 3))\n\nThe rounding mode is one of CEILING, FLOOR, HALF_UP, HALF_DOWN,\nHALF_EVEN, UP, DOWN and UNNECESSARY; it defaults to HALF_UP.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4858\">Source</a>  <br>  <h2 id=\"clojure.core/with-redefs\">with-redefs<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-redefs bindings &amp; body)\n</pre> <pre id=\"var-docstr\">binding =&gt; var-symbol temp-value-expr\n\nTemporarily redefines Vars while executing the body.  The\ntemp-value-exprs will be evaluated and each resulting value will\nreplace in parallel the root value of its Var.  After the body is\nexecuted, the root values of all the Vars will be set back to their\nold values.  These temporary changes will be visible in all threads.\nUseful for mocking out functions during testing.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7213\">Source</a>  <br>  <h2 id=\"clojure.core/with-redefs-fn\">with-redefs-fn<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-redefs-fn binding-map func)\n</pre> <pre id=\"var-docstr\">Temporarily redefines Vars during a call to func.  Each val of\nbinding-map will replace the root value of its key which must be\na Var.  After func is called with no args, the root values of all\nthe Vars will be set back to their old values.  These temporary\nchanges will be visible in all threads.  Useful for mocking out\nfunctions during testing.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L7193\">Source</a>  <br>  <h2 id=\"clojure.core/xml-seq\">xml-seq<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (xml-seq root)\n</pre> <pre id=\"var-docstr\">A tree seq on the xml elements as per xml/parse</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L4752\">Source</a>  <br>  <h2 id=\"clojure.core/zero?\">zero?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (zero? x)\n</pre> <pre id=\"var-docstr\">Returns true if num is zero, else false</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L832\">Source</a>  <br>  <h2 id=\"clojure.core/zipmap\">zipmap<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (zipmap keys vals)\n</pre> <pre id=\"var-docstr\">Returns a map with the keys mapped to the corresponding vals.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/bdc752a7fefff5e63e0847836ae5e6d95f971c37/src/clj/clojure/core.clj#L2940\">Source</a>   <br> <h2 id=\"clojure.core.protocols\">clojure.core.protocols</h2>     <h2>Protocols</h2>    <h2 id=\"clojure.core.protocols/CollReduce\">CollReduce<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Protocol for collection types that can implement reduce faster than\nfirst/next recursion. Called by clojure.core/reduce. Baseline\nimplementation defined in terms of Iterable.</pre> Known implementations: <span id=\"proto-impls\"><a href=\"clojure.core.reducers-api#clojure.core.reducers/Cat\">clojure.core.reducers.Cat</a>, clojure.lang.APersistentMap$KeySeq, clojure.lang.APersistentMap$ValSeq, clojure.lang.ASeq, clojure.lang.IReduceInit, clojure.lang.LazySeq, clojure.lang.PersistentVector, java.lang.Iterable, nil, Object</span>  <br> <h3 id=\"clojure.core.protocols/coll-reduce\">coll-reduce<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (coll-reduce coll f)\n       (coll-reduce coll f val)\n</pre>   <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/f6a90ff2931cec35cca0ca7cf7afe90ab99e3161/src/clj/clojure/core/protocols.clj#L13\">Source</a>  <br>  <h2 id=\"clojure.core.protocols/IKVReduce\">IKVReduce<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Protocol for concrete associative types that can reduce themselves\nvia a function of key and val faster than first/next recursion over map\nentries. Called by clojure.core/reduce-kv, and has same\nsemantics (just different arg order).</pre> Known implementations: <span id=\"proto-impls\">clojure.lang.IPersistentMap, clojure.lang.PersistentArrayMap, clojure.lang.PersistentHashMap, clojure.lang.PersistentTreeMap, clojure.lang.PersistentVector, nil</span>  <br> <h3 id=\"clojure.core.protocols/kv-reduce\">kv-reduce<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (kv-reduce amap f init)\n</pre>   <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/f6a90ff2931cec35cca0ca7cf7afe90ab99e3161/src/clj/clojure/core/protocols.clj#L174\">Source</a>  <br>  <h2 id=\"clojure.core.protocols/InternalReduce\">InternalReduce<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Protocol for concrete seq types that can reduce themselves\nfaster than first/next recursion. Called by clojure.core/reduce.</pre> Known implementations: <span id=\"proto-impls\"><a href=\"clojure.core-api#clojure.core/VecSeq\">clojure.core.VecSeq</a>, clojure.lang.IChunkedSeq, clojure.lang.StringSeq, nil, Object</span>  <br> <h3 id=\"clojure.core.protocols/internal-reduce\">internal-reduce<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (internal-reduce seq f start)\n</pre>   <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/f6a90ff2931cec35cca0ca7cf7afe90ab99e3161/src/clj/clojure/core/protocols.clj#L19\">Source</a>   <br> <h2 id=\"clojure.core.reducers\">clojure.core.reducers</h2> <pre id=\"namespace-docstr\">A library for reduction and parallel folding. Alpha and subject\nto change.  Note that fold and its derivatives require Java 7+ or\nJava 6 + jsr166y.jar for fork/join support. See Clojure's pom.xml for the\ndependency info.</pre>    <h2>Types</h2>    <h2 id=\"clojure.core.reducers/Cat\">Cat<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[cnt left right]</span><br> Protocols: <span id=\"type-protocols\"><a href=\"clojure.core-api#clojure.core.protocols/CollReduce\">clojure.core.protocols/CollReduce</a>, <a href=\"#clojure.core.reducers/CollFold\">CollFold</a></span><br> Interfaces: <span id=\"type-interfaces\">clojure.lang.Counted, clojure.lang.Seqable</span><br>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.core.reducers/-&gt;Cat\">-&gt;Cat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Cat cnt left right)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.core.reducers.Cat.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L263\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/append!\">append!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (append! acc x)\n</pre> <pre id=\"var-docstr\">.adds x to acc and returns acc</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L308\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/cat\">cat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cat)\n       (cat ctor)\n       (cat left right)\n</pre> <pre id=\"var-docstr\">A high-performance combining fn that yields the catenation of the\nreduced values. The result is reducible, foldable, seqable and\ncounted, providing the identity collections are reducible, seqable\nand counted. The single argument version will build a combining fn\nwith the supplied identity constructor. Tests for identity\nwith (zero? (count x)). See also foldcat.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L288\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/drop\">drop<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (drop n)\n       (drop n coll)\n</pre> <pre id=\"var-docstr\">Elides the first n values from the reduction of coll.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L248\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/filter\">filter<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (filter pred)\n       (filter pred coll)\n</pre> <pre id=\"var-docstr\">Retains values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L187\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/flatten\">flatten<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (flatten)\n       (flatten coll)\n</pre> <pre id=\"var-docstr\">Takes any nested combination of sequential things (lists, vectors,\netc.) and returns their contents as a single, flat foldable\ncollection.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L207\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/fold\">fold<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (fold reducef coll)\n       (fold combinef reducef coll)\n       (fold n combinef reducef coll)\n</pre> <pre id=\"var-docstr\">Reduces a collection using a (potentially parallel) reduce-combine\nstrategy. The collection is partitioned into groups of approximately\nn (default 512), each of which is reduced with reducef (with a seed\nvalue obtained by calling (combinef) with no arguments). The results\nof these reductions are then reduced with combinef (default\nreducef). combinef must be associative, and, when called with no\narguments, (combinef) must produce its identity element. These\noperations may be performed in parallel, but the results will\npreserve order.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L84\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/foldcat\">foldcat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (foldcat coll)\n</pre> <pre id=\"var-docstr\">Equivalent to (fold cat append! coll)</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L314\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/folder\">folder<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (folder coll xf)\n</pre> <pre id=\"var-docstr\">Given a foldable collection, and a transformation function xf,\nreturns a foldable collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L114\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/map\">map<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map f)\n       (map f coll)\n</pre> <pre id=\"var-docstr\">Applies f to every value in the reduction of coll. Foldable.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L161\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/mapcat\">mapcat<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (mapcat f)\n       (mapcat f coll)\n</pre> <pre id=\"var-docstr\">Applies f to every value in the reduction of coll, concatenating the result\ncolls of (f val). Foldable.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L171\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/monoid\">monoid<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (monoid op ctor)\n</pre> <pre id=\"var-docstr\">Builds a combining fn out of the supplied operator and identity\nconstructor. op must be associative and ctor called with no args\nmust return an identity value for it.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L320\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/reduce\">reduce<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reduce f coll)\n       (reduce f init coll)\n</pre> <pre id=\"var-docstr\">Like core/reduce except:\nWhen init is not provided, (f) is used.\nMaps are reduced with reduce-kv</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L71\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/reducer\">reducer<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reducer coll xf)\n</pre> <pre id=\"var-docstr\">Given a reducible collection, and a transformation function xf,\nreturns a reducible collection, where any supplied reducing\nfn will be transformed by xf. xf is a function of reducing fn to\nreducing fn.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L100\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/remove\">remove<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove pred)\n       (remove pred coll)\n</pre> <pre id=\"var-docstr\">Removes values in the reduction of coll for which (pred val)\nreturns logical true. Foldable.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L200\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/take\">take<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take n)\n       (take n coll)\n</pre> <pre id=\"var-docstr\">Ends the reduction of coll after consuming n values.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L234\">Source</a>  <br>  <h2 id=\"clojure.core.reducers/take-while\">take-while<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (take-while pred)\n       (take-while pred coll)\n</pre> <pre id=\"var-docstr\">Ends the reduction of coll when (pred val) returns logical false.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/7d84a9f6f35a503cddf98487b6544d18937c669e/src/clj/clojure/core/reducers.clj#L222\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.core-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.core-api.html</a>\n  </p>\n</div>\n","clojure.java.javadoc-api":"<h1 id=\"overview\">clojure.java.javadoc</h1> <span id=\"author-line\">by <span id=\"author-name\">Christophe Grand, Stuart Sierra</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.java.javadoc</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">A repl helper to quickly open javadocs.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.java.javadoc/add-local-javadoc\">add-local-javadoc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (add-local-javadoc path)\n</pre> <pre id=\"var-docstr\">Adds to the list of local Javadoc paths.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/26cfee0d739d091a4d87890b3effe3850728ce47/src/clj/clojure/java/javadoc.clj#L38\">Source</a>  <br>  <h2 id=\"clojure.java.javadoc/add-remote-javadoc\">add-remote-javadoc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (add-remote-javadoc package-prefix url)\n</pre> <pre id=\"var-docstr\">Adds to the list of remote Javadoc URLs.  package-prefix is the\nbeginning of the package name that has docs at this URL.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/26cfee0d739d091a4d87890b3effe3850728ce47/src/clj/clojure/java/javadoc.clj#L44\">Source</a>  <br>  <h2 id=\"clojure.java.javadoc/javadoc\">javadoc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (javadoc class-or-object)\n</pre> <pre id=\"var-docstr\">Opens a browser window displaying the javadoc for the argument.\nTries *local-javadocs* first, then *remote-javadocs*.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/26cfee0d739d091a4d87890b3effe3850728ce47/src/clj/clojure/java/javadoc.clj#L72\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.javadoc-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.javadoc-api.html</a>\n  </p>\n</div>\n","clojure.template-api":"<h1 id=\"overview\">clojure.template</h1> <span id=\"author-line\">by <span id=\"author-name\">Stuart Sierra</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.template</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Macros that expand to repeated copies of a template expression.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.template/apply-template\">apply-template<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (apply-template argv expr values)\n</pre> <pre id=\"var-docstr\">For use in macros.  argv is an argument list, as in defn.  expr is\na quoted expression using the symbols in argv.  values is a sequence\nof values to be used for the arguments.\n\napply-template will recursively replace argument symbols in expr\nwith their corresponding values, returning a modified expr.\n\nExample: (apply-template '[x] '(+ x x) '[2])\n         ;=&gt; (+ 2 2)</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/787938361128c2bc21ed896dd4523651b59cb420/src/clj/clojure/template.clj#L30\">Source</a>  <br>  <h2 id=\"clojure.template/do-template\">do-template<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (do-template argv expr &amp; values)\n</pre> <pre id=\"var-docstr\">Repeatedly copies expr (in a do block) for each group of arguments\nin values.  values are automatically partitioned by the number of\narguments in argv, an argument vector as in defn.\n\nExample: (macroexpand '(do-template [x y] (+ y x) 2 4 3 5))\n         ;=&gt; (do (+ 4 2) (+ 5 3))</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/787938361128c2bc21ed896dd4523651b59cb420/src/clj/clojure/template.clj#L45\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.template-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.template-api.html</a>\n  </p>\n</div>\n","clojure.repl-api":"<h1 id=\"overview\">clojure.repl</h1> <span id=\"author-line\">by <span id=\"author-name\">Chris Houser, Christophe Grand, Stephen Gilardi, Michel Salim</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.repl</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Utilities meant to be used interactively at the REPL</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.repl/apropos\">apropos<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (apropos str-or-pattern)\n</pre> <pre id=\"var-docstr\">Given a regular expression or stringable thing, return a seq of all\npublic definitions in all currently-loaded namespaces that match the\nstr-or-pattern.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L168\">Source</a>  <br>  <h2 id=\"clojure.repl/demunge\">demunge<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (demunge fn-name)\n</pre> <pre id=\"var-docstr\">Given a string representation of a fn class,\nas in a stack trace element, returns a readable version.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L194\">Source</a>  <br>  <h2 id=\"clojure.repl/dir\">dir<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (dir nsname)\n</pre> <pre id=\"var-docstr\">Prints a sorted directory of public vars in a namespace</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L188\">Source</a>  <br>  <h2 id=\"clojure.repl/dir-fn\">dir-fn<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (dir-fn ns)\n</pre> <pre id=\"var-docstr\">Returns a sorted seq of symbols naming public vars in\na namespace</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L182\">Source</a>  <br>  <h2 id=\"clojure.repl/doc\">doc<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (doc name)\n</pre> <pre id=\"var-docstr\">Prints documentation for a var or special form given its name</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L120\">Source</a>  <br>  <h2 id=\"clojure.repl/find-doc\">find-doc<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (find-doc re-string-or-pattern)\n</pre> <pre id=\"var-docstr\">Prints documentation for any var whose documentation or name\ncontains a match for re-string-or-pattern</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L104\">Source</a>  <br>  <h2 id=\"clojure.repl/pst\">pst<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pst)\n       (pst e-or-depth)\n       (pst e depth)\n</pre> <pre id=\"var-docstr\">Prints a stack trace of the exception, to the depth requested. If none supplied, uses the root cause of the\nmost recent repl exception (*e), and a depth of 12.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L227\">Source</a>  <br>  <h2 id=\"clojure.repl/root-cause\">root-cause<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (root-cause t)\n</pre> <pre id=\"var-docstr\">Returns the initial cause of an exception or error by peeling off all of\nits wrappers</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L201\">Source</a>  <br>  <h2 id=\"clojure.repl/set-break-handler!\">set-break-handler!<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-break-handler!)\n       (set-break-handler! f)\n</pre> <pre id=\"var-docstr\">Register INT signal handler.  After calling this, Ctrl-C will cause\nthe given function f to be called with a single argument, the signal.\nUses thread-stopper if no function given.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L263\">Source</a>  <br>  <h2 id=\"clojure.repl/source\">source<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (source n)\n</pre> <pre id=\"var-docstr\">Prints the source code for the given symbol, if it can find it.\nThis requires that the symbol resolve to a Var defined in a\nnamespace for which the .clj is in the classpath.\n\nExample: (source filter)</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L159\">Source</a>  <br>  <h2 id=\"clojure.repl/source-fn\">source-fn<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (source-fn x)\n</pre> <pre id=\"var-docstr\">Returns a string of the source code for the given symbol, if it can\nfind it.  This requires that the symbol resolve to a Var defined in\na namespace for which the .clj is in the classpath.  Returns nil if\nit can't find the source.  For most REPL usage, 'source' is more\nconvenient.\n\nExample: (source-fn 'filter)</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L134\">Source</a>  <br>  <h2 id=\"clojure.repl/stack-element-str\">stack-element-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (stack-element-str el)\n</pre> <pre id=\"var-docstr\">Returns a (possibly unmunged) string representation of a StackTraceElement</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L214\">Source</a>  <br>  <h2 id=\"clojure.repl/thread-stopper\">thread-stopper<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (thread-stopper)\n       (thread-stopper thread)\n</pre> <pre id=\"var-docstr\">Returns a function that takes one arg and uses that as an exception message\nto stop the given thread.  Defaults to the current thread</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/61bc3523eebaade6a1d856f74330169eb26211ea/src/clj/clojure/repl.clj#L257\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.repl-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.repl-api.html</a>\n  </p>\n</div>\n","clojure.java.browse-api":"<h1 id=\"overview\">clojure.java.browse</h1> <span id=\"author-line\">by <span id=\"author-name\">Christophe Grand</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.java.browse</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Start a web browser from Clojure</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.java.browse/browse-url\">browse-url<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (browse-url url)\n</pre> <pre id=\"var-docstr\">Open url in a browser</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/ef00c7cffad10e6104d333f7f71a29163b06cd0a/src/clj/clojure/java/browse.clj#L66\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.browse-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.browse-api.html</a>\n  </p>\n</div>\n","clojure.data-api":"<h1 id=\"overview\">clojure.data</h1> <span id=\"author-line\">by <span id=\"author-name\">Stuart Halloway</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.data</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Non-core data functions.</pre>    <h2>Protocols</h2>    <h2 id=\"clojure.data/Diff\">Diff<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Implementation detail. Subject to change.</pre> Known implementations: <span id=\"proto-impls\">java.util.List, java.util.Map, java.util.Set, nil, Object</span>  <br> <h3 id=\"clojure.data/diff-similar\">diff-similar<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (diff-similar a b)\n</pre> <pre id=\"var-docstr\">Implementation detail. Subject to change.</pre>   <p class=\"proto-added\">Added in Clojure version 1.3</p> <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/9baebd091b1301aecaaac3b5f9c7ede5dcc58f8c/src/clj/clojure/data.clj#L71\">Source</a>  <br>  <h2 id=\"clojure.data/EqualityPartition\">EqualityPartition<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Implementation detail. Subject to change.</pre> Known implementations: <span id=\"proto-impls\">java.util.List, java.util.Map, java.util.Set, nil, Object</span>  <br> <h3 id=\"clojure.data/equality-partition\">equality-partition<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (equality-partition x)\n</pre> <pre id=\"var-docstr\">Implementation detail. Subject to change.</pre>   <p class=\"proto-added\">Added in Clojure version 1.3</p> <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/9baebd091b1301aecaaac3b5f9c7ede5dcc58f8c/src/clj/clojure/data.clj#L67\">Source</a>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.data/diff\">diff<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (diff a b)\n</pre> <pre id=\"var-docstr\">Recursively compares a and b, returning a tuple of\n[things-only-in-a things-only-in-b things-in-both].\nComparison rules:\n\n* For equal a and b, return [nil nil a].\n* Maps are subdiffed where keys match and values differ.\n* Sets are never subdiffed.\n* All sequential things are treated as associative collections\n  by their indexes, with results returned as vectors.\n* Everything else (including strings!) is treated as\n  an atom and compared for equality.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9baebd091b1301aecaaac3b5f9c7ede5dcc58f8c/src/clj/clojure/data.clj#L120\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.data-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.data-api.html</a>\n  </p>\n</div>\n","clojure.set-api":"<h1 id=\"overview\">clojure.set</h1> Full namespace name: <span id=\"long-name\">clojure.set</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.set/difference\">difference<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (difference s1)\n       (difference s1 s2)\n       (difference s1 s2 &amp; sets)\n</pre> <pre id=\"var-docstr\">Return a set that is the first set without elements of the remaining sets</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L48\">Source</a>  <br>  <h2 id=\"clojure.set/index\">index<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (index xrel ks)\n</pre> <pre id=\"var-docstr\">Returns a map of the distinct values of ks in the xrel mapped to a\nset of the maps in xrel with the corresponding values of ks.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L94\">Source</a>  <br>  <h2 id=\"clojure.set/intersection\">intersection<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (intersection s1)\n       (intersection s1 s2)\n       (intersection s1 s2 &amp; sets)\n</pre> <pre id=\"var-docstr\">Return a set that is the intersection of the input sets</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L32\">Source</a>  <br>  <h2 id=\"clojure.set/join\">join<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (join xrel yrel)\n       (join xrel yrel km)\n</pre> <pre id=\"var-docstr\">When passed 2 rels, returns the rel corresponding to the natural\njoin. When passed an additional keymap, joins on the corresponding\nkeys.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L110\">Source</a>  <br>  <h2 id=\"clojure.set/map-invert\">map-invert<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map-invert m)\n</pre> <pre id=\"var-docstr\">Returns the map with the vals mapped to the keys.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L105\">Source</a>  <br>  <h2 id=\"clojure.set/project\">project<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (project xrel ks)\n</pre> <pre id=\"var-docstr\">Returns a rel of the elements of xrel with only the keys in ks</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L71\">Source</a>  <br>  <h2 id=\"clojure.set/rename\">rename<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rename xrel kmap)\n</pre> <pre id=\"var-docstr\">Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L88\">Source</a>  <br>  <h2 id=\"clojure.set/rename-keys\">rename-keys<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rename-keys map kmap)\n</pre> <pre id=\"var-docstr\">Returns the map with the keys in kmap renamed to the vals in kmap</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L77\">Source</a>  <br>  <h2 id=\"clojure.set/select\">select<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (select pred xset)\n</pre> <pre id=\"var-docstr\">Returns a set of the elements for which pred is true</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L64\">Source</a>  <br>  <h2 id=\"clojure.set/subset?\">subset?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (subset? set1 set2)\n</pre> <pre id=\"var-docstr\">Is set1 a subset of set2?</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L141\">Source</a>  <br>  <h2 id=\"clojure.set/superset?\">superset?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (superset? set1 set2)\n</pre> <pre id=\"var-docstr\">Is set1 a superset of set2?</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L149\">Source</a>  <br>  <h2 id=\"clojure.set/union\">union<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (union)\n       (union s1)\n       (union s1 s2)\n       (union s1 s2 &amp; sets)\n</pre> <pre id=\"var-docstr\">Return a set that is the union of the input sets</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b5d0e84f92038449312bea4c31dcdedd499e28b8/src/clj/clojure/set.clj#L19\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.set-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.set-api.html</a>\n  </p>\n</div>\n","clojure.stacktrace-api":"<h1 id=\"overview\">clojure.stacktrace</h1> <span id=\"author-line\">by <span id=\"author-name\">Stuart Sierra</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.stacktrace</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Print stack traces oriented towards Clojure, not Java.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.stacktrace/e\">e<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (e)\n</pre> <pre id=\"var-docstr\">REPL utility.  Prints a brief stack trace for the root cause of the\nmost recent exception.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L76\">Source</a>  <br>  <h2 id=\"clojure.stacktrace/print-cause-trace\">print-cause-trace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-cause-trace tr)\n       (print-cause-trace tr n)\n</pre> <pre id=\"var-docstr\">Like print-stack-trace but prints chained exceptions (causes).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L66\">Source</a>  <br>  <h2 id=\"clojure.stacktrace/print-stack-trace\">print-stack-trace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-stack-trace tr)\n       (print-stack-trace tr n)\n</pre> <pre id=\"var-docstr\">Prints a Clojure-oriented stack trace of tr, a Throwable.\nPrints a maximum of n stack frames (default: unlimited).\nDoes not print chained exceptions (causes).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L44\">Source</a>  <br>  <h2 id=\"clojure.stacktrace/print-throwable\">print-throwable<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-throwable tr)\n</pre> <pre id=\"var-docstr\">Prints the class and message of a Throwable.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L38\">Source</a>  <br>  <h2 id=\"clojure.stacktrace/print-trace-element\">print-trace-element<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-trace-element e)\n</pre> <pre id=\"var-docstr\">Prints a Clojure-oriented view of one element in a stack trace.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L26\">Source</a>  <br>  <h2 id=\"clojure.stacktrace/root-cause\">root-cause<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (root-cause tr)\n</pre> <pre id=\"var-docstr\">Returns the last 'cause' Throwable in a chain of Throwables.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c32511a4073edc7e7a38d47e097fb9e0c2b0a3f5/src/clj/clojure/stacktrace.clj#L18\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.stacktrace-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.stacktrace-api.html</a>\n  </p>\n</div>\n","clojure.inspector-api":"<h1 id=\"overview\">clojure.inspector</h1> <span id=\"author-line\">by <span id=\"author-name\">Rich Hickey</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.inspector</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Graphical object inspector for Clojure data structures.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.inspector/inspect\">inspect<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inspect x)\n</pre> <pre id=\"var-docstr\">creates a graphical (Swing) inspector on the supplied object</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9b1db94bf707c155472864d1a823965b72a0fe0e/src/clj/clojure/inspector.clj#L154\">Source</a>  <br>  <h2 id=\"clojure.inspector/inspect-table\">inspect-table<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inspect-table data)\n</pre> <pre id=\"var-docstr\">creates a graphical (Swing) inspector on the supplied regular\ndata, which must be a sequential data structure of data structures\nof equal length</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9b1db94bf707c155472864d1a823965b72a0fe0e/src/clj/clojure/inspector.clj#L100\">Source</a>  <br>  <h2 id=\"clojure.inspector/inspect-tree\">inspect-tree<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inspect-tree data)\n</pre> <pre id=\"var-docstr\">creates a graphical (Swing) inspector on the supplied hierarchical data</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9b1db94bf707c155472864d1a823965b72a0fe0e/src/clj/clojure/inspector.clj#L91\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.inspector-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.inspector-api.html</a>\n  </p>\n</div>\n","clojure.walk-api":"<h1 id=\"overview\">clojure.walk</h1> Full namespace name: <span id=\"long-name\">clojure.walk</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.walk/keywordize-keys\">keywordize-keys<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (keywordize-keys m)\n</pre> <pre id=\"var-docstr\">Recursively transforms all map keys from strings to keywords.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L93\">Source</a>  <br>  <h2 id=\"clojure.walk/macroexpand-all\">macroexpand-all<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (macroexpand-all form)\n</pre> <pre id=\"var-docstr\">Recursively performs all possible macroexpansions in form.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L125\">Source</a>  <br>  <h2 id=\"clojure.walk/postwalk\">postwalk<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (postwalk f form)\n</pre> <pre id=\"var-docstr\">Performs a depth-first, post-order traversal of form.  Calls f on\neach sub-form, uses f's return value in place of the original.\nRecognizes all Clojure data structures. Consumes seqs as with doall.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L52\">Source</a>  <br>  <h2 id=\"clojure.walk/postwalk-demo\">postwalk-demo<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (postwalk-demo form)\n</pre> <pre id=\"var-docstr\">Demonstrates the behavior of postwalk by printing each form as it is\nwalked.  Returns form.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L79\">Source</a>  <br>  <h2 id=\"clojure.walk/postwalk-replace\">postwalk-replace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (postwalk-replace smap form)\n</pre> <pre id=\"var-docstr\">Recursively transforms form by replacing keys in smap with their\nvalues.  Like clojure/replace but works on any data structure.  Does\nreplacement at the leaves of the tree first.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L117\">Source</a>  <br>  <h2 id=\"clojure.walk/prewalk\">prewalk<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prewalk f form)\n</pre> <pre id=\"var-docstr\">Like postwalk, but does pre-order traversal.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L60\">Source</a>  <br>  <h2 id=\"clojure.walk/prewalk-demo\">prewalk-demo<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prewalk-demo form)\n</pre> <pre id=\"var-docstr\">Demonstrates the behavior of prewalk by printing each form as it is\nwalked.  Returns form.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L86\">Source</a>  <br>  <h2 id=\"clojure.walk/prewalk-replace\">prewalk-replace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prewalk-replace smap form)\n</pre> <pre id=\"var-docstr\">Recursively transforms form by replacing keys in smap with their\nvalues.  Like clojure/replace but works on any data structure.  Does\nreplacement at the root of the tree first.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L109\">Source</a>  <br>  <h2 id=\"clojure.walk/stringify-keys\">stringify-keys<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (stringify-keys m)\n</pre> <pre id=\"var-docstr\">Recursively transforms all map keys from keywords to strings.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L101\">Source</a>  <br>  <h2 id=\"clojure.walk/walk\">walk<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (walk inner outer form)\n</pre> <pre id=\"var-docstr\">Traverses form, an arbitrary data structure.  inner and outer are\nfunctions.  Applies inner to each element of form, building up a\ndata structure of the same type, then applies outer to the result.\nRecognizes all Clojure data structures. Consumes seqs as with doall.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/2224dbad5534ff23d3653b07d9dc0a60ba076dd7/src/clj/clojure/walk.clj#L35\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.walk-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.walk-api.html</a>\n  </p>\n</div>\n","clojure.xml-api":"<h1 id=\"overview\">clojure.xml</h1> <span id=\"author-line\">by <span id=\"author-name\">Rich Hickey</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.xml</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">XML reading/writing.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.xml/parse\">parse<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (parse s)\n       (parse s startparse)\n</pre> <pre id=\"var-docstr\">Parses and loads the source s, which can be a File, InputStream or\nString naming a URI. Returns a tree of the xml/element struct-map,\nwhich has the keys :tag, :attrs, and :content. and accessor fns tag,\nattrs, and content. Other parsers can be supplied by passing\nstartparse, a fn taking a source and a ContentHandler and returning\na parser</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/b9b1a094499b69a94bd47fc94c4f082d80239fa9/src/clj/clojure/xml.clj#L78\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.xml-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.xml-api.html</a>\n  </p>\n</div>\n","clojure.instant-api":"<h1 id=\"overview\">clojure.instant</h1> Full namespace name: <span id=\"long-name\">clojure.instant</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.instant/parse-timestamp\">parse-timestamp<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">Parse a string containing an RFC3339-like like timestamp.\n\nThe function new-instant is called with the following arguments.\n\n                min  max           default\n                ---  ------------  -------\n  years          0           9999      N/A (s must provide years)\n  months         1             12        1\n  days           1             31        1 (actual max days depends\n  hours          0             23        0  on month and year)\n  minutes        0             59        0\n  seconds        0             60        0 (though 60 is only valid\n  nanoseconds    0      999999999        0  when minutes is 59)\n  offset-sign   -1              1        0\n  offset-hours   0             23        0\n  offset-minutes 0             59        0\n\nThese are all integers and will be non-nil. (The listed defaults\nwill be passed if the corresponding field is not present in s.)\n\nGrammar (of s):\n\n  date-fullyear   = 4DIGIT\n  date-month      = 2DIGIT  ; 01-12\n  date-mday       = 2DIGIT  ; 01-28, 01-29, 01-30, 01-31 based on\n                            ; month/year\n  time-hour       = 2DIGIT  ; 00-23\n  time-minute     = 2DIGIT  ; 00-59\n  time-second     = 2DIGIT  ; 00-58, 00-59, 00-60 based on leap second\n                            ; rules\n  time-secfrac    = '.' 1*DIGIT\n  time-numoffset  = ('+' / '-') time-hour ':' time-minute\n  time-offset     = 'Z' / time-numoffset\n\n  time-part       = time-hour [ ':' time-minute [ ':' time-second\n                    [time-secfrac] [time-offset] ] ]\n\n  timestamp       = date-year [ '-' date-month [ '-' date-mday\n                    [ 'T' time-part ] ] ]\n\nUnlike RFC3339:\n\n  - we only parse the timestamp format\n  - timestamp can elide trailing components\n  - time-offset is optional (defaults to +00:00)\n\nThough time-offset is syntactically optional, a missing time-offset\nwill be treated as if the time-offset zero (+00:00) had been\nspecified.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/5e9ad16e11aad1228ca3d1b0a9c3b52ccd602dbc/src/clj/clojure/instant.clj#L48\">Source</a>  <br>  <h2 id=\"clojure.instant/read-instant-calendar\">read-instant-calendar<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">To read an instant as a java.util.Calendar, bind *data-readers* to a map with\nthis var as the value for the 'inst key.  Calendar preserves the timezone\noffset.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/5e9ad16e11aad1228ca3d1b0a9c3b52ccd602dbc/src/clj/clojure/instant.clj#L277\">Source</a>  <br>  <h2 id=\"clojure.instant/read-instant-date\">read-instant-date<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">To read an instant as a java.util.Date, bind *data-readers* to a map with\nthis var as the value for the 'inst key. The timezone offset will be used\nto convert into UTC.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/5e9ad16e11aad1228ca3d1b0a9c3b52ccd602dbc/src/clj/clojure/instant.clj#L271\">Source</a>  <br>  <h2 id=\"clojure.instant/read-instant-timestamp\">read-instant-timestamp<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">To read an instant as a java.sql.Timestamp, bind *data-readers* to a\nmap with this var as the value for the 'inst key. Timestamp preserves\nfractional seconds with nanosecond precision. The timezone offset will\nbe used to convert into UTC.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/5e9ad16e11aad1228ca3d1b0a9c3b52ccd602dbc/src/clj/clojure/instant.clj#L283\">Source</a>  <br>  <h2 id=\"clojure.instant/validated\">validated<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (validated new-instance)\n</pre> <pre id=\"var-docstr\">Return a function which constructs and instant by calling constructor\nafter first validating that those arguments are in range and otherwise\nplausible. The resulting function will throw an exception if called\nwith invalid arguments.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/5e9ad16e11aad1228ca3d1b0a9c3b52ccd602dbc/src/clj/clojure/instant.clj#L136\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.instant-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.instant-api.html</a>\n  </p>\n</div>\n","clojure.edn-api":"<h1 id=\"overview\">clojure.edn</h1> <span id=\"author-line\">by <span id=\"author-name\">Rich Hickey</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.edn</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">edn reading.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.edn/read\">read<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (read)\n       (read stream)\n       (read opts stream)\n</pre> <pre id=\"var-docstr\">Reads the next object from stream, which must be an instance of\njava.io.PushbackReader or some derivee.  stream defaults to the\ncurrent value of *in*.\n\nReads data in the edn format (subset of Clojure data):\n<a href=\"http://edn-format.org\">http://edn-format.org</a>\n\nopts is a map that can include the following keys:\n:eof - value to return on end-of-file. When not supplied, eof throws an exception.\n:readers  - a map of tag symbols to data-reader functions to be considered before default-data-readers.\n            When not supplied, only the default-data-readers will be used.\n:default - A function of two args, that will, if present and no reader is found for a tag,\n           be called with the tag and the value.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L14\">Source</a>  <br>  <h2 id=\"clojure.edn/read-string\">read-string<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (read-string s)\n       (read-string opts s)\n</pre> <pre id=\"var-docstr\">Reads one object from the string s. Returns nil when s is nil or empty.\n\nReads data in the edn format (subset of Clojure data):\n<a href=\"http://edn-format.org\">http://edn-format.org</a>\n\nopts is a map as per clojure.edn/read</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/c6756a8bab137128c8119add29a25b0a88509900/src/clj/clojure/edn.clj#L37\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.edn-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.edn-api.html</a>\n  </p>\n</div>\n","clojure.zip-api":"<h1 id=\"overview\">clojure.zip</h1> <span id=\"author-line\">by <span id=\"author-name\">Rich Hickey</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.zip</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Functional hierarchical zipper, with navigation, editing,\nand enumeration.  See Huet</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.zip/append-child\">append-child<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (append-child loc item)\n</pre> <pre id=\"var-docstr\">Inserts the item as the rightmost child of the node at this loc,\nwithout moving</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L223\">Source</a>  <br>  <h2 id=\"clojure.zip/branch?\">branch?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (branch? loc)\n</pre> <pre id=\"var-docstr\">Returns true if the node at loc is a branch</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L69\">Source</a>  <br>  <h2 id=\"clojure.zip/children\">children<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (children loc)\n</pre> <pre id=\"var-docstr\">Returns a seq of the children of node at loc, which must be a branch</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L75\">Source</a>  <br>  <h2 id=\"clojure.zip/down\">down<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (down loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the leftmost child of the node at this loc, or\nnil if no children</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L109\">Source</a>  <br>  <h2 id=\"clojure.zip/edit\">edit<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (edit loc f &amp; args)\n</pre> <pre id=\"var-docstr\">Replaces the node at this loc with the value of (f node args)</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L210\">Source</a>  <br>  <h2 id=\"clojure.zip/end?\">end?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (end? loc)\n</pre> <pre id=\"var-docstr\">Returns true if loc represents the end of a depth-first walk</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L258\">Source</a>  <br>  <h2 id=\"clojure.zip/insert-child\">insert-child<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (insert-child loc item)\n</pre> <pre id=\"var-docstr\">Inserts the item as the leftmost child of the node at this loc,\nwithout moving</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L216\">Source</a>  <br>  <h2 id=\"clojure.zip/insert-left\">insert-left<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (insert-left loc item)\n</pre> <pre id=\"var-docstr\">Inserts the item as the left sibling of the node at this loc,\nwithout moving</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L183\">Source</a>  <br>  <h2 id=\"clojure.zip/insert-right\">insert-right<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (insert-right loc item)\n</pre> <pre id=\"var-docstr\">Inserts the item as the right sibling of the node at this loc,\nwithout moving</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L193\">Source</a>  <br>  <h2 id=\"clojure.zip/left\">left<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (left loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the left sibling of the node at this loc, or nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L166\">Source</a>  <br>  <h2 id=\"clojure.zip/leftmost\">leftmost<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (leftmost loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the leftmost sibling of the node at this loc, or self</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L174\">Source</a>  <br>  <h2 id=\"clojure.zip/lefts\">lefts<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (lefts loc)\n</pre> <pre id=\"var-docstr\">Returns a seq of the left siblings of this loc</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L96\">Source</a>  <br>  <h2 id=\"clojure.zip/make-node\">make-node<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (make-node loc node children)\n</pre> <pre id=\"var-docstr\">Returns a new branch node, given an existing node and new\nchildren. The loc is only used to supply the constructor.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L83\">Source</a>  <br>  <h2 id=\"clojure.zip/next\">next<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (next loc)\n</pre> <pre id=\"var-docstr\">Moves to the next loc in the hierarchy, depth-first. When reaching\nthe end, returns a distinguished loc detectable via end?. If already\nat the end, stays there.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L230\">Source</a>  <br>  <h2 id=\"clojure.zip/node\">node<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (node loc)\n</pre> <pre id=\"var-docstr\">Returns the node at loc</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L64\">Source</a>  <br>  <h2 id=\"clojure.zip/path\">path<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (path loc)\n</pre> <pre id=\"var-docstr\">Returns a seq of nodes leading to this loc</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L90\">Source</a>  <br>  <h2 id=\"clojure.zip/prev\">prev<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (prev loc)\n</pre> <pre id=\"var-docstr\">Moves to the previous loc in the hierarchy, depth-first. If already\nat the root, returns nil.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L246\">Source</a>  <br>  <h2 id=\"clojure.zip/remove\">remove<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (remove loc)\n</pre> <pre id=\"var-docstr\">Removes the node at loc, returning the loc that would have preceded\nit in a depth-first walk.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L264\">Source</a>  <br>  <h2 id=\"clojure.zip/replace\">replace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (replace loc node)\n</pre> <pre id=\"var-docstr\">Replaces the node at this loc, without moving</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L203\">Source</a>  <br>  <h2 id=\"clojure.zip/right\">right<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (right loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the right sibling of the node at this loc, or nil</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L149\">Source</a>  <br>  <h2 id=\"clojure.zip/rightmost\">rightmost<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rightmost loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the rightmost sibling of the node at this loc, or self</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L157\">Source</a>  <br>  <h2 id=\"clojure.zip/rights\">rights<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (rights loc)\n</pre> <pre id=\"var-docstr\">Returns a seq of the right siblings of this loc</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L102\">Source</a>  <br>  <h2 id=\"clojure.zip/root\">root<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (root loc)\n</pre> <pre id=\"var-docstr\">zips all the way up and returns the root node, reflecting any\nchanges.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L137\">Source</a>  <br>  <h2 id=\"clojure.zip/seq-zip\">seq-zip<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (seq-zip root)\n</pre> <pre id=\"var-docstr\">Returns a zipper for nested sequences, given a root sequence</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L35\">Source</a>  <br>  <h2 id=\"clojure.zip/up\">up<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (up loc)\n</pre> <pre id=\"var-docstr\">Returns the loc of the parent of the node at this loc, or nil if at\nthe top</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L123\">Source</a>  <br>  <h2 id=\"clojure.zip/vector-zip\">vector-zip<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (vector-zip root)\n</pre> <pre id=\"var-docstr\">Returns a zipper for nested vectors, given a root vector</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L44\">Source</a>  <br>  <h2 id=\"clojure.zip/xml-zip\">xml-zip<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (xml-zip root)\n</pre> <pre id=\"var-docstr\">Returns a zipper for xml elements (as from xml/parse),\ngiven a root element</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L53\">Source</a>  <br>  <h2 id=\"clojure.zip/zipper\">zipper<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (zipper branch? children make-node root)\n</pre> <pre id=\"var-docstr\">Creates a new zipper structure. \n\nbranch? is a fn that, given a node, returns true if can have\nchildren, even if it currently doesn't.\n\nchildren is a fn that, given a branch node, returns a seq of its\nchildren.\n\nmake-node is a fn that, given an existing node and a seq of\nchildren, returns a new branch node with the supplied children.\nroot is the root node.</pre> <p class=\"var-added\">Added in Clojure version 1.0</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/59b65669860a1f33825775494809e5d500c19c63/src/clj/clojure/zip.clj#L18\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.zip-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.zip-api.html</a>\n  </p>\n</div>\n","clojure.java.io-api":"<h1 id=\"overview\">clojure.java.io</h1> Full namespace name: <span id=\"long-name\">clojure.java.io</span>  <h2>Overview</h2>     <h2>Protocols</h2>    <h2 id=\"clojure.java.io/Coercions\">Coercions<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Coerce between various 'resource-namish' things.</pre> Known implementations: <span id=\"proto-impls\">java.io.File, java.lang.String, java.net.URI, java.net.URL, nil</span>  <br> <h3 id=\"clojure.java.io/as-file\">as-file<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (as-file x)\n</pre> <pre id=\"var-docstr\">Coerce argument to a file.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p>   <h3 id=\"clojure.java.io/as-url\">as-url<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (as-url x)\n</pre> <pre id=\"var-docstr\">Coerce argument to a URL.</pre>   <p class=\"proto-added\">Added in Clojure version 1.2</p> <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L35\">Source</a>  <br>  <h2 id=\"clojure.java.io/IOFactory\">IOFactory<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Factory functions that create ready-to-use, buffered versions of\nthe various Java I/O stream types, on top of anything that can\nbe unequivocally converted to the requested kind of stream.\n\nCommon options include\n\n  :append    true to open stream in append mode\n  :encoding  string name of encoding to use, e.g. \"UTF-8\".\n\nCallers should generally prefer the higher level API provided by\nreader, writer, input-stream, and output-stream.</pre> Known implementations: <span id=\"proto-impls\">array-of-bytes, array-of-characters, java.io.BufferedInputStream, java.io.BufferedOutputStream, java.io.BufferedReader, java.io.BufferedWriter, java.io.File, java.io.InputStream, java.io.OutputStream, java.io.Reader, java.io.Writer, java.lang.String, java.net.Socket, java.net.URI, java.net.URL, Object</span>  <br> <h3 id=\"clojure.java.io/make-input-stream\">make-input-stream<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (make-input-stream x opts)\n</pre> <pre id=\"var-docstr\">Creates a BufferedInputStream. See also IOFactory docs.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p>   <h3 id=\"clojure.java.io/make-output-stream\">make-output-stream<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (make-output-stream x opts)\n</pre> <pre id=\"var-docstr\">Creates a BufferedOutputStream. See also IOFactory docs.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p>   <h3 id=\"clojure.java.io/make-reader\">make-reader<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (make-reader x opts)\n</pre> <pre id=\"var-docstr\">Creates a BufferedReader. See also IOFactory docs.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p>   <h3 id=\"clojure.java.io/make-writer\">make-writer<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (make-writer x opts)\n</pre> <pre id=\"var-docstr\">Creates a BufferedWriter. See also IOFactory docs.</pre>   <p class=\"proto-added\">Added in Clojure version 1.2</p> <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L69\">Source</a>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.java.io/as-relative-path\">as-relative-path<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (as-relative-path x)\n</pre> <pre id=\"var-docstr\">Take an as-file-able thing and return a string if it is\na relative path, else IllegalArgumentException.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L398\">Source</a>  <br>  <h2 id=\"clojure.java.io/copy\">copy<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (copy input output &amp; opts)\n</pre> <pre id=\"var-docstr\">Copies input to output.  Returns nil or throws IOException.\nInput may be an InputStream, Reader, File, byte[], or String.\nOutput may be an OutputStream, Writer, or File.\n\nOptions are key/value pairs and may be one of\n\n  :buffer-size  buffer size to use, default is 1024.\n  :encoding     encoding to use if converting between\n                byte and char streams.   \n\nDoes not close any streams except those it opens itself \n(on a File).</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L381\">Source</a>  <br>  <h2 id=\"clojure.java.io/delete-file\">delete-file<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (delete-file f &amp; [silently])\n</pre> <pre id=\"var-docstr\">Delete file f. Raise an exception if it fails unless silently is true.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L420\">Source</a>  <br>  <h2 id=\"clojure.java.io/file\">file<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (file arg)\n       (file parent child)\n       (file parent child &amp; more)\n</pre> <pre id=\"var-docstr\">Returns a java.io.File, passing each arg to as-file.  Multiple-arg\nversions treat the first argument as parent and subsequent args as\nchildren relative to the parent.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L408\">Source</a>  <br>  <h2 id=\"clojure.java.io/input-stream\">input-stream<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (input-stream x &amp; opts)\n</pre> <pre id=\"var-docstr\">Attempts to coerce its argument into an open java.io.InputStream.\nDefault implementations always return a java.io.BufferedInputStream.\n\nDefault implementations are defined for InputStream, File, URI, URL,\nSocket, byte array, and String arguments.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the InputStream is properly\nclosed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L121\">Source</a>  <br>  <h2 id=\"clojure.java.io/make-parents\">make-parents<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (make-parents f &amp; more)\n</pre> <pre id=\"var-docstr\">Given the same arg(s) as for file, creates all parent directories of\nthe file they represent.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L428\">Source</a>  <br>  <h2 id=\"clojure.java.io/output-stream\">output-stream<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (output-stream x &amp; opts)\n</pre> <pre id=\"var-docstr\">Attempts to coerce its argument into an open java.io.OutputStream.\nDefault implementations always return a java.io.BufferedOutputStream.\n\nDefault implementations are defined for OutputStream, File, URI, URL,\nSocket, and String arguments.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the OutputStream is\nproperly closed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L138\">Source</a>  <br>  <h2 id=\"clojure.java.io/reader\">reader<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reader x &amp; opts)\n</pre> <pre id=\"var-docstr\">Attempts to coerce its argument into an open java.io.Reader.\nDefault implementations always return a java.io.BufferedReader.\n\nDefault implementations are provided for Reader, BufferedReader,\nInputStream, File, URI, URL, Socket, byte arrays, character arrays,\nand String.\n\nIf argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the Reader is properly\nclosed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L86\">Source</a>  <br>  <h2 id=\"clojure.java.io/resource\">resource<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (resource n)\n       (resource n loader)\n</pre> <pre id=\"var-docstr\">Returns the URL for a named resource. Use the context class loader\nif no loader is specified.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L436\">Source</a>  <br>  <h2 id=\"clojure.java.io/writer\">writer<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (writer x &amp; opts)\n</pre> <pre id=\"var-docstr\">Attempts to coerce its argument into an open java.io.Writer.\nDefault implementations always return a java.io.BufferedWriter.\n\nDefault implementations are provided for Writer, BufferedWriter,\nOutputStream, File, URI, URL, Socket, and String.\n\nIf the argument is a String, it tries to resolve it first as a URI, then\nas a local file name.  URIs with a 'file' protocol are converted to\nlocal file names.\n\nShould be used inside with-open to ensure the Writer is properly\nclosed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/cc69d19bd471c48d441071fff43e768ffa7eb8e5/src/clj/clojure/java/io.clj#L104\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.io-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.io-api.html</a>\n  </p>\n</div>\n","clojure.reflect-api":"<h1 id=\"overview\">clojure.reflect</h1> <span id=\"author-line\">by <span id=\"author-name\">Stuart Halloway</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.reflect</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">Reflection on Host Types\nAlpha - subject to change.\n\nTwo main entry points: \n\n* type-reflect reflects on something that implements TypeReference.\n* reflect (for REPL use) reflects on the class of an instance, or\n  on a class if passed a class\n\nKey features:\n\n* Exposes the read side of reflection as pure data. Reflecting\n  on a type returns a map with keys :bases, :flags, and :members.\n\n* Canonicalizes class names as Clojure symbols. Types can extend\n  to the TypeReference protocol to indicate that they can be\n  unambiguously resolved as a type name. The canonical format\n  requires one non-Java-ish convention: array brackets are &lt;&gt;\n  instead of [] so they can be part of a Clojure symbol.\n\n* Pluggable Reflectors for different implementations. The default\n  JavaReflector is good when you have a class in hand, or use\n  the AsmReflector for \"hands off\" reflection without forcing\n  classes to load.\n\nPlatform implementers must:\n\n* Create an implementation of Reflector.\n* Create one or more implementations of TypeReference.\n* def default-reflector to be an instance that satisfies Reflector.</pre> <span class=\"ns-added\"><span id=\"content\">Added in Clojure version 1.3</span><br></span> <br>   <h2>Protocols</h2>    <h2 id=\"clojure.reflect/ClassResolver\">ClassResolver<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>   Known implementations: <span id=\"proto-impls\">clojure.lang.Fn, java.lang.ClassLoader</span>  <br> <h3 id=\"clojure.reflect/resolve-class\">resolve-class<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (resolve-class this name)\n</pre> <pre id=\"var-docstr\">Given a class name, return that typeref's class bytes as an InputStream.</pre>  <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L184\">Source</a>  <br>  <h2 id=\"clojure.reflect/Reflector\">Reflector<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">Protocol for reflection implementers.</pre> Known implementations: <span id=\"proto-impls\"><a href=\"#clojure.reflect/AsmReflector\">AsmReflector</a>, <a href=\"#clojure.reflect/JavaReflector\">JavaReflector</a></span>  <br> <h3 id=\"clojure.reflect/do-reflect\">do-reflect<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (do-reflect reflector typeref)\n</pre>   <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L44\">Source</a>  <br>  <h2 id=\"clojure.reflect/TypeReference\">TypeReference<span id=\"proto-type\" class=\"type\">Protocol</span>\n</h2>  <pre id=\"proto-docstr\">A TypeReference can be unambiguously converted to a type name on\nthe host platform.\n\nAll typerefs are normalized into symbols. If you need to\nnormalize a typeref yourself, call typesym.</pre> Known implementations: <span id=\"proto-impls\">clojure.asm.Type, clojure.lang.Symbol, java.lang.Class</span>  <br> <h3 id=\"clojure.reflect/typename\">typename<span id=\"var-type\" class=\"type\">function</span>\n</h3>  <pre id=\"var-usage\">Usage: (typename o)\n</pre> <pre id=\"var-docstr\">Returns Java name as returned by ASM getClassName, e.g. byte[], java.lang.String[]</pre>  <a id=\"proto-source\" href=\"https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L48\">Source</a>     <h2>Types</h2>    <h2 id=\"clojure.reflect/AsmReflector\">AsmReflector<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[class-resolver]</span><br> Protocols: <span id=\"type-protocols\"><a href=\"#clojure.reflect/Reflector\">Reflector</a></span><br> Interfaces: <br>    <h2 id=\"clojure.reflect/Constructor\">Constructor<span id=\"type-type\" class=\"type\">record</span>\n</h2>   Fields: <span id=\"type-fields\">[name declaring-class parameter-types exception-types flags]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map</span><br>    <h2 id=\"clojure.reflect/Field\">Field<span id=\"type-type\" class=\"type\">record</span>\n</h2>   Fields: <span id=\"type-fields\">[name type declaring-class flags]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map</span><br>    <h2 id=\"clojure.reflect/JavaReflector\">JavaReflector<span id=\"type-type\" class=\"type\">type</span>\n</h2>   Fields: <span id=\"type-fields\">[classloader]</span><br> Protocols: <span id=\"type-protocols\"><a href=\"#clojure.reflect/Reflector\">Reflector</a></span><br> Interfaces: <br>    <h2 id=\"clojure.reflect/Method\">Method<span id=\"type-type\" class=\"type\">record</span>\n</h2>   Fields: <span id=\"type-fields\">[name return-type declaring-class parameter-types exception-types flags]</span><br> Protocols: <br> Interfaces: <span id=\"type-interfaces\">clojure.lang.IHashEq, clojure.lang.IKeywordLookup, clojure.lang.ILookup, clojure.lang.IObj, clojure.lang.IPersistentMap, java.io.Serializable, java.util.Map</span><br>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.reflect/-&gt;AsmReflector\">-&gt;AsmReflector<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;AsmReflector class-resolver)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.reflect.AsmReflector.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L196\">Source</a>  <br>  <h2 id=\"clojure.reflect/-&gt;Constructor\">-&gt;Constructor<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Constructor name declaring-class parameter-types exception-types flags)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.reflect.Constructor.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L109\">Source</a>  <br>  <h2 id=\"clojure.reflect/-&gt;Field\">-&gt;Field<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Field name type declaring-class flags)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.reflect.Field.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L148\">Source</a>  <br>  <h2 id=\"clojure.reflect/-&gt;JavaReflector\">-&gt;JavaReflector<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;JavaReflector classloader)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.reflect.JavaReflector.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L166\">Source</a>  <br>  <h2 id=\"clojure.reflect/-&gt;Method\">-&gt;Method<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (-&gt;Method name return-type declaring-class parameter-types exception-types flags)\n</pre> <pre id=\"var-docstr\">Positional factory function for class clojure.reflect.Method.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L128\">Source</a>  <br>  <h2 id=\"clojure.reflect/flag-descriptors\">flag-descriptors<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">The Java access bitflags, along with their friendly names and\nthe kinds of objects to which they can apply.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L71\">Source</a>  <br>  <h2 id=\"clojure.reflect/map-&gt;Constructor\">map-&gt;Constructor<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map-&gt;Constructor m#)\n</pre> <pre id=\"var-docstr\">Factory function for class clojure.reflect.Constructor, taking a map of keywords to field values.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L109\">Source</a>  <br>  <h2 id=\"clojure.reflect/map-&gt;Field\">map-&gt;Field<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map-&gt;Field m#)\n</pre> <pre id=\"var-docstr\">Factory function for class clojure.reflect.Field, taking a map of keywords to field values.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L148\">Source</a>  <br>  <h2 id=\"clojure.reflect/map-&gt;Method\">map-&gt;Method<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (map-&gt;Method m#)\n</pre> <pre id=\"var-docstr\">Factory function for class clojure.reflect.Method, taking a map of keywords to field values.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/9f277c80258b3d2951128ce26a07c30ad0b47af0/src/clj/clojure/reflect/java.clj#L128\">Source</a>  <br>  <h2 id=\"clojure.reflect/reflect\">reflect<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reflect obj &amp; options)\n</pre> <pre id=\"var-docstr\">Alpha - subject to change.\nReflect on the type of obj (or obj itself if obj is a class).\nReturn value and options are the same as for type-reflect. </pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L115\">Source</a>  <br>  <h2 id=\"clojure.reflect/type-reflect\">type-reflect<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (type-reflect typeref &amp; options)\n</pre> <pre id=\"var-docstr\">Alpha - subject to change.\n Reflect on a typeref, returning a map with :bases, :flags, and\n:members. In the discussion below, names are always Clojure symbols.\n\n :bases            a set of names of the type's bases\n :flags            a set of keywords naming the boolean attributes\n                   of the type.\n :members          a set of the type's members. Each member is a map\n                   and can be a constructor, method, or field.\n\n Keys common to all members:\n :name             name of the type \n :declaring-class  name of the declarer\n :flags            keyword naming boolean attributes of the member\n\n Keys specific to constructors:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n\n Key specific to methods:\n :parameter-types  vector of parameter type names\n :exception-types  vector of exception type names\n :return-type      return type name\n\n Keys specific to fields:\n :type             type name\n\n Options:\n\n   :ancestors     in addition to the keys described above, also\n                  include an :ancestors key with the entire set of\n                  ancestors, and add all ancestor members to\n                  :members.\n   :reflector     implementation to use. Defaults to JavaReflector,\n                  AsmReflector is also an option.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/ee00807bac64d55dbc7ec49442d6376352b77200/src/clj/clojure/reflect.clj#L58\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.reflect-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.reflect-api.html</a>\n  </p>\n</div>\n","clojure.string-api":"<h1 id=\"overview\">clojure.string</h1> Full namespace name: <span id=\"long-name\">clojure.string</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.string/blank?\">blank?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (blank? s)\n</pre> <pre id=\"var-docstr\">True if s is nil, empty, or contains only whitespace.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L285\">Source</a>  <br>  <h2 id=\"clojure.string/capitalize\">capitalize<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (capitalize s)\n</pre> <pre id=\"var-docstr\">Converts first character of the string to upper-case, all other\ncharacters to lower-case.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L194\">Source</a>  <br>  <h2 id=\"clojure.string/escape\">escape<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (escape s cmap)\n</pre> <pre id=\"var-docstr\">Return a new string, using cmap to escape each character ch\nfrom s as follows:\n\nIf (cmap ch) is nil, append ch to the new string.\nIf (cmap ch) is non-nil, append (str (cmap ch)) instead.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L298\">Source</a>  <br>  <h2 id=\"clojure.string/join\">join<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (join coll)\n       (join separator coll)\n</pre> <pre id=\"var-docstr\">Returns a string of all elements in coll, as returned by (seq coll),\nseparated by an optional separator.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L178\">Source</a>  <br>  <h2 id=\"clojure.string/lower-case\">lower-case<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (lower-case s)\n</pre> <pre id=\"var-docstr\">Converts string to all lower-case.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L211\">Source</a>  <br>  <h2 id=\"clojure.string/re-quote-replacement\">re-quote-replacement<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (re-quote-replacement replacement)\n</pre> <pre id=\"var-docstr\">Given a replacement string that you wish to be a literal\nreplacement for a pattern match in replace or replace-first, do the\nnecessary escaping of special characters in the replacement.</pre> <p class=\"var-added\">Added in Clojure version 1.5</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L52\">Source</a>  <br>  <h2 id=\"clojure.string/replace\">replace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (replace s match replacement)\n</pre> <pre id=\"var-docstr\">Replaces all instance of match with replacement in s.\n\nmatch/replacement can be:\n\nstring / string\nchar / char\npattern / (string or function of match).\n\nSee also replace-first.\n\nThe replacement is literal (i.e. none of its characters are treated\nspecially) for all cases above except pattern / string.\n\nFor pattern / string, $1, $2, etc. in the replacement string are\nsubstituted with the string that matched the corresponding\nparenthesized group in the pattern.  If you wish your replacement\nstring r to be used literally, use (re-quote-replacement r) as the\nreplacement argument.  See also documentation for\njava.util.regex.Matcher's appendReplacement method.\n\nExample:\n(clojure.string/replace \"Almost Pig Latin\" #\"\\b(\\w)(\\w+)\\b\" \"$2$1ay\")\n-&gt; \"lmostAay igPay atinLay\"</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L73\">Source</a>  <br>  <h2 id=\"clojure.string/replace-first\">replace-first<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (replace-first s match replacement)\n</pre> <pre id=\"var-docstr\">Replaces the first instance of match with replacement in s.\n\nmatch/replacement can be:\n\nchar / char\nstring / string\npattern / (string or function of match).\n\nSee also replace.\n\nThe replacement is literal (i.e. none of its characters are treated\nspecially) for all cases above except pattern / string.\n\nFor pattern / string, $1, $2, etc. in the replacement string are\nsubstituted with the string that matched the corresponding\nparenthesized group in the pattern.  If you wish your replacement\nstring r to be used literally, use (re-quote-replacement r) as the\nreplacement argument.  See also documentation for\njava.util.regex.Matcher's appendReplacement method.\n\nExample:\n(clojure.string/replace-first \"swap first two words\"\n                              #\"(\\w+)(\\s+)(\\w+)\" \"$3$2$1\")\n-&gt; \"first swap two words\"</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L136\">Source</a>  <br>  <h2 id=\"clojure.string/reverse\">reverse<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (reverse s)\n</pre> <pre id=\"var-docstr\">Returns s with its characters reversed.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L46\">Source</a>  <br>  <h2 id=\"clojure.string/split\">split<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (split s re)\n       (split s re limit)\n</pre> <pre id=\"var-docstr\">Splits string on a regular expression.  Optional argument limit is\nthe maximum number of splits. Not lazy. Returns vector of the splits.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L217\">Source</a>  <br>  <h2 id=\"clojure.string/split-lines\">split-lines<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (split-lines s)\n</pre> <pre id=\"var-docstr\">Splits s on \\n or \\r\\n.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L226\">Source</a>  <br>  <h2 id=\"clojure.string/trim\">trim<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (trim s)\n</pre> <pre id=\"var-docstr\">Removes whitespace from both ends of string.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L232\">Source</a>  <br>  <h2 id=\"clojure.string/trim-newline\">trim-newline<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (trim-newline s)\n</pre> <pre id=\"var-docstr\">Removes all trailing newline \\n or return \\r characters from\nstring.  Similar to Perl's chomp.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L272\">Source</a>  <br>  <h2 id=\"clojure.string/triml\">triml<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (triml s)\n</pre> <pre id=\"var-docstr\">Removes whitespace from the left side of string.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L249\">Source</a>  <br>  <h2 id=\"clojure.string/trimr\">trimr<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (trimr s)\n</pre> <pre id=\"var-docstr\">Removes whitespace from the right side of string.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L261\">Source</a>  <br>  <h2 id=\"clojure.string/upper-case\">upper-case<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (upper-case s)\n</pre> <pre id=\"var-docstr\">Converts string to all upper-case.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/d7175e84e27816ee227220023a5411386d6aa32e/src/clj/clojure/string.clj#L205\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.string-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.string-api.html</a>\n  </p>\n</div>\n","clojure.main-api":"<h1 id=\"overview\">clojure.main</h1> Full namespace name: <span id=\"long-name\">clojure.main</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.main/demunge\">demunge<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (demunge fn-name)\n</pre> <pre id=\"var-docstr\">Given a string representation of a fn class,\nas in a stack trace element, returns a readable version.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L30\">Source</a>  <br>  <h2 id=\"clojure.main/load-script\">load-script<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (load-script path)\n</pre> <pre id=\"var-docstr\">Loads Clojure source from a file or resource given its path. Paths\nbeginning with @ or @/ are considered relative to classpath.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L268\">Source</a>  <br>  <h2 id=\"clojure.main/main\">main<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (main &amp; args)\n</pre> <pre id=\"var-docstr\">Usage: java -cp clojure.jar clojure.main [init-opt*] [main-opt] [arg*]\n\nWith no options or args, runs an interactive Read-Eval-Print Loop\n\ninit options:\n  -i, --init path     Load a file or resource\n  -e, --eval string   Evaluate expressions in string; print non-nil values\n\nmain options:\n  -m, --main ns-name  Call the -main function from a namespace with args\n  -r, --repl          Run a repl\n  path                Run a script from a file or resource\n  -                   Run a script from standard input\n  -h, -?, --help      Print this help message and exit\n\noperation:\n\n  - Establishes thread-local bindings for commonly set!-able vars\n  - Enters the user namespace\n  - Binds *command-line-args* to a seq of strings containing command line\n    args that appear after any main option\n  - Runs all init options in order\n  - Calls a -main function or runs a repl or script if requested\n\nThe init options may be repeated and mixed freely, but must appear before\nany main option. The appearance of any eval option before running a repl\nsuppresses the usual repl greeting message: \"Clojure ~(clojure-version)\".\n\nPaths may be absolute or relative in the filesystem or relative to\nclasspath. Classpath-relative paths have prefix of @ or @/</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L384\">Source</a>  <br>  <h2 id=\"clojure.main/repl\">repl<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repl &amp; options)\n</pre> <pre id=\"var-docstr\">Generic, reusable, read-eval-print loop. By default, reads from *in*,\nwrites to *out*, and prints exception summaries to *err*. If you use the\ndefault :read hook, *in* must either be an instance of\nLineNumberingPushbackReader or duplicate its behavior of both supporting\n.unread and collapsing CR, LF, and CRLF into a single \\newline. Options\nare sequential keyword-value pairs. Available options and their defaults:\n\n   - :init, function of no arguments, initialization hook called with\n     bindings for set!-able vars in place.\n     default: #()\n\n   - :need-prompt, function of no arguments, called before each\n     read-eval-print except the first, the user will be prompted if it\n     returns true.\n     default: (if (instance? LineNumberingPushbackReader *in*)\n                #(.atLineStart *in*)\n                #(identity true))\n\n   - :prompt, function of no arguments, prompts for more input.\n     default: repl-prompt\n\n   - :flush, function of no arguments, flushes output\n     default: flush\n\n   - :read, function of two arguments, reads from *in*:\n       - returns its first argument to request a fresh prompt\n         - depending on need-prompt, this may cause the repl to prompt\n           before reading again\n       - returns its second argument to request an exit from the repl\n       - else returns the next object read from the input stream\n     default: repl-read\n\n   - :eval, function of one argument, returns the evaluation of its\n     argument\n     default: eval\n\n   - :print, function of one argument, prints its argument to the output\n     default: prn\n\n   - :caught, function of one argument, a throwable, called when\n     read, eval, or print throws an exception or error\n     default: repl-caught</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L174\">Source</a>  <br>  <h2 id=\"clojure.main/repl-caught\">repl-caught<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repl-caught e)\n</pre> <pre id=\"var-docstr\">Default :caught hook for repl</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L149\">Source</a>  <br>  <h2 id=\"clojure.main/repl-exception\">repl-exception<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repl-exception throwable)\n</pre> <pre id=\"var-docstr\">Returns the root cause of throwables</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L144\">Source</a>  <br>  <h2 id=\"clojure.main/repl-prompt\">repl-prompt<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repl-prompt)\n</pre> <pre id=\"var-docstr\">Default :prompt hook for repl</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L89\">Source</a>  <br>  <h2 id=\"clojure.main/repl-read\">repl-read<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (repl-read request-prompt request-exit)\n</pre> <pre id=\"var-docstr\">Default :read hook for repl. Reads from *in* which must either be an\ninstance of LineNumberingPushbackReader or duplicate its behavior of both\nsupporting .unread and collapsing all of CR, LF, and CRLF into a single\n\\newline. repl-read:\n  - skips whitespace, then\n    - returns request-prompt on start of line, or\n    - returns request-exit on end of stream, or\n    - reads an object from the input stream, then\n      - skips the next input character if it's end of line, then\n      - returns the object.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L126\">Source</a>  <br>  <h2 id=\"clojure.main/repl-requires\">repl-requires<span id=\"var-type\" class=\"type\">var</span>\n</h2>   <pre id=\"var-docstr\">A sequence of lib specs that are applied to `require`\nby default when a new command-line REPL is started.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L161\">Source</a>  <br>  <h2 id=\"clojure.main/root-cause\">root-cause<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (root-cause t)\n</pre> <pre id=\"var-docstr\">Returns the initial cause of an exception or error by peeling off all of\nits wrappers</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L37\">Source</a>  <br>  <h2 id=\"clojure.main/skip-if-eol\">skip-if-eol<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (skip-if-eol s)\n</pre> <pre id=\"var-docstr\">If the next character on stream s is a newline, skips it, otherwise\nleaves the stream untouched. Returns :line-start, :stream-end, or :body\nto indicate the relative location of the next character on s. The stream\nmust either be an instance of LineNumberingPushbackReader or duplicate\nits behavior of both supporting .unread and collapsing all of CR, LF, and\nCRLF to a single \\newline.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L94\">Source</a>  <br>  <h2 id=\"clojure.main/skip-whitespace\">skip-whitespace<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (skip-whitespace s)\n</pre> <pre id=\"var-docstr\">Skips whitespace characters on stream s. Returns :line-start, :stream-end,\nor :body to indicate the relative location of the next character on s.\nInterprets comma as whitespace and semicolon as comment to end of line.\nDoes not interpret #! as comment to end of line because only one\ncharacter of lookahead is available. The stream must either be an\ninstance of LineNumberingPushbackReader or duplicate its behavior of both\nsupporting .unread and collapsing all of CR, LF, and CRLF to a single\n\\newline.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L108\">Source</a>  <br>  <h2 id=\"clojure.main/stack-element-str\">stack-element-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (stack-element-str el)\n</pre> <pre id=\"var-docstr\">Returns a (possibly unmunged) string representation of a StackTraceElement</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L50\">Source</a>  <br>  <h2 id=\"clojure.main/with-bindings\">with-bindings<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-bindings &amp; body)\n</pre> <pre id=\"var-docstr\">Executes body in the context of thread-local bindings for several vars\nthat often need to be set!: *ns* *warn-on-reflection* *math-context*\n*print-meta* *print-length* *print-level* *compile-path*\n*command-line-args* *1 *2 *3 *e</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L65\">Source</a>  <br>  <h2 id=\"clojure.main/with-read-known\">with-read-known<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-read-known &amp; body)\n</pre> <pre id=\"var-docstr\">Evaluates body with *read-eval* set to a \"known\" value,\ni.e. substituting true for :unknown if necessary.</pre> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e251e14e2459663dbc1492aca025c7171a2e4ff0/src/clj/clojure/main.clj#L167\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.main-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.main-api.html</a>\n  </p>\n</div>\n","clojure.java.shell-api":"<h1 id=\"overview\">clojure.java.shell</h1> Full namespace name: <span id=\"long-name\">clojure.java.shell</span>  <h2>Overview</h2>     <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.java.shell/sh\">sh<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (sh &amp; args)\n</pre> <pre id=\"var-docstr\">Passes the given strings to Runtime.exec() to launch a sub-process.\n\nOptions are\n\n:in      may be given followed by any legal input source for\n         clojure.java.io/copy, e.g. InputStream, Reader, File, byte[],\n         or String, to be fed to the sub-process's stdin.\n:in-enc  option may be given followed by a String, used as a character\n         encoding name (for example \"UTF-8\" or \"ISO-8859-1\") to\n         convert the input string specified by the :in option to the\n         sub-process's stdin.  Defaults to UTF-8.\n         If the :in option provides a byte array, then the bytes are passed\n         unencoded, and this option is ignored.\n:out-enc option may be given followed by :bytes or a String. If a\n         String is given, it will be used as a character encoding\n         name (for example \"UTF-8\" or \"ISO-8859-1\") to convert\n         the sub-process's stdout to a String which is returned.\n         If :bytes is given, the sub-process's stdout will be stored\n         in a byte array and returned.  Defaults to UTF-8.\n:env     override the process env with a map (or the underlying Java\n         String[] if you are a masochist).\n:dir     override the process dir with a String or java.io.File.\n\nYou can bind :env or :dir for multiple operations using with-sh-env\nand with-sh-dir.\n\nsh returns a map of\n  :exit =&gt; sub-process's exit code\n  :out  =&gt; sub-process's stdout (as byte[] or String)\n  :err  =&gt; sub-process's stderr (String via platform default encoding)</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/fe0cfc71e6ec7b546066188c555b01dae0e368e8/src/clj/clojure/java/shell.clj#L79\">Source</a>  <br>  <h2 id=\"clojure.java.shell/with-sh-dir\">with-sh-dir<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-sh-dir dir &amp; forms)\n</pre> <pre id=\"var-docstr\">Sets the directory for use with sh, see sh for details.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/fe0cfc71e6ec7b546066188c555b01dae0e368e8/src/clj/clojure/java/shell.clj#L21\">Source</a>  <br>  <h2 id=\"clojure.java.shell/with-sh-env\">with-sh-env<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-sh-env env &amp; forms)\n</pre> <pre id=\"var-docstr\">Sets the environment for use with sh, see sh for details.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/fe0cfc71e6ec7b546066188c555b01dae0e368e8/src/clj/clojure/java/shell.clj#L28\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.shell-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.java.shell-api.html</a>\n  </p>\n</div>\n","clojure.test-api":"<h1 id=\"overview\">clojure.test</h1> <span id=\"author-line\">by <span id=\"author-name\">Stuart Sierra, with contributions and suggestions by Chas Emerick, Allen Rohner, and Stuart Halloway</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.test</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">A unit testing framework.\n\nASSERTIONS\n\nThe core of the library is the \"is\" macro, which lets you make\nassertions of any arbitrary expression:\n\n(is (= 4 (+ 2 2)))\n(is (instance? Integer 256))\n(is (.startsWith \"abcde\" \"ab\"))\n\nYou can type an \"is\" expression directly at the REPL, which will\nprint a message if it fails.\n\n    user&gt; (is (= 5 (+ 2 2)))\n\n    FAIL in  (:1)\n    expected: (= 5 (+ 2 2))\n      actual: (not (= 5 4))\n    false\n\nThe \"expected:\" line shows you the original expression, and the\n\"actual:\" shows you what actually happened.  In this case, it\nshows that (+ 2 2) returned 4, which is not = to 5.  Finally, the\n\"false\" on the last line is the value returned from the\nexpression.  The \"is\" macro always returns the result of the\ninner expression.\n\nThere are two special assertions for testing exceptions.  The\n\"(is (thrown? c ...))\" form tests if an exception of class c is\nthrown:\n\n(is (thrown? ArithmeticException (/ 1 0))) \n\n\"(is (thrown-with-msg? c re ...))\" does the same thing and also\ntests that the message on the exception matches the regular\nexpression re:\n\n(is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                      (/ 1 0)))\n\nDOCUMENTING TESTS\n\n\"is\" takes an optional second argument, a string describing the\nassertion.  This message will be included in the error report.\n\n(is (= 5 (+ 2 2)) \"Crazy arithmetic\")\n\nIn addition, you can document groups of assertions with the\n\"testing\" macro, which takes a string followed by any number of\nassertions.  The string will be included in failure reports.\nCalls to \"testing\" may be nested, and all of the strings will be\njoined together with spaces in the final report, in a style\nsimilar to RSpec &lt;<a href=\"http://rspec.info/\">http://rspec.info/</a>&gt;\n\n(testing \"Arithmetic\"\n  (testing \"with positive integers\"\n    (is (= 4 (+ 2 2)))\n    (is (= 7 (+ 3 4))))\n  (testing \"with negative integers\"\n    (is (= -4 (+ -2 -2)))\n    (is (= -1 (+ 3 -4)))))\n\nNote that, unlike RSpec, the \"testing\" macro may only be used\nINSIDE a \"deftest\" or \"with-test\" form (see below).\n\n\nDEFINING TESTS\n\nThere are two ways to define tests.  The \"with-test\" macro takes\na defn or def form as its first argument, followed by any number\nof assertions.  The tests will be stored as metadata on the\ndefinition.\n\n(with-test\n    (defn my-function [x y]\n      (+ x y))\n  (is (= 4 (my-function 2 2)))\n  (is (= 7 (my-function 3 4))))\n\nAs of Clojure SVN rev. 1221, this does not work with defmacro.\nSee <a href=\"http://code.google.com/p/clojure/issues/detail?id=51\">http://code.google.com/p/clojure/issues/detail?id=51</a>\n\nThe other way lets you define tests separately from the rest of\nyour code, even in a different namespace:\n\n(deftest addition\n  (is (= 4 (+ 2 2)))\n  (is (= 7 (+ 3 4))))\n\n(deftest subtraction\n  (is (= 1 (- 4 3)))\n  (is (= 3 (- 7 4))))\n\nThis creates functions named \"addition\" and \"subtraction\", which\ncan be called like any other function.  Therefore, tests can be\ngrouped and composed, in a style similar to the test framework in\nPeter Seibel's \"Practical Common Lisp\"\n&lt;<a href=\"http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html\">http://www.gigamonkeys.com/book/practical-building-a-unit-test-framework.html</a>&gt;\n\n(deftest arithmetic\n  (addition)\n  (subtraction))\n\nThe names of the nested tests will be joined in a list, like\n\"(arithmetic addition)\", in failure reports.  You can use nested\ntests to set up a context shared by several tests.\n\n\nRUNNING TESTS\n\nRun tests with the function \"(run-tests namespaces...)\":\n\n(run-tests 'your.namespace 'some.other.namespace)\n\nIf you don't specify any namespaces, the current namespace is\nused.  To run all tests in all namespaces, use \"(run-all-tests)\".\n\nBy default, these functions will search for all tests defined in\na namespace and run them in an undefined order.  However, if you\nare composing tests, as in the \"arithmetic\" example above, you\nprobably do not want the \"addition\" and \"subtraction\" tests run\nseparately.  In that case, you must define a special function\nnamed \"test-ns-hook\" that runs your tests in the correct order:\n\n(defn test-ns-hook []\n  (arithmetic))\n\nNote: test-ns-hook prevents execution of fixtures (see below).\n\n\nOMITTING TESTS FROM PRODUCTION CODE\n\nYou can bind the variable \"*load-tests*\" to false when loading or\ncompiling code in production.  This will prevent any tests from\nbeing created by \"with-test\" or \"deftest\".\n\n\nFIXTURES\n\nFixtures allow you to run code before and after tests, to set up\nthe context in which tests should be run.\n\nA fixture is just a function that calls another function passed as\nan argument.  It looks like this:\n\n(defn my-fixture [f]\n   Perform setup, establish bindings, whatever.\n  (f)  Then call the function we were passed.\n   Tear-down / clean-up code here.\n )\n\nFixtures are attached to namespaces in one of two ways.  \"each\"\nfixtures are run repeatedly, once for each test function created\nwith \"deftest\" or \"with-test\".  \"each\" fixtures are useful for\nestablishing a consistent before/after state for each test, like\nclearing out database tables.\n\n\"each\" fixtures can be attached to the current namespace like this:\n(use-fixtures :each fixture1 fixture2 ...)\nThe fixture1, fixture2 are just functions like the example above.\nThey can also be anonymous functions, like this:\n(use-fixtures :each (fn [f] setup... (f) cleanup...))\n\nThe other kind of fixture, a \"once\" fixture, is only run once,\naround ALL the tests in the namespace.  \"once\" fixtures are useful\nfor tasks that only need to be performed once, like establishing\ndatabase connections, or for time-consuming tasks.\n\nAttach \"once\" fixtures to the current namespace like this:\n(use-fixtures :once fixture1 fixture2 ...)\n\nNote: Fixtures and test-ns-hook are mutually incompatible.  If you\nare using test-ns-hook, fixture functions will *never* be run.\n\n\nSAVING TEST OUTPUT TO A FILE\n\nAll the test reporting functions write to the var *test-out*.  By\ndefault, this is the same as *out*, but you can rebind it to any\nPrintWriter.  For example, it could be a file opened with\nclojure.java.io/writer.\n\n\nEXTENDING TEST-IS (ADVANCED)\n\nYou can extend the behavior of the \"is\" macro by defining new\nmethods for the \"assert-expr\" multimethod.  These methods are\ncalled during expansion of the \"is\" macro, so they should return\nquoted forms to be evaluated.\n\nYou can plug in your own test-reporting framework by rebinding\nthe \"report\" function: (report event)\n\nThe 'event' argument is a map.  It will always have a :type key,\nwhose value will be a keyword signaling the type of event being\nreported.  Standard events with :type value of :pass, :fail, and\n:error are called when an assertion passes, fails, and throws an\nexception, respectively.  In that case, the event will also have\nthe following keys:\n\n  :expected   The form that was expected to be true\n  :actual     A form representing what actually occurred\n  :message    The string message given as an argument to 'is'\n\nThe \"testing\" strings will be a list in \"*testing-contexts*\", and\nthe vars being tested will be a list in \"*testing-vars*\".\n\nYour \"report\" function should wrap any printing calls in the\n\"with-test-out\" macro, which rebinds *out* to the current value\nof *test-out*.\n\nFor additional event types, see the examples in the code.</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.test/*load-tests*\">*load-tests*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">True by default.  If set to false, no test functions will\nbe created by deftest, set-test, or with-test.  Use this to omit\ntests when compiling or loading production code.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L244\">Source</a>  <br>  <h2 id=\"clojure.test/*stack-trace-depth*\">*stack-trace-depth*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">The maximum depth of stack traces to print when an Exception\nis thrown during a test.  Defaults to nil, which means print the \ncomplete stack trace.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L251\">Source</a>  <br>  <h2 id=\"clojure.test/are\">are<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (are argv expr &amp; args)\n</pre> <pre id=\"var-docstr\">Checks multiple assertions with a template expression.\nSee clojure.template/do-template for an explanation of\ntemplates.\n\nExample: (are [x y] (= x y)  \n              2 (+ 1 1)\n              4 (* 2 2))\nExpands to: \n         (do (is (= 2 (+ 1 1)))\n             (is (= 4 (* 2 2))))\n\nNote: This breaks some reporting features, such as line numbers.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L559\">Source</a>  <br>  <h2 id=\"clojure.test/assert-any\">assert-any<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (assert-any msg form)\n</pre> <pre id=\"var-docstr\">Returns generic assertion code for any test, including macros, Java\nmethod calls, or isolated symbols.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L442\">Source</a>  <br>  <h2 id=\"clojure.test/assert-predicate\">assert-predicate<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (assert-predicate msg form)\n</pre> <pre id=\"var-docstr\">Returns generic assertion code for any functional predicate.  The\n'expected' argument to 'report' will contains the original form, the\n'actual' argument will contain the form with all its sub-forms\nevaluated.  If the predicate returns false, the 'actual' form will\nbe wrapped in (not...).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L423\">Source</a>  <br>  <h2 id=\"clojure.test/compose-fixtures\">compose-fixtures<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (compose-fixtures f1 f2)\n</pre> <pre id=\"var-docstr\">Composes two fixture functions, creating a new fixture function\nthat combines their behavior.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L676\">Source</a>  <br>  <h2 id=\"clojure.test/deftest\">deftest<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (deftest name &amp; body)\n</pre> <pre id=\"var-docstr\">Defines a test function with no arguments.  Test functions may call\nother tests, so tests may be composed.  If you compose tests, you\nshould also define a function named test-ns-hook; run-tests will\ncall test-ns-hook instead of testing all vars.\n\nNote: Actually, the test body goes in the :test metadata on the var,\nand the real function (the value of the var) calls test-var on\nitself.\n\nWhen *load-tests* is false, deftest is ignored.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L609\">Source</a>  <br>  <h2 id=\"clojure.test/deftest-\">deftest-<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (deftest- name &amp; body)\n</pre> <pre id=\"var-docstr\">Like deftest but creates a private var.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L626\">Source</a>  <br>  <h2 id=\"clojure.test/do-report\">do-report<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (do-report m)\n</pre> <pre id=\"var-docstr\">Add file and line information to a test result and call report.\nIf you are writing a custom assert-expr method, call this function\nto pass test results to report.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L343\">Source</a>  <br>  <h2 id=\"clojure.test/file-position\">file-position<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (file-position n)\n</pre> <pre id=\"var-docstr\">Returns a vector [filename line-number] for the nth call up the\nstack.\n\nDeprecated in 1.2: The information needed for test reporting is\nnow on :file and :line keys in the result map.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <p class=\"var-deprecated\">Deprecated since Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L281\">Source</a>  <br>  <h2 id=\"clojure.test/function?\">function?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (function? x)\n</pre> <pre id=\"var-docstr\">Returns true if argument is a function or a symbol that resolves to\na function (not a macro).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L411\">Source</a>  <br>  <h2 id=\"clojure.test/get-possibly-unbound-var\">get-possibly-unbound-var<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-possibly-unbound-var v)\n</pre> <pre id=\"var-docstr\">Like var-get but returns nil if the var is unbound.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L403\">Source</a>  <br>  <h2 id=\"clojure.test/inc-report-counter\">inc-report-counter<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (inc-report-counter name)\n</pre> <pre id=\"var-docstr\">Increments the named counter in *report-counters*, a ref to a map.\nDoes nothing if *report-counters* is nil.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L313\">Source</a>  <br>  <h2 id=\"clojure.test/is\">is<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (is form)\n       (is form msg)\n</pre> <pre id=\"var-docstr\">Generic assertion macro.  'form' is any predicate test.\n'msg' is an optional message to attach to the assertion.\n\nExample: (is (= 4 (+ 2 2)) \"Two plus two should be 4\")\n\nSpecial forms:\n\n(is (thrown? c body)) checks that an instance of c is thrown from\nbody, fails if not; then returns the thing thrown.\n\n(is (thrown-with-msg? c re body)) checks that an instance of c is\nthrown AND that the message on the exception matches (with\nre-find) the regular expression re.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L541\">Source</a>  <br>  <h2 id=\"clojure.test/join-fixtures\">join-fixtures<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (join-fixtures fixtures)\n</pre> <pre id=\"var-docstr\">Composes a collection of fixtures, in order.  Always returns a valid\nfixture function, even if the collection is empty.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L683\">Source</a>  <br>  <h2 id=\"clojure.test/report\">report<span id=\"var-type\" class=\"type\">dynamic multimethod</span>\n</h2>  <pre id=\"var-usage\">No usage documentation available</pre> <pre id=\"var-docstr\">Generic reporting function, may be overridden to plug in\ndifferent report formats (e.g., TAP, JUnit).  Assertions such as\n'is' call 'report' to indicate results.  The argument given to\n'report' will be a map with a :type key.  See the documentation at\nthe top of test_is.clj for more information on the types of\narguments for 'report'.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L324\">Source</a>  <br>  <h2 id=\"clojure.test/run-all-tests\">run-all-tests<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (run-all-tests)\n       (run-all-tests re)\n</pre> <pre id=\"var-docstr\">Runs all tests in all namespaces; prints results.\nOptional argument is a regular expression; only namespaces with\nnames matching the regular expression (with re-matches) will be\ntested.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L767\">Source</a>  <br>  <h2 id=\"clojure.test/run-tests\">run-tests<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (run-tests)\n       (run-tests &amp; namespaces)\n</pre> <pre id=\"var-docstr\">Runs all tests in the given namespaces; prints results.\nDefaults to current namespace if none given.  Returns a map\nsummarizing test results.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L755\">Source</a>  <br>  <h2 id=\"clojure.test/set-test\">set-test<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-test name &amp; body)\n</pre> <pre id=\"var-docstr\">Experimental.\nSets :test metadata of the named var to a fn with the given body.\nThe var must already exist.  Does not modify the value of the var.\n\nWhen *load-tests* is false, set-test is ignored.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L635\">Source</a>  <br>  <h2 id=\"clojure.test/successful?\">successful?<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (successful? summary)\n</pre> <pre id=\"var-docstr\">Returns true if the given test summary indicates all tests\nwere successful, false otherwise.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L776\">Source</a>  <br>  <h2 id=\"clojure.test/test-all-vars\">test-all-vars<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (test-all-vars ns)\n</pre> <pre id=\"var-docstr\">Calls test-vars on every var interned in the namespace, with fixtures.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L724\">Source</a>  <br>  <h2 id=\"clojure.test/test-ns\">test-ns<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (test-ns ns)\n</pre> <pre id=\"var-docstr\">If the namespace defines a function named test-ns-hook, calls that.\nOtherwise, calls test-all-vars on the namespace.  'ns' is a\nnamespace object or a symbol.\n\nInternally binds *report-counters* to a ref initialized to\n*initial-report-counters*.  Returns the final, dereferenced state of\n*report-counters*.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L730\">Source</a>  <br>  <h2 id=\"clojure.test/test-var\">test-var<span id=\"var-type\" class=\"type\">dynamic function</span>\n</h2>  <pre id=\"var-usage\">Usage: (test-var v)\n</pre> <pre id=\"var-docstr\">If v has a function in its :test metadata, calls that function,\nwith *testing-vars* bound to (conj *testing-vars* v).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L695\">Source</a>  <br>  <h2 id=\"clojure.test/test-vars\">test-vars<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (test-vars vars)\n</pre> <pre id=\"var-docstr\">Groups vars by their namespace and runs test-vars on them with\nappropriate fixtures applied.</pre> <p class=\"var-added\">Added in Clojure version 1.6</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L710\">Source</a>  <br>  <h2 id=\"clojure.test/testing\">testing<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (testing string &amp; body)\n</pre> <pre id=\"var-docstr\">Adds a new string to the list of testing contexts.  May be nested,\nbut must occur inside a test function (deftest).</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L584\">Source</a>  <br>  <h2 id=\"clojure.test/testing-contexts-str\">testing-contexts-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (testing-contexts-str)\n</pre> <pre id=\"var-docstr\">Returns a string representation of the current test context. Joins\nstrings in *testing-contexts* with spaces.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L306\">Source</a>  <br>  <h2 id=\"clojure.test/testing-vars-str\">testing-vars-str<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (testing-vars-str m)\n</pre> <pre id=\"var-docstr\">Returns a string representation of the current test.  Renders names\nin *testing-vars* as a list, then the source file and line of\ncurrent assertion.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L293\">Source</a>  <br>  <h2 id=\"clojure.test/try-expr\">try-expr<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (try-expr msg form)\n</pre> <pre id=\"var-docstr\">Used by the 'is' macro to catch unexpected exceptions.\nYou don't call this.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L525\">Source</a>  <br>  <h2 id=\"clojure.test/use-fixtures\">use-fixtures<span id=\"var-type\" class=\"type\">multimethod</span>\n</h2>  <pre id=\"var-usage\">No usage documentation available</pre> <pre id=\"var-docstr\">Wrap test runs in a fixture function to perform setup and\nteardown. Using a fixture-type of :each wraps every test\nindividually, while:once wraps the whole run in a single function.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L657\">Source</a>  <br>  <h2 id=\"clojure.test/with-test\">with-test<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-test definition &amp; body)\n</pre> <pre id=\"var-docstr\">Takes any definition form (that returns a Var) as the first argument.\nRemaining body goes in the :test metadata function for that Var.\n\nWhen *load-tests* is false, only evaluates the definition, ignoring\nthe tests.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L596\">Source</a>  <br>  <h2 id=\"clojure.test/with-test-out\">with-test-out<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-test-out &amp; body)\n</pre> <pre id=\"var-docstr\">Runs body with *out* bound to the value of *test-out*.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/919a7100ddf327d73bc2d50d9ee1411d4a0e8921/src/clj/clojure/test.clj#L272\">Source</a>   <br> <h2 id=\"clojure.test.junit\">clojure.test.junit</h2> <pre id=\"namespace-docstr\">clojure.test extension for JUnit-compatible XML output.\n\nJUnit (<a href=\"http://junit.org/\">http://junit.org/</a>) is the most popular unit-testing library\nfor Java.  As such, tool support for JUnit output formats is\ncommon.  By producing compatible output from tests, this tool\nsupport can be exploited.\n\nTo use, wrap any calls to clojure.test/run-tests in the\nwith-junit-output macro, like this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.junit)\n\n  (with-junit-output\n    (run-tests 'my.cool.library))\n\nTo write the output to a file, rebind clojure.test/*test-out* to\nyour own PrintWriter (perhaps opened using\nclojure.java.io/writer).</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.test.junit/with-junit-output\">with-junit-output<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-junit-output &amp; body)\n</pre> <pre id=\"var-docstr\">Execute body with modified test-is reporting functions that write\nJUnit-compatible XML output.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/36642c984cbf52456e45a8af0a96e4b7e7417041/src/clj/clojure/test/junit.clj#L182\">Source</a>   <br> <h2 id=\"clojure.test.tap\">clojure.test.tap</h2> <pre id=\"namespace-docstr\">clojure.test extensions for the Test Anything Protocol (TAP)\n\nTAP is a simple text-based syntax for reporting test results.  TAP\nwas originally developed for Perl, and now has implementations in\nseveral languages.  For more information on TAP, see\n<a href=\"http://testanything.org/\">http://testanything.org/</a> and\n<a href=\"http://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm\">http://search.cpan.org/~petdance/TAP-1.0.0/TAP.pm</a>\n\nTo use this library, wrap any calls to\nclojure.test/run-tests in the with-tap-output macro,\nlike this:\n\n  (use 'clojure.test)\n  (use 'clojure.test.tap)\n\n  (with-tap-output\n   (run-tests 'my.cool.library))</pre>    <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.test.tap/print-tap-diagnostic\">print-tap-diagnostic<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-tap-diagnostic data)\n</pre> <pre id=\"var-docstr\">Prints a TAP diagnostic line.  data is a (possibly multi-line)\nstring.</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L51\">Source</a>  <br>  <h2 id=\"clojure.test.tap/print-tap-fail\">print-tap-fail<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-tap-fail msg)\n</pre> <pre id=\"var-docstr\">Prints a TAP 'not ok' line.  msg is a string, with no line breaks</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L65\">Source</a>  <br>  <h2 id=\"clojure.test.tap/print-tap-pass\">print-tap-pass<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-tap-pass msg)\n</pre> <pre id=\"var-docstr\">Prints a TAP 'ok' line.  msg is a string, with no line breaks</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L59\">Source</a>  <br>  <h2 id=\"clojure.test.tap/print-tap-plan\">print-tap-plan<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-tap-plan n)\n</pre> <pre id=\"var-docstr\">Prints a TAP plan line like '1..n'.  n is the number of tests</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L45\">Source</a>  <br>  <h2 id=\"clojure.test.tap/with-tap-output\">with-tap-output<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-tap-output &amp; body)\n</pre> <pre id=\"var-docstr\">Execute body with modified test reporting functions that produce\nTAP output</pre> <p class=\"var-added\">Added in Clojure version 1.1</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/153a2d0f000ab2f254704e4970968fee6a0329a1/src/clj/clojure/test/tap.clj#L117\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.test-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.test-api.html</a>\n  </p>\n</div>\n","clojure.pprint-api":"<h1 id=\"overview\">clojure.pprint</h1> <span id=\"author-line\">by <span id=\"author-name\">Tom Faulhaber</span><br></span> <br>Full namespace name: <span id=\"long-name\">clojure.pprint</span>  <h2>Overview</h2> <pre id=\"namespace-docstr\">A Pretty Printer for Clojure\n\nclojure.pprint implements a flexible system for printing structured data\nin a pleasing, easy-to-understand format. Basic use of the pretty printer is \nsimple, just call pprint instead of println. More advanced users can use \nthe building blocks provided to create custom output formats. \n\nOut of the box, pprint supports a simple structured format for basic data \nand a specialized format for Clojure source code. More advanced formats, \nincluding formats that don't look like Clojure data at all like XML and \nJSON, can be rendered by creating custom dispatch functions. \n\nIn addition to the pprint function, this module contains cl-format, a text \nformatting function which is fully compatible with the format function in \nCommon Lisp. Because pretty printing directives are directly integrated with\ncl-format, it supports very concise custom dispatch. It also provides\na more powerful alternative to Clojure's standard format function.\n\nSee documentation for pprint and cl-format for more information or \ncomplete documentation on the the clojure web site on github.</pre> <span class=\"ns-added\"><span id=\"content\">Added in Clojure version 1.2</span><br></span> <br> <span id=\"external-doc\">Related documentation: <span id=\"external-doc-link\"> <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/doc/clojure/pprint/PrettyPrinting.html\">A Pretty Printer for Clojure</a> <br></span><span id=\"external-doc-link\"> <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/doc/clojure/pprint/CommonLispFormat.html\">A Common Lisp-compatible Format Function</a> <br></span><br> </span>   <h2>Public Variables and Functions</h2>    <h2 id=\"clojure.pprint/*print-base*\">*print-base*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">The base to use for printing integers and rationals.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L87\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-miser-width*\">*print-miser-width*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">The column at which to enter miser style. Depending on the dispatch table, \nmiser style add newlines in more places to try to keep lines short allowing for further \nlevels of nesting.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L47\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-pprint-dispatch*\">*print-pprint-dispatch*<span id=\"var-type\" class=\"type\">dynamic multimethod</span>\n</h2>  <pre id=\"var-usage\">No usage documentation available</pre> <pre id=\"var-docstr\">The pretty print dispatch function. Use with-pprint-dispatch or set-pprint-dispatch\nto modify.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L34\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-pretty*\">*print-pretty*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">Bind to true if you want write to use pretty printing</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L30\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-radix*\">*print-radix*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">Print a radix specifier in front of integers and rationals. If *print-base* is 2, 8, \nor 16, then the radix specifier used is #b, #o, or #x, respectively. Otherwise the \nradix specifier is in the form #XXr where XX is the decimal value of *print-base* </pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L80\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-right-margin*\">*print-right-margin*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">Pretty printing will try to avoid anything going beyond this column.\nSet it to nil to have pprint let the line be arbitrarily long. This will ignore all \nnon-mandatory newlines.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L40\">Source</a>  <br>  <h2 id=\"clojure.pprint/*print-suppress-namespaces*\">*print-suppress-namespaces*<span id=\"var-type\" class=\"type\">dynamic var</span>\n</h2>   <pre id=\"var-docstr\">Don't print namespaces with symbols. This is particularly useful when \npretty printing the results of macro expansions</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L72\">Source</a>  <br>  <h2 id=\"clojure.pprint/cl-format\">cl-format<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (cl-format writer format-in &amp; args)\n</pre> <pre id=\"var-docstr\">An implementation of a Common Lisp compatible format function. cl-format formats its\narguments to an output stream or string based on the format control string given. It \nsupports sophisticated formatting of structured data.\n\nWriter is an instance of java.io.Writer, true to output to *out* or nil to output \nto a string, format-in is the format control string and the remaining arguments \nare the data to be formatted.\n\nThe format control string is a string to be output with embedded 'format directives' \ndescribing how to format the various arguments passed in.\n\nIf writer is nil, cl-format returns the formatted result string. Otherwise, cl-format \nreturns nil.\n\nFor example:\n (let [results [46 38 22]]\n        (cl-format true \"There ~[are~;is~:;are~]~:* ~d result~:p: ~{~d~^, ~}~%\" \n                   (count results) results))\n\nPrints to *out*:\n There are 3 results: 46, 38, 22\n\nDetailed documentation on format control strings is available in the \"Common Lisp the \nLanguage, 2nd edition\", Chapter 22 (available online at:\n<a href=\"http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000\">http://www.cs.cmu.edu/afs/cs.cmu.edu/project/ai-repository/ai/html/cltl/clm/node200.html#SECTION002633000000000000000</a>) \nand in the Common Lisp HyperSpec at \n<a href=\"http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm\">http://www.lispworks.com/documentation/HyperSpec/Body/22_c.htm</a></pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/04b5bfcf4cb103156e7521a0e2071ad426de28d6/src/clj/clojure/pprint/cl_format.clj#L27\">Source</a>  <br>  <h2 id=\"clojure.pprint/code-dispatch\">code-dispatch<span id=\"var-type\" class=\"type\">multimethod</span>\n</h2>  <pre id=\"var-usage\">Usage: (code-dispatch object)\n</pre> <pre id=\"var-docstr\">The pretty print dispatch function for pretty printing Clojure code.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e8ecfaa1174b91d0f5be0dd8ad2a98bbe9cfdb12/src/clj/clojure/pprint/dispatch.clj#L448\">Source</a>  <br>  <h2 id=\"clojure.pprint/formatter\">formatter<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (formatter format-in)\n</pre> <pre id=\"var-docstr\">Makes a function which can directly run format-in. The function is\nfn [stream &amp; args] ... and returns nil unless the stream is nil (meaning \noutput to a string) in which case it returns the resulting string.\n\nformat-in can be either a control string or a previously compiled format.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/04b5bfcf4cb103156e7521a0e2071ad426de28d6/src/clj/clojure/pprint/cl_format.clj#L1915\">Source</a>  <br>  <h2 id=\"clojure.pprint/formatter-out\">formatter-out<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (formatter-out format-in)\n</pre> <pre id=\"var-docstr\">Makes a function which can directly run format-in. The function is\nfn [&amp; args] ... and returns nil. This version of the formatter macro is\ndesigned to be used with *out* set to an appropriate Writer. In particular,\nthis is meant to be used as part of a pretty printer dispatch method.\n\nformat-in can be either a control string or a previously compiled format.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/04b5bfcf4cb103156e7521a0e2071ad426de28d6/src/clj/clojure/pprint/cl_format.clj#L1935\">Source</a>  <br>  <h2 id=\"clojure.pprint/fresh-line\">fresh-line<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (fresh-line)\n</pre> <pre id=\"var-docstr\">Make a newline if *out* is not already at the beginning of the line. If *out* is\nnot a pretty writer (which keeps track of columns), this function always outputs a newline.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/04b5bfcf4cb103156e7521a0e2071ad426de28d6/src/clj/clojure/pprint/cl_format.clj#L1245\">Source</a>  <br>  <h2 id=\"clojure.pprint/get-pretty-writer\">get-pretty-writer<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (get-pretty-writer writer)\n</pre> <pre id=\"var-docstr\">Returns the java.io.Writer passed in wrapped in a pretty writer proxy, unless it's \nalready a pretty writer. Generally, it is unnecessary to call this function, since pprint,\nwrite, and cl-format all call it if they need to. However if you want the state to be \npreserved across calls, you will want to wrap them with this. \n\nFor example, when you want to generate column-aware output with multiple calls to cl-format, \ndo it like in this example:\n\n    (defn print-table [aseq column-width]\n      (binding [*out* (get-pretty-writer *out*)]\n        (doseq [row aseq]\n          (doseq [col row]\n            (cl-format true \"~4D~7,vT\" col column-width))\n          (prn))))\n\nNow when you run:\n\n    user&gt; (print-table (map #(vector % (* % %) (* % % %)) (range 1 11)) 8)\n\nIt prints a table of squares and cubes for the numbers from 1 to 10:\n\n       1      1       1    \n       2      4       8    \n       3      9      27    \n       4     16      64    \n       5     25     125    \n       6     36     216    \n       7     49     343    \n       8     64     512    \n       9     81     729    \n      10    100    1000</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/04b5bfcf4cb103156e7521a0e2071ad426de28d6/src/clj/clojure/pprint/cl_format.clj#L1203\">Source</a>  <br>  <h2 id=\"clojure.pprint/pp\">pp<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (pp)\n</pre> <pre id=\"var-docstr\">A convenience macro that pretty prints the last thing output. This is\nexactly equivalent to (pprint *1).</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L254\">Source</a>  <br>  <h2 id=\"clojure.pprint/pprint\">pprint<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pprint object)\n       (pprint object writer)\n</pre> <pre id=\"var-docstr\">Pretty print object to the optional output writer. If the writer is not provided, \nprint the object to the currently bound value of *out*.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L241\">Source</a>  <br>  <h2 id=\"clojure.pprint/pprint-indent\">pprint-indent<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pprint-indent relative-to n)\n</pre> <pre id=\"var-docstr\">Create an indent at this point in the pretty printing stream. This defines how \nfollowing lines are indented. relative-to can be either :block or :current depending \nwhether the indent should be computed relative to the start of the logical block or\nthe current column position. n is an offset. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L341\">Source</a>  <br>  <h2 id=\"clojure.pprint/pprint-logical-block\">pprint-logical-block<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (pprint-logical-block options* body)\n</pre> <pre id=\"var-docstr\">Execute the body as a pretty printing logical block with output to *out* which \nmust be a pretty printing writer. When used from pprint or cl-format, this can be \nassumed. \n\nThis function is intended for use when writing custom dispatch functions.\n\nBefore the body, the caller can optionally specify options: :prefix, :per-line-prefix, \nand :suffix.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L302\">Source</a>  <br>  <h2 id=\"clojure.pprint/pprint-newline\">pprint-newline<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pprint-newline kind)\n</pre> <pre id=\"var-docstr\">Print a conditional newline to a pretty printing stream. kind specifies if the \nnewline is :linear, :miser, :fill, or :mandatory. \n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L329\">Source</a>  <br>  <h2 id=\"clojure.pprint/pprint-tab\">pprint-tab<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (pprint-tab kind colnum colinc)\n</pre> <pre id=\"var-docstr\">Tab at this point in the pretty printing stream. kind specifies whether the tab\nis :line, :section, :line-relative, or :section-relative. \n\nColnum and colinc specify the target column and the increment to move the target\nforward if the output is already past the original target.\n\nThis function is intended for use when writing custom dispatch functions.\n\nOutput is sent to *out* which must be a pretty printing writer.\n\nTHIS FUNCTION IS NOT YET IMPLEMENTED.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L356\">Source</a>  <br>  <h2 id=\"clojure.pprint/print-length-loop\">print-length-loop<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-length-loop bindings &amp; body)\n</pre> <pre id=\"var-docstr\">A version of loop that iterates at most *print-length* times. This is designed \nfor use in pretty-printer dispatch functions.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L391\">Source</a>  <br>  <h2 id=\"clojure.pprint/print-table\">print-table<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (print-table ks rows)\n       (print-table rows)\n</pre> <pre id=\"var-docstr\">Prints a collection of maps in a textual table. Prints table headings\nks, and then a line of output for each row, corresponding to the keys\nin ks. If ks are not specified, use the keys of the first item in rows.</pre> <p class=\"var-added\">Added in Clojure version 1.3</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/93d13d0c0671130b329863570080c72799563ac7/src/clj/clojure/pprint/print_table.clj#L11\">Source</a>  <br>  <h2 id=\"clojure.pprint/set-pprint-dispatch\">set-pprint-dispatch<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (set-pprint-dispatch function)\n</pre> <pre id=\"var-docstr\">Set the pretty print dispatch function to a function matching (fn [obj] ...)\nwhere obj is the object to pretty print. That function will be called with *out* set\nto a pretty printing writer to which it should do its printing.\n\nFor example functions, see simple-dispatch and code-dispatch in \nclojure.pprint.dispatch.clj.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L260\">Source</a>  <br>  <h2 id=\"clojure.pprint/simple-dispatch\">simple-dispatch<span id=\"var-type\" class=\"type\">multimethod</span>\n</h2>  <pre id=\"var-usage\">Usage: (simple-dispatch object)\n</pre> <pre id=\"var-docstr\">The pretty print dispatch function for simple data structure format.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/e8ecfaa1174b91d0f5be0dd8ad2a98bbe9cfdb12/src/clj/clojure/pprint/dispatch.clj#L147\">Source</a>  <br>  <h2 id=\"clojure.pprint/with-pprint-dispatch\">with-pprint-dispatch<span id=\"var-type\" class=\"type\">macro</span>\n</h2>  <pre id=\"var-usage\">Usage: (with-pprint-dispatch function &amp; body)\n</pre> <pre id=\"var-docstr\">Execute body with the pretty print dispatch function bound to function.</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L274\">Source</a>  <br>  <h2 id=\"clojure.pprint/write\">write<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (write object &amp; kw-args)\n</pre> <pre id=\"var-docstr\">Write an object subject to the current bindings of the printer control variables.\nUse the kw-args argument to override individual variables for this call (and any \nrecursive calls). Returns the string result if :stream is nil or nil otherwise.\n\nThe following keyword arguments can be passed with values:\n  Keyword              Meaning                              Default value\n  :stream              Writer for output or nil             true (indicates *out*)\n  :base                Base to use for writing rationals    Current value of *print-base*\n  :circle*             If true, mark circular structures    Current value of *print-circle*\n  :length              Maximum elements to show in sublists Current value of *print-length*\n  :level               Maximum depth                        Current value of *print-level*\n  :lines*              Maximum lines of output              Current value of *print-lines*\n  :miser-width         Width to enter miser mode            Current value of *print-miser-width*\n  :dispatch            The pretty print dispatch function   Current value of *print-pprint-dispatch*\n  :pretty              If true, do pretty printing          Current value of *print-pretty*\n  :radix               If true, prepend a radix specifier   Current value of *print-radix*\n  :readably*           If true, print readably              Current value of *print-readably*\n  :right-margin        The column for the right margin      Current value of *print-right-margin*\n  :suppress-namespaces If true, no namespaces in symbols    Current value of *print-suppress-namespaces*\n\n  * = not yet supported</pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L197\">Source</a>  <br>  <h2 id=\"clojure.pprint/write-out\">write-out<span id=\"var-type\" class=\"type\">function</span>\n</h2>  <pre id=\"var-usage\">Usage: (write-out object)\n</pre> <pre id=\"var-docstr\">Write an object to *out* subject to the current bindings of the printer control \nvariables. Use the kw-args argument to override individual variables for this call (and \nany recursive calls).\n\n*out* must be a PrettyWriter if pretty printing is enabled. This is the responsibility\nof the caller.\n\nThis method is primarily intended for use by pretty print dispatch functions that \nalready know that the pretty printer will have set up their environment appropriately.\nNormal library clients should use the standard \"write\" interface. </pre> <p class=\"var-added\">Added in Clojure version 1.2</p> <a id=\"var-source\" href=\"https://github.com/clojure/clojure/blob/1588ff3f70e864d9817bc565bd2c30b08189bc6e/src/clj/clojure/pprint/pprint_base.clj#L171\">Source</a><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Rich Hickey<br>Licensed under the Eclipse Public License 1.0.<br>\n    <a href=\"https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.pprint-api.html\" class=\"_attribution-link\">https://clojure.github.io/clojure/branch-clojure-1.7.0/clojure.pprint-api.html</a>\n  </p>\n</div>\n"}