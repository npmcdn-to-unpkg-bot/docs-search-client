{"index":"<h1 class=\"settitle\">The C Preprocessor</h1> <div class=\"contents\"> <h2>Table of Contents</h2> <ul> <li>\n<a name=\"toc_Top\" href=\"index#Top\" id=\"toc_Top\">The C Preprocessor</a> </li>\n<li>\n<a name=\"toc_Overview\" href=\"overview#Overview\" id=\"toc_Overview\">1 Overview</a> <ul> <li>\n<a href=\"character-sets#Character-sets\">1.1 Character sets</a> </li>\n<li>\n<a href=\"initial-processing#Initial-processing\">1.2 Initial processing</a> </li>\n<li>\n<a href=\"tokenization#Tokenization\">1.3 Tokenization</a> </li>\n<li>\n<a href=\"the-preprocessing-language#The-preprocessing-language\">1.4 The preprocessing language</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Header-Files\" href=\"header-files#Header-Files\" id=\"toc_Header-Files\">2 Header Files</a> <ul> <li>\n<a href=\"include-syntax#Include-Syntax\">2.1 Include Syntax</a> </li>\n<li>\n<a href=\"include-operation#Include-Operation\">2.2 Include Operation</a> </li>\n<li>\n<a href=\"search-path#Search-Path\">2.3 Search Path</a> </li>\n<li>\n<a href=\"once_002donly-headers#Once_002dOnly-Headers\">2.4 Once-Only Headers</a> </li>\n<li>\n<a href=\"alternatives-to-wrapper-_0023ifndef#Alternatives-to-Wrapper-_0023ifndef\">2.5 Alternatives to Wrapper #ifndef</a> </li>\n<li>\n<a href=\"computed-includes#Computed-Includes\">2.6 Computed Includes</a> </li>\n<li>\n<a href=\"wrapper-headers#Wrapper-Headers\">2.7 Wrapper Headers</a> </li>\n<li>\n<a href=\"system-headers#System-Headers\">2.8 System Headers</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Macros\" href=\"macros#Macros\" id=\"toc_Macros\">3 Macros</a> <ul> <li>\n<a href=\"object_002dlike-macros#Object_002dlike-Macros\">3.1 Object-like Macros</a> </li>\n<li>\n<a href=\"function_002dlike-macros#Function_002dlike-Macros\">3.2 Function-like Macros</a> </li>\n<li>\n<a href=\"macro-arguments#Macro-Arguments\">3.3 Macro Arguments</a> </li>\n<li>\n<a href=\"stringification#Stringification\">3.4 Stringification</a> </li>\n<li>\n<a href=\"concatenation#Concatenation\">3.5 Concatenation</a> </li>\n<li>\n<a href=\"variadic-macros#Variadic-Macros\">3.6 Variadic Macros</a> </li>\n<li>\n<a href=\"predefined-macros#Predefined-Macros\">3.7 Predefined Macros</a> <ul> <li>\n<a href=\"standard-predefined-macros#Standard-Predefined-Macros\">3.7.1 Standard Predefined Macros</a> </li>\n<li>\n<a href=\"common-predefined-macros#Common-Predefined-Macros\">3.7.2 Common Predefined Macros</a> </li>\n<li>\n<a href=\"system_002dspecific-predefined-macros#System_002dspecific-Predefined-Macros\">3.7.3 System-specific Predefined Macros</a> </li>\n<li>\n<a href=\"c_002b_002b-named-operators#C_002b_002b-Named-Operators\">3.7.4 C++ Named Operators</a> </li>\n</ul> </li>\n<li>\n<a href=\"undefining-and-redefining-macros#Undefining-and-Redefining-Macros\">3.8 Undefining and Redefining Macros</a> </li>\n<li>\n<a href=\"directives-within-macro-arguments#Directives-Within-Macro-Arguments\">3.9 Directives Within Macro Arguments</a> </li>\n<li>\n<a href=\"macro-pitfalls#Macro-Pitfalls\">3.10 Macro Pitfalls</a> <ul> <li>\n<a href=\"misnesting#Misnesting\">3.10.1 Misnesting</a> </li>\n<li>\n<a href=\"operator-precedence-problems#Operator-Precedence-Problems\">3.10.2 Operator Precedence Problems</a> </li>\n<li>\n<a href=\"swallowing-the-semicolon#Swallowing-the-Semicolon\">3.10.3 Swallowing the Semicolon</a> </li>\n<li>\n<a href=\"duplication-of-side-effects#Duplication-of-Side-Effects\">3.10.4 Duplication of Side Effects</a> </li>\n<li>\n<a href=\"self_002dreferential-macros#Self_002dReferential-Macros\">3.10.5 Self-Referential Macros</a> </li>\n<li>\n<a href=\"argument-prescan#Argument-Prescan\">3.10.6 Argument Prescan</a> </li>\n<li>\n<a href=\"newlines-in-arguments#Newlines-in-Arguments\">3.10.7 Newlines in Arguments</a> </li>\n</ul> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Conditionals\" href=\"conditionals#Conditionals\" id=\"toc_Conditionals\">4 Conditionals</a> <ul> <li>\n<a href=\"conditional-uses#Conditional-Uses\">4.1 Conditional Uses</a> </li>\n<li>\n<a href=\"conditional-syntax#Conditional-Syntax\">4.2 Conditional Syntax</a> <ul> <li>\n<a href=\"ifdef#Ifdef\">4.2.1 Ifdef</a> </li>\n<li>\n<a href=\"if#If\">4.2.2 If</a> </li>\n<li>\n<a href=\"defined#Defined\">4.2.3 Defined</a> </li>\n<li>\n<a href=\"else#Else\">4.2.4 Else</a> </li>\n<li>\n<a href=\"elif#Elif\">4.2.5 Elif</a> </li>\n</ul> </li>\n<li>\n<a href=\"deleted-code#Deleted-Code\">4.3 Deleted Code</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Diagnostics\" href=\"diagnostics#Diagnostics\" id=\"toc_Diagnostics\">5 Diagnostics</a> </li>\n<li>\n<a name=\"toc_Line-Control\" href=\"line-control#Line-Control\" id=\"toc_Line-Control\">6 Line Control</a> </li>\n<li>\n<a name=\"toc_Pragmas\" href=\"pragmas#Pragmas\" id=\"toc_Pragmas\">7 Pragmas</a> </li>\n<li>\n<a name=\"toc_Other-Directives\" href=\"other-directives#Other-Directives\" id=\"toc_Other-Directives\">8 Other Directives</a> </li>\n<li>\n<a name=\"toc_Preprocessor-Output\" href=\"preprocessor-output#Preprocessor-Output\" id=\"toc_Preprocessor-Output\">9 Preprocessor Output</a> </li>\n<li>\n<a name=\"toc_Traditional-Mode\" href=\"traditional-mode#Traditional-Mode\" id=\"toc_Traditional-Mode\">10 Traditional Mode</a> <ul> <li>\n<a href=\"traditional-lexical-analysis#Traditional-lexical-analysis\">10.1 Traditional lexical analysis</a> </li>\n<li>\n<a href=\"traditional-macros#Traditional-macros\">10.2 Traditional macros</a> </li>\n<li>\n<a href=\"traditional-miscellany#Traditional-miscellany\">10.3 Traditional miscellany</a> </li>\n<li>\n<a href=\"traditional-warnings#Traditional-warnings\">10.4 Traditional warnings</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Implementation-Details\" href=\"implementation-details#Implementation-Details\" id=\"toc_Implementation-Details\">11 Implementation Details</a> <ul> <li>\n<a href=\"implementation_002ddefined-behavior#Implementation_002ddefined-behavior\">11.1 Implementation-defined behavior</a> </li>\n<li>\n<a href=\"implementation-limits#Implementation-limits\">11.2 Implementation limits</a> </li>\n<li>\n<a href=\"obsolete-features#Obsolete-Features\">11.3 Obsolete Features</a> <ul> <li>\n<a href=\"obsolete-features#Obsolete-Features\">11.3.1 Assertions</a> </li>\n</ul> </li>\n<li>\n<a href=\"differences-from-previous-versions#Differences-from-previous-versions\">11.4 Differences from previous versions</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Invocation\" href=\"invocation#Invocation\" id=\"toc_Invocation\">12 Invocation</a> </li>\n<li>\n<a name=\"toc_Environment-Variables\" href=\"environment-variables#Environment-Variables\" id=\"toc_Environment-Variables\">13 Environment Variables</a> </li>\n<li>\n<a name=\"toc_GNU-Free-Documentation-License\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\" id=\"toc_GNU-Free-Documentation-License\">GNU Free Documentation License</a> <ul> <li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">ADDENDUM: How to use this License for your documents</a> </li>\n</ul> </li>\n<li>\n<a name=\"toc_Index-of-Directives\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Index-of-Directives.html#Index-of-Directives\" id=\"toc_Index-of-Directives\">Index of Directives</a> </li>\n<li>\n<a name=\"toc_Option-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Option-Index.html#Option-Index\" id=\"toc_Option-Index\">Option Index</a> </li>\n<li>\n<a name=\"toc_Concept-Index\" href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Concept-Index.html#Concept-Index\" id=\"toc_Concept-Index\">Concept Index</a> </li>\n</ul> </div>  <h2 class=\"unnumbered\" id=\"Top\">The C Preprocessor</h2> <p>The C preprocessor implements the macro language used to transform C, C++, and Objective-C programs before they are compiled. It can also be useful on its own. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"overview#Overview\">Overview</a> </li>\n<li>\n<a accesskey=\"2\" href=\"header-files#Header-Files\">Header Files</a> </li>\n<li>\n<a accesskey=\"3\" href=\"macros#Macros\">Macros</a> </li>\n<li>\n<a accesskey=\"4\" href=\"conditionals#Conditionals\">Conditionals</a> </li>\n<li>\n<a accesskey=\"5\" href=\"diagnostics#Diagnostics\">Diagnostics</a> </li>\n<li>\n<a accesskey=\"6\" href=\"line-control#Line-Control\">Line Control</a> </li>\n<li>\n<a accesskey=\"7\" href=\"pragmas#Pragmas\">Pragmas</a> </li>\n<li>\n<a accesskey=\"8\" href=\"other-directives#Other-Directives\">Other Directives</a> </li>\n<li>\n<a accesskey=\"9\" href=\"preprocessor-output#Preprocessor-Output\">Preprocessor Output</a> </li>\n<li>\n<a href=\"traditional-mode#Traditional-Mode\">Traditional Mode</a> </li>\n<li>\n<a href=\"implementation-details#Implementation-Details\">Implementation Details</a> </li>\n<li>\n<a href=\"invocation#Invocation\">Invocation</a> </li>\n<li>\n<a href=\"environment-variables#Environment-Variables\">Environment Variables</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/GNU-Free-Documentation-License.html#GNU-Free-Documentation-License\">GNU Free Documentation License</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Index-of-Directives.html#Index-of-Directives\">Index of Directives</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Option-Index.html#Option-Index\">Option Index</a> </li>\n<li>\n<a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Concept-Index.html#Concept-Index\">Concept Index</a> </li>\n</ul> <p>--- The Detailed Node Listing --- </p>\n<p>Overview </p> <ul class=\"menu\"> <li>\n<a href=\"character-sets#Character-sets\">Character sets</a> </li>\n<li>\n<a href=\"initial-processing#Initial-processing\">Initial processing</a> </li>\n<li>\n<a href=\"tokenization#Tokenization\">Tokenization</a> </li>\n<li>\n<a href=\"the-preprocessing-language#The-preprocessing-language\">The preprocessing language</a> </li>\n</ul> <p>Header Files </p> <ul class=\"menu\"> <li>\n<a href=\"include-syntax#Include-Syntax\">Include Syntax</a> </li>\n<li>\n<a href=\"include-operation#Include-Operation\">Include Operation</a> </li>\n<li>\n<a href=\"search-path#Search-Path\">Search Path</a> </li>\n<li>\n<a href=\"once_002donly-headers#Once_002dOnly-Headers\">Once-Only Headers</a> </li>\n<li>\n<a href=\"alternatives-to-wrapper-_0023ifndef#Alternatives-to-Wrapper-_0023ifndef\">Alternatives to Wrapper #ifndef</a> </li>\n<li>\n<a href=\"computed-includes#Computed-Includes\">Computed Includes</a> </li>\n<li>\n<a href=\"wrapper-headers#Wrapper-Headers\">Wrapper Headers</a> </li>\n<li>\n<a href=\"system-headers#System-Headers\">System Headers</a> </li>\n</ul> <p>Macros </p> <ul class=\"menu\"> <li>\n<a href=\"object_002dlike-macros#Object_002dlike-Macros\">Object-like Macros</a> </li>\n<li>\n<a href=\"function_002dlike-macros#Function_002dlike-Macros\">Function-like Macros</a> </li>\n<li>\n<a href=\"macro-arguments#Macro-Arguments\">Macro Arguments</a> </li>\n<li>\n<a href=\"stringification#Stringification\">Stringification</a> </li>\n<li>\n<a href=\"concatenation#Concatenation\">Concatenation</a> </li>\n<li>\n<a href=\"variadic-macros#Variadic-Macros\">Variadic Macros</a> </li>\n<li>\n<a href=\"predefined-macros#Predefined-Macros\">Predefined Macros</a> </li>\n<li>\n<a href=\"undefining-and-redefining-macros#Undefining-and-Redefining-Macros\">Undefining and Redefining Macros</a> </li>\n<li>\n<a href=\"directives-within-macro-arguments#Directives-Within-Macro-Arguments\">Directives Within Macro Arguments</a> </li>\n<li>\n<a href=\"macro-pitfalls#Macro-Pitfalls\">Macro Pitfalls</a> </li>\n</ul> <p>Predefined Macros </p> <ul class=\"menu\"> <li>\n<a href=\"standard-predefined-macros#Standard-Predefined-Macros\">Standard Predefined Macros</a> </li>\n<li>\n<a href=\"common-predefined-macros#Common-Predefined-Macros\">Common Predefined Macros</a> </li>\n<li>\n<a href=\"system_002dspecific-predefined-macros#System_002dspecific-Predefined-Macros\">System-specific Predefined Macros</a> </li>\n<li>\n<a href=\"c_002b_002b-named-operators#C_002b_002b-Named-Operators\">C++ Named Operators</a> </li>\n</ul> <p>Macro Pitfalls </p> <ul class=\"menu\"> <li>\n<a href=\"misnesting#Misnesting\">Misnesting</a> </li>\n<li>\n<a href=\"operator-precedence-problems#Operator-Precedence-Problems\">Operator Precedence Problems</a> </li>\n<li>\n<a href=\"swallowing-the-semicolon#Swallowing-the-Semicolon\">Swallowing the Semicolon</a> </li>\n<li>\n<a href=\"duplication-of-side-effects#Duplication-of-Side-Effects\">Duplication of Side Effects</a> </li>\n<li>\n<a href=\"self_002dreferential-macros#Self_002dReferential-Macros\">Self-Referential Macros</a> </li>\n<li>\n<a href=\"argument-prescan#Argument-Prescan\">Argument Prescan</a> </li>\n<li>\n<a href=\"newlines-in-arguments#Newlines-in-Arguments\">Newlines in Arguments</a> </li>\n</ul> <p>Conditionals </p> <ul class=\"menu\"> <li>\n<a href=\"conditional-uses#Conditional-Uses\">Conditional Uses</a> </li>\n<li>\n<a href=\"conditional-syntax#Conditional-Syntax\">Conditional Syntax</a> </li>\n<li>\n<a href=\"deleted-code#Deleted-Code\">Deleted Code</a> </li>\n</ul> <p>Conditional Syntax </p> <ul class=\"menu\"> <li>\n<a href=\"ifdef#Ifdef\">Ifdef</a> </li>\n<li>\n<a href=\"if#If\">If</a> </li>\n<li>\n<a href=\"defined#Defined\">Defined</a> </li>\n<li>\n<a href=\"else#Else\">Else</a> </li>\n<li>\n<a href=\"elif#Elif\">Elif</a> </li>\n</ul> <p>Implementation Details </p> <ul class=\"menu\"> <li>\n<a href=\"implementation_002ddefined-behavior#Implementation_002ddefined-behavior\">Implementation-defined behavior</a> </li>\n<li>\n<a href=\"implementation-limits#Implementation-limits\">Implementation limits</a> </li>\n<li>\n<a href=\"obsolete-features#Obsolete-Features\">Obsolete Features</a> </li>\n<li>\n<a href=\"differences-from-previous-versions#Differences-from-previous-versions\">Differences from previous versions</a> </li>\n</ul> <p>Obsolete Features </p> <ul class=\"menu\"> <li>\n<a href=\"obsolete-features#Obsolete-Features\">Obsolete Features</a> </li>\n</ul>  <p>Copyright © 1987-2015 Free Software Foundation, Inc. </p>\n<p>Permission is granted to copy, distribute and/or modify this document under the terms of the GNU Free Documentation License, Version 1.3 or any later version published by the Free Software Foundation. A copy of the license is included in the  section entitled “GNU Free Documentation License”.  </p>\n<p>This manual contains no Invariant Sections. The Front-Cover Texts are (a) (see below), and the Back-Cover Texts are (b) (see below). </p>\n<p>(a) The FSF's Front-Cover Text is: </p>\n<p>A GNU Manual </p>\n<p>(b) The FSF's Back-Cover Text is: </p>\n<p>You have freedom to copy and modify this GNU Manual, like GNU software. Copies published by the Free Software Foundation raise funds for GNU development.  </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/index.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/index.html</a>\n  </p>\n</div>\n","overview":"<h1 class=\"chapter\" id=\"Overview\">1 Overview</h1>  <p>The C preprocessor, often known as cpp, is a macro processor that is used automatically by the C compiler to transform your program before compilation. It is called a macro processor because it allows you to define macros, which are brief abbreviations for longer constructs. </p>\n<p>The C preprocessor is intended to be used only with C, C++, and Objective-C source code. In the past, it has been abused as a general text processor. It will choke on input which does not obey C's lexical rules. For example, apostrophes will be interpreted as the beginning of character constants, and cause errors. Also, you cannot rely on it preserving characteristics of the input which are not significant to C-family languages. If a Makefile is preprocessed, all the hard tabs will be removed, and the Makefile will not work. </p>\n<p>Having said that, you can often get away with using cpp on things which are not C. Other Algol-ish programming languages are often safe (Pascal, Ada, etc.) So is assembly, with caution. <code>-traditional-cpp</code> mode preserves more white space, and is otherwise more permissive. Many of the problems can be avoided by writing C or C++ style comments instead of native language comments, and keeping macros simple. </p>\n<p>Wherever possible, you should use a preprocessor geared to the language you are writing in. Modern versions of the GNU assembler have macro facilities. Most high level programming languages have their own conditional compilation and inclusion mechanism. If all else fails, try a true general text processor, such as GNU M4. </p>\n<p>C preprocessors vary in some details. This manual discusses the GNU C preprocessor, which provides a small superset of the features of ISO Standard C. In its default mode, the GNU C preprocessor does not do a few things required by the standard. These are features which are rarely, if ever, used, and may cause surprising changes to the meaning of a program which does not expect them. To get strict ISO Standard C, you should use the <code>-std=c90</code>, <code>-std=c99</code> or <code>-std=c11</code> options, depending on which version of the standard you want. To get all the mandatory diagnostics, you must also use <code>-pedantic</code>. See <a href=\"invocation#Invocation\">Invocation</a>. </p>\n<p>This manual describes the behavior of the ISO preprocessor. To minimize gratuitous differences, where the ISO preprocessor's behavior does not conflict with traditional semantics, the traditional preprocessor should behave the same way. The various differences that do exist are detailed in the section <a href=\"traditional-mode#Traditional-Mode\">Traditional Mode</a>. </p>\n<p>For clarity, unless noted otherwise, references to ‘<code>CPP</code>’ in this manual refer to GNU CPP.  </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"character-sets#Character-sets\">Character sets</a> </li>\n<li>\n<a accesskey=\"2\" href=\"initial-processing#Initial-processing\">Initial processing</a> </li>\n<li>\n<a accesskey=\"3\" href=\"tokenization#Tokenization\">Tokenization</a> </li>\n<li>\n<a accesskey=\"4\" href=\"the-preprocessing-language#The-preprocessing-language\">The preprocessing language</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Overview.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Overview.html</a>\n  </p>\n</div>\n","character-sets":"<h1 class=\"section\" id=\"Character-sets\">1.1 Character sets</h1> <p>Source code character set processing in C and related languages is rather complicated. The C standard discusses two character sets, but there are really at least four. </p>\n<p>The files input to CPP might be in any character set at all. CPP's very first action, before it even looks for line boundaries, is to convert the file into the character set it uses for internal processing. That set is what the C standard calls the source character set. It must be isomorphic with ISO 10646, also known as Unicode. CPP uses the UTF-8 encoding of Unicode. </p>\n<p>The character sets of the input files are specified using the <code>-finput-charset=</code> option. </p>\n<p>All preprocessing work (the subject of the rest of this manual) is carried out in the source character set. If you request textual output from the preprocessor with the <code>-E</code> option, it will be in UTF-8. </p>\n<p>After preprocessing is complete, string and character constants are converted again, into the execution character set. This character set is under control of the user; the default is UTF-8, matching the source character set. Wide string and character constants have their own character set, which is not called out specifically in the standard. Again, it is under control of the user. The default is UTF-16 or UTF-32, whichever fits in the target's <code>wchar_t</code> type, in the target machine's byte order.<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> Octal and hexadecimal escape sequences do not undergo conversion; <tt>'\\x12'</tt> has the value 0x12 regardless of the currently selected execution character set. All other escapes are replaced by the character in the source character set that they represent, then converted to the execution character set, just like unescaped characters. </p>\n<p>Unless the experimental <code>-fextended-identifiers</code> option is used, GCC does not permit the use of characters outside the ASCII range, nor ‘<code>\\u</code>’ and ‘<code>\\U</code>’ escapes, in identifiers. Even with that option, characters outside the ASCII range can only be specified with the ‘<code>\\u</code>’ and ‘<code>\\U</code>’ escapes, not used directly in identifiers. </p>\n<div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> UTF-16 does not meet the requirements of the C standard for a wide character set, but the choice of 16-bit <code>wchar_t</code> is enshrined in some system ABIs so we cannot fix this.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Character-sets.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Character-sets.html</a>\n  </p>\n</div>\n","initial-processing":"<h1 class=\"section\" id=\"Initial-processing\">1.2 Initial processing</h1> <p>The preprocessor performs a series of textual transformations on its input. These happen before all other processing. Conceptually, they happen in a rigid order, and the entire file is run through each transformation before the next one begins. CPP actually does them all at once, for performance reasons. These transformations correspond roughly to the first three “phases of translation” described in the C standard. </p>\n<ol type=\"1\" start=\"1\"> <li>\nThe input file is read into memory and broken into lines. <p>Different systems use different conventions to indicate the end of a line. GCC accepts the ASCII control sequences <kbd>LF</kbd>, <kbd>CR LF</kbd> and <kbd>CR</kbd> as end-of-line markers. These are the canonical sequences used by Unix, DOS and VMS, and the classic Mac OS (before OSX) respectively. You may therefore safely copy source code written on any of those systems to a different one and use it without conversion. (GCC may lose track of the current line number if a file doesn't consistently use one convention, as sometimes happens when it is edited on computers with different conventions that share a network file system.) </p>\n<p>If the last line of any input file lacks an end-of-line marker, the end of the file is considered to implicitly supply one. The C standard says that this condition provokes undefined behavior, so GCC will emit a warning message. </p>\n</li>\n<li>\nIf trigraphs are enabled, they are replaced by their corresponding single characters. By default GCC ignores trigraphs, but if you request a strictly conforming mode with the <code>-std</code> option, or you specify the <code>-trigraphs</code> option, then it converts them. <p>These are nine three-character sequences, all starting with ‘<code>??</code>’, that are defined by ISO C to stand for single characters. They permit obsolete systems that lack some of C's punctuation to use C. For example, ‘<code>??/</code>’ stands for ‘<code>\\</code>’, so <tt>'??/n'</tt> is a character constant for a newline. </p>\n<p>Trigraphs are not popular and many compilers implement them incorrectly. Portable code should not rely on trigraphs being either converted or ignored. With <code>-Wtrigraphs</code> GCC will warn you when a trigraph may change the meaning of your program if it were converted. See <a href=\"invocation#Wtrigraphs\">Wtrigraphs</a>. </p>\n<p>In a string constant, you can prevent a sequence of question marks from being confused with a trigraph by inserting a backslash between the question marks, or by separating the string literal at the trigraph and making use of string literal concatenation. <tt>\"(??\\?)\"</tt> is the string ‘<code>(???)</code>’, not ‘<code>(?]</code>’. Traditional C compilers do not recognize these idioms. </p>\n<p>The nine trigraphs and their replacements are </p>\n<pre class=\"smallexample\">Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-\nReplacement:      [    ]    {    }    #    \\    ^    |    ~</pre> </li>\n<li>\nContinued lines are merged into one long line. <p>A continued line is a line which ends with a backslash, ‘<code>\\</code>’. The backslash is removed and the following line is joined with the current one. No space is inserted, so you may split a line anywhere, even in the middle of a word. (It is generally more readable to split lines only at white space.) </p>\n<p>The trailing backslash on a continued line is commonly referred to as a backslash-newline. </p>\n<p>If there is white space between a backslash and the end of a line, that is still a continued line. However, as this is usually the result of an editing mistake, and many compilers will not accept it as a continued line, GCC will warn you about it. </p>\n</li>\n<li>\nAll comments are replaced with single spaces. <p>There are two kinds of comments. Block comments begin with ‘<code>/*</code>’ and continue until the next ‘<code>*/</code>’. Block comments do not nest: </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">this is</span> /* <span class=\"roman\">one comment</span> */ <span class=\"roman\">text outside comment</span></pre> <p>Line comments begin with ‘<code>//</code>’ and continue to the end of the current line. Line comments do not nest either, but it does not matter, because they would end in the same place anyway. </p>\n<pre class=\"smallexample\">// <span class=\"roman\">this is</span> // <span class=\"roman\">one comment</span>\n<span class=\"roman\">text outside comment</span></pre> </li>\n</ol> <p>It is safe to put line comments inside block comments, or vice versa. </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">block comment</span>\n   // <span class=\"roman\">contains line comment</span>\n   <span class=\"roman\">yet more comment</span>\n */ <span class=\"roman\">outside comment</span>\n\n// <span class=\"roman\">line comment</span> /* <span class=\"roman\">contains block comment</span> */</pre> <p>But beware of commenting out one end of a block comment with a line comment. </p>\n<pre class=\"smallexample\">// <span class=\"roman\">l.c.</span>  /* <span class=\"roman\">block comment begins</span>\n   <span class=\"roman\">oops! this isn't a comment anymore</span> */</pre> <p>Comments are not recognized within string literals. <tt>\"/* blah */\"</tt> is the string constant ‘<code>/* blah */</code>’, not an empty string. </p>\n<p>Line comments are not in the 1989 edition of the C standard, but they are recognized by GCC as an extension. In C++ and in the 1999 edition of the C standard, they are an official part of the language. </p>\n<p>Since these transformations happen before all other processing, you can split a line mechanically with backslash-newline anywhere. You can comment out the end of a line. You can continue a line comment onto the next line with backslash-newline. You can even split ‘<code>/*</code>’, ‘<code>*/</code>’, and ‘<code>//</code>’ onto multiple lines with backslash-newline. For example: </p>\n<pre class=\"smallexample\">/\\\n*\n*/ # /*\n*/ defi\\\nne FO\\\nO 10\\\n20</pre> <p class=\"noindent\">is equivalent to <code>#define FOO 1020</code>. All these tricks are extremely confusing and should not be used in code intended to be readable. </p>\n<p>There is no way to prevent a backslash at the end of a line from being interpreted as a backslash-newline. This cannot affect any correct program, however. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Initial-processing.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Initial-processing.html</a>\n  </p>\n</div>\n","tokenization":"<h1 class=\"section\" id=\"Tokenization\">1.3 Tokenization</h1> <p>After the textual transformations are finished, the input file is converted into a sequence of preprocessing tokens. These mostly correspond to the syntactic tokens used by the C compiler, but there are a few differences. White space separates tokens; it is not itself a token of any kind. Tokens do not have to be separated by white space, but it is often necessary to avoid ambiguities. </p>\n<p>When faced with a sequence of characters that has more than one possible tokenization, the preprocessor is greedy. It always makes each token, starting from the left, as big as possible before moving on to the next token. For instance, <code>a+++++b</code> is interpreted as <code>a ++ ++ + b</code>, not as <code>a ++ + ++ b</code>, even though the latter tokenization could be part of a valid C program and the former could not. </p>\n<p>Once the input file is broken into tokens, the token boundaries never change, except when the ‘<code>##</code>’ preprocessing operator is used to paste tokens together. See <a href=\"concatenation#Concatenation\">Concatenation</a>. For example, </p>\n<pre class=\"smallexample\">#define foo() bar\nfoo()baz\n     ==&gt; bar baz\n<em>not</em>\n     ==&gt; barbaz</pre> <p>The compiler does not re-tokenize the preprocessor's output. Each preprocessing token becomes one compiler token. </p>\n<p>Preprocessing tokens fall into five broad classes: identifiers, preprocessing numbers, string literals, punctuators, and other. An identifier is the same as an identifier in C: any sequence of letters, digits, or underscores, which begins with a letter or underscore. Keywords of C have no significance to the preprocessor; they are ordinary identifiers. You can define a macro whose name is a keyword, for instance. The only identifier which can be considered a preprocessing keyword is <code>defined</code>. See <a href=\"defined#Defined\">Defined</a>. </p>\n<p>This is mostly true of other languages which use the C preprocessor. However, a few of the keywords of C++ are significant even in the preprocessor. See <a href=\"c_002b_002b-named-operators#C_002b_002b-Named-Operators\">C++ Named Operators</a>. </p>\n<p>In the 1999 C standard, identifiers may contain letters which are not part of the “basic source character set”, at the implementation's discretion (such as accented Latin letters, Greek letters, or Chinese ideograms). This may be done with an extended character set, or the ‘<code>\\u</code>’ and ‘<code>\\U</code>’ escape sequences. The implementation of this feature in GCC is experimental; such characters are only accepted in the ‘<code>\\u</code>’ and ‘<code>\\U</code>’ forms and only if <code>-fextended-identifiers</code> is used. </p>\n<p>As an extension, GCC treats ‘<code>$</code>’ as a letter. This is for compatibility with some systems, such as VMS, where ‘<code>$</code>’ is commonly used in system-defined function and object names. ‘<code>$</code>’ is not a letter in strictly conforming mode, or if you specify the <code>-$</code> option. See <a href=\"invocation#Invocation\">Invocation</a>. </p>\n<p>A preprocessing number has a rather bizarre definition. The category includes all the normal integer and floating point constants one expects of C, but also a number of other things one might not initially recognize as a number. Formally, preprocessing numbers begin with an optional period, a required decimal digit, and then continue with any sequence of letters, digits, underscores, periods, and exponents. Exponents are the two-character sequences ‘<code>e+</code>’, ‘<code>e-</code>’, ‘<code>E+</code>’, ‘<code>E-</code>’, ‘<code>p+</code>’, ‘<code>p-</code>’, ‘<code>P+</code>’, and ‘<code>P-</code>’. (The exponents that begin with ‘<code>p</code>’ or ‘<code>P</code>’ are new to C99. They are used for hexadecimal floating-point constants.) </p>\n<p>The purpose of this unusual definition is to isolate the preprocessor from the full complexity of numeric constants. It does not have to distinguish between lexically valid and invalid floating-point numbers, which is complicated. The definition also permits you to split an identifier at any position and get exactly two tokens, which can then be pasted back together with the ‘<code>##</code>’ operator. </p>\n<p>It's possible for preprocessing numbers to cause programs to be misinterpreted. For example, <code>0xE+12</code> is a preprocessing number which does not translate to any valid numeric constant, therefore a syntax error. It does not mean <code>0xE + 12</code>, which is what you might have intended. </p>\n<p> String literals are string constants, character constants, and header file names (the argument of ‘<code>#include</code>’).<a rel=\"footnote\" href=\"#fn-1\" name=\"fnd-1\" id=\"fnd-1\"><sup>1</sup></a> String constants and character constants are straightforward: <tt>\"<small class=\"dots\">...</small>\"</tt> or <tt>'<small class=\"dots\">...</small>'</tt>. In either case embedded quotes should be escaped with a backslash: <tt>'\\''</tt> is the character constant for ‘<code>'</code>’. There is no limit on the length of a character constant, but the value of a character constant that contains more than one character is implementation-defined. See <a href=\"implementation-details#Implementation-Details\">Implementation Details</a>. </p>\n<p>Header file names either look like string constants, <tt>\"<small class=\"dots\">...</small>\"</tt>, or are written with angle brackets instead, <tt>&lt;<small class=\"dots\">...</small>&gt;</tt>. In either case, backslash is an ordinary character. There is no way to escape the closing quote or angle bracket. The preprocessor looks for the header file in different places depending on which form you use. See <a href=\"include-operation#Include-Operation\">Include Operation</a>. </p>\n<p>No string literal may extend past the end of a line. Older versions of GCC accepted multi-line string constants. You may use continued lines instead, or string constant concatenation. See <a href=\"differences-from-previous-versions#Differences-from-previous-versions\">Differences from previous versions</a>. </p>\n<p>Punctuators are all the usual bits of punctuation which are meaningful to C and C++. All but three of the punctuation characters in ASCII are C punctuators. The exceptions are ‘<code>@</code>’, ‘<code>$</code>’, and ‘<code>`</code>’. In addition, all the two- and three-character operators are punctuators. There are also six digraphs, which the C++ standard calls alternative tokens, which are merely alternate ways to spell other punctuators. This is a second attempt to work around missing punctuation in obsolete systems. It has no negative side effects, unlike trigraphs, but does not cover as much ground. The digraphs and their corresponding normal punctuators are: </p>\n<pre class=\"smallexample\">Digraph:        &lt;%  %&gt;  &lt;:  :&gt;  %:  %:%:\nPunctuator:      {   }   [   ]   #    ##</pre> <p>Any other single character is considered “other”. It is passed on to the preprocessor's output unmolested. The C compiler will almost certainly reject source code containing “other” tokens. In ASCII, the only other characters are ‘<code>@</code>’, ‘<code>$</code>’, ‘<code>`</code>’, and control characters other than NUL (all bits zero). (Note that ‘<code>$</code>’ is normally considered a letter.) All characters with the high bit set (numeric range 0x7F–0xFF) are also “other” in the present implementation. This will change when proper support for international character sets is added to GCC. </p>\n<p>NUL is a special case because of the high probability that its appearance is accidental, and because it may be invisible to the user (many terminals do not display NUL at all). Within comments, NULs are silently ignored, just as any other character would be. In running text, NUL is considered white space. For example, these two directives have the same meaning. </p>\n<pre class=\"smallexample\">#define X^@1\n#define X 1</pre> <p class=\"noindent\">(where ‘<code>^@</code>’ is ASCII NUL). Within string or character constants, NULs are preserved. In the latter two cases the preprocessor emits a warning message. </p>\n<div class=\"footnote\">  <h2>Footnotes</h2>\n<p class=\"footnote\"><small>[<a name=\"fn-1\" href=\"#fnd-1\" id=\"fn-1\">1</a>]</small> The C standard uses the term string literal to refer only to what we are calling string constants.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Tokenization.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Tokenization.html</a>\n  </p>\n</div>\n","the-preprocessing-language":"<h1 class=\"section\" id=\"The-preprocessing-language\">1.4 The preprocessing language</h1> <p> After tokenization, the stream of tokens may simply be passed straight to the compiler's parser. However, if it contains any operations in the preprocessing language, it will be transformed first. This stage corresponds roughly to the standard's “translation phase 4” and is what most people think of as the preprocessor's job. </p>\n<p>The preprocessing language consists of directives to be executed and macros to be expanded. Its primary capabilities are: </p>\n<ul> <li>Inclusion of header files. These are files of declarations that can be substituted into your program. </li>\n<li>Macro expansion. You can define macros, which are abbreviations for arbitrary fragments of C code. The preprocessor will replace the macros with their definitions throughout the program. Some macros are automatically defined for you. </li>\n<li>Conditional compilation. You can include or exclude parts of the program according to various conditions. </li>\n<li>Line control. If you use a program to combine or rearrange source files into an intermediate file which is then compiled, you can use line control to inform the compiler where each source line originally came from. </li>\n<li>Diagnostics. You can detect problems at compile time and issue errors or warnings. </li>\n</ul> <p>There are a few more, less useful, features. </p>\n<p>Except for expansion of predefined macros, all these operations are triggered with preprocessing directives. Preprocessing directives are lines in your program that start with ‘<code>#</code>’. Whitespace is allowed before and after the ‘<code>#</code>’. The ‘<code>#</code>’ is followed by an identifier, the directive name. It specifies the operation to perform. Directives are commonly referred to as ‘<samp><span class=\"samp\">#</span><var>name</var></samp>’ where <var>name</var> is the directive name. For example, ‘<code>#define</code>’ is the directive that defines a macro. </p>\n<p>The ‘<code>#</code>’ which begins a directive cannot come from a macro expansion. Also, the directive name is not macro expanded. Thus, if <code>foo</code> is defined as a macro expanding to <code>define</code>, that does not make ‘<code>#foo</code>’ a valid preprocessing directive. </p>\n<p>The set of valid directive names is fixed. Programs cannot define new preprocessing directives. </p>\n<p>Some directives require arguments; these make up the rest of the directive line and must be separated from the directive name by whitespace. For example, ‘<code>#define</code>’ must be followed by a macro name and the intended expansion of the macro. </p>\n<p>A preprocessing directive cannot cover more than one line. The line may, however, be continued with backslash-newline, or by a block comment which extends past the end of the line. In either case, when the directive is processed, the continuations have already been merged with the first line to make one long line. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/The-preprocessing-language.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/The-preprocessing-language.html</a>\n  </p>\n</div>\n","header-files":"<h1 class=\"chapter\" id=\"Header-Files\">2 Header Files</h1> <p>A header file is a file containing C declarations and macro definitions (see <a href=\"macros#Macros\">Macros</a>) to be shared between several source files. You request the use of a header file in your program by including it, with the C preprocessing directive ‘<code>#include</code>’. </p>\n<p>Header files serve two purposes. </p>\n<ul> <li>\nSystem header files declare the interfaces to parts of the operating system. You include them in your program to supply the definitions and declarations you need to invoke system calls and libraries. </li>\n<li>Your own header files contain declarations for interfaces between the source files of your program. Each time you have a group of related declarations and macro definitions all or most of which are needed in several different source files, it is a good idea to create a header file for them. </li>\n</ul> <p>Including a header file produces the same results as copying the header file into each source file that needs it. Such copying would be time-consuming and error-prone. With a header file, the related declarations appear in only one place. If they need to be changed, they can be changed in one place, and programs that include the header file will automatically use the new version when next recompiled. The header file eliminates the labor of finding and changing all the copies as well as the risk that a failure to find one copy will result in inconsistencies within a program. </p>\n<p>In C, the usual convention is to give header files names that end with <code>.h</code>. It is most portable to use only letters, digits, dashes, and underscores in header file names, and at most one dot. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"include-syntax#Include-Syntax\">Include Syntax</a> </li>\n<li>\n<a accesskey=\"2\" href=\"include-operation#Include-Operation\">Include Operation</a> </li>\n<li>\n<a accesskey=\"3\" href=\"search-path#Search-Path\">Search Path</a> </li>\n<li>\n<a accesskey=\"4\" href=\"once_002donly-headers#Once_002dOnly-Headers\">Once-Only Headers</a> </li>\n<li>\n<a accesskey=\"5\" href=\"alternatives-to-wrapper-_0023ifndef#Alternatives-to-Wrapper-_0023ifndef\">Alternatives to Wrapper #ifndef</a> </li>\n<li>\n<a accesskey=\"6\" href=\"computed-includes#Computed-Includes\">Computed Includes</a> </li>\n<li>\n<a accesskey=\"7\" href=\"wrapper-headers#Wrapper-Headers\">Wrapper Headers</a> </li>\n<li>\n<a accesskey=\"8\" href=\"system-headers#System-Headers\">System Headers</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Header-Files.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Header-Files.html</a>\n  </p>\n</div>\n","include-syntax":"<h1 class=\"section\" id=\"Include-Syntax\">2.1 Include Syntax</h1> <p>Both user and system header files are included using the preprocessing directive ‘<code>#include</code>’. It has two variants: </p>\n<dl> <dt>\n<code>#include &lt;</code><var>file</var><code>&gt;</code>\n</dt>\n<dd>This variant is used for system header files. It searches for a file named <var>file</var> in a standard list of system directories. You can prepend directories to this list with the <code>-I</code> option (see <a href=\"invocation#Invocation\">Invocation</a>). </dd>\n<dt>\n<code>#include \"</code><var>file</var><code>\"</code>\n</dt>\n<dd>This variant is used for header files of your own program. It searches for a file named <var>file</var> first in the directory containing the current file, then in the quote directories and then the same directories used for <code>&lt;</code><var>file</var><code>&gt;</code>. You can prepend directories to the list of quote directories with the <code>-iquote</code> option. </dd>\n</dl> <p>The argument of ‘<code>#include</code>’, whether delimited with quote marks or angle brackets, behaves like a string constant in that comments are not recognized, and macro names are not expanded. Thus, <code>#include &lt;x/*y&gt;</code> specifies inclusion of a system header file named <code>x/*y</code>. </p>\n<p>However, if backslashes occur within <var>file</var>, they are considered ordinary text characters, not escape characters. None of the character escape sequences appropriate to string constants in C are processed. Thus, <code>#include \"x\\n\\\\y\"</code> specifies a filename containing three backslashes. (Some systems interpret ‘<code>\\</code>’ as a pathname separator. All of these also interpret ‘<code>/</code>’ the same way. It is most portable to use only ‘<code>/</code>’.) </p>\n<p>It is an error if there is anything (other than comments) on the line after the file name. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Include-Syntax.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Include-Syntax.html</a>\n  </p>\n</div>\n","include-operation":"<h1 class=\"section\" id=\"Include-Operation\">2.2 Include Operation</h1> <p>The ‘<code>#include</code>’ directive works by directing the C preprocessor to scan the specified file as input before continuing with the rest of the current file. The output from the preprocessor contains the output already generated, followed by the output resulting from the included file, followed by the output that comes from the text after the ‘<code>#include</code>’ directive. For example, if you have a header file <code>header.h</code> as follows, </p>\n<pre class=\"smallexample\">char *test (void);</pre> <p class=\"noindent\">and a main program called <code>program.c</code> that uses the header file, like this, </p>\n<pre class=\"smallexample\">int x;\n#include \"header.h\"\n\nint\nmain (void)\n{\n  puts (test ());\n}</pre> <p class=\"noindent\">the compiler will see the same token stream as it would if <code>program.c</code> read </p>\n<pre class=\"smallexample\">int x;\nchar *test (void);\n\nint\nmain (void)\n{\n  puts (test ());\n}</pre> <p>Included files are not limited to declarations and macro definitions; those are merely the typical uses. Any fragment of a C program can be included from another file. The include file could even contain the beginning of a statement that is concluded in the containing file, or the end of a statement that was started in the including file. However, an included file must consist of complete tokens. Comments and string literals which have not been closed by the end of an included file are invalid. For error recovery, they are considered to end at the end of the file. </p>\n<p>To avoid confusion, it is best if header files contain only complete syntactic units—function declarations or definitions, type declarations, etc. </p>\n<p>The line following the ‘<code>#include</code>’ directive is always treated as a separate line by the C preprocessor, even if the included file lacks a final newline. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Include-Operation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Include-Operation.html</a>\n  </p>\n</div>\n","search-path":"<h1 class=\"section\" id=\"Search-Path\">2.3 Search Path</h1> <p>GCC looks in several different places for headers. On a normal Unix system, if you do not instruct it otherwise, it will look for headers requested with <code>#include &lt;</code><var>file</var><code>&gt;</code> in: </p>\n<pre class=\"smallexample\">/usr/local/include\n<var>libdir</var>/gcc/<var>target</var>/<var>version</var>/include\n/usr/<var>target</var>/include\n/usr/include</pre> <p>For C++ programs, it will also look in <samp><var>libdir</var><span class=\"file\">/../include/c++/</span><var>version</var></samp>, first. In the above, <var>target</var> is the canonical name of the system GCC was configured to compile code for; often but not always the same as the canonical name of the system it runs on. <var>version</var> is the version of GCC in use. </p>\n<p>You can add to this list with the <samp><span class=\"option\">-I</span><var>dir</var></samp> command line option. All the directories named by <code>-I</code> are searched, in left-to-right order, <em>before</em> the default directories. The only exception is when <code>dir</code> is already searched by default. In this case, the option is ignored and the search order for system directories remains unchanged. </p>\n<p>Duplicate directories are removed from the quote and bracket search chains before the two chains are merged to make the final search chain. Thus, it is possible for a directory to occur twice in the final search chain if it was specified in both the quote and bracket chains. </p>\n<p>You can prevent GCC from searching any of the default directories with the <code>-nostdinc</code> option. This is useful when you are compiling an operating system kernel or some other program that does not use the standard C library facilities, or the standard C library itself. <code>-I</code> options are not ignored as described above when <code>-nostdinc</code> is in effect. </p>\n<p>GCC looks for headers requested with <code>#include \"</code><var>file</var><code>\"</code> first in the directory containing the current file, then in the directories as specified by <code>-iquote</code> options, then in the same places it would have looked for a header requested with angle brackets. For example, if <code>/usr/include/sys/stat.h</code> contains <code>#include \"types.h\"</code>, GCC looks for <code>types.h</code> first in <code>/usr/include/sys</code>, then in its usual search path. </p>\n<p>‘<code>#line</code>’ (see <a href=\"line-control#Line-Control\">Line Control</a>) does not change GCC's idea of the directory containing the current file. </p>\n<p>You may put <code>-I-</code> at any point in your list of <code>-I</code> options. This has two effects. First, directories appearing before the <code>-I-</code> in the list are searched only for headers requested with quote marks. Directories after <code>-I-</code> are searched for all headers. Second, the directory containing the current file is not searched for anything, unless it happens to be one of the directories named by an <code>-I</code> switch. <code>-I-</code> is deprecated, <code>-iquote</code> should be used instead. </p>\n<p><code>-I. -I-</code> is not the same as no <code>-I</code> options at all, and does not cause the same behavior for ‘<code>&lt;&gt;</code>’ includes that ‘<code>\"\"</code>’ includes get with no special options. <code>-I.</code> searches the compiler's current working directory for header files. That may or may not be the same as the directory containing the current file. </p>\n<p>If you need to look for headers in a directory named <code>-</code>, write <code>-I./-</code>. </p>\n<p>There are several more ways to adjust the header search path. They are generally less useful. See <a href=\"invocation#Invocation\">Invocation</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Search-Path.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Search-Path.html</a>\n  </p>\n</div>\n","once_002donly-headers":"<h1 class=\"section\" id=\"Once_002dOnly-Headers\">2.4 Once-Only Headers</h1> <p> If a header file happens to be included twice, the compiler will process its contents twice. This is very likely to cause an error, e.g. when the compiler sees the same structure definition twice. Even if it does not, it will certainly waste time. </p>\n<p>The standard way to prevent this is to enclose the entire real contents of the file in a conditional, like this: </p>\n<pre class=\"smallexample\">/* File foo.  */\n#ifndef FILE_FOO_SEEN\n#define FILE_FOO_SEEN\n\n<var>the entire file</var>\n\n#endif /* !FILE_FOO_SEEN */</pre> <p>This construct is commonly known as a wrapper #ifndef. When the header is included again, the conditional will be false, because <code>FILE_FOO_SEEN</code> is defined. The preprocessor will skip over the entire contents of the file, and the compiler will not see it twice. </p>\n<p>CPP optimizes even further. It remembers when a header file has a wrapper ‘<code>#ifndef</code>’. If a subsequent ‘<code>#include</code>’ specifies that header, and the macro in the ‘<code>#ifndef</code>’ is still defined, it does not bother to rescan the file at all. </p>\n<p>You can put comments outside the wrapper. They will not interfere with this optimization. </p>\n<p>The macro <code>FILE_FOO_SEEN</code> is called the controlling macro or guard macro. In a user header file, the macro name should not begin with ‘<code>_</code>’. In a system header file, it should begin with ‘<code>__</code>’ to avoid conflicts with user programs. In any kind of header file, the macro name should contain the name of the file and some additional text, to avoid conflicts with other header files. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Once_002dOnly-Headers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Once_002dOnly-Headers.html</a>\n  </p>\n</div>\n","alternatives-to-wrapper-_0023ifndef":"<h1 class=\"section\" id=\"Alternatives-to-Wrapper-_0023ifndef\">2.5 Alternatives to Wrapper #ifndef</h1> <p>CPP supports two more ways of indicating that a header file should be read only once. Neither one is as portable as a wrapper ‘<code>#ifndef</code>’ and we recommend you do not use them in new programs, with the caveat that ‘<code>#import</code>’ is standard practice in Objective-C. </p>\n<p>CPP supports a variant of ‘<code>#include</code>’ called ‘<code>#import</code>’ which includes a file, but does so at most once. If you use ‘<code>#import</code>’ instead of ‘<code>#include</code>’, then you don't need the conditionals inside the header file to prevent multiple inclusion of the contents. ‘<code>#import</code>’ is standard in Objective-C, but is considered a deprecated extension in C and C++. </p>\n<p>‘<code>#import</code>’ is not a well designed feature. It requires the users of a header file to know that it should only be included once. It is much better for the header file's implementor to write the file so that users don't need to know this. Using a wrapper ‘<code>#ifndef</code>’ accomplishes this goal. </p>\n<p>In the present implementation, a single use of ‘<code>#import</code>’ will prevent the file from ever being read again, by either ‘<code>#import</code>’ or ‘<code>#include</code>’. You should not rely on this; do not use both ‘<code>#import</code>’ and ‘<code>#include</code>’ to refer to the same header file. </p>\n<p>Another way to prevent a header file from being included more than once is with the ‘<code>#pragma once</code>’ directive. If ‘<code>#pragma once</code>’ is seen when scanning a header file, that file will never be read again, no matter what. </p>\n<p>‘<code>#pragma once</code>’ does not have the problems that ‘<code>#import</code>’ does, but it is not recognized by all preprocessors, so you cannot rely on it in a portable program. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Alternatives-to-Wrapper-_0023ifndef.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Alternatives-to-Wrapper-_0023ifndef.html</a>\n  </p>\n</div>\n","computed-includes":"<h1 class=\"section\" id=\"Computed-Includes\">2.6 Computed Includes</h1> <p> Sometimes it is necessary to select one of several different header files to be included into your program. They might specify configuration parameters to be used on different sorts of operating systems, for instance. You could do this with a series of conditionals, </p>\n<pre class=\"smallexample\">#if SYSTEM_1\n# include \"system_1.h\"\n#elif SYSTEM_2\n# include \"system_2.h\"\n#elif SYSTEM_3\n...\n#endif</pre> <p>That rapidly becomes tedious. Instead, the preprocessor offers the ability to use a macro for the header name. This is called a computed include. Instead of writing a header name as the direct argument of ‘<code>#include</code>’, you simply put a macro name there instead: </p>\n<pre class=\"smallexample\">#define SYSTEM_H \"system_1.h\"\n...\n#include SYSTEM_H</pre> <p class=\"noindent\"><code>SYSTEM_H</code> will be expanded, and the preprocessor will look for <code>system_1.h</code> as if the ‘<code>#include</code>’ had been written that way originally. <code>SYSTEM_H</code> could be defined by your Makefile with a <code>-D</code> option. </p>\n<p>You must be careful when you define the macro. ‘<code>#define</code>’ saves tokens, not text. The preprocessor has no way of knowing that the macro will be used as the argument of ‘<code>#include</code>’, so it generates ordinary tokens, not a header name. This is unlikely to cause problems if you use double-quote includes, which are close enough to string constants. If you use angle brackets, however, you may have trouble. </p>\n<p>The syntax of a computed include is actually a bit more general than the above. If the first non-whitespace character after ‘<code>#include</code>’ is not ‘<code>\"</code>’ or ‘<code>&lt;</code>’, then the entire line is macro-expanded like running text would be. </p>\n<p>If the line expands to a single string constant, the contents of that string constant are the file to be included. CPP does not re-examine the string for embedded quotes, but neither does it process backslash escapes in the string. Therefore </p>\n<pre class=\"smallexample\">#define HEADER \"a\\\"b\"\n#include HEADER</pre> <p class=\"noindent\">looks for a file named <code>a\\\"b</code>. CPP searches for the file according to the rules for double-quoted includes. </p>\n<p>If the line expands to a token stream beginning with a ‘<code>&lt;</code>’ token and including a ‘<code>&gt;</code>’ token, then the tokens between the ‘<code>&lt;</code>’ and the first ‘<code>&gt;</code>’ are combined to form the filename to be included. Any whitespace between tokens is reduced to a single space; then any space after the initial ‘<code>&lt;</code>’ is retained, but a trailing space before the closing ‘<code>&gt;</code>’ is ignored. CPP searches for the file according to the rules for angle-bracket includes. </p>\n<p>In either case, if there are any tokens on the line after the file name, an error occurs and the directive is not processed. It is also an error if the result of expansion does not match either of the two expected forms. </p>\n<p>These rules are implementation-defined behavior according to the C standard. To minimize the risk of different compilers interpreting your computed includes differently, we recommend you use only a single object-like macro which expands to a string constant. This will also minimize confusion for people reading your program. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Computed-Includes.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Computed-Includes.html</a>\n  </p>\n</div>\n","wrapper-headers":"<h1 class=\"section\" id=\"Wrapper-Headers\">2.7 Wrapper Headers</h1> <p> Sometimes it is necessary to adjust the contents of a system-provided header file without editing it directly. GCC's <code>fixincludes</code> operation does this, for example. One way to do that would be to create a new header file with the same name and insert it in the search path before the original header. That works fine as long as you're willing to replace the old header entirely. But what if you want to refer to the old header from the new one? </p>\n<p>You cannot simply include the old header with ‘<code>#include</code>’. That will start from the beginning, and find your new header again. If your header is not protected from multiple inclusion (see <a href=\"once_002donly-headers#Once_002dOnly-Headers\">Once-Only Headers</a>), it will recurse infinitely and cause a fatal error. </p>\n<p>You could include the old header with an absolute pathname: </p>\n<pre class=\"smallexample\">#include \"/usr/include/old-header.h\"</pre> <p class=\"noindent\">This works, but is not clean; should the system headers ever move, you would have to edit the new headers to match. </p>\n<p>There is no way to solve this problem within the C standard, but you can use the GNU extension ‘<code>#include_next</code>’. It means, “Include the <em>next</em> file with this name”. This directive works like ‘<code>#include</code>’ except in searching for the specified file: it starts searching the list of header file directories <em>after</em> the directory in which the current file was found. </p>\n<p>Suppose you specify <code>-I /usr/local/include</code>, and the list of directories to search also includes <code>/usr/include</code>; and suppose both directories contain <code>signal.h</code>. Ordinary <code>#include &lt;signal.h&gt;</code> finds the file under <code>/usr/local/include</code>. If that file contains <code>#include_next &lt;signal.h&gt;</code>, it starts searching after that directory, and finds the file in <code>/usr/include</code>. </p>\n<p>‘<code>#include_next</code>’ does not distinguish between <code>&lt;</code><var>file</var><code>&gt;</code> and <code>\"</code><var>file</var><code>\"</code> inclusion, nor does it check that the file you specify has the same name as the current file. It simply looks for the file named, starting with the directory in the search path after the one where the current file was found. </p>\n<p>The use of ‘<code>#include_next</code>’ can lead to great confusion. We recommend it be used only when there is no other alternative. In particular, it should not be used in the headers belonging to a specific program; it should be used only to make global corrections along the lines of <code>fixincludes</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Wrapper-Headers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Wrapper-Headers.html</a>\n  </p>\n</div>\n","system-headers":"<h1 class=\"section\" id=\"System-Headers\">2.8 System Headers</h1> <p> The header files declaring interfaces to the operating system and runtime libraries often cannot be written in strictly conforming C. Therefore, GCC gives code found in system headers special treatment. All warnings, other than those generated by ‘<code>#warning</code>’ (see <a href=\"diagnostics#Diagnostics\">Diagnostics</a>), are suppressed while GCC is processing a system header. Macros defined in a system header are immune to a few warnings wherever they are expanded. This immunity is granted on an ad-hoc basis, when we find that a warning generates lots of false positives because of code in macros defined in system headers. </p>\n<p>Normally, only the headers found in specific directories are considered system headers. These directories are determined when GCC is compiled. There are, however, two ways to make normal headers into system headers. </p>\n<p>The <code>-isystem</code> command line option adds its argument to the list of directories to search for headers, just like <code>-I</code>. Any headers found in that directory will be considered system headers. </p>\n<p>All directories named by <code>-isystem</code> are searched <em>after</em> all directories named by <code>-I</code>, no matter what their order was on the command line. If the same directory is named by both <code>-I</code> and <code>-isystem</code>, the <code>-I</code> option is ignored. GCC provides an informative message when this occurs if <code>-v</code> is used. </p>\n<p>There is also a directive, <code>#pragma GCC system_header</code>, which tells GCC to consider the rest of the current include file a system header, no matter where it was found. Code that comes before the ‘<code>#pragma</code>’ in the file will not be affected. <code>#pragma GCC system_header</code> has no effect in the primary source file. </p>\n<p>On very old systems, some of the pre-defined system header directories get even more special treatment. GNU C++ considers code in headers found in those directories to be surrounded by an <code>extern \"C\"</code> block. There is no way to request this behavior with a ‘<code>#pragma</code>’, or from the command line. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/System-Headers.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/System-Headers.html</a>\n  </p>\n</div>\n","macros":"<h1 class=\"chapter\" id=\"Macros\">3 Macros</h1> <p>A macro is a fragment of code which has been given a name. Whenever the name is used, it is replaced by the contents of the macro. There are two kinds of macros. They differ mostly in what they look like when they are used. Object-like macros resemble data objects when used, function-like macros resemble function calls. </p>\n<p>You may define any valid identifier as a macro, even if it is a C keyword. The preprocessor does not know anything about keywords. This can be useful if you wish to hide a keyword such as <code>const</code> from an older compiler that does not understand it. However, the preprocessor operator <code>defined</code> (see <a href=\"defined#Defined\">Defined</a>) can never be defined as a macro, and C++'s named operators (see <a href=\"c_002b_002b-named-operators#C_002b_002b-Named-Operators\">C++ Named Operators</a>) cannot be macros when you are compiling C++. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"object_002dlike-macros#Object_002dlike-Macros\">Object-like Macros</a> </li>\n<li>\n<a accesskey=\"2\" href=\"function_002dlike-macros#Function_002dlike-Macros\">Function-like Macros</a> </li>\n<li>\n<a accesskey=\"3\" href=\"macro-arguments#Macro-Arguments\">Macro Arguments</a> </li>\n<li>\n<a accesskey=\"4\" href=\"stringification#Stringification\">Stringification</a> </li>\n<li>\n<a accesskey=\"5\" href=\"concatenation#Concatenation\">Concatenation</a> </li>\n<li>\n<a accesskey=\"6\" href=\"variadic-macros#Variadic-Macros\">Variadic Macros</a> </li>\n<li>\n<a accesskey=\"7\" href=\"predefined-macros#Predefined-Macros\">Predefined Macros</a> </li>\n<li>\n<a accesskey=\"8\" href=\"undefining-and-redefining-macros#Undefining-and-Redefining-Macros\">Undefining and Redefining Macros</a> </li>\n<li>\n<a accesskey=\"9\" href=\"directives-within-macro-arguments#Directives-Within-Macro-Arguments\">Directives Within Macro Arguments</a> </li>\n<li>\n<a href=\"macro-pitfalls#Macro-Pitfalls\">Macro Pitfalls</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macros.html</a>\n  </p>\n</div>\n","object_002dlike-macros":"<h1 class=\"section\" id=\"Object_002dlike-Macros\">3.1 Object-like Macros</h1> <p> An object-like macro is a simple identifier which will be replaced by a code fragment. It is called object-like because it looks like a data object in code that uses it. They are most commonly used to give symbolic names to numeric constants. </p>\n<p>You create macros with the ‘<code>#define</code>’ directive. ‘<code>#define</code>’ is followed by the name of the macro and then the token sequence it should be an abbreviation for, which is variously referred to as the macro's body, expansion or replacement list. For example, </p>\n<pre class=\"smallexample\">#define BUFFER_SIZE 1024</pre> <p class=\"noindent\">defines a macro named <code>BUFFER_SIZE</code> as an abbreviation for the token <code>1024</code>. If somewhere after this ‘<code>#define</code>’ directive there comes a C statement of the form </p>\n<pre class=\"smallexample\">foo = (char *) malloc (BUFFER_SIZE);</pre> <p class=\"noindent\">then the C preprocessor will recognize and expand the macro <code>BUFFER_SIZE</code>. The C compiler will see the same tokens as it would if you had written </p>\n<pre class=\"smallexample\">foo = (char *) malloc (1024);</pre> <p>By convention, macro names are written in uppercase. Programs are easier to read when it is possible to tell at a glance which names are macros. </p>\n<p>The macro's body ends at the end of the ‘<code>#define</code>’ line. You may continue the definition onto multiple lines, if necessary, using backslash-newline. When the macro is expanded, however, it will all come out on one line. For example, </p>\n<pre class=\"smallexample\">#define NUMBERS 1, \\\n                2, \\\n                3\nint x[] = { NUMBERS };\n     ==&gt; int x[] = { 1, 2, 3 };</pre> <p class=\"noindent\">The most common visible consequence of this is surprising line numbers in error messages. </p>\n<p>There is no restriction on what can go in a macro body provided it decomposes into valid preprocessing tokens. Parentheses need not balance, and the body need not resemble valid C code. (If it does not, you may get error messages from the C compiler when you use the macro.) </p>\n<p>The C preprocessor scans your program sequentially. Macro definitions take effect at the place you write them. Therefore, the following input to the C preprocessor </p>\n<pre class=\"smallexample\">foo = X;\n#define X 4\nbar = X;</pre> <p class=\"noindent\">produces </p>\n<pre class=\"smallexample\">foo = X;\nbar = 4;</pre> <p>When the preprocessor expands a macro name, the macro's expansion replaces the macro invocation, then the expansion is examined for more macros to expand. For example, </p>\n<pre class=\"smallexample\">#define TABLESIZE BUFSIZE\n#define BUFSIZE 1024\nTABLESIZE\n     ==&gt; BUFSIZE\n     ==&gt; 1024</pre> <p class=\"noindent\"><code>TABLESIZE</code> is expanded first to produce <code>BUFSIZE</code>, then that macro is expanded to produce the final result, <code>1024</code>. </p>\n<p>Notice that <code>BUFSIZE</code> was not defined when <code>TABLESIZE</code> was defined. The ‘<code>#define</code>’ for <code>TABLESIZE</code> uses exactly the expansion you specify—in this case, <code>BUFSIZE</code>—and does not check to see whether it too contains macro names. Only when you <em>use</em> <code>TABLESIZE</code> is the result of its expansion scanned for more macro names. </p>\n<p>This makes a difference if you change the definition of <code>BUFSIZE</code> at some point in the source file. <code>TABLESIZE</code>, defined as shown, will always expand using the definition of <code>BUFSIZE</code> that is currently in effect: </p>\n<pre class=\"smallexample\">#define BUFSIZE 1020\n#define TABLESIZE BUFSIZE\n#undef BUFSIZE\n#define BUFSIZE 37</pre> <p class=\"noindent\">Now <code>TABLESIZE</code> expands (in two stages) to <code>37</code>. </p>\n<p>If the expansion of a macro contains its own name, either directly or via intermediate macros, it is not expanded again when the expansion is examined for more macros. This prevents infinite recursion. See <a href=\"self_002dreferential-macros#Self_002dReferential-Macros\">Self-Referential Macros</a>, for the precise details. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Object_002dlike-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Object_002dlike-Macros.html</a>\n  </p>\n</div>\n","function_002dlike-macros":"<h1 class=\"section\" id=\"Function_002dlike-Macros\">3.2 Function-like Macros</h1> <p> You can also define macros whose use looks like a function call. These are called function-like macros. To define a function-like macro, you use the same ‘<code>#define</code>’ directive, but you put a pair of parentheses immediately after the macro name. For example, </p>\n<pre class=\"smallexample\">#define lang_init()  c_init()\nlang_init()\n     ==&gt; c_init()</pre> <p>A function-like macro is only expanded if its name appears with a pair of parentheses after it. If you write just the name, it is left alone. This can be useful when you have a function and a macro of the same name, and you wish to use the function sometimes. </p>\n<pre class=\"smallexample\">extern void foo(void);\n#define foo() /* <span class=\"roman\">optimized inline version</span> */\n...\n  foo();\n  funcptr = foo;</pre> <p>Here the call to <code>foo()</code> will use the macro, but the function pointer will get the address of the real function. If the macro were to be expanded, it would cause a syntax error. </p>\n<p>If you put spaces between the macro name and the parentheses in the macro definition, that does not define a function-like macro, it defines an object-like macro whose expansion happens to begin with a pair of parentheses. </p>\n<pre class=\"smallexample\">#define lang_init ()    c_init()\nlang_init()\n     ==&gt; () c_init()()</pre> <p>The first two pairs of parentheses in this expansion come from the macro. The third is the pair that was originally after the macro invocation. Since <code>lang_init</code> is an object-like macro, it does not consume those parentheses. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Function_002dlike-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Function_002dlike-Macros.html</a>\n  </p>\n</div>\n","macro-arguments":"<h1 class=\"section\" id=\"Macro-Arguments\">3.3 Macro Arguments</h1> <p> Function-like macros can take arguments, just like true functions. To define a macro that uses arguments, you insert parameters between the pair of parentheses in the macro definition that make the macro function-like. The parameters must be valid C identifiers, separated by commas and optionally whitespace. </p>\n<p>To invoke a macro that takes arguments, you write the name of the macro followed by a list of actual arguments in parentheses, separated by commas. The invocation of the macro need not be restricted to a single logical line—it can cross as many lines in the source file as you wish. The number of arguments you give must match the number of parameters in the macro definition. When the macro is expanded, each use of a parameter in its body is replaced by the tokens of the corresponding argument. (You need not use all of the parameters in the macro body.) </p>\n<p>As an example, here is a macro that computes the minimum of two numeric values, as it is defined in many C programs, and some uses. </p>\n<pre class=\"smallexample\">#define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))\n  x = min(a, b);          ==&gt;  x = ((a) &lt; (b) ? (a) : (b));\n  y = min(1, 2);          ==&gt;  y = ((1) &lt; (2) ? (1) : (2));\n  z = min(a + 28, *p);    ==&gt;  z = ((a + 28) &lt; (*p) ? (a + 28) : (*p));</pre> <p class=\"noindent\">(In this small example you can already see several of the dangers of macro arguments. See <a href=\"macro-pitfalls#Macro-Pitfalls\">Macro Pitfalls</a>, for detailed explanations.) </p>\n<p>Leading and trailing whitespace in each argument is dropped, and all whitespace between the tokens of an argument is reduced to a single space. Parentheses within each argument must balance; a comma within such parentheses does not end the argument. However, there is no requirement for square brackets or braces to balance, and they do not prevent a comma from separating arguments. Thus, </p>\n<pre class=\"smallexample\">macro (array[x = y, x + 1])</pre> <p class=\"noindent\">passes two arguments to <code>macro</code>: <code>array[x = y</code> and <code>x +\n1]</code>. If you want to supply <code>array[x = y, x + 1]</code> as an argument, you can write it as <code>array[(x = y, x + 1)]</code>, which is equivalent C code. </p>\n<p>All arguments to a macro are completely macro-expanded before they are substituted into the macro body. After substitution, the complete text is scanned again for macros to expand, including the arguments. This rule may seem strange, but it is carefully designed so you need not worry about whether any function call is actually a macro invocation. You can run into trouble if you try to be too clever, though. See <a href=\"argument-prescan#Argument-Prescan\">Argument Prescan</a>, for detailed discussion. </p>\n<p>For example, <code>min (min (a, b), c)</code> is first expanded to </p>\n<pre class=\"smallexample\">min (((a) &lt; (b) ? (a) : (b)), (c))</pre> <p class=\"noindent\">and then to </p>\n<pre class=\"smallexample\">((((a) &lt; (b) ? (a) : (b))) &lt; (c)\n ? (((a) &lt; (b) ? (a) : (b)))\n : (c))</pre> <p class=\"noindent\">(Line breaks shown here for clarity would not actually be generated.) </p>\n<p>You can leave macro arguments empty; this is not an error to the preprocessor (but many macros will then expand to invalid code). You cannot leave out arguments entirely; if a macro takes two arguments, there must be exactly one comma at the top level of its argument list. Here are some silly examples using <code>min</code>: </p>\n<pre class=\"smallexample\">min(, b)        ==&gt; ((   ) &lt; (b) ? (   ) : (b))\nmin(a, )        ==&gt; ((a  ) &lt; ( ) ? (a  ) : ( ))\nmin(,)          ==&gt; ((   ) &lt; ( ) ? (   ) : ( ))\nmin((,),)       ==&gt; (((,)) &lt; ( ) ? ((,)) : ( ))\n\nmin()      error--&gt; macro \"min\" requires 2 arguments, but only 1 given\nmin(,,)    error--&gt; macro \"min\" passed 3 arguments, but takes just 2</pre> <p>Whitespace is not a preprocessing token, so if a macro <code>foo</code> takes one argument, <code>foo ()</code> and <code>foo ( )</code> both supply it an empty argument. Previous GNU preprocessor implementations and documentation were incorrect on this point, insisting that a function-like macro that takes a single argument be passed a space if an empty argument was required. </p>\n<p>Macro parameters appearing inside string literals are not replaced by their corresponding actual arguments. </p>\n<pre class=\"smallexample\">#define foo(x) x, \"x\"\nfoo(bar)        ==&gt; bar, \"x\"</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macro-Arguments.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macro-Arguments.html</a>\n  </p>\n</div>\n","stringification":"<h1 class=\"section\" id=\"Stringification\">3.4 Stringification</h1> <p> Sometimes you may want to convert a macro argument into a string constant. Parameters are not replaced inside string constants, but you can use the ‘<code>#</code>’ preprocessing operator instead. When a macro parameter is used with a leading ‘<code>#</code>’, the preprocessor replaces it with the literal text of the actual argument, converted to a string constant. Unlike normal parameter replacement, the argument is not macro-expanded first. This is called stringification. </p>\n<p>There is no way to combine an argument with surrounding text and stringify it all together. Instead, you can write a series of adjacent string constants and stringified arguments. The preprocessor will replace the stringified arguments with string constants. The C compiler will then combine all the adjacent string constants into one long string. </p>\n<p>Here is an example of a macro definition that uses stringification: </p>\n<pre class=\"smallexample\">#define WARN_IF(EXP) \\\ndo { if (EXP) \\\n        fprintf (stderr, \"Warning: \" #EXP \"\\n\"); } \\\nwhile (0)\nWARN_IF (x == 0);\n     ==&gt; do { if (x == 0)\n           fprintf (stderr, \"Warning: \" \"x == 0\" \"\\n\"); } while (0);</pre> <p class=\"noindent\">The argument for <code>EXP</code> is substituted once, as-is, into the <code>if</code> statement, and once, stringified, into the argument to <code>fprintf</code>. If <code>x</code> were a macro, it would be expanded in the <code>if</code> statement, but not in the string. </p>\n<p>The <code>do</code> and <code>while (0)</code> are a kludge to make it possible to write <code>WARN_IF (</code><var>arg</var><code>);</code>, which the resemblance of <code>WARN_IF</code> to a function would make C programmers want to do; see <a href=\"swallowing-the-semicolon#Swallowing-the-Semicolon\">Swallowing the Semicolon</a>. </p>\n<p>Stringification in C involves more than putting double-quote characters around the fragment. The preprocessor backslash-escapes the quotes surrounding embedded string constants, and all backslashes within string and character constants, in order to get a valid C string constant with the proper contents. Thus, stringifying <code>p = \"foo\\n\";</code> results in <tt>\"p = \\\"foo\\\\n\\\";\"</tt>. However, backslashes that are not inside string or character constants are not duplicated: ‘<code>\\n</code>’ by itself stringifies to <tt>\"\\n\"</tt>. </p>\n<p>All leading and trailing whitespace in text being stringified is ignored. Any sequence of whitespace in the middle of the text is converted to a single space in the stringified result. Comments are replaced by whitespace long before stringification happens, so they never appear in stringified text. </p>\n<p>There is no way to convert a macro argument into a character constant. </p>\n<p>If you want to stringify the result of expansion of a macro argument, you have to use two levels of macros. </p>\n<pre class=\"smallexample\">#define xstr(s) str(s)\n#define str(s) #s\n#define foo 4\nstr (foo)\n     ==&gt; \"foo\"\nxstr (foo)\n     ==&gt; xstr (4)\n     ==&gt; str (4)\n     ==&gt; \"4\"</pre> <p><code>s</code> is stringified when it is used in <code>str</code>, so it is not macro-expanded first. But <code>s</code> is an ordinary argument to <code>xstr</code>, so it is completely macro-expanded before <code>xstr</code> itself is expanded (see <a href=\"argument-prescan#Argument-Prescan\">Argument Prescan</a>). Therefore, by the time <code>str</code> gets to its argument, it has already been macro-expanded. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Stringification.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Stringification.html</a>\n  </p>\n</div>\n","concatenation":"<h1 class=\"section\" id=\"Concatenation\">3.5 Concatenation</h1> <p> It is often useful to merge two tokens into one while expanding macros. This is called token pasting or token concatenation. The ‘<code>##</code>’ preprocessing operator performs token pasting. When a macro is expanded, the two tokens on either side of each ‘<code>##</code>’ operator are combined into a single token, which then replaces the ‘<code>##</code>’ and the two original tokens in the macro expansion. Usually both will be identifiers, or one will be an identifier and the other a preprocessing number. When pasted, they make a longer identifier. This isn't the only valid case. It is also possible to concatenate two numbers (or a number and a name, such as <code>1.5</code> and <code>e3</code>) into a number. Also, multi-character operators such as <code>+=</code> can be formed by token pasting. </p>\n<p>However, two tokens that don't together form a valid token cannot be pasted together. For example, you cannot concatenate <code>x</code> with <code>+</code> in either order. If you try, the preprocessor issues a warning and emits the two tokens. Whether it puts white space between the tokens is undefined. It is common to find unnecessary uses of ‘<code>##</code>’ in complex macros. If you get this warning, it is likely that you can simply remove the ‘<code>##</code>’. </p>\n<p>Both the tokens combined by ‘<code>##</code>’ could come from the macro body, but you could just as well write them as one token in the first place. Token pasting is most useful when one or both of the tokens comes from a macro argument. If either of the tokens next to an ‘<code>##</code>’ is a parameter name, it is replaced by its actual argument before ‘<code>##</code>’ executes. As with stringification, the actual argument is not macro-expanded first. If the argument is empty, that ‘<code>##</code>’ has no effect. </p>\n<p>Keep in mind that the C preprocessor converts comments to whitespace before macros are even considered. Therefore, you cannot create a comment by concatenating ‘<code>/</code>’ and ‘<code>*</code>’. You can put as much whitespace between ‘<code>##</code>’ and its operands as you like, including comments, and you can put comments in arguments that will be concatenated. However, it is an error if ‘<code>##</code>’ appears at either end of a macro body. </p>\n<p>Consider a C program that interprets named commands. There probably needs to be a table of commands, perhaps an array of structures declared as follows: </p>\n<pre class=\"smallexample\">struct command\n{\n  char *name;\n  void (*function) (void);\n};\n\nstruct command commands[] =\n{\n  { \"quit\", quit_command },\n  { \"help\", help_command },\n  ...\n};</pre> <p>It would be cleaner not to have to give each command name twice, once in the string constant and once in the function name. A macro which takes the name of a command as an argument can make this unnecessary. The string constant can be created with stringification, and the function name by concatenating the argument with ‘<code>_command</code>’. Here is how it is done: </p>\n<pre class=\"smallexample\">#define COMMAND(NAME)  { #NAME, NAME ## _command }\n\nstruct command commands[] =\n{\n  COMMAND (quit),\n  COMMAND (help),\n  ...\n};</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Concatenation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Concatenation.html</a>\n  </p>\n</div>\n","variadic-macros":"<h1 class=\"section\" id=\"Variadic-Macros\">3.6 Variadic Macros</h1> <p> A macro can be declared to accept a variable number of arguments much as a function can. The syntax for defining the macro is similar to that of a function. Here is an example: </p>\n<pre class=\"smallexample\">#define eprintf(...) fprintf (stderr, __VA_ARGS__)</pre> <p>This kind of macro is called variadic. When the macro is invoked, all the tokens in its argument list after the last named argument (this macro has none), including any commas, become the variable argument. This sequence of tokens replaces the identifier <code>__VA_ARGS__</code> in the macro body wherever it appears. Thus, we have this expansion: </p>\n<pre class=\"smallexample\">eprintf (\"%s:%d: \", input_file, lineno)\n     ==&gt;  fprintf (stderr, \"%s:%d: \", input_file, lineno)</pre> <p>The variable argument is completely macro-expanded before it is inserted into the macro expansion, just like an ordinary argument. You may use the ‘<code>#</code>’ and ‘<code>##</code>’ operators to stringify the variable argument or to paste its leading or trailing token with another token. (But see below for an important special case for ‘<code>##</code>’.) </p>\n<p>If your macro is complicated, you may want a more descriptive name for the variable argument than <code>__VA_ARGS__</code>. CPP permits this, as an extension. You may write an argument name immediately before the ‘<code>...</code>’; that name is used for the variable argument. The <code>eprintf</code> macro above could be written </p>\n<pre class=\"smallexample\">#define eprintf(args...) fprintf (stderr, args)</pre> <p class=\"noindent\">using this extension. You cannot use <code>__VA_ARGS__</code> and this extension in the same macro. </p>\n<p>You can have named arguments as well as variable arguments in a variadic macro. We could define <code>eprintf</code> like this, instead: </p>\n<pre class=\"smallexample\">#define eprintf(format, ...) fprintf (stderr, format, __VA_ARGS__)</pre> <p class=\"noindent\">This formulation looks more descriptive, but unfortunately it is less flexible: you must now supply at least one argument after the format string. In standard C, you cannot omit the comma separating the named argument from the variable arguments. Furthermore, if you leave the variable argument empty, you will get a syntax error, because there will be an extra comma after the format string. </p>\n<pre class=\"smallexample\">eprintf(\"success!\\n\", );\n     ==&gt; fprintf(stderr, \"success!\\n\", );</pre> <p>GNU CPP has a pair of extensions which deal with this problem. First, you are allowed to leave the variable argument out entirely: </p>\n<pre class=\"smallexample\">eprintf (\"success!\\n\")\n     ==&gt; fprintf(stderr, \"success!\\n\", );</pre> <p class=\"noindent\">Second, the ‘<code>##</code>’ token paste operator has a special meaning when placed between a comma and a variable argument. If you write </p>\n<pre class=\"smallexample\">#define eprintf(format, ...) fprintf (stderr, format, ##__VA_ARGS__)</pre> <p class=\"noindent\">and the variable argument is left out when the <code>eprintf</code> macro is used, then the comma before the ‘<code>##</code>’ will be deleted. This does <em>not</em> happen if you pass an empty argument, nor does it happen if the token preceding ‘<code>##</code>’ is anything other than a comma. </p>\n<pre class=\"smallexample\">eprintf (\"success!\\n\")\n     ==&gt; fprintf(stderr, \"success!\\n\");</pre> <p class=\"noindent\">The above explanation is ambiguous about the case where the only macro parameter is a variable arguments parameter, as it is meaningless to try to distinguish whether no argument at all is an empty argument or a missing argument. In this case the C99 standard is clear that the comma must remain, however the existing GCC extension used to swallow the comma. So CPP retains the comma when conforming to a specific C standard, and drops it otherwise. </p>\n<p>C99 mandates that the only place the identifier <code>__VA_ARGS__</code> can appear is in the replacement list of a variadic macro. It may not be used as a macro name, macro argument name, or within a different type of macro. It may also be forbidden in open text; the standard is ambiguous. We recommend you avoid using it except for its defined purpose. </p>\n<p>Variadic macros are a new feature in C99. GNU CPP has supported them for a long time, but only with a named variable argument (‘<code>args...</code>’, not ‘<code>...</code>’ and <code>__VA_ARGS__</code>). If you are concerned with portability to previous versions of GCC, you should use only named variable arguments. On the other hand, if you are concerned with portability to other conforming implementations of C99, you should use only <code>__VA_ARGS__</code>. </p>\n<p>Previous versions of CPP implemented the comma-deletion extension much more generally. We have restricted it in this release to minimize the differences from C99. To get the same effect with both this and previous versions of GCC, the token preceding the special ‘<code>##</code>’ must be a comma, and there must be white space between that comma and whatever comes immediately before it: </p>\n<pre class=\"smallexample\">#define eprintf(format, args...) fprintf (stderr, format , ##args)</pre> <p class=\"noindent\">See <a href=\"differences-from-previous-versions#Differences-from-previous-versions\">Differences from previous versions</a>, for the gory details. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Variadic-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Variadic-Macros.html</a>\n  </p>\n</div>\n","predefined-macros":"<h1 class=\"section\" id=\"Predefined-Macros\">3.7 Predefined Macros</h1> <p>Several object-like macros are predefined; you use them without supplying their definitions. They fall into three classes: standard, common, and system-specific. </p>\n<p>In C++, there is a fourth category, the named operators. They act like predefined macros, but you cannot undefine them. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"standard-predefined-macros#Standard-Predefined-Macros\">Standard Predefined Macros</a> </li>\n<li>\n<a accesskey=\"2\" href=\"common-predefined-macros#Common-Predefined-Macros\">Common Predefined Macros</a> </li>\n<li>\n<a accesskey=\"3\" href=\"system_002dspecific-predefined-macros#System_002dspecific-Predefined-Macros\">System-specific Predefined Macros</a> </li>\n<li>\n<a accesskey=\"4\" href=\"c_002b_002b-named-operators#C_002b_002b-Named-Operators\">C++ Named Operators</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Predefined-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Predefined-Macros.html</a>\n  </p>\n</div>\n","standard-predefined-macros":"<h1 class=\"subsection\" id=\"Standard-Predefined-Macros\">3.7.1 Standard Predefined Macros</h1> <p> The standard predefined macros are specified by the relevant language standards, so they are available with all compilers that implement those standards. Older compilers may not provide all of them. Their names all start with double underscores. </p>\n<dl> <dt><code>__FILE__</code></dt>\n<dd>This macro expands to the name of the current input file, in the form of a C string constant. This is the path by which the preprocessor opened the file, not the short name specified in ‘<code>#include</code>’ or as the input file name argument. For example, <code>\"/usr/local/include/myheader.h\"</code> is a possible expansion of this macro. </dd>\n<dt><code>__LINE__</code></dt>\n<dd>This macro expands to the current input line number, in the form of a decimal integer constant. While we call it a predefined macro, it's a pretty strange macro, since its “definition” changes with each new line of source code. </dd>\n</dl> <p><code>__FILE__</code> and <code>__LINE__</code> are useful in generating an error message to report an inconsistency detected by the program; the message can state the source line at which the inconsistency was detected. For example, </p>\n<pre class=\"smallexample\">fprintf (stderr, \"Internal error: \"\n                 \"negative string length \"\n                 \"%d at %s, line %d.\",\n         length, __FILE__, __LINE__);</pre> <p>An ‘<code>#include</code>’ directive changes the expansions of <code>__FILE__</code> and <code>__LINE__</code> to correspond to the included file. At the end of that file, when processing resumes on the input file that contained the ‘<code>#include</code>’ directive, the expansions of <code>__FILE__</code> and <code>__LINE__</code> revert to the values they had before the ‘<code>#include</code>’ (but <code>__LINE__</code> is then incremented by one as processing moves to the line after the ‘<code>#include</code>’). </p>\n<p>A ‘<code>#line</code>’ directive changes <code>__LINE__</code>, and may change <code>__FILE__</code> as well. See <a href=\"line-control#Line-Control\">Line Control</a>. </p>\n<p>C99 introduces <code>__func__</code>, and GCC has provided <code>__FUNCTION__</code> for a long time. Both of these are strings containing the name of the current function (there are slight semantic differences; see the GCC manual). Neither of them is a macro; the preprocessor does not know the name of the current function. They tend to be useful in conjunction with <code>__FILE__</code> and <code>__LINE__</code>, though. </p>\n<dl> <dt><code>__DATE__</code></dt>\n<dd>This macro expands to a string constant that describes the date on which the preprocessor is being run. The string constant contains eleven characters and looks like <code>\"Feb 12 1996\"</code>. If the day of the month is less than 10, it is padded with a space on the left. <p>If GCC cannot determine the current date, it will emit a warning message (once per compilation) and <code>__DATE__</code> will expand to <code>\"??? ?? ????\"</code>. </p>\n</dd>\n<dt><code>__TIME__</code></dt>\n<dd>This macro expands to a string constant that describes the time at which the preprocessor is being run. The string constant contains eight characters and looks like <code>\"23:59:01\"</code>. <p>If GCC cannot determine the current time, it will emit a warning message (once per compilation) and <code>__TIME__</code> will expand to <code>\"??:??:??\"</code>. </p>\n</dd>\n<dt><code>__STDC__</code></dt>\n<dd>In normal operation, this macro expands to the constant 1, to signify that this compiler conforms to ISO Standard C. If GNU CPP is used with a compiler other than GCC, this is not necessarily true; however, the preprocessor always conforms to the standard unless the <code>-traditional-cpp</code> option is used. <p>This macro is not defined if the <code>-traditional-cpp</code> option is used. </p>\n<p>On some hosts, the system compiler uses a different convention, where <code>__STDC__</code> is normally 0, but is 1 if the user specifies strict conformance to the C Standard. CPP follows the host convention when processing system header files, but when processing user files <code>__STDC__</code> is always 1. This has been reported to cause problems; for instance, some versions of Solaris provide X Windows headers that expect <code>__STDC__</code> to be either undefined or 1. See <a href=\"invocation#Invocation\">Invocation</a>. </p>\n</dd>\n<dt><code>__STDC_VERSION__</code></dt>\n<dd>This macro expands to the C Standard's version number, a long integer constant of the form <var>yyyy</var><var>mm</var><code>L</code> where <var>yyyy</var> and <var>mm</var> are the year and month of the Standard version. This signifies which version of the C Standard the compiler conforms to. Like <code>__STDC__</code>, this is not necessarily accurate for the entire implementation, unless GNU CPP is being used with GCC. <p>The value <code>199409L</code> signifies the 1989 C standard as amended in 1994, which is the current default; the value <code>199901L</code> signifies the 1999 revision of the C standard. Support for the 1999 revision is not yet complete. </p>\n<p>This macro is not defined if the <code>-traditional-cpp</code> option is used, nor when compiling C++ or Objective-C. </p>\n</dd>\n<dt><code>__STDC_HOSTED__</code></dt>\n<dd>This macro is defined, with value 1, if the compiler's target is a hosted environment. A hosted environment has the complete facilities of the standard C library available. </dd>\n<dt><code>__cplusplus</code></dt>\n<dd>This macro is defined when the C++ compiler is in use. You can use <code>__cplusplus</code> to test whether a header is compiled by a C compiler or a C++ compiler. This macro is similar to <code>__STDC_VERSION__</code>, in that it expands to a version number. Depending on the language standard selected, the value of the macro is <code>199711L</code>, as mandated by the 1998 C++ standard; <code>201103L</code>, per the 2011 C++ standard; an unspecified value strictly larger than <code>201103L</code> for the experimental languages enabled by <code>-std=c++1y</code> and <code>-std=gnu++1y</code>. </dd>\n<dt><code>__OBJC__</code></dt>\n<dd>This macro is defined, with value 1, when the Objective-C compiler is in use. You can use <code>__OBJC__</code> to test whether a header is compiled by a C compiler or an Objective-C compiler. </dd>\n<dt><code>__ASSEMBLER__</code></dt>\n<dd>This macro is defined with value 1 when preprocessing assembly language. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Standard-Predefined-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Standard-Predefined-Macros.html</a>\n  </p>\n</div>\n","common-predefined-macros":"<h1 class=\"subsection\" id=\"Common-Predefined-Macros\">3.7.2 Common Predefined Macros</h1> <p> The common predefined macros are GNU C extensions. They are available with the same meanings regardless of the machine or operating system on which you are using GNU C or GNU Fortran. Their names all start with double underscores. </p>\n<dl> <dt><code>__COUNTER__</code></dt>\n<dd>This macro expands to sequential integral values starting from 0. In conjunction with the <code>##</code> operator, this provides a convenient means to generate unique identifiers. Care must be taken to ensure that <code>__COUNTER__</code> is not expanded prior to inclusion of precompiled headers which use it. Otherwise, the precompiled headers will not be used. </dd>\n<dt><code>__GFORTRAN__</code></dt>\n<dd>The GNU Fortran compiler defines this. </dd>\n<dt>\n<code>__GNUC__</code><dt>\n<code>__GNUC_MINOR__</code><dt><code>__GNUC_PATCHLEVEL__</code></dt>\n</dt>\n</dt>\n<dd>These macros are defined by all GNU compilers that use the C preprocessor: C, C++, Objective-C and Fortran. Their values are the major version, minor version, and patch level of the compiler, as integer constants. For example, GCC 3.2.1 will define <code>__GNUC__</code> to 3, <code>__GNUC_MINOR__</code> to 2, and <code>__GNUC_PATCHLEVEL__</code> to 1. These macros are also defined if you invoke the preprocessor directly. <p><code>__GNUC_PATCHLEVEL__</code> is new to GCC 3.0; it is also present in the widely-used development snapshots leading up to 3.0 (which identify themselves as GCC 2.96 or 2.97, depending on which snapshot you have). </p>\n<p>If all you need to know is whether or not your program is being compiled by GCC, or a non-GCC compiler that claims to accept the GNU C dialects, you can simply test <code>__GNUC__</code>. If you need to write code which depends on a specific version, you must be more careful. Each time the minor version is increased, the patch level is reset to zero; each time the major version is increased (which happens rarely), the minor version and patch level are reset. If you wish to use the predefined macros directly in the conditional, you will need to write it like this: </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">Test for GCC &gt; 3.2.0</span> */\n#if __GNUC__ &gt; 3 || \\\n    (__GNUC__ == 3 &amp;&amp; (__GNUC_MINOR__ &gt; 2 || \\\n                       (__GNUC_MINOR__ == 2 &amp;&amp; \\\n                        __GNUC_PATCHLEVEL__ &gt; 0))</pre> <p class=\"noindent\">Another approach is to use the predefined macros to calculate a single number, then compare that against a threshold: </p>\n<pre class=\"smallexample\">#define GCC_VERSION (__GNUC__ * 10000 \\\n                     + __GNUC_MINOR__ * 100 \\\n                     + __GNUC_PATCHLEVEL__)\n...\n/* <span class=\"roman\">Test for GCC &gt; 3.2.0</span> */\n#if GCC_VERSION &gt; 30200</pre> <p class=\"noindent\">Many people find this form easier to understand. </p>\n</dd>\n<dt><code>__GNUG__</code></dt>\n<dd>The GNU C++ compiler defines this. Testing it is equivalent to testing <code>(__GNUC__ &amp;&amp; __cplusplus)</code>. </dd>\n<dt><code>__STRICT_ANSI__</code></dt>\n<dd>GCC defines this macro if and only if the <code>-ansi</code> switch, or a <code>-std</code> switch specifying strict conformance to some version of ISO C or ISO C++, was specified when GCC was invoked. It is defined to ‘<code>1</code>’. This macro exists primarily to direct GNU libc's header files to restrict their definitions to the minimal set found in the 1989 C standard. </dd>\n<dt><code>__BASE_FILE__</code></dt>\n<dd>This macro expands to the name of the main input file, in the form of a C string constant. This is the source file that was specified on the command line of the preprocessor or C compiler. </dd>\n<dt><code>__INCLUDE_LEVEL__</code></dt>\n<dd>This macro expands to a decimal integer constant that represents the depth of nesting in include files. The value of this macro is incremented on every ‘<code>#include</code>’ directive and decremented at the end of every included file. It starts out at 0, its value within the base file specified on the command line. </dd>\n<dt><code>__ELF__</code></dt>\n<dd>This macro is defined if the target uses the ELF object format. </dd>\n<dt><code>__VERSION__</code></dt>\n<dd>This macro expands to a string constant which describes the version of the compiler in use. You should not rely on its contents having any particular form, but it can be counted on to contain at least the release number. </dd>\n<dt>\n<code>__OPTIMIZE__</code><dt>\n<code>__OPTIMIZE_SIZE__</code><dt><code>__NO_INLINE__</code></dt>\n</dt>\n</dt>\n<dd>These macros describe the compilation mode. <code>__OPTIMIZE__</code> is defined in all optimizing compilations. <code>__OPTIMIZE_SIZE__</code> is defined if the compiler is optimizing for size, not speed. <code>__NO_INLINE__</code> is defined if no functions will be inlined into their callers (when not optimizing, or when inlining has been specifically disabled by <code>-fno-inline</code>). <p>These macros cause certain GNU header files to provide optimized definitions, using macros or inline functions, of system library functions. You should not use these macros in any way unless you make sure that programs will execute with the same effect whether or not they are defined. If they are defined, their value is 1. </p>\n</dd>\n<dt><code>__GNUC_GNU_INLINE__</code></dt>\n<dd>GCC defines this macro if functions declared <code>inline</code> will be handled in GCC's traditional gnu90 mode. Object files will contain externally visible definitions of all functions declared <code>inline</code> without <code>extern</code> or <code>static</code>. They will not contain any definitions of any functions declared <code>extern inline</code>. </dd>\n<dt><code>__GNUC_STDC_INLINE__</code></dt>\n<dd>GCC defines this macro if functions declared <code>inline</code> will be handled according to the ISO C99 standard. Object files will contain externally visible definitions of all functions declared <code>extern\ninline</code>. They will not contain definitions of any functions declared <code>inline</code> without <code>extern</code>. <p>If this macro is defined, GCC supports the <code>gnu_inline</code> function attribute as a way to always get the gnu90 behavior. Support for this and <code>__GNUC_GNU_INLINE__</code> was added in GCC 4.1.3. If neither macro is defined, an older version of GCC is being used: <code>inline</code> functions will be compiled in gnu90 mode, and the <code>gnu_inline</code> function attribute will not be recognized. </p>\n</dd>\n<dt><code>__CHAR_UNSIGNED__</code></dt>\n<dd>GCC defines this macro if and only if the data type <code>char</code> is unsigned on the target machine. It exists to cause the standard header file <code>limits.h</code> to work correctly. You should not use this macro yourself; instead, refer to the standard macros defined in <code>limits.h</code>. </dd>\n<dt><code>__WCHAR_UNSIGNED__</code></dt>\n<dd>Like <code>__CHAR_UNSIGNED__</code>, this macro is defined if and only if the data type <code>wchar_t</code> is unsigned and the front-end is in C++ mode. </dd>\n<dt><code>__REGISTER_PREFIX__</code></dt>\n<dd>This macro expands to a single token (not a string constant) which is the prefix applied to CPU register names in assembly language for this target. You can use it to write assembly that is usable in multiple environments. For example, in the <code>m68k-aout</code> environment it expands to nothing, but in the <code>m68k-coff</code> environment it expands to a single ‘<code>%</code>’. </dd>\n<dt><code>__USER_LABEL_PREFIX__</code></dt>\n<dd>This macro expands to a single token which is the prefix applied to user labels (symbols visible to C code) in assembly. For example, in the <code>m68k-aout</code> environment it expands to an ‘<code>_</code>’, but in the <code>m68k-coff</code> environment it expands to nothing. <p>This macro will have the correct definition even if <code>-f(no-)underscores</code> is in use, but it will not be correct if target-specific options that adjust this prefix are used (e.g. the OSF/rose <code>-mno-underscores</code> option). </p>\n</dd>\n<dt>\n<code>__SIZE_TYPE__</code><dt>\n<code>__PTRDIFF_TYPE__</code><dt>\n<code>__WCHAR_TYPE__</code><dt>\n<code>__WINT_TYPE__</code><dt>\n<code>__INTMAX_TYPE__</code><dt>\n<code>__UINTMAX_TYPE__</code><dt>\n<code>__SIG_ATOMIC_TYPE__</code><dt>\n<code>__INT8_TYPE__</code><dt>\n<code>__INT16_TYPE__</code><dt>\n<code>__INT32_TYPE__</code><dt>\n<code>__INT64_TYPE__</code><dt>\n<code>__UINT8_TYPE__</code><dt>\n<code>__UINT16_TYPE__</code><dt>\n<code>__UINT32_TYPE__</code><dt>\n<code>__UINT64_TYPE__</code><dt>\n<code>__INT_LEAST8_TYPE__</code><dt>\n<code>__INT_LEAST16_TYPE__</code><dt>\n<code>__INT_LEAST32_TYPE__</code><dt>\n<code>__INT_LEAST64_TYPE__</code><dt>\n<code>__UINT_LEAST8_TYPE__</code><dt>\n<code>__UINT_LEAST16_TYPE__</code><dt>\n<code>__UINT_LEAST32_TYPE__</code><dt>\n<code>__UINT_LEAST64_TYPE__</code><dt>\n<code>__INT_FAST8_TYPE__</code><dt>\n<code>__INT_FAST16_TYPE__</code><dt>\n<code>__INT_FAST32_TYPE__</code><dt>\n<code>__INT_FAST64_TYPE__</code><dt>\n<code>__UINT_FAST8_TYPE__</code><dt>\n<code>__UINT_FAST16_TYPE__</code><dt>\n<code>__UINT_FAST32_TYPE__</code><dt>\n<code>__UINT_FAST64_TYPE__</code><dt>\n<code>__INTPTR_TYPE__</code><dt><code>__UINTPTR_TYPE__</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>These macros are defined to the correct underlying types for the <code>size_t</code>, <code>ptrdiff_t</code>, <code>wchar_t</code>, <code>wint_t</code>, <code>intmax_t</code>, <code>uintmax_t</code>, <code>sig_atomic_t</code>, <code>int8_t</code>, <code>int16_t</code>, <code>int32_t</code>, <code>int64_t</code>, <code>uint8_t</code>, <code>uint16_t</code>, <code>uint32_t</code>, <code>uint64_t</code>, <code>int_least8_t</code>, <code>int_least16_t</code>, <code>int_least32_t</code>, <code>int_least64_t</code>, <code>uint_least8_t</code>, <code>uint_least16_t</code>, <code>uint_least32_t</code>, <code>uint_least64_t</code>, <code>int_fast8_t</code>, <code>int_fast16_t</code>, <code>int_fast32_t</code>, <code>int_fast64_t</code>, <code>uint_fast8_t</code>, <code>uint_fast16_t</code>, <code>uint_fast32_t</code>, <code>uint_fast64_t</code>, <code>intptr_t</code>, and <code>uintptr_t</code> typedefs, respectively. They exist to make the standard header files <code>stddef.h</code>, <code>stdint.h</code>, and <code>wchar.h</code> work correctly. You should not use these macros directly; instead, include the appropriate headers and use the typedefs. Some of these macros may not be defined on particular systems if GCC does not provide a <code>stdint.h</code> header on those systems. </dd>\n<dt><code>__CHAR_BIT__</code></dt>\n<dd>Defined to the number of bits used in the representation of the <code>char</code> data type. It exists to make the standard header given numerical limits work correctly. You should not use this macro directly; instead, include the appropriate headers. </dd>\n<dt>\n<code>__SCHAR_MAX__</code><dt>\n<code>__WCHAR_MAX__</code><dt>\n<code>__SHRT_MAX__</code><dt>\n<code>__INT_MAX__</code><dt>\n<code>__LONG_MAX__</code><dt>\n<code>__LONG_LONG_MAX__</code><dt>\n<code>__WINT_MAX__</code><dt>\n<code>__SIZE_MAX__</code><dt>\n<code>__PTRDIFF_MAX__</code><dt>\n<code>__INTMAX_MAX__</code><dt>\n<code>__UINTMAX_MAX__</code><dt>\n<code>__SIG_ATOMIC_MAX__</code><dt>\n<code>__INT8_MAX__</code><dt>\n<code>__INT16_MAX__</code><dt>\n<code>__INT32_MAX__</code><dt>\n<code>__INT64_MAX__</code><dt>\n<code>__UINT8_MAX__</code><dt>\n<code>__UINT16_MAX__</code><dt>\n<code>__UINT32_MAX__</code><dt>\n<code>__UINT64_MAX__</code><dt>\n<code>__INT_LEAST8_MAX__</code><dt>\n<code>__INT_LEAST16_MAX__</code><dt>\n<code>__INT_LEAST32_MAX__</code><dt>\n<code>__INT_LEAST64_MAX__</code><dt>\n<code>__UINT_LEAST8_MAX__</code><dt>\n<code>__UINT_LEAST16_MAX__</code><dt>\n<code>__UINT_LEAST32_MAX__</code><dt>\n<code>__UINT_LEAST64_MAX__</code><dt>\n<code>__INT_FAST8_MAX__</code><dt>\n<code>__INT_FAST16_MAX__</code><dt>\n<code>__INT_FAST32_MAX__</code><dt>\n<code>__INT_FAST64_MAX__</code><dt>\n<code>__UINT_FAST8_MAX__</code><dt>\n<code>__UINT_FAST16_MAX__</code><dt>\n<code>__UINT_FAST32_MAX__</code><dt>\n<code>__UINT_FAST64_MAX__</code><dt>\n<code>__INTPTR_MAX__</code><dt>\n<code>__UINTPTR_MAX__</code><dt>\n<code>__WCHAR_MIN__</code><dt>\n<code>__WINT_MIN__</code><dt><code>__SIG_ATOMIC_MIN__</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Defined to the maximum value of the <code>signed char</code>, <code>wchar_t</code>, <code>signed short</code>, <code>signed int</code>, <code>signed long</code>, <code>signed long long</code>, <code>wint_t</code>, <code>size_t</code>, <code>ptrdiff_t</code>, <code>intmax_t</code>, <code>uintmax_t</code>, <code>sig_atomic_t</code>, <code>int8_t</code>, <code>int16_t</code>, <code>int32_t</code>, <code>int64_t</code>, <code>uint8_t</code>, <code>uint16_t</code>, <code>uint32_t</code>, <code>uint64_t</code>, <code>int_least8_t</code>, <code>int_least16_t</code>, <code>int_least32_t</code>, <code>int_least64_t</code>, <code>uint_least8_t</code>, <code>uint_least16_t</code>, <code>uint_least32_t</code>, <code>uint_least64_t</code>, <code>int_fast8_t</code>, <code>int_fast16_t</code>, <code>int_fast32_t</code>, <code>int_fast64_t</code>, <code>uint_fast8_t</code>, <code>uint_fast16_t</code>, <code>uint_fast32_t</code>, <code>uint_fast64_t</code>, <code>intptr_t</code>, and <code>uintptr_t</code> types and to the minimum value of the <code>wchar_t</code>, <code>wint_t</code>, and <code>sig_atomic_t</code> types respectively. They exist to make the standard header given numerical limits work correctly. You should not use these macros directly; instead, include the appropriate headers. Some of these macros may not be defined on particular systems if GCC does not provide a <code>stdint.h</code> header on those systems. </dd>\n<dt>\n<code>__INT8_C</code><dt>\n<code>__INT16_C</code><dt>\n<code>__INT32_C</code><dt>\n<code>__INT64_C</code><dt>\n<code>__UINT8_C</code><dt>\n<code>__UINT16_C</code><dt>\n<code>__UINT32_C</code><dt>\n<code>__UINT64_C</code><dt>\n<code>__INTMAX_C</code><dt><code>__UINTMAX_C</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Defined to implementations of the standard <code>stdint.h</code> macros with the same names without the leading <code>__</code>. They exist the make the implementation of that header work correctly. You should not use these macros directly; instead, include the appropriate headers. Some of these macros may not be defined on particular systems if GCC does not provide a <code>stdint.h</code> header on those systems. </dd>\n<dt>\n<code>__SIZEOF_INT__</code><dt>\n<code>__SIZEOF_LONG__</code><dt>\n<code>__SIZEOF_LONG_LONG__</code><dt>\n<code>__SIZEOF_SHORT__</code><dt>\n<code>__SIZEOF_POINTER__</code><dt>\n<code>__SIZEOF_FLOAT__</code><dt>\n<code>__SIZEOF_DOUBLE__</code><dt>\n<code>__SIZEOF_LONG_DOUBLE__</code><dt>\n<code>__SIZEOF_SIZE_T__</code><dt>\n<code>__SIZEOF_WCHAR_T__</code><dt>\n<code>__SIZEOF_WINT_T__</code><dt><code>__SIZEOF_PTRDIFF_T__</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>Defined to the number of bytes of the C standard data types: <code>int</code>, <code>long</code>, <code>long long</code>, <code>short</code>, <code>void *</code>, <code>float</code>, <code>double</code>, <code>long double</code>, <code>size_t</code>, <code>wchar_t</code>, <code>wint_t</code> and <code>ptrdiff_t</code>. </dd>\n<dt>\n<code>__BYTE_ORDER__</code><dt>\n<code>__ORDER_LITTLE_ENDIAN__</code><dt>\n<code>__ORDER_BIG_ENDIAN__</code><dt><code>__ORDER_PDP_ENDIAN__</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\n<code>__BYTE_ORDER__</code> is defined to one of the values <code>__ORDER_LITTLE_ENDIAN__</code>, <code>__ORDER_BIG_ENDIAN__</code>, or <code>__ORDER_PDP_ENDIAN__</code> to reflect the layout of multi-byte and multi-word quantities in memory. If <code>__BYTE_ORDER__</code> is equal to <code>__ORDER_LITTLE_ENDIAN__</code> or <code>__ORDER_BIG_ENDIAN__</code>, then multi-byte and multi-word quantities are laid out identically: the byte (word) at the lowest address is the least significant or most significant byte (word) of the quantity, respectively. If <code>__BYTE_ORDER__</code> is equal to <code>__ORDER_PDP_ENDIAN__</code>, then bytes in 16-bit words are laid out in a little-endian fashion, whereas the 16-bit subwords of a 32-bit quantity are laid out in big-endian fashion. <p>You should use these macros for testing like this: </p>\n<pre class=\"smallexample\">/* <span class=\"roman\">Test for a little-endian machine</span> */\n#if __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__</pre> </dd>\n<dt><code>__FLOAT_WORD_ORDER__</code></dt>\n<dd>\n<code>__FLOAT_WORD_ORDER__</code> is defined to one of the values <code>__ORDER_LITTLE_ENDIAN__</code> or <code>__ORDER_BIG_ENDIAN__</code> to reflect the layout of the words of multi-word floating-point quantities. </dd>\n<dt><code>__DEPRECATED</code></dt>\n<dd>This macro is defined, with value 1, when compiling a C++ source file with warnings about deprecated constructs enabled. These warnings are enabled by default, but can be disabled with <code>-Wno-deprecated</code>. </dd>\n<dt><code>__EXCEPTIONS</code></dt>\n<dd>This macro is defined, with value 1, when compiling a C++ source file with exceptions enabled. If <code>-fno-exceptions</code> is used when compiling the file, then this macro is not defined. </dd>\n<dt><code>__GXX_RTTI</code></dt>\n<dd>This macro is defined, with value 1, when compiling a C++ source file with runtime type identification enabled. If <code>-fno-rtti</code> is used when compiling the file, then this macro is not defined. </dd>\n<dt><code>__USING_SJLJ_EXCEPTIONS__</code></dt>\n<dd>This macro is defined, with value 1, if the compiler uses the old mechanism based on <code>setjmp</code> and <code>longjmp</code> for exception handling. </dd>\n<dt><code>__GXX_EXPERIMENTAL_CXX0X__</code></dt>\n<dd>This macro is defined when compiling a C++ source file with the option <code>-std=c++0x</code> or <code>-std=gnu++0x</code>. It indicates that some features likely to be included in C++0x are available. Note that these features are experimental, and may change or be removed in future versions of GCC. </dd>\n<dt><code>__GXX_WEAK__</code></dt>\n<dd>This macro is defined when compiling a C++ source file. It has the value 1 if the compiler will use weak symbols, COMDAT sections, or other similar techniques to collapse symbols with “vague linkage” that are defined in multiple translation units. If the compiler will not collapse such symbols, this macro is defined with value 0. In general, user code should not need to make use of this macro; the purpose of this macro is to ease implementation of the C++ runtime library provided with G++. </dd>\n<dt><code>__NEXT_RUNTIME__</code></dt>\n<dd>This macro is defined, with value 1, if (and only if) the NeXT runtime (as in <code>-fnext-runtime</code>) is in use for Objective-C. If the GNU runtime is used, this macro is not defined, so that you can use this macro to determine which runtime (NeXT or GNU) is being used. </dd>\n<dt>\n<code>__LP64__</code><dt><code>_LP64</code></dt>\n</dt>\n<dd>These macros are defined, with value 1, if (and only if) the compilation is for a target where <code>long int</code> and pointer both use 64-bits and <code>int</code> uses 32-bit. </dd>\n<dt><code>__SSP__</code></dt>\n<dd>This macro is defined, with value 1, when <code>-fstack-protector</code> is in use. </dd>\n<dt><code>__SSP_ALL__</code></dt>\n<dd>This macro is defined, with value 2, when <code>-fstack-protector-all</code> is in use. </dd>\n<dt><code>__SSP_STRONG__</code></dt>\n<dd>This macro is defined, with value 3, when <code>-fstack-protector-strong</code> is in use. </dd>\n<dt><code>__SANITIZE_ADDRESS__</code></dt>\n<dd>This macro is defined, with value 1, when <code>-fsanitize=address</code> or <code>-fsanitize=kernel-address</code> are in use. </dd>\n<dt><code>__TIMESTAMP__</code></dt>\n<dd>This macro expands to a string constant that describes the date and time of the last modification of the current source file. The string constant contains abbreviated day of the week, month, day of the month, time in hh:mm:ss form, year and looks like <code>\"Sun Sep 16 01:03:52 1973\"</code>. If the day of the month is less than 10, it is padded with a space on the left. <p>If GCC cannot determine the current date, it will emit a warning message (once per compilation) and <code>__TIMESTAMP__</code> will expand to <code>\"??? ??? ?? ??:??:?? ????\"</code>. </p>\n</dd>\n<dt>\n<code>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_1</code><dt>\n<code>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_2</code><dt>\n<code>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_4</code><dt>\n<code>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_8</code><dt><code>__GCC_HAVE_SYNC_COMPARE_AND_SWAP_16</code></dt>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>These macros are defined when the target processor supports atomic compare and swap operations on operands 1, 2, 4, 8 or 16 bytes in length, respectively. </dd>\n<dt><code>__GCC_HAVE_DWARF2_CFI_ASM</code></dt>\n<dd>This macro is defined when the compiler is emitting Dwarf2 CFI directives to the assembler. When this is defined, it is possible to emit those same directives in inline assembly. </dd>\n<dt>\n<code>__FP_FAST_FMA</code><dt>\n<code>__FP_FAST_FMAF</code><dt><code>__FP_FAST_FMAL</code></dt>\n</dt>\n</dt>\n<dd>These macros are defined with value 1 if the backend supports the <code>fma</code>, <code>fmaf</code>, and <code>fmal</code> builtin functions, so that the include file <code>math.h</code> can define the macros <code>FP_FAST_FMA</code>, <code>FP_FAST_FMAF</code>, and <code>FP_FAST_FMAL</code> for compatibility with the 1999 C standard. </dd>\n<dt><code>__GCC_IEC_559</code></dt>\n<dd>This macro is defined to indicate the intended level of support for IEEE 754 (IEC 60559) floating-point arithmetic. It expands to a nonnegative integer value. If 0, it indicates that the combination of the compiler configuration and the command-line options is not intended to support IEEE 754 arithmetic for <code>float</code> and <code>double</code> as defined in C99 and C11 Annex F (for example, that the standard rounding modes and exceptions are not supported, or that optimizations are enabled that conflict with IEEE 754 semantics). If 1, it indicates that IEEE 754 arithmetic is intended to be supported; this does not mean that all relevant language features are supported by GCC. If 2 or more, it additionally indicates support for IEEE 754-2008 (in particular, that the binary encodings for quiet and signaling NaNs are as specified in IEEE 754-2008). <p>This macro does not indicate the default state of command-line options that control optimizations that C99 and C11 permit to be controlled by standard pragmas, where those standards do not require a particular default state. It does not indicate whether optimizations respect signaling NaN semantics (the macro for that is <code>__SUPPORT_SNAN__</code>). It does not indicate support for decimal floating point or the IEEE 754 binary16 and binary128 types. </p>\n</dd>\n<dt><code>__GCC_IEC_559_COMPLEX</code></dt>\n<dd>This macro is defined to indicate the intended level of support for IEEE 754 (IEC 60559) floating-point arithmetic for complex numbers, as defined in C99 and C11 Annex G. It expands to a nonnegative integer value. If 0, it indicates that the combination of the compiler configuration and the command-line options is not intended to support Annex G requirements (for example, because <code>-fcx-limited-range</code> was used). If 1 or more, it indicates that it is intended to support those requirements; this does not mean that all relevant language features are supported by GCC. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Common-Predefined-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Common-Predefined-Macros.html</a>\n  </p>\n</div>\n","system_002dspecific-predefined-macros":"<h1 class=\"subsection\" id=\"System_002dspecific-Predefined-Macros\">3.7.3 System-specific Predefined Macros</h1> <p> The C preprocessor normally predefines several macros that indicate what type of system and machine is in use. They are obviously different on each target supported by GCC. This manual, being for all systems and machines, cannot tell you what their names are, but you can use <code>cpp -dM</code> to see them all. See <a href=\"invocation#Invocation\">Invocation</a>. All system-specific predefined macros expand to a constant value, so you can test them with either ‘<code>#ifdef</code>’ or ‘<code>#if</code>’. </p>\n<p>The C standard requires that all system-specific macros be part of the reserved namespace. All names which begin with two underscores, or an underscore and a capital letter, are reserved for the compiler and library to use as they wish. However, historically system-specific macros have had names with no special prefix; for instance, it is common to find <code>unix</code> defined on Unix systems. For all such macros, GCC provides a parallel macro with two underscores added at the beginning and the end. If <code>unix</code> is defined, <code>__unix__</code> will be defined too. There will never be more than two underscores; the parallel of <code>_mips</code> is <code>__mips__</code>. </p>\n<p>When the <code>-ansi</code> option, or any <code>-std</code> option that requests strict conformance, is given to the compiler, all the system-specific predefined macros outside the reserved namespace are suppressed. The parallel macros, inside the reserved namespace, remain defined. </p>\n<p>We are slowly phasing out all predefined macros which are outside the reserved namespace. You should never use them in new programs, and we encourage you to correct older code to use the parallel macros whenever you find it. We don't recommend you use the system-specific macros that are in the reserved namespace, either. It is better in the long run to check specifically for features you need, using a tool such as <code>autoconf</code>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/System_002dspecific-Predefined-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/System_002dspecific-Predefined-Macros.html</a>\n  </p>\n</div>\n","c_002b_002b-named-operators":"<h1 class=\"subsection\" id=\"C_002b_002b-Named-Operators\">3.7.4 C++ Named Operators</h1> <p> In C++, there are eleven keywords which are simply alternate spellings of operators normally written with punctuation. These keywords are treated as such even in the preprocessor. They function as operators in ‘<code>#if</code>’, and they cannot be defined as macros or poisoned. In C, you can request that those keywords take their C++ meaning by including <code>iso646.h</code>. That header defines each one as a normal object-like macro expanding to the appropriate punctuator. </p>\n<p>These are the named operators and their corresponding punctuators: </p>\n\n<table summary=\"\">\n<tr align=\"left\">\n<td valign=\"top\">Named Operator </td>\n<td valign=\"top\">Punctuator </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>and</code> </td>\n<td valign=\"top\">\n<code>&amp;&amp;</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>and_eq</code> </td>\n<td valign=\"top\">\n<code>&amp;=</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>bitand</code> </td>\n<td valign=\"top\">\n<code>&amp;</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>bitor</code> </td>\n<td valign=\"top\">\n<code>|</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>compl</code> </td>\n<td valign=\"top\">\n<code>~</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>not</code> </td>\n<td valign=\"top\">\n<code>!</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>not_eq</code> </td>\n<td valign=\"top\">\n<code>!=</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>or</code> </td>\n<td valign=\"top\">\n<code>||</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>or_eq</code> </td>\n<td valign=\"top\">\n<code>|=</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>xor</code> </td>\n<td valign=\"top\">\n<code>^</code> </td>\n</tr>\n<tr align=\"left\">\n<td valign=\"top\">\n<code>xor_eq</code> </td>\n<td valign=\"top\">\n<code>^=</code> </td>\n</tr>\n</table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/C_002b_002b-Named-Operators.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/C_002b_002b-Named-Operators.html</a>\n  </p>\n</div>\n","undefining-and-redefining-macros":"<h1 class=\"section\" id=\"Undefining-and-Redefining-Macros\">3.8 Undefining and Redefining Macros</h1> <p> If a macro ceases to be useful, it may be undefined with the ‘<code>#undef</code>’ directive. ‘<code>#undef</code>’ takes a single argument, the name of the macro to undefine. You use the bare macro name, even if the macro is function-like. It is an error if anything appears on the line after the macro name. ‘<code>#undef</code>’ has no effect if the name is not a macro. </p>\n<pre class=\"smallexample\">#define FOO 4\nx = FOO;        ==&gt; x = 4;\n#undef FOO\nx = FOO;        ==&gt; x = FOO;</pre> <p>Once a macro has been undefined, that identifier may be redefined as a macro by a subsequent ‘<code>#define</code>’ directive. The new definition need not have any resemblance to the old definition. </p>\n<p>However, if an identifier which is currently a macro is redefined, then the new definition must be effectively the same as the old one. Two macro definitions are effectively the same if: </p>\n<ul> <li>Both are the same type of macro (object- or function-like). </li>\n<li>All the tokens of the replacement list are the same. </li>\n<li>If there are any parameters, they are the same. </li>\n<li>Whitespace appears in the same places in both. It need not be exactly the same amount of whitespace, though. Remember that comments count as whitespace. </li>\n</ul> <p class=\"noindent\">These definitions are effectively the same: </p>\n<pre class=\"smallexample\">#define FOUR (2 + 2)\n#define FOUR         (2    +    2)\n#define FOUR (2 /* <span class=\"roman\">two</span> */ + 2)</pre> <p class=\"noindent\">but these are not: </p>\n<pre class=\"smallexample\">#define FOUR (2 + 2)\n#define FOUR ( 2+2 )\n#define FOUR (2 * 2)\n#define FOUR(score,and,seven,years,ago) (2 + 2)</pre> <p>If a macro is redefined with a definition that is not effectively the same as the old one, the preprocessor issues a warning and changes the macro to use the new definition. If the new definition is effectively the same, the redefinition is silently ignored. This allows, for instance, two different headers to define a common macro. The preprocessor will only complain if the definitions do not match. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Undefining-and-Redefining-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Undefining-and-Redefining-Macros.html</a>\n  </p>\n</div>\n","directives-within-macro-arguments":"<h1 class=\"section\" id=\"Directives-Within-Macro-Arguments\">3.9 Directives Within Macro Arguments</h1> <p> Occasionally it is convenient to use preprocessor directives within the arguments of a macro. The C and C++ standards declare that behavior in these cases is undefined. </p>\n<p>Versions of CPP prior to 3.2 would reject such constructs with an error message. This was the only syntactic difference between normal functions and function-like macros, so it seemed attractive to remove this limitation, and people would often be surprised that they could not use macros in this way. Moreover, sometimes people would use conditional compilation in the argument list to a normal library function like ‘<code>printf</code>’, only to find that after a library upgrade ‘<code>printf</code>’ had changed to be a function-like macro, and their code would no longer compile. So from version 3.2 we changed CPP to successfully process arbitrary directives within macro arguments in exactly the same way as it would have processed the directive were the function-like macro invocation not present. </p>\n<p>If, within a macro invocation, that macro is redefined, then the new definition takes effect in time for argument pre-expansion, but the original definition is still used for argument replacement. Here is a pathological example: </p>\n<pre class=\"smallexample\">#define f(x) x x\nf (1\n#undef f\n#define f 2\nf)</pre> <p class=\"noindent\">which expands to </p>\n<pre class=\"smallexample\">1 2 1 2</pre> <p class=\"noindent\">with the semantics described above. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Directives-Within-Macro-Arguments.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Directives-Within-Macro-Arguments.html</a>\n  </p>\n</div>\n","macro-pitfalls":"<h1 class=\"section\" id=\"Macro-Pitfalls\">3.10 Macro Pitfalls</h1> <p> In this section we describe some special rules that apply to macros and macro expansion, and point out certain cases in which the rules have counter-intuitive consequences that you must watch out for. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"misnesting#Misnesting\">Misnesting</a> </li>\n<li>\n<a accesskey=\"2\" href=\"operator-precedence-problems#Operator-Precedence-Problems\">Operator Precedence Problems</a> </li>\n<li>\n<a accesskey=\"3\" href=\"swallowing-the-semicolon#Swallowing-the-Semicolon\">Swallowing the Semicolon</a> </li>\n<li>\n<a accesskey=\"4\" href=\"duplication-of-side-effects#Duplication-of-Side-Effects\">Duplication of Side Effects</a> </li>\n<li>\n<a accesskey=\"5\" href=\"self_002dreferential-macros#Self_002dReferential-Macros\">Self-Referential Macros</a> </li>\n<li>\n<a accesskey=\"6\" href=\"argument-prescan#Argument-Prescan\">Argument Prescan</a> </li>\n<li>\n<a accesskey=\"7\" href=\"newlines-in-arguments#Newlines-in-Arguments\">Newlines in Arguments</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macro-Pitfalls.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Macro-Pitfalls.html</a>\n  </p>\n</div>\n","misnesting":"<h1 class=\"subsection\" id=\"Misnesting\">3.10.1 Misnesting</h1> <p>When a macro is called with arguments, the arguments are substituted into the macro body and the result is checked, together with the rest of the input file, for more macro calls. It is possible to piece together a macro call coming partially from the macro body and partially from the arguments. For example, </p>\n<pre class=\"smallexample\">#define twice(x) (2*(x))\n#define call_with_1(x) x(1)\ncall_with_1 (twice)\n     ==&gt; twice(1)\n     ==&gt; (2*(1))</pre> <p>Macro definitions do not have to have balanced parentheses. By writing an unbalanced open parenthesis in a macro body, it is possible to create a macro call that begins inside the macro body but ends outside of it. For example, </p>\n<pre class=\"smallexample\">#define strange(file) fprintf (file, \"%s %d\",\n...\nstrange(stderr) p, 35)\n     ==&gt; fprintf (stderr, \"%s %d\", p, 35)</pre> <p>The ability to piece together a macro call can be useful, but the use of unbalanced open parentheses in a macro body is just confusing, and should be avoided. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Misnesting.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Misnesting.html</a>\n  </p>\n</div>\n","operator-precedence-problems":"<h1 class=\"subsection\" id=\"Operator-Precedence-Problems\">3.10.2 Operator Precedence Problems</h1> <p> You may have noticed that in most of the macro definition examples shown above, each occurrence of a macro argument name had parentheses around it. In addition, another pair of parentheses usually surround the entire macro definition. Here is why it is best to write macros that way. </p>\n<p>Suppose you define a macro as follows, </p>\n<pre class=\"smallexample\">#define ceil_div(x, y) (x + y - 1) / y</pre> <p class=\"noindent\">whose purpose is to divide, rounding up. (One use for this operation is to compute how many <code>int</code> objects are needed to hold a certain number of <code>char</code> objects.) Then suppose it is used as follows: </p>\n<pre class=\"smallexample\">a = ceil_div (b &amp; c, sizeof (int));\n     ==&gt; a = (b &amp; c + sizeof (int) - 1) / sizeof (int);</pre> <p class=\"noindent\">This does not do what is intended. The operator-precedence rules of C make it equivalent to this: </p>\n<pre class=\"smallexample\">a = (b &amp; (c + sizeof (int) - 1)) / sizeof (int);</pre> <p class=\"noindent\">What we want is this: </p>\n<pre class=\"smallexample\">a = ((b &amp; c) + sizeof (int) - 1)) / sizeof (int);</pre> <p class=\"noindent\">Defining the macro as </p>\n<pre class=\"smallexample\">#define ceil_div(x, y) ((x) + (y) - 1) / (y)</pre> <p class=\"noindent\">provides the desired result. </p>\n<p>Unintended grouping can result in another way. Consider <code>sizeof\nceil_div(1, 2)</code>. That has the appearance of a C expression that would compute the size of the type of <code>ceil_div (1, 2)</code>, but in fact it means something very different. Here is what it expands to: </p>\n<pre class=\"smallexample\">sizeof ((1) + (2) - 1) / (2)</pre> <p class=\"noindent\">This would take the size of an integer and divide it by two. The precedence rules have put the division outside the <code>sizeof</code> when it was intended to be inside. </p>\n<p>Parentheses around the entire macro definition prevent such problems. Here, then, is the recommended way to define <code>ceil_div</code>: </p>\n<pre class=\"smallexample\">#define ceil_div(x, y) (((x) + (y) - 1) / (y))</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Operator-Precedence-Problems.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Operator-Precedence-Problems.html</a>\n  </p>\n</div>\n","swallowing-the-semicolon":"<h1 class=\"subsection\" id=\"Swallowing-the-Semicolon\">3.10.3 Swallowing the Semicolon</h1> <p> Often it is desirable to define a macro that expands into a compound statement. Consider, for example, the following macro, that advances a pointer (the argument <code>p</code> says where to find it) across whitespace characters: </p>\n<pre class=\"smallexample\">#define SKIP_SPACES(p, limit)  \\\n{ char *lim = (limit);         \\\n  while (p &lt; lim) {            \\\n    if (*p++ != ' ') {         \\\n      p--; break; }}}</pre> <p class=\"noindent\">Here backslash-newline is used to split the macro definition, which must be a single logical line, so that it resembles the way such code would be laid out if not part of a macro definition. </p>\n<p>A call to this macro might be <code>SKIP_SPACES (p, lim)</code>. Strictly speaking, the call expands to a compound statement, which is a complete statement with no need for a semicolon to end it. However, since it looks like a function call, it minimizes confusion if you can use it like a function call, writing a semicolon afterward, as in <code>SKIP_SPACES (p, lim);</code> </p>\n<p>This can cause trouble before <code>else</code> statements, because the semicolon is actually a null statement. Suppose you write </p>\n<pre class=\"smallexample\">if (*p != 0)\n  SKIP_SPACES (p, lim);\nelse ...</pre> <p class=\"noindent\">The presence of two statements—the compound statement and a null statement—in between the <code>if</code> condition and the <code>else</code> makes invalid C code. </p>\n<p>The definition of the macro <code>SKIP_SPACES</code> can be altered to solve this problem, using a <code>do ... while</code> statement. Here is how: </p>\n<pre class=\"smallexample\">#define SKIP_SPACES(p, limit)     \\\ndo { char *lim = (limit);         \\\n     while (p &lt; lim) {            \\\n       if (*p++ != ' ') {         \\\n         p--; break; }}}          \\\nwhile (0)</pre> <p>Now <code>SKIP_SPACES (p, lim);</code> expands into </p>\n<pre class=\"smallexample\">do {...} while (0);</pre> <p class=\"noindent\">which is one statement. The loop executes exactly once; most compilers generate no extra code for it. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Swallowing-the-Semicolon.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Swallowing-the-Semicolon.html</a>\n  </p>\n</div>\n","duplication-of-side-effects":"<h1 class=\"subsection\" id=\"Duplication-of-Side-Effects\">3.10.4 Duplication of Side Effects</h1> <p>Many C programs define a macro <code>min</code>, for “minimum”, like this: </p>\n<pre class=\"smallexample\">#define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))</pre> <p>When you use this macro with an argument containing a side effect, as shown here, </p>\n<pre class=\"smallexample\">next = min (x + y, foo (z));</pre> <p class=\"noindent\">it expands as follows: </p>\n<pre class=\"smallexample\">next = ((x + y) &lt; (foo (z)) ? (x + y) : (foo (z)));</pre> <p class=\"noindent\">where <code>x + y</code> has been substituted for <code>X</code> and <code>foo (z)</code> for <code>Y</code>. </p>\n<p>The function <code>foo</code> is used only once in the statement as it appears in the program, but the expression <code>foo (z)</code> has been substituted twice into the macro expansion. As a result, <code>foo</code> might be called two times when the statement is executed. If it has side effects or if it takes a long time to compute, the results might not be what you intended. We say that <code>min</code> is an unsafe macro. </p>\n<p>The best solution to this problem is to define <code>min</code> in a way that computes the value of <code>foo (z)</code> only once. The C language offers no standard way to do this, but it can be done with GNU extensions as follows: </p>\n<pre class=\"smallexample\">#define min(X, Y)                \\\n({ typeof (X) x_ = (X);          \\\n   typeof (Y) y_ = (Y);          \\\n   (x_ &lt; y_) ? x_ : y_; })</pre> <p>The ‘<code>({ ... })</code>’ notation produces a compound statement that acts as an expression. Its value is the value of its last statement. This permits us to define local variables and assign each argument to one. The local variables have underscores after their names to reduce the risk of conflict with an identifier of wider scope (it is impossible to avoid this entirely). Now each argument is evaluated exactly once. </p>\n<p>If you do not wish to use GNU C extensions, the only solution is to be careful when <em>using</em> the macro <code>min</code>. For example, you can calculate the value of <code>foo (z)</code>, save it in a variable, and use that variable in <code>min</code>: </p>\n<pre class=\"smallexample\">#define min(X, Y)  ((X) &lt; (Y) ? (X) : (Y))\n...\n{\n  int tem = foo (z);\n  next = min (x + y, tem);\n}</pre> <p class=\"noindent\">(where we assume that <code>foo</code> returns type <code>int</code>). </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Duplication-of-Side-Effects.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Duplication-of-Side-Effects.html</a>\n  </p>\n</div>\n","self_002dreferential-macros":"<h1 class=\"subsection\" id=\"Self_002dReferential-Macros\">3.10.5 Self-Referential Macros</h1> <p> A self-referential macro is one whose name appears in its definition. Recall that all macro definitions are rescanned for more macros to replace. If the self-reference were considered a use of the macro, it would produce an infinitely large expansion. To prevent this, the self-reference is not considered a macro call. It is passed into the preprocessor output unchanged. Consider an example: </p>\n<pre class=\"smallexample\">#define foo (4 + foo)</pre> <p class=\"noindent\">where <code>foo</code> is also a variable in your program. </p>\n<p>Following the ordinary rules, each reference to <code>foo</code> will expand into <code>(4 + foo)</code>; then this will be rescanned and will expand into <code>(4 + (4 + foo))</code>; and so on until the computer runs out of memory. </p>\n<p>The self-reference rule cuts this process short after one step, at <code>(4 + foo)</code>. Therefore, this macro definition has the possibly useful effect of causing the program to add 4 to the value of <code>foo</code> wherever <code>foo</code> is referred to. </p>\n<p>In most cases, it is a bad idea to take advantage of this feature. A person reading the program who sees that <code>foo</code> is a variable will not expect that it is a macro as well. The reader will come across the identifier <code>foo</code> in the program and think its value should be that of the variable <code>foo</code>, whereas in fact the value is four greater. </p>\n<p>One common, useful use of self-reference is to create a macro which expands to itself. If you write </p>\n<pre class=\"smallexample\">#define EPERM EPERM</pre> <p class=\"noindent\">then the macro <code>EPERM</code> expands to <code>EPERM</code>. Effectively, it is left alone by the preprocessor whenever it's used in running text. You can tell that it's a macro with ‘<code>#ifdef</code>’. You might do this if you want to define numeric constants with an <code>enum</code>, but have ‘<code>#ifdef</code>’ be true for each constant. </p>\n<p>If a macro <code>x</code> expands to use a macro <code>y</code>, and the expansion of <code>y</code> refers to the macro <code>x</code>, that is an indirect self-reference of <code>x</code>. <code>x</code> is not expanded in this case either. Thus, if we have </p>\n<pre class=\"smallexample\">#define x (4 + y)\n#define y (2 * x)</pre> <p class=\"noindent\">then <code>x</code> and <code>y</code> expand as follows: </p>\n<pre class=\"smallexample\">x    ==&gt; (4 + y)\n     ==&gt; (4 + (2 * x))\n\ny    ==&gt; (2 * x)\n     ==&gt; (2 * (4 + y))</pre> <p class=\"noindent\">Each macro is expanded when it appears in the definition of the other macro, but not when it indirectly appears in its own definition. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Self_002dReferential-Macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Self_002dReferential-Macros.html</a>\n  </p>\n</div>\n","argument-prescan":"<h1 class=\"subsection\" id=\"Argument-Prescan\">3.10.6 Argument Prescan</h1> <p> Macro arguments are completely macro-expanded before they are substituted into a macro body, unless they are stringified or pasted with other tokens. After substitution, the entire macro body, including the substituted arguments, is scanned again for macros to be expanded. The result is that the arguments are scanned <em>twice</em> to expand macro calls in them. </p>\n<p>Most of the time, this has no effect. If the argument contained any macro calls, they are expanded during the first scan. The result therefore contains no macro calls, so the second scan does not change it. If the argument were substituted as given, with no prescan, the single remaining scan would find the same macro calls and produce the same results. </p>\n<p>You might expect the double scan to change the results when a self-referential macro is used in an argument of another macro (see <a href=\"self_002dreferential-macros#Self_002dReferential-Macros\">Self-Referential Macros</a>): the self-referential macro would be expanded once in the first scan, and a second time in the second scan. However, this is not what happens. The self-references that do not expand in the first scan are marked so that they will not expand in the second scan either. </p>\n<p>You might wonder, “Why mention the prescan, if it makes no difference? And why not skip it and make the preprocessor faster?” The answer is that the prescan does make a difference in three special cases: </p>\n<ul> <li>Nested calls to a macro. <p>We say that nested calls to a macro occur when a macro's argument contains a call to that very macro. For example, if <code>f</code> is a macro that expects one argument, <code>f (f (1))</code> is a nested pair of calls to <code>f</code>. The desired expansion is made by expanding <code>f (1)</code> and substituting that into the definition of <code>f</code>. The prescan causes the expected result to happen. Without the prescan, <code>f (1)</code> itself would be substituted as an argument, and the inner use of <code>f</code> would appear during the main scan as an indirect self-reference and would not be expanded. </p>\n</li>\n<li>Macros that call other macros that stringify or concatenate. <p>If an argument is stringified or concatenated, the prescan does not occur. If you <em>want</em> to expand a macro, then stringify or concatenate its expansion, you can do that by causing one macro to call another macro that does the stringification or concatenation. For instance, if you have </p>\n<pre class=\"smallexample\">#define AFTERX(x) X_ ## x\n#define XAFTERX(x) AFTERX(x)\n#define TABLESIZE 1024\n#define BUFSIZE TABLESIZE</pre> <p>then <code>AFTERX(BUFSIZE)</code> expands to <code>X_BUFSIZE</code>, and <code>XAFTERX(BUFSIZE)</code> expands to <code>X_1024</code>. (Not to <code>X_TABLESIZE</code>. Prescan always does a complete expansion.) </p>\n</li>\n<li>Macros used in arguments, whose expansions contain unshielded commas. <p>This can cause a macro expanded on the second scan to be called with the wrong number of arguments. Here is an example: </p>\n<pre class=\"smallexample\">#define foo  a,b\n#define bar(x) lose(x)\n#define lose(x) (1 + (x))</pre> <p>We would like <code>bar(foo)</code> to turn into <code>(1 + (foo))</code>, which would then turn into <code>(1 + (a,b))</code>. Instead, <code>bar(foo)</code> expands into <code>lose(a,b)</code>, and you get an error because <code>lose</code> requires a single argument. In this case, the problem is easily solved by the same parentheses that ought to be used to prevent misnesting of arithmetic operations: </p>\n<pre class=\"smallexample\">#define foo (a,b)\nor\n     #define bar(x) lose((x))</pre> <p>The extra pair of parentheses prevents the comma in <code>foo</code>'s definition from being interpreted as an argument separator. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Argument-Prescan.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Argument-Prescan.html</a>\n  </p>\n</div>\n","newlines-in-arguments":"<h1 class=\"subsection\" id=\"Newlines-in-Arguments\">3.10.7 Newlines in Arguments</h1> <p> The invocation of a function-like macro can extend over many logical lines. However, in the present implementation, the entire expansion comes out on one line. Thus line numbers emitted by the compiler or debugger refer to the line the invocation started on, which might be different to the line containing the argument causing the problem. </p>\n<p>Here is an example illustrating this: </p>\n<pre class=\"smallexample\">#define ignore_second_arg(a,b,c) a; c\n\nignore_second_arg (foo (),\n                   ignored (),\n                   syntax error);</pre> <p class=\"noindent\">The syntax error triggered by the tokens <code>syntax error</code> results in an error message citing line three—the line of ignore_second_arg— even though the problematic code comes from line five. </p>\n<p>We consider this a bug, and intend to fix it in the near future. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Newlines-in-Arguments.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Newlines-in-Arguments.html</a>\n  </p>\n</div>\n","conditionals":"<h1 class=\"chapter\" id=\"Conditionals\">4 Conditionals</h1> <p> A conditional is a directive that instructs the preprocessor to select whether or not to include a chunk of code in the final token stream passed to the compiler. Preprocessor conditionals can test arithmetic expressions, or whether a name is defined as a macro, or both simultaneously using the special <code>defined</code> operator. </p>\n<p>A conditional in the C preprocessor resembles in some ways an <code>if</code> statement in C, but it is important to understand the difference between them. The condition in an <code>if</code> statement is tested during the execution of your program. Its purpose is to allow your program to behave differently from run to run, depending on the data it is operating on. The condition in a preprocessing conditional directive is tested when your program is compiled. Its purpose is to allow different code to be included in the program depending on the situation at the time of compilation. </p>\n<p>However, the distinction is becoming less clear. Modern compilers often do test <code>if</code> statements when a program is compiled, if their conditions are known not to vary at run time, and eliminate code which can never be executed. If you can count on your compiler to do this, you may find that your program is more readable if you use <code>if</code> statements with constant conditions (perhaps determined by macros). Of course, you can only use this to exclude code, not type definitions or other preprocessing directives, and you can only do it if the code remains syntactically valid when it is not to be used. </p>\n<p>GCC version 3 eliminates this kind of never-executed code even when not optimizing. Older versions did it only when optimizing. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"conditional-uses#Conditional-Uses\">Conditional Uses</a> </li>\n<li>\n<a accesskey=\"2\" href=\"conditional-syntax#Conditional-Syntax\">Conditional Syntax</a> </li>\n<li>\n<a accesskey=\"3\" href=\"deleted-code#Deleted-Code\">Deleted Code</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditionals.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditionals.html</a>\n  </p>\n</div>\n","conditional-uses":"<h1 class=\"section\" id=\"Conditional-Uses\">4.1 Conditional Uses</h1> <p>There are three general reasons to use a conditional. </p>\n<ul> <li>A program may need to use different code depending on the machine or operating system it is to run on. In some cases the code for one operating system may be erroneous on another operating system; for example, it might refer to data types or constants that do not exist on the other system. When this happens, it is not enough to avoid executing the invalid code. Its mere presence will cause the compiler to reject the program. With a preprocessing conditional, the offending code can be effectively excised from the program when it is not valid. </li>\n<li>You may want to be able to compile the same source file into two different programs. One version might make frequent time-consuming consistency checks on its intermediate data, or print the values of those data for debugging, and the other not. </li>\n<li>A conditional whose condition is always false is one way to exclude code from the program but keep it as a sort of comment for future reference. </li>\n</ul> <p>Simple programs that do not need system-specific logic or complex debugging hooks generally will not need to use preprocessing conditionals. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditional-Uses.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditional-Uses.html</a>\n  </p>\n</div>\n","conditional-syntax":"<h1 class=\"section\" id=\"Conditional-Syntax\">4.2 Conditional Syntax</h1> <p>A conditional in the C preprocessor begins with a conditional directive: ‘<code>#if</code>’, ‘<code>#ifdef</code>’ or ‘<code>#ifndef</code>’. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"ifdef#Ifdef\">Ifdef</a> </li>\n<li>\n<a accesskey=\"2\" href=\"if#If\">If</a> </li>\n<li>\n<a accesskey=\"3\" href=\"defined#Defined\">Defined</a> </li>\n<li>\n<a accesskey=\"4\" href=\"else#Else\">Else</a> </li>\n<li>\n<a accesskey=\"5\" href=\"elif#Elif\">Elif</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditional-Syntax.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Conditional-Syntax.html</a>\n  </p>\n</div>\n","ifdef":"<h1 class=\"subsection\" id=\"Ifdef\">4.2.1 Ifdef</h1> <p> The simplest sort of conditional is </p>\n<pre class=\"smallexample\">#ifdef <var>MACRO</var>\n\n<var>controlled text</var>\n\n#endif /* <var>MACRO</var> */</pre> <p>This block is called a conditional group. <var>controlled text</var> will be included in the output of the preprocessor if and only if <var>MACRO</var> is defined. We say that the conditional succeeds if <var>MACRO</var> is defined, fails if it is not. </p>\n<p>The <var>controlled text</var> inside of a conditional can include preprocessing directives. They are executed only if the conditional succeeds. You can nest conditional groups inside other conditional groups, but they must be completely nested. In other words, ‘<code>#endif</code>’ always matches the nearest ‘<code>#ifdef</code>’ (or ‘<code>#ifndef</code>’, or ‘<code>#if</code>’). Also, you cannot start a conditional group in one file and end it in another. </p>\n<p>Even if a conditional fails, the <var>controlled text</var> inside it is still run through initial transformations and tokenization. Therefore, it must all be lexically valid C. Normally the only way this matters is that all comments and string literals inside a failing conditional group must still be properly ended. </p>\n<p>The comment following the ‘<code>#endif</code>’ is not required, but it is a good practice if there is a lot of <var>controlled text</var>, because it helps people match the ‘<code>#endif</code>’ to the corresponding ‘<code>#ifdef</code>’. Older programs sometimes put <var>MACRO</var> directly after the ‘<code>#endif</code>’ without enclosing it in a comment. This is invalid code according to the C standard. CPP accepts it with a warning. It never affects which ‘<code>#ifndef</code>’ the ‘<code>#endif</code>’ matches. </p>\n<p>Sometimes you wish to use some code if a macro is <em>not</em> defined. You can do this by writing ‘<code>#ifndef</code>’ instead of ‘<code>#ifdef</code>’. One common use of ‘<code>#ifndef</code>’ is to include code only the first time a header file is included. See <a href=\"once_002donly-headers#Once_002dOnly-Headers\">Once-Only Headers</a>. </p>\n<p>Macro definitions can vary between compilations for several reasons. Here are some samples. </p>\n<ul> <li>Some macros are predefined on each kind of machine (see <a href=\"system_002dspecific-predefined-macros#System_002dspecific-Predefined-Macros\">System-specific Predefined Macros</a>). This allows you to provide code specially tuned for a particular machine. </li>\n<li>System header files define more macros, associated with the features they implement. You can test these macros with conditionals to avoid using a system feature on a machine where it is not implemented. </li>\n<li>Macros can be defined or undefined with the <code>-D</code> and <code>-U</code> command line options when you compile the program. You can arrange to compile the same source file into two different programs by choosing a macro name to specify which program you want, writing conditionals to test whether or how this macro is defined, and then controlling the state of the macro with command line options, perhaps set in the Makefile. See <a href=\"invocation#Invocation\">Invocation</a>. </li>\n<li>Your program might have a special header file (often called <code>config.h</code>) that is adjusted when the program is compiled. It can define or not define macros depending on the features of the system and the desired capabilities of the program. The adjustment can be automated by a tool such as <code>autoconf</code>, or done by hand. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Ifdef.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Ifdef.html</a>\n  </p>\n</div>\n","if":"<h1 class=\"subsection\" id=\"If\">4.2.2 If</h1> <p>The ‘<code>#if</code>’ directive allows you to test the value of an arithmetic expression, rather than the mere existence of one macro. Its syntax is </p>\n<pre class=\"smallexample\">#if <var>expression</var>\n\n<var>controlled text</var>\n\n#endif /* <var>expression</var> */</pre> <p><var>expression</var> is a C expression of integer type, subject to stringent restrictions. It may contain </p>\n<ul> <li>Integer constants. </li>\n<li>Character constants, which are interpreted as they would be in normal code. </li>\n<li>Arithmetic operators for addition, subtraction, multiplication, division, bitwise operations, shifts, comparisons, and logical operations (<code>&amp;&amp;</code> and <code>||</code>). The latter two obey the usual short-circuiting rules of standard C. </li>\n<li>Macros. All macros in the expression are expanded before actual computation of the expression's value begins. </li>\n<li>Uses of the <code>defined</code> operator, which lets you check whether macros are defined in the middle of an ‘<code>#if</code>’. </li>\n<li>Identifiers that are not macros, which are all considered to be the number zero. This allows you to write <code>#if MACRO</code> instead of <code>#ifdef MACRO</code>, if you know that MACRO, when defined, will always have a nonzero value. Function-like macros used without their function call parentheses are also treated as zero. <p>In some contexts this shortcut is undesirable. The <code>-Wundef</code> option causes GCC to warn whenever it encounters an identifier which is not a macro in an ‘<code>#if</code>’. </p>\n</li>\n</ul> <p>The preprocessor does not know anything about types in the language. Therefore, <code>sizeof</code> operators are not recognized in ‘<code>#if</code>’, and neither are <code>enum</code> constants. They will be taken as identifiers which are not macros, and replaced by zero. In the case of <code>sizeof</code>, this is likely to cause the expression to be invalid. </p>\n<p>The preprocessor calculates the value of <var>expression</var>. It carries out all calculations in the widest integer type known to the compiler; on most machines supported by GCC this is 64 bits. This is not the same rule as the compiler uses to calculate the value of a constant expression, and may give different results in some cases. If the value comes out to be nonzero, the ‘<code>#if</code>’ succeeds and the <var>controlled text</var> is included; otherwise it is skipped. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/If.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/If.html</a>\n  </p>\n</div>\n","defined":"<h1 class=\"subsection\" id=\"Defined\">4.2.3 Defined</h1> <p>The special operator <code>defined</code> is used in ‘<code>#if</code>’ and ‘<code>#elif</code>’ expressions to test whether a certain name is defined as a macro. <code>defined </code><var>name</var> and <code>defined (</code><var>name</var><code>)</code> are both expressions whose value is 1 if <var>name</var> is defined as a macro at the current point in the program, and 0 otherwise. Thus, <code>#if defined MACRO</code> is precisely equivalent to <code>#ifdef MACRO</code>. </p>\n<p><code>defined</code> is useful when you wish to test more than one macro for existence at once. For example, </p>\n<pre class=\"smallexample\">#if defined (__vax__) || defined (__ns16000__)</pre> <p class=\"noindent\">would succeed if either of the names <code>__vax__</code> or <code>__ns16000__</code> is defined as a macro. </p>\n<p>Conditionals written like this: </p>\n<pre class=\"smallexample\">#if defined BUFSIZE &amp;&amp; BUFSIZE &gt;= 1024</pre> <p class=\"noindent\">can generally be simplified to just <code>#if BUFSIZE &gt;= 1024</code>, since if <code>BUFSIZE</code> is not defined, it will be interpreted as having the value zero. </p>\n<p>If the <code>defined</code> operator appears as a result of a macro expansion, the C standard says the behavior is undefined. GNU cpp treats it as a genuine <code>defined</code> operator and evaluates it normally. It will warn wherever your code uses this feature if you use the command-line option <code>-pedantic</code>, since other compilers may handle it differently. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Defined.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Defined.html</a>\n  </p>\n</div>\n","else":"<h1 class=\"subsection\" id=\"Else\">4.2.4 Else</h1> <p>The ‘<code>#else</code>’ directive can be added to a conditional to provide alternative text to be used if the condition fails. This is what it looks like: </p>\n<pre class=\"smallexample\">#if <var>expression</var>\n<var>text-if-true</var>\n#else /* Not <var>expression</var> */\n<var>text-if-false</var>\n#endif /* Not <var>expression</var> */</pre> <p class=\"noindent\">If <var>expression</var> is nonzero, the <var>text-if-true</var> is included and the <var>text-if-false</var> is skipped. If <var>expression</var> is zero, the opposite happens. </p>\n<p>You can use ‘<code>#else</code>’ with ‘<code>#ifdef</code>’ and ‘<code>#ifndef</code>’, too. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Else.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Else.html</a>\n  </p>\n</div>\n","elif":"<h1 class=\"subsection\" id=\"Elif\">4.2.5 Elif</h1> <p>One common case of nested conditionals is used to check for more than two possible alternatives. For example, you might have </p>\n<pre class=\"smallexample\">#if X == 1\n...\n#else /* X != 1 */\n#if X == 2\n...\n#else /* X != 2 */\n...\n#endif /* X != 2 */\n#endif /* X != 1 */</pre> <p>Another conditional directive, ‘<code>#elif</code>’, allows this to be abbreviated as follows: </p>\n<pre class=\"smallexample\">#if X == 1\n...\n#elif X == 2\n...\n#else /* X != 2 and X != 1*/\n...\n#endif /* X != 2 and X != 1*/</pre> <p>‘<code>#elif</code>’ stands for “else if”. Like ‘<code>#else</code>’, it goes in the middle of a conditional group and subdivides it; it does not require a matching ‘<code>#endif</code>’ of its own. Like ‘<code>#if</code>’, the ‘<code>#elif</code>’ directive includes an expression to be tested. The text following the ‘<code>#elif</code>’ is processed only if the original ‘<code>#if</code>’-condition failed and the ‘<code>#elif</code>’ condition succeeds. </p>\n<p>More than one ‘<code>#elif</code>’ can go in the same conditional group. Then the text after each ‘<code>#elif</code>’ is processed only if the ‘<code>#elif</code>’ condition succeeds after the original ‘<code>#if</code>’ and all previous ‘<code>#elif</code>’ directives within it have failed. </p>\n<p>‘<code>#else</code>’ is allowed after any number of ‘<code>#elif</code>’ directives, but ‘<code>#elif</code>’ may not follow ‘<code>#else</code>’. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Elif.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Elif.html</a>\n  </p>\n</div>\n","deleted-code":"<h1 class=\"section\" id=\"Deleted-Code\">4.3 Deleted Code</h1> <p> If you replace or delete a part of the program but want to keep the old code around for future reference, you often cannot simply comment it out. Block comments do not nest, so the first comment inside the old code will end the commenting-out. The probable result is a flood of syntax errors. </p>\n<p>One way to avoid this problem is to use an always-false conditional instead. For instance, put <code>#if 0</code> before the deleted code and <code>#endif</code> after it. This works even if the code being turned off contains conditionals, but they must be entire conditionals (balanced ‘<code>#if</code>’ and ‘<code>#endif</code>’). </p>\n<p>Some people use <code>#ifdef notdef</code> instead. This is risky, because <code>notdef</code> might be accidentally defined as a macro, and then the conditional would succeed. <code>#if 0</code> can be counted on to fail. </p>\n<p>Do not use <code>#if 0</code> for comments which are not C code. Use a real comment, instead. The interior of <code>#if 0</code> must consist of complete tokens; in particular, single-quote characters must balance. Comments often contain unbalanced single-quote characters (known in English as apostrophes). These confuse <code>#if 0</code>. They don't confuse ‘<code>/*</code>’. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Deleted-Code.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Deleted-Code.html</a>\n  </p>\n</div>\n","diagnostics":"<h1 class=\"chapter\" id=\"Diagnostics\">5 Diagnostics</h1> <p> The directive ‘<code>#error</code>’ causes the preprocessor to report a fatal error. The tokens forming the rest of the line following ‘<code>#error</code>’ are used as the error message. </p>\n<p>You would use ‘<code>#error</code>’ inside of a conditional that detects a combination of parameters which you know the program does not properly support. For example, if you know that the program will not run properly on a VAX, you might write </p>\n<pre class=\"smallexample\">#ifdef __vax__\n#error \"Won't work on VAXen.  See comments at get_last_object.\"\n#endif</pre> <p>If you have several configuration parameters that must be set up by the installation in a consistent way, you can use conditionals to detect an inconsistency and report it with ‘<code>#error</code>’. For example, </p>\n<pre class=\"smallexample\">#if !defined(FOO) &amp;&amp; defined(BAR)\n#error \"BAR requires FOO.\"\n#endif</pre> <p>The directive ‘<code>#warning</code>’ is like ‘<code>#error</code>’, but causes the preprocessor to issue a warning and continue preprocessing. The tokens following ‘<code>#warning</code>’ are used as the warning message. </p>\n<p>You might use ‘<code>#warning</code>’ in obsolete header files, with a message directing the user to the header file which should be used instead. </p>\n<p>Neither ‘<code>#error</code>’ nor ‘<code>#warning</code>’ macro-expands its argument. Internal whitespace sequences are each replaced with a single space. The line must consist of complete tokens. It is wisest to make the argument of these directives be a single string constant; this avoids problems with apostrophes and the like. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Diagnostics.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Diagnostics.html</a>\n  </p>\n</div>\n","line-control":"<h1 class=\"chapter\" id=\"Line-Control\">6 Line Control</h1> <p> The C preprocessor informs the C compiler of the location in your source code where each token came from. Presently, this is just the file name and line number. All the tokens resulting from macro expansion are reported as having appeared on the line of the source file where the outermost macro was used. We intend to be more accurate in the future. </p>\n<p>If you write a program which generates source code, such as the <code>bison</code> parser generator, you may want to adjust the preprocessor's notion of the current file name and line number by hand. Parts of the output from <code>bison</code> are generated from scratch, other parts come from a standard parser file. The rest are copied verbatim from <code>bison</code>'s input. You would like compiler error messages and symbolic debuggers to be able to refer to <code>bison</code>'s input file. </p>\n<p><code>bison</code> or any such program can arrange this by writing ‘<code>#line</code>’ directives into the output file. ‘<code>#line</code>’ is a directive that specifies the original line number and source file name for subsequent input in the current preprocessor input file. ‘<code>#line</code>’ has three variants: </p>\n<dl> <dt>\n<code>#line </code><var>linenum</var>\n</dt>\n<dd>\n<var>linenum</var> is a non-negative decimal integer constant. It specifies the line number which should be reported for the following line of input. Subsequent lines are counted from <var>linenum</var>. </dd>\n<dt>\n<code>#line </code><var>linenum</var> <var>filename</var>\n</dt>\n<dd>\n<var>linenum</var> is the same as for the first form, and has the same effect. In addition, <var>filename</var> is a string constant. The following line and all subsequent lines are reported to come from the file it specifies, until something else happens to change that. <var>filename</var> is interpreted according to the normal rules for a string constant: backslash escapes are interpreted. This is different from ‘<code>#include</code>’. <p>Previous versions of CPP did not interpret escapes in ‘<code>#line</code>’; we have changed it because the standard requires they be interpreted, and most other compilers do. </p>\n</dd>\n<dt>\n<code>#line </code><var>anything else</var>\n</dt>\n<dd>\n<var>anything else</var> is checked for macro calls, which are expanded. The result should match one of the above two forms. </dd>\n</dl> <p>‘<code>#line</code>’ directives alter the results of the <code>__FILE__</code> and <code>__LINE__</code> predefined macros from that point on. See <a href=\"standard-predefined-macros#Standard-Predefined-Macros\">Standard Predefined Macros</a>. They do not have any effect on ‘<code>#include</code>’'s idea of the directory containing the current file. This is a change from GCC 2.95. Previously, a file reading </p>\n<pre class=\"smallexample\">#line 1 \"../src/gram.y\"\n#include \"gram.h\"</pre> <p>would search for <code>gram.h</code> in <code>../src</code>, then the <code>-I</code> chain; the directory containing the physical source file would not be searched. In GCC 3.0 and later, the ‘<code>#include</code>’ is not affected by the presence of a ‘<code>#line</code>’ referring to a different directory. </p>\n<p>We made this change because the old behavior caused problems when generated source files were transported between machines. For instance, it is common practice to ship generated parsers with a source release, so that people building the distribution do not need to have yacc or Bison installed. These files frequently have ‘<code>#line</code>’ directives referring to the directory tree of the system where the distribution was created. If GCC tries to search for headers in those directories, the build is likely to fail. </p>\n<p>The new behavior can cause failures too, if the generated file is not in the same directory as its source and it attempts to include a header which would be visible searching from the directory containing the source file. However, this problem is easily solved with an additional <code>-I</code> switch on the command line. The failures caused by the old semantics could sometimes be corrected only by editing the generated files, which is difficult and error-prone. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Line-Control.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Line-Control.html</a>\n  </p>\n</div>\n","pragmas":"<h1 class=\"chapter\" id=\"Pragmas\">7 Pragmas</h1> <p>The ‘<code>#pragma</code>’ directive is the method specified by the C standard for providing additional information to the compiler, beyond what is conveyed in the language itself. Three forms of this directive (commonly known as pragmas) are specified by the 1999 C standard. A C compiler is free to attach any meaning it likes to other pragmas. </p>\n<p>GCC has historically preferred to use extensions to the syntax of the language, such as <code>__attribute__</code>, for this purpose. However, GCC does define a few pragmas of its own. These mostly have effects on the entire translation unit or source file. </p>\n<p>In GCC version 3, all GNU-defined, supported pragmas have been given a <code>GCC</code> prefix. This is in line with the <code>STDC</code> prefix on all pragmas defined by C99. For backward compatibility, pragmas which were recognized by previous versions are still recognized without the <code>GCC</code> prefix, but that usage is deprecated. Some older pragmas are deprecated in their entirety. They are not recognized with the <code>GCC</code> prefix. See <a href=\"obsolete-features#Obsolete-Features\">Obsolete Features</a>. </p>\n<p>C99 introduces the <code>_Pragma</code> operator. This feature addresses a major problem with ‘<code>#pragma</code>’: being a directive, it cannot be produced as the result of macro expansion. <code>_Pragma</code> is an operator, much like <code>sizeof</code> or <code>defined</code>, and can be embedded in a macro. </p>\n<p>Its syntax is <code>_Pragma (</code><var>string-literal</var><code>)</code>, where <var>string-literal</var> can be either a normal or wide-character string literal. It is destringized, by replacing all ‘<code>\\\\</code>’ with a single ‘<code>\\</code>’ and all ‘<code>\\\"</code>’ with a ‘<code>\"</code>’. The result is then processed as if it had appeared as the right hand side of a ‘<code>#pragma</code>’ directive. For example, </p>\n<pre class=\"smallexample\">_Pragma (\"GCC dependency \\\"parse.y\\\"\")</pre> <p class=\"noindent\">has the same effect as <code>#pragma GCC dependency \"parse.y\"</code>. The same effect could be achieved using macros, for example </p>\n<pre class=\"smallexample\">#define DO_PRAGMA(x) _Pragma (#x)\nDO_PRAGMA (GCC dependency \"parse.y\")</pre> <p>The standard is unclear on where a <code>_Pragma</code> operator can appear. The preprocessor does not accept it within a preprocessing conditional directive like ‘<code>#if</code>’. To be safe, you are probably best keeping it out of directives other than ‘<code>#define</code>’, and putting it on a line of its own. </p>\n<p>This manual documents the pragmas which are meaningful to the preprocessor itself. Other pragmas are meaningful to the C or C++ compilers. They are documented in the GCC manual. </p>\n<p>GCC plugins may provide their own pragmas. </p>\n<dl> <dt>\n<code>#pragma GCC dependency</code>\n</dt>\n<dd>\n<code>#pragma GCC dependency</code> allows you to check the relative dates of the current file and another file. If the other file is more recent than the current file, a warning is issued. This is useful if the current file is derived from the other file, and should be regenerated. The other file is searched for using the normal include search path. Optional trailing text can be used to give more information in the warning message. <pre class=\"smallexample\">#pragma GCC dependency \"parse.y\"\n#pragma GCC dependency \"/usr/include/time.h\" rerun fixincludes</pre> </dd>\n<dt>\n<code>#pragma GCC poison</code>\n</dt>\n<dd>Sometimes, there is an identifier that you want to remove completely from your program, and make sure that it never creeps back in. To enforce this, you can poison the identifier with this pragma. <code>#pragma GCC poison</code> is followed by a list of identifiers to poison. If any of those identifiers appears anywhere in the source after the directive, it is a hard error. For example, <pre class=\"smallexample\">#pragma GCC poison printf sprintf fprintf\nsprintf(some_string, \"hello\");</pre> <p class=\"noindent\">will produce an error. </p>\n<p>If a poisoned identifier appears as part of the expansion of a macro which was defined before the identifier was poisoned, it will <em>not</em> cause an error. This lets you poison an identifier without worrying about system headers defining macros that use it. </p>\n<p>For example, </p>\n<pre class=\"smallexample\">#define strrchr rindex\n#pragma GCC poison rindex\nstrrchr(some_string, 'h');</pre> <p class=\"noindent\">will not produce an error. </p>\n</dd>\n<dt>\n<code>#pragma GCC system_header</code>\n</dt>\n<dd>This pragma takes no arguments. It causes the rest of the code in the current file to be treated as if it came from a system header. See <a href=\"system-headers#System-Headers\">System Headers</a>. </dd>\n<dt>\n<code>#pragma GCC warning</code><dt>\n<code>#pragma GCC error</code>\n</dt>\n</dt>\n<dd>\n<code>#pragma GCC warning \"message\"</code> causes the preprocessor to issue a warning diagnostic with the text ‘<code>message</code>’. The message contained in the pragma must be a single string literal. Similarly, <code>#pragma GCC error \"message\"</code> issues an error message. Unlike the ‘<code>#warning</code>’ and ‘<code>#error</code>’ directives, these pragmas can be embedded in preprocessor macros using ‘<code>_Pragma</code>’. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Pragmas.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Pragmas.html</a>\n  </p>\n</div>\n","other-directives":"<h1 class=\"chapter\" id=\"Other-Directives\">8 Other Directives</h1> <p>The ‘<code>#ident</code>’ directive takes one argument, a string constant. On some systems, that string constant is copied into a special segment of the object file. On other systems, the directive is ignored. The ‘<code>#sccs</code>’ directive is a synonym for ‘<code>#ident</code>’. </p>\n<p>These directives are not part of the C standard, but they are not official GNU extensions either. What historical information we have been able to find, suggests they originated with System V. </p>\n<p>The null directive consists of a ‘<code>#</code>’ followed by a newline, with only whitespace (including comments) in between. A null directive is understood as a preprocessing directive but has no effect on the preprocessor output. The primary significance of the existence of the null directive is that an input line consisting of just a ‘<code>#</code>’ will produce no output, rather than a line of output containing just a ‘<code>#</code>’. Supposedly some old C programs contain such lines. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Other-Directives.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Other-Directives.html</a>\n  </p>\n</div>\n","preprocessor-output":"<h1 class=\"chapter\" id=\"Preprocessor-Output\">9 Preprocessor Output</h1> <p>When the C preprocessor is used with the C, C++, or Objective-C compilers, it is integrated into the compiler and communicates a stream of binary tokens directly to the compiler's parser. However, it can also be used in the more conventional standalone mode, where it produces textual output.  </p>\n<p>The output from the C preprocessor looks much like the input, except that all preprocessing directive lines have been replaced with blank lines and all comments with spaces. Long runs of blank lines are discarded. </p>\n<p>The ISO standard specifies that it is implementation defined whether a preprocessor preserves whitespace between tokens, or replaces it with e.g. a single space. In GNU CPP, whitespace between tokens is collapsed to become a single space, with the exception that the first token on a non-directive line is preceded with sufficient spaces that it appears in the same column in the preprocessed output that it appeared in the original source file. This is so the output is easy to read. See <a href=\"differences-from-previous-versions#Differences-from-previous-versions\">Differences from previous versions</a>. CPP does not insert any whitespace where there was none in the original source, except where necessary to prevent an accidental token paste. </p>\n<p>Source file name and line number information is conveyed by lines of the form </p>\n<pre class=\"smallexample\"># <var>linenum</var> <var>filename</var> <var>flags</var></pre> <p class=\"noindent\">These are called linemarkers. They are inserted as needed into the output (but never within a string or character constant). They mean that the following line originated in file <var>filename</var> at line <var>linenum</var>. <var>filename</var> will never contain any non-printing characters; they are replaced with octal escape sequences. </p>\n<p>After the file name comes zero or more flags, which are ‘<code>1</code>’, ‘<code>2</code>’, ‘<code>3</code>’, or ‘<code>4</code>’. If there are multiple flags, spaces separate them. Here is what the flags mean: </p>\n<dl> <dt>‘<code>1</code>’</dt>\n<dd>This indicates the start of a new file. </dd>\n<dt>‘<code>2</code>’</dt>\n<dd>This indicates returning to a file (after having included another file). </dd>\n<dt>‘<code>3</code>’</dt>\n<dd>This indicates that the following text comes from a system header file, so certain warnings should be suppressed. </dd>\n<dt>‘<code>4</code>’</dt>\n<dd>This indicates that the following text should be treated as being wrapped in an implicit <code>extern \"C\"</code> block.  </dd>\n</dl> <p>As an extension, the preprocessor accepts linemarkers in non-assembler input files. They are treated like the corresponding ‘<code>#line</code>’ directive, (see <a href=\"line-control#Line-Control\">Line Control</a>), except that trailing flags are permitted, and are interpreted with the meanings described above. If multiple flags are given, they must be in ascending order. </p>\n<p>Some directives may be duplicated in the output of the preprocessor. These are ‘<code>#ident</code>’ (always), ‘<code>#pragma</code>’ (only if the preprocessor does not handle the pragma itself), and ‘<code>#define</code>’ and ‘<code>#undef</code>’ (with certain debugging options). If this happens, the ‘<code>#</code>’ of the directive will always be in the first column, and there will be no space between the ‘<code>#</code>’ and the directive name. If macro expansion happens to generate tokens which might be mistaken for a duplicated directive, a space will be inserted between the ‘<code>#</code>’ and the directive name. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Preprocessor-Output.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Preprocessor-Output.html</a>\n  </p>\n</div>\n","traditional-mode":"<h1 class=\"chapter\" id=\"Traditional-Mode\">10 Traditional Mode</h1> <p>Traditional (pre-standard) C preprocessing is rather different from the preprocessing specified by the standard. When GCC is given the <code>-traditional-cpp</code> option, it attempts to emulate a traditional preprocessor. </p>\n<p>GCC versions 3.2 and later only support traditional mode semantics in the preprocessor, and not in the compiler front ends. This chapter outlines the traditional preprocessor semantics we implemented. </p>\n<p>The implementation does not correspond precisely to the behavior of earlier versions of GCC, nor to any true traditional preprocessor. After all, inconsistencies among traditional implementations were a major motivation for C standardization. However, we intend that it should be compatible with true traditional preprocessors in all ways that actually matter. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"traditional-lexical-analysis#Traditional-lexical-analysis\">Traditional lexical analysis</a> </li>\n<li>\n<a accesskey=\"2\" href=\"traditional-macros#Traditional-macros\">Traditional macros</a> </li>\n<li>\n<a accesskey=\"3\" href=\"traditional-miscellany#Traditional-miscellany\">Traditional miscellany</a> </li>\n<li>\n<a accesskey=\"4\" href=\"traditional-warnings#Traditional-warnings\">Traditional warnings</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-Mode.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-Mode.html</a>\n  </p>\n</div>\n","traditional-lexical-analysis":"<h1 class=\"section\" id=\"Traditional-lexical-analysis\">10.1 Traditional lexical analysis</h1> <p>The traditional preprocessor does not decompose its input into tokens the same way a standards-conforming preprocessor does. The input is simply treated as a stream of text with minimal internal form. </p>\n<p>This implementation does not treat trigraphs (see <a href=\"initial-processing#trigraphs\">trigraphs</a>) specially since they were an invention of the standards committee. It handles arbitrarily-positioned escaped newlines properly and splices the lines as you would expect; many traditional preprocessors did not do this. </p>\n<p>The form of horizontal whitespace in the input file is preserved in the output. In particular, hard tabs remain hard tabs. This can be useful if, for example, you are preprocessing a Makefile. </p>\n<p>Traditional CPP only recognizes C-style block comments, and treats the ‘<code>/*</code>’ sequence as introducing a comment only if it lies outside quoted text. Quoted text is introduced by the usual single and double quotes, and also by an initial ‘<code>&lt;</code>’ in a <code>#include</code> directive. </p>\n<p>Traditionally, comments are completely removed and are not replaced with a space. Since a traditional compiler does its own tokenization of the output of the preprocessor, this means that comments can effectively be used as token paste operators. However, comments behave like separators for text handled by the preprocessor itself, since it doesn't re-lex its input. For example, in </p>\n<pre class=\"smallexample\">#if foo/**/bar</pre> <p class=\"noindent\">‘<code>foo</code>’ and ‘<code>bar</code>’ are distinct identifiers and expanded separately if they happen to be macros. In other words, this directive is equivalent to </p>\n<pre class=\"smallexample\">#if foo bar</pre> <p class=\"noindent\">rather than </p>\n<pre class=\"smallexample\">#if foobar</pre> <p>Generally speaking, in traditional mode an opening quote need not have a matching closing quote. In particular, a macro may be defined with replacement text that contains an unmatched quote. Of course, if you attempt to compile preprocessed output containing an unmatched quote you will get a syntax error. </p>\n<p>However, all preprocessing directives other than <code>#define</code> require matching quotes. For example: </p>\n<pre class=\"smallexample\">#define m This macro's fine and has an unmatched quote\n\"/* This is not a comment.  */\n/* <span class=\"roman\">This is a comment.  The following #include directive\n   is ill-formed.</span>  */\n#include &lt;stdio.h</pre> <p>Just as for the ISO preprocessor, what would be a closing quote can be escaped with a backslash to prevent the quoted text from closing. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-lexical-analysis.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-lexical-analysis.html</a>\n  </p>\n</div>\n","traditional-macros":"<h1 class=\"section\" id=\"Traditional-macros\">10.2 Traditional macros</h1> <p>The major difference between traditional and ISO macros is that the former expand to text rather than to a token sequence. CPP removes all leading and trailing horizontal whitespace from a macro's replacement text before storing it, but preserves the form of internal whitespace. </p>\n<p>One consequence is that it is legitimate for the replacement text to contain an unmatched quote (see <a href=\"traditional-lexical-analysis#Traditional-lexical-analysis\">Traditional lexical analysis</a>). An unclosed string or character constant continues into the text following the macro call. Similarly, the text at the end of a macro's expansion can run together with the text after the macro invocation to produce a single token. </p>\n<p>Normally comments are removed from the replacement text after the macro is expanded, but if the <code>-CC</code> option is passed on the command line comments are preserved. (In fact, the current implementation removes comments even before saving the macro replacement text, but it careful to do it in such a way that the observed effect is identical even in the function-like macro case.) </p>\n<p>The ISO stringification operator ‘<code>#</code>’ and token paste operator ‘<code>##</code>’ have no special meaning. As explained later, an effect similar to these operators can be obtained in a different way. Macro names that are embedded in quotes, either from the main file or after macro replacement, do not expand. </p>\n<p>CPP replaces an unquoted object-like macro name with its replacement text, and then rescans it for further macros to replace. Unlike standard macro expansion, traditional macro expansion has no provision to prevent recursion. If an object-like macro appears unquoted in its replacement text, it will be replaced again during the rescan pass, and so on <em>ad infinitum</em>. GCC detects when it is expanding recursive macros, emits an error message, and continues after the offending macro invocation. </p>\n<pre class=\"smallexample\">#define PLUS +\n#define INC(x) PLUS+x\nINC(foo);\n     ==&gt; ++foo;</pre> <p>Function-like macros are similar in form but quite different in behavior to their ISO counterparts. Their arguments are contained within parentheses, are comma-separated, and can cross physical lines. Commas within nested parentheses are not treated as argument separators. Similarly, a quote in an argument cannot be left unclosed; a following comma or parenthesis that comes before the closing quote is treated like any other character. There is no facility for handling variadic macros. </p>\n<p>This implementation removes all comments from macro arguments, unless the <code>-C</code> option is given. The form of all other horizontal whitespace in arguments is preserved, including leading and trailing whitespace. In particular </p>\n<pre class=\"smallexample\">f( )</pre> <p class=\"noindent\">is treated as an invocation of the macro ‘<code>f</code>’ with a single argument consisting of a single space. If you want to invoke a function-like macro that takes no arguments, you must not leave any whitespace between the parentheses. </p>\n<p>If a macro argument crosses a new line, the new line is replaced with a space when forming the argument. If the previous line contained an unterminated quote, the following line inherits the quoted state. </p>\n<p>Traditional preprocessors replace parameters in the replacement text with their arguments regardless of whether the parameters are within quotes or not. This provides a way to stringize arguments. For example </p>\n<pre class=\"smallexample\">#define str(x) \"x\"\nstr(/* <span class=\"roman\">A comment</span> */some text )\n     ==&gt; \"some text \"</pre> <p class=\"noindent\">Note that the comment is removed, but that the trailing space is preserved. Here is an example of using a comment to effect token pasting. </p>\n<pre class=\"smallexample\">#define suffix(x) foo_/**/x\nsuffix(bar)\n     ==&gt; foo_bar</pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-macros.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-macros.html</a>\n  </p>\n</div>\n","traditional-miscellany":"<h1 class=\"section\" id=\"Traditional-miscellany\">10.3 Traditional miscellany</h1> <p>Here are some things to be aware of when using the traditional preprocessor. </p>\n<ul> <li>Preprocessing directives are recognized only when their leading ‘<code>#</code>’ appears in the first column. There can be no whitespace between the beginning of the line and the ‘<code>#</code>’, but whitespace can follow the ‘<code>#</code>’. </li>\n<li>A true traditional C preprocessor does not recognize ‘<code>#error</code>’ or ‘<code>#pragma</code>’, and may not recognize ‘<code>#elif</code>’. CPP supports all the directives in traditional mode that it supports in ISO mode, including extensions, with the exception that the effects of ‘<code>#pragma GCC poison</code>’ are undefined. </li>\n<li>__STDC__ is not defined. </li>\n<li>If you use digraphs the behavior is undefined. </li>\n<li>If a line that looks like a directive appears within macro arguments, the behavior is undefined. </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-miscellany.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-miscellany.html</a>\n  </p>\n</div>\n","traditional-warnings":"<h1 class=\"section\" id=\"Traditional-warnings\">10.4 Traditional warnings</h1> <p>You can request warnings about features that did not exist, or worked differently, in traditional C with the <code>-Wtraditional</code> option. GCC does not warn about features of ISO C which you must use when you are using a conforming compiler, such as the ‘<code>#</code>’ and ‘<code>##</code>’ operators. </p>\n<p>Presently <code>-Wtraditional</code> warns about: </p>\n<ul> <li>Macro parameters that appear within string literals in the macro body. In traditional C macro replacement takes place within string literals, but does not in ISO C. </li>\n<li>In traditional C, some preprocessor directives did not exist. Traditional preprocessors would only consider a line to be a directive if the ‘<code>#</code>’ appeared in column 1 on the line. Therefore <code>-Wtraditional</code> warns about directives that traditional C understands but would ignore because the ‘<code>#</code>’ does not appear as the first character on the line. It also suggests you hide directives like ‘<code>#pragma</code>’ not understood by traditional C by indenting them. Some traditional implementations would not recognize ‘<code>#elif</code>’, so it suggests avoiding it altogether. </li>\n<li>A function-like macro that appears without an argument list. In some traditional preprocessors this was an error. In ISO C it merely means that the macro is not expanded. </li>\n<li>The unary plus operator. This did not exist in traditional C. </li>\n<li>The ‘<code>U</code>’ and ‘<code>LL</code>’ integer constant suffixes, which were not available in traditional C. (Traditional C does support the ‘<code>L</code>’ suffix for simple long integer constants.) You are not warned about uses of these suffixes in macros defined in system headers. For instance, <code>UINT_MAX</code> may well be defined as <code>4294967295U</code>, but you will not be warned if you use <code>UINT_MAX</code>. <p>You can usually avoid the warning, and the related warning about constants which are so large that they are unsigned, by writing the integer constant in question in hexadecimal, with no U suffix. Take care, though, because this gives the wrong result in exotic cases. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-warnings.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Traditional-warnings.html</a>\n  </p>\n</div>\n","implementation-details":"<h1 class=\"chapter\" id=\"Implementation-Details\">11 Implementation Details</h1> <p>Here we document details of how the preprocessor's implementation affects its user-visible behavior. You should try to avoid undue reliance on behavior described here, as it is possible that it will change subtly in future implementations. </p>\n<p>Also documented here are obsolete features and changes from previous versions of CPP. </p>\n<ul class=\"menu\"> <li>\n<a accesskey=\"1\" href=\"implementation_002ddefined-behavior#Implementation_002ddefined-behavior\">Implementation-defined behavior</a> </li>\n<li>\n<a accesskey=\"2\" href=\"implementation-limits#Implementation-limits\">Implementation limits</a> </li>\n<li>\n<a accesskey=\"3\" href=\"obsolete-features#Obsolete-Features\">Obsolete Features</a> </li>\n<li>\n<a accesskey=\"4\" href=\"differences-from-previous-versions#Differences-from-previous-versions\">Differences from previous versions</a> </li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation-Details.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation-Details.html</a>\n  </p>\n</div>\n","implementation_002ddefined-behavior":"<h1 class=\"section\" id=\"Implementation_002ddefined-behavior\">11.1 Implementation-defined behavior</h1> <p> This is how CPP behaves in all the cases which the C standard describes as implementation-defined. This term means that the implementation is free to do what it likes, but must document its choice and stick to it.  </p>\n<ul> <li>The mapping of physical source file multi-byte characters to the execution character set. <p>The input character set can be specified using the <code>-finput-charset</code> option, while the execution character set may be controlled using the <code>-fexec-charset</code> and <code>-fwide-exec-charset</code> options. </p>\n</li>\n<li>Identifier characters. The C and C++ standards allow identifiers to be composed of ‘<code>_</code>’ and the alphanumeric characters. C++ and C99 also allow universal character names, and C99 further permits implementation-defined characters. GCC currently only permits universal character names if <code>-fextended-identifiers</code> is used, because the implementation of universal character names in identifiers is experimental. <p>GCC allows the ‘<code>$</code>’ character in identifiers as an extension for most targets. This is true regardless of the <code>std=</code> switch, since this extension cannot conflict with standards-conforming programs. When preprocessing assembler, however, dollars are not identifier characters by default. </p>\n<p>Currently the targets that by default do not permit ‘<code>$</code>’ are AVR, IP2K, MMIX, MIPS Irix 3, ARM aout, and PowerPC targets for the AIX operating system. </p>\n<p>You can override the default with <code>-fdollars-in-identifiers</code> or <code>fno-dollars-in-identifiers</code>. See <a href=\"invocation#fdollars_002din_002didentifiers\">fdollars-in-identifiers</a>. </p>\n</li>\n<li>Non-empty sequences of whitespace characters. <p>In textual output, each whitespace sequence is collapsed to a single space. For aesthetic reasons, the first token on each non-directive line of output is preceded with sufficient spaces that it appears in the same column as it did in the original source file. </p>\n</li>\n<li>The numeric value of character constants in preprocessor expressions. <p>The preprocessor and compiler interpret character constants in the same way; i.e. escape sequences such as ‘<code>\\a</code>’ are given the values they would have on the target machine. </p>\n<p>The compiler evaluates a multi-character character constant a character at a time, shifting the previous value left by the number of bits per target character, and then or-ing in the bit-pattern of the new character truncated to the width of a target character. The final bit-pattern is given type <code>int</code>, and is therefore signed, regardless of whether single characters are signed or not (a slight change from versions 3.1 and earlier of GCC). If there are more characters in the constant than would fit in the target <code>int</code> the compiler issues a warning, and the excess leading characters are ignored. </p>\n<p>For example, <code>'ab'</code> for a target with an 8-bit <code>char</code> would be interpreted as ‘<code>(int) ((unsigned char) 'a' * 256 + (unsigned char) 'b')</code>’, and <code>'\\234a'</code> as ‘<code>(int) ((unsigned char) '\\234' * 256 + (unsigned char) 'a')</code>’. </p>\n</li>\n<li>Source file inclusion. <p>For a discussion on how the preprocessor locates header files, <a href=\"include-operation#Include-Operation\">Include Operation</a>. </p>\n</li>\n<li>Interpretation of the filename resulting from a macro-expanded ‘<code>#include</code>’ directive. <p>See <a href=\"computed-includes#Computed-Includes\">Computed Includes</a>. </p>\n</li>\n<li>Treatment of a ‘<code>#pragma</code>’ directive that after macro-expansion results in a standard pragma. <p>No macro expansion occurs on any ‘<code>#pragma</code>’ directive line, so the question does not arise. </p>\n<p>Note that GCC does not yet implement any of the standard pragmas. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation_002ddefined-behavior.html</a>\n  </p>\n</div>\n","implementation-limits":"<h1 class=\"section\" id=\"Implementation-limits\">11.2 Implementation limits</h1> <p> CPP has a small number of internal limits. This section lists the limits which the C standard requires to be no lower than some minimum, and all the others known. It is intended that there should be as few limits as possible. If you encounter an undocumented or inconvenient limit, please report that as a bug. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Bugs.html#Bugs\">Reporting Bugs</a>. </p>\n<p>Where we say something is limited only by available memory, that means that internal data structures impose no intrinsic limit, and space is allocated with <code>malloc</code> or equivalent. The actual limit will therefore depend on many things, such as the size of other things allocated by the compiler at the same time, the amount of memory consumed by other processes on the same computer, etc. </p>\n<ul> <li>Nesting levels of ‘<code>#include</code>’ files. <p>We impose an arbitrary limit of 200 levels, to avoid runaway recursion. The standard requires at least 15 levels. </p>\n</li>\n<li>Nesting levels of conditional inclusion. <p>The C standard mandates this be at least 63. CPP is limited only by available memory. </p>\n</li>\n<li>Levels of parenthesized expressions within a full expression. <p>The C standard requires this to be at least 63. In preprocessor conditional expressions, it is limited only by available memory. </p>\n</li>\n<li>Significant initial characters in an identifier or macro name. <p>The preprocessor treats all characters as significant. The C standard requires only that the first 63 be significant. </p>\n</li>\n<li>Number of macros simultaneously defined in a single translation unit. <p>The standard requires at least 4095 be possible. CPP is limited only by available memory. </p>\n</li>\n<li>Number of parameters in a macro definition and arguments in a macro call. <p>We allow <code>USHRT_MAX</code>, which is no smaller than 65,535. The minimum required by the standard is 127. </p>\n</li>\n<li>Number of characters on a logical source line. <p>The C standard requires a minimum of 4096 be permitted. CPP places no limits on this, but you may get incorrect column numbers reported in diagnostics for lines longer than 65,535 characters. </p>\n</li>\n<li>Maximum size of a source file. <p>The standard does not specify any lower limit on the maximum size of a source file. GNU cpp maps files into memory, so it is limited by the available address space. This is generally at least two gigabytes. Depending on the operating system, the size of physical memory may or may not be a limitation. </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation-limits.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Implementation-limits.html</a>\n  </p>\n</div>\n","obsolete-features":"<h1 class=\"section\" id=\"Obsolete-Features\">11.3 Obsolete Features</h1> <p>CPP has some features which are present mainly for compatibility with older programs. We discourage their use in new code. In some cases, we plan to remove the feature in a future version of GCC. </p>\n<h2 class=\"subsection\">11.3.1 Assertions</h2> <p> Assertions are a deprecated alternative to macros in writing conditionals to test what sort of computer or system the compiled program will run on. Assertions are usually predefined, but you can define them with preprocessing directives or command-line options. </p>\n<p>Assertions were intended to provide a more systematic way to describe the compiler's target system and we added them for compatibility with existing compilers. In practice they are just as unpredictable as the system-specific predefined macros. In addition, they are not part of any standard, and only a few compilers support them. Therefore, the use of assertions is <strong>less</strong> portable than the use of system-specific predefined macros. We recommend you do not use them at all. </p>\n<p>An assertion looks like this: </p>\n<pre class=\"smallexample\">#<var>predicate</var> (<var>answer</var>)</pre> <p class=\"noindent\"><var>predicate</var> must be a single identifier. <var>answer</var> can be any sequence of tokens; all characters are significant except for leading and trailing whitespace, and differences in internal whitespace sequences are ignored. (This is similar to the rules governing macro redefinition.) Thus, <code>(x + y)</code> is different from <code>(x+y)</code> but equivalent to <code>( x + y )</code>. Parentheses do not nest inside an answer. </p>\n<p>To test an assertion, you write it in an ‘<code>#if</code>’. For example, this conditional succeeds if either <code>vax</code> or <code>ns16000</code> has been asserted as an answer for <code>machine</code>. </p>\n<pre class=\"smallexample\">#if #machine (vax) || #machine (ns16000)</pre> <p class=\"noindent\">You can test whether <em>any</em> answer is asserted for a predicate by omitting the answer in the conditional: </p>\n<pre class=\"smallexample\">#if #machine</pre> <p>Assertions are made with the ‘<code>#assert</code>’ directive. Its sole argument is the assertion to make, without the leading ‘<code>#</code>’ that identifies assertions in conditionals. </p>\n<pre class=\"smallexample\">#assert <var>predicate</var> (<var>answer</var>)</pre> <p class=\"noindent\">You may make several assertions with the same predicate and different answers. Subsequent assertions do not override previous ones for the same predicate. All the answers for any given predicate are simultaneously true. </p>\n<p>Assertions can be canceled with the ‘<code>#unassert</code>’ directive. It has the same syntax as ‘<code>#assert</code>’. In that form it cancels only the answer which was specified on the ‘<code>#unassert</code>’ line; other answers for that predicate remain true. You can cancel an entire predicate by leaving out the answer: </p>\n<pre class=\"smallexample\">#unassert <var>predicate</var></pre> <p class=\"noindent\">In either form, if no such assertion has been made, ‘<code>#unassert</code>’ has no effect. </p>\n<p>You can also make or cancel assertions using command line options. See <a href=\"invocation#Invocation\">Invocation</a>. </p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Obsolete-Features.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Obsolete-Features.html</a>\n  </p>\n</div>\n","differences-from-previous-versions":"<h1 class=\"section\" id=\"Differences-from-previous-versions\">11.4 Differences from previous versions</h1> <p> This section details behavior which has changed from previous versions of CPP. We do not plan to change it again in the near future, but we do not promise not to, either. </p>\n<p>The “previous versions” discussed here are 2.95 and before. The behavior of GCC 3.0 is mostly the same as the behavior of the widely used 2.96 and 2.97 development snapshots. Where there are differences, they generally represent bugs in the snapshots. </p>\n<ul> <li>-I- deprecated <p>This option has been deprecated in 4.0. <code>-iquote</code> is meant to replace the need for this option. </p>\n</li>\n<li>Order of evaluation of ‘<code>#</code>’ and ‘<code>##</code>’ operators <p>The standard does not specify the order of evaluation of a chain of ‘<code>##</code>’ operators, nor whether ‘<code>#</code>’ is evaluated before, after, or at the same time as ‘<code>##</code>’. You should therefore not write any code which depends on any specific ordering. It is possible to guarantee an ordering, if you need one, by suitable use of nested macros. </p>\n<p>An example of where this might matter is pasting the arguments ‘<code>1</code>’, ‘<code>e</code>’ and ‘<code>-2</code>’. This would be fine for left-to-right pasting, but right-to-left pasting would produce an invalid token ‘<code>e-2</code>’. </p>\n<p>GCC 3.0 evaluates ‘<code>#</code>’ and ‘<code>##</code>’ at the same time and strictly left to right. Older versions evaluated all ‘<code>#</code>’ operators first, then all ‘<code>##</code>’ operators, in an unreliable order. </p>\n</li>\n<li>The form of whitespace between tokens in preprocessor output <p>See <a href=\"preprocessor-output#Preprocessor-Output\">Preprocessor Output</a>, for the current textual format. This is also the format used by stringification. Normally, the preprocessor communicates tokens directly to the compiler's parser, and whitespace does not come up at all. </p>\n<p>Older versions of GCC preserved all whitespace provided by the user and inserted lots more whitespace of their own, because they could not accurately predict when extra spaces were needed to prevent accidental token pasting. </p>\n</li>\n<li>Optional argument when invoking rest argument macros <p>As an extension, GCC permits you to omit the variable arguments entirely when you use a variable argument macro. This is forbidden by the 1999 C standard, and will provoke a pedantic warning with GCC 3.0. Previous versions accepted it silently. </p>\n</li>\n<li>‘<code>##</code>’ swallowing preceding text in rest argument macros <p>Formerly, in a macro expansion, if ‘<code>##</code>’ appeared before a variable arguments parameter, and the set of tokens specified for that argument in the macro invocation was empty, previous versions of CPP would back up and remove the preceding sequence of non-whitespace characters (<strong>not</strong> the preceding token). This extension is in direct conflict with the 1999 C standard and has been drastically pared back. </p>\n<p>In the current version of the preprocessor, if ‘<code>##</code>’ appears between a comma and a variable arguments parameter, and the variable argument is omitted entirely, the comma will be removed from the expansion. If the variable argument is empty, or the token before ‘<code>##</code>’ is not a comma, then ‘<code>##</code>’ behaves as a normal token paste. </p>\n</li>\n<li>‘<code>#line</code>’ and ‘<code>#include</code>’ <p>The ‘<code>#line</code>’ directive used to change GCC's notion of the “directory containing the current file”, used by ‘<code>#include</code>’ with a double-quoted header file name. In 3.0 and later, it does not. See <a href=\"line-control#Line-Control\">Line Control</a>, for further explanation. </p>\n</li>\n<li>Syntax of ‘<code>#line</code>’ <p>In GCC 2.95 and previous, the string constant argument to ‘<code>#line</code>’ was treated the same way as the argument to ‘<code>#include</code>’: backslash escapes were not honored, and the string ended at the second ‘<code>\"</code>’. This is not compliant with the C standard. In GCC 3.0, an attempt was made to correct the behavior, so that the string was treated as a real string constant, but it turned out to be buggy. In 3.1, the bugs have been fixed. (We are not fixing the bugs in 3.0 because they affect relatively few people and the fix is quite invasive.) </p>\n</li>\n</ul><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Differences-from-previous-versions.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Differences-from-previous-versions.html</a>\n  </p>\n</div>\n","invocation":"<h1 class=\"chapter\" id=\"Invocation\">12 Invocation</h1> <p> Most often when you use the C preprocessor you will not have to invoke it explicitly: the C compiler will do so automatically. However, the preprocessor is sometimes useful on its own. All the options listed here are also acceptable to the C compiler and have the same meaning, except that the C compiler has different rules for specifying the output file. </p>\n<p><em>Note:</em> Whether you use the preprocessor by way of <code>gcc</code> or <code>cpp</code>, the compiler driver is run first. This program's purpose is to translate your command into invocations of the programs that do the actual work. Their command line interfaces are similar but not identical to the documented interface, and may change without notice.  </p>\n<p>The C preprocessor expects two file names as arguments, <var>infile</var> and <var>outfile</var>. The preprocessor reads <var>infile</var> together with any other files it specifies with ‘<code>#include</code>’. All the output generated by the combined input files is written in <var>outfile</var>. </p>\n<p>Either <var>infile</var> or <var>outfile</var> may be <code>-</code>, which as <var>infile</var> means to read from standard input and as <var>outfile</var> means to write to standard output. Also, if either file is omitted, it means the same as if <code>-</code> had been specified for that file. </p>\n<p>Unless otherwise noted, or the option ends in ‘<code>=</code>’, all options which take an argument may have that argument appear either immediately after the option, or with a space between option and argument: <code>-Ifoo</code> and <code>-I foo</code> have the same effect. </p>\n<p>Many options have multi-letter names; therefore multiple single-letter options may <em>not</em> be grouped: <code>-dM</code> is very different from ‘<code>-d -M</code>’. </p>\n\n<dl> <dt>\n<code>-D </code><var>name</var>\n</dt>\n<dd>\nPredefine <var>name</var> as a macro, with definition <code>1</code>. </dd>\n<dt>\n<code>-D </code><var>name</var><code>=</code><var>definition</var>\n</dt>\n<dd>The contents of <var>definition</var> are tokenized and processed as if they appeared during translation phase three in a ‘<code>#define</code>’ directive. In particular, the definition will be truncated by embedded newline characters. <p>If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell's quoting syntax to protect characters such as spaces that have a meaning in the shell syntax. </p>\n<p>If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With <code>sh</code> and <code>csh</code>, <samp><span class=\"option\">-D'</span><var>name</var><span class=\"option\">(</span><var>args<small class=\"dots\">...</small></var><span class=\"option\">)=</span><var>definition</var><span class=\"option\">'</span></samp> works. </p>\n<p><code>-D</code> and <code>-U</code> options are processed in the order they are given on the command line. All <samp><span class=\"option\">-imacros </span><var>file</var></samp> and <samp><span class=\"option\">-include </span><var>file</var></samp> options are processed after all <code>-D</code> and <code>-U</code> options. </p>\n</dd>\n<dt>\n<code>-U </code><var>name</var>\n</dt>\n<dd>\nCancel any previous definition of <var>name</var>, either built in or provided with a <code>-D</code> option. </dd>\n<dt><code>-undef</code></dt>\n<dd>\nDo not predefine any system-specific or GCC-specific macros. The standard predefined macros remain defined. See <a href=\"standard-predefined-macros#Standard-Predefined-Macros\">Standard Predefined Macros</a>. </dd>\n<dt>\n<code>-I </code><var>dir</var>\n</dt>\n<dd>\nAdd the directory <var>dir</var> to the list of directories to be searched for header files. See <a href=\"search-path#Search-Path\">Search Path</a>. Directories named by <code>-I</code> are searched before the standard system include directories. If the directory <var>dir</var> is a standard system include directory, the option is ignored to ensure that the default search order for system directories and the special treatment of system headers are not defeated (see <a href=\"system-headers#System-Headers\">System Headers</a>) . If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-o </code><var>file</var>\n</dt>\n<dd>\nWrite output to <var>file</var>. This is the same as specifying <var>file</var> as the second non-option argument to <code>cpp</code>. <code>gcc</code> has a different interpretation of a second non-option argument, so you must use <code>-o</code> to specify the output file. </dd>\n<dt><code>-Wall</code></dt>\n<dd>\nTurns on all optional warnings which are desirable for normal code. At present this is <code>-Wcomment</code>, <code>-Wtrigraphs</code>, <code>-Wmultichar</code> and a warning about integer promotion causing a change of sign in <code>#if</code> expressions. Note that many of the preprocessor's warnings are on by default and have no options to control them. </dd>\n<dt>\n<code>-Wcomment</code><dt><code>-Wcomments</code></dt>\n</dt>\n<dd>\nWarn whenever a comment-start sequence ‘<code>/*</code>’ appears in a ‘<code>/*</code>’ comment, or whenever a backslash-newline appears in a ‘<code>//</code>’ comment. (Both forms have the same effect.) </dd>\n<dt><code>-Wtrigraphs</code></dt>\n<dd>\nMost trigraphs in comments cannot affect the meaning of the program. However, a trigraph that would form an escaped newline (‘<code>??/</code>’ at the end of a line) can, by changing where the comment begins or ends. Therefore, only trigraphs that would form escaped newlines produce warnings inside a comment. <p>This option is implied by <code>-Wall</code>. If <code>-Wall</code> is not given, this option is still enabled unless trigraphs are enabled. To get trigraph conversion without warnings, but get the other <code>-Wall</code> warnings, use ‘<code>-trigraphs -Wall -Wno-trigraphs</code>’. </p>\n</dd>\n<dt><code>-Wtraditional</code></dt>\n<dd>\nWarn about certain constructs that behave differently in traditional and ISO C. Also warn about ISO C constructs that have no traditional C equivalent, and problematic constructs which should be avoided. See <a href=\"traditional-mode#Traditional-Mode\">Traditional Mode</a>. </dd>\n<dt><code>-Wundef</code></dt>\n<dd>\nWarn whenever an identifier which is not a macro is encountered in an ‘<code>#if</code>’ directive, outside of ‘<code>defined</code>’. Such identifiers are replaced with zero. </dd>\n<dt><code>-Wunused-macros</code></dt>\n<dd>\nWarn about macros defined in the main file that are unused. A macro is used if it is expanded or tested for existence at least once. The preprocessor will also warn if the macro has not been used at the time it is redefined or undefined. <p>Built-in macros, macros defined on the command line, and macros defined in include files are not warned about. </p>\n<p><em>Note:</em> If a macro is actually used, but only used in skipped conditional blocks, then CPP will report it as unused. To avoid the warning in such a case, you might improve the scope of the macro's definition by, for example, moving it into the first skipped block. Alternatively, you could provide a dummy use with something like: </p>\n<pre class=\"smallexample\">#if defined the_macro_causing_the_warning\n#endif</pre> </dd>\n<dt><code>-Wendif-labels</code></dt>\n<dd>\nWarn whenever an ‘<code>#else</code>’ or an ‘<code>#endif</code>’ are followed by text. This usually happens in code of the form <pre class=\"smallexample\">#if FOO\n...\n#else FOO\n...\n#endif FOO</pre> <p class=\"noindent\">The second and third <code>FOO</code> should be in comments, but often are not in older programs. This warning is on by default. </p>\n</dd>\n<dt><code>-Werror</code></dt>\n<dd>\nMake all warnings into hard errors. Source code which triggers warnings will be rejected. </dd>\n<dt><code>-Wsystem-headers</code></dt>\n<dd>\nIssue warnings for code in system headers. These are normally unhelpful in finding bugs in your own code, therefore suppressed. If you are responsible for the system library, you may want to see them. </dd>\n<dt><code>-w</code></dt>\n<dd>\nSuppress all warnings, including those which GNU CPP issues by default. </dd>\n<dt><code>-pedantic</code></dt>\n<dd>\nIssue all the mandatory diagnostics listed in the C standard. Some of them are left out by default, since they trigger frequently on harmless code. </dd>\n<dt><code>-pedantic-errors</code></dt>\n<dd>\nIssue all the mandatory diagnostics, and make all mandatory diagnostics into errors. This includes mandatory diagnostics that GCC issues without ‘<code>-pedantic</code>’ but treats as warnings. </dd>\n<dt><code>-M</code></dt>\n<dd>\nInstead of outputting the result of preprocessing, output a rule suitable for <code>make</code> describing the dependencies of the main source file. The preprocessor outputs one <code>make</code> rule containing the object file name for that source file, a colon, and the names of all the included files, including those coming from <code>-include</code> or <code>-imacros</code> command line options. <p>Unless specified explicitly (with <code>-MT</code> or <code>-MQ</code>), the object file name consists of the name of the source file with any suffix replaced with object file suffix and with any leading directory parts removed. If there are many included files then the rule is split into several lines using ‘<code>\\</code>’-newline. The rule has no commands. </p>\n<p>This option does not suppress the preprocessor's debug output, such as <code>-dM</code>. To avoid mixing such debug output with the dependency rules you should explicitly specify the dependency output file with <code>-MF</code>, or use an environment variable like <code>DEPENDENCIES_OUTPUT</code> (see <a href=\"environment-variables#Environment-Variables\">Environment Variables</a>). Debug output will still be sent to the regular output stream as normal. </p>\n<p>Passing <code>-M</code> to the driver implies <code>-E</code>, and suppresses warnings with an implicit <code>-w</code>. </p>\n</dd>\n<dt><code>-MM</code></dt>\n<dd>\nLike <code>-M</code> but do not mention header files that are found in system header directories, nor header files that are included, directly or indirectly, from such a header. <p>This implies that the choice of angle brackets or double quotes in an ‘<code>#include</code>’ directive does not in itself determine whether that header will appear in <code>-MM</code> dependency output. This is a slight change in semantics from GCC versions 3.0 and earlier. </p>\n\n</dd>\n<dt>\n<code>-MF </code><var>file</var>\n</dt>\n<dd>\nWhen used with <code>-M</code> or <code>-MM</code>, specifies a file to write the dependencies to. If no <code>-MF</code> switch is given the preprocessor sends the rules to the same place it would have sent preprocessed output. <p>When used with the driver options <code>-MD</code> or <code>-MMD</code>, <code>-MF</code> overrides the default dependency output file. </p>\n</dd>\n<dt><code>-MG</code></dt>\n<dd>\nIn conjunction with an option such as <code>-M</code> requesting dependency generation, <code>-MG</code> assumes missing header files are generated files and adds them to the dependency list without raising an error. The dependency filename is taken directly from the <code>#include</code> directive without prepending any path. <code>-MG</code> also suppresses preprocessed output, as a missing header file renders this useless. <p>This feature is used in automatic updating of makefiles. </p>\n</dd>\n<dt><code>-MP</code></dt>\n<dd>\nThis option instructs CPP to add a phony target for each dependency other than the main file, causing each to depend on nothing. These dummy rules work around errors <code>make</code> gives if you remove header files without updating the <code>Makefile</code> to match. <p>This is typical output: </p>\n<pre class=\"smallexample\">test.o: test.c test.h\n\ntest.h:</pre> </dd>\n<dt>\n<code>-MT </code><var>target</var>\n</dt>\n<dd>\n Change the target of the rule emitted by dependency generation. By default CPP takes the name of the main input file, deletes any directory components and any file suffix such as ‘<code>.c</code>’, and appends the platform's usual object suffix. The result is the target. <p>An <code>-MT</code> option will set the target to be exactly the string you specify. If you want multiple targets, you can specify them as a single argument to <code>-MT</code>, or use multiple <code>-MT</code> options. </p>\n<p>For example, <code>-MT '$(objpfx)foo.o'</code> might give </p>\n<pre class=\"smallexample\">$(objpfx)foo.o: foo.c</pre> </dd>\n<dt>\n<code>-MQ </code><var>target</var>\n</dt>\n<dd>\n Same as <code>-MT</code>, but it quotes any characters which are special to Make. <code>-MQ '$(objpfx)foo.o'</code> gives <pre class=\"smallexample\">$$(objpfx)foo.o: foo.c</pre> <p>The default target is automatically quoted, as if it were given with <code>-MQ</code>. </p>\n</dd>\n<dt><code>-MD</code></dt>\n<dd>\n<code>-MD</code> is equivalent to <samp><span class=\"option\">-M -MF </span><var>file</var></samp>, except that <code>-E</code> is not implied. The driver determines <var>file</var> based on whether an <code>-o</code> option is given. If it is, the driver uses its argument but with a suffix of <code>.d</code>, otherwise it takes the name of the input file, removes any directory components and suffix, and applies a <code>.d</code> suffix. <p>If <code>-MD</code> is used in conjunction with <code>-E</code>, any <code>-o</code> switch is understood to specify the dependency output file (see <a href=\"invocation#dashMF\">-MF</a>), but if used without <code>-E</code>, each <code>-o</code> is understood to specify a target object file. </p>\n<p>Since <code>-E</code> is not implied, <code>-MD</code> can be used to generate a dependency output file as a side-effect of the compilation process. </p>\n</dd>\n<dt><code>-MMD</code></dt>\n<dd>\nLike <code>-MD</code> except mention only user header files, not system header files. </dd>\n<dt>\n<code>-x c</code><dt>\n<code>-x c++</code><dt>\n<code>-x objective-c</code><dt><code>-x assembler-with-cpp</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>\nSpecify the source language: C, C++, Objective-C, or assembly. This has nothing to do with standards conformance or extensions; it merely selects which base syntax to expect. If you give none of these options, cpp will deduce the language from the extension of the source file: ‘<code>.c</code>’, ‘<code>.cc</code>’, ‘<code>.m</code>’, or ‘<code>.S</code>’. Some other common extensions for C++ and assembly are also recognized. If cpp does not recognize the extension, it will treat the file as C; this is the most generic mode. <p><em>Note:</em> Previous versions of cpp accepted a <code>-lang</code> option which selected both the language and the standards conformance level. This option has been removed, because it conflicts with the <code>-l</code> option. </p>\n</dd>\n<dt>\n<code>-std=</code><var>standard</var><dt><code>-ansi</code></dt>\n</dt>\n<dd>\nSpecify the standard to which the code should conform. Currently CPP knows about C and C++ standards; others may be added in the future. <p><var>standard</var> may be one of: </p>\n<dl> <dt>\n<code>c90</code><dt>\n<code>c89</code><dt><code>iso9899:1990</code></dt>\n</dt>\n</dt>\n<dd>The ISO C standard from 1990. ‘<code>c90</code>’ is the customary shorthand for this version of the standard. <p>The <code>-ansi</code> option is equivalent to <code>-std=c90</code>. </p>\n</dd>\n<dt><code>iso9899:199409</code></dt>\n<dd>The 1990 C standard, as amended in 1994. </dd>\n<dt>\n<code>iso9899:1999</code><dt>\n<code>c99</code><dt>\n<code>iso9899:199x</code><dt><code>c9x</code></dt>\n</dt>\n</dt>\n</dt>\n<dd>The revised ISO C standard, published in December 1999. Before publication, this was known as C9X. </dd>\n<dt>\n<code>iso9899:2011</code><dt>\n<code>c11</code><dt><code>c1x</code></dt>\n</dt>\n</dt>\n<dd>The revised ISO C standard, published in December 2011. Before publication, this was known as C1X. </dd>\n<dt>\n<code>gnu90</code><dt><code>gnu89</code></dt>\n</dt>\n<dd>The 1990 C standard plus GNU extensions. This is the default. </dd>\n<dt>\n<code>gnu99</code><dt><code>gnu9x</code></dt>\n</dt>\n<dd>The 1999 C standard plus GNU extensions. </dd>\n<dt>\n<code>gnu11</code><dt><code>gnu1x</code></dt>\n</dt>\n<dd>The 2011 C standard plus GNU extensions. </dd>\n<dt><code>c++98</code></dt>\n<dd>The 1998 ISO C++ standard plus amendments. </dd>\n<dt><code>gnu++98</code></dt>\n<dd>The same as <code>-std=c++98</code> plus GNU extensions. This is the default for C++ code. </dd>\n</dl> </dd>\n<dt><code>-I-</code></dt>\n<dd>\nSplit the include path. Any directories specified with <code>-I</code> options before <code>-I-</code> are searched only for headers requested with <code>#include \"</code><var>file</var><code>\"</code>; they are not searched for <code>#include &lt;</code><var>file</var><code>&gt;</code>. If additional directories are specified with <code>-I</code> options after the <code>-I-</code>, those directories are searched for all ‘<code>#include</code>’ directives. <p>In addition, <code>-I-</code> inhibits the use of the directory of the current file directory as the first search directory for <code>#include \"</code><var>file</var><code>\"</code>. See <a href=\"search-path#Search-Path\">Search Path</a>. This option has been deprecated. </p>\n</dd>\n<dt><code>-nostdinc</code></dt>\n<dd>\nDo not search the standard system directories for header files. Only the directories you have specified with <code>-I</code> options (and the directory of the current file, if appropriate) are searched. </dd>\n<dt><code>-nostdinc++</code></dt>\n<dd>\nDo not search for header files in the C++-specific standard directories, but do still search the other standard directories. (This option is used when building the C++ library.) </dd>\n<dt>\n<code>-include </code><var>file</var>\n</dt>\n<dd>\nProcess <var>file</var> as if <code>#include \"file\"</code> appeared as the first line of the primary source file. However, the first directory searched for <var>file</var> is the preprocessor's working directory <em>instead of</em> the directory containing the main source file. If not found there, it is searched for in the remainder of the <code>#include \"...\"</code> search chain as normal. <p>If multiple <code>-include</code> options are given, the files are included in the order they appear on the command line. </p>\n</dd>\n<dt>\n<code>-imacros </code><var>file</var>\n</dt>\n<dd>\nExactly like <code>-include</code>, except that any output produced by scanning <var>file</var> is thrown away. Macros it defines remain defined. This allows you to acquire all the macros from a header without also processing its declarations. <p>All files specified by <code>-imacros</code> are processed before all files specified by <code>-include</code>. </p>\n</dd>\n<dt>\n<code>-idirafter </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for header files, but do it <em>after</em> all directories specified with <code>-I</code> and the standard system directories have been exhausted. <var>dir</var> is treated as a system include directory. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-iprefix </code><var>prefix</var>\n</dt>\n<dd>\nSpecify <var>prefix</var> as the prefix for subsequent <code>-iwithprefix</code> options. If the prefix represents a directory, you should include the final ‘<code>/</code>’. </dd>\n<dt>\n<code>-iwithprefix </code><var>dir</var><dt>\n<code>-iwithprefixbefore </code><var>dir</var>\n</dt>\n</dt>\n<dd>\nAppend <var>dir</var> to the prefix specified previously with <code>-iprefix</code>, and add the resulting directory to the include search path. <code>-iwithprefixbefore</code> puts it in the same place <code>-I</code> would; <code>-iwithprefix</code> puts it where <code>-idirafter</code> would. </dd>\n<dt>\n<code>-isysroot </code><var>dir</var>\n</dt>\n<dd>\nThis option is like the <code>--sysroot</code> option, but applies only to header files (except for Darwin targets, where it applies to both header files and libraries). See the <code>--sysroot</code> option for more information. </dd>\n<dt>\n<code>-imultilib </code><var>dir</var>\n</dt>\n<dd>\nUse <var>dir</var> as a subdirectory of the directory containing target-specific C++ headers. </dd>\n<dt>\n<code>-isystem </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> for header files, after all directories specified by <code>-I</code> but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. See <a href=\"system-headers#System-Headers\">System Headers</a>. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt>\n<code>-iquote </code><var>dir</var>\n</dt>\n<dd>\nSearch <var>dir</var> only for header files requested with <code>#include \"</code><var>file</var><code>\"</code>; they are not searched for <code>#include &lt;</code><var>file</var><code>&gt;</code>, before all directories specified by <code>-I</code> and before the standard system directories. See <a href=\"search-path#Search-Path\">Search Path</a>. If <var>dir</var> begins with <code>=</code>, then the <code>=</code> will be replaced by the sysroot prefix; see <code>--sysroot</code> and <code>-isysroot</code>. </dd>\n<dt><code>-fdirectives-only</code></dt>\n<dd>\nWhen preprocessing, handle directives, but do not expand macros. <p>The option's behavior depends on the <code>-E</code> and <code>-fpreprocessed</code> options. </p>\n<p>With <code>-E</code>, preprocessing is limited to the handling of directives such as <code>#define</code>, <code>#ifdef</code>, and <code>#error</code>. Other preprocessor operations, such as macro expansion and trigraph conversion are not performed. In addition, the <code>-dD</code> option is implicitly enabled. </p>\n<p>With <code>-fpreprocessed</code>, predefinition of command line and most builtin macros is disabled. Macros such as <code>__LINE__</code>, which are contextually dependent, are handled normally. This enables compilation of files previously preprocessed with <code>-E -fdirectives-only</code>. </p>\n<p>With both <code>-E</code> and <code>-fpreprocessed</code>, the rules for <code>-fpreprocessed</code> take precedence. This enables full preprocessing of files previously preprocessed with <code>-E -fdirectives-only</code>. </p>\n</dd>\n<dt><code>-fdollars-in-identifiers</code></dt>\n<dd>\nAccept ‘<code>$</code>’ in identifiers. See <a href=\"implementation_002ddefined-behavior#Identifier-characters\">Identifier characters</a>. </dd>\n<dt><code>-fextended-identifiers</code></dt>\n<dd>\nAccept universal character names in identifiers. This option is experimental; in a future version of GCC, it will be enabled by default for C99 and C++. </dd>\n<dt><code>-fno-canonical-system-headers</code></dt>\n<dd>\nWhen preprocessing, do not shorten system header paths with canonicalization. </dd>\n<dt><code>-fpreprocessed</code></dt>\n<dd>\nIndicate to the preprocessor that the input file has already been preprocessed. This suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and processing of most directives. The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed with <code>-C</code> to the compiler without problems. In this mode the integrated preprocessor is little more than a tokenizer for the front ends. <p><code>-fpreprocessed</code> is implicit if the input file has one of the extensions ‘<code>.i</code>’, ‘<code>.ii</code>’ or ‘<code>.mi</code>’. These are the extensions that GCC uses for preprocessed files created by <code>-save-temps</code>. </p>\n</dd>\n<dt>\n<code>-ftabstop=</code><var>width</var>\n</dt>\n<dd>\nSet the distance between tab stops. This helps the preprocessor report correct column numbers in warnings or errors, even if tabs appear on the line. If the value is less than 1 or greater than 100, the option is ignored. The default is 8. </dd>\n<dt><code>-fdebug-cpp</code></dt>\n<dd>\nThis option is only useful for debugging GCC. When used with <code>-E</code>, dumps debugging information about location maps. Every token in the output is preceded by the dump of the map its location belongs to. The dump of the map holding the location of a token would be: <pre class=\"smallexample\">{‘<code>P</code>’:<code>/file/path</code>;‘<code>F</code>’:<code>/includer/path</code>;‘<code>L</code>’:<var>line_num</var>;‘<code>C</code>’:<var>col_num</var>;‘<code>S</code>’:<var>system_header_p</var>;‘<code>M</code>’:<var>map_address</var>;‘<code>E</code>’:<var>macro_expansion_p</var>,‘<code>loc</code>’:<var>location</var>}</pre> <p>When used without <code>-E</code>, this option has no effect. </p>\n</dd>\n<dt>\n<code>-ftrack-macro-expansion</code><span class=\"roman\">[</span><code>=</code><var>level</var><span class=\"roman\">]</span>\n</dt>\n<dd>\nTrack locations of tokens across macro expansions. This allows the compiler to emit diagnostic about the current macro expansion stack when a compilation error occurs in a macro expansion. Using this option makes the preprocessor and the compiler consume more memory. The <var>level</var> parameter can be used to choose the level of precision of token location tracking thus decreasing the memory consumption if necessary. Value ‘<code>0</code>’ of <var>level</var> de-activates this option just as if no <code>-ftrack-macro-expansion</code> was present on the command line. Value ‘<code>1</code>’ tracks tokens locations in a degraded mode for the sake of minimal memory overhead. In this mode all tokens resulting from the expansion of an argument of a function-like macro have the same location. Value ‘<code>2</code>’ tracks tokens locations completely. This value is the most memory hungry. When this option is given no argument, the default parameter value is ‘<code>2</code>’. <p>Note that -ftrack-macro-expansion=2 is activated by default. </p>\n</dd>\n<dt>\n<code>-fexec-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the execution character set, used for string and character constants. The default is UTF-8. <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine. </dd>\n<dt>\n<code>-fwide-exec-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the wide execution character set, used for wide string and character constants. The default is UTF-32 or UTF-16, whichever corresponds to the width of <code>wchar_t</code>. As with <code>-fexec-charset</code>, <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine; however, you will have problems with encodings that do not fit exactly in <code>wchar_t</code>. </dd>\n<dt>\n<code>-finput-charset=</code><var>charset</var>\n</dt>\n<dd>\nSet the input character set, used for translation from the character set of the input file to the source character set used by GCC. If the locale does not specify, or GCC cannot get this information from the locale, the default is UTF-8. This can be overridden by either the locale or this command line option. Currently the command line option takes precedence if there's a conflict. <var>charset</var> can be any encoding supported by the system's <code>iconv</code> library routine. </dd>\n<dt><code>-fworking-directory</code></dt>\n<dd>\nEnable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing. When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes. GCC will use this directory, when it's present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats. This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form <code>-fno-working-directory</code>. If the <code>-P</code> flag is present in the command line, this option has no effect, since no <code>#line</code> directives are emitted whatsoever. </dd>\n<dt><code>-fno-show-column</code></dt>\n<dd>\nDo not print column numbers in diagnostics. This may be necessary if diagnostics are being scanned by a program that does not understand the column numbers, such as <code>dejagnu</code>. </dd>\n<dt>\n<code>-A </code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>\nMake an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. This form is preferred to the older form <samp><span class=\"option\">-A </span><var>predicate</var><span class=\"option\">(</span><var>answer</var><span class=\"option\">)</span></samp>, which is still supported, because it does not use shell special characters. See <a href=\"obsolete-features#Obsolete-Features\">Obsolete Features</a>. </dd>\n<dt>\n<code>-A -</code><var>predicate</var><code>=</code><var>answer</var>\n</dt>\n<dd>Cancel an assertion with the predicate <var>predicate</var> and answer <var>answer</var>. </dd>\n<dt><code>-dCHARS</code></dt>\n<dd>\n<var>CHARS</var> is a sequence of one or more of the following characters, and must not be preceded by a space. Other characters are interpreted by the compiler proper, or reserved for future versions of GCC, and so are silently ignored. If you specify characters whose behavior conflicts, the result is undefined. <dl> <dt>‘<code>M</code>’</dt>\n<dd>\nInstead of the normal output, generate a list of ‘<code>#define</code>’ directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file <code>foo.h</code>, the command <pre class=\"smallexample\">touch foo.h; cpp -dM foo.h</pre> <p class=\"noindent\">will show all the predefined macros. </p>\n<p>If you use <code>-dM</code> without the <code>-E</code> option, <code>-dM</code> is interpreted as a synonym for <code>-fdump-rtl-mach</code>. See <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/gcc/Debugging-Options.html#Debugging-Options\">Debugging Options</a>. </p>\n</dd>\n<dt>‘<code>D</code>’</dt>\n<dd>\nLike ‘<code>M</code>’ except in two respects: it does <em>not</em> include the predefined macros, and it outputs <em>both</em> the ‘<code>#define</code>’ directives and the result of preprocessing. Both kinds of output go to the standard output file. </dd>\n<dt>‘<code>N</code>’</dt>\n<dd>\nLike ‘<code>D</code>’, but emit only the macro names, not their expansions. </dd>\n<dt>‘<code>I</code>’</dt>\n<dd>\nOutput ‘<code>#include</code>’ directives in addition to the result of preprocessing. </dd>\n<dt>‘<code>U</code>’</dt>\n<dd>\nLike ‘<code>D</code>’ except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and ‘<code>#undef</code>’ directives are also output for macros tested but undefined at the time. </dd>\n</dl> </dd>\n<dt><code>-P</code></dt>\n<dd>\nInhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers. See <a href=\"preprocessor-output#Preprocessor-Output\">Preprocessor Output</a>. </dd>\n<dt><code>-C</code></dt>\n<dd>\nDo not discard comments. All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive. <p>You should be prepared for side effects when using <code>-C</code>; it causes the preprocessor to treat comments as tokens in their own right. For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a ‘<code>#</code>’. </p>\n</dd>\n<dt><code>-CC</code></dt>\n<dd>Do not discard comments, including during macro expansion. This is like <code>-C</code>, except that comments contained within macros are also passed through to the output file where the macro is expanded. <p>In addition to the side-effects of the <code>-C</code> option, the <code>-CC</code> option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line. </p>\n<p>The <code>-CC</code> option is generally used to support lint comments. </p>\n</dd>\n<dt><code>-traditional-cpp</code></dt>\n<dd>\nTry to imitate the behavior of old-fashioned C preprocessors, as opposed to ISO C preprocessors. See <a href=\"traditional-mode#Traditional-Mode\">Traditional Mode</a>. </dd>\n<dt><code>-trigraphs</code></dt>\n<dd>\nProcess trigraph sequences. See <a href=\"initial-processing#Initial-processing\">Initial processing</a>. </dd>\n<dt><code>-remap</code></dt>\n<dd>\nEnable special code to work around file systems which only permit very short file names, such as MS-DOS. </dd>\n<dt>\n<code>--help</code><dt><code>--target-help</code></dt>\n</dt>\n<dd>\nPrint text describing all the command line options instead of preprocessing anything. </dd>\n<dt><code>-v</code></dt>\n<dd>\nVerbose mode. Print out GNU CPP's version number at the beginning of execution, and report the final form of the include path. </dd>\n<dt><code>-H</code></dt>\n<dd>\nPrint the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the ‘<code>#include</code>’ stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with ‘<code>...x</code>’ and a valid one with ‘<code>...!</code>’ . </dd>\n<dt>\n<code>-version</code><dt><code>--version</code></dt>\n</dt>\n<dd>\nPrint out GNU CPP's version number. With one dash, proceed to preprocess as normal. With two dashes, exit immediately. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Invocation.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Invocation.html</a>\n  </p>\n</div>\n","environment-variables":"<h1 class=\"chapter\" id=\"Environment-Variables\">13 Environment Variables</h1> \n<p>This section describes the environment variables that affect how CPP operates. You can use them to specify directories or prefixes to use when searching for include files, or to control dependency output. </p>\n<p>Note that you can also specify places to search using options such as <code>-I</code>, and control dependency output with options like <code>-M</code> (see <a href=\"invocation#Invocation\">Invocation</a>). These take precedence over environment variables, which in turn take precedence over the configuration of GCC.         </p>\n<dl> <dt>\n<code>CPATH</code><dt>\n<code>C_INCLUDE_PATH</code><dt>\n<code>CPLUS_INCLUDE_PATH</code><dt>\n<code>OBJC_INCLUDE_PATH</code>\n</dt>\n</dt>\n</dt>\n</dt>\n<dd>  Each variable's value is a list of directories separated by a special character, much like <code>PATH</code>, in which to look for header files. The special character, <code>PATH_SEPARATOR</code>, is target-dependent and determined at GCC build time. For Microsoft Windows-based targets it is a semicolon, and for almost all other targets it is a colon. <p><code>CPATH</code> specifies a list of directories to be searched as if specified with <code>-I</code>, but after any paths given with <code>-I</code> options on the command line. This environment variable is used regardless of which language is being preprocessed. </p>\n<p>The remaining environment variables apply only when preprocessing the particular language indicated. Each specifies a list of directories to be searched as if specified with <code>-isystem</code>, but after any paths given with <code>-isystem</code> options on the command line. </p>\n<p>In all these variables, an empty element instructs the compiler to search its current working directory. Empty elements can appear at the beginning or end of a path. For instance, if the value of <code>CPATH</code> is <code>:/special/include</code>, that has the same effect as ‘<code>-I. -I/special/include</code>’.  </p>\n<p>See also <a href=\"search-path#Search-Path\">Search Path</a>.  </p>\n</dd>\n<dt>\n<code>DEPENDENCIES_OUTPUT</code>\n</dt>\n<dd>\nIf this variable is set, its value specifies how to output dependencies for Make based on the non-system header files processed by the compiler. System header files are ignored in the dependency output. <p>The value of <code>DEPENDENCIES_OUTPUT</code> can be just a file name, in which case the Make rules are written to that file, guessing the target name from the source file name. Or the value can have the form ‘<samp><var>file</var> <var>target</var></samp>’, in which case the rules are written to file <var>file</var> using <var>target</var> as the target name. </p>\n<p>In other words, this environment variable is equivalent to combining the options <code>-MM</code> and <code>-MF</code> (see <a href=\"invocation#Invocation\">Invocation</a>), with an optional <code>-MT</code> switch too. </p>\n</dd>\n<dt>\n<code>SUNPRO_DEPENDENCIES</code>\n</dt>\n<dd>\nThis variable is the same as <code>DEPENDENCIES_OUTPUT</code> (see above), except that system header files are not ignored, so it implies <code>-M</code> rather than <code>-MM</code>. However, the dependence on the main input file is omitted. See <a href=\"invocation#Invocation\">Invocation</a>. </dd>\n</dl><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; Free Software Foundation<br>Licensed under the GNU Free Documentation License, Version 1.3.<br>\n    <a href=\"https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Environment-Variables.html\" class=\"_attribution-link\">https://gcc.gnu.org/onlinedocs/gcc-4.9.3/cpp/Environment-Variables.html</a>\n  </p>\n</div>\n"}