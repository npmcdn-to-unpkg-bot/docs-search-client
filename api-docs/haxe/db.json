{"index":"<h1>Haxe API documentation <small>version 3.2.0</small>\n</h1>\n<p>Haxe is an open source toolkit based on a modern, high level, strictly typed programming language, a cross-compiler, a complete cross-platform standard library and ways to access each platform's native capabilities.</p> <h2>Getting Started With Haxe</h2>\n<p>For getting started with Haxe, take a look at our <a href=\"http://haxe.org/documentation/introduction/\">introduction</a>, read through the <a href=\"http://haxe.org/manual/\">Haxe Manual</a> or look at these use cases for Haxe, including tutorials and popular libraries:</p>\n<ul>\n<li><a href=\"http://haxe.org/use-cases/games/\">Games</a></li>\n<li><a href=\"http://haxe.org/use-cases/web/\">Web</a></li>\n<li><a href=\"http://haxe.org/use-cases/desktop/\">Desktop Apps</a></li>\n<li><a href=\"http://haxe.org/use-cases/mobile/\">Mobile Apps</a></li>\n<li><a href=\"http://haxe.org/use-cases/cli/\">Command Line Tools</a></li>\n<li><a href=\"http://haxe.org/use-cases/cross-platform-apis/\">Cross Platform APIs</a></li>\n</ul>\n<h2>Top Level</h2>\n<table class=\"table table-condensed\"><tbody>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/cpp/index.html\">cpp</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/cs/index.html\">cs</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/flash/index.html\">flash</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"haxe/index\">haxe</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/java/index.html\">java</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/js/index.html\">js</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/neko/index.html\">neko</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/php/index.html\">php</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"http://api.haxe.org/python/index.html\">python</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"sys/index\">sys</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"array\">Array</a></td>\n<td><p>An Array is a storage for values. You can access it using indexes or with its API.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"arrayaccess\">ArrayAccess</a></td>\n<td><p>ArrayAccess is used to indicate a class that can be accessed using brackets. The type parameter represents the type of the elements stored.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"bool\">Bool</a></td>\n<td><p>The standard Boolean type, which can either be true or false.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"class\">Class</a></td>\n<td><p>An abstract type that represents a Class.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"date\">Date</a></td>\n<td><p>The Date class provides a basic structure for date and time related information. Date instances can be created by</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"datetools\">DateTools</a></td>\n<td><p>The DateTools class contains some extra functionalities for handling <code><a href=\"date\">Date</a></code> instances and timestamps.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"dynamic\">Dynamic</a></td>\n<td><p>Dynamic is a special type which is compatible with all other types.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"ereg\">EReg</a></td>\n<td><p>The EReg class represents regular expressions.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"enum\">Enum</a></td>\n<td><p>An abstract type that represents an Enum type.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"enumvalue\">EnumValue</a></td>\n<td><p>An abstract type that represents any enum value. See <code><a href=\"type\">Type</a></code> for the Haxe Reflection API.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"float\">Float</a></td>\n<td><p>The standard Float type, this is a double-precision IEEE 64bit float.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"imap\">IMap</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"int\">Int</a></td>\n<td><p>The standard Int type. Its precision depends on the platform.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"intiterator\">IntIterator</a></td>\n<td><p>IntIterator is used for implementing interval iterations.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"iterable\">Iterable</a></td>\n<td><p>An Iterable is a data structure which has an iterator() method. See <code><a href=\"lambda\">Lambda</a></code> for generic functions on iterable structures.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"iterator\">Iterator</a></td>\n<td><p>An Iterator is a structure that permits iteration over elements of type T.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"lambda\">Lambda</a></td>\n<td><p>The <code><a href=\"lambda\">Lambda</a></code> class is a collection of methods to support functional programming. It is ideally used with 'using Lambda' and then acts as an extension to Iterable types.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"list\">List</a></td>\n<td><p>A linked-list of elements. The list is composed of two-elements arrays that are chained together. It is optimized so that adding or removing an element does not imply copying the whole array content every time.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"map\">Map</a></td>\n<td><p>Map allows key to value mapping for arbitrary value types, and many key types.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"math\">Math</a></td>\n<td><p>This class defines mathematical functions and constants.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"null\">Null</a></td>\n<td><p><code><a href=\"null\">Null</a></code> can be useful in two cases. In order to document some methods that accepts or can return a <code><a href=\"null\">null</a></code> value, or for the Flash compiler and AS3 generator to distinguish between base values that can be null and others that can't.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"reflect\">Reflect</a></td>\n<td><p>The Reflect API is a way to manipulate values dynamically through an abstract interface in an untyped manner. Use with care.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"single\">Single</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"std\">Std</a></td>\n<td><p>The Std class provides standard methods for manipulating basic types.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"string\">String</a></td>\n<td><p>The basic String class.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"stringbuf\">StringBuf</a></td>\n<td><p>A String buffer is an efficient way to build a big string by appending small elements together.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"stringtools\">StringTools</a></td>\n<td><p>This class provides advanced methods on Strings. It is ideally used with 'using StringTools' and then acts as an extension to the String class.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"sys\">Sys</a></td>\n<td><p>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"type\">Type</a></td>\n<td><p>The haxe Reflection API allows retrieval of type information at runtime.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"uint\">UInt</a></td>\n<td><p>The unsigned Int type is only defined for Flash and C#. Simulate it for other platforms.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"valuetype\">ValueType</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"void\">Void</a></td>\n<td><p>The standard Void type. Only <code><a href=\"null\">null</a></code> values can be of the type <code><a href=\"void\">Void</a></code>.</p></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"xml\">Xml</a></td>\n<td></td>\n</tr>\n<tr>\n<td width=\"200\"><a href=\"xmltype\">XmlType</a></td>\n<td></td>\n</tr>\n</tbody></table><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/\" class=\"_attribution-link\">http://api.haxe.org/</a>\n  </p>\n</div>\n","class":"<h1>abstract Class&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<span class=\"type\">T</span>&gt;) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An abstract type that represents a Class.</p> <p>See <code><a href=\"type\">Type</a></code> for the Haxe Reflection API.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Class.html\" class=\"_attribution-link\">http://api.haxe.org/Class.html</a>\n  </p>\n</div>\n","arrayaccess":"<h1> interface ArrayAccess&lt;<span class=\"type\">T</span>&gt; </h1> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/system/collections/generic/IList_1.html\">IList_1</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/system/collections/IDictionary.html\">IDictionary</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/system/collections/IList.html\">IList</a> </p>   <div class=\"indent\"> <p>ArrayAccess is used to indicate a class that can be accessed using brackets. The type parameter represents the type of the elements stored.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/ArrayAccess.html\" class=\"_attribution-link\">http://api.haxe.org/ArrayAccess.html</a>\n  </p>\n</div>\n","iterator":"<h1>typedef Iterator&lt;<span class=\"type\">T</span>&gt; </h1> <p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An Iterator is a structure that permits iteration over elements of type T.</p> <p>Any class with matching hasNext and next fields is considered an Iterator and can then be used e.g. in for-loops. This makes it easy to implement custom iterators.</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"next\"><code><a href=\"#next\">next</a> ():<span class=\"type\">T</span> </code></h3>\n<p>Returns the current item of the Iterator and advances to the next one.</p> <p>This method is not required to check <code>hasNext</code> first. A call to this method while <code>hasNext</code> is false yields unspecified behavior.</p> <p>On the other hand iterators should not require a call to <code>hasNext</code> before the first call to <code>next</code> if an element is available.</p> \n<h3 id=\"hasNext\"><code><a href=\"#hasNext\">hasNext</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Returns false if the iteration is complete, true otherwise.</p> <p>Usually iteration is considered to be complete if all elements of the underlying data structure were handled through calls to next(). However, in custom iterators any logic may be used to determine the completion state.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Iterator.html\" class=\"_attribution-link\">http://api.haxe.org/Iterator.html</a>\n  </p>\n</div>\n","int":"<h1>abstract Int(<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>) </h1> <p> to <a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a> </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The standard Int type. Its precision depends on the platform.</p> <p>On static targets, null cannot be assigned to Int. If this is necessary, <code><a href=\"null\">Null</a>&lt;<a href=\"int\">Int</a>&gt;</code> can be used instead.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Int.html\" class=\"_attribution-link\">http://api.haxe.org/Int.html</a>\n  </p>\n</div>\n","intiterator":"<h1> class IntIterator </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>IntIterator is used for implementing interval iterations.</p> <p>It is usually not used explicitly, but through its special syntax: <code>min...max</code></p> <p>While it is possible to assign an instance of IntIterator to a variable or field, it is worth noting that IntIterator does not reset after being used in a for-loop. Subsequent uses of the same instance will then have no effect.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (min:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, max:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>)</code></h3>\n<p>Iterates from <code>min</code> (inclusive) to <code>max</code> (exclusive).</p> <h3>If <code>max &lt;= min</code>, the iterator will not act as a countdown.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"hasNext\"><code><span class=\"label\">inline</span> <a href=\"#hasNext\">hasNext</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Returns true if the iterator has other items, false otherwise.</p> \n<h3 id=\"next\"><code><span class=\"label\">inline</span> <a href=\"#next\">next</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Moves to the next item of the iterator.</p> <p>If this is called while hasNext() is false, the result is unspecified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/IntIterator.html\" class=\"_attribution-link\">http://api.haxe.org/IntIterator.html</a>\n  </p>\n</div>\n","bool":"<h1>abstract Bool(<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The standard Boolean type, which can either be true or false.</p> <p>On static targets, null cannot be assigned to Bool. If this is necessary, <code><a href=\"null\">Null</a>&lt;<a href=\"bool\">Bool</a>&gt;</code> can be used instead.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Bool.html\" class=\"_attribution-link\">http://api.haxe.org/Bool.html</a>\n  </p>\n</div>\n","dynamic":"<h1>abstract Dynamic&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&lt;<span class=\"type\">T</span>&gt;) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Dynamic is a special type which is compatible with all other types.</p> <p>Use of Dynamic should be minimized as it prevents several compiler checks and optimizations.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Dynamic.html\" class=\"_attribution-link\">http://api.haxe.org/Dynamic.html</a>\n  </p>\n</div>\n","enum":"<h1>abstract Enum&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An abstract type that represents an Enum type.</p> <p>The corresponding enum instance type is <code><a href=\"enumvalue\">EnumValue</a></code>.</p> <p>See <code><a href=\"type\">Type</a></code> for the Haxe Reflection API.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Enum.html\" class=\"_attribution-link\">http://api.haxe.org/Enum.html</a>\n  </p>\n</div>\n","imap":"<h1>typedef IMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1> <p> alias for <a class=\"type\" title=\"\" href=\"haxe/imap\">IMap</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </p> \n<p>defined in Map</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/IMap.html\" class=\"_attribution-link\">http://api.haxe.org/IMap.html</a>\n  </p>\n</div>\n","float":"<h1>abstract Float(<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The standard Float type, this is a double-precision IEEE 64bit float.</p> <p>On static targets, null cannot be assigned to Float. If this is necessary, <code><a href=\"null\">Null</a>&lt;<a href=\"float\">Float</a>&gt;</code> can be used instead.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Float.html\" class=\"_attribution-link\">http://api.haxe.org/Float.html</a>\n  </p>\n</div>\n","map":"<h1>abstract Map&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;(<a class=\"type\" title=\"\" href=\"imap\">IMap</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Map allows key to value mapping for arbitrary value types, and many key types.</p> <p>This is a multi-type abstract, it is instantiated as one of its specialization types depending on its type parameters.</p> <p>A Map can be instantiated without explicit type parameters. Type inference will then determine the type parameters from the usage.</p> <p>Maps can also be created with <code>key1 =&gt; value1, key2 =&gt; value2</code> syntax.</p> <p>Map is an abstract type, it is not available at runtime.</p> </div> <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new Map.</p> <p>This becomes a constructor call to one of the specialization types in the output. The rules for that are as follows:</p>\n<ol>\n<li>if K is a <code><a href=\"string\">String</a></code>, <code><a href=\"haxe/ds/stringmap\">haxe.ds.StringMap</a></code> is used</li>\n<li>if K is an <code><a href=\"int\">Int</a></code>, <code><a href=\"haxe/ds/intmap\">haxe.ds.IntMap</a></code> is used</li>\n<li>if K is an <code><a href=\"enumvalue\">EnumValue</a></code>, <code><a href=\"haxe/ds/enumvaluemap\">haxe.ds.EnumValueMap</a></code> is used</li>\n<li>if K is any other class or structure, <code><a href=\"haxe/ds/objectmap\">haxe.ds.ObjectMap</a></code> is used</li>\n<li>if K is any other type, it causes a compile-time error</li>\n</ol> <p>(Cpp) Map does not use weak keys on ObjectMap by default.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"arrayWrite\"><code><span class=\"label\">inline</span> <a href=\"#arrayWrite\">arrayWrite</a> (k:<span class=\"type\">K</span>, v:<span class=\"type\">V</span>):<span class=\"type\">V</span> </code></h3>\n \n<h3 id=\"exists\"><code><span class=\"label\">inline</span> <a href=\"#exists\">exists</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Returns true if <code>key</code> has a mapping, false otherwise.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>Returns the current mapping of <code>key</code>.</h3> <p>If no such mapping exists, null is returned.</p> <h3>Note that a check like <code>map.get(key) == <a href=\"null\">null</a></code> can hold for two reasons:</h3>\n<ol>\n<li>the map has no mapping for <code>key</code>\n</li>\n<li>the map has a mapping with a value of <code><a href=\"null\">null</a></code>\n</li>\n</ol> <h3>If it is important to distinguish these cases, <code>exists()</code> should be used.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"iterator\"><code><span class=\"label\">inline</span> <a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>Returns an Iterator over the values of <code>this</code> Map.</h3> <p>The order of values is undefined.</p> \n<h3 id=\"keys\"><code><span class=\"label\">inline</span> <a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<h3>Returns an Iterator over the keys of <code>this</code> Map.</h3> <p>The order of keys is undefined.</p> \n<h3 id=\"remove\"><code><span class=\"label\">inline</span> <a href=\"#remove\">remove</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Removes the mapping of <code>key</code> and returns true if such a mapping existed, false otherwise.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (key:<span class=\"type\">K</span>, value:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Maps <code>key</code> to <code>value</code>.</p> <h3>If <code>key</code> already has a mapping, the previous value disappears.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"toString\"><code><span class=\"label\">inline</span> <a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns a String representation of <code>this</code> Map.</h3> <p>The exact representation depends on the platform and key-type.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Map.html\" class=\"_attribution-link\">http://api.haxe.org/Map.html</a>\n  </p>\n</div>\n","date":"<h1> class Date </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Date class provides a basic structure for date and time related information. Date instances can be created by</p>\n<ul>\n<li>\n<code>new <a href=\"date\">Date</a>()</code> for a specific date,</li>\n<li>\n<code><a href=\"date#now\">Date.now</a>()</code> to obtain information about the current time,</li>\n<li>\n<code><a href=\"date#fromTime\">Date.fromTime</a>()</code> with a given timestamp or</li>\n<li>\n<code><a href=\"date#fromString\">Date.fromString</a>()</code> by parsing from a String.</li>\n</ul> <p>There is some extra functions available in the <code><a href=\"datetools\">DateTools</a></code> class.</p> <p>In the context of haxe dates, a timestamp is defined as the number of milliseconds elapsed since 1st January 1970.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (year:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, month:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, day:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, hour:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, min:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, sec:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>)</code></h3>\n<p>Creates a new date object from the given arguments.</p> <p>The behaviour of a Date instance is only consistent across platforms if the the arguments describe a valid date.</p>\n<ul>\n<li>month: 0 to 11</li>\n<li>day: 1 to 31</li>\n<li>hour: 0 to 23</li>\n<li>min: 0 to 59</li>\n<li>sec: 0 to 59</li>\n</ul>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"getDate\"><code><a href=\"#getDate\">getDate</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the day of <code>this</code> Date (1-31 range).</h3> \n<h3 id=\"getDay\"><code><a href=\"#getDay\">getDay</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the day of the week of <code>this</code> Date (0-6 range).</h3> \n<h3 id=\"getFullYear\"><code><a href=\"#getFullYear\">getFullYear</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the full year of <code>this</code> Date (4-digits).</h3> \n<h3 id=\"getHours\"><code><a href=\"#getHours\">getHours</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the hours of <code>this</code> Date (0-23 range).</h3> \n<h3 id=\"getMinutes\"><code><a href=\"#getMinutes\">getMinutes</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the minutes of <code>this</code> Date (0-59 range).</h3> \n<h3 id=\"getMonth\"><code><a href=\"#getMonth\">getMonth</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the month of <code>this</code> Date (0-11 range).</h3> \n<h3 id=\"getSeconds\"><code><a href=\"#getSeconds\">getSeconds</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the seconds of the <code>this</code> Date (0-59 range).</h3> \n<h3 id=\"getTime\"><code><a href=\"#getTime\">getTime</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the timestamp of the date. It might only have a per-second precision depending on the platforms.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns a string representation of <code>this</code> Date, by using the standard format [YYYY-MM-DD HH:MM:SS]. See <code><a href=\"datetools#format\">DateTools.format</a></code> for other formating rules.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromString\"><code><span class=\"label\">static</span> <a href=\"#fromString\">fromString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a></code></h3>\n<h3>Returns a Date from a formated string <code>s</code>, with the following accepted formats:</h3>\n<ul>\n<li><code>\"YYYY-MM-DD hh:mm:ss\"</code></li>\n<li><code>\"YYYY-MM-DD\"</code></li>\n<li><code>\"hh:mm:ss\"</code></li>\n</ul> <p>The first two formats are expressed in local time, the third in UTC Epoch.</p> \n<h3 id=\"fromTime\"><code><span class=\"label\">static</span> <a href=\"#fromTime\">fromTime</a> (t:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a></code></h3>\n<h3>Returns a Date from timestamp <code>t</code>.</h3> \n<h3 id=\"now\"><code><span class=\"label\">static</span> <a href=\"#now\">now</a> ():<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a></code></h3>\n<p>Returns a Date representing the current local time.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Date.html\" class=\"_attribution-link\">http://api.haxe.org/Date.html</a>\n  </p>\n</div>\n","datetools":"<h1> class DateTools </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The DateTools class contains some extra functionalities for handling <code><a href=\"date\">Date</a></code> instances and timestamps.</p> <p>In the context of haxe dates, a timestamp is defined as the number of milliseconds elapsed since 1st January 1970.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"days\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#days\">days</a> (n:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Converts a number of days to a timestamp.</p> \n<h3 id=\"delta\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#delta\">delta</a> (d:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a>, t:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a></code></h3>\n<p>Returns the result of adding timestamp <code>t</code> to Date <code>d</code>.</p> <h3>This is a convenience function for calling <code><a href=\"date#fromTime\">Date.fromTime</a>(d.getTime() + t)</code>.</h3> \n<h3 id=\"format\"><code><span class=\"label\">static</span> <a href=\"#format\">format</a> (d:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a>, f:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Format the date <code>d</code> according to the format <code>f</code>. The format is compatible with the <code>strftime</code> standard format, except that there is no support in Flash and JS for day and months names (due to lack of proper internationalization API). On Haxe/Neko/Windows, some formats are not supported.</p> \n<h3 id=\"getMonthDays\"><code><span class=\"label\">static</span> <a href=\"#getMonthDays\">getMonthDays</a> (d:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"date\">Date</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the number of days in the month of Date <code>d</code>.</h3> <p>This method handles leap years.</p> \n<h3 id=\"hours\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#hours\">hours</a> (n:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Converts a number of hours to a timestamp.</p> \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (o:{seconds:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ms:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, minutes:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, hours:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, days:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>}):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Build a date-time from several components</p> \n<h3 id=\"makeUtc\"><code><span class=\"label\">static</span> <a href=\"#makeUtc\">makeUtc</a> (year:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, month:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, day:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, hour:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, min:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, sec:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on cpp, flash, js, php, python</p>\n<p>Retrieve Unix timestamp value from Date components. Takes same argument sequence as the Date constructor.</p> \n<h3 id=\"minutes\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#minutes\">minutes</a> (n:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Converts a number of minutes to a timestamp.</p> \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <a href=\"#parse\">parse</a> (t:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):{seconds:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ms:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, minutes:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, hours:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, days:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>}</code></h3>\n<p>Separate a date-time into several components</p> \n<h3 id=\"seconds\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#seconds\">seconds</a> (n:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Converts a number of seconds to a timestamp.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/DateTools.html\" class=\"_attribution-link\">http://api.haxe.org/DateTools.html</a>\n  </p>\n</div>\n","ereg":"<h1> class EReg </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The EReg class represents regular expressions.</p> <p>While basic usage and patterns consistently work across platforms, some more complex operations may yield different results. This is a necessary trade- off to retain a certain level of performance.</p> <p>EReg instances can be created by calling the constructor, or with the special syntax ~/pattern/modifier</p> <p>EReg instances maintain an internal state, which is affected by several of its methods.</p> <p>A detailed explanation of the supported operations is available at http://haxe.org/manual/std-regex.html</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (r:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, opt:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>)</code></h3>\n<p>Creates a new regular expression with pattern <code>r</code> and modifiers <code>opt</code>.</p> <h3>This is equivalent to the shorthand syntax <code>~/r/opt</code>\n</h3> <p>If <code>r</code> or <code>opt</code> are null, the result is unspecified.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"map\"><code><a href=\"#map\">map</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, f:<a class=\"type\" title=\"The EReg class represents regular expressions.\" href=\"ereg\">EReg</a> ‑&gt; <a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Calls the function <code>f</code> for the substring of <code>s</code> which <code>this</code> EReg matches and replaces that substring with the result of <code>f</code> call.</p> <p>The <code>f</code> function takes <code>this</code> EReg object as its first argument and should return a replacement string for the substring matched.</p> <p>If <code>this</code> EReg does not match any substring, the result is <code>s</code>.</p> <p>By default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.</p> <p>If <code>s</code> or <code>f</code> are null, the result is unspecified.</p> \n<h3 id=\"map\"><code><a href=\"#map\">map</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, f:<a class=\"type\" title=\"The EReg class represents regular expressions.\" href=\"ereg\">EReg</a> ‑&gt; <a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>For each occurence of the pattern in the string <code>s</code>, the function <code>f</code> is called and can return the string that needs to be replaced. All occurences are matched anyway, and setting the <code>g</code> flag might cause some incorrect behavior on some platforms.</p> \n<h3 id=\"match\"><code><a href=\"#match\">match</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if <code>this</code> regular expression matches String <code>s</code>.</p> <p>This method modifies the internal state.</p> <p>If <code>s</code> is <code><a href=\"null\">null</a></code>, the result is unspecified.</p> \n<h3 id=\"matchSub\"><code><a href=\"#matchSub\">matchSub</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a> = -1):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Tells if <code>this</code> regular expression matches a substring of String <code>s</code>.</p> <p>This function expects <code>pos</code> and <code>len</code> to describe a valid substring of <code>s</code>, or else the result is unspecified. To get more robust behavior, <code>this.<a href=\"#match\">match</a>(s.substr(pos,len))</code> can be used instead.</p> <p>This method modifies the internal state.</p> <h3>If <code>s</code> is null, the result is unspecified.</h3> \n<h3 id=\"matchSub\"><code><a href=\"#matchSub\">matchSub</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a> = -1):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Tells if <code>this</code> regular expression matches a substring of String <code>s</code>.</p> <p>This function expects <code>pos</code> and <code>len</code> to describe a valid substring of <code>s</code>, or else the result is unspecified. To get more robust behavior, <code>this.<a href=\"#matchSub\">matchSub</a>(s.substr(pos,len))</code> can be used instead.</p> <p>This method modifies the internal state.</p> <h3>If <code>s</code> is null, the result is unspecified.</h3> \n<h3 id=\"matched\"><code><a href=\"#matched\">matched</a> (n:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the matched sub-group <code>n</code> of <code>this</code> EReg.</p> <p>This method should only be called after <code>this.<a href=\"#match\">match</a></code> or <code>this.<a href=\"#matchSub\">matchSub</a></code>, and then operates on the String of that operation.</p> <p>The index <code>n</code> corresponds to the n-th set of parentheses in the pattern of <code>this</code> EReg. If no such sub-group exists, an exception is thrown.</p> <h3>If <code>n</code> equals 0, the whole matched substring is returned.</h3> \n<h3 id=\"matchedLeft\"><code><a href=\"#matchedLeft\">matchedLeft</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the part to the left of the last matched substring.</p> <p>If the most recent call to <code>this.<a href=\"#match\">match</a></code> or <code>this.<a href=\"#matchSub\">matchSub</a></code> did not match anything, the result is unspecified.</p> <p>If the global g modifier was in place for the matching, only the substring to the left of the leftmost match is returned.</p> <p>The result does not include the matched part.</p> \n<h3 id=\"matchedPos\"><code><a href=\"#matchedPos\">matchedPos</a> ():{pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>}</code></h3>\n<p>Returns the position and length of the last matched substring, within the String which was last used as argument to <code>this.<a href=\"#match\">match</a></code> or <code>this.<a href=\"#matchSub\">matchSub</a></code>.</p> <p>If the most recent call to <code>this.<a href=\"#match\">match</a></code> or <code>this.<a href=\"#matchSub\">matchSub</a></code> did not match anything, the result is unspecified.</p> <p>If the global g modifier was in place for the matching, the position and length of the leftmost substring is returned.</p> \n<h3 id=\"matchedRight\"><code><a href=\"#matchedRight\">matchedRight</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the part to the right of the last matched substring.</p> <p>If the most recent call to <code>this.<a href=\"#match\">match</a></code> or <code>this.<a href=\"#matchSub\">matchSub</a></code> did not match anything, the result is unspecified.</p> <p>If the global g modifier was in place for the matching, only the substring to the right of the leftmost match is returned.</p> <p>The result does not include the matched part.</p> \n<h3 id=\"replace\"><code><a href=\"#replace\">replace</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, by:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Replaces the first substring of <code>s</code> which <code>this</code> EReg matches with <code>by</code>.</p> <p>If <code>this</code> EReg does not match any substring, the result is <code>s</code>.</p> <p>By default, this method replaces only the first matched substring. If the global g modifier is in place, all matched substrings are replaced.</p> <p>If <code>by</code> contains <code>$1</code> to <code>$9</code>, the digit corresponds to number of a matched sub-group and its value is used instead. If no such sub-group exists, the replacement is unspecified. The string <code>$$</code> becomes <code>$</code>.</p> <p>If <code>s</code> or <code>by</code> are null, the result is unspecified.</p> \n<h3 id=\"split\"><code><a href=\"#split\">split</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p>Splits String <code>s</code> at all substrings <code>this</code> EReg matches.</p> <h3>If a match is found at the start of <code>s</code>, the result contains a leading empty String \"\" entry.</h3> <h3>If a match is found at the end of <code>s</code>, the result contains a trailing empty String \"\" entry.</h3> <p>If two matching substrings appear next to each other, the result contains the empty String \"\" between them.</p> <p>By default, this method splits <code>s</code> into two parts at the first matched substring. If the global g modifier is in place, <code>s</code> is split at each matched substring.</p> <h3>If <code>s</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/EReg.html\" class=\"_attribution-link\">http://api.haxe.org/EReg.html</a>\n  </p>\n</div>\n","null":"<h1>typedef Null&lt;<span class=\"type\">T</span>&gt; </h1> <p> alias for <span class=\"type\">T</span> </p> <p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p><code><a href=\"null\">Null</a></code> can be useful in two cases. In order to document some methods that accepts or can return a <code><a href=\"null\">null</a></code> value, or for the Flash compiler and AS3 generator to distinguish between base values that can be null and others that can't.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Null.html\" class=\"_attribution-link\">http://api.haxe.org/Null.html</a>\n  </p>\n</div>\n","array":"<h1> class Array&lt;<span class=\"type\">T</span>&gt; </h1> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"http://api.haxe.org/js/RegExpMatch.html\">RegExpMatch</a> </p>   <div class=\"indent\"> <p>An Array is a storage for values. You can access it using indexes or with its API.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new Array.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>The length of <code>this</code> Array.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"concat\"><code><a href=\"#concat\">concat</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns a new Array by appending the elements of <code>a</code> to the elements of <code>this</code> Array.</p> <h3>This operation does not modify <code>this</code> Array.</h3> <p>If <code>a</code> is the empty Array <code>[]</code>, a copy of <code>this</code> Array is returned.</p> <p>The length of the returned Array is equal to the sum of <code>this.<a href=\"#length\">length</a></code> and <code>a.length</code>.</p> <p>If <code>a</code> is <code><a href=\"null\">null</a></code>, the result is unspecified.</p> \n<h3 id=\"copy\"><code><a href=\"#copy\">copy</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns a shallow copy of <code>this</code> Array.</h3> <p>The elements are not copied and retain their identity, so <code>a[i] == a.copy()[i]</code> is true for any valid <code>i</code>. However, <code>a == a.copy()</code> is always false.</p> \n<h3 id=\"filter\"><code><a href=\"#filter\">filter</a> (f:<span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns an Array containing those elements of <code>this</code> for which <code>f</code> returned true.</p> <p>The individual elements are not duplicated and retain their identity.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"indexOf\"><code><a href=\"#indexOf\">indexOf</a> (x:<span class=\"type\">T</span>, ?fromIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Returns position of the first occurense of <code>x</code> in <code>this</code> Array, searching front to back.</p> <h3>If <code>x</code> is found by checking standard equality, the function returns its index.</h3> <h3>If <code>x</code> is not found, the function returns -1.</h3> <p>If <code>fromIndex</code> is specified, it will be used as the starting index to search from, otherwise search starts with zero index. If it is negative, it will be taken as the offset from the end of <code>this</code> Array to compute the starting index. If given or computed starting index is less than 0, the whole array will be searched, if it is greater than or equal to the length of <code>this</code> Array, the function returns -1.</p> \n<h3 id=\"insert\"><code><a href=\"#insert\">insert</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Inserts the element <code>x</code> at the position <code>pos</code>.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>The offset is calculated like so:</p>\n<ul>\n<li>If <code>pos</code> exceeds <code>this.<a href=\"#length\">length</a></code>, the offset is <code>this.<a href=\"#length\">length</a></code>.</li>\n<li>If <code>pos</code> is negative, the offset is calculated from the end of <code>this</code> Array, i.e. <code>this.<a href=\"#length\">length</a> + pos</code>. If this yields a negative value, the offset is 0.</li>\n<li>Otherwise, the offset is <code>pos</code>.</li>\n</ul> <p>If the resulting offset does not exceed <code>this.<a href=\"#length\">length</a></code>, all elements from and including that offset to the end of <code>this</code> Array are moved one index ahead.</p> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns an iterator of the Array values.</p> \n<h3 id=\"join\"><code><a href=\"#join\">join</a> (sep:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns a string representation of <code>this</code> Array, with <code>sep</code> separating each element.</p> <h3>The result of this operation is equal to <code><a href=\"std#string\">Std.string</a>(this[0]) + sep + <a href=\"std#string\">Std.string</a>(this[1]) + sep + ... + sep + <a href=\"std#string\">Std.string</a>(this[this.<a href=\"#length\">length</a>-1])</code>\n</h3> <p>If <code>this</code> is the empty Array <code>[]</code>, the result is the empty String <code>\"\"</code>. If <code>this</code> has exactly one element, the result is equal to a call to <code><a href=\"std#string\">Std.string</a>(this[0])</code>.</p> <h3>If <code>sep</code> is null, the result is unspecified.</h3> \n<h3 id=\"lastIndexOf\"><code><a href=\"#lastIndexOf\">lastIndexOf</a> (x:<span class=\"type\">T</span>, ?fromIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Returns position of the last occurense of <code>x</code> in <code>this</code> Array, searching back to front.</p> <h3>If <code>x</code> is found by checking standard equality, the function returns its index.</h3> <h3>If <code>x</code> is not found, the function returns -1.</h3> <p>If <code>fromIndex</code> is specified, it will be used as the starting index to search from, otherwise search starts with the last element index. If it is negative, it will be taken as the offset from the end of <code>this</code> Array to compute the starting index. If given or computed starting index is greater than or equal to the length of <code>this</code> Array, the whole array will be searched, if it is less than 0, the function returns -1.</p> \n<h3 id=\"map\"><code><a href=\"#map\">map</a>&lt;<span class=\"type\">S</span>&gt; (f:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">S</span>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">S</span>&gt;</code></h3>\n<p>Creates a new Array by applying function <code>f</code> to all elements of <code>this</code>.</p> <p>The order of elements is preserved.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"pop\"><code><a href=\"#pop\">pop</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Removes the last element of <code>this</code> Array and returns it.</h3> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>If <code>this</code> has at least one element, <code>this.<a href=\"#length\">length</a></code> will decrease by 1.</p> <p>If <code>this</code> is the empty Array <code>[]</code>, null is returned and the length remains 0.</p> \n<h3 id=\"push\"><code><a href=\"#push\">push</a> (x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Adds the element <code>x</code> at the end of <code>this</code> Array and returns the new length of <code>this</code> Array.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <h3>\n<code>this.<a href=\"#length\">length</a></code> increases by 1.</h3> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Removes the first occurence of <code>x</code> in <code>this</code> Array.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>If <code>x</code> is found by checking standard equality, it is removed from <code>this</code> Array and all following elements are reindexed acoordingly. The function then returns true.</p> <p>If <code>x</code> is not found, <code>this</code> Array is not changed and the function returns false.</p> \n<h3 id=\"reverse\"><code><a href=\"#reverse\">reverse</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<h3>Reverse the order of elements of <code>this</code> Array.</h3> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>If <code>this.<a href=\"#length\">length</a> &lt; 2</code>, <code>this</code> remains unchanged.</p> \n<h3 id=\"shift\"><code><a href=\"#shift\">shift</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Removes the first element of <code>this</code> Array and returns it.</h3> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>If <code>this</code> has at least one element, <code>this</code>.length and the index of each remaining element is decreased by 1.</p> <p>If <code>this</code> is the empty Array <code>[]</code>, <code><a href=\"null\">null</a></code> is returned and the length remains 0.</p> \n<h3 id=\"slice\"><code><a href=\"#slice\">slice</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Creates a shallow copy of the range of <code>this</code> Array, starting at and including <code>pos</code>, up to but not including <code>end</code>.</p> <h3>This operation does not modify <code>this</code> Array.</h3> <p>The elements are not copied and retain their identity.</p> <p>If <code>end</code> is omitted or exceeds <code>this.<a href=\"#length\">length</a></code>, it defaults to the end of <code>this</code> Array.</p> <p>If <code>pos</code> or <code>end</code> are negative, their offsets are calculated from the end of <code>this</code> Array by <code>this.<a href=\"#length\">length</a> + pos</code> and <code>this.<a href=\"#length\">length</a> + end</code> respectively. If this yields a negative value, 0 is used instead.</p> <p>If <code>pos</code> exceeds <code>this.<a href=\"#length\">length</a></code> or if <code>end</code> exceeds or equals <code>pos</code>, the result is <code>[]</code>.</p> \n<h3 id=\"sort\"><code><a href=\"#sort\">sort</a> (f:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Sorts <code>this</code> Array according to the comparison function <code>f</code>, where <code>f(x,y)</code> returns 0 if x == y, a positive Int if x &gt; y and a negative Int if x &lt; y.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <h3>The sort operation is not guaranteed to be stable, which means that the order of equal elements may not be retained. For a stable Array sorting algorithm, <code><a href=\"haxe/ds/arraysort#sort\">haxe.ds.ArraySort.sort</a>()</code> can be used instead.</h3> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"splice\"><code><a href=\"#splice\">splice</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Removes <code>len</code> elements from <code>this</code> Array, starting at and including <code>pos</code>, an returns them.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <p>If <code>len</code> is &lt; 0 or <code>pos</code> exceeds <code>this</code>.length, the result is the empty Array [].</p> <p>If <code>pos</code> is negative, its value is calculated from the end of <code>this</code> Array by <code>this.<a href=\"#length\">length</a> + pos</code>. If this yields a negative value, 0 is used instead.</p> <p>If the sum of the resulting values for <code>len</code> and <code>pos</code> exceed <code>this.<a href=\"#length\">length</a></code>, this operation will affect the elements from <code>pos</code> to the end of <code>this</code> Array.</p> <p>The length of the returned Array is equal to the new length of <code>this</code> Array subtracted from the original length of <code>this</code> Array. In other words, each element of the original <code>this</code> Array either remains in <code>this</code> Array or becomes an element of the returned Array.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns a string representation of <code>this</code> Array.</h3> <p>The result will include the individual elements' String representations separated by comma. The enclosing [ ] may be missing on some platforms, use Std.string() to get a String representation that is consistent across platforms.</p> \n<h3 id=\"unshift\"><code><a href=\"#unshift\">unshift</a> (x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Adds the element <code>x</code> at the start of <code>this</code> Array.</p> <h3>This operation modifies <code>this</code> Array in place.</h3> <h3>\n<code>this.<a href=\"#length\">length</a></code> and the index of each Array element increases by 1.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Array.html\" class=\"_attribution-link\">http://api.haxe.org/Array.html</a>\n  </p>\n</div>\n","type":"<h1> class Type </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The haxe Reflection API allows retrieval of type information at runtime.</p> <p>This class complements the more lightweight Reflect class, with a focus on class and enum instances.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"allEnums\"><code><span class=\"label\">static</span> <a href=\"#allEnums\">allEnums</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns a list of all constructors of enum <code>e</code> that require no arguments.</h3> <h3>This may return the empty Array [] if all constructors of <code>e</code> require arguments.</h3> <h3>Otherwise an instance of <code>e</code> constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"createEmptyInstance\"><code><span class=\"label\">static</span> <a href=\"#createEmptyInstance\">createEmptyInstance</a>&lt;<span class=\"type\">T</span>&gt; (cl:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<span class=\"type\">T</span>&gt;):<span class=\"type\">T</span> </code></h3>\n<h3>Creates an instance of class <code>cl</code>.</h3> <p>This function guarantees that the class constructor is not called.</p> <h3>If <code>cl</code> is null, the result is unspecified.</h3> \n<h3 id=\"createEnum\"><code><span class=\"label\">static</span> <a href=\"#createEnum\">createEnum</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;, constr:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<span class=\"type\">T</span> </code></h3>\n<p>Creates an instance of enum <code>e</code> by calling its constructor <code>constr</code> with arguments <code>params</code>.</p> <p>If <code>e</code> or <code>constr</code> is null, or if enum <code>e</code> has no constructor named <code>constr</code>, or if the number of elements in <code>params</code> does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.</p> \n<h3 id=\"createEnumIndex\"><code><span class=\"label\">static</span> <a href=\"#createEnumIndex\">createEnumIndex</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;, index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<span class=\"type\">T</span> </code></h3>\n<p>Creates an instance of enum <code>e</code> by calling its constructor number <code>index</code> with arguments <code>params</code>.</p> <p>The constructor indices are preserved from haxe syntax, so the first declared is index 0, the next index 1 etc.</p> <p>If <code>e</code> or <code>constr</code> is null, or if enum <code>e</code> has no constructor named <code>constr</code>, or if the number of elements in <code>params</code> does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.</p> \n<h3 id=\"createInstance\"><code><span class=\"label\">static</span> <a href=\"#createInstance\">createInstance</a>&lt;<span class=\"type\">T</span>&gt; (cl:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<span class=\"type\">T</span>&gt;, args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<span class=\"type\">T</span> </code></h3>\n<p>Creates an instance of class <code>cl</code>, using <code>args</code> as arguments to the class constructor.</p> <p>This function guarantees that the class constructor is called.</p> <p>Default values of constructors arguments are not guaranteed to be taken into account.</p> <p>If <code>cl</code> or <code>args</code> are null, or if the number of elements in <code>args</code> does not match the expected number of constructor arguments, or if any argument has an invalid type, or if <code>cl</code> has no own constructor, the result is unspecified.</p> <p>In particular, default values of constructor arguments are not guaranteed to be taken into account.</p> \n<h3 id=\"enumConstructor\"><code><span class=\"label\">static</span> <a href=\"#enumConstructor\">enumConstructor</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"enumvalue\">EnumValue</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns the constructor name of enum instance <code>e</code>.</h3> <p>The result String does not contain any constructor arguments.</p> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"enumEq\"><code><span class=\"label\">static</span> <a href=\"#enumEq\">enumEq</a>&lt;<span class=\"type\">T</span>&gt; (a:<span class=\"type\">T</span>, b:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Recursively compares two enum instances <code>a</code> and <code>b</code> by value.</p> <h3>Unlike <code>a == b</code>, this function performs a deep equality check on the arguments of the constructors, if exists.</h3> <p>If <code>a</code> or <code>b</code> are null, the result is unspecified.</p> \n<h3 id=\"enumIndex\"><code><span class=\"label\">static</span> <a href=\"#enumIndex\">enumIndex</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"enumvalue\">EnumValue</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the index of enum instance <code>e</code>.</h3> <h3>This corresponds to the original syntactic position of <code>e</code>. The index of the first declared constructor is 0, the next one is 1 etc.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"enumParameters\"><code><span class=\"label\">static</span> <a href=\"#enumParameters\">enumParameters</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"enumvalue\">EnumValue</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;</code></h3>\n<h3>Returns a list of the constructor arguments of enum instance <code>e</code>.</h3> <h3>If <code>e</code> has no arguments, the result is [].</h3> <h3>Otherwise the result are the values that were used as arguments to <code>e</code>, in the order of their declaration.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"getClass\"><code><span class=\"label\">static</span> <a href=\"#getClass\">getClass</a>&lt;<span class=\"type\">T</span>&gt; (o:<span class=\"type\">T</span>):<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns the class of <code>o</code>, if <code>o</code> is a class instance.</p> <h3>If <code>o</code> is null or of a different type, null is returned.</h3> <p>In general, type parameter information cannot be obtained at runtime.</p> \n<h3 id=\"getClassFields\"><code><span class=\"label\">static</span> <a href=\"#getClassFields\">getClassFields</a> (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<h3>Returns a list of static fields of class <code>c</code>.</h3> <p>This does not include static fields of parent classes.</p> <p>The order of the fields in the returned Array is unspecified.</p> <h3>If <code>c</code> is null, the result is unspecified.</h3> <p>(As3) This method only returns class fields that are public.</p> \n<h3 id=\"getClassName\"><code><span class=\"label\">static</span> <a href=\"#getClassName\">getClassName</a> (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns the name of class <code>c</code>, including its path.</h3> <p>If <code>c</code> is inside a package, the package structure is returned dot- separated, with another dot separating the class name: <code>pack1.pack2.(...).packN.ClassName</code> If <code>c</code> is a sub-type of a haxe module, that module is not part of the package structure.</p> <h3>If <code>c</code> has no package, the class name is returned.</h3> <h3>If <code>c</code> is null, the result is unspecified.</h3> <p>The class name does not include any type parameters.</p> \n<h3 id=\"getEnum\"><code><span class=\"label\">static</span> <a href=\"#getEnum\">getEnum</a> (o:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"enumvalue\">EnumValue</a>):<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;</code></h3>\n<h3>Returns the enum of enum instance <code>o</code>.</h3> <p>An enum instance is the result of using an enum constructor. Given an <code>enum Color { Red; }</code>, <code>getEnum(Red)</code> returns <code><a href=\"enum\">Enum</a>&lt;Color&gt;</code>.</p> <h3>If <code>o</code> is null, null is returned.</h3> <p>In general, type parameter information cannot be obtained at runtime.</p> \n<h3 id=\"getEnumConstructs\"><code><span class=\"label\">static</span> <a href=\"#getEnumConstructs\">getEnumConstructs</a> (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<h3>Returns a list of the names of all constructors of enum <code>e</code>.</h3> <p>The order of the constructor names in the returned Array is preserved from the original syntax.</p> <h3>If <code>c</code> is null, the result is unspecified.</h3> \n<h3 id=\"getEnumName\"><code><span class=\"label\">static</span> <a href=\"#getEnumName\">getEnumName</a> (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns the name of enum <code>e</code>, including its path.</h3> <p>If <code>e</code> is inside a package, the package structure is returned dot- separated, with another dot separating the enum name: <code>pack1.pack2.(...).packN.EnumName</code> If <code>e</code> is a sub-type of a haxe module, that module is not part of the package structure.</p> <h3>If <code>e</code> has no package, the enum name is returned.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> <p>The enum name does not include any type parameters.</p> \n<h3 id=\"getInstanceFields\"><code><span class=\"label\">static</span> <a href=\"#getInstanceFields\">getInstanceFields</a> (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<h3>Returns a list of the instance fields of class <code>c</code>.</h3> <p>This only includes fields which are known at compile-time. In particular, using getInstanceFields(getClass(obj)) will not include any fields which were added to obj at runtime.</p> <p>The order of the fields in the returned Array is unspecified.</p> <h3>If <code>c</code> is null, the result is unspecified.</h3> <p>(As3) This method only returns instance fields that are public.</p> \n<h3 id=\"getSuperClass\"><code><span class=\"label\">static</span> <a href=\"#getSuperClass\">getSuperClass</a> (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;</code></h3>\n<h3>Returns the super-class of class <code>c</code>.</h3> <h3>If <code>c</code> has no super class, null is returned.</h3> <h3>If <code>c</code> is null, the result is unspecified.</h3> <p>In general, type parameter information cannot be obtained at runtime.</p> \n<h3 id=\"resolveClass\"><code><span class=\"label\">static</span> <a href=\"#resolveClass\">resolveClass</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;</code></h3>\n<p>Resolves a class by name.</p> <h3>If <code>name</code> is the path of an existing class, that class is returned.</h3> <p>Otherwise null is returned.</p> <h3>If <code>name</code> is null or the path to a different type, the result is unspecified.</h3> <p>The class name must not include any type parameters.</p> \n<h3 id=\"resolveEnum\"><code><span class=\"label\">static</span> <a href=\"#resolveEnum\">resolveEnum</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;</code></h3>\n<p>Resolves an enum by name.</p> <h3>If <code>name</code> is the path of an existing enum, that enum is returned.</h3> <p>Otherwise null is returned.</p> <h3>If <code>name</code> is null the result is unspecified.</h3> <h3>If <code>name</code> is the path to a different type, null is returned.</h3> <p>The enum name must not include any type parameters.</p> \n<h3 id=\"typeof\"><code><span class=\"label\">static</span> <a href=\"#typeof\">typeof</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"\" href=\"valuetype\">ValueType</a></code></h3>\n<h3>Returns the runtime type of value <code>v</code>.</h3> <h3>The result corresponds to the type <code>v</code> has at runtime, which may vary per platform. Assumptions regarding this should be minimized to avoid surprises.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Type.html\" class=\"_attribution-link\">http://api.haxe.org/Type.html</a>\n  </p>\n</div>\n","list":"<h1> class List&lt;<span class=\"type\">T</span>&gt; </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>A linked-list of elements. The list is composed of two-elements arrays that are chained together. It is optimized so that adding or removing an element does not imply copying the whole array content every time.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new empty list.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>The length of <code>this</code> List.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><a href=\"#add\">add</a> (item:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Adds element <code>item</code> at the end of <code>this</code> List.</p> <h3>\n<code>this.<a href=\"#length\">length</a></code> increases by 1.</h3> \n<h3 id=\"clear\"><code><a href=\"#clear\">clear</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<h3>Empties <code>this</code> List.</h3> <h3>This function does not traverse the elements, but simply sets the internal references to null and <code>this.<a href=\"#length\">length</a></code> to 0.</h3> \n<h3 id=\"filter\"><code><a href=\"#filter\">filter</a> (f:<span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns a list filtered with <code>f</code>. The returned list will contain all elements for which <code>f(x) == true</code>.</p> \n<h3 id=\"first\"><code><a href=\"#first\">first</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns the first element of <code>this</code> List, or null if no elements exist.</h3> <h3>This function does not modify <code>this</code> List.</h3> \n<h3 id=\"isEmpty\"><code><a href=\"#isEmpty\">isEmpty</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if <code>this</code> List is empty.</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<span class=\"type\">ListIterator</span>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns an iterator on the elements of the list.</p> \n<h3 id=\"join\"><code><a href=\"#join\">join</a> (sep:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns a string representation of <code>this</code> List, with <code>sep</code> separating each element.</p> \n<h3 id=\"last\"><code><a href=\"#last\">last</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns the last element of <code>this</code> List, or null if no elements exist.</h3> <h3>This function does not modify <code>this</code> List.</h3> \n<h3 id=\"map\"><code><a href=\"#map\">map</a>&lt;<span class=\"type\">X</span>&gt; (f:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">X</span>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">X</span>&gt;</code></h3>\n<h3>Returns a new list where all elements have been converted by the function <code>f</code>.</h3> \n<h3 id=\"pop\"><code><a href=\"#pop\">pop</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns the first element of <code>this</code> List, or null if no elements exist.</h3> <h3>The element is removed from <code>this</code> List.</h3> \n<h3 id=\"push\"><code><a href=\"#push\">push</a> (item:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Adds element <code>item</code> at the beginning of <code>this</code> List.</p> <h3>\n<code>this.<a href=\"#length\">length</a></code> increases by 1.</h3> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Removes the first occurence of <code>v</code> in <code>this</code> List.</p> <p>If <code>v</code> is found by checking standard equality, it is removed from <code>this</code> List and the function returns true.</p> <p>Otherwise, false is returned.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Returns a string representation of <code>this</code> List.</h3> <p>The result is enclosed in { } with the individual elements being separated by a comma.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/List.html\" class=\"_attribution-link\">http://api.haxe.org/List.html</a>\n  </p>\n</div>\n","single":"<h1>abstract Single(<a class=\"type\" title=\"\" href=\"single\">Single</a>) </h1> <p> from <a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a> to <a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a> </p>\n<p class=\"availability\">Available on cs, java</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Single.html\" class=\"_attribution-link\">http://api.haxe.org/Single.html</a>\n  </p>\n</div>\n","std":"<h1> class Std </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Std class provides standard methods for manipulating basic types.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"instance\"><code><span class=\"label\">static</span> <a href=\"#instance\">instance</a>&lt;<span class=\"type\">T</span>, <span class=\"type\">S</span>&gt; (value:<span class=\"type\">T</span>, c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<span class=\"type\">S</span>&gt;):<span class=\"type\">S</span> </code></h3>\n<p>Checks if object <code>value</code> is an instance of class <code>c</code>.</p> <p>Compiles only if the class specified by <code>c</code> can be assigned to the type of <code>value</code>.</p> <p>This method checks if a downcast is possible. That is, if the runtime type of <code>value</code> is assignable to the class specified by <code>c</code>, <code>value</code> is returned. Otherwise null is returned.</p> <p>This method is not guaranteed to work with interfaces or core types such as <code><a href=\"string\">String</a></code>, <code><a href=\"array\">Array</a></code> and <code><a href=\"date\">Date</a></code>.</p> <p>If <code>value</code> is null, the result is null. If <code>c</code> is null, the result is unspecified.</p> \n<h3 id=\"int\"><code><span class=\"label\">static</span> <a href=\"#int\">int</a> (x:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Converts a <code><a href=\"float\">Float</a></code> to an <code><a href=\"int\">Int</a></code>, rounded towards 0.</p> <p>If <code>x</code> is outside of the signed Int32 range, or is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"is\"><code><span class=\"label\">static</span> <a href=\"#is\">is</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, t:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if a value <code>v</code> is of the type <code>t</code>. Returns <code>false</code> if <code>v</code> or <code>t</code> are null.</p> \n<h3 id=\"parseFloat\"><code><span class=\"label\">static</span> <a href=\"#parseFloat\">parseFloat</a> (x:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Converts a <code><a href=\"string\">String</a></code> to a <code><a href=\"float\">Float</a></code>.</p> <p>The parsing rules for <code>parseInt</code> apply here as well, with the exception of invalid input resulting in a <code>NaN</code> value instead of null.</p> <h3>Additionally, decimal notation may contain a single <code>.</code> to denote the start of the fractions.</h3> \n<h3 id=\"parseInt\"><code><span class=\"label\">static</span> <a href=\"#parseInt\">parseInt</a> (x:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>&gt;</code></h3>\n<p>Converts a <code><a href=\"string\">String</a></code> to an <code><a href=\"int\">Int</a></code>.</p> <p>Leading whitespaces are ignored.</p> <h3>If <code>x</code> starts with 0x or 0X, hexadecimal notation is recognized where the following digits may contain 0-9 and A-F.</h3> <p>Otherwise <code>x</code> is read as decimal number with 0-9 being allowed characters. <code>x</code> may also start with a - to denote a negative value.</p> <p>In decimal mode, parsing continues until an invalid character is detected, in which case the result up to that point is returned. For hexadecimal notation, the effect of invalid characters is unspecified.</p> <p>Leading 0s that are not part of the 0x/0X hexadecimal notation are ignored, which means octal notation is not supported.</p> <h3>If the input cannot be recognized, the result is <code><a href=\"null\">null</a></code>.</h3> \n<h3 id=\"random\"><code><span class=\"label\">static</span> <a href=\"#random\">random</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Return a random integer between 0 included and <code>x</code> excluded.</h3> <h3>If <code>x &lt;= 1</code>, the result is always 0.</h3> \n<h3 id=\"string\"><code><span class=\"label\">static</span> <a href=\"#string\">string</a> (s:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Converts any value to a String.</p> <p>If <code>s</code> is of <code><a href=\"string\">String</a></code>, <code><a href=\"int\">Int</a></code>, <code><a href=\"float\">Float</a></code> or <code><a href=\"bool\">Bool</a></code>, its value is returned.</p> <p>If <code>s</code> is an instance of a class and that class or one of its parent classes has a <code>toString</code> method, that method is called. If no such method is present, the result is unspecified.</p> <h3>If <code>s</code> is an enum constructor without argument, the constructor's name is returned. If arguments exists, the constructor's name followed by the String representations of the arguments is returned.</h3> <h3>If <code>s</code> is a structure, the field names along with their values are returned. The field order and the operator separating field names and values are unspecified.</h3> <p>If s is null, \"null\" is returned.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Std.html\" class=\"_attribution-link\">http://api.haxe.org/Std.html</a>\n  </p>\n</div>\n","uint":"<h1>abstract UInt(<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>) </h1> <p> from <a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a> to <a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a> </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The unsigned Int type is only defined for Flash and C#. Simulate it for other platforms.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/UInt.html\" class=\"_attribution-link\">http://api.haxe.org/UInt.html</a>\n  </p>\n</div>\n","math":"<h1> class Math </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class defines mathematical functions and constants.</p> </div>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"NEGATIVE_INFINITY\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#NEGATIVE_INFINITY\">NEGATIVE_INFINITY</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>\n<h3>A special <code><a href=\"float\">Float</a></code> constant which denotes negative infinity.</h3> <p>For example, this is the result of -1.0 / 0.0.</p> <p>Operations with <code>NEGATIVE_INFINITY</code> as an operand may result in <code>NEGATIVE_INFINITY</code>, <code>POSITIVE_INFINITY</code> or <code>NaN</code>.</p> <p>If this constant is converted to an <code><a href=\"int\">Int</a></code>, e.g. through <code><a href=\"std#int\">Std.int</a>()</code>, the result is unspecified.</p> \n<h3 id=\"NEGATIVE_INFINITY\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#NEGATIVE_INFINITY\">NEGATIVE_INFINITY</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on js</p>\n \n<h3 id=\"NaN\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#NaN\">NaN</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>\n<h3>A special <code><a href=\"float\">Float</a></code> constant which denotes an invalid number.</h3> <p>NaN stands for \"Not a Number\". It occurs when a mathematically incorrect operation is executed, such as taking the square root of a negative number: Math.sqrt(-1).</p> <p>All further operations with <code>NaN</code> as an operand will result in <code>NaN</code>.</p> <p>If this constant is converted to an <code><a href=\"int\">Int</a></code>, e.g. through <code><a href=\"std#int\">Std.int</a>()</code>, the result is unspecified.</p> <p>In order to test if a value is <code>NaN</code>, you should use <code><a href=\"math#isNaN\">Math.isNaN</a>()</code> function.</p> <h3>@php In PHP versions prior to 5.3.1 VC 9 there may be unexpected results when performing arithmetic operations with <code>NaN</code> on Windows, see [https://bugs.php.net/bug.php?id=42143]</h3> \n<h3 id=\"NaN\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#NaN\">NaN</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on js</p>\n \n<h3 id=\"PI\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#PI\">PI</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π. <code>PI</code> is approximately 3.141592653589793.</h3> \n<h3 id=\"POSITIVE_INFINITY\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#POSITIVE_INFINITY\">POSITIVE_INFINITY</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>\n<h3>A special <code><a href=\"float\">Float</a></code> constant which denotes negative infinity.</h3> <p>For example, this is the result of 1.0 / 0.0.</p> <p>Operations with <code>POSITIVE_INFINITY</code> as an operand may result in <code>NEGATIVE_INFINITY</code>, <code>POSITIVE_INFINITY</code> or <code>NaN</code>.</p> <p>If this constant is converted to an <code><a href=\"int\">Int</a></code>, e.g. through <code><a href=\"std#int\">Std.int</a>()</code>, the result is unspecified.</p> \n<h3 id=\"POSITIVE_INFINITY\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#POSITIVE_INFINITY\">POSITIVE_INFINITY</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p class=\"availability\">Available on js</p>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"abs\"><code><span class=\"label\">static</span> <a href=\"#abs\">abs</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the absolute value of <code>v</code>.</h3> <p>If <code>v</code> is positive or 0, the result is unchanged. Otherwise the result is -<code>v</code>.</p> <p>If <code>v</code> is <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>.</p> <p>If <code>v</code> is <code>NaN</code>, the result is <code>NaN</code>.</p> \n<h3 id=\"acos\"><code><span class=\"label\">static</span> <a href=\"#acos\">acos</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric arc cosine of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p> \n<h3 id=\"asin\"><code><span class=\"label\">static</span> <a href=\"#asin\">asin</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric arc of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p> \n<h3 id=\"atan\"><code><span class=\"label\">static</span> <a href=\"#atan\">atan</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric arc tangent of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p> \n<h3 id=\"atan2\"><code><span class=\"label\">static</span> <a href=\"#atan2\">atan2</a> (y:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, x:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the trigonometric arc tangent whose tangent is the quotient of two specified numbers, in radians.</p> <p>If parameter <code>x</code> or <code>y</code> is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is <code>NaN</code>.</p> \n<h3 id=\"ceil\"><code><span class=\"label\">static</span> <a href=\"#ceil\">ceil</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the smallest integer value that is not less than <code>v</code>.</h3> <p>If <code>v</code> is outside of the signed <code><a href=\"http://api.haxe.org/cpp/Int32.html\">Int32</a></code> range, or is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"cos\"><code><span class=\"label\">static</span> <a href=\"#cos\">cos</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric cosine of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p> \n<h3 id=\"exp\"><code><span class=\"label\">static</span> <a href=\"#exp\">exp</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns Euler's number, raised to the power of <code>v</code>.</h3> <p>exp(1.0) is approximately 2.718281828459.</p> <p>If <code>v</code> is <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>. If <code>v</code> is <code>NEGATIVE_INFINITY</code>, the result is <code>0.0</code>. If <code>v</code> is <code>NaN</code>, the result is <code>NaN</code>.</p> \n<h3 id=\"fceil\"><code><span class=\"label\">static</span> <a href=\"#fceil\">fceil</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the smallest integer value that is not less than <code>v</code>, as a <code><a href=\"float\">Float</a></code>.</p> <p>If <code>v</code> is is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"ffloor\"><code><span class=\"label\">static</span> <a href=\"#ffloor\">ffloor</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the largest integer value that is not greater than <code>v</code>, as a <code><a href=\"float\">Float</a></code>.</p> <p>If <code>v</code> is is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"floor\"><code><span class=\"label\">static</span> <a href=\"#floor\">floor</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Returns the largest integer value that is not greater than <code>v</code>.</h3> <p>If <code>v</code> is outside of the signed <code><a href=\"http://api.haxe.org/cpp/Int32.html\">Int32</a></code> range, or is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"fround\"><code><span class=\"label\">static</span> <a href=\"#fround\">fround</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Rounds <code>v</code> to the nearest integer value, as a Float.</h3> <p>If <code>v</code> is is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"isFinite\"><code><span class=\"label\">static</span> <a href=\"#isFinite\">isFinite</a> (f:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if <code>f</code> is a finite number.</h3> <p>If <code>f</code> is <code>POSITIVE_INFINITY</code>, <code>NEGATIVE_INFINITY</code> or <code>NaN</code>, the result is <code>false</code>, otherwise the result is <code>true</code>.</p> \n<h3 id=\"isNaN\"><code><span class=\"label\">static</span> <a href=\"#isNaN\">isNaN</a> (f:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if <code>f</code> is not a valid number.</h3> <p>If <code>f</code> is <code>NaN</code>, the result is <code>true</code>, otherwise the result is <code>false</code>. In particular, both <code>POSITIVE_INFINITY</code> and <code>NEGATIVE_INFINITY</code> are not considered <code>NaN</code>.</p> \n<h3 id=\"log\"><code><span class=\"label\">static</span> <a href=\"#log\">log</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the natural logarithm of <code>v</code>.</h3> <h3>This is the mathematical inverse operation of exp, i.e. <code>log(exp(v)) == v</code> always holds.</h3> <p>If <code>v</code> is negative (including <code>NEGATIVE_INFINITY</code>) or <code>NaN</code>, the result is <code>NaN</code>. If <code>v</code> is <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>. If <code>v</code> is <code>0.0</code>, the result is <code>NEGATIVE_INFINITY</code>.</p> \n<h3 id=\"max\"><code><span class=\"label\">static</span> <a href=\"#max\">max</a> (a:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, b:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the greater of values <code>a</code> and <code>b</code>.</p> <p>If <code>a</code> or <code>b</code> are <code>NaN</code>, the result is <code>NaN</code>. If <code>a</code> or <code>b</code> are <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>. If <code>a</code> and <code>b</code> are <code>NEGATIVE_INFINITY</code>, the result is <code>NEGATIVE_INFINITY</code>.</p> \n<h3 id=\"min\"><code><span class=\"label\">static</span> <a href=\"#min\">min</a> (a:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, b:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns the smaller of values <code>a</code> and <code>b</code>.</p> <p>If <code>a</code> or <code>b</code> are <code>NaN</code>, the result is <code>NaN</code>. If <code>a</code> or <code>b</code> are <code>NEGATIVE_INFINITY</code>, the result is <code>NEGATIVE_INFINITY</code>. If <code>a</code> and <code>b</code> are <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>.</p> \n<h3 id=\"pow\"><code><span class=\"label\">static</span> <a href=\"#pow\">pow</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>, exp:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns a specified base <code>v</code> raised to the specified power <code>exp</code>.</p> \n<h3 id=\"random\"><code><span class=\"label\">static</span> <a href=\"#random\">random</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Returns a pseudo-random number which is greater than or equal to 0.0, and less than 1.0.</p> \n<h3 id=\"round\"><code><span class=\"label\">static</span> <a href=\"#round\">round</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>Rounds <code>v</code> to the nearest integer value.</h3> <p>If <code>v</code> is outside of the signed <code><a href=\"http://api.haxe.org/cpp/Int32.html\">Int32</a></code> range, or is <code>NaN</code>, <code>NEGATIVE_INFINITY</code> or <code>POSITIVE_INFINITY</code>, the result is unspecified.</p> \n<h3 id=\"sin\"><code><span class=\"label\">static</span> <a href=\"#sin\">sin</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric sine of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p> \n<h3 id=\"sqrt\"><code><span class=\"label\">static</span> <a href=\"#sqrt\">sqrt</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the square root of <code>v</code>.</h3> <p>If <code>v</code> is negative (including <code>NEGATIVE_INFINITY</code>) or <code>NaN</code>, the result is <code>NaN</code>. If <code>v</code> is <code>POSITIVE_INFINITY</code>, the result is <code>POSITIVE_INFINITY</code>. If <code>v</code> is <code>0.0</code>, the result is <code>0.0</code>.</p> \n<h3 id=\"tan\"><code><span class=\"label\">static</span> <a href=\"#tan\">tan</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<h3>Returns the trigonometric tangent of the specified angle <code>v</code>, in radians.</h3> <p>If <code>v</code> is <code>NaN</code> or infinite, the result is <code>NaN</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Math.html\" class=\"_attribution-link\">http://api.haxe.org/Math.html</a>\n  </p>\n</div>\n","reflect":"<h1> class Reflect </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Reflect API is a way to manipulate values dynamically through an abstract interface in an untyped manner. Use with care.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"callMethod\"><code><span class=\"label\">static</span> <a href=\"#callMethod\">callMethod</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, func:<a class=\"type\" title=\"This type unifies with any function type.\" href=\"haxe/function\">Function</a>, args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a></code></h3>\n<p>Call a method with the given object and arguments.</p> \n<h3 id=\"compare\"><code><span class=\"label\">static</span> <a href=\"#compare\">compare</a>&lt;<span class=\"type\">T</span>&gt; (a:<span class=\"type\">T</span>, b:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Compares <code>a</code> and <code>b</code>.</p> <p>If <code>a</code> is less than <code>b</code>, the result is negative. If <code>b</code> is less than <code>a</code>, the result is positive. If <code>a</code> and <code>b</code> are equal, the result is 0.</p> <p>This function is only defined if <code>a</code> and <code>b</code> are of the same type.</p> <h3>If that type is a function, the result is unspecified and <code><a href=\"reflect#compareMethods\">Reflect.compareMethods</a></code> should be used instead.</h3> <p>For all other types, the result is 0 if <code>a</code> and <code>b</code> are equal. If they are not equal, the result depends on the type and is negative if:</p>\n<ul>\n<li>Numeric types: a is less than b</li>\n<li>String: a is lexicographically less than b</li>\n<li>Other: unspecified</li>\n</ul> <p>If <code>a</code> and <code>b</code> are null, the result is 0. If only one of them is null, the result is unspecified.</p> \n<h3 id=\"compareMethods\"><code><span class=\"label\">static</span> <a href=\"#compareMethods\">compareMethods</a> (f1:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, f2:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Compares the functions <code>f1</code> and <code>f2</code>.</p> <p>If <code>f1</code> or <code>f2</code> are not functions, the result is unspecified.</p> <p>Otherwise the result is true if <code>f1</code> and the <code>f2</code> are physically equal, false otherwise.</p> \n<h3 id=\"copy\"><code><span class=\"label\">static</span> <a href=\"#copy\">copy</a>&lt;<span class=\"type\">T</span>&gt; (o:<span class=\"type\">T</span>):<span class=\"type\">T</span> </code></h3>\n<h3>Copies the fields of structure <code>o</code>.</h3> <p>This is only guaranteed to work on anonymous structures.</p> <h3>If <code>o</code> is null, the result is unspecified.</h3> \n<h3 id=\"deleteField\"><code><span class=\"label\">static</span> <a href=\"#deleteField\">deleteField</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Removes the field named <code>field</code> from structure <code>o</code>.</p> <p>This method is only guaranteed to work on anonymous structures.</p> <p>If <code>o</code> or <code>field</code> are null, the result is unspecified.</p> \n<h3 id=\"field\"><code><span class=\"label\">static</span> <a href=\"#field\">field</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a></code></h3>\n<p>Returns the value of the field named <code>field</code> on object <code>o</code>.</p> <p>If <code>o</code> is not an object or has no field named <code>field</code>, the result is null.</p> <h3>If the field is defined as a property, its accessors are ignored. Refer to <code><a href=\"reflect#getProperty\">Reflect.getProperty</a></code> for a function supporting property accessors.</h3> <h3>If <code>field</code> is null, the result is unspecified.</h3> <p>(As3) If used on a property field, the getter will be invoked. It is not possible to obtain the value directly.</p> \n<h3 id=\"fields\"><code><span class=\"label\">static</span> <a href=\"#fields\">fields</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<h3>Returns the fields of structure <code>o</code>.</h3> <h3>This method is only guaranteed to work on anonymous structures. Refer to <code><a href=\"type#getInstanceFields\">Type.getInstanceFields</a></code> for a function supporting class instances.</h3> <h3>If <code>o</code> is null, the result is unspecified.</h3> \n<h3 id=\"getProperty\"><code><span class=\"label\">static</span> <a href=\"#getProperty\">getProperty</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a></code></h3>\n<p>Returns the value of the field named <code>field</code> on object <code>o</code>, taking property getter functions into account.</p> <h3>If the field is not a property, this function behaves like <code><a href=\"reflect#field\">Reflect.field</a></code>, but might be slower.</h3> <p>If <code>o</code> or <code>field</code> are null, the result is unspecified.</p> \n<h3 id=\"hasField\"><code><span class=\"label\">static</span> <a href=\"#hasField\">hasField</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if structure <code>o</code> has a field named <code>field</code>.</p> <h3>This is only guaranteed to work for anonymous structures. Refer to <code><a href=\"type#getInstanceFields\">Type.getInstanceFields</a></code> for a function supporting class instances.</h3> <p>If <code>o</code> or <code>field</code> are null, the result is unspecified.</p> \n<h3 id=\"isEnumValue\"><code><span class=\"label\">static</span> <a href=\"#isEnumValue\">isEnumValue</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if <code>v</code> is an enum value.</h3> <h3>The result is true if <code>v</code> is of type EnumValue, i.e. an enum constructor.</h3> <h3>Otherwise, including if <code>v</code> is null, the result is false.</h3> \n<h3 id=\"isFunction\"><code><span class=\"label\">static</span> <a href=\"#isFunction\">isFunction</a> (f:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Returns true if <code>f</code> is a function, false otherwise.</h3> <h3>If <code>f</code> is null, the result is false.</h3> \n<h3 id=\"isObject\"><code><span class=\"label\">static</span> <a href=\"#isObject\">isObject</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if <code>v</code> is an object.</h3> <h3>The result is true if <code>v</code> is one of the following:</h3>\n<ul>\n<li>class instance</li>\n<li>structure</li>\n<li>Class\n</li>\n<li>Enum\n</li>\n</ul> <h3>Otherwise, including if <code>v</code> is null, the result is false.</h3> \n<h3 id=\"makeVarArgs\"><code><span class=\"label\">static</span> <a href=\"#makeVarArgs\">makeVarArgs</a> (f:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a></code></h3>\n<h3><code><span class=\"label\">static</span> <a href=\"#makeVarArgs\">makeVarArgs</a> (f:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a></code></h3>\n<p>Transform a function taking an array of arguments into a function that can be called with any number of arguments.</p> \n<h3 id=\"setField\"><code><span class=\"label\">static</span> <a href=\"#setField\">setField</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, value:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Sets the field named <code>field</code> of object <code>o</code> to value <code>value</code>.</p> <p>If <code>o</code> has no field named <code>field</code>, this function is only guaranteed to work for anonymous structures.</p> <p>If <code>o</code> or <code>field</code> are null, the result is unspecified.</p> <p>(As3) If used on a property field, the setter will be invoked. It is not possible to set the value directly.</p> \n<h3 id=\"setProperty\"><code><span class=\"label\">static</span> <a href=\"#setProperty\">setProperty</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, value:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Sets the field named <code>field</code> of object <code>o</code> to value <code>value</code>, taking property setter functions into account.</p> <h3>If the field is not a property, this function behaves like <code><a href=\"reflect#setField\">Reflect.setField</a></code>, but might be slower.</h3> <h3>If <code>field</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Reflect.html\" class=\"_attribution-link\">http://api.haxe.org/Reflect.html</a>\n  </p>\n</div>\n","stringbuf":"<h1> class StringBuf </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>A String buffer is an efficient way to build a big string by appending small elements together.</p> <p>Its cross-platform implementation uses String concatenation internally, but StringBuf may be optimized for different targets.</p> <p>Unlike String, an instance of StringBuf is not immutable in the sense that it can be passed as argument to functions which modify it by appending more values. However, the internal buffer cannot be modified.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new StringBuf instance.</p> <p>This may involve initialization of the internal buffer.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<h3>The length of <code>this</code> StringBuf in characters.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><a href=\"#add\">add</a>&lt;<span class=\"type\">T</span>&gt; (x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Appends the representation of <code>x</code> to <code>this</code> StringBuf.</p> <h3>The exact representation of <code>x</code> may vary per platform. To get more consistent behavior, this function should be called with Std.string(x).</h3> <h3>If <code>x</code> is null, the String \"null\" is appended.</h3> \n<h3 id=\"add\"><code><a href=\"#add\">add</a>&lt;<span class=\"type\">T</span>&gt; (x:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Appends the representation of [x] to [this] StringBuf.</p> <p>The exact representation of [x] may vary per platform. To get more consistent behavior, this function should be called with Std.string(x).</p> <p>If [x] is null, the String \"null\" is appended.</p> \n<h3 id=\"addChar\"><code><a href=\"#addChar\">addChar</a> (c:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Appends the character identified by <code>c</code> to <code>this</code> StringBuf.</p> <h3>If <code>c</code> is negative or has another invalid value, the result is unspecified.</h3> \n<h3 id=\"addChar\"><code><a href=\"#addChar\">addChar</a> (c:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Appends the character identified by [c] to [this] StringBuf.</p> <p>If [c] is negative or has another invalid value, the result is unspecified.</p> \n<h3 id=\"addSub\"><code><a href=\"#addSub\">addSub</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Appends a substring of <code>s</code> to <code>this</code> StringBuf.</p> <p>This function expects <code>pos</code> and <code>len</code> to describe a valid substring of <code>s</code>, or else the result is unspecified. To get more robust behavior, <code>this.<a href=\"#add\">add</a>(s.substr(pos,len))</code> can be used instead.</p> <p>If <code>s</code> or <code>pos</code> are null, the result is unspecified.</p> <p>If <code>len</code> is omitted or null, the substring ranges from <code>pos</code> to the end of <code>s</code>.</p> \n<h3 id=\"addSub\"><code><a href=\"#addSub\">addSub</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Appends a substring of [s] to [this] StringBuf.</p> <p>This function expects [pos] and [len] to describe a valid substring of [s], or else the result is unspecified. To get more robust behavior, [this].add(s.substr(pos,len)) can be used instead.</p> <p>If [s] or [pos] are null, the result is unspecified.</p> <p>If [len] is omitted or null, the substring ranges from [pos] to the end of [s].</p> \n<h3 id=\"get_length\"><code><a href=\"#get_length\">get_length</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on python</p>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<h3>Returns the content of <code>this</code> StringBuf as String.</h3> <p>The buffer is not emptied by this operation.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the content of [this] StringBuf as String.</p> <p>The buffer is not emptied by this operation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/StringBuf.html\" class=\"_attribution-link\">http://api.haxe.org/StringBuf.html</a>\n  </p>\n</div>\n","stringtools":"<h1> class StringTools </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides advanced methods on Strings. It is ideally used with 'using StringTools' and then acts as an extension to the String class.</p> <p>If the first argument to any of the methods is null, the result is unspecified.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"endsWith\"><code><span class=\"label\">static</span> <a href=\"#endsWith\">endsWith</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, end:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if the string <code>s</code> ends with the string <code>end</code>.</p> <h3>If <code>end</code> is null, the result is unspecified.</h3> <h3>If <code>end</code> is the empty String \"\", the result is true.</h3> \n<h3 id=\"fastCodeAt\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fastCodeAt\">fastCodeAt</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Returns the character code at position <code>index</code> of String <code>s</code>, or an end-of-file indicator at if <code>position</code> equals <code>s.length</code>.</p> <p>This method is faster than String.charCodeAt() on some platforms, but the result is unspecified if <code>index</code> is negative or greater than <code>s.length</code>.</p> <h3>End of file status can be checked by calling <code><a href=\"stringtools#isEof\">StringTools.isEof</a></code> with the returned value as argument.</h3> <h3>This operation is not guaranteed to work if <code>s</code> contains the \\0 character.</h3> \n<h3 id=\"hex\"><code><span class=\"label\">static</span> <a href=\"#hex\">hex</a> (n:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?digits:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Encodes <code>n</code> into a hexadecimal representation.</h3> <p>If <code>digits</code> is specified, the resulting String is padded with \"0\" until its length equals <code>digits</code>.</p> \n<h3 id=\"htmlEscape\"><code><span class=\"label\">static</span> <a href=\"#htmlEscape\">htmlEscape</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?quotes:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Escapes HTML special characters of the string <code>s</code>.</h3> <p>The following replacements are made:</p>\n<ul>\n<li>\n<code>&amp;</code> becomes <code>&amp;amp</code>;</li>\n<li>\n<code>&lt;</code> becomes <code>&amp;lt</code>;</li>\n<li>\n<code>&gt;</code> becomes <code>&amp;gt</code>;</li>\n</ul> <h3>If <code>quotes</code> is true, the following characters are also replaced:</h3>\n<ul>\n<li>\n<code>\"</code> becomes <code>&amp;quot</code>;</li>\n<li>\n<code>'</code> becomes <code>&amp;#039</code>;</li>\n</ul> \n<h3 id=\"htmlUnescape\"><code><span class=\"label\">static</span> <a href=\"#htmlUnescape\">htmlUnescape</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Unescapes HTML special characters of the string <code>s</code>.</h3> <p>This is the inverse operation to htmlEscape, i.e. the following always holds: htmlUnescape(htmlEscape(s)) == s</p> <p>The replacements follow:</p>\n<ul>\n<li>\n<code>&amp;amp;</code> becomes <code>&amp;</code>\n</li>\n<li>\n<code>&amp;lt;</code> becomes <code>&lt;</code>\n</li>\n<li>\n<code>&amp;gt;</code> becomes <code>&gt;</code>\n</li>\n<li>\n<code>&amp;quot;</code> becomes <code>\"</code>\n</li>\n<li>\n<code>&amp;#039;</code> becomes <code>'</code>\n</li>\n</ul> \n<h3 id=\"isEof\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#isEof\">isEof</a> (c:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n \n<h3 id=\"isSpace\"><code><span class=\"label\">static</span> <a href=\"#isSpace\">isSpace</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if the character in the string <code>s</code> at position <code>pos</code> is a space.</p> <p>A character is considered to be a space character if its character code is 9,10,11,12,13 or 32.</p> <p>If <code>s</code> is the empty String \"\", or if pos is not a valid position within <code>s</code>, the result is false.</p> \n<h3 id=\"lpad\"><code><span class=\"label\">static</span> <a href=\"#lpad\">lpad</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, c:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, l:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Concatenates <code>c</code> to <code>s</code> until <code>s.length</code> is at least <code>l</code>.</p> <p>If <code>c</code> is the empty String \"\" or if <code>l</code> does not exceed <code>s.length</code>, <code>s</code> is returned unchanged.</p> <p>If <code>c.length</code> is 1, the resulting String length is exactly <code>l</code>.</p> <h3>Otherwise the length may exceed <code>l</code>.</h3> <h3>If <code>c</code> is null, the result is unspecified.</h3> \n<h3 id=\"ltrim\"><code><span class=\"label\">static</span> <a href=\"#ltrim\">ltrim</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Removes leading space characters of <code>s</code>.</h3> <p>This function internally calls isSpace() to decide which characters to remove.</p> <h3>If <code>s</code> is the empty String \"\" or consists only of space characters, the result is the empty String \"\".</h3> \n<h3 id=\"replace\"><code><span class=\"label\">static</span> <a href=\"#replace\">replace</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, sub:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, by:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Replace all occurences of the String <code>sub</code> in the String <code>s</code> by the String <code>by</code>.</p> <p>If <code>sub</code> is the empty String \"\", <code>by</code> is inserted after each character of <code>s</code>. If <code>by</code> is also the empty String \"\", <code>s</code> remains unchanged.</p> <h3>This is a convenience function for <code>s.split(sub).join(by)</code>.</h3> <p>If <code>sub</code> or <code>by</code> are null, the result is unspecified.</p> \n<h3 id=\"rpad\"><code><span class=\"label\">static</span> <a href=\"#rpad\">rpad</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, c:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, l:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Appends <code>c</code> to <code>s</code> until <code>s.length</code> is at least <code>l</code>.</p> <p>If <code>c</code> is the empty String \"\" or if <code>l</code> does not exceed <code>s.length</code>, <code>s</code> is returned unchanged.</p> <p>If <code>c.length</code> is 1, the resulting String length is exactly <code>l</code>.</p> <h3>Otherwise the length may exceed <code>l</code>.</h3> <h3>If <code>c</code> is null, the result is unspecified.</h3> \n<h3 id=\"rtrim\"><code><span class=\"label\">static</span> <a href=\"#rtrim\">rtrim</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Removes trailing space characters of <code>s</code>.</h3> <p>This function internally calls isSpace() to decide which characters to remove.</p> <h3>If <code>s</code> is the empty String \"\" or consists only of space characters, the result is the empty String \"\".</h3> \n<h3 id=\"startsWith\"><code><span class=\"label\">static</span> <a href=\"#startsWith\">startsWith</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, start:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if the string <code>s</code> starts with the string <code>start</code>.</p> <h3>If <code>start</code> is null, the result is unspecified.</h3> <h3>If <code>start</code> is the empty String \"\", the result is true.</h3> \n<h3 id=\"trim\"><code><span class=\"label\">static</span> <a href=\"#trim\">trim</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<h3>Removes leading and trailing space characters of <code>s</code>.</h3> <p>This is a convenience function for ltrim(rtrim(s)).</p> \n<h3 id=\"urlDecode\"><code><span class=\"label\">static</span> <a href=\"#urlDecode\">urlDecode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Decode an URL using the standard format.</p> \n<h3 id=\"urlEncode\"><code><span class=\"label\">static</span> <a href=\"#urlEncode\">urlEncode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Encode an URL by using the standard format.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/StringTools.html\" class=\"_attribution-link\">http://api.haxe.org/StringTools.html</a>\n  </p>\n</div>\n","sys":"<h1> class Sys </h1> <p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>   <div class=\"indent\"> <p>This class gives you access to many base functionalities of system platforms. Looks in [sys] sub packages for more system APIs.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"args\"><code><span class=\"label\">static</span> <a href=\"#args\">args</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p>Returns all the arguments that were passed by the commandline.</p> \n<h3 id=\"command\"><code><span class=\"label\">static</span> <a href=\"#command\">command</a> (cmd:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Run the given command with the list of arguments. The command output will be printed on the same output as the current process. The current process will block until the command terminates and it will return the command result (0 if there was no error). Read the [sys.io.Process] api for a more complete way to start background processes.</p> \n<h3 id=\"cpuTime\"><code><span class=\"label\">static</span> <a href=\"#cpuTime\">cpuTime</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Gives the most precise timestamp value (in seconds) but only account for the actual time spent running on the CPU for the current thread/process.</p> \n<h3 id=\"environment\"><code><span class=\"label\">static</span> <a href=\"#environment\">environment</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p>Returns the whole environement variables.</p> \n<h3 id=\"executablePath\"><code><span class=\"label\">static</span> <a href=\"#executablePath\">executablePath</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the path to the current executable that we are running.</p> \n<h3 id=\"exit\"><code><span class=\"label\">static</span> <a href=\"#exit\">exit</a> (code:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Exit the current process with the given error code.</p> \n<h3 id=\"getChar\"><code><span class=\"label\">static</span> <a href=\"#getChar\">getChar</a> (echo:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Read a single input character from the standard input (without blocking) and returns it. Setting [echo] to true will also display it on the output.</p> \n<h3 id=\"getCwd\"><code><span class=\"label\">static</span> <a href=\"#getCwd\">getCwd</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Get the current working directory (usually the one in which the program was started)</p> \n<h3 id=\"getEnv\"><code><span class=\"label\">static</span> <a href=\"#getEnv\">getEnv</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the value of the given environment variable.</p> \n<h3 id=\"print\"><code><span class=\"label\">static</span> <a href=\"#print\">print</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Print any value on the standard output.</p> \n<h3 id=\"println\"><code><span class=\"label\">static</span> <a href=\"#println\">println</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Print any value on the standard output, followed by a newline</p> \n<h3 id=\"putEnv\"><code><span class=\"label\">static</span> <a href=\"#putEnv\">putEnv</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, v:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Set the value of the given environment variable.</p> \n<h3 id=\"setCwd\"><code><span class=\"label\">static</span> <a href=\"#setCwd\">setCwd</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Change the current working directory.</p> \n<h3 id=\"setTimeLocale\"><code><span class=\"label\">static</span> <a href=\"#setTimeLocale\">setTimeLocale</a> (loc:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Change the current time locale, which will affect [DateTools.format] date formating. Returns true if the locale was successfully changed</p> \n<h3 id=\"sleep\"><code><span class=\"label\">static</span> <a href=\"#sleep\">sleep</a> (seconds:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Suspend the current execution for the given time (in seconds).</p> \n<h3 id=\"stderr\"><code><span class=\"label\">static</span> <a href=\"#stderr\">stderr</a> ():<a class=\"type\" title=\"An Output is an abstract write.\" href=\"haxe/io/output\">Output</a></code></h3>\n<p>Returns the process standard error on which you can write.</p> \n<h3 id=\"stdin\"><code><span class=\"label\">static</span> <a href=\"#stdin\">stdin</a> ():<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"haxe/io/input\">Input</a></code></h3>\n<p>Returns the process standard input, from which you can read what user enters. Usually it will block until the user send a full input line. See [getChar] for an alternative.</p> \n<h3 id=\"stdout\"><code><span class=\"label\">static</span> <a href=\"#stdout\">stdout</a> ():<a class=\"type\" title=\"An Output is an abstract write.\" href=\"haxe/io/output\">Output</a></code></h3>\n<p>Returns the process standard output on which you can write.</p> \n<h3 id=\"systemName\"><code><span class=\"label\">static</span> <a href=\"#systemName\">systemName</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the name of the system you are running on. For instance :</p> <pre><code>\"Windows\", \"Linux\", \"BSD\" and \"Mac\" depending on your desktop OS.\n</code></pre> \n<h3 id=\"time\"><code><span class=\"label\">static</span> <a href=\"#time\">time</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"float\">Float</a></code></h3>\n<p>Gives the most precise timestamp value (in seconds).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Sys.html\" class=\"_attribution-link\">http://api.haxe.org/Sys.html</a>\n  </p>\n</div>\n","void":"<h1>abstract Void(<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a>) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The standard Void type. Only <code><a href=\"null\">null</a></code> values can be of the type <code><a href=\"void\">Void</a></code>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Void.html\" class=\"_attribution-link\">http://api.haxe.org/Void.html</a>\n  </p>\n</div>\n","xmltype":"<h1>abstract XmlType(<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>) </h1> \n\n<p>defined in Xml</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"CData\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#CData\">CData</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"Comment\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#Comment\">Comment</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"DocType\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#DocType\">DocType</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"Document\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#Document\">Document</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"Element\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#Element\">Element</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"PCData\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#PCData\">PCData</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n \n<h3 id=\"ProcessingInstruction\"><code><span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#ProcessingInstruction\">ProcessingInstruction</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = '???'</span> </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/XmlType.html\" class=\"_attribution-link\">http://api.haxe.org/XmlType.html</a>\n  </p>\n</div>\n","enumvalue":"<h1>abstract EnumValue(<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"enumvalue\">EnumValue</a>) </h1> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An abstract type that represents any enum value. See <code><a href=\"type\">Type</a></code> for the Haxe Reflection API.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/EnumValue.html\" class=\"_attribution-link\">http://api.haxe.org/EnumValue.html</a>\n  </p>\n</div>\n","string":"<h1> class String </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The basic String class.</p> <p>A haxe String is immutable, it is not possible to modify individual characters. No method of this class changes the state of <code>this</code> String.</p> <p>Strings can be constructed using the string literal syntax \"string value\".</p> <p>String can be concatenated by using the + operator. If an operand is not a String, it is passed through Std.string() first.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (string:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>)</code></h3>\n<p>Creates a copy from a given String.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<h3>The number of characters in <code>this</code> String.</h3> \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>The number of characters in [this] String.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"charAt\"><code><a href=\"#charAt\">charAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns the character at position <code>index</code> of <code>this</code> String.</p> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, the empty String \"\" is returned.</p> \n<h3 id=\"charAt\"><code><a href=\"#charAt\">charAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the character at position [index] of [this] String.</p> <p>If [index] is negative or exceeds [this].length, the empty String \"\" is returned.</p> \n<h3 id=\"charCodeAt\"><code><a href=\"#charCodeAt\">charCodeAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns the character code at position <code>index</code> of <code>this</code> String.</p> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, null is returned.</p> <p>To obtain the character code of a single character, \"x\".code can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1.</p> \n<h3 id=\"charCodeAt\"><code><a href=\"#charCodeAt\">charCodeAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>&gt;</code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the character code at position [index] of [this] String.</p> <p>If [index] is negative or exceeds [this].length, null is returned.</p> <p>To obtain the character code of a single character, \"x\".code can be used instead to inline the character code at compile time. Note that this only works on String literals of length 1.</p> \n<h3 id=\"indexOf\"><code><a href=\"#indexOf\">indexOf</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns the position of the leftmost occurence of <code>str</code> within <code>this</code> String.</p> <p>If <code>startIndex</code> is given, the search is performed within the substring of <code>this</code> String starting from <code>startIndex</code>. Otherwise the search is performed within <code>this</code> String. In either case, the returned position is relative to the beginning of <code>this</code> String.</p> <h3>If <code>str</code> cannot be found, -1 is returned.</h3> \n<h3 id=\"indexOf\"><code><a href=\"#indexOf\">indexOf</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the position of the leftmost occurence of [str] within [this] String.</p> <p>If [startIndex] is given, the search is performed within the substring of [this] String starting from [startIndex]. Otherwise the search is performed within [this] String. In either case, the returned position is relative to the beginning of [this] String.</p> <p>If [str] cannot be found, -1 is returned.</p> \n<h3 id=\"lastIndexOf\"><code><a href=\"#lastIndexOf\">lastIndexOf</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns the position of the rightmost occurence of <code>str</code> within <code>this</code> String.</p> <p>If <code>startIndex</code> is given, the search is performed within the substring of <code>this</code> String from 0 to <code>startIndex</code>. Otherwise the search is performed within <code>this</code> String. In either case, the returned position is relative to the beginning of <code>this</code> String.</p> <h3>If <code>str</code> cannot be found, -1 is returned.</h3> \n<h3 id=\"lastIndexOf\"><code><a href=\"#lastIndexOf\">lastIndexOf</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the position of the rightmost occurence of [str] within [this] String.</p> <p>If [startIndex] is given, the search is performed within the substring of [this] String from 0 to [startIndex]. Otherwise the search is performed within [this] String. In either case, the returned position is relative to the beginning of [this] String.</p> <p>If [str] cannot be found, -1 is returned.</p> \n<h3 id=\"split\"><code><a href=\"#split\">split</a> (delimiter:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Splits <code>this</code> String at each occurence of <code>delimiter</code>.</p> <p>If <code>this</code> String is the empty String \"\", the result is not consistent across targets and may either be <code>[]</code> (on Js, Cpp) or <code>[\"\"]</code>.</p> <p>If <code>delimiter</code> is the empty String \"\", <code>this</code> String is split into an Array of <code>this.<a href=\"#length\">length</a></code> elements, where the elements correspond to the characters of <code>this</code> String.</p> <p>If <code>delimiter</code> is not found within <code>this</code> String, the result is an Array with one element, which equals <code>this</code> String.</p> <h3>If <code>delimiter</code> is null, the result is unspecified.</h3> <p>Otherwise, <code>this</code> String is split into parts at each occurence of <code>delimiter</code>. If <code>this</code> String starts (or ends) with [delimiter}, the result Array contains a leading (or trailing) empty String \"\" element. Two subsequent delimiters also result in an empty String \"\" element.</p> \n<h3 id=\"split\"><code><a href=\"#split\">split</a> (delimiter:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Splits [this] String at each occurence of [delimiter].</p> <p>If [delimiter] is the empty String \"\", [this] String is split into an Array of [this].length elements, where the elements correspond to the characters of [this] String.</p> <p>If [delimiter] is not found within [this] String, the result is an Array with one element, which equals [this] String.</p> <p>If [delimiter] is null, the result is unspecified.</p> <p>Otherwise, [this] String is split into parts at each occurence of [delimiter]. If [this] String starts (or ends) with [delimiter}, the result Array contains a leading (or trailing) empty String \"\" element. Two subsequent delimiters also result in an empty String \"\" element.</p> \n<h3 id=\"substr\"><code><a href=\"#substr\">substr</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns <code>len</code> characters of <code>this</code> String, starting at position <code>pos</code>.</p> <p>If <code>len</code> is omitted, all characters from position <code>pos</code> to the end of <code>this</code> String are included.</p> <p>If <code>pos</code> is negative, its value is calculated from the end of <code>this</code> String by <code>this.<a href=\"#length\">length</a> + pos</code>. If this yields a negative value, 0 is used instead.</p> <p>If the calculated position + <code>len</code> exceeds <code>this.<a href=\"#length\">length</a></code>, the characters from that position to the end of <code>this</code> String are returned.</p> <h3>If <code>len</code> is negative, the result is unspecified.</h3> \n<h3 id=\"substr\"><code><a href=\"#substr\">substr</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns [len] characters of [this] String, starting at position [pos].</p> <p>If [len] is omitted, all characters from position [pos] to the end of [this] String are included.</p> <p>If [pos] is negative, its value is calculated from the end of [this] String by [this].length + [pos]. If this yields a negative value, 0 is used instead.</p> <p>If the calculated position + [len] exceeds [this].length, the characters from that position to the end of [this] String are returned.</p> <p>If [len] is negative, the result is unspecified.</p> \n<h3 id=\"substring\"><code><a href=\"#substring\">substring</a> (startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?endIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<p>Returns the part of <code>this</code> String from <code>startIndex</code> to but not including <code>endIndex</code>.</p> <p>If <code>startIndex</code> or <code>endIndex</code> are negative, 0 is used instead.</p> <p>If <code>startIndex</code> exceeds <code>endIndex</code>, they are swapped.</p> <p>If the (possibly swapped) <code>endIndex</code> is omitted or exceeds <code>this.<a href=\"#length\">length</a></code>, <code>this.<a href=\"#length\">length</a></code> is used instead.</p> <p>If the (possibly swapped) <code>startIndex</code> exceeds <code>this.<a href=\"#length\">length</a></code>, the empty String \"\" is returned.</p> \n<h3 id=\"substring\"><code><a href=\"#substring\">substring</a> (startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>, ?endIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the part of [this] String from [startIndex] to [endIndex].</p> <p>If [startIndex] or [endIndex] are negative, 0 is used instead.</p> <p>If [startIndex] exceeds [endIndex], they are swapped.</p> <p>If the (possibly swapped) [endIndex] is omitted or exceeds [this].length, [this].length is used instead.</p> <p>If the (possibly swapped) [startIndex] exceeds [this].length, the empty String \"\" is returned.</p> \n<h3 id=\"toLowerCase\"><code><a href=\"#toLowerCase\">toLowerCase</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<h3>Returns a String where all characters of <code>this</code> String are lower case.</h3> <h3>Affects the characters <code>A-Z</code>. Other characters remain unchanged.</h3> \n<h3 id=\"toLowerCase\"><code><a href=\"#toLowerCase\">toLowerCase</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns a String where all characters of [this] String are lower case.</p> <p>Affects the characters [A-Z]. Other characters remain unchanged.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the String itself.</p> \n<h3 id=\"toUpperCase\"><code><a href=\"#toUpperCase\">toUpperCase</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<h3>Returns a String where all characters of <code>this</code> String are upper case.</h3> <h3>Affects the characters <code>a-z</code>. Other characters remain unchanged.</h3> \n<h3 id=\"toUpperCase\"><code><a href=\"#toUpperCase\">toUpperCase</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns a String where all characters of [this] String are upper case.</p> <p>Affects the characters [a-z]. Other characters remain unchanged.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromCharCode\"><code><span class=\"label\">static</span> <a href=\"#fromCharCode\">fromCharCode</a> (code:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, js, macro, neko, php</p>\n<h3>Returns the String corresponding to the character code <code>code</code>.</h3> <h3>If <code>code</code> is negative or has another invalid value, the result is unspecified.</h3> \n<h3 id=\"fromCharCode\"><code><span class=\"label\">static</span> <a href=\"#fromCharCode\">fromCharCode</a> (code:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Returns the String corresponding to the character code [code].</p> <p>If [code] is negative or has another invalid value, the result is unspecified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/String.html\" class=\"_attribution-link\">http://api.haxe.org/String.html</a>\n  </p>\n</div>\n","valuetype":"<h1>enum ValueType </h1>\n\n<p>defined in Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TNull\"><code>TNull        </code></h3>\n <h3 id=\"TInt\"><code>TInt        </code></h3>\n <h3 id=\"TFloat\"><code>TFloat        </code></h3>\n <h3 id=\"TBool\"><code>TBool        </code></h3>\n <h3 id=\"TObject\"><code>TObject        </code></h3>\n <h3 id=\"TFunction\"><code>TFunction        </code></h3>\n <h3 id=\"TClass\"><code>TClass                    (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;)        </code></h3>\n <h3 id=\"TEnum\"><code>TEnum                    (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"enum\">Enum</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"dynamic\">Dynamic</a>&gt;)        </code></h3>\n <h3 id=\"TUnknown\"><code>TUnknown        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/ValueType.html\" class=\"_attribution-link\">http://api.haxe.org/ValueType.html</a>\n  </p>\n</div>\n","xml":"<h1> class Xml </h1> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Fields</h2>  \n<h3 id=\"nodeName\"><code> <a href=\"#nodeName\">nodeName</a>:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the node name of an Element.</p> \n<h3 id=\"nodeType\"><code> <span class=\"label\">read only</span> <a href=\"#nodeType\">nodeType</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a></code></h3>\n<p>Returns the type of the Xml Node. This should be used before accessing other functions since some might raise an exception if the node type is not correct.</p> \n<h3 id=\"nodeValue\"><code> <a href=\"#nodeValue\">nodeValue</a>:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns the node value. Only works if the Xml node is not an Element or a Document.</p> \n<h3 id=\"parent\"><code> <span class=\"label\">read only</span> <a href=\"#parent\">parent</a>:<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Returns the parent object in the Xml hierarchy. The parent can be [null], an Element or a Document.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"addChild\"><code><a href=\"#addChild\">addChild</a> (x:<a class=\"type\" title=\"\" href=\"xml\">Xml</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Adds a child node to the Document or Element. A child node can only be inside one given parent node, which is indicated by the [parent] property. If the child is already inside this Document or Element, it will be moved to the last position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.</p> \n<h3 id=\"attributes\"><code><a href=\"#attributes\">attributes</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>&gt;</code></h3>\n<p>Returns an [Iterator] on all the attribute names.</p> \n<h3 id=\"elements\"><code><a href=\"#elements\">elements</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<a class=\"type\" title=\"\" href=\"xml\">Xml</a>&gt;</code></h3>\n<p>Returns an iterator of all child nodes which are Elements. Only works if the current node is an Element or a Document.</p> \n<h3 id=\"elementsNamed\"><code><a href=\"#elementsNamed\">elementsNamed</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<a class=\"type\" title=\"\" href=\"xml\">Xml</a>&gt;</code></h3>\n<p>Returns an iterator of all child nodes which are Elements with the given nodeName. Only works if the current node is an Element or a Document.</p> \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (att:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if the Element node has a given attribute. Attributes are case-sensitive.</p> \n<h3 id=\"firstChild\"><code><span class=\"label\">inline</span> <a href=\"#firstChild\">firstChild</a> ():<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Returns the first child node.</p> \n<h3 id=\"firstElement\"><code><a href=\"#firstElement\">firstElement</a> ():<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Returns the first child node which is an Element.</p> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (att:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Get the given attribute of an Element node. Returns [null] if not found. Attributes are case-sensitive.</p> \n<h3 id=\"insertChild\"><code><a href=\"#insertChild\">insertChild</a> (x:<a class=\"type\" title=\"\" href=\"xml\">Xml</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Inserts a child at the given position among the other childs. A child node can only be inside one given parent node, which is indicated by the [parent] property. If the child is already inside this Document or Element, it will be moved to the new position among the Document or Element's children. If the child node was previously inside a different node, it will be moved to this Document or Element.</p> \n<h3 id=\"iterator\"><code><span class=\"label\">inline</span> <a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<a class=\"type\" title=\"\" href=\"xml\">Xml</a>&gt;</code></h3>\n<p>Returns an iterator of all child nodes. Only works if the current node is an Element or a Document.</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (att:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Removes an attribute for an Element node. Attributes are case-sensitive.</p> \n<h3 id=\"removeChild\"><code><a href=\"#removeChild\">removeChild</a> (x:<a class=\"type\" title=\"\" href=\"xml\">Xml</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Removes a child from the Document or Element. Returns true if the child was successfuly removed.</p> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (att:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>, value:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Set the given attribute value for an Element node. Attributes are case-sensitive.</p> \n<h3 id=\"toString\"><code><span class=\"label\">inline</span> <a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a></code></h3>\n<p>Returns a String representation of the Xml node.</p>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"CData\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#CData\">CData</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.CData</span> </code></h3>\n \n<h3 id=\"Comment\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#Comment\">Comment</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.Comment</span> </code></h3>\n \n<h3 id=\"DocType\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#DocType\">DocType</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.DocType</span> </code></h3>\n \n<h3 id=\"Document\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#Document\">Document</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.Document</span> </code></h3>\n \n<h3 id=\"Element\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#Element\">Element</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.Element</span> </code></h3>\n \n<h3 id=\"PCData\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#PCData\">PCData</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.PCData</span> </code></h3>\n \n<h3 id=\"ProcessingInstruction\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#ProcessingInstruction\">ProcessingInstruction</a>:<a class=\"type\" title=\"\" href=\"xmltype\">XmlType</a><span> = XmlType.ProcessingInstruction</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"createCData\"><code><span class=\"label\">static</span> <a href=\"#createCData\">createCData</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createComment\"><code><span class=\"label\">static</span> <a href=\"#createComment\">createComment</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createDocType\"><code><span class=\"label\">static</span> <a href=\"#createDocType\">createDocType</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createDocument\"><code><span class=\"label\">static</span> <a href=\"#createDocument\">createDocument</a> ():<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createElement\"><code><span class=\"label\">static</span> <a href=\"#createElement\">createElement</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createPCData\"><code><span class=\"label\">static</span> <a href=\"#createPCData\">createPCData</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"createProcessingInstruction\"><code><span class=\"label\">static</span> <a href=\"#createProcessingInstruction\">createProcessingInstruction</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<p>Creates a node of the given type.</p> \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <a href=\"#parse\">parse</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"string\">String</a>):<a class=\"type\" title=\"\" href=\"xml\">Xml</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Xml.html\" class=\"_attribution-link\">http://api.haxe.org/Xml.html</a>\n  </p>\n</div>\n","sys/filestat":"<h1>typedef FileStat </h1>\n<p>package sys</p> <p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>File informations, as given by [sys.FileSystem.stat]</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"uid\"><code> <a href=\"#uid\">uid</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>the user id for the file</p> \n<h3 id=\"size\"><code> <a href=\"#size\">size</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>the size of the file</p> \n<h3 id=\"rdev\"><code> <a href=\"#rdev\">rdev</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"nlink\"><code> <a href=\"#nlink\">nlink</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"mtime\"><code> <a href=\"#mtime\">mtime</a>:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../date\">Date</a></code></h3>\n<p>the last modification time for the file</p> \n<h3 id=\"mode\"><code> <a href=\"#mode\">mode</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"ino\"><code> <a href=\"#ino\">ino</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"gid\"><code> <a href=\"#gid\">gid</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>the user group id for the file</p> \n<h3 id=\"dev\"><code> <a href=\"#dev\">dev</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"ctime\"><code> <a href=\"#ctime\">ctime</a>:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../date\">Date</a></code></h3>\n<p>the creation time for the file</p> \n<h3 id=\"atime\"><code> <a href=\"#atime\">atime</a>:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../date\">Date</a></code></h3>\n<p>the last access time for the file (when enabled by the file system)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/FileStat.html\" class=\"_attribution-link\">http://api.haxe.org/sys/FileStat.html</a>\n  </p>\n</div>\n","sys/filesystem":"<h1> class FileSystem </h1>\n<p>package sys</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>This class allows you to get information about the files and directories.</p> <p>See <code><a href=\"io/file\">sys.io.File</a></code> for the complementary file API.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"absolutePath\"><code><span class=\"label\">static</span> <a href=\"#absolutePath\">absolutePath</a> (relPath:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Returns the full path of the file or directory specified by <code>relPath</code>, which is relative to the current working directory. The path doesn't have to exist.</h3> <h3>If <code>relPath</code> is null, the result is unspecified.</h3> \n<h3 id=\"createDirectory\"><code><span class=\"label\">static</span> <a href=\"#createDirectory\">createDirectory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Creates a directory specified by <code>path</code>.</h3> <p>This method is recursive: The parent directories don't have to exist.</p> <p>If the directory cannot be created, an exception is thrown.</p> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"deleteDirectory\"><code><span class=\"label\">static</span> <a href=\"#deleteDirectory\">deleteDirectory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Deletes the directory specified by <code>path</code>.</h3> <h3>If <code>path</code> does not denote a valid directory, or if that directory cannot be deleted, an exception is thrown.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"deleteFile\"><code><span class=\"label\">static</span> <a href=\"#deleteFile\">deleteFile</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Deletes the file specified by <code>path</code>.</h3> <h3>If <code>path</code> does not denote a valid file, or if that file cannot be deleted, an exception is thrown.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"exists\"><code><span class=\"label\">static</span> <a href=\"#exists\">exists</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>Tells if the file or directory specified by <code>path</code> exists.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"fullPath\"><code><span class=\"label\">static</span> <a href=\"#fullPath\">fullPath</a> (relPath:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Returns the full path of the file or directory specified by <code>relPath</code>, which is relative to the current working directory. Symlinks will be followed and the path will be normalized.</h3> <h3>If <code>relPath</code> is null, the result is unspecified.</h3> \n<h3 id=\"isDirectory\"><code><span class=\"label\">static</span> <a href=\"#isDirectory\">isDirectory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>Tells if the file or directory specified by <code>path</code> is a directory.</h3> <h3>If <code>path</code> is not a valid file system entry or if its destination is no accessible, an exception is thrown.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"readDirectory\"><code><span class=\"label\">static</span> <a href=\"#readDirectory\">readDirectory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n<h3>Returns the names of all files and directories in the directory specified by <code>path</code>.</h3> <h3>If <code>path</code> does not denote a valid directory, an exception is thrown.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"rename\"><code><span class=\"label\">static</span> <a href=\"#rename\">rename</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, newPath:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p>Renames/moves the file or directory specified by <code>path</code> to <code>newPath</code>.</p> <p>If <code>path</code> is not a valid file system entry, or if it is not accessible, or if <code>newPath</code> is not accessible, an exception is thrown.</p> <p>If <code>path</code> or <code>newPath</code> are null, the result is unspecified.</p> \n<h3 id=\"stat\"><code><span class=\"label\">static</span> <a href=\"#stat\">stat</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"File informations, as given by [sys.\" href=\"filestat\">FileStat</a></code></h3>\n<p>Returns <code><a href=\"filestat\">FileStat</a></code> information on the file or directory specified by <code>path</code>.</p> <h3>If <code>path</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/FileSystem.html\" class=\"_attribution-link\">http://api.haxe.org/sys/FileSystem.html</a>\n  </p>\n</div>\n","haxe/imap":"<h1> interface IMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe</p> \n<p>defined in haxe.Constraints</p>\n<p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">implemented by</span> <a class=\"type\" title=\"EnumValueMap allows mapping of enum value keys to arbitrary values.\" href=\"ds/enumvaluemap\">EnumValueMap</a>, <a class=\"type\" title=\"IntMap allows mapping of Int keys to arbitrary values.\" href=\"ds/intmap\">IntMap</a>, <a class=\"type\" title=\"ObjectMap allows mapping of object keys to arbitrary values.\" href=\"ds/objectmap\">ObjectMap</a>, <a class=\"type\" title=\"StringMap allows mapping of String keys to arbitrary values.\" href=\"ds/stringmap\">StringMap</a>, <a class=\"type\" title=\"This is similar to &lt;code&gt;&lt;a href=\" .. href=\"ds/unsafestringmap\">UnsafeStringMap</a>, <a class=\"type\" title=\"WeakMap allows mapping of object keys to arbitrary values.\" href=\"ds/weakmap\">WeakMap</a> </p>    <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (k:<span class=\"type\">K</span>, v:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/IMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/IMap.html</a>\n  </p>\n</div>\n","haxe/ds/stringmap":"<h1> class StringMap&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <span class=\"type\">T</span>&gt; </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>StringMap allows mapping of String keys to arbitrary values.</p> <p>See <code><a href=\"../../map\">Map</a></code> for documentation details.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new StringMap.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#exists\">Map.exists</a></code>\n</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>See <code><a href=\"../../map#get\">Map.get</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#iterator\">Map.iterator</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all values in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#keys\">Map.keys</a></code>\n</h3> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all keys in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#remove\">Map.remove</a></code>\n</h3> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, value:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>See <code><a href=\"../../map#set\">Map.set</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#toString\">Map.toString</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an displayable representation of the hashtable content.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/StringMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/StringMap.html</a>\n  </p>\n</div>\n","haxe/ds/enumvaluemap":"<h1> class EnumValueMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe.ds</p> <p> extends <a class=\"type\" title=\"BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered.\" href=\"balancedtree\">BalancedTree</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>EnumValueMap allows mapping of enum value keys to arbitrary values.</p> <p>Keys are compared by value and recursively over their parameters. If any parameter is not an enum value, <code><a href=\"../../reflect#compare\">Reflect.compare</a></code> is used to compare them.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/EnumValueMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/EnumValueMap.html</a>\n  </p>\n</div>\n","haxe/ds/objectmap":"<h1> class ObjectMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe.ds</p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>ObjectMap allows mapping of object keys to arbitrary values.</p> <p>On static targets, the keys are considered to be strong references. Refer to <code><a href=\"weakmap\">haxe.ds.WeakMap</a></code> for a weak reference version.</p> <p>See <code><a href=\"../../map\">Map</a></code> for documentation details.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new ObjectMap.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#exists\">Map.exists</a></code>\n</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>See <code><a href=\"../../map#get\">Map.get</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#iterator\">Map.iterator</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all values in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#keys\">Map.keys</a></code>\n</h3> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all keys in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#remove\">Map.remove</a></code>\n</h3> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (key:<span class=\"type\">K</span>, value:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>See <code><a href=\"../../map#set\">Map.set</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#toString\">Map.toString</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an displayable representation of the hashtable content.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/ObjectMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/ObjectMap.html</a>\n  </p>\n</div>\n","haxe/ds/intmap":"<h1> class IntMap&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, <span class=\"type\">T</span>&gt; </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>IntMap allows mapping of Int keys to arbitrary values.</p> <p>See <code><a href=\"../../map\">Map</a></code> for documentation details.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new IntMap.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (key:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#exists\">Map.exists</a></code>\n</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (key:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>See <code><a href=\"../../map#get\">Map.get</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#iterator\">Map.iterator</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all values in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#keys\">Map.keys</a></code>\n</h3> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;</code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an iterator of all keys in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#remove\">Map.remove</a></code>\n</h3> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (key:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>See <code><a href=\"../../map#set\">Map.set</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#toString\">Map.toString</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cs, java</p>\n<p>Returns an displayable representation of the hashtable content.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/IntMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/IntMap.html</a>\n  </p>\n</div>\n","haxe/callstack":"<h1> class CallStack </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Get informations about the call stack.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"callStack\"><code><span class=\"label\">static</span> <a href=\"#callStack\">callStack</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Elements return by &lt;code&gt;&lt;a href=\" .. href=\"stackitem\">StackItem</a>&gt;</code></h3>\n<p>Return the call stack elements, or an empty array if not available.</p> \n<h3 id=\"exceptionStack\"><code><span class=\"label\">static</span> <a href=\"#exceptionStack\">exceptionStack</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Elements return by &lt;code&gt;&lt;a href=\" .. href=\"stackitem\">StackItem</a>&gt;</code></h3>\n<p>Return the exception stack : this is the stack elements between the place the last exception was thrown and the place it was caught, or an empty array if not available.</p> \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (stack:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Elements return by &lt;code&gt;&lt;a href=\" .. href=\"stackitem\">StackItem</a>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Returns a representation of the stack as a printable string.</p> \n<h3 id=\"wrapCallSite\"><code><span class=\"label\">static</span> <a href=\"#wrapCallSite\">wrapCallSite</a> (:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on js</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/CallStack.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/CallStack.html</a>\n  </p>\n</div>\n","haxe/dynamicaccess":"<h1>abstract DynamicAccess&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&lt;<span class=\"type\">T</span>&gt;) </h1>\n<p>package haxe</p> <p> from <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&lt;<span class=\"type\">T</span>&gt; to <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&lt;<span class=\"type\">T</span>&gt; </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>DynamicAccess is an abstract type for working with anonymous structures that are intended to hold collections of objects by the string key.</p> <p>For example, these types of structures are often created from JSON.</p> <p>Basically, it wraps <code><a href=\"../reflect\">Reflect</a></code> calls in a <code><a href=\"../map\">Map</a></code>-like interface.</p> </div> <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new structure.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><span class=\"label\">inline</span> <a href=\"#exists\">exists</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>Tells if the structure contains a specified <code>key</code>.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns a value by specified <code>key</code>.</h3> <p>If the structure does not contain the given key, null is returned.</p> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"keys\"><code><span class=\"label\">inline</span> <a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n<h3>Returns an array of <code>keys</code> in a structure.</h3> \n<h3 id=\"remove\"><code><span class=\"label\">inline</span> <a href=\"#remove\">remove</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>Removes a specified <code>key</code> from the structure.</h3> <h3>Returns true, if <code>key</code> was present in structure, or false otherwise.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, value:<span class=\"type\">T</span>):<span class=\"type\">T</span> </code></h3>\n<p>Sets a <code>value</code> for a specified <code>key</code>.</p> <p>If the structure contains the given key, its value will be overwritten.</p> <p>Returns the given value.</p> <h3>If <code>key</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/DynamicAccess.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/DynamicAccess.html</a>\n  </p>\n</div>\n","haxe/enumflags":"<h1>abstract EnumFlags&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>) </h1>\n<p>package haxe</p> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>A typed interface for bit flags. This is not a real object, only a typed interface for an actual Int. Each flag can be tested/set with the corresponding enum instance. Up to 32 flags can be stored that way.</p> <p>Enum constructor indices are preserved from haxe syntax, so the first declared is index 0, the next index 1 etc. The methods are optimized if the enum instance is passed directly, e.g. as has(EnumCtor). Otherwise Type.enumIndex() reflection is used.</p> </div> <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a> = 0)</code></h3>\n<h3>Initializes the bitflags to <code>i</code>.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"has\"><code><span class=\"label\">inline</span> <a href=\"#has\">has</a> (v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>Checks if the index of enum instance <code>v</code> is set.</h3> <h3>This method is optimized if <code>v</code> is an enum instance expression such as SomeEnum.SomeCtor.</h3> <h3>If <code>v</code> is null, the result is unspecified.</h3> \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Sets the index of enum instance <code>v</code>.</h3> <h3>This method is optimized if <code>v</code> is an enum instance expression such as SomeEnum.SomeCtor.</h3> <h3>If <code>v</code> is null, the result is unspecified.</h3> \n<h3 id=\"toInt\"><code><span class=\"label\">inline</span> <a href=\"#toInt\">toInt</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Convert the typed bitflag into the corresponding int value (this is a no-op, it doesn't have any impact on speed).</p> \n<h3 id=\"unset\"><code><span class=\"label\">inline</span> <a href=\"#unset\">unset</a> (v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Unsets the index of enum instance <code>v</code>.</h3> <h3>This method is optimized if <code>v</code> is an enum instance expression such as SomeEnum.SomeCtor.</h3> <h3>If <code>v</code> is null, the result is unspecified.</h3>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"ofInt\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#ofInt\">ofInt</a>&lt;<span class=\"type\">T</span>&gt; (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"A typed interface for bit flags.\" href=\"enumflags\">EnumFlags</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Convert a integer bitflag into a typed one (this is a no-op, it does not have any impact on speed).</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/EnumFlags.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/EnumFlags.html</a>\n  </p>\n</div>\n","haxe/enumtools":"<h1> class EnumTools </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"createAll\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#createAll\">createAll</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"../enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns a list of all constructors of enum <code>e</code> that require no arguments.</h3> <h3>This may return the empty Array [] if all constructors of <code>e</code> require arguments.</h3> <h3>Otherwise an instance of <code>e</code> constructed through each of its non- argument constructors is returned, in the order of the constructor declaration.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"createByIndex\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#createByIndex\">createByIndex</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"../enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;, index:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, ?params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&gt;):<span class=\"type\">T</span> </code></h3>\n<p>Creates an instance of enum <code>e</code> by calling its constructor number <code>index</code> with arguments <code>params</code>.</p> <p>The constructor indices are preserved from haxe syntax, so the first declared is index 0, the next index 1 etc.</p> <p>If <code>e</code> or <code>index</code> is null, or if enum <code>e</code> has no constructor corresponding to index <code>index</code>, or if the number of elements in <code>params</code> does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.</p> \n<h3 id=\"createByName\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#createByName\">createByName</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"../enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;, constr:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, ?params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&gt;):<span class=\"type\">T</span> </code></h3>\n<p>Creates an instance of enum <code>e</code> by calling its constructor <code>constr</code> with arguments <code>params</code>.</p> <p>If <code>e</code> or <code>constr</code> is null, or if enum <code>e</code> has no constructor named <code>constr</code>, or if the number of elements in <code>params</code> does not match the expected number of constructor arguments, or if any argument has an invalid type, the result is unspecified.</p> \n<h3 id=\"getConstructors\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getConstructors\">getConstructors</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"../enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n<h3>Returns a list of the names of all constructors of enum <code>e</code>.</h3> <p>The order of the constructor names in the returned Array is preserved from the original syntax.</p> <h3>If <code>c</code> is null, the result is unspecified.</h3> \n<h3 id=\"getName\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getName\">getName</a>&lt;<span class=\"type\">T</span>&gt; (e:<a class=\"type\" title=\"An abstract type that represents an Enum type.\" href=\"../enum\">Enum</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Returns the name of enum <code>e</code>, including its path.</h3> <h3>If <code>e</code> is inside a package, the package structure is returned dot- separated, with another dot separating the enum name:</h3> <pre><code>pack1.pack2.(...).packN.EnumName\n</code></pre> <h3>If <code>e</code> is a sub-type of a haxe module, that module is not part of the package structure.</h3> <h3>If <code>e</code> has no package, the enum name is returned.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> <p>The enum name does not include any type parameters.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/EnumTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/EnumTools.html</a>\n  </p>\n</div>\n","haxe/enumvaluetools":"<h1> class EnumValueTools </h1>\n<p>package haxe</p> \n<p>defined in haxe.EnumTools</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"equals\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#equals\">equals</a>&lt;<span class=\"type\">T</span>&gt; (a:<span class=\"type\">T</span>, b:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Recursively compares two enum instances <code>a</code> and <code>b</code> by value.</p> <h3>Unlike <code>a == b</code>, this function performs a deep equality check on the arguments of the constructors, if exists.</h3> <p>If <code>a</code> or <code>b</code> are null, the result is unspecified.</p> \n<h3 id=\"getIndex\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getIndex\">getIndex</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"../enumvalue\">EnumValue</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<h3>Returns the index of enum instance <code>e</code>.</h3> <h3>This corresponds to the original syntactic position of <code>e</code>. The index of the first declared constructor is 0, the next one is 1 etc.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"getName\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getName\">getName</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"../enumvalue\">EnumValue</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Returns the constructor name of enum instance <code>e</code>.</h3> <p>The result String does not contain any constructor arguments.</p> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"getParameters\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getParameters\">getParameters</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"../enumvalue\">EnumValue</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&gt;</code></h3>\n<h3>Returns a list of the constructor arguments of enum instance <code>e</code>.</h3> <h3>If <code>e</code> has no arguments, the result is [].</h3> <h3>Otherwise the result are the values that were used as arguments to <code>e</code>, in the order of their declaration.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"match\"><code><span class=\"label\">static</span> <a href=\"#match\">match</a> (e:<a class=\"type\" title=\"An abstract type that represents any enum value.\" href=\"../enumvalue\">EnumValue</a>, pattern:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Matches enum instance <code>e</code> against pattern <code>pattern</code>, returning true if matching succeeded and false otherwise.</p> <p>Example usage:</p> <pre><code>if (e.match(pattern)) {\n\t// codeIfTrue\n} else {\n\t// codeIfFalse\n}</code></pre> <p>This is equivalent to the following code:</p> <pre><code>switch (e) {\n\tcase pattern:\n\t\t// codeIfTrue\n\tcase _:\n\t\t// codeIfFalse\n}</code></pre> <p>This method is implemented in the compiler. This definition exists only for documentation.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/EnumValueTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/EnumValueTools.html</a>\n  </p>\n</div>\n","haxe/flatenum":"<h1>abstract FlatEnum(<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>) </h1>\n<p>package haxe</p> \n\n<p>defined in haxe.Constraints</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>This type unifies with an enum instance if all constructors of the enum require no arguments.</p> <p>It is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be <code><a href=\"../dynamic\">Dynamic</a></code>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/FlatEnum.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/FlatEnum.html</a>\n  </p>\n</div>\n","haxe/function":"<h1>abstract Function(<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>) </h1>\n<p>package haxe</p> \n\n<p>defined in haxe.Constraints</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>This type unifies with any function type.</p> <p>It is intended to be used as a type parameter constraint. If used as a real type, the underlying type will be <code><a href=\"../dynamic\">Dynamic</a></code>.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Function.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Function.html</a>\n  </p>\n</div>\n","haxe/int32":"<h1>abstract Int32(<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>) </h1>\n<p>package haxe</p> <p> from <a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a> to <a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a> </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.</p> </div> <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"ucompare\"><code><span class=\"label\">static</span> <a href=\"#ucompare\">ucompare</a> (a:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a>, b:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Compare <code>a</code> and <code>b</code> in unsigned mode.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Int32.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Int32.html</a>\n  </p>\n</div>\n","haxe/json":"<h1> class Json </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Crossplatform JSON API : it will automatically use the optimized native API if available. Use -D haxeJSON to force usage of the Haxe implementation even if a native API is found : this will provide extra encoding features such as enums (replaced by their index) and StringMaps.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <a href=\"#parse\">parse</a> (text:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a></code></h3>\n<h3>Parses given JSON-encoded <code>text</code> and returns the resulting object.</h3> <p>JSON objects are parsed into anonymous structures and JSON arrays are parsed into Array<dynamic>.</dynamic></p> <h3>If given <code>text</code> is not valid JSON, an exception will be thrown.</h3> \n<h3 id=\"stringify\"><code><span class=\"label\">static</span> <a href=\"#stringify\">stringify</a> (value:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>, ?replacer:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>, ?space:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Encodes given <code>value</code> and returns the resulting JSON string.</h3> <p>If <code>replacer</code> is given and is not null, it is used to retrieve actual object to be encoded. The <code>replacer</code> function two parameters, the key and the value being encoded. Initial key value is an empty string.</p> <h3>If <code>space</code> is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Json.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Json.html</a>\n  </p>\n</div>\n","iterable":"<h1>typedef Iterable&lt;<span class=\"type\">T</span>&gt; </h1> <p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An Iterable is a data structure which has an iterator() method. See <code><a href=\"lambda\">Lambda</a></code> for generic functions on iterable structures.</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Iterable.html\" class=\"_attribution-link\">http://api.haxe.org/Iterable.html</a>\n  </p>\n</div>\n","haxe/http":"<h1> class Http </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class can be used to handle Http requests consistently across platforms. There are two intended usages:</p>\n<ul>\n<li>call haxe.Http.requestUrl(url) and receive the result as a String (not available on flash)</li>\n<li>create a new haxe.Http(url), register your callbacks for onData, onError and onStatus, then call request().</li>\n</ul> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>)</code></h3>\n<h3>Creates a new Http instance with <code>url</code> as parameter.</h3> <p>This does not do a request until request() is called.</p> <h3>If <code>url</code> is null, the field url must be set to a value before making the call to request(), or the result is unspecified.</h3> <p>(Php) Https (SSL) connections are allowed only if the OpenSSL extension is enabled.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"async\"><code> <a href=\"#async\">async</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on js</p>\n \n<h3 id=\"cnxTimeout\"><code> <a href=\"#cnxTimeout\">cnxTimeout</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../float\">Float</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"noShutdown\"><code> <a href=\"#noShutdown\">noShutdown</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"responseData\"><code> <span class=\"label\">read only</span> <a href=\"#responseData\">responseData</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"responseHeaders\"><code> <a href=\"#responseHeaders\">responseHeaders</a>:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"url\"><code> <a href=\"#url\">url</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>The url of <code>this</code> request. It is used only by the request() method and can be changed in order to send the same request to different target Urls.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"addHeader\"><code><a href=\"#addHeader\">addHeader</a> (header:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, value:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"This class can be used to handle Http requests consistently across platforms.\" href=\"http\">Http</a></code></h3>\n \n<h3 id=\"addParameter\"><code><a href=\"#addParameter\">addParameter</a> (param:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, value:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"This class can be used to handle Http requests consistently across platforms.\" href=\"http\">Http</a></code></h3>\n \n<h3 id=\"cancel\"><code><a href=\"#cancel\">cancel</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash, js</p>\n<p>Cancels <code>this</code> Http request if <code>request</code> has been called and a response has not yet been received.</p> \n<h3 id=\"customRequest\"><code><a href=\"#customRequest\">customRequest</a> (post:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a>, api:<a class=\"type\" title=\"An Output is an abstract write.\" href=\"io/output\">Output</a>, ?sock:<span class=\"type\">AbstractSocket</span>, ?method:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"fileTransfer\"><code><a href=\"#fileTransfer\">fileTransfer</a> (argname:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, filename:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, file:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"io/input\">Input</a>, size:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, mimeType:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a> = \"application/octet-stream\"):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"fileTransfert\"><code><span class=\"label\">inline</span> <a href=\"#fileTransfert\">fileTransfert</a> (argname:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, filename:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, file:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"io/input\">Input</a>, size:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, mimeType:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a> = \"application/octet-stream\"):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n<p>Note: Deprecated in 4.0</p> \n<h3 id=\"onData\"><code><span class=\"label\">dynamic</span> <a href=\"#onData\">onData</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>This method is called upon a successful request, with <code>data</code> containing the result String.</h3> <h3>The intended usage is to bind it to a custom function: <code>httpInstance.onData = function(data) { // handle result }</code>\n</h3> \n<h3 id=\"onError\"><code><span class=\"label\">dynamic</span> <a href=\"#onError\">onError</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>This method is called upon a request error, with <code>msg</code> containing the error description.</h3> <h3>The intended usage is to bind it to a custom function: <code>httpInstance.onError = function(msg) { // handle error }</code>\n</h3> \n<h3 id=\"onStatus\"><code><span class=\"label\">dynamic</span> <a href=\"#onStatus\">onStatus</a> (status:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>This method is called upon a Http status change, with <code>status</code> being the new status.</h3> <h3>The intended usage is to bind it to a custom function: <code>httpInstance.onStatus = function(status) { // handle status }</code>\n</h3> \n<h3 id=\"request\"><code><a href=\"#request\">request</a> (?post:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p>Sends <code>this</code> Http request to the Url specified by <code>this.<a href=\"#url\">url</a></code>.</p> <h3>If <code>post</code> is true, the request is sent as POST request, otherwise it is sent as GET request.</h3> <p>Depending on the outcome of the request, this method calls the onStatus(), onError() or onData() callback functions.</p> <h3>If <code>this.<a href=\"#url\">url</a></code> is null, the result is unspecified.</h3> <h3>If <code>this.<a href=\"#url\">url</a></code> is an invalid or inaccessible Url, the onError() callback function is called.</h3> <h3>(Js) If <code>this.<a href=\"#async\">async</a></code> is false, the callback functions are called before this method returns.</h3> \n<h3 id=\"setHeader\"><code><a href=\"#setHeader\">setHeader</a> (header:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, value:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"This class can be used to handle Http requests consistently across platforms.\" href=\"http\">Http</a></code></h3>\n<p>Sets the header identified as <code>header</code> to value <code>value</code>.</p> <p>If <code>header</code> or <code>value</code> are null, the result is unspecified.</p> <p>This method provides a fluent interface.</p> \n<h3 id=\"setParameter\"><code><a href=\"#setParameter\">setParameter</a> (param:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, value:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"This class can be used to handle Http requests consistently across platforms.\" href=\"http\">Http</a></code></h3>\n<p>Sets the parameter identified as <code>param</code> to value <code>value</code>.</p> <p>If <code>header</code> or <code>value</code> are null, the result is unspecified.</p> <p>This method provides a fluent interface.</p> \n<h3 id=\"setPostData\"><code><a href=\"#setPostData\">setPostData</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"This class can be used to handle Http requests consistently across platforms.\" href=\"http\">Http</a></code></h3>\n<p>Sets the post data of <code>this</code> Http request to <code>data</code>.</p> <p>There can only be one post data per request. Subsequent calls overwrite the previously set value.</p> <h3>If <code>data</code> is null, the post data is considered to be absent.</h3> <p>This method provides a fluent interface.</p>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"PROXY\"><code><span class=\"label\">static</span> <a href=\"#PROXY\">PROXY</a>:{port:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, host:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, auth:{user:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, pass:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>}}<span> = null</span> </code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"requestUrl\"><code><span class=\"label\">static</span> <a href=\"#requestUrl\">requestUrl</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, js, macro, neko, php, python</p>\n<h3>Makes a synchronous request to <code>url</code>.</h3> <p>This creates a new Http instance and makes a GET request by calling its request(false) method.</p> <h3>If <code>url</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Http.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Http.html</a>\n  </p>\n</div>\n","haxe/log":"<h1> class Log </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Log primarily provides the trace() method, which is invoked upon a call to trace() in haxe code.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"clear\"><code><span class=\"label\">static</span> <span class=\"label\">dynamic</span> <a href=\"#clear\">clear</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash, js</p>\n<p>Clears the trace output.</p> \n<h3 id=\"setColor\"><code><span class=\"label\">static</span> <span class=\"label\">dynamic</span> <a href=\"#setColor\">setColor</a> (rgb:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n<h3>Sets the color of the trace output to <code>rgb</code>.</h3> \n<h3 id=\"trace\"><code><span class=\"label\">static</span> <span class=\"label\">dynamic</span> <a href=\"#trace\">trace</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>, ?infos:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"posinfos\">PosInfos</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Outputs <code>v</code> in a platform-dependent way.</h3> <h3>The second parameter <code>infos</code> is injected by the compiler and contains information about the position where the trace() call was made.</h3> <p>This method can be rebound to a custom function:</p> <pre><code>var oldTrace = haxe.Log.trace; // store old function\nhaxe.Log.trace = function(v,infos) { // handle trace }\n...\nhaxe.Log.trace = oldTrace;\n</code></pre> <p>If it is bound to null, subsequent calls to trace() will cause an exception.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Log.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Log.html</a>\n  </p>\n</div>\n","haxe/posinfos":"<h1>typedef PosInfos </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>PosInfos is a magic type which can be used to generate position information into the output for debugging use.</p> <p>If a function has a final optional argument of this type, i.e. (..., ?pos:haxe.PosInfos), each call to that function which does not assign a value to that argument has its position added as call argument.</p> <p>This can be used to track positions of calls in e.g. a unit testing framework.</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"methodName\"><code> <a href=\"#methodName\">methodName</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n \n<h3 id=\"lineNumber\"><code> <a href=\"#lineNumber\">lineNumber</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n \n<h3 id=\"fileName\"><code> <a href=\"#fileName\">fileName</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n \n<h3 id=\"customParams\"><code> <a href=\"#customParams\">customParams</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>&gt;&gt;</code></h3>\n \n<h3 id=\"className\"><code> <a href=\"#className\">className</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/PosInfos.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/PosInfos.html</a>\n  </p>\n</div>\n","haxe/resource":"<h1> class Resource </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Resource can be used to access resources that were added through the -resource file@name command line parameter.</p> <p>Depending on their type they can be obtained as String through getString(name), or as binary data through getBytes(name).</p> <p>A list of all available resource names can be obtained from listNames().</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getBytes\"><code><span class=\"label\">static</span> <a href=\"#getBytes\">getBytes</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"\" href=\"io/bytes\">Bytes</a></code></h3>\n<h3>Retrieves the resource identified by <code>name</code> as an instance of haxe.io.Bytes.</h3> <h3>If <code>name</code> does not match any resource name, null is returned.</h3> \n<h3 id=\"getString\"><code><span class=\"label\">static</span> <a href=\"#getString\">getString</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Retrieves the resource identified by <code>name</code> as a String.</h3> <h3>If <code>name</code> does not match any resource name, null is returned.</h3> \n<h3 id=\"listNames\"><code><span class=\"label\">static</span> <a href=\"#listNames\">listNames</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>&gt;</code></h3>\n<p>Lists all available resource names. The resource name is the name part of the -resource file@name command line parameter.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Resource.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Resource.html</a>\n  </p>\n</div>\n","haxe/stackitem":"<h1>enum StackItem </h1>\n<p>package haxe</p>\n\n<p>defined in haxe.CallStack</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Elements return by <code><a href=\"callstack\">CallStack</a></code> methods.</p> </div> <h2 class=\"section\">Values</h2>  <h3 id=\"CFunction\"><code>CFunction        </code></h3>\n <h3 id=\"Module\"><code>Module                    (m:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>)        </code></h3>\n <h3 id=\"FilePos\"><code>FilePos                    (s:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<a class=\"type\" title=\"Elements return by &lt;code&gt;&lt;a href=\" .. href=\"stackitem\">StackItem</a>&gt;, file:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, line:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>)        </code></h3>\n <h3 id=\"Method\"><code>Method                    (classname:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, method:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>)        </code></h3>\n <h3 id=\"LocalFunction\"><code>LocalFunction                    (v:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/StackItem.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/StackItem.html</a>\n  </p>\n</div>\n","haxe/template":"<h1> class Template </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Template provides a basic templating mechanism to replace values in a source String, and to have some basic logic.</p> <p>A complete documentation of the supported syntax is available at: <a href=\"#\">http://haxe.org/manual/std-template.html&lt;/a</a>&gt;</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>)</code></h3>\n<h3>Creates a new Template instance from <code>str</code>.</h3> <h3>\n<code>str</code> is parsed into tokens, which are stored for internal use. This means that multiple execute() operations on a single Template instance are more efficient than one execute() operations on multiple Template instances.</h3> <h3>If <code>str</code> is null, the result is unspecified.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"execute\"><code><a href=\"#execute\">execute</a> (context:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>, ?macros:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Executes <code>this</code> Template, taking into account <code>context</code> for replacements and <code>macros</code> for callback functions.</p> <h3>If <code>context</code> has a field 'name', its value replaces all occurrences of ::name:: in the Template. Otherwise Template.globals is checked instead, If 'name' is not a field of that either, ::name:: is replaced with null.</h3> <p>If <code>macros</code> has a field 'name', all occurrences of $$name(args) are replaced with the result of calling that field. The first argument is always the resolve() method, followed by the given arguments. If <code>macros</code> has no such field, the result is unspecified.</p> <p>If <code>context</code> is null, the result is unspecified. If <code>macros</code> is null, no macros are used.</p>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"globals\"><code><span class=\"label\">static</span> <a href=\"#globals\">globals</a>:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a><span> = '???'</span> </code></h3>\n<p>Global replacements which are used across all Template instances. This has lower priority than the context argument of execute().</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Template.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Template.html</a>\n  </p>\n</div>\n","haxe/timer":"<h1> class Timer </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Timer class allows you to create asynchronous timers on platforms that support events.</p> <p>The intended usage is to create an instance of the Timer class with a given interval, set its run() method to a custom function to be invoked and eventually call stop() to stop the Timer.</p> <p>Note that a running Timer may or may not prevent the program to exit automatically when main() returns.</p> <p>It is also possible to extend this class and override its run() method in the child class.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (time_ms:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>)</code></h3>\n<p class=\"availability\">Available on flash, java, js, python</p>\n<h3>Creates a new timer that will run every <code>time_ms</code> milliseconds.</h3> <p>After creating the Timer instance, it calls <code>this].run</code> repeatedly, with delays of <code>time_ms</code> milliseconds, until <code>this.<a href=\"#stop\">stop</a></code> is called.</p> <h3>The first invocation occurs after <code>time_ms</code> milliseconds, not immediately.</h3> <p>The accuracy of this may be platform-dependent.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">dynamic</span> <a href=\"#run\">run</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash, java, js, python</p>\n<h3>This method is invoked repeatedly on <code>this</code> Timer.</h3> <p>It can be overridden in a subclass, or rebound directly to a custom function:</p> <pre><code>var timer = new haxe.Timer(1000); // 1000ms delay\ntimer.run = function() { ... }\n</code></pre> <p>Once bound, it can still be rebound to different functions until <code>this</code> Timer is stopped through a call to <code>this.<a href=\"#stop\">stop</a></code>.</p> \n<h3 id=\"stop\"><code><a href=\"#stop\">stop</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash, java, js, python</p>\n<h3>Stops <code>this</code> Timer.</h3> <h3>After calling this method, no additional invocations of <code>this.<a href=\"#run\">run</a></code> will occur.</h3> <h3>It is not possible to restart <code>this</code> Timer once stopped.</h3>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"delay\"><code><span class=\"label\">static</span> <a href=\"#delay\">delay</a> (f:<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a>, time_ms:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The Timer class allows you to create asynchronous timers on platforms that support events.\" href=\"timer\">Timer</a></code></h3>\n<p class=\"availability\">Available on flash, java, js, python</p>\n<p>Invokes <code>f</code> after <code>time_ms</code> milliseconds.</p> <p>This is a convenience function for creating a new Timer instance with <code>time_ms</code> as argument, binding its run() method to <code>f</code> and then stopping <code>this</code> Timer upon the first invocation.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"measure\"><code><span class=\"label\">static</span> <a href=\"#measure\">measure</a>&lt;<span class=\"type\">T</span>&gt; (f:<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a> ‑&gt; <span class=\"type\">T</span>, ?pos:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"posinfos\">PosInfos</a>):<span class=\"type\">T</span> </code></h3>\n<h3>Measures the time it takes to execute <code>f</code>, in seconds with fractions.</h3> <h3>This is a convenience function for calculating the difference between Timer.stamp() before and after the invocation of <code>f</code>.</h3> <h3>The difference is passed as argument to Log.trace(), with \"s\" appended to denote the unit. The optional <code>pos</code> argument is passed through.</h3> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"stamp\"><code><span class=\"label\">static</span> <a href=\"#stamp\">stamp</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../float\">Float</a></code></h3>\n<p>Returns a timestamp, in seconds with fractions.</p> <p>The value itself might differ depending on platforms, only differences between two values make sense.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Timer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Timer.html</a>\n  </p>\n</div>\n","haxe/unserializer":"<h1> class Unserializer </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Unserializer class is the complement to the Serializer class. It parses</p> <pre><code>a serialization String and creates objects from the contained data.\n\nThis class can be used in two ways:\n\n- create a new Unserializer() instance with a given serialization\n</code></pre> <p>String, then call its unserialize() method until all values are extracted</p> <pre><code>- call Unserializer.run() to unserialize a single value from a given\n</code></pre> <p>String</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (buf:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>)</code></h3>\n<h3>Creates a new Unserializer instance, with its internal buffer initialized to <code>buf</code>.</h3> <p>This does not parse <code>buf</code> immediately. It is parsed only when calls to <code>this.<a href=\"#unserialize\">unserialize</a></code> are made.</p> <p>Each Unserializer instance maintains its own cache.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"getResolver\"><code><a href=\"#getResolver\">getResolver</a> ():<span class=\"type\">TypeResolver</span> </code></h3>\n<h3>Gets the type resolver of <code>this</code> Unserializer instance.</h3> <p>See DEFAULT_RESOLVER for more information on type resolvers.</p> \n<h3 id=\"setResolver\"><code><a href=\"#setResolver\">setResolver</a> (r:<span class=\"type\">TypeResolver</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p>Sets the type resolver of <code>this</code> Unserializer instance to <code>r</code>.</p> <h3>If <code>r</code> is null, a special resolver is used which returns null for all input values.</h3> <p>See DEFAULT_RESOLVER for more information on type resolvers.</p> \n<h3 id=\"unserialize\"><code><a href=\"#unserialize\">unserialize</a> ():<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a></code></h3>\n<h3>Unserializes the next part of <code>this</code> Unserializer instance and returns the according value.</h3> <p>This function may call <code>this.<a href=\"#resolver\">resolver</a>.resolveClass</code> to determine a Class from a String, and <code>this.<a href=\"#resolver\">resolver</a>.resolveEnum</code> to determine an Enum from a String.</p> <h3>If <code>this</code> Unserializer instance contains no more or invalid data, an exception is thrown.</h3> <p>This operation may fail on structurally valid data if a type cannot be resolved or if a field cannot be set. This can happen when unserializing Strings that were serialized on a different haxe target, in which the serialization side has to make sure not to include platform-specific data.</p> <p>Classes are created from Type.createEmptyInstance, which means their constructors are not called.</p>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"DEFAULT_RESOLVER\"><code><span class=\"label\">static</span> <a href=\"#DEFAULT_RESOLVER\">DEFAULT_RESOLVER</a>:<span class=\"type\">TypeResolver</span> <span> = Type</span> </code></h3>\n<p>This value can be set to use custom type resolvers.</p> <p>A type resolver finds a Class or Enum instance from a given String. By default, the haxe Type Api is used.</p> <p>A type resolver must provide two methods:</p>\n<ol>\n<li> <p>resolveClass(name:String):Class<dynamic> is called to determine a</dynamic></p> <pre><code>Class from a class name\n</code></pre>\n</li>\n<li> <p>resolveEnum(name:String):Enum<dynamic> is called to determine an</dynamic></p> <pre><code>Enum from an enum name\n</code></pre>\n</li>\n</ol> <p>This value is applied when a new Unserializer instance is created. Changing it afterwards has no effect on previously created instances.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (v:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a></code></h3>\n<h3>Unserializes <code>v</code> and returns the according value.</h3> <h3>This is a convenience function for creating a new instance of Unserializer with <code>v</code> as buffer and calling its unserialize() method once.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Unserializer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Unserializer.html</a>\n  </p>\n</div>\n","haxe/utf8":"<h1> class Utf8 </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Since all platforms does not guarantee that String always uses UTF-8 encoding, you can use this crossplatform API to perform operations on such strings.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (?size:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>)</code></h3>\n<p>Allocate a new Utf8 buffer using an optional bytes size.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"addChar\"><code><a href=\"#addChar\">addChar</a> (c:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<p>Add the given UTF8 character code to the buffer.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Returns the buffer converted to a String;</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"charCodeAt\"><code><span class=\"label\">static</span> <a href=\"#charCodeAt\">charCodeAt</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, index:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<h3>Similar to <code><a href=\"../string#charCodeAt\">String.charCodeAt</a></code> but uses the UTF8 character position.</h3> \n<h3 id=\"compare\"><code><span class=\"label\">static</span> <a href=\"#compare\">compare</a> (a:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, b:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Compare two UTF8 strings, character by character.</p> \n<h3 id=\"decode\"><code><span class=\"label\">static</span> <a href=\"#decode\">decode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Decode an UTF8 string back to an ISO string. Throw an exception if a given UTF8 character is not supported by the decoder.</p> \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Encode the input ISO string into the corresponding UTF8 one.</p> \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, chars:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Call the <code>chars</code> function for each UTF8 char of the string.</h3> \n<h3 id=\"length\"><code><span class=\"label\">static</span> <a href=\"#length\">length</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Returns the number of UTF8 chars of the String.</p> \n<h3 id=\"sub\"><code><span class=\"label\">static</span> <a href=\"#sub\">sub</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>This is similar to <code><a href=\"../string#substr\">String.substr</a></code> but the <code>pos</code> and <code>len</code> parts are considering UTF8 characters.</p> \n<h3 id=\"validate\"><code><span class=\"label\">static</span> <a href=\"#validate\">validate</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Tells if the String is correctly encoded as UTF8.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Utf8.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Utf8.html</a>\n  </p>\n</div>\n","lambda":"<h1> class Lambda </h1> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The <code><a href=\"lambda\">Lambda</a></code> class is a collection of methods to support functional programming. It is ideally used with 'using Lambda' and then acts as an extension to Iterable types.</p> <p>On static platforms, working with the Iterable structure might be slower than performing the operations directly on known types, such as Array and List.</p> <p>If the first argument to any of the methods is null, the result is unspecified.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"array\"><code><span class=\"label\">static</span> <a href=\"#array\">array</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"array\">Array</a>&lt;<span class=\"type\">A</span>&gt;</code></h3>\n<h3>Creates an Array from Iterable <code>it</code>.</h3> <h3>If <code>it</code> is an Array, this function returns a copy of it.</h3> \n<h3 id=\"concat\"><code><span class=\"label\">static</span> <a href=\"#concat\">concat</a>&lt;<span class=\"type\">T</span>&gt; (a:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">T</span>&gt;, b:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns a new List containing all elements of Iterable <code>a</code> followed by all elements of Iterable <code>b</code>.</p> <p>If <code>a</code> or <code>b</code> are null, the result is unspecified.</p> \n<h3 id=\"count\"><code><span class=\"label\">static</span> <a href=\"#count\">count</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, ?pred:<span class=\"type\">A</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Returns the number of elements in <code>it</code> for which <code>pred</code> is true, or the total number of elements in <code>it</code> if <code>pred</code> is null.</p> <p>This function traverses all elements.</p> \n<h3 id=\"empty\"><code><span class=\"label\">static</span> <a href=\"#empty\">empty</a>&lt;<span class=\"type\">T</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<h3>Tells if Iterable <code>it</code> does not contain any element.</h3> \n<h3 id=\"exists\"><code><span class=\"label\">static</span> <a href=\"#exists\">exists</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if <code>it</code> contains an element for which <code>f</code> is true.</p> <h3>This function returns true as soon as an element is found for which a call to <code>f</code> returns true.</h3> <p>If no such element is found, the result is false.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"filter\"><code><span class=\"label\">static</span> <a href=\"#filter\">filter</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">A</span>&gt;</code></h3>\n<p>Returns a List containing those elements of <code>it</code> for which <code>f</code> returned true.</p> <p>If <code>it</code> is empty, the result is the empty List even if <code>f</code> is null.</p> <h3>Otherwise if <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"find\"><code><span class=\"label\">static</span> <a href=\"#find\">find</a>&lt;<span class=\"type\">T</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">T</span>&gt;, f:<span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns the first element of <code>it</code> for which <code>f</code> is true.</p> <h3>This function returns as soon as an element is found for which a call to <code>f</code> returns true.</h3> <p>If no such element is found, the result is null.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"fold\"><code><span class=\"label\">static</span> <a href=\"#fold\">fold</a>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <span class=\"type\">B</span> ‑&gt; <span class=\"type\">B</span>, first:<span class=\"type\">B</span>):<span class=\"type\">B</span> </code></h3>\n<p>Functional fold on Iterable <code>it</code>, using function <code>f</code> with start argument <code>first</code>.</p> <p>If <code>it</code> has no elements, the result is <code>first</code>.</p> <p>Otherwise the first element of <code>it</code> is passed to <code>f</code> alongside <code>first</code>. The result of that call is then passed to <code>f</code> with the next element of <code>it</code>, and so on until <code>it</code> has no more elements.</p> <p>If <code>it</code> or <code>f</code> are null, the result is unspecified.</p> \n<h3 id=\"foreach\"><code><span class=\"label\">static</span> <a href=\"#foreach\">foreach</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if <code>f</code> is true for all elements of <code>it</code>.</p> <h3>This function returns false as soon as an element is found for which a call to <code>f</code> returns false.</h3> <p>If no such element is found, the result is true.</p> <h3>In particular, this function always returns true if <code>it</code> is empty.</h3> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"has\"><code><span class=\"label\">static</span> <a href=\"#has\">has</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, elt:<span class=\"type\">A</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"bool\">Bool</a></code></h3>\n<p>Tells if <code>it</code> contains <code>elt</code>.</p> <p>This function returns true as soon as an element is found which is equal to <code>elt</code> according to the <code>==</code> operator.</p> <p>If no such element is found, the result is false.</p> \n<h3 id=\"indexOf\"><code><span class=\"label\">static</span> <a href=\"#indexOf\">indexOf</a>&lt;<span class=\"type\">T</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">T</span>&gt;, v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a></code></h3>\n<p>Returns the index of the first element <code>v</code> within Iterable <code>it</code>.</p> <h3>This function uses operator <code>==</code> to check for equality.</h3> <p>If <code>v</code> does not exist in <code>it</code>, the result is -1.</p> \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"void\">Void</a></code></h3>\n<p>Calls <code>f</code> on all elements of <code>it</code>, in order.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"list\"><code><span class=\"label\">static</span> <a href=\"#list\">list</a>&lt;<span class=\"type\">A</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">A</span>&gt;</code></h3>\n<h3>Creates a List form Iterable <code>it</code>.</h3> <h3>If <code>it</code> is a List, this function returns a copy of it.</h3> \n<h3 id=\"map\"><code><span class=\"label\">static</span> <a href=\"#map\">map</a>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<span class=\"type\">A</span> ‑&gt; <span class=\"type\">B</span>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">B</span>&gt;</code></h3>\n<p>Creates a new List by applying function <code>f</code> to all elements of <code>it</code>.</p> <p>The order of elements is preserved.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3> \n<h3 id=\"mapi\"><code><span class=\"label\">static</span> <a href=\"#mapi\">mapi</a>&lt;<span class=\"type\">A</span>, <span class=\"type\">B</span>&gt; (it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"iterable\">Iterable</a>&lt;<span class=\"type\">A</span>&gt;, f:<a class=\"type\" title=\"The standard Int type.\" href=\"int\">Int</a> ‑&gt; <span class=\"type\">A</span> ‑&gt; <span class=\"type\">B</span>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"list\">List</a>&lt;<span class=\"type\">B</span>&gt;</code></h3>\n<h3>Similar to map, but also passes the index of each element to <code>f</code>.</h3> <p>The order of elements is preserved.</p> <h3>If <code>f</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/Lambda.html\" class=\"_attribution-link\">http://api.haxe.org/Lambda.html</a>\n  </p>\n</div>\n","haxe/serializer":"<h1> class Serializer </h1>\n<p>package haxe</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Serializer class can be used to encode values and objects into a String,</p> <pre><code>from which the Unserializer class can recreate the original representation.\n\nThis class can be used in two ways:\n\n- create a new Serializer() instance, call its serialize() method with\n</code></pre> <p>any argument and finally retrieve the String representation from toString()</p> <pre><code>- call Serializer.run() to obtain the serialized representation of a\n</code></pre> <p>single argument</p> <pre><code>Serialization is guaranteed to work for all haxe-defined classes, but may\nor may not work for instances of external/native classes.\n\nThe specification of the serialization format can be found here:\n`http://haxe.org/manual/serialization/format`\n</code></pre> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new Serializer instance.</p> <p>Subsequent calls to <code>this.<a href=\"#serialize\">serialize</a></code> will append values to the internal buffer of this String. Once complete, the contents can be retrieved through a call to <code>this.<a href=\"#toString\">toString</a></code>.</p> <p>Each Serializer instance maintains its own cache if this.useCache` is true.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"useCache\"><code> <a href=\"#useCache\">useCache</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>The individual cache setting for <code>this</code> Serializer instance.</h3> <p>See USE_CACHE for a complete description.</p> \n<h3 id=\"useEnumIndex\"><code> <a href=\"#useEnumIndex\">useEnumIndex</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<h3>The individual enum index setting for <code>this</code> Serializer instance.</h3> <p>See USE_ENUM_INDEX for a complete description.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"serialize\"><code><a href=\"#serialize\">serialize</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n<h3>Serializes <code>v</code>.</h3> <p>All haxe-defined values and objects with the exception of functions can be serialized. Serialization of external/native objects is not guaranteed to work.</p> <p>The values of <code>this.<a href=\"#useCache\">useCache</a></code> and <code>this.<a href=\"#useEnumIndex\">useEnumIndex</a></code> may affect serialization output.</p> \n<h3 id=\"serializeException\"><code><a href=\"#serializeException\">serializeException</a> (e:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../void\">Void</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Return the String representation of <code>this</code> Serializer.</h3> <p>The exact format specification can be found here: http://haxe.org/manual/serialization/format</p>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"USE_CACHE\"><code><span class=\"label\">static</span> <a href=\"#USE_CACHE\">USE_CACHE</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a><span> = false</span> </code></h3>\n<p>If the values you are serializing can contain circular references or objects repetitions, you should set USE_CACHE to true to prevent infinite loops.</p> <p>This may also reduce the size of serialization Strings at the expense of performance.</p> <p>This value can be changed for individual instances of Serializer by setting their useCache field.</p> \n<h3 id=\"USE_ENUM_INDEX\"><code><span class=\"label\">static</span> <a href=\"#USE_ENUM_INDEX\">USE_ENUM_INDEX</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a><span> = false</span> </code></h3>\n<p>Use constructor indexes for enums instead of names.</p> <p>This may reduce the size of serialization Strings, but makes them less suited for long-term storage: If constructors are removed or added from the enum, the indices may no longer match.</p> <p>This value can be changed for individual instances of Serializer by setting their useEnumIndex field.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<h3>Serializes <code>v</code> and returns the String representation.</h3> <h3>This is a convenience function for creating a new instance of Serializer, serialize <code>v</code> into it and obtain the result through a call to toString().</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Serializer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Serializer.html</a>\n  </p>\n</div>\n","haxe/ucs2":"<h1>abstract Ucs2(<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a>) </h1>\n<p>package haxe</p> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Cross platform UCS2 string API.</p> </div> <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"charAt\"><code><span class=\"label\">inline</span> <a href=\"#charAt\">charAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<p>Returns the character at position <code>index</code> of <code>this</code> Ucs2.</p> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, the empty Ucs2 \"\" is returned.</p> \n<h3 id=\"charCodeAt\"><code><span class=\"label\">inline</span> <a href=\"#charCodeAt\">charCodeAt</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>&gt;</code></h3>\n<p>Returns the character code at position <code>index</code> of <code>this</code> Ucs2.</p> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, null is returned.</p> <p>To obtain the character code of a single character, \"x\".code can be used instead to @:extern public inline the character code at compile time. Note that this only works on Ucs2 literals of length 1.</p> \n<h3 id=\"indexOf\"><code><span class=\"label\">inline</span> <a href=\"#indexOf\">indexOf</a> (str:<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Returns the position of the leftmost occurence of <code>str</code> within <code>this</code> Ucs2.</p> <p>If <code>startIndex</code> is given, the search is performed within the substring of <code>this</code> Ucs2 starting from <code>startIndex</code>. Otherwise the search is performed within <code>this</code> Ucs2. In either case, the returned position is relative to the beginning of <code>this</code> Ucs2.</p> <h3>If <code>str</code> cannot be found, -1 is returned.</h3> \n<h3 id=\"lastIndexOf\"><code><span class=\"label\">inline</span> <a href=\"#lastIndexOf\">lastIndexOf</a> (str:<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a>, ?startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Returns the position of the rightmost occurence of <code>str</code> within <code>this</code> Ucs2.</p> <p>If <code>startIndex</code> is given, the search is performed within the substring of <code>this</code> Ucs2 from 0 to <code>startIndex</code>. Otherwise the search is performed within <code>this</code> Ucs2. In either case, the returned position is relative to the beginning of <code>this</code> Ucs2.</p> <h3>If <code>str</code> cannot be found, -1 is returned.</h3> \n<h3 id=\"split\"><code><span class=\"label\">inline</span> <a href=\"#split\">split</a> (delimiter:<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../array\">Array</a>&lt;<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a>&gt;</code></h3>\n<p>Splits <code>this</code> Ucs2 at each occurence of <code>delimiter</code>.</p> <p>If <code>this</code> Ucs2 is the empty Ucs2 \"\", the result is not consistent across targets and may either be <code>[]</code> (on Js, Cpp) or <code>[\"\"]</code>.</p> <p>If <code>delimiter</code> is the empty Ucs2 \"\", <code>this</code> Ucs2 is split into an Array of <code>this.<a href=\"#length\">length</a></code> elements, where the elements correspond to the characters of <code>this</code> Ucs2.</p> <p>If <code>delimiter</code> is not found within <code>this</code> Ucs2, the result is an Array with one element, which equals <code>this</code> Ucs2.</p> <h3>If <code>delimiter</code> is null, the result is unspecified.</h3> <p>Otherwise, <code>this</code> Ucs2 is split into parts at each occurence of <code>delimiter</code>. If <code>this</code> Ucs2 starts (or ends) with [delimiter}, the result Array contains a leading (or trailing) empty Ucs2 \"\" element. Two subsequent delimiters also result in an empty Ucs2 \"\" element.</p> \n<h3 id=\"substr\"><code><span class=\"label\">inline</span> <a href=\"#substr\">substr</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<p>Returns <code>len</code> characters of <code>this</code> Ucs2, starting at position <code>pos</code>.</p> <p>If <code>len</code> is omitted, all characters from position <code>pos</code> to the end of <code>this</code> Ucs2 are included.</p> <p>If <code>pos</code> is negative, its value is calculated from the end of <code>this</code> Ucs2 by <code>this.<a href=\"#length\">length</a> + pos</code>. If this yields a negative value, 0 is used instead.</p> <p>If the calculated position + <code>len</code> exceeds <code>this.<a href=\"#length\">length</a></code>, the characters from that position to the end of <code>this</code> Ucs2 are returned.</p> <h3>If <code>len</code> is negative, the result is unspecified.</h3> \n<h3 id=\"substring\"><code><span class=\"label\">inline</span> <a href=\"#substring\">substring</a> (startIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>, ?endIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<p>Returns the part of <code>this</code> Ucs2 from <code>startIndex</code> to <code>endIndex</code>.</p> <p>If <code>startIndex</code> or <code>endIndex</code> are negative, 0 is used instead.</p> <p>If <code>startIndex</code> exceeds <code>endIndex</code>, they are swapped.</p> <p>If the (possibly swapped) <code>endIndex</code> is omitted or exceeds <code>this.<a href=\"#length\">length</a></code>, <code>this.<a href=\"#length\">length</a></code> is used instead.</p> <p>If the (possibly swapped) <code>startIndex</code> exceeds <code>this.<a href=\"#length\">length</a></code>, the empty Ucs2 \"\" is returned.</p> \n<h3 id=\"toLowerCase\"><code><span class=\"label\">inline</span> <a href=\"#toLowerCase\">toLowerCase</a> ():<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<h3>Returns a Ucs2 where all characters of <code>this</code> Ucs2 are lower case.</h3> <h3>Affects the characters <code>A-Z</code>. Other characters remain unchanged.</h3> \n<h3 id=\"toNativeString\"><code><span class=\"label\">inline</span> <a href=\"#toNativeString\">toNativeString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Returns the native underlying String.</p> \n<h3 id=\"toUpperCase\"><code><span class=\"label\">inline</span> <a href=\"#toUpperCase\">toUpperCase</a> ():<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<h3>Returns a Ucs2 where all characters of <code>this</code> Ucs2 are upper case.</h3> <h3>Affects the characters <code>a-z</code>. Other characters remain unchanged.</h3>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromCharCode\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fromCharCode\">fromCharCode</a> (code:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"Cross platform UCS2 string API.\" href=\"ucs2\">Ucs2</a></code></h3>\n<h3>Returns the Ucs2 corresponding to the character code <code>code</code>.</h3> <h3>If <code>code</code> is negative or has another invalid value, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Ucs2.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Ucs2.html</a>\n  </p>\n</div>\n","haxe/ds/arraysort":"<h1> class ArraySort </h1>\n<p>package haxe.ds</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>ArraySort provides a stable implementation of merge sort through its <code>sort</code> method. It should be used instead of <code><a href=\"../../array#sort\">Array.sort</a></code> in cases where the order of equal elements has to be retained on all targets.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"sort\"><code><span class=\"label\">static</span> <a href=\"#sort\">sort</a>&lt;<span class=\"type\">T</span>&gt; (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<span class=\"type\">T</span>&gt;, cmp:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Sorts Array <code>a</code> according to the comparison function <code>cmp</code>, where <code>cmp(x,y)</code> returns 0 if <code>x == y</code>, a positive Int if <code>x &gt; y</code> and a negative Int if <code>x &lt; y</code>.</p> <h3>This operation modifies Array <code>a</code> in place.</h3> <p>This operation is stable: The order of equal elements is preserved.</p> <p>If <code>a</code> or <code>cmp</code> are null, the result is unspecified.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/ArraySort.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/ArraySort.html</a>\n  </p>\n</div>\n","sys/db/connection":"<h1> interface Connection </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, java, macro, neko, php</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"addValue\"><code><a href=\"#addValue\">addValue</a> (s:<a class=\"type\" title=\"A String buffer is an efficient way to build a big string by appending small elements together.\" href=\"../../stringbuf\">StringBuf</a>, v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"commit\"><code><a href=\"#commit\">commit</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"dbName\"><code><a href=\"#dbName\">dbName</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"escape\"><code><a href=\"#escape\">escape</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"lastInsertId\"><code><a href=\"#lastInsertId\">lastInsertId</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"quote\"><code><a href=\"#quote\">quote</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"request\"><code><a href=\"#request\">request</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"resultset\">ResultSet</a></code></h3>\n \n<h3 id=\"rollback\"><code><a href=\"#rollback\">rollback</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"startTransaction\"><code><a href=\"#startTransaction\">startTransaction</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Connection.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Connection.html</a>\n  </p>\n</div>\n","sys/db/mysql":"<h1> class Mysql </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, neko, php</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"connect\"><code><span class=\"label\">static</span> <a href=\"#connect\">connect</a> (params:{user:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, socket:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, port:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, pass:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, host:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, database:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Mysql.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Mysql.html</a>\n  </p>\n</div>\n","sys/db/object":"<h1> class Object </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>Record Object : the persistent object base type. See the tutorial on Haxe website to learn how to use Record.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"delete\"><code><a href=\"#delete\">delete</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"insert\"><code><a href=\"#insert\">insert</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"isLocked\"><code><a href=\"#isLocked\">isLocked</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"lock\"><code><a href=\"#lock\">lock</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"update\"><code><a href=\"#update\">update</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Object.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Object.html</a>\n  </p>\n</div>\n","sys/db/recordfield":"<h1>typedef RecordField </h1>\n<p>package sys.db</p> \n<p>defined in sys.db.RecordInfos</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"t\"><code> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"recordtype\">RecordType</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"isNull\"><code> <a href=\"#isNull\">isNull</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/RecordField.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/RecordField.html</a>\n  </p>\n</div>\n","haxe/io/output":"<h1> class Output </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/io/NativeOutput.html\">NativeOutput</a>, <a class=\"type\" title=\"\" href=\"bytesoutput\">BytesOutput</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/java/io/NativeOutput.html\">NativeOutput</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/python/io/NativeOutput.html\">NativeOutput</a>, <a class=\"type\" title=\"Use [sys.\" href=\"../../sys/io/fileoutput\">FileOutput</a> </p>   <div class=\"indent\"> <p>An Output is an abstract write. A specific output implementation will only have to override the [writeByte] and maybe the [write], [flush] and [close] methods. See [File.write] and [String.write] for two ways of creating an Output.</p> </div>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"bigEndian\"><code> <a href=\"#bigEndian\">bigEndian</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Endianness (word byte order) used when writing numbers.</p> <p>If <code>true</code>, big-endian is used, otherwise <code>little-endian</code> is used.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Close the output.</p> <p>Behaviour while writing after calling this method is unspecified.</p> \n<h3 id=\"flush\"><code><a href=\"#flush\">flush</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Flush any buffered data.</p> \n<h3 id=\"prepare\"><code><a href=\"#prepare\">prepare</a> (nbytes:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Inform that we are about to write at least <code>nbytes</code> bytes.</h3> <p>The underlying implementation can allocate proper working space depending on this information, or simply ignore it. This is not a mandatory call but a tip and is only used in some specific cases.</p> \n<h3 id=\"write\"><code><a href=\"#write\">write</a> (s:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write all bytes stored in <code>s</code>.</h3> \n<h3 id=\"writeByte\"><code><a href=\"#writeByte\">writeByte</a> (c:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Write one byte.</p> \n<h3 id=\"writeBytes\"><code><a href=\"#writeBytes\">writeBytes</a> (s:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Write <code>len</code> bytes from <code>s</code> starting by position specified by <code>pos</code>.</p> <h3>Returns the actual length of written data that can differ from <code>len</code>.</h3> <h3>See <code>writeFullBytes</code> that tries to write the exact amount of specified bytes.</h3> \n<h3 id=\"writeDouble\"><code><a href=\"#writeDouble\">writeDouble</a> (x:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 64-bit double-precision floating point number.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeFloat\"><code><a href=\"#writeFloat\">writeFloat</a> (x:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 32-bit floating point number.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeFullBytes\"><code><a href=\"#writeFullBytes\">writeFullBytes</a> (s:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Write <code>len</code> bytes from <code>s</code> starting by position specified by <code>pos</code>.</p> <p>Unlike <code>writeBytes</code>, this method tries to write the exact <code>len</code> amount of bytes.</p> \n<h3 id=\"writeInput\"><code><a href=\"#writeInput\">writeInput</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"input\">Input</a>, ?bufsize:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Read all available data from <code>i</code> and write it.</h3> <h3>The <code>bufsize</code> optional argument specifies the size of chunks by which data is read and written. Its default value is 4096.</h3> \n<h3 id=\"writeInt16\"><code><a href=\"#writeInt16\">writeInt16</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 16-bit signed integer.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeInt24\"><code><a href=\"#writeInt24\">writeInt24</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 24-bit signed integer.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeInt32\"><code><a href=\"#writeInt32\">writeInt32</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 32-bit signed integer.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeInt8\"><code><a href=\"#writeInt8\">writeInt8</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 8-bit signed integer.</h3> \n<h3 id=\"writeString\"><code><a href=\"#writeString\">writeString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>s</code> string.</h3> \n<h3 id=\"writeUInt16\"><code><a href=\"#writeUInt16\">writeUInt16</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 16-bit unsigned integer.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"writeUInt24\"><code><a href=\"#writeUInt24\">writeUInt24</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Write <code>x</code> as 24-bit unsigned integer.</h3> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Output.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Output.html</a>\n  </p>\n</div>\n","haxe/io/input":"<h1> class Input </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/io/NativeInput.html\">NativeInput</a>, <a class=\"type\" title=\"\" href=\"bufferinput\">BufferInput</a>, <a class=\"type\" title=\"\" href=\"bytesinput\">BytesInput</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/java/io/NativeInput.html\">NativeInput</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/python/io/NativeInput.html\">NativeInput</a>, <a class=\"type\" title=\"Use [sys.\" href=\"../../sys/io/fileinput\">FileInput</a> </p>   <div class=\"indent\"> <p>An Input is an abstract reader. See other classes in the <code>haxe.io</code> package for several possible implementations.</p> </div>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"bigEndian\"><code> <a href=\"#bigEndian\">bigEndian</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Endianness (word byte order) used when reading numbers.</p> <p>If <code>true</code>, big-endian is used, otherwise <code>little-endian</code> is used.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Close the input source.</p> <p>Behaviour while reading after calling this method is unspecified.</p> \n<h3 id=\"read\"><code><a href=\"#read\">read</a> (nbytes:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n<h3>Read and return <code>nbytes</code> bytes.</h3> \n<h3 id=\"readAll\"><code><a href=\"#readAll\">readAll</a> (?bufsize:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n<p>Read and return all available data.</p> <h3>The <code>bufsize</code> optional argument specifies the size of chunks by which data is read. Its default value is target-specific.</h3> \n<h3 id=\"readByte\"><code><a href=\"#readByte\">readByte</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read and return one byte.</p> \n<h3 id=\"readBytes\"><code><a href=\"#readBytes\">readBytes</a> (s:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read <code>len</code> bytes and write them into <code>s</code> to the position specified by <code>pos</code>.</p> <h3>Returns the actual length of read data that can be smaller than <code>len</code>.</h3> <h3>See <code>readFullBytes</code> that tries to read the exact amount of specified bytes.</h3> \n<h3 id=\"readDouble\"><code><a href=\"#readDouble\">readDouble</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n<p>Read a 64-bit double-precision floating point number.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readFloat\"><code><a href=\"#readFloat\">readFloat</a> ():<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n<p>Read a 32-bit floating point number.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readFullBytes\"><code><a href=\"#readFullBytes\">readFullBytes</a> (s:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Read <code>len</code> bytes and write them into <code>s</code> to the position specified by <code>pos</code>.</p> <p>Unlike <code>readBytes</code>, this method tries to read the exact <code>len</code> amount of bytes.</p> \n<h3 id=\"readInt16\"><code><a href=\"#readInt16\">readInt16</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 16-bit signed integer.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readInt24\"><code><a href=\"#readInt24\">readInt24</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 24-bit signed integer.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readInt32\"><code><a href=\"#readInt32\">readInt32</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 32-bit signed integer.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readInt8\"><code><a href=\"#readInt8\">readInt8</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 8-bit signed integer.</p> \n<h3 id=\"readLine\"><code><a href=\"#readLine\">readLine</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Read a line of text separated by CR and/or LF bytes.</p> <p>The CR/LF characters are not included in the resulting string.</p> \n<h3 id=\"readString\"><code><a href=\"#readString\">readString</a> (len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Read and <code>len</code> bytes as a string.</h3> \n<h3 id=\"readUInt16\"><code><a href=\"#readUInt16\">readUInt16</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 16-bit unsigned integer.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readUInt24\"><code><a href=\"#readUInt24\">readUInt24</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read a 24-bit unsigned integer.</p> <h3>Endianness is specified by the <code>bigEndian</code> property.</h3> \n<h3 id=\"readUntil\"><code><a href=\"#readUntil\">readUntil</a> (end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Read a string until a character code specified by <code>end</code> is occurred.</h3> <p>The final character is not included in the resulting string.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Input.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Input.html</a>\n  </p>\n</div>\n","sys/db/manager":"<h1> class Manager&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>Record Manager : the persistent object database manager. See the tutorial on Haxe website to learn how to use Record.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (classval:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"../../class\">Class</a>&lt;<span class=\"type\">T</span>&gt;)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"all\"><code><a href=\"#all\">all</a> (?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n \n<h3 id=\"count\"><code><a href=\"#count\">count</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p class=\"availability\">Available on cpp, neko, php</p>\n \n<h3 id=\"count\"><code><a href=\"#count\">count</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"dbClass\"><code><a href=\"#dbClass\">dbClass</a> ():<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"../../class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;</code></h3>\n \n<h3 id=\"dbInfos\"><code><a href=\"#dbInfos\">dbInfos</a> ():<a class=\"type\" title=\"\" href=\"recordinfos\">RecordInfos</a></code></h3>\n \n<h3 id=\"delete\"><code><a href=\"#delete\">delete</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on cpp, neko, php</p>\n \n<h3 id=\"delete\"><code><a href=\"#delete\">delete</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"dynamicSearch\"><code><a href=\"#dynamicSearch\">dynamicSearch</a> (x:{}, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n \n<h3 id=\"forceUpdate\"><code><a href=\"#forceUpdate\">forceUpdate</a> (o:<span class=\"type\">T</span>, field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Remove the cached value for the given Object field : this will ensure that the value is updated when calling .update(). This is necessary if you are modifying binary data in-place since the cache will be modified as well.</p> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (id:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<span class=\"type\">T</span> </code></h3>\n<p class=\"availability\">Available on cpp, neko, php</p>\n \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (id:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"search\"><code><a href=\"#search\">search</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, neko, php</p>\n \n<h3 id=\"search\"><code><a href=\"#search\">search</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"select\"><code><a href=\"#select\">select</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<span class=\"type\">T</span> </code></h3>\n<p class=\"availability\">Available on cpp, neko, php</p>\n \n<h3 id=\"select\"><code><a href=\"#select\">select</a> (cond:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?options:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"unsafeCount\"><code><a href=\"#unsafeCount\">unsafeCount</a> (sql:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"unsafeDelete\"><code><a href=\"#unsafeDelete\">unsafeDelete</a> (sql:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"unsafeGet\"><code><a href=\"#unsafeGet\">unsafeGet</a> (id:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<span class=\"type\">T</span> </code></h3>\n \n<h3 id=\"unsafeGetId\"><code><a href=\"#unsafeGetId\">unsafeGetId</a> (o:<span class=\"type\">T</span>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"unsafeGetWithKeys\"><code><a href=\"#unsafeGetWithKeys\">unsafeGetWithKeys</a> (keys:{}, ?lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<span class=\"type\">T</span> </code></h3>\n \n<h3 id=\"unsafeObject\"><code><a href=\"#unsafeObject\">unsafeObject</a> (sql:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<span class=\"type\">T</span> </code></h3>\n \n<h3 id=\"unsafeObjects\"><code><a href=\"#unsafeObjects\">unsafeObjects</a> (sql:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"cnx\"><code><span class=\"label\">static</span> <a href=\"#cnx\">cnx</a>:<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n \n<h3 id=\"lockMode\"><code><span class=\"label\">static</span> <a href=\"#lockMode\">lockMode</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"cleanup\"><code><span class=\"label\">static</span> <a href=\"#cleanup\">cleanup</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"initialize\"><code><span class=\"label\">static</span> <a href=\"#initialize\">initialize</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"nullCompare\"><code><span class=\"label\">static</span> <a href=\"#nullCompare\">nullCompare</a> (a:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, b:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, eq:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"quoteAny\"><code><span class=\"label\">static</span> <a href=\"#quoteAny\">quoteAny</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"quoteList\"><code><span class=\"label\">static</span> <a href=\"#quoteList\">quoteList</a> (v:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, it:<a class=\"type\" title=\"An Iterable is a data structure which has an iterator() method.\" href=\"../../iterable\">Iterable</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Manager.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Manager.html</a>\n  </p>\n</div>\n","sys/db/recordinfos":"<h1>typedef RecordInfos </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"relations\"><code> <a href=\"#relations\">relations</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"recordrelation\">RecordRelation</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"key\"><code> <a href=\"#key\">key</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"indexes\"><code> <a href=\"#indexes\">indexes</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{unique:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, keys:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"hfields\"><code> <a href=\"#hfields\">hfields</a>:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"recordfield\">RecordField</a>&gt;</code></h3>\n \n<h3 id=\"fields\"><code> <a href=\"#fields\">fields</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"recordfield\">RecordField</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/RecordInfos.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/RecordInfos.html</a>\n  </p>\n</div>\n","sys/db/recordrelation":"<h1>typedef RecordRelation </h1>\n<p>package sys.db</p> \n<p>defined in sys.db.RecordInfos</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"prop\"><code> <a href=\"#prop\">prop</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"lock\"><code> <a href=\"#lock\">lock</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"key\"><code> <a href=\"#key\">key</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"isNull\"><code> <a href=\"#isNull\">isNull</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"cascade\"><code> <a href=\"#cascade\">cascade</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/RecordRelation.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/RecordRelation.html</a>\n  </p>\n</div>\n","sys/db/recordtype":"<h1>enum RecordType </h1>\n<p>package sys.db</p>\n\n<p>defined in sys.db.RecordInfos</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"DId\"><code>DId        </code></h3>\n <h3 id=\"DInt\"><code>DInt        </code></h3>\n <h3 id=\"DUId\"><code>DUId        </code></h3>\n <h3 id=\"DUInt\"><code>DUInt        </code></h3>\n <h3 id=\"DBigId\"><code>DBigId        </code></h3>\n <h3 id=\"DBigInt\"><code>DBigInt        </code></h3>\n <h3 id=\"DSingle\"><code>DSingle        </code></h3>\n <h3 id=\"DFloat\"><code>DFloat        </code></h3>\n <h3 id=\"DBool\"><code>DBool        </code></h3>\n <h3 id=\"DString\"><code>DString                    (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n <h3 id=\"DDate\"><code>DDate        </code></h3>\n <h3 id=\"DDateTime\"><code>DDateTime        </code></h3>\n <h3 id=\"DTimeStamp\"><code>DTimeStamp        </code></h3>\n <h3 id=\"DTinyText\"><code>DTinyText        </code></h3>\n <h3 id=\"DSmallText\"><code>DSmallText        </code></h3>\n <h3 id=\"DText\"><code>DText        </code></h3>\n <h3 id=\"DSmallBinary\"><code>DSmallBinary        </code></h3>\n <h3 id=\"DLongBinary\"><code>DLongBinary        </code></h3>\n <h3 id=\"DBinary\"><code>DBinary        </code></h3>\n <h3 id=\"DBytes\"><code>DBytes                    (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n <h3 id=\"DEncoded\"><code>DEncoded        </code></h3>\n <h3 id=\"DSerialized\"><code>DSerialized        </code></h3>\n <h3 id=\"DNekoSerialized\"><code>DNekoSerialized        </code></h3>\n <h3 id=\"DFlags\"><code>DFlags                    (flags:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, autoSize:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"DTinyInt\"><code>DTinyInt        </code></h3>\n <h3 id=\"DTinyUInt\"><code>DTinyUInt        </code></h3>\n <h3 id=\"DSmallInt\"><code>DSmallInt        </code></h3>\n <h3 id=\"DSmallUInt\"><code>DSmallUInt        </code></h3>\n <h3 id=\"DMediumInt\"><code>DMediumInt        </code></h3>\n <h3 id=\"DMediumUInt\"><code>DMediumUInt        </code></h3>\n <h3 id=\"DData\"><code>DData        </code></h3>\n <h3 id=\"DEnum\"><code>DEnum                    (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"DInterval\"><code>DInterval        </code></h3>\n <h3 id=\"DNull\"><code>DNull        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/RecordType.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/RecordType.html</a>\n  </p>\n</div>\n","sys/db/resultset":"<h1> interface ResultSet </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, java, macro, neko, php</p>     <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"nfields\"><code> <span class=\"label\">read only</span> <a href=\"#nfields\">nfields</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"getFieldsNames\"><code><a href=\"#getFieldsNames\">getFieldsNames</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;&gt;</code></h3>\n \n<h3 id=\"getFloatResult\"><code><a href=\"#getFloatResult\">getFloatResult</a> (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"getIntResult\"><code><a href=\"#getIntResult\">getIntResult</a> (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getResult\"><code><a href=\"#getResult\">getResult</a> (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"get_length\"><code><a href=\"#get_length\">get_length</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"get_nfields\"><code><a href=\"#get_nfields\">get_nfields</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"hasNext\"><code><a href=\"#hasNext\">hasNext</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"next\"><code><a href=\"#next\">next</a> ():<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"results\"><code><a href=\"#results\">results</a> ():<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/ResultSet.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/ResultSet.html</a>\n  </p>\n</div>\n","sys/db/sbigid":"<h1>typedef SBigId </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>big int with auto increment</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SBigId.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SBigId.html</a>\n  </p>\n</div>\n","sys/db/sbigint":"<h1>typedef SBigInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SBigInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SBigInt.html</a>\n  </p>\n</div>\n","sys/db/sbinary":"<h1>typedef SBinary </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>MediumBlob type (up to 24MB)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SBinary.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SBinary.html</a>\n  </p>\n</div>\n","sys/db/recordmacros":"<h1> class RecordMacros </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"error\"><code><span class=\"label\">dynamic</span> <a href=\"#error\">error</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"follow\"><code><span class=\"label\">dynamic</span> <a href=\"#follow\">follow</a> (t:<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a>, ?once:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a></code></h3>\n \n<h3 id=\"getManager\"><code><span class=\"label\">dynamic</span> <a href=\"#getManager\">getManager</a> (t:<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a>, p:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>):<a class=\"type\" title=\"\" href=\"recordmacros\">RecordMacros</a></code></h3>\n \n<h3 id=\"resolveType\"><code><span class=\"label\">dynamic</span> <a href=\"#resolveType\">resolveType</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?module:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a></code></h3>\n \n<h3 id=\"typeof\"><code><span class=\"label\">dynamic</span> <a href=\"#typeof\">typeof</a> (e:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>):<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"addRtti\"><code><span class=\"label\">static</span> <a href=\"#addRtti\">addRtti</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"../../haxe/macro/field\">Field</a>&gt;</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"getInfos\"><code><span class=\"label\">static</span> <a href=\"#getInfos\">getInfos</a> (t:<a class=\"type\" title=\"\" href=\"../../haxe/macro/type\">Type</a>):<a class=\"type\" title=\"\" href=\"recordmacros\">RecordMacros</a></code></h3>\n \n<h3 id=\"macroBuild\"><code><span class=\"label\">static</span> <a href=\"#macroBuild\">macroBuild</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"../../haxe/macro/field\">Field</a>&gt;</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"macroCount\"><code><span class=\"label\">static</span> <a href=\"#macroCount\">macroCount</a> (em:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, econd:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>):{pos:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>, expr:<a class=\"type\" title=\"\" href=\"../../haxe/macro/exprdef\">ExprDef</a>}</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"macroDelete\"><code><span class=\"label\">static</span> <a href=\"#macroDelete\">macroDelete</a> (em:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, econd:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, eopt:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>):{pos:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>, expr:<a class=\"type\" title=\"\" href=\"../../haxe/macro/exprdef\">ExprDef</a>}</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"macroGet\"><code><span class=\"label\">static</span> <a href=\"#macroGet\">macroGet</a> (em:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, econd:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, elock:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>):{pos:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>, expr:<a class=\"type\" title=\"\" href=\"../../haxe/macro/exprdef\">ExprDef</a>}</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"macroSearch\"><code><span class=\"label\">static</span> <a href=\"#macroSearch\">macroSearch</a> (em:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, econd:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, eopt:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, elock:<a class=\"type\" title=\"\" href=\"../../haxe/macro/expr\">Expr</a>, ?single:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):{pos:<a class=\"type\" title=\"\" href=\"../../haxe/macro/position\">Position</a>, expr:<a class=\"type\" title=\"\" href=\"../../haxe/macro/exprdef\">ExprDef</a>}</code></h3>\n<p class=\"availability\">Available on macro</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/RecordMacros.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/RecordMacros.html</a>\n  </p>\n</div>\n","sys/db/sbool":"<h1>typedef SBool </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>use tinyint(1) to distinguish with int</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SBool.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SBool.html</a>\n  </p>\n</div>\n","sys/db/sbytes":"<h1>typedef SBytes&lt;<span class=\"type\">Const</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>same as binary(n)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SBytes.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SBytes.html</a>\n  </p>\n</div>\n","sys/db/sdata":"<h1>typedef SData&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>allow to store any value in serialized form</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SData.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SData.html</a>\n  </p>\n</div>\n","sys/db/sdate":"<h1>typedef SDate </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../../date\">Date</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>date only, use SDateTime for date+time</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SDate.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SDate.html</a>\n  </p>\n</div>\n","sys/db/sdatetime":"<h1>typedef SDateTime </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../../date\">Date</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>mysql DateTime</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SDateTime.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SDateTime.html</a>\n  </p>\n</div>\n","sys/db/sencoded":"<h1>typedef SEncoded </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>specify that the integer use custom encoding</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SEncoded.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SEncoded.html</a>\n  </p>\n</div>\n","sys/db/senum":"<h1>typedef SEnum&lt;<span class=\"type\">E</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">E</span>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>allow to store an enum value that does not have parameters as a simple int</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SEnum.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SEnum.html</a>\n  </p>\n</div>\n","sys/db/sflags":"<h1>typedef SFlags&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"A typed interface for bit flags.\" href=\"../../haxe/enumflags\">EnumFlags</a>&lt;<span class=\"type\">T</span>&gt;&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>a set of bitflags of different enum values</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SFlags.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SFlags.html</a>\n  </p>\n</div>\n","sys/db/smediumint":"<h1>typedef SMediumInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>three bytes signed [-8388608...8388607]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SMediumInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SMediumInt.html</a>\n  </p>\n</div>\n","sys/db/sid":"<h1>typedef SId </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>int with auto increment</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SId.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SId.html</a>\n  </p>\n</div>\n","sys/db/sint":"<h1>typedef SInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SInt.html</a>\n  </p>\n</div>\n","sys/db/sserialized":"<h1>typedef SSerialized </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>haxe Serialized string</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSerialized.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSerialized.html</a>\n  </p>\n</div>\n","sys/db/ssingle":"<h1>typedef SSingle </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>single precision float</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSingle.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSingle.html</a>\n  </p>\n</div>\n","sys/db/sfloat":"<h1>typedef SFloat </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>double precision float</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SFloat.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SFloat.html</a>\n  </p>\n</div>\n","sys/db/slongbinary":"<h1>typedef SLongBinary </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>LongBlob type (up to 4GB)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SLongBinary.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SLongBinary.html</a>\n  </p>\n</div>\n","sys/db/smediumuint":"<h1>typedef SMediumUInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>three bytes [0...16777215]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SMediumUInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SMediumUInt.html</a>\n  </p>\n</div>\n","sys/db/snekoserialized":"<h1>typedef SNekoSerialized </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>native neko serialized bytes</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SNekoSerialized.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SNekoSerialized.html</a>\n  </p>\n</div>\n","sys/db/snull":"<h1>typedef SNull&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>specify that this field is nullable</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SNull.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SNull.html</a>\n  </p>\n</div>\n","sys/db/sstring":"<h1>typedef SString&lt;<span class=\"type\">Const</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>same as varchar(n)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SString.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SString.html</a>\n  </p>\n</div>\n","sys/db/ssmallflags":"<h1>typedef SSmallFlags&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"sflags\">SFlags</a>&lt;<span class=\"type\">T</span>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>same as [SFlags] but will adapt the storage size to the number of flags</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSmallFlags.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSmallFlags.html</a>\n  </p>\n</div>\n","sys/db/stext":"<h1>typedef SText </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>MediumText (up to 24MB)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SText.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SText.html</a>\n  </p>\n</div>\n","sys/db/stimestamp":"<h1>typedef STimeStamp </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../../date\">Date</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>mysql Timestamp</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/STimeStamp.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/STimeStamp.html</a>\n  </p>\n</div>\n","sys/db/stinyint":"<h1>typedef STinyInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>one byte signed [-128...127]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/STinyInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/STinyInt.html</a>\n  </p>\n</div>\n","sys/db/ssmallbinary":"<h1>typedef SSmallBinary </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>Blob type (up to 64KB)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSmallBinary.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSmallBinary.html</a>\n  </p>\n</div>\n","sys/db/ssmallint":"<h1>typedef SSmallInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>two bytes signed [-32768...32767]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSmallInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSmallInt.html</a>\n  </p>\n</div>\n","sys/db/ssmalltext":"<h1>typedef SSmallText </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>Text (up to 64KB)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSmallText.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSmallText.html</a>\n  </p>\n</div>\n","sys/db/ssmalluint":"<h1>typedef SSmallUInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>two bytes [0...65535]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SSmallUInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SSmallUInt.html</a>\n  </p>\n</div>\n","sys/db/stinytext":"<h1>typedef STinyText </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>TinyText (up to 255 bytes)</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/STinyText.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/STinyText.html</a>\n  </p>\n</div>\n","haxe/int64":"<h1>abstract Int64(<span class=\"type\">__Int64</span>) </h1>\n<p>package haxe</p> <p> from <span class=\"type\">__Int64</span> to <span class=\"type\">__Int64</span> </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>A cross-platform signed 64-bit integer. Int64 instances can be created from two 32-bit words using <code><a href=\"int64#make\">Int64.make</a>()</code>.</p> </div> <h2 class=\"section\">Fields</h2>  \n<h3 id=\"high\"><code> <span class=\"label\">read only</span> <a href=\"#high\">high</a>:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n \n<h3 id=\"low\"><code> <span class=\"label\">read only</span> <a href=\"#low\">low</a>:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"copy\"><code><span class=\"label\">inline</span> <a href=\"#copy\">copy</a> ():<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<h3>Makes a copy of <code>this</code> Int64.</h3> \n<h3 id=\"get_high\"><code><span class=\"label\">inline</span> <a href=\"#get_high\">get_high</a> ():<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n<p class=\"availability\">Available on cs, java</p>\n \n<h3 id=\"get_low\"><code><span class=\"label\">inline</span> <a href=\"#get_low\">get_low</a> ():<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n<p class=\"availability\">Available on cs, java</p>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"add\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#add\">add</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the sum of <code>a</code> and <code>b</code>.</p> \n<h3 id=\"and\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#and\">and</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the bitwise AND of <code>a</code> and <code>b</code>.</p> \n<h3 id=\"compare\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#compare\">compare</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Compares <code>a</code> and <code>b</code> in signed mode. Returns a negative value if <code>a &lt; b</code>, positive if <code>a &gt; b</code>, or 0 if <code>a == b</code>.</p> \n<h3 id=\"div\"><code><span class=\"label\">static</span> <a href=\"#div\">div</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the quotient of <code>a</code> divided by <code>b</code>.</p> \n<h3 id=\"divMod\"><code><span class=\"label\">static</span> <a href=\"#divMod\">divMod</a> (dividend:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, divisor:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):{quotient:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, modulus:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>}</code></h3>\n<p>Performs signed integer divison of <code>dividend</code> by <code>divisor</code>. Returns <code>{ quotient : <a href=\"int64\">Int64</a>, modulus : <a href=\"int64\">Int64</a> }</code>.</p> \n<h3 id=\"eq\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#eq\">eq</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Returns <code>true</code> if <code>a</code> is equal to <code>b</code>.</p> \n<h3 id=\"getHigh\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getHigh\">getHigh</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n<h3>Returns the high 32-bit word of <code>x</code>.</h3> \n<h3 id=\"getLow\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#getLow\">getLow</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a></code></h3>\n<h3>Returns the low 32-bit word of <code>x</code>.</h3> \n<h3 id=\"is\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#is\">is</a> (val:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Returns whether the value <code>val</code> is of type <code><a href=\"int64\">haxe.Int64</a></code></p> \n<h3 id=\"isNeg\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#isNeg\">isNeg</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Returns <code>true</code> if <code>x</code> is less than zero.</p> \n<h3 id=\"isZero\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#isZero\">isZero</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Returns <code>true</code> if <code>x</code> is exactly zero.</p> \n<h3 id=\"make\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#make\">make</a> (high:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a>, low:<a class=\"type\" title=\"Int32 provides a 32-bit integer with consistent overflow behavior across all platforms.\" href=\"int32\">Int32</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Construct an Int64 from two 32-bit words <code>high</code> and <code>low</code>.</p> \n<h3 id=\"mod\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#mod\">mod</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the modulus of <code>a</code> divided by <code>b</code>.</p> \n<h3 id=\"mul\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#mul\">mul</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the product of <code>a</code> and <code>b</code>.</p> \n<h3 id=\"neg\"><code><span class=\"label\">static</span> <a href=\"#neg\">neg</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<h3>Returns the negative of <code>x</code>.</h3> \n<h3 id=\"neq\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#neq\">neq</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../bool\">Bool</a></code></h3>\n<p>Returns <code>true</code> if <code>a</code> is not equal to <code>b</code>.</p> \n<h3 id=\"ofInt\"><code><span class=\"label\">static</span> <a href=\"#ofInt\">ofInt</a> (x:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns an Int64 with the value of the Int <code>x</code>. <code>x</code> is sign-extended to fill 64 bits.</p> \n<h3 id=\"or\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#or\">or</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the bitwise OR of <code>a</code> and <code>b</code>.</p> \n<h3 id=\"shl\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#shl\">shl</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns <code>a</code> left-shifted by <code>b</code> bits.</p> \n<h3 id=\"shr\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#shr\">shr</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns <code>a</code> right-shifted by <code>b</code> bits in signed mode. <code>a</code> is sign-extended.</p> \n<h3 id=\"sub\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns <code>a</code> minus <code>b</code>.</p> \n<h3 id=\"toInt\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#toInt\">toInt</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Returns an Int with the value of the Int64 <code>x</code>. Throws an exception if <code>x</code> cannot be represented in 32 bits.</p> \n<h3 id=\"toStr\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#toStr\">toStr</a> (x:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../string\">String</a></code></h3>\n<p>Returns a signed decimal <code><a href=\"../string\">String</a></code> representation of <code>x</code>.</p> \n<h3 id=\"ucompare\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#ucompare\">ucompare</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a></code></h3>\n<p>Compares <code>a</code> and <code>b</code> in unsigned mode. Returns a negative value if <code>a &lt; b</code>, positive if <code>a &gt; b</code>, or 0 if <code>a == b</code>.</p> \n<h3 id=\"ushr\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#ushr\">ushr</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"The standard Int type.\" href=\"../int\">Int</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns <code>a</code> right-shifted by <code>b</code> bits in unsigned mode. <code>a</code> is padded with zeroes.</p> \n<h3 id=\"xor\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#xor\">xor</a> (a:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>, b:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"int64\">Int64</a></code></h3>\n<p>Returns the bitwise XOR of <code>a</code> and <code>b</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/Int64.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/Int64.html</a>\n  </p>\n</div>\n","sys/db/stinyuint":"<h1>typedef STinyUInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>one byte [0...255]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/STinyUInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/STinyUInt.html</a>\n  </p>\n</div>\n","sys/db/suid":"<h1>typedef SUId </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"indent\"> <p>int unsigned with auto increment</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SUId.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SUId.html</a>\n  </p>\n</div>\n","sys/db/suint":"<h1>typedef SUInt </h1>\n<p>package sys.db</p> <p> alias for <a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt; </p> \n<p>defined in sys.db.Types</p>\n<p class=\"availability\">Available on cpp, macro, neko, php</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/SUInt.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/SUInt.html</a>\n  </p>\n</div>\n","sys/db/sqlite":"<h1> class Sqlite </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, neko, php</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"open\"><code><span class=\"label\">static</span> <a href=\"#open\">open</a> (file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Sqlite.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Sqlite.html</a>\n  </p>\n</div>\n","sys/db/tablecreate":"<h1> class TableCreate </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> (manager:<a class=\"type\" title=\"Record Manager : the persistent object database manager.\" href=\"manager\">Manager</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?engine:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"exists\"><code><span class=\"label\">static</span> <a href=\"#exists\">exists</a> (manager:<a class=\"type\" title=\"Record Manager : the persistent object database manager.\" href=\"manager\">Manager</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"getTypeSQL\"><code><span class=\"label\">static</span> <a href=\"#getTypeSQL\">getTypeSQL</a> (t:<a class=\"type\" title=\"\" href=\"recordtype\">RecordType</a>, dbName:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/TableCreate.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/TableCreate.html</a>\n  </p>\n</div>\n","sys/db/transaction":"<h1> class Transaction </h1>\n<p>package sys.db</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"isDeadlock\"><code><span class=\"label\">static</span> <a href=\"#isDeadlock\">isDeadlock</a> (e:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"main\"><code><span class=\"label\">static</span> <a href=\"#main\">main</a> (cnx:<a class=\"type\" title=\"\" href=\"connection\">Connection</a>, mainFun:<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>, ?logError:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/db/Transaction.html\" class=\"_attribution-link\">http://api.haxe.org/sys/db/Transaction.html</a>\n  </p>\n</div>\n","sys/io/filehandle":"<h1>enum FileHandle </h1>\n<p>package sys.io</p>\n\n<p>defined in sys.io.File</p>\n<p class=\"availability\">Available on macro, neko, php</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/FileHandle.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/FileHandle.html</a>\n  </p>\n</div>\n","sys/io/fileinput":"<h1> class FileInput </h1>\n<p>package sys.io</p> <p> extends <a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../../haxe/io/input\">Input</a> </p> <p class=\"availability\">Available on cpp, macro, neko, php, python</p>   <div class=\"indent\"> <p>Use [sys.io.File.read] to create a [FileInput]</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (impl:<a class=\"type\" title=\"\" href=\"http://api.haxe.org/python/io/IFileInput.html\">IFileInput</a>)</code></h3>\n<p class=\"availability\">Available on python</p>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"eof\"><code><a href=\"#eof\">eof</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"seek\"><code><a href=\"#seek\">seek</a> (p:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, pos:<a class=\"type\" title=\"\" href=\"fileseek\">FileSeek</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"tell\"><code><a href=\"#tell\">tell</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/FileInput.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/FileInput.html</a>\n  </p>\n</div>\n","sys/io/fileoutput":"<h1> class FileOutput </h1>\n<p>package sys.io</p> <p> extends <a class=\"type\" title=\"An Output is an abstract write.\" href=\"../../haxe/io/output\">Output</a> </p> <p class=\"availability\">Available on cpp, macro, neko, php, python</p>   <div class=\"indent\"> <p>Use [sys.io.File.write] to create a [FileOutput]</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (impl:<a class=\"type\" title=\"\" href=\"http://api.haxe.org/python/io/IFileOutput.html\">IFileOutput</a>)</code></h3>\n<p class=\"availability\">Available on python</p>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"seek\"><code><a href=\"#seek\">seek</a> (p:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, pos:<a class=\"type\" title=\"\" href=\"fileseek\">FileSeek</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"tell\"><code><a href=\"#tell\">tell</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/FileOutput.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/FileOutput.html</a>\n  </p>\n</div>\n","sys/io/fileseek":"<h1>enum FileSeek </h1>\n<p>package sys.io</p>\n<p class=\"availability\">Available on cpp, cs, macro, neko, php, python</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"SeekBegin\"><code>SeekBegin        </code></h3>\n <h3 id=\"SeekCur\"><code>SeekCur        </code></h3>\n <h3 id=\"SeekEnd\"><code>SeekEnd        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/FileSeek.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/FileSeek.html</a>\n  </p>\n</div>\n","sys/io/process":"<h1> class Process </h1>\n<p>package sys.io</p> <p class=\"availability\">Available on cpp, cs, java, macro, neko, php</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (cmd:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"stderr\"><code> <span class=\"label\">read only</span> <a href=\"#stderr\">stderr</a>:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../../haxe/io/input\">Input</a></code></h3>\n \n<h3 id=\"stdin\"><code> <span class=\"label\">read only</span> <a href=\"#stdin\">stdin</a>:<a class=\"type\" title=\"An Output is an abstract write.\" href=\"../../haxe/io/output\">Output</a></code></h3>\n \n<h3 id=\"stdout\"><code> <span class=\"label\">read only</span> <a href=\"#stdout\">stdout</a>:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../../haxe/io/input\">Input</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"exitCode\"><code><a href=\"#exitCode\">exitCode</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getPid\"><code><a href=\"#getPid\">getPid</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"kill\"><code><a href=\"#kill\">kill</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/Process.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/Process.html</a>\n  </p>\n</div>\n","sys/net/address":"<h1> class Address </h1>\n<p>package sys.net</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>An address is used to represent a port on a given host ip. It is used by UdpSocket.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"host\"><code> <a href=\"#host\">host</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"port\"><code> <a href=\"#port\">port</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"clone\"><code><a href=\"#clone\">clone</a> ():<a class=\"type\" title=\"An address is used to represent a port on a given host ip.\" href=\"address\">Address</a></code></h3>\n \n<h3 id=\"compare\"><code><a href=\"#compare\">compare</a> (a:<a class=\"type\" title=\"An address is used to represent a port on a given host ip.\" href=\"address\">Address</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getHost\"><code><a href=\"#getHost\">getHost</a> ():<a class=\"type\" title=\"A given IP host name.\" href=\"host\">Host</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/net/Address.html\" class=\"_attribution-link\">http://api.haxe.org/sys/net/Address.html</a>\n  </p>\n</div>\n","sys/net/host":"<h1> class Host </h1>\n<p>package sys.net</p> <p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>   <div class=\"indent\"> <p>A given IP host name.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)</code></h3>\n<p>Creates a new Host : the name can be an IP in the form \"127.0.0.1\" or an host name such as \"google.com\", in which case the corresponding IP address is resolved using DNS. An exception occur if the host name could not be found.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"hostEntry\"><code> <span class=\"label\">read only</span> <a href=\"#hostEntry\">hostEntry</a>:<a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/system/net/IPHostEntry.html\">IPHostEntry</a></code></h3>\n<p class=\"availability\">Available on cs</p>\n \n<h3 id=\"ip\"><code> <span class=\"label\">read only</span> <a href=\"#ip\">ip</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p class=\"availability\">Available on cpp, java, macro, neko, php, python</p>\n<p>The actual IP corresponding to the host.</p> \n<h3 id=\"ip\"><code> <span class=\"label\">read only</span> <a href=\"#ip\">ip</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p class=\"availability\">Available on cs</p>\n<p>The actual IP corresponding to the host.</p> \n<h3 id=\"ipAddress\"><code> <span class=\"label\">read only</span> <a href=\"#ipAddress\">ipAddress</a>:<a class=\"type\" title=\"\" href=\"http://api.haxe.org/cs/system/net/IPAddress.html\">IPAddress</a></code></h3>\n<p class=\"availability\">Available on cs</p>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"reverse\"><code><a href=\"#reverse\">reverse</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Perform a reverse-DNS query to resolve a host name from an IP.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns the IP representation of the host</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"localhost\"><code><span class=\"label\">static</span> <a href=\"#localhost\">localhost</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns the local computer host name</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/net/Host.html\" class=\"_attribution-link\">http://api.haxe.org/sys/net/Host.html</a>\n  </p>\n</div>\n","sys/net/udpsocket":"<h1> class UdpSocket </h1>\n<p>package sys.net</p> <p> extends <a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a> </p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>A UDP socket class</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"readFrom\"><code><a href=\"#readFrom\">readFrom</a> (buf:<a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, addr:<a class=\"type\" title=\"An address is used to represent a port on a given host ip.\" href=\"address\">Address</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Reads data from any incoming address and store the receiver address into the address parameter.</p> \n<h3 id=\"sendTo\"><code><a href=\"#sendTo\">sendTo</a> (buf:<a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, addr:<a class=\"type\" title=\"An address is used to represent a port on a given host ip.\" href=\"address\">Address</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Sends data to the specified target host/port address.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/net/UdpSocket.html\" class=\"_attribution-link\">http://api.haxe.org/sys/net/UdpSocket.html</a>\n  </p>\n</div>\n","haxe/ds/unsafestringmap":"<h1> class UnsafeStringMap&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <span class=\"type\">T</span>&gt; </p> <p class=\"availability\">Available on flash</p>   <div class=\"indent\"> <p>This is similar to <code><a href=\"stringmap\">StringMap</a></code> excepts that it does not sanitize the keys. As a result, it will be faster to access the map for reading, but it might fail with some reserved keys such as <code>constructor</code> or <code>prototype</code>.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><span class=\"label\">inline</span> <a href=\"#exists\">exists</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, value:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/UnsafeStringMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/UnsafeStringMap.html</a>\n  </p>\n</div>\n","haxe/ds/weakmap":"<h1> class WeakMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe.ds</p> <p> implements <a class=\"type\" title=\"\" href=\"../imap\">IMap</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>WeakMap allows mapping of object keys to arbitrary values.</p> <p>The keys are considered to be weak references on static targets.</p> <p>See <code><a href=\"../../map\">Map</a></code> for documentation details.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new WeakMap.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#exists\">Map.exists</a></code>\n</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>See <code><a href=\"../../map#get\">Map.get</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#iterator\">Map.iterator</a></code>\n</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<p class=\"availability\">Available on java</p>\n<p>Returns an iterator of all values in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#keys\">Map.keys</a></code>\n</h3> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<p class=\"availability\">Available on java</p>\n<p>Returns an iterator of all keys in the hashtable. Implementation detail: Do not set() any new value while iterating, as it may cause a resize, which will break iteration</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>See <code><a href=\"../../map#remove\">Map.remove</a></code>\n</h3> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (key:<span class=\"type\">K</span>, value:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>See <code><a href=\"../../map#set\">Map.set</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, js, macro, neko, php, python</p>\n<h3>See <code><a href=\"../../map#toString\">Map.toString</a></code>\n</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on java</p>\n<p>Returns an displayable representation of the hashtable content.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/WeakMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/WeakMap.html</a>\n  </p>\n</div>\n","haxe/ds/balancedtree":"<h1> class BalancedTree&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe.ds</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"EnumValueMap allows mapping of enum value keys to arbitrary values.\" href=\"enumvaluemap\">EnumValueMap</a> </p>   <div class=\"indent\"> <p>BalancedTree allows key-value mapping with arbitrary keys, as long as they can be ordered. By default, <code><a href=\"../../reflect#compare\">Reflect.compare</a></code> is used in the <code>compare</code> method, which can be overridden in subclasses.</p> <p>Operations have a logarithmic average and worst-case cost.</p> <p>Iteration over keys and values, using <code>keys</code> and <code>iterator</code> respectively, are in-order.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new BalancedTree, which is initially empty.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><a href=\"#exists\">exists</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>Tells if <code>key</code> is bound to a value.</h3> <h3>This method returns true even if <code>key</code> is bound to null.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>Returns the value <code>key</code> is bound to.</h3> <p>If <code>key</code> is not bound to any value, <code><a href=\"../../null\">null</a></code> is returned.</p> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n<h3>Iterates over the bound values of <code>this</code> BalancedTree.</h3> <p>This operation is performed in-order.</p> \n<h3 id=\"keys\"><code><a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n<h3>Iterates over the keys of <code>this</code> BalancedTree.</h3> <p>This operation is performed in-order.</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (key:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>Removes the current binding of <code>key</code>.</h3> <p>If <code>key</code> has no binding, <code>this</code> BalancedTree is unchanged and false is returned.</p> <h3>Otherwise the binding of <code>key</code> is removed and true is returned.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"set\"><code><a href=\"#set\">set</a> (key:<span class=\"type\">K</span>, value:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Binds <code>key</code> to <code>value</code>.</p> <h3>If <code>key</code> is already bound to a value, that binding disappears.</h3> <h3>If <code>key</code> is null, the result is unspecified.</h3> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/BalancedTree.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/BalancedTree.html</a>\n  </p>\n</div>\n","sys/io/file":"<h1> class File </h1>\n<p>package sys.io</p> <p class=\"availability\">Available on cpp, macro, neko, php</p>   <div class=\"indent\"> <p>API for reading and writing to files.</p> <p>See <code><a href=\"../filesystem\">sys.FileSystem</a></code> for the complementary file system API.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"append\"><code><span class=\"label\">static</span> <a href=\"#append\">append</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, binary:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"Use [sys.\" href=\"fileoutput\">FileOutput</a></code></h3>\n<h3>Similar to <code><a href=\"file#write\">sys.io.File.write</a></code>, but appends to the file if it exists instead of overwriting its contents.</h3> \n<h3 id=\"copy\"><code><span class=\"label\">static</span> <a href=\"#copy\">copy</a> (srcPath:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, dstPath:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Copies the contents of the file specified by <code>srcPath</code> to the file specified by <code>dstPath</code>.</p> <p>If the <code>srcPath</code> does not exist or cannot be read, or if the <code>dstPath</code> file cannot be written to, an exception is thrown.</p> <h3>If the file at <code>dstPath</code> exists, its contents are overwritten.</h3> <p>If <code>srcPath</code> or <code>dstPath</code> are null, the result is unspecified.</p> \n<h3 id=\"getBytes\"><code><span class=\"label\">static</span> <a href=\"#getBytes\">getBytes</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a></code></h3>\n<h3>Retrieves the binary content of the file specified by <code>path</code>.</h3> <p>If the file does not exist or can not be read, an exception is thrown.</p> <h3>\n<code><a href=\"../filesystem#exists\">sys.FileSystem.exists</a></code> can be used to check for existence.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"getContent\"><code><span class=\"label\">static</span> <a href=\"#getContent\">getContent</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Retrieves the content of the file specified by <code>path</code> as a String.</h3> <p>If the file does not exist or can not be read, an exception is thrown.</p> <h3>\n<code><a href=\"../filesystem#exists\">sys.FileSystem.exists</a></code> can be used to check for existence.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"read\"><code><span class=\"label\">static</span> <a href=\"#read\">read</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, binary:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"Use [sys.\" href=\"fileinput\">FileInput</a></code></h3>\n<p>Returns an <code><a href=\"fileinput\">FileInput</a></code> handle to the file specified by <code>path</code>.</p> <h3>If <code>binary</code> is true, the file is opened in binary mode. Otherwise it is opened in non-binary mode.</h3> <p>If the file does not exist or can not be read, an exception is thrown.</p> <h3>Operations on the returned <code><a href=\"fileinput\">FileInput</a></code> handle read on the opened file.</h3> <h3>File handles should be closed via <code><a href=\"fileinput#close\">FileInput.close</a></code> once the operation is complete.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"saveBytes\"><code><span class=\"label\">static</span> <a href=\"#saveBytes\">saveBytes</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, bytes:<a class=\"type\" title=\"\" href=\"../../haxe/io/bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Stores <code>bytes</code> in the file specified by <code>path</code> in binary mode.</p> <p>If the file cannot be written to, an exception is thrown.</p> <p>If <code>path</code> or <code>bytes</code> are null, the result is unspecified.</p> \n<h3 id=\"saveContent\"><code><span class=\"label\">static</span> <a href=\"#saveContent\">saveContent</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, content:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Stores <code>content</code> in the file specified by <code>path</code>.</p> <p>If the file cannot be written to, an exception is thrown.</p> <p>If <code>path</code> or <code>content</code> are null, the result is unspecified.</p> \n<h3 id=\"write\"><code><span class=\"label\">static</span> <a href=\"#write\">write</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, binary:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"Use [sys.\" href=\"fileoutput\">FileOutput</a></code></h3>\n<p>Returns an <code><a href=\"fileoutput\">FileOutput</a></code> handle to the file specified by <code>path</code>.</p> <h3>If <code>binary</code> is true, the file is opened in binary mode. Otherwise it is opened in non-binary mode.</h3> <p>If the file cannot be written to, an exception is thrown.</p> <h3>Operations on the returned <code><a href=\"fileoutput\">FileOutput</a></code> handle write to the opened file. If the file existed, its previous content is overwritten.</h3> <h3>File handles should be closed via <code><a href=\"fileoutput#close\">FileOutput.close</a></code> once the operation is complete.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/io/File.html\" class=\"_attribution-link\">http://api.haxe.org/sys/io/File.html</a>\n  </p>\n</div>\n","haxe/crypto/adler32":"<h1> class Adler32 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Calculates the Adler32 of the given Bytes.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"equals\"><code><a href=\"#equals\">equals</a> (a:<a class=\"type\" title=\"Calculates the Adler32 of the given Bytes.\" href=\"adler32\">Adler32</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"get\"><code><a href=\"#get\">get</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"update\"><code><a href=\"#update\">update</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"read\"><code><span class=\"label\">static</span> <a href=\"#read\">read</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../io/input\">Input</a>):<a class=\"type\" title=\"Calculates the Adler32 of the given Bytes.\" href=\"adler32\">Adler32</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Adler32.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Adler32.html</a>\n  </p>\n</div>\n","haxe/crypto/base64":"<h1> class Base64 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Allows to encode/decode String and bytes using Base64 encoding.</p> </div>  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#BYTES\">BYTES</a>:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a><span> = haxe.io.Bytes.ofString(CHARS)</span> </code></h3>\n \n<h3 id=\"CHARS\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#CHARS\">CHARS</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a><span> = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\"</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"decode\"><code><span class=\"label\">static</span> <a href=\"#decode\">decode</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, complement:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (bytes:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, complement:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Base64.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Base64.html</a>\n  </p>\n</div>\n","haxe/crypto/basecode":"<h1> class BaseCode </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Allows to encode/decode String and bytes using a power of two base dictionnary.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (base:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"decodeBytes\"><code><a href=\"#decodeBytes\">decodeBytes</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n \n<h3 id=\"decodeString\"><code><a href=\"#decodeString\">decodeString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"encodeBytes\"><code><a href=\"#encodeBytes\">encodeBytes</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n \n<h3 id=\"encodeString\"><code><a href=\"#encodeString\">encodeString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"decode\"><code><span class=\"label\">static</span> <a href=\"#decode\">decode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, base:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, base:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/BaseCode.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/BaseCode.html</a>\n  </p>\n</div>\n","haxe/crypto/crc32":"<h1> class Crc32 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Calculates the Crc32 of the given Bytes.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"byte\"><code><a href=\"#byte\">byte</a> (b:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"get\"><code><a href=\"#get\">get</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"update\"><code><a href=\"#update\">update</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (data:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Calculates the CRC32 of the given data bytes</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Crc32.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Crc32.html</a>\n  </p>\n</div>\n","haxe/crypto/hashmethod":"<h1>enum HashMethod </h1>\n<p>package haxe.crypto</p>\n\n<p>defined in haxe.crypto.Hmac</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Hash methods for Hmac calculation.</p> </div> <h2 class=\"section\">Values</h2>  <h3 id=\"MD5\"><code>MD5        </code></h3>\n <h3 id=\"SHA1\"><code>SHA1        </code></h3>\n <h3 id=\"SHA256\"><code>SHA256        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/HashMethod.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/HashMethod.html</a>\n  </p>\n</div>\n","haxe/crypto/sha1":"<h1> class Sha1 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Creates a Sha1 of a String.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Sha1.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Sha1.html</a>\n  </p>\n</div>\n","haxe/crypto/sha256":"<h1> class Sha256 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Creates a Sha256 of a String.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Sha256.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Sha256.html</a>\n  </p>\n</div>\n","haxe/ds/genericcell":"<h1> class GenericCell&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p> \n<p>defined in haxe.ds.GenericStack</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (elt:<span class=\"type\">T</span>, next:<a class=\"type\" title=\"\" href=\"genericcell\">GenericCell</a>&lt;<span class=\"type\">T</span>&gt;)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"elt\"><code> <a href=\"#elt\">elt</a>:<span class=\"type\">T</span> </code></h3>\n \n<h3 id=\"next\"><code> <a href=\"#next\">next</a>:<a class=\"type\" title=\"\" href=\"genericcell\">GenericCell</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/GenericCell.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/GenericCell.html</a>\n  </p>\n</div>\n","haxe/ds/hashmap":"<h1>abstract HashMap&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;(<span class=\"type\">HashMapData</span>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;) </h1>\n<p>package haxe.ds</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"exists\"><code><span class=\"label\">inline</span> <a href=\"#exists\">exists</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"iterator\"><code><span class=\"label\">inline</span> <a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"keys\"><code><span class=\"label\">inline</span> <a href=\"#keys\">keys</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">K</span>&gt;</code></h3>\n \n<h3 id=\"remove\"><code><span class=\"label\">inline</span> <a href=\"#remove\">remove</a> (k:<span class=\"type\">K</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (k:<span class=\"type\">K</span>, v:<span class=\"type\">V</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/HashMap.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/HashMap.html</a>\n  </p>\n</div>\n","haxe/crypto/hmac":"<h1> class Hmac </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Calculates a Hmac of the given Bytes using a HashMethod.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (hashMethod:<a class=\"type\" title=\"Hash methods for Hmac calculation.\" href=\"hashmethod\">HashMethod</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"make\"><code><a href=\"#make\">make</a> (key:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, msg:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Hmac.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Hmac.html</a>\n  </p>\n</div>\n","haxe/crypto/md5":"<h1> class Md5 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Creates a MD5 of a String.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Md5.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Md5.html</a>\n  </p>\n</div>\n","haxe/crypto/sha224":"<h1> class Sha224 </h1>\n<p>package haxe.crypto</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Creates a Sha224 of a String.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"encode\"><code><span class=\"label\">static</span> <a href=\"#encode\">encode</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/crypto/Sha224.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/crypto/Sha224.html</a>\n  </p>\n</div>\n","haxe/ds/either":"<h1>enum Either&lt;<span class=\"type\">L</span>, <span class=\"type\">R</span>&gt; </h1>\n<p>package haxe.ds</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>Either represents values which are either of type <code>L</code> (Left) or type <code>R</code> (Right).</p> </div> <h2 class=\"section\">Values</h2>  <h3 id=\"Left\"><code>Left                    (v:<span class=\"type\">L</span>)        </code></h3>\n <h3 id=\"Right\"><code>Right                    (v:<span class=\"type\">R</span>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/Either.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/Either.html</a>\n  </p>\n</div>\n","haxe/ds/listsort":"<h1> class ListSort </h1>\n<p>package haxe.ds</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>ListSort provides a stable implementation of merge sort through its <code>sort</code> method. It has a O(N.log(N)) complexity and does not require additional memory allocation</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"sort\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#sort\">sort</a>&lt;<span class=\"type\">T</span>&gt; (list:<span class=\"type\">T</span>, cmp:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<span class=\"type\">T</span> </code></h3>\n<p>Sorts List <code>lst</code> according to the comparison function <code>cmp</code>, where <code>cmp(x,y)</code> returns 0 if <code>x == y</code>, a positive Int if <code>x &gt; y</code> and a negative Int if <code>x &lt; y</code>.</p> <p>This operation modifies List <code>a</code> in place and returns its head once modified. The <code>prev</code> of the head is set to the tail of the sorted list.</p> <p>If <code>list</code> or <code>cmp</code> are null, the result is unspecified.</p> \n<h3 id=\"sortSingleLinked\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#sortSingleLinked\">sortSingleLinked</a>&lt;<span class=\"type\">T</span>&gt; (list:<span class=\"type\">T</span>, cmp:<span class=\"type\">T</span> ‑&gt; <span class=\"type\">T</span> ‑&gt; <a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<span class=\"type\">T</span> </code></h3>\n<p>Same as [sort] but on single linked list.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/ListSort.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/ListSort.html</a>\n  </p>\n</div>\n","haxe/ds/treenode":"<h1> class TreeNode&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt; </h1>\n<p>package haxe.ds</p> \n<p>defined in haxe.ds.BalancedTree</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (l:<a class=\"type\" title=\"\" href=\"treenode\">TreeNode</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;, k:<span class=\"type\">K</span>, v:<span class=\"type\">V</span>, r:<a class=\"type\" title=\"\" href=\"treenode\">TreeNode</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;, h:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = -1)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"key\"><code> <a href=\"#key\">key</a>:<span class=\"type\">K</span> </code></h3>\n \n<h3 id=\"left\"><code> <a href=\"#left\">left</a>:<a class=\"type\" title=\"\" href=\"treenode\">TreeNode</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"right\"><code> <a href=\"#right\">right</a>:<a class=\"type\" title=\"\" href=\"treenode\">TreeNode</a>&lt;<span class=\"type\">K</span>, <span class=\"type\">V</span>&gt;</code></h3>\n \n<h3 id=\"value\"><code> <a href=\"#value\">value</a>:<span class=\"type\">V</span> </code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get_height\"><code><span class=\"label\">inline</span> <a href=\"#get_height\">get_height</a> ():<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/TreeNode.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/TreeNode.html</a>\n  </p>\n</div>\n","haxe/ds/genericstack":"<h1> class GenericStack&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>A stack of elements.</p> <p>This class is generic, which means one type is generated for each type parameter T on static targets. For example:</p>\n<ul>\n<li>\n<code>new <a href=\"genericstack\">GenericStack</a>&lt;<a href=\"../../int\">Int</a>&gt;()</code> generates <code>GenericStack_Int</code>\n</li>\n<li>\n<code>new <a href=\"genericstack\">GenericStack</a>&lt;<a href=\"../../string\">String</a>&gt;()</code> generates <code>GenericStack_String</code>\n</li>\n</ul> <p>The generated name is an implementation detail and should not be relied upon.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new empty GenericStack.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"head\"><code> <a href=\"#head\">head</a>:<a class=\"type\" title=\"\" href=\"genericcell\">GenericCell</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><span class=\"label\">inline</span> <a href=\"#add\">add</a> (item:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Pushes element <code>item</code> onto the stack.</h3> \n<h3 id=\"first\"><code><span class=\"label\">inline</span> <a href=\"#first\">first</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns the topmost stack element without removing it.</p> <p>If the stack is empty, null is returned.</p> \n<h3 id=\"isEmpty\"><code><span class=\"label\">inline</span> <a href=\"#isEmpty\">isEmpty</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Tells if the stack is empty.</p> \n<h3 id=\"iterator\"><code><a href=\"#iterator\">iterator</a> ():<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Returns an iterator over the elements of <code>this</code> GenericStack.</h3> \n<h3 id=\"pop\"><code><span class=\"label\">inline</span> <a href=\"#pop\">pop</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Returns the topmost stack element and removes it.</p> <p>If the stack is empty, null is returned.</p> \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (v:<span class=\"type\">T</span>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Removes the first element which is equal to <code>v</code> according to the <code>==</code> operator.</p> <p>This method traverses the stack until it finds a matching element and unlinks it, returning true.</p> <p>If no matching element is found, false is returned.</p> \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns a String representation of <code>this</code> GenericStack.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/GenericStack.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/GenericStack.html</a>\n  </p>\n</div>\n","haxe/ds/option":"<h1>enum Option&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.ds</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An Option is a wrapper type which can either have a value (Some) or not a value (None).</p> </div> <h2 class=\"section\">Values</h2>  <h3 id=\"Some\"><code>Some                    (v:<span class=\"type\">T</span>)        </code></h3>\n <h3 id=\"None\"><code>None        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/Option.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/Option.html</a>\n  </p>\n</div>\n","haxe/extern/eithertype":"<h1>abstract EitherType&lt;<span class=\"type\">T1</span>, <span class=\"type\">T2</span>&gt;(<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>) </h1>\n<p>package haxe.extern</p> <p> from <span class=\"type\">T2</span> from <span class=\"type\">T1</span> to <span class=\"type\">T2</span> to <span class=\"type\">T1</span> </p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>An abstract type allowing values to be either of <code>T1</code> or <code>T2</code> type.</p> <pre><code>Supports implicit casts from/to either types.\n\nIt is useful for interfacing with external code on dynamic platforms\nsuch as JavaScript or Python.\n\nOtherwise, use of this type is discouraged.\n</code></pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/extern/EitherType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/extern/EitherType.html</a>\n  </p>\n</div>\n","haxe/extern/rest":"<h1>abstract Rest&lt;<span class=\"type\">T</span>&gt;(<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<span class=\"type\">T</span>&gt;) </h1>\n<p>package haxe.extern</p> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>A special abstract type that represents \"rest\" function argument.</p> <pre><code>Should be used as a type for the last argument of an extern method,\nrepresenting that arbitrary number of arguments of given type can be\npassed to that method.\n</code></pre> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/extern/Rest.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/extern/Rest.html</a>\n  </p>\n</div>\n","haxe/format/jsonparser":"<h1> class JsonParser </h1>\n<p>package haxe.format</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>An implementation of JSON parser in Haxe.</p> <p>This class is used by <code><a href=\"../json\">haxe.Json</a></code> when native JSON implementation is not available.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#parse\">parse</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<h3>Parses given JSON-encoded <code>str</code> and returns the resulting object.</h3> <p>JSON objects are parsed into anonymous structures and JSON arrays are parsed into Array<dynamic>.</dynamic></p> <h3>If given <code>str</code> is not valid JSON, an exception will be thrown.</h3> <h3>If <code>str</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/format/JsonParser.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/format/JsonParser.html</a>\n  </p>\n</div>\n","haxe/format/jsonprinter":"<h1> class JsonPrinter </h1>\n<p>package haxe.format</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>An implementation of JSON printer in Haxe.</p> <p>This class is used by <code><a href=\"../json\">haxe.Json</a></code> when native JSON implementation is not available.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"print\"><code><span class=\"label\">static</span> <a href=\"#print\">print</a> (o:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?replacer:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?space:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Encodes <code>o</code> value and returns the resulting JSON string.</h3> <p>If <code>replacer</code> is given and is not null, it is used to retrieve actual object to be encoded. The <code>replacer</code> function two parameters, the key and the value being encoded. Initial key value is an empty string.</p> <h3>If <code>space</code> is given and is not null, the result will be pretty-printed. Successive levels will be indented by this string.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/format/JsonPrinter.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/format/JsonPrinter.html</a>\n  </p>\n</div>\n","haxe/unit/testcase":"<h1> class TestCase </h1>\n<p>package haxe.unit</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"currentTest\"><code> <a href=\"#currentTest\">currentTest</a>:<a class=\"type\" title=\"\" href=\"teststatus\">TestStatus</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"assertEquals\"><code><a href=\"#assertEquals\">assertEquals</a>&lt;<span class=\"type\">T</span>&gt; (expected:<span class=\"type\">T</span>, actual:<span class=\"type\">T</span>, ?c:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"../posinfos\">PosInfos</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"assertFalse\"><code><a href=\"#assertFalse\">assertFalse</a> (b:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, ?c:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"../posinfos\">PosInfos</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"assertTrue\"><code><a href=\"#assertTrue\">assertTrue</a> (b:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, ?c:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"../posinfos\">PosInfos</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"print\"><code><a href=\"#print\">print</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setup\"><code><a href=\"#setup\">setup</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"tearDown\"><code><a href=\"#tearDown\">tearDown</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/unit/TestCase.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/unit/TestCase.html</a>\n  </p>\n</div>\n","haxe/unit/testresult":"<h1> class TestResult </h1>\n<p>package haxe.unit</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"success\"><code> <span class=\"label\">read only</span> <a href=\"#success\">success</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><a href=\"#add\">add</a> (t:<a class=\"type\" title=\"\" href=\"teststatus\">TestStatus</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/unit/TestResult.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/unit/TestResult.html</a>\n  </p>\n</div>\n","haxe/unit/testrunner":"<h1> class TestRunner </h1>\n<p>package haxe.unit</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"result\"><code> <span class=\"label\">read only</span> <a href=\"#result\">result</a>:<a class=\"type\" title=\"\" href=\"testresult\">TestResult</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><a href=\"#add\">add</a> (c:<a class=\"type\" title=\"\" href=\"testcase\">TestCase</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"run\"><code><a href=\"#run\">run</a> ():<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"print\"><code><span class=\"label\">static</span> <span class=\"label\">dynamic</span> <a href=\"#print\">print</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/unit/TestRunner.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/unit/TestRunner.html</a>\n  </p>\n</div>\n","haxe/unit/teststatus":"<h1> class TestStatus </h1>\n<p>package haxe.unit</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"backtrace\"><code> <a href=\"#backtrace\">backtrace</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"classname\"><code> <a href=\"#classname\">classname</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"done\"><code> <a href=\"#done\">done</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"error\"><code> <a href=\"#error\">error</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"method\"><code> <a href=\"#method\">method</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"posInfos\"><code> <a href=\"#posInfos\">posInfos</a>:<a class=\"type\" title=\"PosInfos is a magic type which can be used to generate position information into the output for debugging use.\" href=\"../posinfos\">PosInfos</a></code></h3>\n \n<h3 id=\"success\"><code> <a href=\"#success\">success</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/unit/TestStatus.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/unit/TestStatus.html</a>\n  </p>\n</div>\n","haxe/io/bytesbuffer":"<h1> class BytesBuffer </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>The length of the buffer in bytes.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"add\"><code><span class=\"label\">inline</span> <a href=\"#add\">add</a> (src:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addByte\"><code><span class=\"label\">inline</span> <a href=\"#addByte\">addByte</a> (byte:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addBytes\"><code><span class=\"label\">inline</span> <a href=\"#addBytes\">addBytes</a> (src:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addDouble\"><code><span class=\"label\">inline</span> <a href=\"#addDouble\">addDouble</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addFloat\"><code><span class=\"label\">inline</span> <a href=\"#addFloat\">addFloat</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addInt32\"><code><a href=\"#addInt32\">addInt32</a> (v:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addInt64\"><code><a href=\"#addInt64\">addInt64</a> (v:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"../int64\">Int64</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"addString\"><code><span class=\"label\">inline</span> <a href=\"#addString\">addString</a> (v:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"getBytes\"><code><a href=\"#getBytes\">getBytes</a> ():<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n<p>Returns either a copy or a reference of the current bytes. Once called, the buffer can no longer be used.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/BytesBuffer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/BytesBuffer.html</a>\n  </p>\n</div>\n","haxe/ds/vector":"<h1>abstract Vector&lt;<span class=\"type\">T</span>&gt;(<span class=\"type\">VectorData</span>&lt;<span class=\"type\">T</span>&gt;) </h1>\n<p>package haxe.ds</p> \n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>A Vector is a storage of fixed size. It can be faster than Array on some targets, and is never slower.</p> </div> <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n<h3>Creates a new Vector of length <code>length</code>.</h3> <p>Initially <code>this</code> Vector contains <code>length</code> neutral elements:</p>\n<ul>\n<li>always null on dynamic targets</li>\n<li>0, 0.0 or false for Int, Float and Bool respectively on static targets</li>\n<li>null for other types on static targets</li>\n</ul> <h3>If <code>length</code> is less than or equal to 0, the result is unspecified.</h3>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<h3>Returns the length of <code>this</code> Vector.</h3>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<span class=\"type\">T</span> </code></h3>\n<h3>Returns the value at index <code>index</code>.</h3> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, the result is unspecified.</p> \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, val:<span class=\"type\">T</span>):<span class=\"type\">T</span> </code></h3>\n<p>Sets the value at index <code>index</code> to <code>val</code>.</p> <p>If <code>index</code> is negative or exceeds <code>this.<a href=\"#length\">length</a></code>, the result is unspecified.</p> \n<h3 id=\"toArray\"><code><a href=\"#toArray\">toArray</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<p>Creates a new Array, copy the content from the Vector to it, and returns it.</p> \n<h3 id=\"toData\"><code><span class=\"label\">inline</span> <a href=\"#toData\">toData</a> ():<span class=\"type\">VectorData</span>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Extracts the data of <code>this</code> Vector.</h3> <p>This returns the internal representation type.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"blit\"><code><span class=\"label\">static</span> <a href=\"#blit\">blit</a>&lt;<span class=\"type\">T</span>&gt; (src:<a class=\"type\" title=\"A Vector is a storage of fixed size.\" href=\"vector\">Vector</a>&lt;<span class=\"type\">T</span>&gt;, srcPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, dest:<a class=\"type\" title=\"A Vector is a storage of fixed size.\" href=\"vector\">Vector</a>&lt;<span class=\"type\">T</span>&gt;, destPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Copies <code>length</code> of elements from <code>src</code> Vector, beginning at <code>srcPos</code> to <code>dest</code> Vector, beginning at <code>destPos</code></p> <p>The results are unspecified if <code>length</code> results in out-of-bounds access, or if <code>src</code> or <code>dest</code> are null</p> \n<h3 id=\"fromArrayCopy\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fromArrayCopy\">fromArrayCopy</a>&lt;<span class=\"type\">T</span>&gt; (array:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"A Vector is a storage of fixed size.\" href=\"vector\">Vector</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Creates a new Vector by copying the elements of <code>array</code>.</h3> <p>This always creates a copy, even on platforms where the internal representation is Array.</p> <h3>The elements are not copied and retain their identity, so <code>a[i] == <a href=\"vector#fromArrayCopy\">Vector.fromArrayCopy</a>(a).get(i)</code> is true for any valid i.</h3> <h3>If <code>array</code> is null, the result is unspecified.</h3> \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fromData\">fromData</a>&lt;<span class=\"type\">T</span>&gt; (data:<span class=\"type\">VectorData</span>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"A Vector is a storage of fixed size.\" href=\"vector\">Vector</a>&lt;<span class=\"type\">T</span>&gt;</code></h3>\n<h3>Initializes a new Vector from <code>data</code>.</h3> <h3>Since <code>data</code> is the internal representation of Vector, this is a no-op.</h3> <p>If <code>data</code> is null, the corresponding Vector is also <code><a href=\"../../null\">null</a></code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/ds/Vector.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/ds/Vector.html</a>\n  </p>\n</div>\n","haxe/io/arraybufferview":"<h1>abstract ArrayBufferView(<a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (size:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"buffer\"><code> <span class=\"label\">read only</span> <a href=\"#buffer\">buffer</a>:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n \n<h3 id=\"byteLength\"><code> <span class=\"label\">read only</span> <a href=\"#byteLength\">byteLength</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"byteOffset\"><code> <span class=\"label\">read only</span> <a href=\"#byteOffset\">byteOffset</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"EMULATED\"><code><span class=\"label\">static</span> <span class=\"label\">read only</span> <a href=\"#EMULATED\">EMULATED</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>On some platforms configurations (for instance JS with no TypedArray support as in IE8-), Haxe will try to emulate the array buffers API. However in that case memory sharing will not be supported : each typed array or will copy its own data set. This flag allows users to detect if we are doing such emulation. At the moment only JavaScript is concerned.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fromData\">fromData</a> (a:<a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a>):<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/ArrayBufferView.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/ArrayBufferView.html</a>\n  </p>\n</div>\n","haxe/io/arraybufferviewdata":"<h1>typedef ArrayBufferViewData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewimpl\">ArrayBufferViewImpl</a> </p> \n<p>defined in haxe.io.ArrayBufferView</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/ArrayBufferViewData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/ArrayBufferViewData.html</a>\n  </p>\n</div>\n","haxe/io/arraybufferviewimpl":"<h1> class ArrayBufferViewImpl </h1>\n<p>package haxe.io</p> \n<p>defined in haxe.io.ArrayBufferView</p>\n<p class=\"availability\">Available on cpp, cs, flash, java, macro, neko, php, python</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"byteLength\"><code> <a href=\"#byteLength\">byteLength</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"byteOffset\"><code> <a href=\"#byteOffset\">byteOffset</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"bytes\"><code> <a href=\"#bytes\">bytes</a>:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"sub\"><code><a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"arraybufferviewimpl\">ArrayBufferViewImpl</a></code></h3>\n \n<h3 id=\"subarray\"><code><a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"arraybufferviewimpl\">ArrayBufferViewImpl</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/ArrayBufferViewImpl.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/ArrayBufferViewImpl.html</a>\n  </p>\n</div>\n","haxe/io/bufferinput":"<h1> class BufferInput </h1>\n<p>package haxe.io</p> <p> extends <a class=\"type\" title=\"An Input is an abstract reader.\" href=\"input\">Input</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"input\">Input</a>, buf:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, available:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"available\"><code> <a href=\"#available\">available</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"buf\"><code> <a href=\"#buf\">buf</a>:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n \n<h3 id=\"i\"><code> <a href=\"#i\">i</a>:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"input\">Input</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"refill\"><code><a href=\"#refill\">refill</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/BufferInput.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/BufferInput.html</a>\n  </p>\n</div>\n","haxe/io/bytesdata":"<h1>typedef BytesData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"unsigned_char__\">Unsigned_char__</a>&gt; </p> <p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/BytesData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/BytesData.html</a>\n  </p>\n</div>\n","haxe/io/bytesinput":"<h1> class BytesInput </h1>\n<p>package haxe.io</p> <p> extends <a class=\"type\" title=\"An Input is an abstract reader.\" href=\"input\">Input</a> </p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"stringinput\">StringInput</a> </p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (b:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, ?pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>The length of the stream in bytes.</p> \n<h3 id=\"position\"><code> <a href=\"#position\">position</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>The current position in the stream in bytes.</p>  <h2 class=\"section\">Methods</h2><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/BytesInput.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/BytesInput.html</a>\n  </p>\n</div>\n","haxe/io/bytesoutput":"<h1> class BytesOutput </h1>\n<p>package haxe.io</p> <p> extends <a class=\"type\" title=\"An Output is an abstract write.\" href=\"output\">Output</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>The length of the stream in bytes.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"getBytes\"><code><a href=\"#getBytes\">getBytes</a> ():<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/BytesOutput.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/BytesOutput.html</a>\n  </p>\n</div>\n","sys/net/socket":"<h1> class Socket </h1>\n<p>package sys.net</p> <p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"http://api.haxe.org/java/net/SslSocket.html\">SslSocket</a>, <a class=\"type\" title=\"\" href=\"http://api.haxe.org/php/net/SslSocket.html\">SslSocket</a>, <a class=\"type\" title=\"\" href=\"udpsocket\">UdpSocket</a> </p>   <div class=\"indent\"> <p>A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p>Creates a new unconnected socket.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"custom\"><code> <a href=\"#custom\">custom</a>:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php</p>\n<p>A custom value that can be associated with the socket. Can be used to retreive your custom infos after a [select].</p> \n<h3 id=\"custom\"><code> <a href=\"#custom\">custom</a>:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>A custom value that can be associated with the socket. Can be used to retreive your custom infos after a [select].</p> \n<h3 id=\"input\"><code> <span class=\"label\">read only</span> <a href=\"#input\">input</a>:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../../haxe/io/input\">Input</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php</p>\n<p>The stream on which you can read available data. By default the stream is blocking until the requested data is available, use [setBlocking(false)] or [setTimeout] to prevent infinite waiting.</p> \n<h3 id=\"input\"><code> <span class=\"label\">read only</span> <a href=\"#input\">input</a>:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../../haxe/io/input\">Input</a></code></h3>\n<p class=\"availability\">Available on python</p>\n<p>The stream on which you can read available data. By default the stream is blocking until the requested data is available,</p> <pre><code>    use [setBlocking(false)] or [setTimeout] to prevent infinite waiting.\n</code></pre> \n<h3 id=\"output\"><code> <span class=\"label\">read only</span> <a href=\"#output\">output</a>:<a class=\"type\" title=\"An Output is an abstract write.\" href=\"../../haxe/io/output\">Output</a></code></h3>\n<p>The stream on which you can send data. Please note that in case the output buffer you will block while writing the data, use [setBlocking(false)] or [setTimeout] to prevent that.</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"accept\"><code><a href=\"#accept\">accept</a> ():<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a></code></h3>\n<p>Accept a new connected client. This will return a connected socket on which you can read/write some data.</p> \n<h3 id=\"bind\"><code><a href=\"#bind\">bind</a> (host:<a class=\"type\" title=\"A given IP host name.\" href=\"host\">Host</a>, port:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Bind the socket to the given host/port so it can afterwards listen for connections there.</p> \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Closes the socket : make sure to properly close all your sockets or you will crash when you run out of file descriptors.</p> \n<h3 id=\"connect\"><code><a href=\"#connect\">connect</a> (host:<a class=\"type\" title=\"A given IP host name.\" href=\"host\">Host</a>, port:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Connect to the given server host/port. Throw an exception in case we couldn't sucessfully connect.</p> \n<h3 id=\"host\"><code><a href=\"#host\">host</a> ():{port:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, host:<a class=\"type\" title=\"A given IP host name.\" href=\"host\">Host</a>}</code></h3>\n<p>Return the informations about our side of a connected socket.</p> \n<h3 id=\"listen\"><code><a href=\"#listen\">listen</a> (connections:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Allow the socket to listen for incoming questions. The parameter tells how many pending connections we can have until they get refused. Use [accept()] to accept incoming connections.</p> \n<h3 id=\"peer\"><code><a href=\"#peer\">peer</a> ():{port:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, host:<a class=\"type\" title=\"A given IP host name.\" href=\"host\">Host</a>}</code></h3>\n<p>Return the informations about the other side of a connected socket.</p> \n<h3 id=\"read\"><code><a href=\"#read\">read</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Read the whole data available on the socket.</p> \n<h3 id=\"setBlocking\"><code><a href=\"#setBlocking\">setBlocking</a> (b:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Change the blocking mode of the socket. A blocking socket is the default behavior. A non-blocking socket will abort blocking operations immediatly by throwing a haxe.io.Error.Blocking value.</p> \n<h3 id=\"setFastSend\"><code><a href=\"#setFastSend\">setFastSend</a> (b:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Allows the socket to immediatly send the data when written to its output : this will cause less ping but might increase the number of packets / data size, especially when doing a lot of small writes.</p> \n<h3 id=\"setTimeout\"><code><a href=\"#setTimeout\">setTimeout</a> (timeout:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Gives a timeout after which blocking socket operations (such as reading and writing) will abort and throw an exception.</p> \n<h3 id=\"shutdown\"><code><a href=\"#shutdown\">shutdown</a> (read:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, write:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Shutdown the socket, either for reading or writing.</p> \n<h3 id=\"waitForRead\"><code><a href=\"#waitForRead\">waitForRead</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Block until some data is available for read on the socket.</p> \n<h3 id=\"write\"><code><a href=\"#write\">write</a> (content:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Write the whole data to the socket output.</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"select\"><code><span class=\"label\">static</span> <a href=\"#select\">select</a> (read:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, write:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, others:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, ?timeout:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):{write:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, read:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, others:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;}</code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php</p>\n<p>Wait until one of the sockets groups is ready for the given operation : [read] contains sockets on which we want to wait for available data to be read, [write] contains sockets on which we want to wait until we are allowed to write some data to their output buffers, [others] contains sockets on which we want to wait for exceptional conditions. [select] will block until one of the condition is met, in which case it will return the sockets for which the condition was true. In case a [timeout] (in seconds) is specified, select might wait at worse until the timeout expires.</p> \n<h3 id=\"select\"><code><span class=\"label\">static</span> <a href=\"#select\">select</a> (read:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, write:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, others:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, ?timeout:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):{write:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, read:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;, others:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"socket\">Socket</a>&gt;}</code></h3>\n<p class=\"availability\">Available on python</p>\n<p>Wait until one of the sockets groups is ready for the given operation :</p> <pre><code>    [read] contains sockets on which we want to wait for available data to be read,\n    [write] contains sockets on which we want to wait until we are allowed to write some data to their output buffers,\n    [others] contains sockets on which we want to wait for exceptional conditions.\n    [select] will block until one of the condition is met, in which case it will return the sockets for which the condition was true.\n    In case a [timeout] (in seconds) is specified, select might wait at worse until the timeout expires.\n</code></pre><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/sys/net/Socket.html\" class=\"_attribution-link\">http://api.haxe.org/sys/net/Socket.html</a>\n  </p>\n</div>\n","haxe/io/bytes":"<h1> class Bytes </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"blit\"><code><a href=\"#blit\">blit</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, src:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, srcpos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"compare\"><code><a href=\"#compare\">compare</a> (other:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"fill\"><code><a href=\"#fill\">fill</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"bytesdata\">BytesData</a></code></h3>\n \n<h3 id=\"getDouble\"><code><a href=\"#getDouble\">getDouble</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n<p>Returns the IEEE double precision value at given position (in low endian encoding). Result is unspecified if reading outside of the bounds</p> \n<h3 id=\"getFloat\"><code><a href=\"#getFloat\">getFloat</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n<p>Returns the IEEE single precision value at given position (in low endian encoding). Result is unspecified if reading outside of the bounds</p> \n<h3 id=\"getInt32\"><code><a href=\"#getInt32\">getInt32</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Returns the 32 bit integer at given position (in low endian encoding).</p> \n<h3 id=\"getInt64\"><code><a href=\"#getInt64\">getInt64</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"../int64\">Int64</a></code></h3>\n<p>Returns the 64 bit integer at given position (in low endian encoding).</p> \n<h3 id=\"getString\"><code><a href=\"#getString\">getString</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"getUInt16\"><code><a href=\"#getUInt16\">getUInt16</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Returns the 16 bit unsignged integer at given position (in low endian encoding).</p> \n<h3 id=\"readString\"><code><span class=\"label\">inline</span> <a href=\"#readString\">readString</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setDouble\"><code><a href=\"#setDouble\">setDouble</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Store the IEEE double precision value at given position in low endian encoding. Result is unspecified if writing outside of the bounds.</p> \n<h3 id=\"setFloat\"><code><a href=\"#setFloat\">setFloat</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Store the IEEE single precision value at given position in low endian encoding. Result is unspecified if writing outside of the bounds.</p> \n<h3 id=\"setInt32\"><code><a href=\"#setInt32\">setInt32</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Store the 32 bit integer at given position (in low endian encoding).</p> \n<h3 id=\"setInt64\"><code><a href=\"#setInt64\">setInt64</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"../int64\">Int64</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Store the 64 bit integer at given position (in low endian encoding).</p> \n<h3 id=\"setUInt16\"><code><a href=\"#setUInt16\">setUInt16</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, v:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Returns the 16 bit unsignged integer at given position (in low endian encoding).</p> \n<h3 id=\"sub\"><code><a href=\"#sub\">sub</a> (pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n \n<h3 id=\"toHex\"><code><a href=\"#toHex\">toHex</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"alloc\"><code><span class=\"label\">static</span> <a href=\"#alloc\">alloc</a> (length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n \n<h3 id=\"fastGet\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#fastGet\">fastGet</a> (b:<a class=\"type\" title=\"\" href=\"bytesdata\">BytesData</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n<p>Read the most efficiently possible the n-th byte of the data. Behavior when reading outside of the available data is unspecified.</p> \n<h3 id=\"ofData\"><code><span class=\"label\">static</span> <a href=\"#ofData\">ofData</a> (b:<a class=\"type\" title=\"\" href=\"bytesdata\">BytesData</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n \n<h3 id=\"ofString\"><code><span class=\"label\">static</span> <a href=\"#ofString\">ofString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Bytes.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Bytes.html</a>\n  </p>\n</div>\n","haxe/io/eof":"<h1> class Eof </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This exception is raised when reading while data is no longer available in the [Input].</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Eof.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Eof.html</a>\n  </p>\n</div>\n","haxe/io/error":"<h1>enum Error </h1>\n<p>package haxe.io</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>The possible IO errors that can occur</p> </div> <h2 class=\"section\">Values</h2>  <h3 id=\"Blocked\"><code>Blocked        </code></h3>\n<p>The IO is set into nonblocking mode and some data cannot be read or written</p> <h3 id=\"Overflow\"><code>Overflow        </code></h3>\n<p>An integer value is outside its allowed range</p> <h3 id=\"OutsideBounds\"><code>OutsideBounds        </code></h3>\n<p>An operation on Bytes is outside of its valid range</p> <h3 id=\"Custom\"><code>Custom                    (e:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>)        </code></h3>\n<p>Other errors</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Error.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Error.html</a>\n  </p>\n</div>\n","haxe/io/fphelper":"<h1> class FPHelper </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Helper that converts between floating point and binary representation. Always works in low-endian encoding.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"doubleToI64\"><code><span class=\"label\">static</span> <a href=\"#doubleToI64\">doubleToI64</a> (v:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"A cross-platform signed 64-bit integer.\" href=\"../int64\">Int64</a></code></h3>\n<p>Returns an Int64 representing the bytes representation of the double precision IEEE float value. WARNING : for performance reason, the same Int64 value might be reused every time. Copy its low/high values before calling again. We still ensure that this is safe to use in a multithread environment</p> \n<h3 id=\"floatToI32\"><code><span class=\"label\">static</span> <a href=\"#floatToI32\">floatToI32</a> (f:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"i32ToFloat\"><code><span class=\"label\">static</span> <a href=\"#i32ToFloat\">i32ToFloat</a> (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"i64ToDouble\"><code><span class=\"label\">static</span> <a href=\"#i64ToDouble\">i64ToDouble</a> (low:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, high:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/FPHelper.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/FPHelper.html</a>\n  </p>\n</div>\n","haxe/io/float32arraydata":"<h1>typedef Float32ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.Float32Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Float32ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Float32ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/float64arraydata":"<h1>typedef Float64ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.Float64Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Float64ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Float64ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/int32arraydata":"<h1>typedef Int32ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.Int32Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Int32ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Int32ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/float32array":"<h1>abstract Float32Array(<a class=\"type\" title=\"\" href=\"float32arraydata\">Float32ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"float32arraydata\">Float32ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float32array\">Float32Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float32array\">Float32Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 4</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float32array\">Float32Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float32array\">Float32Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"float32arraydata\">Float32ArrayData</a>):<a class=\"type\" title=\"\" href=\"float32array\">Float32Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Float32Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Float32Array.html</a>\n  </p>\n</div>\n","haxe/io/float64array":"<h1>abstract Float64Array(<a class=\"type\" title=\"\" href=\"float64arraydata\">Float64ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"float64arraydata\">Float64ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>):<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float64array\">Float64Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float64array\">Float64Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 8</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float64array\">Float64Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"float64array\">Float64Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"float64arraydata\">Float64ArrayData</a>):<a class=\"type\" title=\"\" href=\"float64array\">Float64Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Float64Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Float64Array.html</a>\n  </p>\n</div>\n","haxe/io/int32array":"<h1>abstract Int32Array(<a class=\"type\" title=\"\" href=\"int32arraydata\">Int32ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"int32arraydata\">Int32ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"int32array\">Int32Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"int32array\">Int32Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 4</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"int32array\">Int32Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"int32array\">Int32Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"int32arraydata\">Int32ArrayData</a>):<a class=\"type\" title=\"\" href=\"int32array\">Int32Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Int32Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Int32Array.html</a>\n  </p>\n</div>\n","haxe/io/path":"<h1> class Path </h1>\n<p>package haxe.io</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides a convenient way of working with paths. It supports the common path formats:</p>\n<ul>\n<li>directory1/directory2/filename.extension</li>\n<li>directory1\\directory2\\filename.excention</li>\n</ul> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)</code></h3>\n<h3>Creates a new Path instance by parsing <code>path</code>.</h3> <p>Path information can be retrieved by accessing the dir, file and ext properties.</p>  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"backslash\"><code> <a href=\"#backslash\">backslash</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>True if the last directory separator is a backslash, false otherwise.</p> \n<h3 id=\"dir\"><code> <a href=\"#dir\">dir</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>The directory.</p> <p>This is the leading part of the path that is not part of the file name and the extension.</p> <p>Does not end with a <code>/</code> or <code>\\</code> separator.</p> <p>If the path has no directory, the value is null.</p> \n<h3 id=\"ext\"><code> <a href=\"#ext\">ext</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>The file extension.</p> <p>It is separated from the file name by a dot. This dot is not part of the extension.</p> <p>If the path has no extension, the value is null.</p> \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>The file name.</p> <p>This is the part of the part between the directory and the extension.</p> <p>If there is no file name, e.g. for \".htaccess\" or \"/dir/\", the value is the empty String \"\".</p>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns a String representation of <code>this</code> path.</h3> <p>If <code>this.<a href=\"#backslash\">backslash</a></code> is true, backslash is used as directory separator, otherwise slash is used. This only affects the separator between <code>this.<a href=\"#dir\">dir</a></code> and <code>this.<a href=\"#file\">file</a></code>.</p> <p>If <code>this.<a href=\"#directory\">directory</a></code> or <code>this.<a href=\"#extension\">extension</a></code> is null, their representation is the empty String \"\".</p>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"addTrailingSlash\"><code><span class=\"label\">static</span> <a href=\"#addTrailingSlash\">addTrailingSlash</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Adds a trailing slash to <code>path</code>, if it does not have one already.</h3> <p>If the last slash in <code>path</code> is a backslash, a backslash is appended to <code>path</code>.</p> <p>If the last slash in <code>path</code> is a slash, or if no slash is found, a slash is appended to <code>path</code>. In particular, this applies to the empty String \"\".</p> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"directory\"><code><span class=\"label\">static</span> <a href=\"#directory\">directory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns the directory of <code>path</code>.</h3> <p>If the directory is null, the empty String \"\" is returned.</p> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"extension\"><code><span class=\"label\">static</span> <a href=\"#extension\">extension</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns the extension of <code>path</code>.</h3> <p>If the extension is null, the empty String \"\" is returned.</p> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"isAbsolute\"><code><span class=\"label\">static</span> <a href=\"#isAbsolute\">isAbsolute</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Returns true if the path is an absolute path, and false otherwise.</p> \n<h3 id=\"join\"><code><span class=\"label\">static</span> <a href=\"#join\">join</a> (paths:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Joins all paths in <code>paths</code> together.</h3> <p>If <code>paths</code> is empty, the empty String <code>\"\"</code> is returned. Otherwise the paths are joined with a slash between them.</p> <h3>If <code>paths</code> is null, the result is unspecified.</h3> \n<h3 id=\"normalize\"><code><span class=\"label\">static</span> <a href=\"#normalize\">normalize</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Normalize a given <code>path</code> (e.g. make '/usr/local/../lib' to '/usr/lib').</h3> <p>Also replaces backslashes \\ with slashes / and afterwards turns multiple slashes into a single one.</p> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"removeTrailingSlashes\"><code><span class=\"label\">static</span> <a href=\"#removeTrailingSlashes\">removeTrailingSlashes</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Removes trailing slashes from <code>path</code>.</h3> <p>If <code>path</code> does not end with a <code>/</code> or <code>\\</code>, <code>path</code> is returned unchanged.</p> <h3>Otherwise the substring of <code>path</code> excluding the trailing slashes or backslashes is returned.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"withExtension\"><code><span class=\"label\">static</span> <a href=\"#withExtension\">withExtension</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ext:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns a String representation of <code>path</code> where the extension is <code>ext</code>.</p> <p>If <code>path</code> has no extension, <code>ext</code> is added as extension.</p> <p>If <code>path</code> or <code>ext</code> are null, the result is unspecified.</p> \n<h3 id=\"withoutDirectory\"><code><span class=\"label\">static</span> <a href=\"#withoutDirectory\">withoutDirectory</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns the String representation of <code>path</code> without the directory.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3> \n<h3 id=\"withoutExtension\"><code><span class=\"label\">static</span> <a href=\"#withoutExtension\">withoutExtension</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns the String representation of <code>path</code> without the file extension.</h3> <h3>If <code>path</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Path.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Path.html</a>\n  </p>\n</div>\n","haxe/io/uint16arraydata":"<h1>typedef UInt16ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.UInt16Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt16ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt16ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/uint32array":"<h1>abstract UInt32Array(<a class=\"type\" title=\"\" href=\"uint32arraydata\">UInt32ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The unsigned Int type is only defined for Flash and C#.\" href=\"../../uint\">UInt</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"uint32arraydata\">UInt32ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The unsigned Int type is only defined for Flash and C#.\" href=\"../../uint\">UInt</a>):<a class=\"type\" title=\"The unsigned Int type is only defined for Flash and C#.\" href=\"../../uint\">UInt</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint32array\">UInt32Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint32array\">UInt32Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 4</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The unsigned Int type is only defined for Flash and C#.\" href=\"../../uint\">UInt</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint32array\">UInt32Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint32array\">UInt32Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"uint32arraydata\">UInt32ArrayData</a>):<a class=\"type\" title=\"\" href=\"uint32array\">UInt32Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt32Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt32Array.html</a>\n  </p>\n</div>\n","haxe/io/uint32arraydata":"<h1>typedef UInt32ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.UInt32Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt32ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt32ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/uint8array":"<h1>abstract UInt8Array(<a class=\"type\" title=\"\" href=\"uint8arraydata\">UInt8ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"uint8arraydata\">UInt8ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint8array\">UInt8Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint8array\">UInt8Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 1</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint8array\">UInt8Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint8array\">UInt8Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"uint8arraydata\">UInt8ArrayData</a>):<a class=\"type\" title=\"\" href=\"uint8array\">UInt8Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt8Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt8Array.html</a>\n  </p>\n</div>\n","haxe/io/uint8arraydata":"<h1>typedef UInt8ArrayData </h1>\n<p>package haxe.io</p> <p> alias for <a class=\"type\" title=\"\" href=\"arraybufferviewdata\">ArrayBufferViewData</a> </p> \n<p>defined in haxe.io.UInt8Array</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt8ArrayData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt8ArrayData.html</a>\n  </p>\n</div>\n","haxe/io/unsigned_char__":"<h1> class Unsigned_char__ </h1>\n<p>package haxe.io</p> \n<p>defined in haxe.io.BytesData</p>\n<p class=\"availability\">Available on cpp</p>   <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/Unsigned_char__.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/Unsigned_char__.html</a>\n  </p>\n</div>\n","haxe/io/stringinput":"<h1> class StringInput </h1>\n<p>package haxe.io</p> <p> extends <a class=\"type\" title=\"\" href=\"bytesinput\">BytesInput</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/StringInput.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/StringInput.html</a>\n  </p>\n</div>\n","haxe/io/uint16array":"<h1>abstract UInt16Array(<a class=\"type\" title=\"\" href=\"uint16arraydata\">UInt16ArrayData</a>) </h1>\n<p>package haxe.io</p> \n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><span class=\"label\">inline</span> <a href=\"#new\">new</a> (elements:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"length\"><code> <span class=\"label\">read only</span> <a href=\"#length\">length</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"view\"><code> <span class=\"label\">read only</span> <a href=\"#view\">view</a>:<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"get\"><code><span class=\"label\">inline</span> <a href=\"#get\">get</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"getData\"><code><span class=\"label\">inline</span> <a href=\"#getData\">getData</a> ():<a class=\"type\" title=\"\" href=\"uint16arraydata\">UInt16ArrayData</a></code></h3>\n \n<h3 id=\"get_view\"><code><span class=\"label\">inline</span> <a href=\"#get_view\">get_view</a> ():<a class=\"type\" title=\"\" href=\"arraybufferview\">ArrayBufferView</a></code></h3>\n \n<h3 id=\"set\"><code><span class=\"label\">inline</span> <a href=\"#set\">set</a> (index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, value:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"sub\"><code><span class=\"label\">inline</span> <a href=\"#sub\">sub</a> (begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint16array\">UInt16Array</a></code></h3>\n \n<h3 id=\"subarray\"><code><span class=\"label\">inline</span> <a href=\"#subarray\">subarray</a> (?begin:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, ?end:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint16array\">UInt16Array</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"BYTES_PER_ELEMENT\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <span class=\"label\">read only</span> <a href=\"#BYTES_PER_ELEMENT\">BYTES_PER_ELEMENT</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a><span> = 2</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"fromArray\"><code><span class=\"label\">static</span> <a href=\"#fromArray\">fromArray</a> (a:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint16array\">UInt16Array</a></code></h3>\n \n<h3 id=\"fromBytes\"><code><span class=\"label\">static</span> <a href=\"#fromBytes\">fromBytes</a> (bytes:<a class=\"type\" title=\"\" href=\"bytes\">Bytes</a>, bytePos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 0, ?length:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"uint16array\">UInt16Array</a></code></h3>\n \n<h3 id=\"fromData\"><code><span class=\"label\">static</span> <a href=\"#fromData\">fromData</a> (d:<a class=\"type\" title=\"\" href=\"uint16arraydata\">UInt16ArrayData</a>):<a class=\"type\" title=\"\" href=\"uint16array\">UInt16Array</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/io/UInt16Array.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/io/UInt16Array.html</a>\n  </p>\n</div>\n","haxe/macro/abstracttype":"<h1>typedef AbstractType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"unops\"><code> <a href=\"#unops\">unops</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{postFix:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, op:<a class=\"type\" title=\"\" href=\"unop\">Unop</a>, field:<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>}&gt;</code></h3>\n \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"to\"><code> <a href=\"#to\">to</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, field:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"impl\"><code> <a href=\"#impl\">impl</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;&gt;</code></h3>\n \n<h3 id=\"from\"><code> <a href=\"#from\">from</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, field:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"exclude\"><code><a href=\"#exclude\">exclude</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"binops\"><code> <a href=\"#binops\">binops</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{op:<a class=\"type\" title=\"\" href=\"binop\">Binop</a>, field:<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>}&gt;</code></h3>\n \n<h3 id=\"array\"><code> <a href=\"#array\">array</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/AbstractType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/AbstractType.html</a>\n  </p>\n</div>\n","haxe/macro/access":"<h1>enum Access </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"APublic\"><code>APublic        </code></h3>\n <h3 id=\"APrivate\"><code>APrivate        </code></h3>\n <h3 id=\"AStatic\"><code>AStatic        </code></h3>\n <h3 id=\"AOverride\"><code>AOverride        </code></h3>\n <h3 id=\"ADynamic\"><code>ADynamic        </code></h3>\n <h3 id=\"AInline\"><code>AInline        </code></h3>\n <h3 id=\"AMacro\"><code>AMacro        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Access.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Access.html</a>\n  </p>\n</div>\n","haxe/macro/anonstatus":"<h1>enum AnonStatus </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"AClosed\"><code>AClosed        </code></h3>\n <h3 id=\"AOpened\"><code>AOpened        </code></h3>\n <h3 id=\"AConst\"><code>AConst        </code></h3>\n <h3 id=\"AExtend\"><code>AExtend                    (tl:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;&gt;)        </code></h3>\n <h3 id=\"AClassStatics\"><code>AClassStatics                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;)        </code></h3>\n <h3 id=\"AEnumStatics\"><code>AEnumStatics                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"enumtype\">EnumType</a>&gt;)        </code></h3>\n <h3 id=\"AAbstractStatics\"><code>AAbstractStatics                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"abstracttype\">AbstractType</a>&gt;)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/AnonStatus.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/AnonStatus.html</a>\n  </p>\n</div>\n","haxe/macro/anontype":"<h1>typedef AnonType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"status\"><code> <a href=\"#status\">status</a>:<a class=\"type\" title=\"\" href=\"anonstatus\">AnonStatus</a></code></h3>\n \n<h3 id=\"fields\"><code> <a href=\"#fields\">fields</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/AnonType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/AnonType.html</a>\n  </p>\n</div>\n","haxe/macro/basetype":"<h1>typedef BaseType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"exclude\"><code><a href=\"#exclude\">exclude</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/BaseType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/BaseType.html</a>\n  </p>\n</div>\n","haxe/macro/binop":"<h1>enum Binop </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"OpAdd\"><code>OpAdd        </code></h3>\n<h3><code>+</code></h3> <h3 id=\"OpMult\"><code>OpMult        </code></h3>\n<h3><code>*</code></h3> <h3 id=\"OpDiv\"><code>OpDiv        </code></h3>\n<h3><code>/</code></h3> <h3 id=\"OpSub\"><code>OpSub        </code></h3>\n<h3><code>-</code></h3> <h3 id=\"OpAssign\"><code>OpAssign        </code></h3>\n<h3><code>=</code></h3> <h3 id=\"OpEq\"><code>OpEq        </code></h3>\n<h3><code>==</code></h3> <h3 id=\"OpNotEq\"><code>OpNotEq        </code></h3>\n<h3><code>!=</code></h3> <h3 id=\"OpGt\"><code>OpGt        </code></h3>\n<h3><code>&gt;</code></h3> <h3 id=\"OpGte\"><code>OpGte        </code></h3>\n<h3><code>&gt;=</code></h3> <h3 id=\"OpLt\"><code>OpLt        </code></h3>\n<h3><code>&lt;</code></h3> <h3 id=\"OpLte\"><code>OpLte        </code></h3>\n<h3><code>&lt;=</code></h3> <h3 id=\"OpAnd\"><code>OpAnd        </code></h3>\n<h3><code>&amp;</code></h3> <h3 id=\"OpOr\"><code>OpOr        </code></h3>\n<h3><code>|</code></h3> <h3 id=\"OpXor\"><code>OpXor        </code></h3>\n<h3><code>^</code></h3> <h3 id=\"OpBoolAnd\"><code>OpBoolAnd        </code></h3>\n<h3><code>&amp;&amp;</code></h3> <h3 id=\"OpBoolOr\"><code>OpBoolOr        </code></h3>\n<h3><code>||</code></h3> <h3 id=\"OpShl\"><code>OpShl        </code></h3>\n<h3><code>&lt;&lt;</code></h3> <h3 id=\"OpShr\"><code>OpShr        </code></h3>\n<h3><code>&gt;&gt;</code></h3> <h3 id=\"OpUShr\"><code>OpUShr        </code></h3>\n<h3><code>&gt;&gt;&gt;</code></h3> <h3 id=\"OpMod\"><code>OpMod        </code></h3>\n<h3><code>%</code></h3> <h3 id=\"OpAssignOp\"><code>OpAssignOp                    (op:<a class=\"type\" title=\"\" href=\"binop\">Binop</a>)        </code></h3>\n<p><code>+=</code> <code>-=</code> <code>/=</code> <code>*=</code> <code>&lt;&lt;=</code> <code>&gt;&gt;=</code> <code>&gt;&gt;&gt;=</code> <code>|=</code> <code>&amp;=</code> <code>^=</code> <code>%=</code></p> <h3 id=\"OpInterval\"><code>OpInterval        </code></h3>\n<h3><code>...</code></h3> <h3 id=\"OpArrow\"><code>OpArrow        </code></h3>\n<h3><code>=&gt;</code></h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Binop.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Binop.html</a>\n  </p>\n</div>\n","haxe/macro/case":"<h1>typedef Case </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"values\"><code> <a href=\"#values\">values</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;</code></h3>\n \n<h3 id=\"guard\"><code> <a href=\"#guard\">guard</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;&gt;</code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Case.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Case.html</a>\n  </p>\n</div>\n","haxe/macro/catch":"<h1>typedef Catch </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Catch.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Catch.html</a>\n  </p>\n</div>\n","haxe/macro/classkind":"<h1>enum ClassKind </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"KNormal\"><code>KNormal        </code></h3>\n <h3 id=\"KTypeParameter\"><code>KTypeParameter                    (constraints:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n <h3 id=\"KExtension\"><code>KExtension                    (cl:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n <h3 id=\"KExpr\"><code>KExpr                    (expr:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"KGeneric\"><code>KGeneric        </code></h3>\n <h3 id=\"KGenericInstance\"><code>KGenericInstance                    (cl:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n <h3 id=\"KMacroType\"><code>KMacroType        </code></h3>\n <h3 id=\"KAbstractImpl\"><code>KAbstractImpl                    (a:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"abstracttype\">AbstractType</a>&gt;)        </code></h3>\n <h3 id=\"KGenericBuild\"><code>KGenericBuild        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ClassKind.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ClassKind.html</a>\n  </p>\n</div>\n","haxe/macro/classtype":"<h1>typedef ClassType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"superClass\"><code> <a href=\"#superClass\">superClass</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;{t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"statics\"><code> <a href=\"#statics\">statics</a>:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;&gt;</code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"overrides\"><code> <a href=\"#overrides\">overrides</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"kind\"><code> <a href=\"#kind\">kind</a>:<a class=\"type\" title=\"\" href=\"classkind\">ClassKind</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isInterface\"><code> <a href=\"#isInterface\">isInterface</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"interfaces\"><code> <a href=\"#interfaces\">interfaces</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"init\"><code> <a href=\"#init\">init</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;</code></h3>\n \n<h3 id=\"fields\"><code> <a href=\"#fields\">fields</a>:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;&gt;</code></h3>\n \n<h3 id=\"exclude\"><code><a href=\"#exclude\">exclude</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"constructor\"><code> <a href=\"#constructor\">constructor</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ClassType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ClassType.html</a>\n  </p>\n</div>\n","haxe/macro/complextype":"<h1>enum ComplexType </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TPath\"><code>TPath                    (p:<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>)        </code></h3>\n <h3 id=\"TFunction\"><code>TFunction                    (args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;, ret:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n <h3 id=\"TAnonymous\"><code>TAnonymous                    (fields:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"field\">Field</a>&gt;)        </code></h3>\n <h3 id=\"TParent\"><code>TParent                    (t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n <h3 id=\"TExtend\"><code>TExtend                    (p:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>&gt;, fields:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"field\">Field</a>&gt;)        </code></h3>\n <h3 id=\"TOptional\"><code>TOptional                    (t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ComplexType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ComplexType.html</a>\n  </p>\n</div>\n","haxe/macro/complextypetools":"<h1> class ComplexTypeTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides some utility methods to work with AST-level types. It is best used through 'using haxe.macro.ComplexTypeTools' syntax and then provides additional methods on haxe.macro.Expr.ComplexType instances.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (c:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Converts type [c] to a human-readable String representation.</p> <p>The result is guaranteed to be valid haxe code, but there may be differences from the original lexical syntax.</p> \n<h3 id=\"toType\"><code><span class=\"label\">static</span> <a href=\"#toType\">toType</a> (c:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Returns a type corresponding to [c].</p> <p>If [c] is null, the result is null.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ComplexTypeTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ComplexTypeTools.html</a>\n  </p>\n</div>\n","haxe/macro/constant":"<h1>enum Constant </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"CInt\"><code>CInt                    (v:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"CFloat\"><code>CFloat                    (f:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"CString\"><code>CString                    (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"CIdent\"><code>CIdent                    (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"CRegexp\"><code>CRegexp                    (r:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, opt:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Constant.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Constant.html</a>\n  </p>\n</div>\n","haxe/macro/deftype":"<h1>typedef DefType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"exclude\"><code><a href=\"#exclude\">exclude</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/DefType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/DefType.html</a>\n  </p>\n</div>\n","haxe/macro/enumfield":"<h1>typedef EnumField </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"index\"><code> <a href=\"#index\">index</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/EnumField.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/EnumField.html</a>\n  </p>\n</div>\n","haxe/macro/compiler":"<h1> class Compiler </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on cpp, macro, neko</p>   <div class=\"indent\"> <p>All these methods can be called for compiler configuration macros.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"addClassPath\"><code><span class=\"label\">static</span> <a href=\"#addClassPath\">addClassPath</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"addGlobalMetadata\"><code><span class=\"label\">static</span> <a href=\"#addGlobalMetadata\">addGlobalMetadata</a> (pathFilter:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, meta:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, recursive:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true, toTypes:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true, toFields:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = false):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Adds metadata <code>meta</code> to all types (if <code>toTypes = true</code>) or fields (if <code>toFields = true</code>) whose dot-path matches <code>pathFilter</code>.</p> <p>If <code>recursive</code> is true a dot-path is considered matched if it starts with <code>pathFilter</code>. This automatically applies to path filters of packages. Otherwise an exact match is required.</p> <p>If <code>pathFilter</code> is the empty String <code>\"\"</code> it matches everything (if <code>recursive = true</code>) or only top-level types (if <code>recursive = false</code>).</p> <h3>This operation has no effect if the type has already been loaded, e.g. through <code><a href=\"context#getType\">Context.getType</a></code>.</h3> \n<h3 id=\"addMetadata\"><code><span class=\"label\">static</span> <a href=\"#addMetadata\">addMetadata</a> (meta:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, className:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?isStatic:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"addNativeArg\"><code><span class=\"label\">static</span> <a href=\"#addNativeArg\">addNativeArg</a> (argument:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Adds an argument to be passed to the native compiler (eg : -javac-arg for Java)</p> \n<h3 id=\"addNativeLib\"><code><span class=\"label\">static</span> <a href=\"#addNativeLib\">addNativeLib</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Adds a native library depending on the platform (eg : -swf-lib for Flash)</p> \n<h3 id=\"allowPackage\"><code><span class=\"label\">static</span> <a href=\"#allowPackage\">allowPackage</a> (v:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"define\"><code><span class=\"label\">static</span> <a href=\"#define\">define</a> (flag:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?value:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"exclude\"><code><span class=\"label\">static</span> <a href=\"#exclude\">exclude</a> (pack:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, rec:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Exclude a given class or a complete package from being generated.</p> \n<h3 id=\"excludeFile\"><code><span class=\"label\">static</span> <a href=\"#excludeFile\">excludeFile</a> (fileName:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Exclude classes listed in an extern file (one per line) from being generated.</p> \n<h3 id=\"getDefine\"><code><span class=\"label\">static</span> <a href=\"#getDefine\">getDefine</a> (key:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"getDisplayPos\"><code><span class=\"label\">static</span> <a href=\"#getDisplayPos\">getDisplayPos</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;{pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt;</code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"getOutput\"><code><span class=\"label\">static</span> <a href=\"#getOutput\">getOutput</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"include\"><code><span class=\"label\">static</span> <a href=\"#include\">include</a> (pack:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, rec:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true, ?ignore:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, ?classPaths:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<h3>Includes all modules in package <code>pack</code> in the compilation.</h3> <h3>In order to include single modules, their paths can be listed directly on command line: <code>haxe ... ModuleName pack.ModuleName</code>.</h3> <p>By default <code><a href=\"compiler#include\">Compiler.include</a></code> will search for modules in the directories defined with <code>-cp</code>. If you want to specify a different set of paths to search for modules, you can use the optional argument <code>classPath</code>.</p> <p class=\"javadoc\">Parameters:</p> <p class=\"indent inline-content\"> <code>rec</code> If true, recursively adds all sub-packages. </p> <p class=\"indent inline-content\"> <code>ignore</code> Array of module names to ignore for inclusion. </p> <p class=\"indent inline-content\"> <code>classPaths</code> An alternative array of paths (directory names) to use to search for modules to include. Note that if you pass this argument, only the specified paths will be used for inclusion. </p>  \n<h3 id=\"includeFile\"><code><span class=\"label\">static</span> <a href=\"#includeFile\">includeFile</a> (fileName:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Embed an on-disk javascript file (can be called into an <strong>init</strong> method)</p> \n<h3 id=\"keep\"><code><span class=\"label\">static</span> <a href=\"#keep\">keep</a> (?path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?paths:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, recursive:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Marks types or packages to be kept by DCE.</p> <p>This also extends to the sub-types of resolved modules.</p> <p>In order to include module sub-types directly, their full dot path including the containing module has to be used (e.g. msignal.Signal.Signal0).</p> <h3>This operation has no effect if the type has already been loaded, e.g. through <code><a href=\"context#getType\">Context.getType</a></code>.</h3> <p class=\"javadoc\">Parameters:</p> <p class=\"indent inline-content\"> <code>path</code> A package, module or sub-type dot path to keep. </p> <p class=\"indent inline-content\"> <code>paths</code> An Array of package, module or sub-type dot paths to keep. </p> <p class=\"indent inline-content\"> <code>recursive</code> If true, recurses into sub-packages for package paths. </p>  \n<h3 id=\"patchTypes\"><code><span class=\"label\">static</span> <a href=\"#patchTypes\">patchTypes</a> (file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Load a type patch file that can modify declared classes fields types</p> \n<h3 id=\"removeField\"><code><span class=\"label\">static</span> <a href=\"#removeField\">removeField</a> (className:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?isStatic:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"setCustomJSGenerator\"><code><span class=\"label\">static</span> <a href=\"#setCustomJSGenerator\">setCustomJSGenerator</a> (callb:<a class=\"type\" title=\"This is the api that is passed to the custom JS generator.\" href=\"jsgenapi\">JSGenApi</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<p>Change the default JS output by using a custom generator callback</p> \n<h3 id=\"setFieldType\"><code><span class=\"label\">static</span> <a href=\"#setFieldType\">setFieldType</a> (className:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, type:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?isStatic:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n \n<h3 id=\"setOutput\"><code><span class=\"label\">static</span> <a href=\"#setOutput\">setOutput</a> (fileOrDir:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro, neko</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Compiler.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Compiler.html</a>\n  </p>\n</div>\n","haxe/macro/enumtype":"<h1>typedef EnumType </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"names\"><code> <a href=\"#names\">names</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"exclude\"><code><a href=\"#exclude\">exclude</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"constructs\"><code> <a href=\"#constructs\">constructs</a>:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/EnumType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/EnumType.html</a>\n  </p>\n</div>\n","haxe/macro/error":"<h1> class Error </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This error can be used to handle or produce compilation errors in macros.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (m:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, p:<a class=\"type\" title=\"\" href=\"position\">Position</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"message\"><code> <a href=\"#message\">message</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Error.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Error.html</a>\n  </p>\n</div>\n","haxe/macro/examplejsgenerator":"<h1> class ExampleJSGenerator </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on macro, neko</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (api:<a class=\"type\" title=\"This is the api that is passed to the custom JS generator.\" href=\"jsgenapi\">JSGenApi</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"generate\"><code><a href=\"#generate\">generate</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"use\"><code><span class=\"label\">static</span> <a href=\"#use\">use</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ExampleJSGenerator.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ExampleJSGenerator.html</a>\n  </p>\n</div>\n","haxe/macro/expr":"<h1>typedef Expr </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"\" href=\"exprdef\">ExprDef</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Expr.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Expr.html</a>\n  </p>\n</div>\n","haxe/macro/exprarraytools":"<h1> class ExprArrayTools </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.ExprTools</p>\n<p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides functions on expression arrays for convenience. For a detailed reference on each method, see the documentation of ExprTools.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a> (el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;, f:<a class=\"type\" title=\"\" href=\"expr\">Expr</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"map\"><code><span class=\"label\">static</span> <a href=\"#map\">map</a> (el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;, f:<a class=\"type\" title=\"\" href=\"expr\">Expr</a> ‑&gt; <a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ExprArrayTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ExprArrayTools.html</a>\n  </p>\n</div>\n","haxe/macro/exprdef":"<h1>enum ExprDef </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"EConst\"><code>EConst                    (c:<a class=\"type\" title=\"\" href=\"constant\">Constant</a>)        </code></h3>\n <h3 id=\"EArray\"><code>EArray                    (e1:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, e2:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EBinop\"><code>EBinop                    (op:<a class=\"type\" title=\"\" href=\"binop\">Binop</a>, e1:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, e2:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EField\"><code>EField                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"EParenthesis\"><code>EParenthesis                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EObjectDecl\"><code>EObjectDecl                    (fields:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, expr:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>}&gt;)        </code></h3>\n <h3 id=\"EArrayDecl\"><code>EArrayDecl                    (values:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;)        </code></h3>\n <h3 id=\"ECall\"><code>ECall                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;)        </code></h3>\n <h3 id=\"ENew\"><code>ENew                    (t:<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;)        </code></h3>\n <h3 id=\"EUnop\"><code>EUnop                    (op:<a class=\"type\" title=\"\" href=\"unop\">Unop</a>, postFix:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EVars\"><code>EVars                    (vars:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"var\">Var</a>&gt;)        </code></h3>\n <h3 id=\"EFunction\"><code>EFunction                    (name:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, f:<a class=\"type\" title=\"\" href=\"function\">Function</a>)        </code></h3>\n <h3 id=\"EBlock\"><code>EBlock                    (exprs:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;)        </code></h3>\n <h3 id=\"EFor\"><code>EFor                    (it:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, expr:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EIn\"><code>EIn                    (e1:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, e2:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EIf\"><code>EIf                    (econd:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, eif:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, eelse:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;)        </code></h3>\n <h3 id=\"EWhile\"><code>EWhile                    (econd:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, normalWhile:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"ESwitch\"><code>ESwitch                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, cases:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"case\">Case</a>&gt;, edef:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;&gt;)        </code></h3>\n <h3 id=\"ETry\"><code>ETry                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, catches:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"catch\">Catch</a>&gt;)        </code></h3>\n <h3 id=\"EReturn\"><code>EReturn                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EBreak\"><code>EBreak        </code></h3>\n <h3 id=\"EContinue\"><code>EContinue        </code></h3>\n <h3 id=\"EUntyped\"><code>EUntyped                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"EThrow\"><code>EThrow                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"ECast\"><code>ECast                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, t:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;)        </code></h3>\n <h3 id=\"EDisplay\"><code>EDisplay                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, isCall:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"EDisplayNew\"><code>EDisplayNew                    (t:<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>)        </code></h3>\n <h3 id=\"ETernary\"><code>ETernary                    (econd:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, eif:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, eelse:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"ECheckType\"><code>ECheckType                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n <h3 id=\"EMeta\"><code>EMeta                    (s:<a class=\"type\" title=\"\" href=\"metadataentry\">MetadataEntry</a>, e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ExprDef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ExprDef.html</a>\n  </p>\n</div>\n","haxe/macro/exprof":"<h1>typedef ExprOf&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"\" href=\"expr\">Expr</a> </p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ExprOf.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ExprOf.html</a>\n  </p>\n</div>\n","haxe/macro/exprtools":"<h1> class ExprTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides some utility methods to work with expressions. It is best used through 'using haxe.macro.ExprTools' syntax and then provides additional methods on haxe.macro.Expr instances.</p> <p>While mainly intended to be used in macros, it works in non-macro code as well.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getValue\"><code><span class=\"label\">static</span> <a href=\"#getValue\">getValue</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<h3>Returns the value <code>e</code> represents.</h3> <p>Supported expressions are:</p> <pre><code>- `Int`, `Float` and `String` literals\n- identifiers `true`, `false` and `null`\n- structure declarations if all their fields are values\n- array declarations if all their elements are values\n- unary operators `-`, `!` and `~` if the operand is a value\n- binary operators except `=&gt;`, `...` and assignments\n</code></pre> <h3>Parentheses, metadata and the <code>untyped</code> keyword are ignored.</h3> <h3>If any non-value is encountered, an exception of type <code><a href=\"../../string\">String</a></code> is thrown.</h3> <h3>If <code>e</code> is null, the result is unspecified.</h3> \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, f:<a class=\"type\" title=\"\" href=\"expr\">Expr</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Calls function [f] on each sub-expression of [e].</p> <p>If [e] has no sub-expressions, this operation has no effect.</p> <p>Otherwise [f] is called once per sub-expression of [e], with the sub-expression as argument. These calls are done in order of the sub-expression declarations.</p> <p>This method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.</p> <p>Usage example:</p> <p>function findStrings(e:Expr) {</p> <pre><code>switch(e.expr) {\n\tcase EConst(CString(s)):\n\t\t// handle s\n\tcase _:\n\t\tExprTools.iter(e, findStrings);\n}\n</code></pre> <p>}</p> \n<h3 id=\"map\"><code><span class=\"label\">static</span> <a href=\"#map\">map</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>, f:<a class=\"type\" title=\"\" href=\"expr\">Expr</a> ‑&gt; <a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<p>Transforms the sub-expressions of [e] by calling [f] on each of them.</p> <p>If [e] has no sub-expressions, this operation returns [e] unchanged.</p> <p>Otherwise [f] is called once per sub-expression of [e], with the sub-expression as argument. These calls are done in order of the sub-expression declarations.</p> <p>This method does not call itself recursively. It should instead be used in a recursive function which handles the expression nodes of interest.</p> <p>Usage example:</p> <p>function capitalizeStrings(e:Expr) {</p> <pre><code>return switch(e.expr) {\n\tcase EConst(CString(s)):\n\t\t{ expr: EConst(CString(s.toUpperCase())), pos: e.pos };\n\tcase _:\n\t\tExprTools.map(e, capitalizeStrings);\n}\n</code></pre> <p>}</p> \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Converts expression [e] to a human-readable String representation.</p> <p>The result is guaranteed to be valid haxe code, but there may be differences from the original lexical syntax.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ExprTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ExprTools.html</a>\n  </p>\n</div>\n","haxe/macro/field":"<h1>typedef Field </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"metadata\">Metadata</a>&gt;</code></h3>\n \n<h3 id=\"kind\"><code> <a href=\"#kind\">kind</a>:<a class=\"type\" title=\"\" href=\"fieldtype\">FieldType</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;&gt;</code></h3>\n \n<h3 id=\"access\"><code> <a href=\"#access\">access</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"access\">Access</a>&gt;&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Field.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Field.html</a>\n  </p>\n</div>\n","haxe/macro/fieldaccess":"<h1>enum FieldAccess </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"FInstance\"><code>FInstance                    (c:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;, cf:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;)        </code></h3>\n <h3 id=\"FStatic\"><code>FStatic                    (c:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, cf:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;)        </code></h3>\n <h3 id=\"FAnon\"><code>FAnon                    (cf:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;)        </code></h3>\n <h3 id=\"FDynamic\"><code>FDynamic                    (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"FClosure\"><code>FClosure                    (c:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;{params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;, c:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;}&gt;, cf:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;)        </code></h3>\n <h3 id=\"FEnum\"><code>FEnum                    (e:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"enumtype\">EnumType</a>&gt;, ef:<a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/FieldAccess.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/FieldAccess.html</a>\n  </p>\n</div>\n","haxe/macro/classfield":"<h1>typedef ClassField </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"MetaAccess is a wrapper for the &lt;code&gt;&lt;a href=\" .. href=\"metaaccess\">MetaAccess</a></code></h3>\n \n<h3 id=\"kind\"><code> <a href=\"#kind\">kind</a>:<a class=\"type\" title=\"\" href=\"fieldkind\">FieldKind</a></code></h3>\n \n<h3 id=\"isPublic\"><code> <a href=\"#isPublic\">isPublic</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"expr\"><code><a href=\"#expr\">expr</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ClassField.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ClassField.html</a>\n  </p>\n</div>\n","haxe/macro/fieldkind":"<h1>enum FieldKind </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"FVar\"><code>FVar                    (read:<a class=\"type\" title=\"\" href=\"varaccess\">VarAccess</a>, write:<a class=\"type\" title=\"\" href=\"varaccess\">VarAccess</a>)        </code></h3>\n <h3 id=\"FMethod\"><code>FMethod                    (k:<a class=\"type\" title=\"\" href=\"methodkind\">MethodKind</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/FieldKind.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/FieldKind.html</a>\n  </p>\n</div>\n","haxe/macro/fieldtype":"<h1>enum FieldType </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"FVar\"><code>FVar                    (t:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;, e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n <h3 id=\"FFun\"><code>FFun                    (f:<a class=\"type\" title=\"\" href=\"function\">Function</a>)        </code></h3>\n <h3 id=\"FProp\"><code>FProp                    (get:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, set:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>, e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/FieldType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/FieldType.html</a>\n  </p>\n</div>\n","haxe/macro/format":"<h1> class Format </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The actual macro implemented for Std.format</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"format\"><code><span class=\"label\">static</span> <a href=\"#format\">format</a> (estr:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):{pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>, expr:<a class=\"type\" title=\"\" href=\"exprdef\">ExprDef</a>}</code></h3>\n<p class=\"availability\">Available on macro</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Format.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Format.html</a>\n  </p>\n</div>\n","haxe/macro/function":"<h1>typedef Function </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"ret\"><code> <a href=\"#ret\">ret</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;</code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparamdecl\">TypeParamDecl</a>&gt;&gt;</code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;</code></h3>\n \n<h3 id=\"args\"><code> <a href=\"#args\">args</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"functionarg\">FunctionArg</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Function.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Function.html</a>\n  </p>\n</div>\n","haxe/macro/functionarg":"<h1>typedef FunctionArg </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"value\"><code> <a href=\"#value\">value</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;&gt;</code></h3>\n \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;</code></h3>\n \n<h3 id=\"opt\"><code> <a href=\"#opt\">opt</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/FunctionArg.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/FunctionArg.html</a>\n  </p>\n</div>\n","haxe/macro/importexpr":"<h1>typedef ImportExpr </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt;</code></h3>\n \n<h3 id=\"mode\"><code> <a href=\"#mode\">mode</a>:<a class=\"type\" title=\"\" href=\"importmode\">ImportMode</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ImportExpr.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ImportExpr.html</a>\n  </p>\n</div>\n","haxe/macro/importmode":"<h1>enum ImportMode </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"INormal\"><code>INormal        </code></h3>\n <h3 id=\"IAsName\"><code>IAsName                    (alias:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"IAll\"><code>IAll        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ImportMode.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ImportMode.html</a>\n  </p>\n</div>\n","haxe/macro/context":"<h1> class Context </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on macro, neko</p>   <div class=\"indent\"> <p>Context provides an API for macro programming.</p> <p>It contains common functions that interact with the macro interpreter to query or set information. Other API functions are available in the tools classes:</p>\n<ul>\n<li><code><a href=\"complextypetools\">haxe.macro.ComplexTypeTools</a></code></li>\n<li><code><a href=\"exprtools\">haxe.macro.ExprTools</a></code></li>\n<li><code><a href=\"typetools\">haxe.macro.TypeTools</a></code></li>\n</ul> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"addResource\"><code><span class=\"label\">static</span> <a href=\"#addResource\">addResource</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, data:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Makes resource <code>data</code> available as <code>name</code>.</p> <h3>The resource is then available using the <code>haxe.macro.Resource</code> API.</h3> <h3>If a previous resource was bound to <code>name</code>, it is overwritten.</h3> \n<h3 id=\"currentPos\"><code><span class=\"label\">static</span> <a href=\"#currentPos\">currentPos</a> ():<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n<p>Returns the position at which the macro was called.</p> \n<h3 id=\"defineModule\"><code><span class=\"label\">static</span> <a href=\"#defineModule\">defineModule</a> (modulePath:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, types:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedefinition\">TypeDefinition</a>&gt;, ?imports:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"importexpr\">ImportExpr</a>&gt;, ?usings:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Defines a new module as <code>modulePath</code> with several <code><a href=\"typedefinition\">TypeDefinition</a></code> <code>types</code>. This is analogous to defining a .hx file.</p> <p>The individial <code>types</code> can reference each other and any identifier respects the <code>imports</code> and <code>usings</code> as usual, expect that imports are not allowed to have <code>.*</code> wildcards or <code>in s</code> shorthands.</p> \n<h3 id=\"defineType\"><code><span class=\"label\">static</span> <a href=\"#defineType\">defineType</a> (t:<a class=\"type\" title=\"\" href=\"typedefinition\">TypeDefinition</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Defines a new type from <code><a href=\"typedefinition\">TypeDefinition</a></code> <code>t</code>.</p> \n<h3 id=\"defined\"><code><span class=\"label\">static</span> <a href=\"#defined\">defined</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>Tells if compiler directive <code>s</code> has been set.</h3> <p>Compiler directives are set using the <code>-D</code> command line parameter, or by calling <code><a href=\"compiler#define\">haxe.macro.Compiler.define</a></code>.</p> \n<h3 id=\"definedValue\"><code><span class=\"label\">static</span> <a href=\"#definedValue\">definedValue</a> (key:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns the value defined for compiler directive <code>key</code>.</h3> <h3>If no value is defined for <code>key</code>, null is returned.</h3> <p>Compiler directive values are set using the <code>-D key=value</code> command line parameter, or by calling <code><a href=\"compiler#define\">haxe.macro.Compiler.define</a></code>.</p> <h3>The default value is <code>\"1\"</code>.</h3> \n<h3 id=\"error\"><code><span class=\"label\">static</span> <a href=\"#error\">error</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p>Displays a compilation error <code>msg</code> at the given <code><a href=\"position\">Position</a></code> <code>pos</code> and aborts the current macro call.</p> \n<h3 id=\"fatalError\"><code><span class=\"label\">static</span> <a href=\"#fatalError\">fatalError</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<p>Displays a compilation error <code>msg</code> at the given <code><a href=\"position\">Position</a></code> <code>pos</code> and aborts the compilation.</p> \n<h3 id=\"follow\"><code><span class=\"label\">static</span> <a href=\"#follow\">follow</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, ?once:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<p>Follows a type.</p> <h3>See <code><a href=\"typetools#follow\">haxe.macro.TypeTools.follow</a></code> for details.</h3> \n<h3 id=\"getBuildFields\"><code><span class=\"label\">static</span> <a href=\"#getBuildFields\">getBuildFields</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"field\">Field</a>&gt;</code></h3>\n<h3>Returns an <code><a href=\"../../array\">Array</a></code> of fields of the class which is to be built.</h3> <h3>This is only defined for <code>@:build/@:autoBuild</code> macros.</h3> \n<h3 id=\"getCallArguments\"><code><span class=\"label\">static</span> <a href=\"#getCallArguments\">getCallArguments</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;&gt;</code></h3>\n<h3>Returns the call arguments that lead to the invocation of the current <code>@:genericBuild</code> macro, if available.</h3> <p>Returns <code><a href=\"../../null\">null</a></code> if the current macro is not a <code>@:genericBuild</code> macro.</p> \n<h3 id=\"getClassPath\"><code><span class=\"label\">static</span> <a href=\"#getClassPath\">getClassPath</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<h3>Returns an <code><a href=\"../../array\">Array</a></code> of current class paths in the order of their declaration.</h3> <h3>Modifying the returned array has no effect on the compiler. Class paths can be added using <code><a href=\"compiler#addClassPath\">haxe.macro.Compiler.addClassPath</a></code>.</h3> \n<h3 id=\"getDefines\"><code><span class=\"label\">static</span> <a href=\"#getDefines\">getDefines</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<p>Returns a map of all compiler directives that have been set.</p> <p>Compiler directives are set using the <code>-D</code> command line parameter, or by calling <code><a href=\"compiler#define\">haxe.macro.Compiler.define</a></code>.</p> <p>Modifying the returned map has no effect on the compiler.</p> \n<h3 id=\"getExpectedType\"><code><span class=\"label\">static</span> <a href=\"#getExpectedType\">getExpectedType</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p>Returns the type which is expected at the place the macro is called.</p> <h3>This affects usages such as <code>var x:<a href=\"../../int\">Int</a> = macroCall()</code>, where the expected type will be reported as Int.</h3> <p>Might return null if no specific type is expected or if the calling macro is not an expression-macro.</p> \n<h3 id=\"getLocalClass\"><code><span class=\"label\">static</span> <a href=\"#getLocalClass\">getLocalClass</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;&gt;</code></h3>\n<p>Returns the current class in which the macro was called.</p> <p>If no such class exists, null is returned.</p> \n<h3 id=\"getLocalMethod\"><code><span class=\"label\">static</span> <a href=\"#getLocalMethod\">getLocalMethod</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<p>Returns the name of the method from which the macro was called.</p> <p>If no such method exists, null is returned.</p> \n<h3 id=\"getLocalModule\"><code><span class=\"label\">static</span> <a href=\"#getLocalModule\">getLocalModule</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns the current module path in/on which the macro was called.</p> \n<h3 id=\"getLocalTVars\"><code><span class=\"label\">static</span> <a href=\"#getLocalTVars\">getLocalTVars</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"tvar\">TVar</a>&gt;</code></h3>\n<p>Similar to <code>getLocalVars</code>, but returns elements of type <code><a href=\"tvar\">TVar</a></code> instead of <code><a href=\"../../type\">Type</a></code>.</p> \n<h3 id=\"getLocalType\"><code><span class=\"label\">static</span> <a href=\"#getLocalType\">getLocalType</a> ():<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p>Returns the current type in/on which the macro was called.</p> <p>If no such type exists, null is returned.</p> \n<h3 id=\"getLocalUsing\"><code><span class=\"label\">static</span> <a href=\"#getLocalUsing\">getLocalUsing</a> ():<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;&gt;</code></h3>\n<p>Returns an <code><a href=\"../../array\">Array</a></code> of classes which are available for <code>using</code> usage in the context the macro was called.</p> <p>Modifying the returned array has no effect on the compiler.</p> \n<h3 id=\"getLocalVars\"><code><span class=\"label\">static</span> <a href=\"#getLocalVars\">getLocalVars</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p>Returns a map of local variables accessible in the context the macro was called.</p> <p>The keys of the returned map are the variable names, the values are their types.</p> <p>Modifying the returned map has no effect on the compiler.</p> \n<h3 id=\"getModule\"><code><span class=\"label\">static</span> <a href=\"#getModule\">getModule</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p>Resolves a module identified by <code>name</code> and returns an <code><a href=\"../../array\">Array</a></code> of all its contained types.</p> <p>The resolution follows the usual class path rules where the last declared class path has priority.</p> <p>If no module can be found, null is returned.</p> \n<h3 id=\"getPosInfos\"><code><span class=\"label\">static</span> <a href=\"#getPosInfos\">getPosInfos</a> (p:<a class=\"type\" title=\"\" href=\"position\">Position</a>):{min:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, max:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}</code></h3>\n<p>Returns the information stored in <code><a href=\"position\">Position</a></code> <code>p</code>.</p> \n<h3 id=\"getResources\"><code><span class=\"label\">static</span> <a href=\"#getResources\">getResources</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>&gt;</code></h3>\n<p>Returns a map of all registered resources for this compilation unit.</p> <h3>Modifying the returned map has no effect on the compilation, use <code><a href=\"context#addResource\">haxe.macro.Context.addResource</a></code> to add new resources to the compilation unit.</h3> \n<h3 id=\"getType\"><code><span class=\"label\">static</span> <a href=\"#getType\">getType</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<h3>Resolves a type identified by <code>name</code>.</h3> <p>The resolution follows the usual class path rules where the last declared class path has priority.</p> <h3>If no type can be found, an exception of type <code><a href=\"../../string\">String</a></code> is thrown.</h3> \n<h3 id=\"getTypedExpr\"><code><span class=\"label\">static</span> <a href=\"#getTypedExpr\">getTypedExpr</a> (t:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<h3>Returns a syntax-level expression corresponding to typed expression <code>t</code>.</h3> <p>This process may lose some information.</p> \n<h3 id=\"makeExpr\"><code><span class=\"label\">static</span> <a href=\"#makeExpr\">makeExpr</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<h3>Builds an expression from <code>v</code>.</h3> <h3>This method generates AST nodes depending on the macro-runtime value of <code>v</code>. As such, only basic types and enums are supported and the behavior for other types is undefined.</h3> <p>The provided <code><a href=\"position\">Position</a></code> <code>pos</code> is used for all generated inner AST nodes.</p> \n<h3 id=\"makePosition\"><code><span class=\"label\">static</span> <a href=\"#makePosition\">makePosition</a> (inf:{min:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, max:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}):<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n<p>Builds a <code><a href=\"position\">Position</a></code> from <code>inf</code>.</p> \n<h3 id=\"onAfterGenerate\"><code><span class=\"label\">static</span> <a href=\"#onAfterGenerate\">onAfterGenerate</a> (callback:<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Adds a callback function <code>callback</code> which is invoked after the compiler generation phase.</h3> <p>Compilation has completed at this point and cannot be influenced anymore. However, contextual information is still available.</p> \n<h3 id=\"onGenerate\"><code><span class=\"label\">static</span> <a href=\"#onGenerate\">onGenerate</a> (callback:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt; ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Adds a callback function <code>callback</code> which is invoked after the compiler's typing phase, just before its generation phase.</h3> <h3>The callback receives an <code><a href=\"../../array\">Array</a></code> containing all types which are about to be generated. Modifications are limited to metadata, it is mainly intended to obtain information.</h3> \n<h3 id=\"onMacroContextReused\"><code><span class=\"label\">static</span> <a href=\"#onMacroContextReused\">onMacroContextReused</a> (callb:<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a> ‑&gt; <a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Register a callback function that will be called everytime the macro context cached is reused with a new compilation. This enable to reset some static vars since the code might have been changed. If the callback returns false, the macro context is discarded and another one is created.</p> \n<h3 id=\"onTypeNotFound\"><code><span class=\"label\">static</span> <a href=\"#onTypeNotFound\">onTypeNotFound</a> (callback:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> ‑&gt; <a class=\"type\" title=\"\" href=\"typedefinition\">TypeDefinition</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<h3>Adds a callback function <code>callback</code> which is invoked when a type name cannot be resolved.</h3> <p>The callback may return a type definition, which is then used for the expected type. If it returns null, the type is considered to still not exist.</p> \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <a href=\"#parse\">parse</a> (expr:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<h3>Parses <code>expr</code> as haxe code, returning the corresponding AST.</h3> <h3>String interpolation of single quote strings within <code>expr</code> is not supported.</h3> <p>The provided <code><a href=\"position\">Position</a></code> <code>pos</code> is used for all generated inner AST nodes.</p> \n<h3 id=\"parseInlineString\"><code><span class=\"label\">static</span> <a href=\"#parseInlineString\">parseInlineString</a> (expr:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<p>Similar to <code>parse</code>, but error positions are reported within the provided String <code>expr</code>.</p> \n<h3 id=\"registerModuleDependency\"><code><span class=\"label\">static</span> <a href=\"#registerModuleDependency\">registerModuleDependency</a> (modulePath:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, externFile:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Manually adds a dependency between module <code>modulePath</code> and an external file <code>externFile</code>.</p> <h3>This affects the compilation cache, causing the module to be typed if <code>externFile</code> has changed.</h3> <p>Has no effect if the compilation cache is not used.</p> \n<h3 id=\"registerModuleReuseCall\"><code><span class=\"label\">static</span> <a href=\"#registerModuleReuseCall\">registerModuleReuseCall</a> (modulePath:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, macroCall:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Add a macro call to perform in case the module is reused by the compilation cache.</p> \n<h3 id=\"resolvePath\"><code><span class=\"label\">static</span> <a href=\"#resolvePath\">resolvePath</a> (file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Resolves a file name <code>file</code> based on the current class paths.</h3> <p>The resolution follows the usual class path rules where the last declared class path has priority.</p> <p>If a class path was declared relative, this method returns the relative file path. Otherwise it returns the absolute file path.</p> \n<h3 id=\"signature\"><code><span class=\"label\">static</span> <a href=\"#signature\">signature</a> (v:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<h3>Returns a hashed MD5 signature of value <code>v</code>.</h3> \n<h3 id=\"storeTypedExpr\"><code><span class=\"label\">static</span> <a href=\"#storeTypedExpr\">storeTypedExpr</a> (t:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<h3>Store typed expression <code>t</code> internally and give a syntax-level expression that can be returned from a macro and will be replaced by the stored typed expression.</h3> <h3>If <code>t</code> is null or invalid, an exception is thrown.</h3> <p>NOTE: the returned value references an internally stored typed expression that is reset between compilations, so care should be taken when storing the expression returned by this method in a static variable and using the compilation server.</p> \n<h3 id=\"toComplexType\"><code><span class=\"label\">static</span> <a href=\"#toComplexType\">toComplexType</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;</code></h3>\n<p>Returns the <code><a href=\"complextype\">ComplexType</a></code> corresponding to the given <code><a href=\"../../type\">Type</a></code> <code>t</code>.</p> <h3>See <code><a href=\"typetools#toComplexType\">haxe.macro.TypeTools.toComplexType</a></code> for details.</h3> \n<h3 id=\"typeExpr\"><code><span class=\"label\">static</span> <a href=\"#typeExpr\">typeExpr</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a></code></h3>\n<p>Types expression <code>e</code> and returns the corresponding <code><a href=\"typedexpr\">TypedExpr</a></code>.</p> <h3>Typing the expression may result in an compiler error which can be caught using <code>try ... catch</code>.</h3> \n<h3 id=\"typeof\"><code><span class=\"label\">static</span> <a href=\"#typeof\">typeof</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<h3>Types expression <code>e</code> and returns its type.</h3> <h3>Typing the expression may result in an compiler error which can be caught using <code>try ... catch</code>.</h3> \n<h3 id=\"unify\"><code><span class=\"label\">static</span> <a href=\"#unify\">unify</a> (t1:<a class=\"type\" title=\"\" href=\"type\">Type</a>, t2:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Returns true if <code>t1</code> and <code>t2</code> unify, false otherwise.</p> \n<h3 id=\"warning\"><code><span class=\"label\">static</span> <a href=\"#warning\">warning</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Displays a compilation warning <code>msg</code> at the given <code><a href=\"position\">Position</a></code> <code>pos</code>.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Context.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Context.html</a>\n  </p>\n</div>\n","haxe/macro/macrostringtools":"<h1> class MacroStringTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides some utility methods to work with strings in macro context.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"formatString\"><code><span class=\"label\">static</span> <a href=\"#formatString\">formatString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):Unknown</code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Formats <code><a href=\"../../string\">String</a></code> <code>s</code> using the usual interpolation rules.</p> <p>The returned expression is a concatenation of string parts and escaped elements.</p> \n<h3 id=\"isFormatExpr\"><code><span class=\"label\">static</span> <a href=\"#isFormatExpr\">isFormatExpr</a> (e:<a class=\"type\" title=\"\" href=\"exprof\">ExprOf</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Tells if <code>e</code> is a format string, i.e. uses single quotes <code>'</code> as delimiters.</p> <h3>This only works if <code>e</code> has a position which the compiler can find. While this is true for any expressions appearing in real Haxe code (i.e. some .hx file), it might not work for expressions generated by macros.</h3> <h3>This operation depends on the position of <code>e</code>.</h3> \n<h3 id=\"toComplex\"><code><span class=\"label\">static</span> <a href=\"#toComplex\">toComplex</a> (path:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a></code></h3>\n \n<h3 id=\"toDotPath\"><code><span class=\"label\">static</span> <a href=\"#toDotPath\">toDotPath</a> (pack:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Converts a path given by package <code>pack</code> and name <code>name</code> to a <code><a href=\"../../string\">String</a></code> separated by dots.</p> <p>If <code>pack</code> has no elements, the result is <code>name</code>.</p> <h3>If <code>pack</code> is null, the result is unspecified.</h3> <p>Otherwise the elements of <code>pack</code> are joined with a separating dot, with an appended dot separating the result from <code>name</code>.</p> \n<h3 id=\"toFieldExpr\"><code><span class=\"label\">static</span> <a href=\"#toFieldExpr\">toFieldExpr</a> (sl:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"\" href=\"expr\">Expr</a></code></h3>\n<h3>Converts an array of Strings <code>sl</code> to a field expression.</h3> <h3>If <code>sl</code> has no elements, the result is null.</h3> <p>If <code>sl</code> has one element, the result is <code>EConst(CIdent(sl[0])</code>.</p> <h3>Otherwise the result is a chain of <code>EField</code> nodes.</h3> <h3>If <code>sl</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/MacroStringTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/MacroStringTools.html</a>\n  </p>\n</div>\n","haxe/macro/macrotype":"<h1> class MacroType&lt;<span class=\"type\">Const</span>&gt; </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This type is meant to be used to generate custom types using a macro. For instance by doing MacroType&lt;[my.Class.myMacro(55)]&gt;</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/MacroType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/MacroType.html</a>\n  </p>\n</div>\n","haxe/macro/metaaccess":"<h1>typedef MetaAccess </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>MetaAccess is a wrapper for the <code><a href=\"metadata\">Metadata</a></code> array. It can be used to add metadata to and remove metadata from its origin.</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"remove\"><code><a href=\"#remove\">remove</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Removes all <code>name</code> metadata entries from the origin of <code>this</code> MetaAccess.</p> <p>This method might clear several metadata entries of the same name.</p> <p>If a <code><a href=\"metadata\">Metadata</a></code> array is obtained through a call to <code>get</code>, a subsequent call to <code>remove</code> has no effect on that array.</p> <h3>If <code>name</code> is null, compilation fails with an error.</h3> \n<h3 id=\"has\"><code><a href=\"#has\">has</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>Tells if the origin of <code>this</code> MetaAccess has a <code>name</code> metadata entry.</p> <h3>If <code>name</code> is null, compilation fails with an error.</h3> \n<h3 id=\"get\"><code><a href=\"#get\">get</a> ():<a class=\"type\" title=\"\" href=\"metadata\">Metadata</a></code></h3>\n<h3>Return the wrapped <code><a href=\"metadata\">Metadata</a></code> array.</h3> <p>Modifying this array has no effect on the origin of <code>this</code> MetaAccess. The <code>add</code> and <code>remove</code> methods can be used for that.</p> \n<h3 id=\"extract\"><code><a href=\"#extract\">extract</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"metadataentry\">MetadataEntry</a>&gt;</code></h3>\n<h3>Extract metadata entries by given <code>name</code>.</h3> <p>If there's no metadata with such name, empty array is returned.</p> <h3>If <code>name</code> is null, compilation fails with an error.</h3> \n<h3 id=\"add\"><code><a href=\"#add\">add</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;, pos:<a class=\"type\" title=\"\" href=\"position\">Position</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Adds the metadata specified by <code>name</code>, <code>params</code> and <code>pos</code> to the origin of <code>this</code> MetaAccess.</p> <p>Metadata names are not unique during compilation, so this method never overwrites a previous metadata.</p> <p>If a <code><a href=\"metadata\">Metadata</a></code> array is obtained through a call to <code>get</code>, a subsequent call to <code>add</code> has no effect on that array.</p> <p>If any argument is null, compilation fails with an error.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/MetaAccess.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/MetaAccess.html</a>\n  </p>\n</div>\n","haxe/macro/metadata":"<h1>typedef Metadata </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"metadataentry\">MetadataEntry</a>&gt; </p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Metadata.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Metadata.html</a>\n  </p>\n</div>\n","haxe/macro/metadataentry":"<h1>typedef MetadataEntry </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/MetadataEntry.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/MetadataEntry.html</a>\n  </p>\n</div>\n","haxe/macro/methodkind":"<h1>enum MethodKind </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"MethNormal\"><code>MethNormal        </code></h3>\n <h3 id=\"MethInline\"><code>MethInline        </code></h3>\n <h3 id=\"MethDynamic\"><code>MethDynamic        </code></h3>\n <h3 id=\"MethMacro\"><code>MethMacro        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/MethodKind.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/MethodKind.html</a>\n  </p>\n</div>\n","haxe/macro/moduletype":"<h1>enum ModuleType </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TClassDecl\"><code>TClassDecl                    (c:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;)        </code></h3>\n <h3 id=\"TEnumDecl\"><code>TEnumDecl                    (e:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"enumtype\">EnumType</a>&gt;)        </code></h3>\n <h3 id=\"TTypeDecl\"><code>TTypeDecl                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"deftype\">DefType</a>&gt;)        </code></h3>\n <h3 id=\"TAbstract\"><code>TAbstract                    (a:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"abstracttype\">AbstractType</a>&gt;)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/ModuleType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/ModuleType.html</a>\n  </p>\n</div>\n","haxe/macro/position":"<h1>typedef Position </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"min\"><code> <a href=\"#min\">min</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"max\"><code> <a href=\"#max\">max</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Position.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Position.html</a>\n  </p>\n</div>\n","haxe/macro/positiontools":"<h1> class PositionTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getInfos\"><code><span class=\"label\">static</span> <a href=\"#getInfos\">getInfos</a> (p:<a class=\"type\" title=\"\" href=\"position\">Position</a>):{min:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, max:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}</code></h3>\n<h3>Like <code><a href=\"context#getPosInfos\">Context.getPosInfos</a></code>, except this method is available on all platforms.</h3> \n<h3 id=\"here\"><code><span class=\"label\">static</span> <a href=\"#here\">here</a> ():<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n<p>Returns the <code><a href=\"position\">Position</a></code> where the caller of <code>here</code> is.</p> \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (inf:{min:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, max:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, file:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}):<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n<h3>Like <code><a href=\"context#makePosition\">Context.makePosition</a></code>, except this method is available on all platforms.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/PositionTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/PositionTools.html</a>\n  </p>\n</div>\n","haxe/macro/printer":"<h1> class Printer </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (tabString:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> = \"\\t\")</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"printAccess\"><code><a href=\"#printAccess\">printAccess</a> (access:<a class=\"type\" title=\"\" href=\"access\">Access</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printBinop\"><code><a href=\"#printBinop\">printBinop</a> (op:<a class=\"type\" title=\"\" href=\"binop\">Binop</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printComplexType\"><code><a href=\"#printComplexType\">printComplexType</a> (ct:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printConstant\"><code><a href=\"#printConstant\">printConstant</a> (c:<a class=\"type\" title=\"\" href=\"constant\">Constant</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printExpr\"><code><a href=\"#printExpr\">printExpr</a> (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printExprs\"><code><a href=\"#printExprs\">printExprs</a> (el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;, sep:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printField\"><code><a href=\"#printField\">printField</a> (field:<a class=\"type\" title=\"\" href=\"field\">Field</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printFormatString\"><code><a href=\"#printFormatString\">printFormatString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printFunction\"><code><a href=\"#printFunction\">printFunction</a> (func:<a class=\"type\" title=\"\" href=\"function\">Function</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printFunctionArg\"><code><a href=\"#printFunctionArg\">printFunctionArg</a> (arg:<a class=\"type\" title=\"\" href=\"functionarg\">FunctionArg</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printMetadata\"><code><a href=\"#printMetadata\">printMetadata</a> (meta:<a class=\"type\" title=\"\" href=\"metadataentry\">MetadataEntry</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printString\"><code><a href=\"#printString\">printString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printTypeDefinition\"><code><a href=\"#printTypeDefinition\">printTypeDefinition</a> (t:<a class=\"type\" title=\"\" href=\"typedefinition\">TypeDefinition</a>, printPackage:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printTypeParam\"><code><a href=\"#printTypeParam\">printTypeParam</a> (param:<a class=\"type\" title=\"\" href=\"typeparam\">TypeParam</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printTypeParamDecl\"><code><a href=\"#printTypeParamDecl\">printTypeParamDecl</a> (tpd:<a class=\"type\" title=\"\" href=\"typeparamdecl\">TypeParamDecl</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printTypePath\"><code><a href=\"#printTypePath\">printTypePath</a> (tp:<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printUnop\"><code><a href=\"#printUnop\">printUnop</a> (op:<a class=\"type\" title=\"\" href=\"unop\">Unop</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"printVar\"><code><a href=\"#printVar\">printVar</a> (v:<a class=\"type\" title=\"\" href=\"var\">Var</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Printer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Printer.html</a>\n  </p>\n</div>\n","haxe/macro/ref":"<h1>typedef Ref&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"toString\"><code><a href=\"#toString\">toString</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"get\"><code><a href=\"#get\">get</a> ():<span class=\"type\">T</span> </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Ref.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Ref.html</a>\n  </p>\n</div>\n","haxe/macro/tcomplextypetools":"<h1>typedef TComplexTypeTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"This class provides some utility methods to work with AST-level types.\" href=\"complextypetools\">ComplexTypeTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TComplexTypeTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TComplexTypeTools.html</a>\n  </p>\n</div>\n","haxe/macro/tconstant":"<h1>enum TConstant </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TInt\"><code>TInt                    (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n <h3 id=\"TFloat\"><code>TFloat                    (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"TString\"><code>TString                    (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"TBool\"><code>TBool                    (b:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"TNull\"><code>TNull        </code></h3>\n <h3 id=\"TThis\"><code>TThis        </code></h3>\n <h3 id=\"TSuper\"><code>TSuper        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TConstant.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TConstant.html</a>\n  </p>\n</div>\n","haxe/macro/texprtools":"<h1>typedef TExprTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"This class provides some utility methods to work with expressions.\" href=\"exprtools\">ExprTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>This class can be added via 'using haxe.macro.Tools' in order to enable 'using' functionality on all macro tool classes listed below.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TExprTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TExprTools.html</a>\n  </p>\n</div>\n","haxe/macro/tfunc":"<h1>typedef TFunc </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"t\"><code> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a></code></h3>\n \n<h3 id=\"args\"><code> <a href=\"#args\">args</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{value:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"tconstant\">TConstant</a>&gt;, v:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a>}&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TFunc.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TFunc.html</a>\n  </p>\n</div>\n","haxe/macro/tmacrostringtools":"<h1>typedef TMacroStringTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"This class provides some utility methods to work with strings in macro context.\" href=\"macrostringtools\">MacroStringTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TMacroStringTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TMacroStringTools.html</a>\n  </p>\n</div>\n","haxe/macro/tpositiontools":"<h1>typedef TPositionTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"\" href=\"positiontools\">PositionTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TPositionTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TPositionTools.html</a>\n  </p>\n</div>\n","haxe/macro/ttypetools":"<h1>typedef TTypeTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"This class provides some utility methods to work with types.\" href=\"typetools\">TypeTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TTypeTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TTypeTools.html</a>\n  </p>\n</div>\n","haxe/macro/jsgenapi":"<h1>typedef JSGenApi </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p> <div class=\"indent\"> <p>This is the api that is passed to the custom JS generator.</p> </div> <h2 class=\"section\">Properties</h2>  \n<h3 id=\"types\"><code> <a href=\"#types\">types</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;</code></h3>\n<p>all the types that were compiled by Haxe</p> \n<h3 id=\"setTypeAccessor\"><code><a href=\"#setTypeAccessor\">setTypeAccessor</a> (callb:<a class=\"type\" title=\"\" href=\"type\">Type</a> ‑&gt; <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>define the JS code that gets generated when a class or enum is accessed in a typed expression</p> \n<h3 id=\"setCurrentClass\"><code><a href=\"#setCurrentClass\">setCurrentClass</a> (c:<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>select the current classe</p> \n<h3 id=\"quoteString\"><code><a href=\"#quoteString\">quoteString</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>quote and escape the given string constant</p> \n<h3 id=\"outputFile\"><code> <a href=\"#outputFile\">outputFile</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>the file in which the JS code can be generated</p> \n<h3 id=\"main\"><code> <a href=\"#main\">main</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;</code></h3>\n<p>the main call expression, if a -main class is defined</p> \n<h3 id=\"isKeyword\"><code><a href=\"#isKeyword\">isKeyword</a> (ident:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>tells if the given identifier is a JS keyword</p> \n<h3 id=\"hasFeature\"><code><a href=\"#hasFeature\">hasFeature</a> (f:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>check if a feature is used</p> \n<h3 id=\"generateValue\"><code><a href=\"#generateValue\">generateValue</a> (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>generate the JS code for a given typed expression-value</p> \n<h3 id=\"generateStatement\"><code><a href=\"#generateStatement\">generateStatement</a> (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>generate the JS code for any given typed expression</p> \n<h3 id=\"buildMetaData\"><code><a href=\"#buildMetaData\">buildMetaData</a> (t:<a class=\"type\" title=\"\" href=\"basetype\">BaseType</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;</code></h3>\n<p>create the metadata expression for the given type</p> \n<h3 id=\"addFeature\"><code><a href=\"#addFeature\">addFeature</a> (f:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p>add a feature</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/JSGenApi.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/JSGenApi.html</a>\n  </p>\n</div>\n","haxe/macro/ttypedexprtools":"<h1>typedef TTypedExprTools </h1>\n<p>package haxe.macro</p> <p> alias for <a class=\"type\" title=\"\" href=\"typedexprtools\">TypedExprTools</a> </p> \n<p>defined in haxe.macro.Tools</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TTypedExprTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TTypedExprTools.html</a>\n  </p>\n</div>\n","haxe/macro/tvar":"<h1>typedef TVar </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"t\"><code> <span class=\"label\">read only</span> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"name\"><code> <span class=\"label\">read only</span> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"id\"><code> <span class=\"label\">read only</span> <a href=\"#id\">id</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"extra\"><code> <span class=\"label\">read only</span> <a href=\"#extra\">extra</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;{params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;, expr:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"capture\"><code> <span class=\"label\">read only</span> <a href=\"#capture\">capture</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TVar.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TVar.html</a>\n  </p>\n</div>\n","haxe/macro/type":"<h1>enum Type </h1>\n<p>package haxe.macro</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TMono\"><code>TMono                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;&gt;)        </code></h3>\n<p>Represents a monomorph.</p> <p>@see http://haxe.org/manual/types-monomorph.html</p> <h3 id=\"TEnum\"><code>TEnum                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"enumtype\">EnumType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n<p>Represents an enum instance.</p> <p>@see http://haxe.org/manual/types-enum-instance.html</p> <h3 id=\"TInst\"><code>TInst                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n<p>Represents a class instance.</p> <p>@see http://haxe.org/manual/types-class-instance.html</p> <h3 id=\"TType\"><code>TType                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"deftype\">DefType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n<p>Represents a typedef.</p> <p>@see http://haxe.org/manual/type-system-typedef.html</p> <h3 id=\"TFun\"><code>TFun                    (args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, opt:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt;, ret:<a class=\"type\" title=\"\" href=\"type\">Type</a>)        </code></h3>\n<p>Represents a function type.</p> <p>@see http://haxe.org/manual/types-function.html</p> <h3 id=\"TAnonymous\"><code>TAnonymous                    (a:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"anontype\">AnonType</a>&gt;)        </code></h3>\n<p>Represents an anonymous structure type.</p> <p>@see http://haxe.org/manual/types-anonymous-structure.html</p> <h3 id=\"TDynamic\"><code>TDynamic                    (t:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n<p>Represents Dynamic.</p> <p>@see http://haxe.org/manual/types-dynamic.html</p> <h3 id=\"TLazy\"><code>TLazy                    (f:<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a> ‑&gt; <a class=\"type\" title=\"\" href=\"type\">Type</a>)        </code></h3>\n<p>Used internally by the compiler to delay some typing.</p> <h3 id=\"TAbstract\"><code>TAbstract                    (t:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"abstracttype\">AbstractType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;)        </code></h3>\n<p>Represents an abstract type.</p> <p>@see http://haxe.org/manual/types-abstract.html</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Type.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Type.html</a>\n  </p>\n</div>\n","haxe/macro/typedefkind":"<h1>enum TypeDefKind </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TDEnum\"><code>TDEnum        </code></h3>\n <h3 id=\"TDStructure\"><code>TDStructure        </code></h3>\n <h3 id=\"TDClass\"><code>TDClass                    (superClass:<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>, interfaces:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typepath\">TypePath</a>&gt;, isInterface:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"TDAlias\"><code>TDAlias                    (t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n <h3 id=\"TDAbstract\"><code>TDAbstract                    (tthis:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;, from:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;, to:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeDefKind.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeDefKind.html</a>\n  </p>\n</div>\n","haxe/macro/typedefinition":"<h1>typedef TypeDefinition </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparamdecl\">TypeParamDecl</a>&gt;&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"metadata\">Metadata</a>&gt;</code></h3>\n \n<h3 id=\"kind\"><code> <a href=\"#kind\">kind</a>:<a class=\"type\" title=\"\" href=\"typedefkind\">TypeDefKind</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>&gt;</code></h3>\n \n<h3 id=\"fields\"><code> <a href=\"#fields\">fields</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"field\">Field</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeDefinition.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeDefinition.html</a>\n  </p>\n</div>\n","haxe/macro/typeparam":"<h1>enum TypeParam </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TPType\"><code>TPType                    (t:<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>)        </code></h3>\n <h3 id=\"TPExpr\"><code>TPExpr                    (e:<a class=\"type\" title=\"\" href=\"expr\">Expr</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeParam.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeParam.html</a>\n  </p>\n</div>\n","haxe/macro/typeparamdecl":"<h1>typedef TypeParamDecl </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparamdecl\">TypeParamDecl</a>&gt;&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"constraints\"><code> <a href=\"#constraints\">constraints</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeParamDecl.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeParamDecl.html</a>\n  </p>\n</div>\n","haxe/macro/typepath":"<h1>typedef TypePath </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"sub\"><code> <a href=\"#sub\">sub</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;&gt;</code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparam\">TypeParam</a>&gt;&gt;</code></h3>\n \n<h3 id=\"pack\"><code> <a href=\"#pack\">pack</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypePath.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypePath.html</a>\n  </p>\n</div>\n","haxe/macro/varaccess":"<h1>enum VarAccess </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"AccNormal\"><code>AccNormal        </code></h3>\n <h3 id=\"AccNo\"><code>AccNo        </code></h3>\n <h3 id=\"AccNever\"><code>AccNever        </code></h3>\n <h3 id=\"AccResolve\"><code>AccResolve        </code></h3>\n <h3 id=\"AccCall\"><code>AccCall        </code></h3>\n <h3 id=\"AccInline\"><code>AccInline        </code></h3>\n <h3 id=\"AccRequire\"><code>AccRequire                    (r:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/VarAccess.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/VarAccess.html</a>\n  </p>\n</div>\n","haxe/remoting/asyncadapter":"<h1> class AsyncAdapter </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Build an AsyncConnection from a synchronized Connection.</p> </div>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> (cnx:<a class=\"type\" title=\"\" href=\"connection\">Connection</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/AsyncAdapter.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/AsyncAdapter.html</a>\n  </p>\n</div>\n","haxe/macro/typeparameter":"<h1>typedef TypeParameter </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"t\"><code> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeParameter.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeParameter.html</a>\n  </p>\n</div>\n","haxe/macro/typetools":"<h1> class TypeTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class provides some utility methods to work with types. It is best used through 'using haxe.macro.TypeTools' syntax and then provides additional methods on haxe.macro.Type instances.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"applyTypeParameters\"><code><span class=\"label\">static</span> <a href=\"#applyTypeParameters\">applyTypeParameters</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, typeParameters:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typeparameter\">TypeParameter</a>&gt;, concreteTypes:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Applies the type parameters <code>typeParameters</code> to type <code>t</code> with the given types <code>concreteTypes</code>.</p> <p>This function replaces occurences of type parameters in <code>t</code> if they are part of <code>typeParameters</code>. The array index of such a type parameter is then used to lookup the concrete type in <code>concreteTypes</code>.</p> <p>If <code>typeParameters.length</code> is not equal to <code>concreteTypes.length</code>, an exception of type <code><a href=\"../../string\">String</a></code> is thrown.</p> <p>If <code>typeParameters.length</code> is 0, <code>t</code> is returned unchanged.</p> <h3>If either argument is <code><a href=\"../../null\">null</a></code>, the result is unspecified.</h3> \n<h3 id=\"findField\"><code><span class=\"label\">static</span> <a href=\"#findField\">findField</a> (c:<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, isStatic:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = false):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;</code></h3>\n<p>Resolves the field named <code>name</code> on class <code>c</code>.</p> <h3>If <code>isStatic</code> is true, the classes' static fields are checked. Otherwise the classes' member fields are checked.</h3> <p>If the field is found, it is returned. Otherwise if <code>c</code> has a super class, <code>findField</code> recursively checks that super class. Otherwise null is returned.</p> <p>If any argument is null, the result is unspecified.</p> \n<h3 id=\"follow\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#follow\">follow</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, ?once:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<h3>Follows all typedefs of <code>t</code> to reach the actual type.</h3> <h3>If <code>once</code> is true, this function does not call itself recursively, otherwise it does. This can be useful in cases where intermediate typedefs might be of interest.</h3> <p>Affected types are monomorphs <code>TMono</code> and typedefs <code>TType(t,pl)</code>.</p> <h3>If <code>t</code> is null, an internal exception is thrown.</h3> <p>Usage example:</p> <pre><code>var t = Context.typeof(macro null); // TMono(&lt;mono&gt;)\nvar ts = Context.typeof(macro \"foo\"); //TInst(String,[])\nContext.unify(t, ts);\ntrace(t); // TMono(&lt;mono&gt;)\ntrace(t.follow()); //TInst(String,[])\n</code></pre> \n<h3 id=\"getClass\"><code><span class=\"label\">static</span> <a href=\"#getClass\">getClass</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<h3>Tries to extract the class instance stored inside <code>t</code>.</h3> <p>If <code>t</code> is a class instance <code>TInst(c,pl)</code>, c is returned.</p> <h3>If <code>t</code> is of a different type, an exception of type String is thrown.</h3> <h3>If <code>t</code> is null, the result is null.</h3> \n<h3 id=\"getEnum\"><code><span class=\"label\">static</span> <a href=\"#getEnum\">getEnum</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"\" href=\"enumtype\">EnumType</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<h3>Tries to extract the enum instance stored inside <code>t</code>.</h3> <p>If <code>t</code> is an enum instance <code>TEnum(e,pl)</code>, e is returned.</p> <h3>If <code>t</code> is of a different type, an exception of type String is thrown.</h3> <h3>If <code>t</code> is null, the result is null.</h3> \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, f:<a class=\"type\" title=\"\" href=\"type\">Type</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Calls function <code>f</code> on each component of type <code>t</code>.</p> <h3>If <code>t</code> is not a compound type, this operation has no effect.</h3> <p>The following types are considered compound:</p> <pre><code>- TInst, TEnum, TType and TAbstract with type parameters\n- TFun\n- TAnonymous\n</code></pre> <p>If <code>t</code> or <code>f</code> are null, the result is unspecified.</p> \n<h3 id=\"map\"><code><span class=\"label\">static</span> <a href=\"#map\">map</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>, f:<a class=\"type\" title=\"\" href=\"type\">Type</a> ‑&gt; <a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Transforms <code>t</code> by calling <code>f</code> on each of its subtypes.</p> <p>If <code>t</code> is a compound type, <code>f</code> is called on each of its components.</p> <h3>Otherwise <code>t</code> is returned unchanged.</h3> <p>The following types are considered compound:</p> <pre><code>- TInst, TEnum, TType and TAbstract with type parameters\n- TFun\n- TAnonymous\n</code></pre> <p>If <code>t</code> or <code>f</code> are null, the result is unspecified.</p> \n<h3 id=\"toComplexType\"><code><span class=\"label\">static</span> <a href=\"#toComplexType\">toComplexType</a> (type:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;</code></h3>\n<h3>Returns a syntax-level type corresponding to Type <code>t</code>.</h3> <h3>This function is mostly inverse to <code><a href=\"complextypetools#toType\">ComplexTypeTools.toType</a></code>, but may lose some information on types that do not have a corresponding syntax version, such as monomorphs. In these cases, the result is null.</h3> <h3>If <code>t</code> is null, an internal exception is thrown.</h3> \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (t:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<h3>Converts type <code>t</code> to a human-readable String representation.</h3> \n<h3 id=\"unify\"><code><span class=\"label\">static</span> <span class=\"label\">inline</span> <a href=\"#unify\">unify</a> (t1:<a class=\"type\" title=\"\" href=\"type\">Type</a>, t2:<a class=\"type\" title=\"\" href=\"type\">Type</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<p>Returns true if <code>t1</code> and <code>t2</code> unify, false otherwise.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypeTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypeTools.html</a>\n  </p>\n</div>\n","haxe/macro/typedexpr":"<h1>typedef TypedExpr </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"t\"><code> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"type\">Type</a></code></h3>\n \n<h3 id=\"pos\"><code> <a href=\"#pos\">pos</a>:<a class=\"type\" title=\"\" href=\"position\">Position</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"\" href=\"typedexprdef\">TypedExprDef</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypedExpr.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypedExpr.html</a>\n  </p>\n</div>\n","haxe/macro/typedexprdef":"<h1>enum TypedExprDef </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Type</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TConst\"><code>TConst                    (c:<a class=\"type\" title=\"\" href=\"tconstant\">TConstant</a>)        </code></h3>\n <h3 id=\"TLocal\"><code>TLocal                    (v:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a>)        </code></h3>\n <h3 id=\"TArray\"><code>TArray                    (e1:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, e2:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TBinop\"><code>TBinop                    (op:<a class=\"type\" title=\"\" href=\"binop\">Binop</a>, e1:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, e2:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TField\"><code>TField                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, fa:<a class=\"type\" title=\"\" href=\"fieldaccess\">FieldAccess</a>)        </code></h3>\n <h3 id=\"TTypeExpr\"><code>TTypeExpr                    (m:<a class=\"type\" title=\"\" href=\"moduletype\">ModuleType</a>)        </code></h3>\n <h3 id=\"TParenthesis\"><code>TParenthesis                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TObjectDecl\"><code>TObjectDecl                    (fields:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, expr:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>}&gt;)        </code></h3>\n <h3 id=\"TArrayDecl\"><code>TArrayDecl                    (el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TCall\"><code>TCall                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TNew\"><code>TNew                    (c:<a class=\"type\" title=\"\" href=\"ref\">Ref</a>&lt;<a class=\"type\" title=\"\" href=\"classtype\">ClassType</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"type\">Type</a>&gt;, el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TUnop\"><code>TUnop                    (op:<a class=\"type\" title=\"\" href=\"unop\">Unop</a>, postFix:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TFunction\"><code>TFunction                    (tfunc:<a class=\"type\" title=\"\" href=\"tfunc\">TFunc</a>)        </code></h3>\n <h3 id=\"TVar\"><code>TVar                    (v:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a>, expr:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TBlock\"><code>TBlock                    (el:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TFor\"><code>TFor                    (v:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a>, e1:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, e2:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TIf\"><code>TIf                    (econd:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, eif:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, eelse:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TWhile\"><code>TWhile                    (econd:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, normalWhile:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"TSwitch\"><code>TSwitch                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, cases:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{values:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;, expr:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>}&gt;, edef:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TTry\"><code>TTry                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, catches:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{v:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a>, expr:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>}&gt;)        </code></h3>\n <h3 id=\"TReturn\"><code>TReturn                    (e:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>&gt;)        </code></h3>\n <h3 id=\"TBreak\"><code>TBreak        </code></h3>\n <h3 id=\"TContinue\"><code>TContinue        </code></h3>\n <h3 id=\"TThrow\"><code>TThrow                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TCast\"><code>TCast                    (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, m:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"moduletype\">ModuleType</a>&gt;)        </code></h3>\n <h3 id=\"TMeta\"><code>TMeta                    (m:<a class=\"type\" title=\"\" href=\"metadataentry\">MetadataEntry</a>, e1:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>)        </code></h3>\n <h3 id=\"TEnumParameter\"><code>TEnumParameter                    (e1:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, ef:<a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>, index:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypedExprDef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypedExprDef.html</a>\n  </p>\n</div>\n","haxe/macro/typedexprtools":"<h1> class TypedExprTools </h1>\n<p>package haxe.macro</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"iter\"><code><span class=\"label\">static</span> <a href=\"#iter\">iter</a> (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, f:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p>Calls function [f] on each sub-expression of [e].</p> <h3>See <code><a href=\"exprtools#iter\">haxe.macro.ExprTools.iter</a></code> for details on iterating expressions in general. This function works the same way, but with a different data structure.</h3> \n<h3 id=\"map\"><code><span class=\"label\">static</span> <a href=\"#map\">map</a> (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, f:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a> ‑&gt; <a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>):<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a></code></h3>\n<p>Transforms the sub-expressions of [e] by calling [f] on each of them.</p> <h3>See <code><a href=\"exprtools#map\">haxe.macro.ExprTools.map</a></code> for details on expression mapping in general. This function works the same way, but with a different data structure.</h3> \n<h3 id=\"mapWithType\"><code><span class=\"label\">static</span> <a href=\"#mapWithType\">mapWithType</a> (e:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, f:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a> ‑&gt; <a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, ft:<a class=\"type\" title=\"\" href=\"type\">Type</a> ‑&gt; <a class=\"type\" title=\"\" href=\"type\">Type</a>, fv:<a class=\"type\" title=\"\" href=\"tvar\">TVar</a> ‑&gt; <a class=\"type\" title=\"\" href=\"tvar\">TVar</a>):<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a></code></h3>\n<p>Transforms the sub-expressions of [e] by calling [f] on each of them. Additionally, types are mapped using <code>ft</code> and variables are mapped using <code>fv</code>.</p> <h3>See <code><a href=\"exprtools#map\">haxe.macro.ExprTools.map</a></code> for details on expression mapping in general. This function works the same way, but with a different data structure.</h3> \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (t:<a class=\"type\" title=\"\" href=\"typedexpr\">TypedExpr</a>, pretty:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = false):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/TypedExprTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/TypedExprTools.html</a>\n  </p>\n</div>\n","haxe/macro/unop":"<h1>enum Unop </h1>\n<p>package haxe.macro</p>\n\n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"OpIncrement\"><code>OpIncrement        </code></h3>\n<h3><code>++</code></h3> <h3 id=\"OpDecrement\"><code>OpDecrement        </code></h3>\n<h3><code>--</code></h3> <h3 id=\"OpNot\"><code>OpNot        </code></h3>\n<h3><code>!</code></h3> <h3 id=\"OpNeg\"><code>OpNeg        </code></h3>\n<h3><code>-</code></h3> <h3 id=\"OpNegBits\"><code>OpNegBits        </code></h3>\n<h3><code>~</code></h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Unop.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Unop.html</a>\n  </p>\n</div>\n","haxe/macro/var":"<h1>typedef Var </h1>\n<p>package haxe.macro</p> \n<p>defined in haxe.macro.Expr</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"complextype\">ComplexType</a>&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"expr\">Expr</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/macro/Var.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/macro/Var.html</a>\n  </p>\n</div>\n","haxe/remoting/amfconnection":"<h1> class AMFConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"connect\"><code><span class=\"label\">static</span> <a href=\"#connect\">connect</a> (nc:<a class=\"type\" title=\"\" href=\"http://api.haxe.org/flash/net/NetConnection.html\">NetConnection</a>):<a class=\"type\" title=\"\" href=\"amfconnection\">AMFConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n \n<h3 id=\"registerClassAlias\"><code><span class=\"label\">static</span> <a href=\"#registerClassAlias\">registerClassAlias</a> (s:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, cl:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"../../class\">Class</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n \n<h3 id=\"urlConnect\"><code><span class=\"label\">static</span> <a href=\"#urlConnect\">urlConnect</a> (gatewayUrl:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"amfconnection\">AMFConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/AMFConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/AMFConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/asyncconnection":"<h1> interface AsyncConnection </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">implemented by</span> <a class=\"type\" title=\"\" href=\"amfconnection\">AMFConnection</a>, <a class=\"type\" title=\"Build an AsyncConnection from a synchronized Connection.\" href=\"asyncadapter\">AsyncAdapter</a>, <a class=\"type\" title=\"\" href=\"asyncdebugconnection\">AsyncDebugConnection</a>, <a class=\"type\" title=\"\" href=\"delayedconnection\">DelayedConnection</a>, <a class=\"type\" title=\"\" href=\"httpasyncconnection\">HttpAsyncConnection</a>, <a class=\"type\" title=\"\" href=\"localconnection\">LocalConnection</a>, <a class=\"type\" title=\"\" href=\"socketconnection\">SocketConnection</a> </p>    <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?result:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (error:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/AsyncConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/AsyncConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/asyncproxy":"<h1> class AsyncProxy&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class is magic. When you extend it with a class C, it will automaticaly create a stub class with all public methods forwarding remoting messages over the connection.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/AsyncProxy.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/AsyncProxy.html</a>\n  </p>\n</div>\n","haxe/remoting/asyncdebugconnection":"<h1> class AsyncDebugConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setCallDebug\"><code><a href=\"#setCallDebug\">setCallDebug</a> (h:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; ‑&gt; <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setErrorDebug\"><code><a href=\"#setErrorDebug\">setErrorDebug</a> (h:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; ‑&gt; <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setResultDebug\"><code><a href=\"#setResultDebug\">setResultDebug</a> (h:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; ‑&gt; <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> (cnx:<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a>):<a class=\"type\" title=\"\" href=\"asyncdebugconnection\">AsyncDebugConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/AsyncDebugConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/AsyncDebugConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/connection":"<h1> interface Connection </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">implemented by</span> <a class=\"type\" title=\"Synchronous communications between Flash and Javascript.\" href=\"externalconnection\">ExternalConnection</a>, <a class=\"type\" title=\"\" href=\"httpconnection\">HttpConnection</a>, <a class=\"type\" title=\"\" href=\"syncsocketconnection\">SyncSocketConnection</a> </p>    <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/Connection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/Connection.html</a>\n  </p>\n</div>\n","haxe/remoting/context":"<h1> class Context </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p> <p> <span class=\"muted\">extended by</span> <a class=\"type\" title=\"\" href=\"contextall\">ContextAll</a> </p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"addObject\"><code><a href=\"#addObject\">addObject</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, obj:{}, ?recursive:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (path:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"share\"><code><span class=\"label\">static</span> <a href=\"#share\">share</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, obj:{}):<a class=\"type\" title=\"\" href=\"context\">Context</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/Context.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/Context.html</a>\n  </p>\n</div>\n","haxe/remoting/contextall":"<h1> class ContextAll </h1>\n<p>package haxe.remoting</p> <p> extends <a class=\"type\" title=\"\" href=\"context\">Context</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<p class=\"availability\">Available on cpp, flash, js, macro, neko, php, python</p>\n  <h2 class=\"section\">Methods</h2><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/ContextAll.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/ContextAll.html</a>\n  </p>\n</div>\n","haxe/remoting/delayedconnection":"<h1> class DelayedConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Fields</h2>  \n<h3 id=\"connection\"><code> <a href=\"#connection\">connection</a>:<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> ():<a class=\"type\" title=\"\" href=\"delayedconnection\">DelayedConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/DelayedConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/DelayedConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/externalconnection":"<h1> class ExternalConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"connection\">Connection</a> </p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Synchronous communications between Flash and Javascript.</p> </div>  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (field:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"flashConnect\"><code><span class=\"label\">static</span> <a href=\"#flashConnect\">flashConnect</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, flashObjectID:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"Synchronous communications between Flash and Javascript.\" href=\"externalconnection\">ExternalConnection</a></code></h3>\n<p class=\"availability\">Available on js</p>\n \n<h3 id=\"jsConnect\"><code><span class=\"label\">static</span> <a href=\"#jsConnect\">jsConnect</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"Synchronous communications between Flash and Javascript.\" href=\"externalconnection\">ExternalConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/ExternalConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/ExternalConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/flashjsconnection":"<h1> class FlashJsConnection </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"connect\"><code><span class=\"label\">static</span> <a href=\"#connect\">connect</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, objId:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"\" href=\"flashjsconnection\">FlashJsConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/FlashJsConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/FlashJsConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/httpasyncconnection":"<h1> class HttpAsyncConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"urlConnect\"><code><span class=\"label\">static</span> <a href=\"#urlConnect\">urlConnect</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"httpasyncconnection\">HttpAsyncConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/HttpAsyncConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/HttpAsyncConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/httpconnection":"<h1> class HttpConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"connection\">Connection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n  <h2 class=\"section\">Static fields</h2>  \n<h3 id=\"TIMEOUT\"><code><span class=\"label\">static</span> <a href=\"#TIMEOUT\">TIMEOUT</a>:<a class=\"type\" title=\"The standard Float type, this is a double-precision IEEE 64bit float.\" href=\"../../float\">Float</a><span> = 10.</span> </code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"handleRequest\"><code><span class=\"label\">static</span> <a href=\"#handleRequest\">handleRequest</a> (ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<p class=\"availability\">Available on macro, neko, php</p>\n \n<h3 id=\"processRequest\"><code><span class=\"label\">static</span> <a href=\"#processRequest\">processRequest</a> (requestData:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"urlConnect\"><code><span class=\"label\">static</span> <a href=\"#urlConnect\">urlConnect</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"httpconnection\">HttpConnection</a></code></h3>\n<p class=\"availability\">Available on js, macro, neko, php</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/HttpConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/HttpConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/localconnection":"<h1> class LocalConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"connect\"><code><span class=\"label\">static</span> <a href=\"#connect\">connect</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>, ?allowDomains:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"\" href=\"localconnection\">LocalConnection</a></code></h3>\n<p class=\"availability\">Available on flash</p>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/LocalConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/LocalConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/socket":"<h1>typedef Socket </h1>\n<p>package haxe.remoting</p> <p> alias for <a class=\"type\" title=\"A TCP socket class : allow you to both connect to a given server and exchange messages or start your own server and wait for connections.\" href=\"../../sys/net/socket\">Socket</a> </p> \n<p>defined in haxe.remoting.SocketProtocol</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/Socket.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/Socket.html</a>\n  </p>\n</div>\n","haxe/remoting/socketconnection":"<h1> class SocketConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a> </p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, ?onResult:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"getProtocol\"><code><a href=\"#getProtocol\">getProtocol</a> ():<a class=\"type\" title=\"The Haxe Remoting Socket Protocol is composed of serialized string exchanges.\" href=\"socketprotocol\">SocketProtocol</a></code></h3>\n \n<h3 id=\"processMessage\"><code><a href=\"#processMessage\">processMessage</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"asyncconnection\">AsyncConnection</a></code></h3>\n \n<h3 id=\"setErrorHandler\"><code><a href=\"#setErrorHandler\">setErrorHandler</a> (h:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setErrorLogger\"><code><a href=\"#setErrorLogger\">setErrorLogger</a> (h:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; ‑&gt; <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"setProtocol\"><code><a href=\"#setProtocol\">setProtocol</a> (p:<a class=\"type\" title=\"The Haxe Remoting Socket Protocol is composed of serialized string exchanges.\" href=\"socketprotocol\">SocketProtocol</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> (s:<a class=\"type\" title=\"\" href=\"socket\">Socket</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"\" href=\"socketconnection\">SocketConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/SocketConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/SocketConnection.html</a>\n  </p>\n</div>\n","haxe/remoting/socketwrapper":"<h1> class SocketWrapper </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on flash</p>   <div class=\"indent\"> <p>See [js.XMLSocket]</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/SocketWrapper.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/SocketWrapper.html</a>\n  </p>\n</div>\n","haxe/remoting/syncsocketconnection":"<h1> class SyncSocketConnection </h1>\n<p>package haxe.remoting</p> <p> implements <a class=\"type\" title=\"\" href=\"connection\">Connection</a> </p> <p class=\"availability\">Available on cpp, macro, neko, php</p>     <h2 class=\"section\">Methods</h2>  \n<h3 id=\"call\"><code><a href=\"#call\">call</a> (params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"getProtocol\"><code><a href=\"#getProtocol\">getProtocol</a> ():<a class=\"type\" title=\"The Haxe Remoting Socket Protocol is composed of serialized string exchanges.\" href=\"socketprotocol\">SocketProtocol</a></code></h3>\n \n<h3 id=\"onRequestError\"><code><a href=\"#onRequestError\">onRequestError</a> (path:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;, exc:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"processRequest\"><code><a href=\"#processRequest\">processRequest</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"\" href=\"connection\">Connection</a></code></h3>\n \n<h3 id=\"setProtocol\"><code><a href=\"#setProtocol\">setProtocol</a> (p:<a class=\"type\" title=\"The Haxe Remoting Socket Protocol is composed of serialized string exchanges.\" href=\"socketprotocol\">SocketProtocol</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"create\"><code><span class=\"label\">static</span> <a href=\"#create\">create</a> (s:<a class=\"type\" title=\"\" href=\"socket\">Socket</a>, ?ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>):<a class=\"type\" title=\"\" href=\"syncsocketconnection\">SyncSocketConnection</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/SyncSocketConnection.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/SyncSocketConnection.html</a>\n  </p>\n</div>\n","haxe/rtti/abstractdef":"<h1>typedef Abstractdef </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"to\"><code> <a href=\"#to\">to</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>, field:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"impl\"><code> <a href=\"#impl\">impl</a>:<a class=\"type\" title=\"\" href=\"classdef\">Classdef</a></code></h3>\n \n<h3 id=\"from\"><code> <a href=\"#from\">from</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>, field:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;}&gt;</code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"athis\"><code> <a href=\"#athis\">athis</a>:<a class=\"type\" title=\"\" href=\"ctype\">CType</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Abstractdef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Abstractdef.html</a>\n  </p>\n</div>\n","haxe/rtti/ctype":"<h1>enum CType </h1>\n<p>package haxe.rtti</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"CUnknown\"><code>CUnknown        </code></h3>\n <h3 id=\"CEnum\"><code>CEnum                    (name:<a class=\"type\" title=\"\" href=\"path\">Path</a>, params:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;)        </code></h3>\n <h3 id=\"CClass\"><code>CClass                    (name:<a class=\"type\" title=\"\" href=\"path\">Path</a>, params:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;)        </code></h3>\n <h3 id=\"CTypedef\"><code>CTypedef                    (name:<a class=\"type\" title=\"\" href=\"path\">Path</a>, params:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;)        </code></h3>\n <h3 id=\"CFunction\"><code>CFunction                    (args:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"functionargument\">FunctionArgument</a>&gt;, ret:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>)        </code></h3>\n <h3 id=\"CAnonymous\"><code>CAnonymous                    (fields:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;)        </code></h3>\n <h3 id=\"CDynamic\"><code>CDynamic                    (t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>)        </code></h3>\n <h3 id=\"CAbstract\"><code>CAbstract                    (name:<a class=\"type\" title=\"\" href=\"path\">Path</a>, params:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/CType.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/CType.html</a>\n  </p>\n</div>\n","haxe/rtti/ctypetools":"<h1> class CTypeTools </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"toString\"><code><span class=\"label\">static</span> <a href=\"#toString\">toString</a> (t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/CTypeTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/CTypeTools.html</a>\n  </p>\n</div>\n","haxe/rtti/classfield":"<h1>typedef ClassField </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"ctype\">CType</a></code></h3>\n \n<h3 id=\"set\"><code> <a href=\"#set\">set</a>:<a class=\"type\" title=\"\" href=\"rights\">Rights</a></code></h3>\n \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"overloads\"><code> <a href=\"#overloads\">overloads</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;&gt;</code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"line\"><code> <a href=\"#line\">line</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;</code></h3>\n \n<h3 id=\"isPublic\"><code> <a href=\"#isPublic\">isPublic</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isOverride\"><code> <a href=\"#isOverride\">isOverride</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"get\"><code> <a href=\"#get\">get</a>:<a class=\"type\" title=\"\" href=\"rights\">Rights</a></code></h3>\n \n<h3 id=\"expr\"><code> <a href=\"#expr\">expr</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/ClassField.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/ClassField.html</a>\n  </p>\n</div>\n","haxe/remoting/socketprotocol":"<h1> class SocketProtocol </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>The Haxe Remoting Socket Protocol is composed of serialized string exchanges.</p> <pre><code>Each string is prefixed with a 2-chars header encoding the string size (up to 4KB)\nand postfixed with the \\0 message delimiting char.\nA request string is composed of the following serialized values :\n</code></pre>\n<ul>\n<li>the boolean true for a request</li>\n<li>an array of strings representing the object+method path</li>\n<li>an array of parameters A response string is composed of the following serialized values :</li>\n<li>the boolean false for a response</li>\n<li>a serialized value representing the result Exceptions are serialized with [serializeException] so they will be thrown immediatly when they are unserialized.</li>\n</ul> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (sock:<a class=\"type\" title=\"\" href=\"socket\">Socket</a>, ctx:<a class=\"type\" title=\"\" href=\"context\">Context</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"context\"><code> <a href=\"#context\">context</a>:<a class=\"type\" title=\"\" href=\"context\">Context</a></code></h3>\n \n<h3 id=\"socket\"><code> <a href=\"#socket\">socket</a>:<a class=\"type\" title=\"\" href=\"socket\">Socket</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"decodeData\"><code><span class=\"label\">dynamic</span> <a href=\"#decodeData\">decodeData</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"encodeMessageLength\"><code><a href=\"#encodeMessageLength\">encodeMessageLength</a> (len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):{c2:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, c1:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;}</code></h3>\n \n<h3 id=\"isRequest\"><code><a href=\"#isRequest\">isRequest</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"messageLength\"><code><a href=\"#messageLength\">messageLength</a> (c1:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, c2:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;</code></h3>\n \n<h3 id=\"processAnswer\"><code><a href=\"#processAnswer\">processAnswer</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"processRequest\"><code><a href=\"#processRequest\">processRequest</a> (data:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?onError:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; ‑&gt; <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt; ‑&gt; <a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a> ‑&gt; <a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"readMessage\"><code><a href=\"#readMessage\">readMessage</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p class=\"availability\">Available on cpp, cs, java, macro, neko, php, python</p>\n \n<h3 id=\"sendAnswer\"><code><a href=\"#sendAnswer\">sendAnswer</a> (answer:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>, ?isException:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"sendMessage\"><code><a href=\"#sendMessage\">sendMessage</a> (msg:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"sendRequest\"><code><a href=\"#sendRequest\">sendRequest</a> (path:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/SocketProtocol.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/SocketProtocol.html</a>\n  </p>\n</div>\n","haxe/rtti/classdef":"<h1>typedef Classdef </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"tdynamic\"><code> <a href=\"#tdynamic\">tdynamic</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;</code></h3>\n \n<h3 id=\"superClass\"><code> <a href=\"#superClass\">superClass</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"pathparams\">PathParams</a>&gt;</code></h3>\n \n<h3 id=\"statics\"><code> <a href=\"#statics\">statics</a>:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;</code></h3>\n \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isInterface\"><code> <a href=\"#isInterface\">isInterface</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"interfaces\"><code> <a href=\"#interfaces\">interfaces</a>:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"pathparams\">PathParams</a>&gt;</code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"fields\"><code> <a href=\"#fields\">fields</a>:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Classdef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Classdef.html</a>\n  </p>\n</div>\n","haxe/rtti/enumfield":"<h1>typedef EnumField </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"args\"><code> <a href=\"#args\">args</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;{t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>, opt:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt;&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/EnumField.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/EnumField.html</a>\n  </p>\n</div>\n","haxe/rtti/enumdef":"<h1>typedef Enumdef </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isExtern\"><code> <a href=\"#isExtern\">isExtern</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"constructors\"><code> <a href=\"#constructors\">constructors</a>:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Enumdef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Enumdef.html</a>\n  </p>\n</div>\n","haxe/rtti/functionargument":"<h1>typedef FunctionArgument </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"value\"><code> <a href=\"#value\">value</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"t\"><code> <a href=\"#t\">t</a>:<a class=\"type\" title=\"\" href=\"ctype\">CType</a></code></h3>\n \n<h3 id=\"opt\"><code> <a href=\"#opt\">opt</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/FunctionArgument.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/FunctionArgument.html</a>\n  </p>\n</div>\n","haxe/rtti/meta":"<h1> class Meta </h1>\n<p>package haxe.rtti</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>An api to access classes and enums metadata at runtime.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getFields\"><code><span class=\"label\">static</span> <a href=\"#getFields\">getFields</a> (t:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;&gt;&gt;</code></h3>\n<p>Returns the metadata that were declared for the given class fields or enum constructors</p> \n<h3 id=\"getStatics\"><code><span class=\"label\">static</span> <a href=\"#getStatics\">getStatics</a> (t:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;&gt;&gt;</code></h3>\n<p>Returns the metadata that were declared for the given class static fields</p> \n<h3 id=\"getType\"><code><span class=\"label\">static</span> <a href=\"#getType\">getType</a> (t:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;&gt;</code></h3>\n<p>Returns the metadata that were declared for the given type (class or enum)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Meta.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Meta.html</a>\n  </p>\n</div>\n","haxe/rtti/metadata":"<h1>typedef MetaData </h1>\n<p>package haxe.rtti</p> <p> alias for <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{params:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt; </p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/MetaData.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/MetaData.html</a>\n  </p>\n</div>\n","haxe/rtti/path":"<h1>typedef Path </h1>\n<p>package haxe.rtti</p> <p> alias for <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> </p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Path.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Path.html</a>\n  </p>\n</div>\n","haxe/rtti/pathparams":"<h1>typedef PathParams </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/PathParams.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/PathParams.html</a>\n  </p>\n</div>\n","haxe/rtti/platforms":"<h1>typedef Platforms </h1>\n<p>package haxe.rtti</p> <p> alias for <a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; </p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Platforms.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Platforms.html</a>\n  </p>\n</div>\n","haxe/rtti/rights":"<h1>enum Rights </h1>\n<p>package haxe.rtti</p>\n\n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"RNormal\"><code>RNormal        </code></h3>\n <h3 id=\"RNo\"><code>RNo        </code></h3>\n <h3 id=\"RCall\"><code>RCall                    (m:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"RMethod\"><code>RMethod        </code></h3>\n <h3 id=\"RDynamic\"><code>RDynamic        </code></h3>\n <h3 id=\"RInline\"><code>RInline        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Rights.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Rights.html</a>\n  </p>\n</div>\n","haxe/remoting/proxy":"<h1> class Proxy&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.remoting</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This class is magic. When you extend it with a class C, it will automaticaly create a stub class with all public methods forwarding remoting messages over the connection.</p> </div><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/remoting/Proxy.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/remoting/Proxy.html</a>\n  </p>\n</div>\n","haxe/rtti/rtti":"<h1> class Rtti </h1>\n<p>package haxe.rtti</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>Rtti is a helper class which supplements the <code>@:rtti</code> metadata.</p> </div>  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getRtti\"><code><span class=\"label\">static</span> <a href=\"#getRtti\">getRtti</a>&lt;<span class=\"type\">T</span>&gt; (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"../../class\">Class</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"\" href=\"classdef\">Classdef</a></code></h3>\n<p>Returns the <code>haxe.rtti.CType.Classdef</code> corresponding to class <code>c</code>.</p> <p>If <code>c</code> has no runtime type information, e.g. because no <code>@:rtti@</code> was added, <code><a href=\"../../null\">null</a></code> is returned.</p> <h3>If <code>c</code> is null, the result is unspecified.</h3> \n<h3 id=\"hasRtti\"><code><span class=\"label\">static</span> <a href=\"#hasRtti\">hasRtti</a>&lt;<span class=\"type\">T</span>&gt; (c:<a class=\"type\" title=\"An abstract type that represents a Class.\" href=\"../../class\">Class</a>&lt;<span class=\"type\">T</span>&gt;):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<h3>Tells if <code>c</code> has runtime type information.</h3> <h3>If <code>c</code> is null, the result is unspecified.</h3><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Rtti.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Rtti.html</a>\n  </p>\n</div>\n","haxe/rtti/typeapi":"<h1> class TypeApi </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"constructorEq\"><code><span class=\"label\">static</span> <a href=\"#constructorEq\">constructorEq</a> (c1:<a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>, c2:<a class=\"type\" title=\"\" href=\"enumfield\">EnumField</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"fieldEq\"><code><span class=\"label\">static</span> <a href=\"#fieldEq\">fieldEq</a> (f1:<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>, f2:<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"isVar\"><code><span class=\"label\">static</span> <a href=\"#isVar\">isVar</a> (t:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"rightsEq\"><code><span class=\"label\">static</span> <a href=\"#rightsEq\">rightsEq</a> (r1:<a class=\"type\" title=\"\" href=\"rights\">Rights</a>, r2:<a class=\"type\" title=\"\" href=\"rights\">Rights</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"typeEq\"><code><span class=\"label\">static</span> <a href=\"#typeEq\">typeEq</a> (t1:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>, t2:<a class=\"type\" title=\"\" href=\"ctype\">CType</a>):<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"typeInfos\"><code><span class=\"label\">static</span> <a href=\"#typeInfos\">typeInfos</a> (t:<a class=\"type\" title=\"\" href=\"typetree\">TypeTree</a>):<a class=\"type\" title=\"\" href=\"typeinfos\">TypeInfos</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/TypeApi.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/TypeApi.html</a>\n  </p>\n</div>\n","haxe/rtti/typeinfos":"<h1>typedef TypeInfos </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/TypeInfos.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/TypeInfos.html</a>\n  </p>\n</div>\n","haxe/rtti/typeparams":"<h1>typedef TypeParams </h1>\n<p>package haxe.rtti</p> <p> alias for <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt; </p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/TypeParams.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/TypeParams.html</a>\n  </p>\n</div>\n","haxe/rtti/typeroot":"<h1>typedef TypeRoot </h1>\n<p>package haxe.rtti</p> <p> alias for <a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typetree\">TypeTree</a>&gt; </p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/TypeRoot.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/TypeRoot.html</a>\n  </p>\n</div>\n","haxe/rtti/typetree":"<h1>enum TypeTree </h1>\n<p>package haxe.rtti</p>\n\n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"TPackage\"><code>TPackage                    (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, full:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, subs:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"typetree\">TypeTree</a>&gt;)        </code></h3>\n <h3 id=\"TClassdecl\"><code>TClassdecl                    (c:<a class=\"type\" title=\"\" href=\"classdef\">Classdef</a>)        </code></h3>\n <h3 id=\"TEnumdecl\"><code>TEnumdecl                    (e:<a class=\"type\" title=\"\" href=\"enumdef\">Enumdef</a>)        </code></h3>\n <h3 id=\"TTypedecl\"><code>TTypedecl                    (t:<a class=\"type\" title=\"\" href=\"typedef\">Typedef</a>)        </code></h3>\n <h3 id=\"TAbstractdecl\"><code>TAbstractdecl                    (a:<a class=\"type\" title=\"\" href=\"abstractdef\">Abstractdef</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/TypeTree.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/TypeTree.html</a>\n  </p>\n</div>\n","haxe/rtti/typedef":"<h1>typedef Typedef </h1>\n<p>package haxe.rtti</p> \n<p>defined in haxe.rtti.CType</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"types\"><code> <a href=\"#types\">types</a>:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"\" href=\"ctype\">CType</a>&gt;</code></h3>\n \n<h3 id=\"type\"><code> <a href=\"#type\">type</a>:<a class=\"type\" title=\"\" href=\"ctype\">CType</a></code></h3>\n \n<h3 id=\"platforms\"><code> <a href=\"#platforms\">platforms</a>:<a class=\"type\" title=\"\" href=\"platforms\">Platforms</a></code></h3>\n \n<h3 id=\"path\"><code> <a href=\"#path\">path</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"\" href=\"typeparams\">TypeParams</a></code></h3>\n \n<h3 id=\"module\"><code> <a href=\"#module\">module</a>:<a class=\"type\" title=\"\" href=\"path\">Path</a></code></h3>\n \n<h3 id=\"meta\"><code> <a href=\"#meta\">meta</a>:<a class=\"type\" title=\"\" href=\"metadata\">MetaData</a></code></h3>\n \n<h3 id=\"isPrivate\"><code> <a href=\"#isPrivate\">isPrivate</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n \n<h3 id=\"file\"><code> <a href=\"#file\">file</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"doc\"><code> <a href=\"#doc\">doc</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/Typedef.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/Typedef.html</a>\n  </p>\n</div>\n","haxe/rtti/xmlparser":"<h1> class XmlParser </h1>\n<p>package haxe.rtti</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"root\"><code> <a href=\"#root\">root</a>:<a class=\"type\" title=\"\" href=\"typeroot\">TypeRoot</a></code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"newField\"><code><span class=\"label\">dynamic</span> <a href=\"#newField\">newField</a> (c:<a class=\"type\" title=\"\" href=\"classdef\">Classdef</a>, f:<a class=\"type\" title=\"\" href=\"classfield\">ClassField</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"process\"><code><a href=\"#process\">process</a> (x:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>, platform:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"processElement\"><code><a href=\"#processElement\">processElement</a> (x:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>):<a class=\"type\" title=\"\" href=\"typetree\">TypeTree</a></code></h3>\n \n<h3 id=\"sort\"><code><a href=\"#sort\">sort</a> (?l:<a class=\"type\" title=\"\" href=\"typeroot\">TypeRoot</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/rtti/XmlParser.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/rtti/XmlParser.html</a>\n  </p>\n</div>\n","haxe/web/dispatchconfig":"<h1>typedef DispatchConfig </h1>\n<p>package haxe.web</p> \n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"rules\"><code> <a href=\"#rules\">rules</a>:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"obj\"><code> <a href=\"#obj\">obj</a>:<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/DispatchConfig.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/DispatchConfig.html</a>\n  </p>\n</div>\n","haxe/web/dispatcherror":"<h1>enum DispatchError </h1>\n<p>package haxe.web</p>\n\n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"DENotFound\"><code>DENotFound                    (part:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"DEInvalidValue\"><code>DEInvalidValue        </code></h3>\n <h3 id=\"DEMissing\"><code>DEMissing        </code></h3>\n <h3 id=\"DEMissingParam\"><code>DEMissingParam                    (p:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"DETooManyValues\"><code>DETooManyValues        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/DispatchError.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/DispatchError.html</a>\n  </p>\n</div>\n","haxe/web/dispatchrule":"<h1>enum DispatchRule </h1>\n<p>package haxe.web</p>\n\n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"DRMatch\"><code>DRMatch                    (r:<a class=\"type\" title=\"\" href=\"matchrule\">MatchRule</a>)        </code></h3>\n <h3 id=\"DRMult\"><code>DRMult                    (r:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"matchrule\">MatchRule</a>&gt;)        </code></h3>\n <h3 id=\"DRArgs\"><code>DRArgs                    (r:<a class=\"type\" title=\"\" href=\"dispatchrule\">DispatchRule</a>, args:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;{rule:<a class=\"type\" title=\"\" href=\"matchrule\">MatchRule</a>, opt:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>, name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>}&gt;, opt:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"DRMeta\"><code>DRMeta                    (r:<a class=\"type\" title=\"\" href=\"dispatchrule\">DispatchRule</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/DispatchRule.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/DispatchRule.html</a>\n  </p>\n</div>\n","haxe/web/lock":"<h1>typedef Lock&lt;<span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.web</p> <p> alias for <span class=\"type\">T</span> </p> \n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p> <div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/Lock.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/Lock.html</a>\n  </p>\n</div>\n","haxe/web/matchrule":"<h1>enum MatchRule </h1>\n<p>package haxe.web</p>\n\n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"MRInt\"><code>MRInt        </code></h3>\n <h3 id=\"MRBool\"><code>MRBool        </code></h3>\n <h3 id=\"MRFloat\"><code>MRFloat        </code></h3>\n <h3 id=\"MRString\"><code>MRString        </code></h3>\n <h3 id=\"MRDate\"><code>MRDate        </code></h3>\n <h3 id=\"MREnum\"><code>MREnum                    (e:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n <h3 id=\"MRDispatch\"><code>MRDispatch        </code></h3>\n <h3 id=\"MRSpod\"><code>MRSpod                    (c:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, lock:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"MROpt\"><code>MROpt                    (r:<a class=\"type\" title=\"\" href=\"matchrule\">MatchRule</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/MatchRule.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/MatchRule.html</a>\n  </p>\n</div>\n","haxe/web/redirect":"<h1> class Redirect </h1>\n<p>package haxe.web</p> \n<p>defined in haxe.web.Dispatch</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/Redirect.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/Redirect.html</a>\n  </p>\n</div>\n","haxe/web/request":"<h1> class Request </h1>\n<p>package haxe.web</p> <p class=\"availability\">Available on js, macro, neko, php</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"getHostName\"><code><span class=\"label\">static</span> <a href=\"#getHostName\">getHostName</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns the local server host name</p> \n<h3 id=\"getParams\"><code><span class=\"label\">static</span> <a href=\"#getParams\">getParams</a> ():<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n<p>Returns the current page GET and POST parameters (only GET parameters for Javascript)</p> \n<h3 id=\"getURI\"><code><span class=\"label\">static</span> <a href=\"#getURI\">getURI</a> ():<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<p>Returns the original request URL (before any server internal redirections)</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/Request.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/Request.html</a>\n  </p>\n</div>\n","haxe/xml/attrib":"<h1>enum Attrib </h1>\n<p>package haxe.xml</p>\n\n<p>defined in haxe.xml.Check</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"Att\"><code>Att                    (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, filter:<a class=\"type\" title=\"\" href=\"filter\">Filter</a>, defvalue:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Attrib.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Attrib.html</a>\n  </p>\n</div>\n","haxe/xml/check":"<h1> class Check </h1>\n<p>package haxe.xml</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"checkDocument\"><code><span class=\"label\">static</span> <a href=\"#checkDocument\">checkDocument</a> (x:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>, r:<a class=\"type\" title=\"\" href=\"rule\">Rule</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"checkNode\"><code><span class=\"label\">static</span> <a href=\"#checkNode\">checkNode</a> (x:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>, r:<a class=\"type\" title=\"\" href=\"rule\">Rule</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Check.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Check.html</a>\n  </p>\n</div>\n","haxe/xml/fast":"<h1> class Fast </h1>\n<p>package haxe.xml</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (x:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"att\"><code> <span class=\"label\">read only</span> <a href=\"#att\">att</a>:<span class=\"type\">AttribAccess</span> </code></h3>\n \n<h3 id=\"elements\"><code> <span class=\"label\">read only</span> <a href=\"#elements\">elements</a>:<a class=\"type\" title=\"An Iterator is a structure that permits iteration over elements of type T.\" href=\"../../iterator\">Iterator</a>&lt;<a class=\"type\" title=\"\" href=\"fast\">Fast</a>&gt;</code></h3>\n \n<h3 id=\"has\"><code> <span class=\"label\">read only</span> <a href=\"#has\">has</a>:<span class=\"type\">HasAttribAccess</span> </code></h3>\n \n<h3 id=\"hasNode\"><code> <span class=\"label\">read only</span> <a href=\"#hasNode\">hasNode</a>:<span class=\"type\">HasNodeAccess</span> </code></h3>\n \n<h3 id=\"innerData\"><code> <span class=\"label\">read only</span> <a href=\"#innerData\">innerData</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"innerHTML\"><code> <span class=\"label\">read only</span> <a href=\"#innerHTML\">innerHTML</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"name\"><code> <span class=\"label\">read only</span> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"node\"><code> <span class=\"label\">read only</span> <a href=\"#node\">node</a>:<span class=\"type\">NodeAccess</span> </code></h3>\n \n<h3 id=\"nodes\"><code> <span class=\"label\">read only</span> <a href=\"#nodes\">nodes</a>:<span class=\"type\">NodeListAccess</span> </code></h3>\n \n<h3 id=\"x\"><code> <span class=\"label\">read only</span> <a href=\"#x\">x</a>:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Fast.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Fast.html</a>\n  </p>\n</div>\n","haxe/xml/filter":"<h1>enum Filter </h1>\n<p>package haxe.xml</p>\n\n<p>defined in haxe.xml.Check</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"FInt\"><code>FInt        </code></h3>\n <h3 id=\"FBool\"><code>FBool        </code></h3>\n <h3 id=\"FEnum\"><code>FEnum                    (values:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;)        </code></h3>\n <h3 id=\"FReg\"><code>FReg                    (matcher:<a class=\"type\" title=\"The EReg class represents regular expressions.\" href=\"../../ereg\">EReg</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Filter.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Filter.html</a>\n  </p>\n</div>\n","haxe/xml/parser":"<h1> class Parser </h1>\n<p>package haxe.xml</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"parse\"><code><span class=\"label\">static</span> <a href=\"#parse\">parse</a> (str:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, strict:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = false):<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a></code></h3>\n<p>Parses the String into an XML Document. Set strict parsing to true in order to enable a strict check of XML attributes and entities.</p><div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Parser.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Parser.html</a>\n  </p>\n</div>\n","haxe/xml/printer":"<h1> class Printer </h1>\n<p>package haxe.xml</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"print\"><code><span class=\"label\">static</span> <a href=\"#print\">print</a> (xml:<a class=\"type\" title=\"\" href=\"../../xml\">Xml</a>, pretty:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = false):<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Printer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Printer.html</a>\n  </p>\n</div>\n","haxe/xml/proxy":"<h1> class Proxy&lt;<span class=\"type\">Const</span>, <span class=\"type\">T</span>&gt; </h1>\n<p>package haxe.xml</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>This proxy can be inherited with an XML file name parameter. It will only allow access to fields which corresponds to an \"id\" attribute value in the XML file :</p> <p>[ class MyXml extends haxe.xml.Proxy { } ... var h = new haxe.ds.StringMap<mystructure>(); // ... fill h with \"my.xml\" content var m = new MyXml(h.get); trace(m.myNode.structField); // access to \"myNode\" is only possible // if you have an id=\"myNode\" attribute // in your XML, and completion works as well ]</mystructure></p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (f:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a> ‑&gt; <span class=\"type\">T</span>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"resolve\"><code><a href=\"#resolve\">resolve</a> (k:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>):<span class=\"type\">T</span> </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Proxy.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Proxy.html</a>\n  </p>\n</div>\n","haxe/xml/rule":"<h1>enum Rule </h1>\n<p>package haxe.xml</p>\n\n<p>defined in haxe.xml.Check</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"RNode\"><code>RNode                    (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, attribs:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"attrib\">Attrib</a>&gt;, childs:<a class=\"type\" title=\"\" href=\"rule\">Rule</a>)        </code></h3>\n <h3 id=\"RData\"><code>RData                    (filter:<a class=\"type\" title=\"\" href=\"filter\">Filter</a>)        </code></h3>\n <h3 id=\"RMulti\"><code>RMulti                    (rule:<a class=\"type\" title=\"\" href=\"rule\">Rule</a>, atLeastOne:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"RList\"><code>RList                    (rules:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"rule\">Rule</a>&gt;, ordered:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>)        </code></h3>\n <h3 id=\"RChoice\"><code>RChoice                    (choices:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"rule\">Rule</a>&gt;)        </code></h3>\n <h3 id=\"ROptional\"><code>ROptional                    (rule:<a class=\"type\" title=\"\" href=\"rule\">Rule</a>)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/xml/Rule.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/xml/Rule.html</a>\n  </p>\n</div>\n","haxe/zip/compress":"<h1> class Compress </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (level:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"execute\"><code><a href=\"#execute\">execute</a> (src:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, srcPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, dst:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, dstPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):{write:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, read:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, done:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>}</code></h3>\n \n<h3 id=\"setFlushMode\"><code><a href=\"#setFlushMode\">setFlushMode</a> (f:<a class=\"type\" title=\"\" href=\"flushmode\">FlushMode</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (s:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, level:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Compress.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Compress.html</a>\n  </p>\n</div>\n","haxe/zip/entry":"<h1>typedef Entry </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Properties</h2>  \n<h3 id=\"fileTime\"><code> <a href=\"#fileTime\">fileTime</a>:<a class=\"type\" title=\"The Date class provides a basic structure for date and time related information.\" href=\"../../date\">Date</a></code></h3>\n \n<h3 id=\"fileSize\"><code> <a href=\"#fileSize\">fileSize</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"fileName\"><code> <a href=\"#fileName\">fileName</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"extraFields\"><code> <a href=\"#extraFields\">extraFields</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"extrafield\">ExtraField</a>&gt;&gt;&gt;</code></h3>\n \n<h3 id=\"dataSize\"><code> <a href=\"#dataSize\">dataSize</a>:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n \n<h3 id=\"data\"><code> <a href=\"#data\">data</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>&gt;</code></h3>\n \n<h3 id=\"crc32\"><code> <a href=\"#crc32\">crc32</a>:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;</code></h3>\n \n<h3 id=\"compressed\"><code> <a href=\"#compressed\">compressed</a>:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Entry.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Entry.html</a>\n  </p>\n</div>\n","haxe/zip/extrafield":"<h1>enum ExtraField </h1>\n<p>package haxe.zip</p>\n\n<p>defined in haxe.zip.Entry</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"FUnknown\"><code>FUnknown                    (tag:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, bytes:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>)        </code></h3>\n <h3 id=\"FInfoZipUnicodePath\"><code>FInfoZipUnicodePath                    (name:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, crc:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n <h3 id=\"FUtf8\"><code>FUtf8        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/ExtraField.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/ExtraField.html</a>\n  </p>\n</div>\n","haxe/zip/flushmode":"<h1>enum FlushMode </h1>\n<p>package haxe.zip</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"NO\"><code>NO        </code></h3>\n <h3 id=\"SYNC\"><code>SYNC        </code></h3>\n <h3 id=\"FULL\"><code>FULL        </code></h3>\n <h3 id=\"FINISH\"><code>FINISH        </code></h3>\n <h3 id=\"BLOCK\"><code>BLOCK        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/FlushMode.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/FlushMode.html</a>\n  </p>\n</div>\n","haxe/web/dispatch":"<h1> class Dispatch </h1>\n<p>package haxe.web</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, params:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;)</code></h3>\n  <h2 class=\"section\">Fields</h2>  \n<h3 id=\"cfg\"><code> <a href=\"#cfg\">cfg</a>:<a class=\"type\" title=\"\" href=\"dispatchconfig\">DispatchConfig</a></code></h3>\n \n<h3 id=\"name\"><code> <a href=\"#name\">name</a>:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a></code></h3>\n \n<h3 id=\"params\"><code> <a href=\"#params\">params</a>:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n \n<h3 id=\"parts\"><code> <a href=\"#parts\">parts</a>:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"dispatch\"><code><a href=\"#dispatch\">dispatch</a> (obj:{}):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"getParams\"><code><a href=\"#getParams\">getParams</a> ():<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n \n<h3 id=\"onMeta\"><code><span class=\"label\">dynamic</span> <a href=\"#onMeta\">onMeta</a> (v:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, args:<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a>&gt;&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"redirect\"><code><a href=\"#redirect\">redirect</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, ?params:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"runtimeDispatch\"><code><a href=\"#runtimeDispatch\">runtimeDispatch</a> (cfg:<a class=\"type\" title=\"\" href=\"dispatchconfig\">DispatchConfig</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"runtimeGetParams\"><code><a href=\"#runtimeGetParams\">runtimeGetParams</a> (cfgIndex:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"Dynamic is a special type which is compatible with all other types.\" href=\"../../dynamic\">Dynamic</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"checkMeta\"><code><span class=\"label\">static</span> <span class=\"label\">dynamic</span> <a href=\"#checkMeta\">checkMeta</a> (f:<a class=\"type\" title=\"\" href=\"../macro/classfield\">ClassField</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"getRunParam\"><code><span class=\"label\">static</span> <a href=\"#getRunParam\">getRunParam</a> (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):Unknown</code></h3>\n<p class=\"availability\">Available on macro</p>\n \n<h3 id=\"make\"><code><span class=\"label\">static</span> <a href=\"#make\">make</a> (obj:{}):<a class=\"type\" title=\"\" href=\"dispatchconfig\">DispatchConfig</a></code></h3>\n \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (url:<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, params:<a class=\"type\" title=\"Map allows key to value mapping for arbitrary value types, and many key types.\" href=\"../../map\">Map</a>&lt;<a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>, <a class=\"type\" title=\"The basic String class.\" href=\"../../string\">String</a>&gt;, obj:{}):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/web/Dispatch.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/web/Dispatch.html</a>\n  </p>\n</div>\n","haxe/zip/hufftools":"<h1> class HuffTools </h1>\n<p>package haxe.zip</p> \n<p>defined in haxe.zip.Huffman</p>\n<p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> ()</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"make\"><code><a href=\"#make\">make</a> (lengths:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>&gt;, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, nlengths:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, maxbits:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"huffman\">Huffman</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/HuffTools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/HuffTools.html</a>\n  </p>\n</div>\n","haxe/zip/huffman":"<h1>enum Huffman </h1>\n<p>package haxe.zip</p>\n<p class=\"availability\">Available on all platforms</p>  <h2 class=\"section\">Values</h2>  <h3 id=\"Found\"><code>Found                    (i:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)        </code></h3>\n <h3 id=\"NeedBit\"><code>NeedBit                    (left:<a class=\"type\" title=\"\" href=\"huffman\">Huffman</a>, right:<a class=\"type\" title=\"\" href=\"huffman\">Huffman</a>)        </code></h3>\n <h3 id=\"NeedBits\"><code>NeedBits                    (n:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, table:<a class=\"type\" title=\"An Array is a storage for values.\" href=\"../../array\">Array</a>&lt;<a class=\"type\" title=\"\" href=\"huffman\">Huffman</a>&gt;)        </code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Huffman.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Huffman.html</a>\n  </p>\n</div>\n","haxe/zip/inflateimpl":"<h1> class InflateImpl </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>   <div class=\"indent\"> <p>A pure Haxe implementation of the ZLIB Inflate algorithm which allows reading compressed data without any platform-specific support.</p> </div>  <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../io/input\">Input</a>, header:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true, crc:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a> = true)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"readBytes\"><code><a href=\"#readBytes\">readBytes</a> (b:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, pos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, len:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../io/input\">Input</a>, bufsize:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a> = 65536):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/InflateImpl.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/InflateImpl.html</a>\n  </p>\n</div>\n","haxe/zip/reader":"<h1> class Reader </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../io/input\">Input</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"read\"><code><a href=\"#read\">read</a> ():<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"entry\">Entry</a>&gt;</code></h3>\n \n<h3 id=\"readEntryHeader\"><code><a href=\"#readEntryHeader\">readEntryHeader</a> ():<a class=\"type\" title=\"\" href=\"entry\">Entry</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"readZip\"><code><span class=\"label\">static</span> <a href=\"#readZip\">readZip</a> (i:<a class=\"type\" title=\"An Input is an abstract reader.\" href=\"../io/input\">Input</a>):<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"entry\">Entry</a>&gt;</code></h3>\n \n<h3 id=\"unzip\"><code><span class=\"label\">static</span> <a href=\"#unzip\">unzip</a> (f:<a class=\"type\" title=\"\" href=\"entry\">Entry</a>):<a class=\"type\" title=\"&lt;code&gt;&lt;a href=\" . href=\"../../null\">Null</a>&lt;<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>&gt;</code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Reader.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Reader.html</a>\n  </p>\n</div>\n","haxe/zip/tools":"<h1> class Tools </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"compress\"><code><span class=\"label\">static</span> <a href=\"#compress\">compress</a> (f:<a class=\"type\" title=\"\" href=\"entry\">Entry</a>, level:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Tools.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Tools.html</a>\n  </p>\n</div>\n","haxe/zip/uncompress":"<h1> class Uncompress </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (?windowBits:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"close\"><code><a href=\"#close\">close</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"execute\"><code><a href=\"#execute\">execute</a> (src:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, srcPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, dst:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, dstPos:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):{write:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, read:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>, done:<a class=\"type\" title=\"The standard Boolean type, which can either be true or false.\" href=\"../../bool\">Bool</a>}</code></h3>\n \n<h3 id=\"setFlushMode\"><code><a href=\"#setFlushMode\">setFlushMode</a> (f:<a class=\"type\" title=\"\" href=\"flushmode\">FlushMode</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n  <h2 class=\"section\">Static methods</h2>  \n<h3 id=\"run\"><code><span class=\"label\">static</span> <a href=\"#run\">run</a> (src:<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a>, ?bufsize:<a class=\"type\" title=\"The standard Int type.\" href=\"../../int\">Int</a>):<a class=\"type\" title=\"\" href=\"../io/bytes\">Bytes</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Uncompress.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Uncompress.html</a>\n  </p>\n</div>\n","haxe/zip/writer":"<h1> class Writer </h1>\n<p>package haxe.zip</p> <p class=\"availability\">Available on all platforms</p>     <h2 class=\"section\">Constructor</h2>  \n<h3 id=\"new\"><code><a href=\"#new\">new</a> (o:<a class=\"type\" title=\"An Output is an abstract write.\" href=\"../io/output\">Output</a>)</code></h3>\n  <h2 class=\"section\">Methods</h2>  \n<h3 id=\"write\"><code><a href=\"#write\">write</a> (files:<a class=\"type\" title=\"A linked-list of elements.\" href=\"../../list\">List</a>&lt;<a class=\"type\" title=\"\" href=\"entry\">Entry</a>&gt;):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"writeCDR\"><code><a href=\"#writeCDR\">writeCDR</a> ():<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n \n<h3 id=\"writeEntryHeader\"><code><a href=\"#writeEntryHeader\">writeEntryHeader</a> (f:<a class=\"type\" title=\"\" href=\"entry\">Entry</a>):<a class=\"type\" title=\"The standard Void type.\" href=\"../../void\">Void</a></code></h3>\n<div class=\"_attribution\">\n  <p class=\"_attribution-p\">\n    &copy; 2005&ndash;2016 Haxe Foundation<br>Licensed under a MIT license.<br>\n    <a href=\"http://api.haxe.org/haxe/zip/Writer.html\" class=\"_attribution-link\">http://api.haxe.org/haxe/zip/Writer.html</a>\n  </p>\n</div>\n"}